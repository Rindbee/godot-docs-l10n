# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/contributing/development/core_and_modules/core_types.rst:4
msgid "Core types"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:6
msgid "Godot has a rich set of classes and templates that compose its core, and everything is built upon them."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:9
msgid "This reference will try to list them in order for their better understanding."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:13
msgid "Definitions"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:15
msgid "Godot uses the standard C99 datatypes, such as ``uint8_t``, ``uint32_t``, ``int64_t``, etc. which are nowadays supported by every compiler. Reinventing the wheel for those is not fun, as it makes code more difficult to read."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:20
msgid "In general, care is not taken to use the most efficient datatype for a given task unless using large structures or arrays. ``int`` is used through most of the code unless necessary. This is done because nowadays every device has at least a 32-bit bus and can do such operations in one cycle. It makes code more readable too."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:26
msgid "For files or memory sizes, ``size_t`` is used, which is guaranteed to be 64-bit."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:29
msgid "For Unicode characters, CharType instead of wchar_t is used, because many architectures have 4 bytes long wchar_t, where 2 bytes might be desired. However, by default, this has not been forced and CharType maps directly to wchar_t."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:34
msgid "`core/typedefs.h <https://github.com/godotengine/godot/blob/master/core/typedefs.h>`__"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:37
msgid "Memory model"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:39
msgid "PC is a wonderful architecture. Computers often have gigabytes of RAM, terabytes of storage and gigahertz of CPU, and when an application needs more resources the OS will swap out the inactive ones. Other architectures (like mobile or consoles) are in general more limited."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:44
msgid "The most common memory model is the heap, where an application will request a region of memory, and the underlying OS will try to fit it somewhere and return it. This often works best and is flexible, but over time and with abuse, this can lead to segmentation."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:49
msgid "Segmentation slowly creates holes that are too small for most common allocations, so that memory is wasted. There is a lot of literature about heap and segmentation, so this topic will not be developed further here. Modern operating systems use paged memory, which helps mitigate the problem of segmentation but doesn't solve it."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:55
msgid "However, in many studies and tests, it is shown that given enough memory, if the maximum allocation size is below a given threshold in proportion to the maximum heap size and proportion of memory intended to be unused, segmentation will not be a problem over time as it will remain constant. In other words, leave 10-20% of your memory free and perform all small allocations and you are fine."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:62
msgid "Godot ensures that all objects that can be allocated dynamically are small (less than a few kB at most). But what happens if an allocation is too large (like an image or mesh geometry or large array)? In this case Godot has the option to use a dynamic memory pool. This memory needs to be locked to be accessed, and if an allocation runs out of memory, the pool will be rearranged and compacted on demand. Depending on the need of the game, the programmer can configure the dynamic memory pool size."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:71
msgid "Allocating memory"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:73
msgid "Godot has many tools for tracking memory usage in a game, especially during debug. Because of this, the regular C and C++ library calls should not be used. Instead, a few other ones are provided."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:77
msgid "For C-style allocation, Godot provides a few macros:"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:85
msgid "These are equivalent to the usual ``malloc()``, ``realloc()``, and ``free()`` of the C standard library."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:88
msgid "For C++-style allocation, special macros are provided:"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:98
msgid "These are equivalent to ``new``, ``delete``, ``new[]``, and ``delete[]`` respectively."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:101
msgid "memnew/memdelete also use a little C++ magic and notify Objects right after they are created, and right before they are deleted."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:104
msgid "For dynamic memory, use one of Godot's sequence types such as ``Vector<>`` or ``LocalVector<>``. ``Vector<>`` behaves much like an STL ``std::vector<>``, but is simpler and uses Copy-On-Write (CoW) semantics. CoW copies of ``Vector<>`` can safely access the same data from different threads, but several threads cannot access the same ``Vector<>`` instance safely. It can be safely passed via public API if it has a ``Packed`` alias."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:111
msgid "The ``Packed*Array`` :ref:`types <doc_gdscript_packed_arrays>` are aliases for specific ``Vector<*>`` types (e.g., ``PackedByteArray``, ``PackedInt32Array``) that are accessible via GDScript. Outside of core, prefer using the ``Packed*Array`` aliases for functions exposed to scripts, and ``Vector<>`` for other occasions."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:117
msgid "``LocalVector<>`` is much more like ``std::vector`` than ``Vector<>``. It is non-CoW, with less overhead. It is intended for internal use where the benefits of CoW are not needed. Note that neither ``LocalVector<>`` nor ``Vector<>`` are drop-in replacements for each other. They are two unrelated types with similar interfaces, both using a buffer as their storage strategy."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:124
msgid "``List<>`` is another Godot sequence type, using a doubly-linked list as its storage strategy. Prefer ``Vector<>`` (or ``LocalVector<>``) over ``List<>`` unless you're sure you need it, as cache locality and memory fragmentation tend to be more important with small collections."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:129
msgid "`core/os/memory.h <https://github.com/godotengine/godot/blob/master/core/os/memory.h>`__"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:132
msgid "Containers"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:134
msgid "Godot provides its own set of containers, which means STL containers like ``std::string`` and ``std::vector`` are generally not used in the codebase. See :ref:`doc_faq_why_not_stl` for more information."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:137
msgid "A ðŸ“œ icon denotes the type is part of :ref:`Variant <doc_variant_class>`. This means it can be used as a parameter or return value of a method exposed to the scripting API."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:142
msgid "Godot datatype"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:142
msgid "Closest C++ STL datatype"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:142
msgid "Comment"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:144
msgid "|string| ðŸ“œ"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:144
#: ../../docs/contributing/development/core_and_modules/core_types.rst:156
msgid "``std::string``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:144
msgid "**Use this as the \"default\" string type.** ``String`` uses UTF-32 encoding to improve performance thanks to its fixed character size."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:147
msgid "|vector|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:147
#: ../../docs/contributing/development/core_and_modules/core_types.rst:159
#: ../../docs/contributing/development/core_and_modules/core_types.rst:162
#: ../../docs/contributing/development/core_and_modules/core_types.rst:166
#: ../../docs/contributing/development/core_and_modules/core_types.rst:169
msgid "``std::vector``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:147
msgid "**Use this as the \"default\" vector type.** Uses copy-on-write (COW) semantics. This means it's generally slower but can be copied around almost for free."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:150
msgid "|hash_set|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:150
msgid "``std::unordered_set``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:150
msgid "**Use this as the \"default\" set type.**"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:152
msgid "|a_hash_map|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:152
#: ../../docs/contributing/development/core_and_modules/core_types.rst:191
#: ../../docs/contributing/development/core_and_modules/core_types.rst:199
#: ../../docs/contributing/development/core_and_modules/core_types.rst:203
msgid "``std::unordered_map``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:152
msgid "**Use this as the \"default\" map type.** Does not preserve insertion order. Note that pointers into the map, as well as iterators, are not stable under mutations. If either of these affordances are needed, use ``HashMap`` instead."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:156
msgid "|string_name| ðŸ“œ"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:156
msgid "Uses string interning for fast comparisons. Use this for static strings that are referenced frequently and used in multiple locations in the engine."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:159
msgid "|local_vector|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:159
msgid "Closer to ``std::vector`` in semantics. In most situations, ``Vector`` should be preferred."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:162
msgid "|array| ðŸ“œ"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:162
msgid "Values can be of any Variant type. No static typing is imposed. Uses shared reference counting, similar to ``std::shared_ptr``. Uses Vector<Variant> internally."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:166
msgid "|typed_array| ðŸ“œ"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:166
msgid "Subclass of ``Array`` but with static typing for its elements. Not to be confused with ``Packed*Array``, which is internally a ``Vector``."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:169
msgid "|packed_array| ðŸ“œ"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:169
msgid "Alias of ``Vector``, e.g. ``PackedColorArray = Vector<Color>``. Only a limited list of packed array types are available (use ``TypedArray`` otherwise)."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:173
msgid "|list|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:173
msgid "``std::list``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:173
msgid "Linked list type. Generally slower than other array/vector types. Prefer using other types in new code, unless using ``List`` avoids the need for type conversions."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:176
msgid "|fixed_vector|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:176
msgid "``std::array``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:176
msgid "Vector with a fixed capacity (more similar to ``boost::container::static_vector``). This container type is more efficient than other vector-like types because it makes no heap allocations."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:180
msgid "|span|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:180
msgid "``std::span``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:180
msgid "Represents read-only access to a contiguous array without needing to copy any data. See `pull request description <https://github.com/godotengine/godot/pull/100293>`__ for details."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:184
msgid "|rb_set|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:184
msgid "``std::set``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:184
msgid "Uses a `red-black tree <https://en.wikipedia.org/wiki/Red-black_tree>`__ for faster access."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:187
msgid "|v_set|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:187
msgid "``std::flat_set``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:187
msgid "Uses copy-on-write (COW) semantics. This means it's generally slower but can be copied around almost for free. The performance benefits of ``VSet`` aren't established, so prefer using other types."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:191
msgid "|hash_map|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:191
msgid "Defensive (robust but slow) map type. Preserves insertion order. Pointers to keys and values, as well as iterators, are stable under mutation. Use this map type when either of these affordances are needed. Use ``AHashMap`` otherwise."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:196
msgid "|rb_map|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:196
msgid "``std::map``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:196
msgid "Uses a `red-black tree <https://en.wikipedia.org/wiki/Red-black-tree>`__ for faster access."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:199
msgid "|dictionary| ðŸ“œ"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:199
msgid "Keys and values can be of any Variant type. No static typing is imposed. Uses shared reference counting, similar to ``std::shared_ptr``. Preserves insertion order. Uses ``HashMap<Variant>`` internally."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:203
msgid "|typed_dictionary| ðŸ“œ"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:203
msgid "Subclass of ``Dictionary`` but with static typing for its keys and values."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:205
msgid "|pair|"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:205
msgid "``std::pair``"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:205
msgid "Stores a single key-value pair."
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:229
msgid "Math types"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:231
msgid "There are several linear math types available in the ``core/math`` directory:"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:234
msgid "`core/math <https://github.com/godotengine/godot/tree/master/core/math>`__"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:237
msgid "NodePath"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:239
msgid "This is a special datatype used for storing paths in a scene tree and referencing them in an optimized manner:"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:242
msgid "`core/string/node_path.h <https://github.com/godotengine/godot/blob/master/core/string/node_path.h>`__"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:245
msgid "RID"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:247
msgid "RIDs are *Resource IDs*. Servers use these to reference data stored in them. RIDs are opaque, meaning that the data they reference can't be accessed directly. RIDs are unique, even for different types of referenced data:"
msgstr ""

#: ../../docs/contributing/development/core_and_modules/core_types.rst:252
msgid "`core/templates/rid.h <https://github.com/godotengine/godot/blob/master/core/templates/rid.h>`__"
msgstr ""
