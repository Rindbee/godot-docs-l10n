# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:4
msgid "Compiling for macOS"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:10
msgid "This page describes how to compile macOS editor and export template binaries from source. If you're looking to export your project to macOS instead, read :ref:`doc_exporting_for_macos`."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:14
msgid "Requirements"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:16
msgid "For compiling under macOS, the following is required:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:18
msgid "`Python 3.8+ <https://www.python.org/downloads/macos/>`_."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:19
msgid "`SCons 4.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:20
msgid "`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (or the more lightweight Command Line Tools for Xcode)."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:22
msgid "`Vulkan SDK <https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk.dmg>`_ for MoltenVK (macOS doesn't support Vulkan out of the box). The latest Vulkan SDK version can be installed quickly by running ``misc/scripts/install_vulkan_sdk_macos.sh`` within the Godot source repository."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:27
msgid "If you have `Homebrew <https://brew.sh/>`_ installed, you can easily install SCons using the following command::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:32
msgid "Installing Homebrew will also fetch the Command Line Tools for Xcode automatically if you don't have them already."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:35
msgid "Similarly, if you have `MacPorts <https://www.macports.org/>`_ installed, you can easily install SCons using the following command::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:41
msgid "To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:44
msgid "For a general overview of SCons usage for Godot, see :ref:`doc_introduction_to_the_buildsystem`."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:48
msgid "Compiling"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:50
msgid "Start a terminal, go to the root directory of the engine source code."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:52
msgid "To compile for Intel (x86-64) powered Macs, use::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:56
msgid "To compile for Apple Silicon (ARM64) powered Macs, use::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:61
msgid "If you are compiling Godot to make changes or contribute to the engine, you may want to use the SCons options ``dev_build=yes`` or ``dev_mode=yes``. See :ref:`doc_introduction_to_the_buildsystem_development_and_production_aliases` for more info."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:66
msgid "If all goes well, the resulting binary executable will be placed in the ``bin/`` subdirectory. This executable file contains the whole engine and runs without any dependencies. Executing it will bring up the Project Manager."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:71
msgid "Using a standalone editor executable is not recommended, it should be always packaged into an ``.app`` bundle to avoid UI activation issues."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:74
msgid "If you want to use separate editor settings for your own Godot builds and official releases, you can enable :ref:`doc_data_paths_self_contained_mode` by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:80
msgid "Automatic ``.app`` bundle creation"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:82
msgid "To automatically create an ``.app`` bundle like in the official builds, use the ``generate_bundle=yes`` option on the *last* SCons command used to build editor::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:89
msgid "Manual ``.app`` bundle creation"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:91
msgid "To support both architectures in a single \"Universal 2\" binary, run the above two commands and then use ``lipo`` to bundle them together::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:96
msgid "To create an ``.app`` bundle, you need to use the template located in ``misc/dist/macos_tools.app``. Typically, for an optimized editor binary built with ``dev_build=yes``::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:107
msgid "If you are building the ``master`` branch, you also need to include support for the MoltenVK Vulkan portability library. By default, it will be linked statically from your installation of the Vulkan SDK for macOS. You can also choose to link it dynamically by passing ``use_volk=yes`` and including the dynamic library in your ``.app`` bundle::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:117
msgid "Running a headless/server build"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:119
msgid "To run in *headless* mode which provides editor functionality to export projects in an automated manner, use the normal build::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:124
msgid "And then use the ``--headless`` command line argument::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:128
msgid "To compile a debug *server* build which can be used with :ref:`remote debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:133
msgid "To compile a release *server* build which is optimized to run dedicated game servers, use::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:139
msgid "Building export templates"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:141
msgid "To build macOS export templates, you have to compile using the targets without the editor: ``target=template_release`` (release template) and ``target=template_debug``."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:145
msgid "Official templates are *Universal 2* binaries which support both ARM64 and Intel x86_64 architectures."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:148
msgid "To support ARM64 (Apple Silicon) + Intel x86_64::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:155
msgid "To support ARM64 (Apple Silicon) only (smaller file size, but less compatible with older hardware)::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:160
msgid "To create an ``.app`` bundle like in the official builds, you need to use the template located in ``misc/dist/macos_template.app``. This process can be automated by using the ``generate_bundle=yes`` option on the *last* SCons command used to build export templates (so that all binaries can be included). This option also takes care of calling ``lipo`` to create an *Universal 2* binary from two separate ARM64 and x86_64 binaries (if both were compiled beforehand)."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:168
msgid "You also need to include support for the MoltenVK Vulkan portability library. By default, it will be linked statically from your installation of the Vulkan SDK for macOS. You can also choose to link it dynamically by passing ``use_volk=yes`` and including the dynamic library in your ``.app`` bundle::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:177
msgid "In most cases, static linking should be preferred as it makes distribution easier. The main upside of dynamic linking is that it allows updating MoltenVK without having to recompile export templates."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:181
msgid "You can then zip the ``macos_template.app`` folder to reproduce the ``macos.zip`` template from the official Godot distribution::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:187
msgid "Cross-compiling for macOS from Linux"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:189
msgid "It is possible to compile for macOS in a Linux environment (and maybe also in Windows using the Windows Subsystem for Linux). For that, you'll need to install `OSXCross <https://github.com/tpoechtrager/osxcross>`__ to be able to use macOS as a target. First, follow the instructions to install it:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:194
msgid "Clone the `OSXCross repository <https://github.com/tpoechtrager/osxcross>`__ somewhere on your machine (or download a ZIP file and extract it somewhere), e.g.::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:200
msgid "Follow the instructions to package the SDK: https://github.com/tpoechtrager/osxcross#packaging-the-sdk"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:202
msgid "Follow the instructions to install OSXCross: https://github.com/tpoechtrager/osxcross#installation"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:205
msgid "After that, you will need to define the ``OSXCROSS_ROOT`` as the path to the OSXCross installation (the same place where you cloned the repository/extracted the zip), e.g.::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:211
msgid "Now you can compile with SCons like you normally would::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:215
msgid "If you have an OSXCross SDK version different from the one expected by the SCons buildsystem, you can specify a custom one with the ``osxcross_sdk`` argument::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:220
msgid "Troubleshooting"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:223
msgid "Fatal error: 'cstdint' file not found"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:225
msgid "If you get a compilation error of this form early on, it's likely because the Xcode command line tools installation needs to be repaired after a macOS or Xcode update:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:235
msgid "Run these two commands to reinstall Xcode command line tools (enter your administrator password as needed):"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_macos.rst:243
msgid "If it still does not work, try updating Xcode from the Mac App Store and try again."
msgstr ""
