# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:4
msgid "Cross-compiling for iOS on Linux"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:8
msgid "The procedure for this is somewhat complex and requires a lot of steps, but once you have the environment properly configured you can compile Godot for iOS anytime you want."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:13
msgid "Disclaimer"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:15
msgid "While it is possible to compile for iOS on a Linux environment, Apple is very restrictive about the tools to be used (especially hardware-wise), allowing pretty much only their products to be used for development. So this is **not official**. However, in 2010 Apple said they relaxed some of the `App Store review guidelines <https://developer.apple.com/app-store/review/guidelines/>`__ to allow any tool to be used, as long as the resulting binary does not download any code, which means it should be OK to use the procedure described here and cross-compiling the binary."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:25
msgid "Requirements"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:27
msgid "`XCode with the iOS SDK <https://developer.apple.com/download/all/?q=Xcode>`__ (you must be logged into an Apple ID to download Xcode)."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:29
msgid "`Clang >= 3.5 <https://clang.llvm.org>`__ for your development machine installed and in the ``PATH``. It has to be version >= 3.5 to target ``arm64`` architecture."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:32
msgid "`xar <https://mackyle.github.io/xar/>`__ and `pbzx <https://github.com/NiklasRosenstein/pbzx>`__ (required to extract the ``.xip`` archive Xcode comes in)."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:35
msgid "For building xar and pbzx, you may want to follow `this guide <https://gist.github.com/phracker/1944ce190e01963c550566b749bd2b54>`__."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:38
msgid "`cctools-port <https://github.com/tpoechtrager/cctools-port>`__ for the needed build tools. The procedure for building is quite peculiar and is described below."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:42
msgid "This also has some extra dependencies: automake, autogen, libtool."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:45
msgid "Configuring the environment"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:48
msgid "Preparing the SDK"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:50
msgid "Extract the Xcode ``.xip`` file you downloaded from Apple's developer website:"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:61
msgid "Note that for the commands below, you will need to replace the version (``x.x``) with whatever iOS SDK version you're using. If you don't know your iPhone SDK version, you can see the JSON file inside of ``Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs``."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:66
msgid "Extract the iOS SDK:"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:76
msgid "Pack the SDK so that cctools can use it:"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:84
msgid "Toolchain"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:86
msgid "Build cctools:"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:94
msgid "Copy the tools to a nicer place. Note that the SCons scripts for building will look under ``usr/bin`` inside the directory you provide for the toolchain binaries, so you must copy to such subdirectory, akin to the following commands:"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:104
msgid "Now you should have the iOS toolchain binaries in ``$HOME/iostoolchain/usr/bin``."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:108
msgid "Compiling Godot for iPhone"
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:110
msgid "Once you've done the above steps, you should keep two things in your environment: the built toolchain and the iPhoneOS SDK directory. Those can stay anywhere you want since you have to provide their paths to the SCons build command."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:115
msgid "For the iPhone platform to be detected, you need the ``OSXCROSS_IOS`` environment variable defined to anything."
msgstr ""

#: ../../docs/contributing/development/compiling/cross-compiling_for_ios_on_linux.rst:122
msgid "Now you can compile for iPhone using SCons like the standard Godot way, with some additional arguments to provide the correct paths:"
msgstr ""
