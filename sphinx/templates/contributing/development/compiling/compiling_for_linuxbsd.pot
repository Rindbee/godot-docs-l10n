# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:4
msgid "Compiling for Linux, \\*BSD"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:10
msgid "This page describes how to compile Linux editor and export template binaries from source. If you're looking to export your project to Linux instead, read :ref:`doc_exporting_for_linux`."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:14
msgid "Requirements"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:16
msgid "For compiling under Linux or other Unix variants, the following is required:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:19
msgid "GCC 9+ or Clang 6+."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:20
msgid "`Python 3.8+ <https://www.python.org/downloads/>`_."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:21
msgid "`SCons 4.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:22
msgid "pkg-config (used to detect the development libraries listed below)."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:23
msgid "Development libraries:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:25
msgid "X11, Xcursor, Xinerama, Xi and XRandR."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:26
msgid "Wayland and wayland-scanner."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:27
msgid "Mesa."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:28
msgid "ALSA."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:29
msgid "PulseAudio."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:31
msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:35
msgid "To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:37
msgid "For a general overview of SCons usage for Godot, see :ref:`doc_introduction_to_the_buildsystem`."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:42
msgid "Distro-specific one-liners"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:46
msgid "Alpine Linux"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:65
msgid "Arch Linux"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:84
#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:553
msgid "Debian/Ubuntu"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:105
#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:578
msgid "Fedora"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:116
msgid "FreeBSD"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:132
msgid "Gentoo"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:149
msgid "Mageia"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:167
msgid "NetBSD"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:177
msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:179
msgid "OpenBSD"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:188
msgid "openKylin"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:210
msgid "openSUSE"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:230
msgid "Solus"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:248
msgid "Compiling"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:250
msgid "Start a terminal, go to the root dir of the engine source code and type:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:258
msgid "Prior to Godot 4.0, the Linux/\\*BSD target was called ``x11`` instead of ``linuxbsd``. If you are looking to compile Godot 3.x, make sure to use the `3.x branch of this documentation <https://docs.godotengine.org/en/3.6/development/compiling/compiling_for_x11.html>`__."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:263
msgid "If you are compiling Godot to make changes or contribute to the engine, you may want to use the SCons options ``dev_build=yes`` or ``dev_mode=yes``. See :ref:`doc_introduction_to_the_buildsystem_development_and_production_aliases` for more info."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:268
msgid "If all goes well, the resulting binary executable will be placed in the \"bin\" subdirectory. This executable file contains the whole engine and runs without any dependencies. Executing it will bring up the Project Manager."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:275
msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:281
msgid "Using Clang appears to be a requirement for OpenBSD, otherwise fonts would not build. For RISC-V architecture devices, use the Clang compiler instead of the GCC compiler."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:285
msgid "If you are compiling Godot for production use, you can make the final executable smaller and faster by adding the SCons option ``production=yes``. This enables additional compiler optimizations and link-time optimization."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:290
msgid "LTO takes some time to run and requires about 7 GB of available RAM while compiling. If you're running out of memory with the above option, use ``production=yes lto=none`` or ``production=yes lto=thin`` for a lightweight but less effective form of LTO."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:295
msgid "If you want to use separate editor settings for your own Godot builds and official releases, you can enable :ref:`doc_data_paths_self_contained_mode` by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:301
msgid "Running a headless/server build"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:303
msgid "To run in *headless* mode which provides editor functionality to export projects in an automated manner, use the normal build:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:310
msgid "And then use the ``--headless`` command line argument:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:316
msgid "To compile a debug *server* build which can be used with :ref:`remote debugging tools <doc_command_line_tutorial>`, use:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:323
msgid "To compile a *server* build which is optimized to run dedicated game servers, use:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:330
msgid "Building export templates"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:332
msgid "Linux binaries usually won't run on distributions that are older than the distribution they were built on. If you wish to distribute binaries that work on most distributions, you should build them on an old distribution such as Ubuntu 16.04. You can use a virtual machine or a container to set up a suitable build environment."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:340
msgid "To build Linux or \\*BSD export templates, run the build system with the following parameters:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:343
msgid "(32 bits)"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:350
msgid "(64 bits)"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:357
msgid "Note that cross-compiling for the opposite bits (64/32) as your host platform is not always straight-forward and might need a chroot environment."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:360
msgid "To create standard export templates, the resulting files in the ``bin/`` folder must be copied to:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:367
msgid "and named like this (even for \\*BSD which is seen as \"Linux/X11\" by Godot):"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:380
msgid "However, if you are writing your custom modules or custom C++ code, you might instead want to configure your binaries as custom export templates in the project export menu. You must have **Advanced Options** enabled to set this."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:387
msgid "You don't even need to copy them, you can just reference the resulting files in the ``bin/`` directory of your Godot source folder, so the next time you build, you automatically have the custom templates referenced."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:392
msgid "Cross-compiling for RISC-V devices"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:394
msgid "To cross-compile Godot for RISC-V devices, we need to setup the following items:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:396
msgid "`riscv-gnu-toolchain <https://github.com/riscv-collab/riscv-gnu-toolchain/releases>`__. While we are not going to use this directly, it provides us with a sysroot, as well as header and libraries files that we will need. There are many versions to choose from, however, the older the toolchain, the more compatible our final binaries will be. If in doubt, `use this version <https://github.com/riscv-collab/riscv-gnu-toolchain/releases/tag/2021.12.22>`__, and download ``riscv64-glibc-ubuntu-18.04-nightly-2021.12.22-nightly.tar.gz``. Extract it somewhere and remember its path."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:403
msgid "`mold <https://github.com/rui314/mold/releases>`__. This fast linker, is the only one that correctly links the resulting binary. Download it, extract it, and make sure to add its ``bin`` folder to your PATH. Run ``mold --help | grep support`` to check if your version of Mold supports RISC-V. If you don't see RISC-V, your Mold may need to be updated."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:409
msgid "To make referencing our toolchain easier, we can set an environment variable like this:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:416
msgid "This way, we won't have to manually set the directory location each time we want to reference it."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:419
msgid "With all the above setup, we are now ready to build Godot."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:421
msgid "Go to the root of the source code, and execute the following build command:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:432
msgid "RISC-V GCC has `bugs with its atomic operations <https://github.com/riscv-collab/riscv-gcc/issues/15>`__ which prevent it from compiling Godot correctly. That's why Clang is used instead. Make sure that it *can* compile to RISC-V. You can verify by executing this command ``clang -print-targets``, make sure you see ``riscv64`` on the list of targets."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:437
msgid "The code above includes adding ``$RISCV_TOOLCHAIN_PATH/bin`` to the PATH, but only for the following ``scons`` command. Since riscv-gnu-toolchain uses its own Clang located in the ``bin`` folder, adding ``$RISCV_TOOLCHAIN_PATH/bin`` to your user's PATH environment variable may block you from accessing another version of Clang if one is installed. For this reason it's not recommended to make adding the bin folder permanent. You can also omit the ``PATH=\"$RISCV_TOOLCHAIN_PATH/bin:$PATH\"`` line if you want to use scons with self-installed version of Clang, but it may have compatibility issues with riscv-gnu-toolchain."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:446
msgid "The command is similar in nature, but with some key changes. ``ccflags`` and ``linkflags`` append additional flags to the build. ``--sysroot`` points to a folder simulating a Linux system, it contains all the headers, libraries, and ``.so`` files Clang will use. ``--gcc-toolchain`` tells Clang where the complete toolchain is, and ``-target riscv64-unknown-linux-gnu`` indicates to Clang the target architecture, and OS we want to build for."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:453
msgid "If all went well, you should now see a ``bin`` directory, and within it, a binary similar to the following:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:460
msgid "You can now copy this executable to your favorite RISC-V device, then launch it there by double-clicking, which should bring up the project manager."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:464
msgid "If you later decide to compile the export templates, copy the above build command but change the value of ``target`` to ``template_debug`` for a debug build, or ``template_release`` for a release build."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:469
msgid "Using Clang and LLD for faster development"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:471
msgid "You can also use Clang and LLD to build Godot. This has two upsides compared to the default GCC + GNU ld setup:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:474
msgid "LLD links Godot significantly faster compared to GNU ld or gold. This leads to faster iteration times."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:476
msgid "Clang tends to give more useful error messages compared to GCC."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:478
msgid "To do so, install Clang and the ``lld`` package from your distribution's package manager then use the following SCons command:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:485
msgid "After the build is completed, a new binary with a ``.llvm`` suffix will be created in the ``bin/`` folder."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:488
msgid "It's still recommended to use GCC for production builds as they can be compiled using link-time optimization, making the resulting binaries smaller and faster."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:491
msgid "If this error occurs:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:497
msgid "There are two solutions:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:499
msgid "In your SCons command, add the parameter ``use_static_cpp=no``."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:500
msgid "Follow `these instructions <https://github.com/ivmai/libatomic_ops#installation-and-usage>`__ to configure, build, and install ``libatomic_ops``. Then, copy ``/usr/lib/libatomic_ops.a`` to ``/usr/lib/libatomic.a``, or create a soft link to ``libatomic_ops`` by command ``ln -s /usr/lib/libatomic_ops.a /usr/lib/libatomic.a``. The soft link can ensure the latest ``libatomic_ops`` will be used without the need to copy it every time when it is updated."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:506
msgid "Using mold for faster development"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:508
msgid "For even faster linking compared to LLD, you can use `mold <https://github.com/rui314/mold>`__. mold can be used with either GCC or Clang."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:511
msgid "As of January 2023, mold is not readily available in Linux distribution repositories, so you will have to install its binaries manually."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:514
msgid "Download mold binaries from its `releases page <https://github.com/rui314/mold/releases/latest>`__."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:515
msgid "Extract the ``.tar.gz`` file, then move the extracted folder to a location such as ``.local/share/mold``."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:516
msgid "Add ``$HOME/.local/share/mold/bin`` to your user's ``PATH`` environment variable. For example, you can add the following line at the end of your ``$HOME/.bash_profile`` file:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:523
msgid "Open a new terminal (or run ``source \"$HOME/.bash_profile\"``), then use the following SCons command when compiling Godot:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:531
msgid "Using system libraries for faster development"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:533
msgid "`Godot bundles the source code of various third-party libraries. <https://github.com/godotengine/godot/tree/master/thirdparty>`__ You can choose to use system versions of third-party libraries instead. This makes the Godot binary faster to link, as third-party libraries are dynamically linked. Therefore, they don't need to be statically linked every time you build the engine (even on small incremental changes)."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:539
msgid "However, not all Linux distributions have packages for third-party libraries available (or they may not be up-to-date)."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:542
msgid "Moving to system libraries can reduce linking times by several seconds on slow CPUs, but it requires manual testing depending on your Linux distribution. Also, you may not be able to use system libraries for everything due to bugs in the system library packages (or in the build system, as this feature is less tested)."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:548
msgid "To compile Godot with system libraries, install these dependencies **on top** of the ones listed in the :ref:`doc_compiling_for_linuxbsd_oneliners`:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:598
msgid "After installing all required packages, use the following command to build Godot:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:607
msgid "On Debian stable, you will need to remove `builtin_embree=no` as the system-provided Embree version is too old to work with Godot's latest `master` branch (which requires Embree 4)."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:611
msgid "You can view a list of all built-in libraries that have system alternatives by running ``scons -h``, then looking for options starting with ``builtin_``."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_for_linuxbsd.rst:616
msgid "When using system libraries, the resulting binary is **not** portable across Linux distributions anymore. Do not use this approach for creating binaries you intend to distribute to others, unless you're creating a package for a Linux distribution."
msgstr ""
