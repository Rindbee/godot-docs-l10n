# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:19
msgid "Creating your first script"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:21
msgid "In this lesson, you will code your first script to make the Godot icon turn in circles. As we mentioned :ref:`in the introduction <doc_introduction_learning_programming>`, we assume you have programming foundations."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:26
msgid "This tutorial is written for GDScript, and the equivalent C# code is included in another tab of each codeblock for convenience."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:31
msgid "To learn more about GDScript, its keywords, and its syntax, head to the :ref:`doc_gdscript` section. To learn more about C#, head to the :ref:`doc_c_sharp` section."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:36
msgid "Project setup"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:38
msgid "Please :ref:`create a new project <doc_creating_and_importing_projects>` to start with a clean slate. Your project should contain one picture: the Godot icon, which we often use for prototyping in the community."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:44
msgid "We need to create a Sprite2D node to display it in the game. In the Scene dock, click the **Other Node** button."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:49
msgid "Type \"Sprite2D\" in the search bar to filter nodes and double-click on Sprite2D to create the node."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:54
msgid "Your Scene tab should now only have a Sprite2D node."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:58
msgid "A Sprite2D node needs a texture to display. In the Inspector on the right, you can see that the **Texture** property says ``<empty>``. To display the Godot icon, click and drag the file ``icon.svg`` from the FileSystem dock onto the Texture slot."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:67
msgid "You can create Sprite2D nodes automatically by dragging and dropping images on the viewport."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:70
msgid "Then, click and drag the icon in the viewport to center it in the game view."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:75
msgid "Creating a new script"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:77
msgid "To create and attach a new script to our node, right-click on Sprite2D in the Scene dock and select **Attach Script**."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:82
msgid "The **Attach Node Script** window appears. It allows you to select the script's language and file path, among other options."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:85
msgid "Change the **Template** field from ``Node: Default`` to ``Object: Empty`` to start with a clean file. Leave the other options set to their default values and click the **Create** button to create the script."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:93
msgid "C# script names need to match their class name. In this case, you should name the file ``MySprite2D.cs``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:96
msgid "The Script workspace should appear with your new ``sprite_2d.gd`` file open and the following line of code:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:113
msgid "Every GDScript file is implicitly a class. The ``extends`` keyword defines the class this script inherits or extends. In this case, it's ``Sprite2D``, meaning our script will get access to all the properties and functions of the Sprite2D node, including classes it extends, like ``Node2D``, ``CanvasItem``, and ``Node``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:119
msgid "In GDScript, if you omit the line with the ``extends`` keyword, your class will implicitly extend :ref:`RefCounted <class_RefCounted>`, which Godot uses to manage your application's memory."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:123
msgid "Inherited properties include the ones you can see in the Inspector dock, like our node's ``texture``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:128
msgid "By default, the Inspector displays a node's properties in \"Title Case\", with capitalized words separated by a space. In GDScript code, these properties are in \"snake_case\", which is lowercase with words separated by an underscore."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:132
msgid "You can hover over any property's name in the Inspector to see a description and its identifier in code."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:136
msgid "Hello, world!"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:138
msgid "Our script currently doesn't do anything. Let's make it print the text \"Hello, world!\" to the Output bottom panel to get started."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:141
msgid "Add the following code to your script:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:157
msgid "Let's break it down. The ``func`` keyword defines a new function named ``_init``. This is a special name for our class's constructor. The engine calls ``_init()`` on every object or node upon creating it in memory, if you define this function."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:162
msgid "GDScript is an indent-based language. The tab at the start of the line that says ``print()`` is necessary for the code to work. If you omit it or don't indent a line correctly, the editor will highlight it in red and display the following error message: \"Indented block expected\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:167
msgid "Save the scene as ``sprite_2d.tscn`` if you haven't already, then press :kbd:`F6` (:kbd:`Cmd + R` on macOS) to run it. Look at the **Output** bottom panel that expands. It should display \"Hello, world!\"."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:173
msgid "Delete the ``_init()`` function, so you're only left with the line ``extends Sprite2D``."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:177
msgid "Turning around"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:179
msgid "It's time to make our node move and rotate. To do so, we're going to add two member variables to our script: the movement speed in pixels per second and the angular speed in radians per second.  Add the following after the ``extends Sprite2D`` line."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:194
msgid "Member variables sit near the top of the script, after any \"extends\" lines, but before functions. Every node instance with this script attached to it will have its own copy of the ``speed`` and ``angular_speed`` properties."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:199
msgid "Angles in Godot work in radians by default, but you have built-in functions and properties available if you prefer to calculate angles in degrees instead."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:203
msgid "To move our icon, we need to update its position and rotation every frame in the game loop. We can use the ``_process()`` virtual function of the ``Node`` class. If you define it in any class that extends the Node class, like Sprite2D, Godot will call the function every frame and pass it an argument named ``delta``, the time elapsed since the last frame."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:211
msgid "Games work by rendering many images per second, each called a frame, and they do so in a loop. We measure the rate at which a game produces images in Frames Per Second (FPS). Most games aim for 60 FPS, although you might find figures like 30 FPS on slower mobile devices or 90 to 240 for virtual reality games."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:217
msgid "The engine and game developers do their best to update the game world and render images at a constant time interval, but there are always small variations in frame render times. That's why the engine provides us with this delta time value, making our motion independent of our framerate."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:222
msgid "At the bottom of the script, define the function:"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:237
msgid "The ``func`` keyword defines a new function. After it, we have to write the function's name and arguments it takes in parentheses. A colon ends the definition, and the indented blocks that follow are the function's content or instructions."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:242
msgid "Notice how ``_process()``, like ``_init()``, starts with a leading underscore. By convention, Godot's virtual functions, that is to say, built-in functions you can override to communicate with the engine, start with an underscore."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:247
msgid "The line inside the function, ``rotation += angular_speed * delta``, increments our sprite's rotation every frame. Here, ``rotation`` is a property inherited from the class ``Node2D``, which ``Sprite2D`` extends. It controls the rotation of our node and works with radians."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:252
msgid "In the code editor, you can :kbd:`Ctrl + Click` (:kbd:`Cmd + Click` on macOS) on any built-in property or function like ``position``, ``rotation``, or ``_process`` to open the corresponding documentation in a new tab."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:257
msgid "Run the scene to see the Godot icon turn in-place."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:261
msgid "In C#, notice how the ``delta`` argument taken by ``_Process()`` is a ``double``. We therefore need to convert it to ``float`` when we apply it to the rotation."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:266
msgid "Moving forward"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:268
msgid "Let's now make the node move. Add the following two lines inside of the ``_process()`` function, ensuring the new lines are indented the same way as the ``rotation += angular_speed * delta`` line before them."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:285
msgid "As we already saw, the ``var`` keyword defines a new variable. If you put it at the top of the script, it defines a property of the class. Inside a function, it defines a local variable: it only exists within the function's scope."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:289
msgid "We define a local variable named ``velocity``, a 2D vector representing both a direction and a speed. To make the node move forward, we start from the Vector2 class's constant ``Vector2.UP``, a vector pointing up, and rotate it by calling the Vector2 method ``rotated()``. This expression, ``Vector2.UP.rotated(rotation)``, is a vector pointing forward relative to our icon. Multiplied by our ``speed`` property, it gives us a velocity we can use to move the node forward."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:296
msgid "We add ``velocity * delta`` to the node's ``position`` to move it. The position itself is of type :ref:`Vector2 <class_Vector2>`, a built-in type in Godot representing a 2D vector."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:300
msgid "Run the scene to see the Godot head run in circles."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:304
msgid "Moving a node like that does not take into account colliding with walls or the floor. In :ref:`doc_your_first_2d_game`, you will learn another approach to moving objects while detecting collisions."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:308
msgid "Our node currently moves by itself. In the next part, :ref:`doc_scripting_player_input`, we'll use player input to control it."
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:312
msgid "Complete script"
msgstr ""

#: ../../docs/getting_started/step_by_step/scripting_first_script.rst:314
msgid "Here is the complete ``sprite_2d.gd`` file for reference."
msgstr ""
