# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:4
msgid "Moving the player with code"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:6
msgid "It's time to code! We're going to use the input actions we created in the last part to move the character."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:9
msgid "For this project, we will be following the Godot naming conventions."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:11
msgid "**GDScript**: Classes (nodes) use PascalCase, variables and functions use snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:15
msgid "**C#**: Classes, export variables and methods use PascalCase, private fields use _camelCase, local variables and parameters use camelCase (See :ref:`doc_c_sharp_styleguide`). Be careful to type the method names precisely when connecting signals."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:20
msgid "Right-click the ``Player`` node and select *Attach Script* to add a new script to it. In the popup, set the *Template* to *Empty* before pressing the *Create* button. We set it to *Empty* because we want to write our own code for player movement."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:25
msgid "|image0|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:451
msgid "image0"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:27
msgid "Let's start with the class's properties. We're going to define a movement speed, a fall acceleration representing gravity, and a velocity we'll use to move the character."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:62
msgid "These are common properties for a moving body. The ``target_velocity`` is a :ref:`3D vector <class_Vector3>` combining a speed with a direction. Here, we define it as a property because we want to update and reuse its value across frames."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:68
msgid "The values are quite different from 2D code because distances are in meters. While in 2D, a thousand units (pixels) may only correspond to half of your screen's width, in 3D, it's a kilometer."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:72
msgid "Let's code the movement. We start by calculating the input direction vector using the global ``Input`` object, in ``_physics_process()``."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:122
msgid "Here, instead of ``_process()``, we're going to make all calculations using the ``_physics_process()`` virtual function. It's designed specifically for physics-related code like moving a kinematic or rigid body. It updates the node using fixed time intervals."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:128
msgid "To learn more about the difference between ``_process()`` and ``_physics_process()``, see :ref:`doc_idle_and_physics_processing`."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:131
msgid "We start by initializing a ``direction`` variable to ``Vector3.ZERO``. Then, we check if the player is pressing one or more of the ``move_*`` inputs and update the vector's ``x`` and ``z`` components accordingly. These correspond to the ground plane's axes."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:136
msgid "These four conditions give us eight possibilities and eight possible directions."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:138
msgid "In case the player presses, say, both W and D simultaneously, the vector will have a length of about ``1.4``. But if they press a single key, it will have a length of ``1``. We want the vector's length to be consistent, and not move faster diagonally. To do so, we can call its ``normalized()`` method."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:168
msgid "Here, we only normalize the vector if the direction has a length greater than zero, which means the player is pressing a direction key."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:171
msgid "We compute the direction the ``$Pivot`` is looking by creating a :ref:`Basis <class_Basis>` that looks in the ``direction`` direction."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:174
msgid "Then, we update the velocity. We have to calculate the ground velocity and the fall speed separately. Be sure to go back one tab so the lines are inside the ``_physics_process()`` function but outside the condition we just wrote above."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:223
msgid "The ``CharacterBody3D.is_on_floor()`` function returns ``true`` if the body collided with the floor in this frame. That's why we apply gravity to the ``Player`` only while it is in the air."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:226
msgid "For the vertical velocity, we subtract the fall acceleration multiplied by the delta time every frame. This line of code will cause our character to fall in every frame, as long as it is not on or colliding with the floor."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:230
msgid "The physics engine can only detect interactions with walls, the floor, or other bodies during a given frame if movement and collisions happen. We will use this property later to code the jump."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:234
msgid "On the last line, we call ``CharacterBody3D.move_and_slide()`` which is a powerful method of the ``CharacterBody3D`` class that allows you to move a character smoothly. If it hits a wall midway through a motion, the engine will try to smooth it out for you. It uses the *velocity* value native to the :ref:`CharacterBody3D <class_CharacterBody3D>`"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:246
msgid "And that's all the code you need to move the character on the floor."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:248
msgid "Here is the complete ``player.gd`` code for reference."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:352
msgid "Testing our player's movement"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:354
msgid "We're going to put our player in the ``Main`` scene to test it. To do so, we need to instantiate the player and then add a camera. Unlike in 2D, in 3D, you won't see anything if your viewport doesn't have a camera pointing at something."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:358
msgid "Save your ``Player`` scene and open the ``Main`` scene. You can click on the *Main* tab at the top of the editor to do so."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:361
msgid "|image1|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:452
msgid "image1"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:363
msgid "If you closed the scene before, head to the *FileSystem* dock and double-click ``main.tscn`` to re-open it."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:366
msgid "To instantiate the ``Player``, right-click on the ``Main`` node and select *Instantiate Child Scene*."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:369
msgid "|image2|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:453
msgid "image2"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:371
msgid "In the popup, double-click ``player.tscn``. The character should appear in the center of the viewport."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:375
msgid "Adding a camera"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:377
msgid "Let's add the camera next. Like we did with our *Player*\\ 's *Pivot*, we're going to create a basic rig. Right-click on the ``Main`` node again and select *Add Child Node*. Create a new :ref:`Marker3D <class_Marker3D>`, and name it ``CameraPivot``. Select ``CameraPivot`` and add a child node :ref:`Camera3D <class_Camera3D>` to it. Your scene tree should look similar to this."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:383
msgid "|image3|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:454
msgid "image3"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:385
msgid "Notice the *Preview* checkbox that appears in the top-left of the 3D view when you have the *Camera* selected. You can click it to preview the in-game camera projection."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:388
msgid "|image4|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:455
msgid "image4"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:390
msgid "We're going to use the *Pivot* to rotate the camera as if it was on a crane. Let's first split the 3D view to be able to freely navigate the scene and see what the camera sees."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:394
msgid "In the toolbar right above the viewport, click on *View*, then *2 Viewports*. You can also press :kbd:`Ctrl + 2` (:kbd:`Cmd + 2` on macOS)."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:397
msgid "|image11|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:462
msgid "image11"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:399
msgid "|image5|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:456
msgid "image5"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:401
msgid "On the bottom view, select your :ref:`Camera3D <class_Camera3D>` and turn on camera Preview by clicking the checkbox."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:404
msgid "|image6|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:457
msgid "image6"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:406
msgid "In the top view, make sure your *Camera3D* is selected and move the camera about ``19`` units on the Z axis (drag the blue arrow)."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:409
msgid "|image7|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:458
msgid "image7"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:411
msgid "Here's where the magic happens. Select the *CameraPivot* and rotate it ``-45`` degrees around the X axis (using the red circle). You'll see the camera move as if it was attached to a crane."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:415
msgid "|image8|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:459
msgid "image8"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:417
msgid "You can run the scene by pressing :kbd:`F6` and press the arrow keys to move the character."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:420
msgid "|image9|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:460
msgid "image9"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:422
msgid "We can see some empty space around the character due to the perspective projection. In this game, we're going to use an orthographic projection instead to better frame the gameplay area and make it easier for the player to read distances."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:427
msgid "Select the *Camera* again and in the *Inspector*, set the *Projection* to *Orthogonal* and the *Size* to ``19``. The character should now look flatter and the ground should fill the background."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:433
msgid "When using an orthogonal camera in Godot 4, directional shadow quality is dependent on the camera's *Far* value. The higher the *Far* value, the further away the camera will be able to see. However, higher *Far* values also decrease shadow quality as the shadow rendering has to cover a greater distance."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:439
msgid "If directional shadows look too blurry after switching to an orthogonal camera, decrease the camera's *Far* property to a lower value such as ``100``. Don't decrease this *Far* property too much, or objects in the distance will start disappearing."
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:444
msgid "|image10|"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:461
msgid "image10"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:446
msgid "Test your scene and you should be able to move in all 8 directions and not glitch through the floor!"
msgstr ""

#: ../../docs/getting_started/first_3d_game/03.player_movement_code.rst:448
msgid "Ultimately, we have both player movement and the view in place. Next, we will work on the monsters."
msgstr ""
