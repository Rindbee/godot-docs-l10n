# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:4
msgid "GDScript style guide"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:6
msgid "This style guide lists conventions to write elegant GDScript. The goal is to encourage writing clean, readable code and promote consistency across projects, discussions, and tutorials. Hopefully, this will also support the development of auto-formatting tools."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:11
msgid "Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:15
msgid "Style guides aren't meant as hard rulebooks. At times, you may not be able to apply some of the guidelines below. When that happens, use your best judgment, and ask fellow developers for insights."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:19
msgid "In general, keeping your code consistent in your projects and within your team is more important than following this guide to a tee."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:24
msgid "Godot's built-in script editor uses a lot of these conventions by default. Let it help you."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:27
msgid "Here is a complete class example based on these guidelines:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:109
msgid "Formatting"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:112
msgid "Encoding and special characters"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:114
msgid "Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:115
msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:116
msgid "Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:117
msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:120
msgid "Indentation"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:122
msgid "Each indent level should be one greater than the block containing it."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:124
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:148
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:171
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:228
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:254
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:310
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:355
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:396
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:428
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:457
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:491
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:552
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:573
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:592
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:713
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:944
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:974
msgid "**Good**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:133
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:158
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:196
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:240
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:262
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:322
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:376
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:405
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:437
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:466
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:504
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:561
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:581
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:604
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:726
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:956
#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:994
msgid "**Bad**:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:145
msgid "Use 2 indent levels to distinguish continuation lines from regular code blocks."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:168
msgid "Exceptions to this rule are arrays, dictionaries, and enums. Use a single indentation level to distinguish continuation lines:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:222
msgid "Trailing comma"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:224
msgid "Use a trailing comma on the last line in arrays, dictionaries, and enums. This results in easier refactoring and better diffs in version control as the last line doesn't need to be modified when adding new elements."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:252
msgid "Trailing commas are unnecessary in single-line lists, so don't add them in this case."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:271
msgid "Blank lines"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:273
msgid "Surround functions and class definitions with two blank lines:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:288
msgid "Use one blank line inside functions to separate logical sections."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:292
msgid "We use a single line between classes and function definitions in the class reference and in short code snippets in this documentation."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:296
msgid "Line length"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:298
msgid "Keep individual lines of code under 100 characters."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:300
msgid "If you can, try to keep lines under 80 characters. This helps to read the code on small displays and with two scripts opened side-by-side in an external text editor. For example, when looking at a differential revision."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:305
msgid "One statement per line"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:307
msgid "Avoid combining multiple statements on a single line, including conditional statements, to adhere to the GDScript style guidelines for readability."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:332
msgid "The only exception to that rule is the ternary operator:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:339
msgid "Format multiline statements for readability"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:341
msgid "When you have particularly long ``if`` statements or nested ternary expressions, wrapping them over multiple lines improves readability. Since continuation lines are still part of the same expression, 2 indent levels should be used instead of one."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:345
msgid "GDScript allows wrapping statements using multiple lines using parentheses or backslashes. Parentheses are favored in this style guide since they make for easier refactoring. With backslashes, you have to ensure that the last line never contains a backslash at the end. With parentheses, you don't have to worry about the last line having a backslash at the end."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:351
msgid "When wrapping a conditional expression over multiple lines, the ``and``/``or`` keywords should be placed at the beginning of the line continuation, not at the end of the previous line."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:390
msgid "Avoid unnecessary parentheses"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:392
msgid "Avoid parentheses in expressions and conditional statements. Unless necessary for order of operations or wrapping over multiple lines, they only reduce readability."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:417
msgid "Boolean operators"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:419
msgid "Prefer the plain English versions of boolean operators, as they are the most accessible:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:421
msgid "Use ``and`` instead of ``&&``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:422
msgid "Use ``or`` instead of ``||``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:423
msgid "Use ``not`` instead of ``!``."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:425
msgid "You may also use parentheses around boolean operators to clear any ambiguity. This can make long expressions easier to read."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:447
msgid "Comment spacing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:449
msgid "Regular comments (``#``) and documentation comments (``##``) should start with a space, but not code that you comment out. Additionally, code region comments (``#region``/``#endregion``) must follow that precise syntax, so they should not start with a space."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:454
msgid "Using a space for regular and documentation comments helps differentiate text comments from disabled code."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:477
msgid "In the script editor, to toggle commenting of the selected code, press :kbd:`Ctrl + K`. This feature adds/removes a single ``#`` sign before any code on the selected lines."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:482
msgid "Whitespace"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:484
msgid "Always use one space around operators and after commas. Also, avoid extra spaces in dictionary references and function calls. One exception to this is for single-line dictionary declarations, where a space should be added after the opening brace and before the closing brace. This makes the dictionary easier to visually distinguish from an array, as the ``[]`` characters look close to ``{}`` with most fonts."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:517
msgid "Don't use spaces to align expressions vertically:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:526
msgid "Quotes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:528
msgid "Use double quotes unless single quotes make it possible to escape fewer characters in a given string. See the examples below:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:546
msgid "Numbers"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:548
msgid "Don't omit the leading or trailing zero in floating-point numbers. Otherwise, this makes them less readable and harder to distinguish from integers at a glance."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:570
msgid "Use lowercase for letters in hexadecimal numbers, as their lower height makes the number easier to read."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:589
msgid "Take advantage of GDScript's underscores in literals to make large numbers more readable."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:619
msgid "Naming conventions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:621
msgid "These naming conventions follow the Godot Engine style. Breaking these will make your code clash with the built-in naming conventions, leading to inconsistent code."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:626
msgid "File names"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:628
msgid "Use snake_case for file names. For named classes, convert the PascalCase class name to snake_case::"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:641
msgid "This is consistent with how C++ files are named in Godot's source code. This also avoids case sensitivity issues that can crop up when exporting a project from Windows to other platforms."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:646
msgid "Classes and nodes"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:648
msgid "Use PascalCase for class and node names:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:654
msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:661
msgid "Functions and variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:663
msgid "Use snake\\_case to name functions and variables:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:670
msgid "Prepend a single underscore (\\_) to virtual methods functions the user must override, private functions, and private variables:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:679
msgid "Signals"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:681
msgid "Use the past tense to name signals:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:689
msgid "Constants and enums"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:691
msgid "Write constants with CONSTANT\\_CASE, that is to say in all caps with an underscore (\\_) to separate words:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:698
msgid "Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as they are constants:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:710
msgid "Write enums with each item on its own line. This allows adding documentation comments abve each item more easily, and also makes for cleaner diffs in version control when items are added or removed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:735
msgid "Code order"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:737
msgid "This first section focuses on code order. For formatting, see :ref:`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:740
msgid "We suggest to organize GDScript code this way:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:765
msgid "We optimized the order to make it easy to read the code from top to bottom, to help developers reading the code for the first time understand how it works, and to avoid errors linked to the order of variable declarations."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:769
msgid "This code order follows four rules of thumb:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:771
msgid "Properties and signals come first, followed by methods."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:772
msgid "Public comes before private."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:773
msgid "Virtual callbacks come before the class's interface."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:774
msgid "The object's construction and initialization functions, ``_init`` and ``_ready``, come before functions that modify the object at runtime."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:779
msgid "Class declaration"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:781
msgid "If the code is meant to run in the editor, place the ``@tool`` annotation on the first line of the script."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:784
msgid "Follow with the ``class_name`` if necessary. You can turn a GDScript file into a global type in your project using this feature. For more information, see :ref:`doc_gdscript`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:788
msgid "Then, add the ``extends`` keyword if the class extends a built-in type."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:790
msgid "Following that, you should have the class's optional :ref:`documentation comments <doc_gdscript_documentation_comments>`. You can use that to explain the role of your class to your teammates, how it works, and how other developers should use it, for example."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:805
msgid "Signals and properties"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:807
msgid "Write signal declarations, followed by properties, that is to say, member variables, after the docstring."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:810
msgid "Enums should come after signals, as you can use them as export hints for other properties."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:813
msgid "Then, write constants, exported variables, public, private, and onready variables, in that order."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:846
msgid "GDScript evaluates ``@onready`` variables right before the ``_ready`` callback. You can use that to cache node dependencies, that is to say, to get child nodes in the scene that your class relies on. This is what the example above shows."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:852
msgid "Member variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:854
msgid "Don't declare member variables if they are only used locally in a method, as it makes the code more difficult to follow. Instead, declare them as local variables in the method's body."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:859
msgid "Local variables"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:861
msgid "Declare local variables as close as possible to their first use. This makes it easier to follow the code, without having to scroll too much to find where the variable was declared."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:866
msgid "Methods and static functions"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:868
msgid "After the class's properties come the methods."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:870
msgid "Start with the ``_init()`` callback method, that the engine will call upon creating the object in memory. Follow with the ``_ready()`` callback, that Godot calls when it adds a node to the scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:874
msgid "These functions should come first because they show how the object is initialized."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:877
msgid "Other built-in virtual callbacks, like ``_unhandled_input()`` and ``_physics_process``, should come next. These control the object's main loop and interactions with the game engine."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:881
msgid "The rest of the class's interface, public and private methods, come after that, in that order."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:918
msgid "Static typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:920
msgid "Since Godot 3.1, GDScript supports :ref:`optional static typing<doc_gdscript_static_typing>`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:923
msgid "Declared types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:925
msgid "To declare a variable's type, use ``<variable>: <type>``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:931
msgid "To declare the return type of a function, use ``-> <type>``:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:938
msgid "Inferred types"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:940
msgid "In most cases you can let the compiler infer the type, using ``:=``. Prefer ``:=`` when the type is written on the same line as the assignment, otherwise prefer writing the type explicitly."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:953
msgid "Include the type hint when the type is ambiguous, and omit the type hint when it's redundant."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:968
msgid "In some cases, the type must be stated explicitly, otherwise the behavior will not be as expected because the compiler will only be able to use the function's return type. For example, ``get_node()`` cannot infer a type unless the scene or file of the node is loaded in memory. In this case, you should set the type explicitly."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:982
msgid "Alternatively, you can use the ``as`` keyword to cast the return type, and that type will be used to infer the type of the var."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_styleguide.rst:992
msgid "This option is also considered more :ref:`type-safe<doc_gdscript_static_typing_safe_lines>` than the first."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
