# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:4
msgid "GDScript: An introduction to dynamic languages"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:7
msgid "About"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:9
msgid "This tutorial aims to be a quick reference for how to use GDScript more efficiently. It focuses on common cases specific to the language, but also covers a lot of information on dynamically typed languages."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:13
msgid "It's meant to be especially useful for programmers with little or no previous experience with dynamically typed languages."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:17
msgid "Dynamic nature"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:20
msgid "Pros & cons of dynamic typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:22
msgid "GDScript is a Dynamically Typed language. As such, its main advantages are that:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:25
msgid "The language is easy to get started with."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:26
msgid "Most code can be written and changed quickly and without hassle."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:27
msgid "The code is easy to read (little clutter)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:28
msgid "No compilation is required to test."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:29
msgid "Runtime is tiny."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:30
msgid "It has duck-typing and polymorphism by nature."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:32
msgid "While the main disadvantages are:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:34
msgid "Less performance than statically typed languages."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:35
msgid "More difficult to refactor (symbols can't be traced)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:36
msgid "Some errors that would typically be detected at compile time in statically typed languages only appear while running the code (because expression parsing is more strict)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:39
msgid "Less flexibility for code-completion (some variable types are only known at runtime)."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:42
msgid "This, translated to reality, means that Godot used with GDScript is a combination designed to create games quickly and efficiently. For games that are very computationally intensive and can't benefit from the engine built-in tools (such as the Vector types, Physics Engine, Math library, etc), the possibility of using C++ is present too. This allows you to still create most of the game in GDScript and add small bits of C++ in the areas that need a performance boost."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:51
msgid "Variables & assignment"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:53
msgid "All variables in a dynamically typed language are \"variant\"-like. This means that their type is not fixed, and is only modified through assignment. Example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:57
#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:79
msgid "Static:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:65
#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:93
msgid "Dynamic:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:74
msgid "As function arguments:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:76
msgid "Functions are of dynamic nature too, which means they can be called with different arguments, for example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:106
msgid "Pointers & referencing:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:108
msgid "In static languages, such as C or C++ (and to some extent Java and C#), there is a distinction between a variable and a pointer/reference to a variable. The latter allows the object to be modified by other functions by passing a reference to the original one."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:113
msgid "In C# or Java, everything not a built-in type (int, float, sometimes String) is always a pointer or a reference. References are also garbage-collected automatically, which means they are erased when no longer used. Dynamically typed languages tend to use this memory model, too. Some Examples:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:119
msgid "C++:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:135
msgid "Java:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:153
msgid "GDScript:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:165
msgid "In GDScript, only base types (int, float, string and the vector types) are passed by value to functions (value is copied). Everything else (instances, arrays, dictionaries, etc) is passed as reference. Classes that inherit :ref:`class_RefCounted` (the default if nothing is specified) will be freed when not used, but manual memory management is allowed too if inheriting manually from :ref:`class_Object`."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:173
msgid "Arrays"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:175
msgid "Arrays in dynamically typed languages can contain many different mixed datatypes inside and are always dynamic (can be resized at any time). Compare for example arrays in statically typed languages:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:202
msgid "And in GDScript:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:211
msgid "In dynamically typed languages, arrays can also double as other datatypes, such as lists:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:221
msgid "Or unordered sets:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:230
msgid "Dictionaries"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:232
msgid "Dictionaries are a powerful tool in dynamically typed languages. In GDScript, untyped dictionaries can be used for many cases where a statically typed language would tend to use another data structure."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:236
msgid "Dictionaries can map any value to any other value with complete disregard for the datatype used as either key or value. Contrary to popular belief, they are efficient because they can be implemented with hash tables. They are, in fact, so efficient that some languages will go as far as implementing arrays as dictionaries."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:242
msgid "Example of Dictionary:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:249
msgid "Dictionaries are also dynamic, keys can be added or removed at any point at little cost:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:258
msgid "In most cases, two-dimensional arrays can often be implemented more easily with dictionaries. Here's a battleship game example:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:291
msgid "Dictionaries can also be used as data markup or quick structures. While GDScript's dictionaries resemble python dictionaries, it also supports Lua style syntax and indexing, which makes it useful for writing initial states and quick structs:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:316
msgid "For & while"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:318
msgid "Iterating using the C-style for loop in C-derived languages can be quite complex:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:339
msgid "Because of this, GDScript makes the opinionated decision to have a for-in loop over iterables instead:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:346
msgid "Container datatypes (arrays and dictionaries) are iterable. Dictionaries allow iterating the keys:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:354
msgid "Iterating with indices is also possible:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:361
msgid "The range() function can take 3 arguments:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:369
msgid "Some examples involving C-style for loops:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:379
msgid "Translate to:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:392
msgid "And backwards looping done through a negative counter:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:398
msgid "Becomes:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:406
msgid "While"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:408
msgid "while() loops are the same everywhere:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:419
msgid "Custom iterators"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:420
msgid "You can create custom iterators in case the default ones don't quite meet your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, and ``_iter_get`` functions in your script. An example implementation of a forward iterator follows:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:452
msgid "And it can be used like any other iterator:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:460
msgid "Make sure to reset the state of the iterator in ``_iter_init``, otherwise nested for-loops that use custom iterators will not work as expected."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:464
msgid "Duck typing"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:466
msgid "One of the most difficult concepts to grasp when moving from a statically typed language to a dynamic one is duck typing. Duck typing makes overall code design much simpler and straightforward to write, but it's not obvious how it works."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:471
msgid "As an example, imagine a situation where a big rock is falling down a tunnel, smashing everything on its way. The code for the rock, in a statically typed language would be something like:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:482
msgid "This way, everything that can be smashed by a rock would have to inherit Smashable. If a character, enemy, piece of furniture, small rock were all smashable, they would need to inherit from the class Smashable, possibly requiring multiple inheritance. If multiple inheritance was undesired, then they would have to inherit a common class like Entity. Yet, it would not be very elegant to add a virtual method ``smash()`` to Entity only if a few of them can be smashed."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:490
msgid "With dynamically typed languages, this is not a problem. Duck typing makes sure you only have to define a ``smash()`` function where required and that's it. No need to consider inheritance, base classes, etc."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:499
msgid "And that's it. If the object that hit the big rock has a smash() method, it will be called. No need for inheritance or polymorphism. Dynamically typed languages only care about the instance having the desired method or member, not what it inherits or the class type. The definition of Duck Typing should make this clearer:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:505
msgid "*\"When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck\"*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:508
msgid "In this case, it translates to:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:510
msgid "*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:512
msgid "Yes, we should call it Hulk typing instead."
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:514
msgid "It's possible that the object being hit doesn't have a smash() function. Some dynamically typed languages simply ignore a method call when it doesn't exist, but GDScript is stricter, so checking if the function exists is desirable:"
msgstr ""

#: ../../docs/tutorials/scripting/gdscript/gdscript_advanced.rst:525
msgid "Then, define that method and anything the rock touches can be smashed."
msgstr ""
