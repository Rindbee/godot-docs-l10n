# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/xr/openxr_render_models.rst:4
msgid "OpenXR Render Models"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:6
msgid "A cornerstone of OpenXR's API design is being as platform agnostic as possible. A great example of this is OpenXR's action map system where XR runtimes have to support core interaction profiles to fall back on, if no interaction profile exists for the hardware being used. This ensures that OpenXR applications keep functioning even when used on hardware that didn't exist when the application was released, or that the developers of the application did not have access too."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:14
msgid "A consequence of this is that the application developer doesn't know with any certainty what hardware is being used, as the XR runtime could be mimicking other hardware. The application developer thus can't show anything in relation to the actual hardware used, the most common use case being showing the controllers the user is currently holding."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:21
msgid "Showing the correct controller models and having these models correctly positioned is important to a proper sense of immersion."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:24
msgid "This is where OpenXR's `render models API <https://registry.khronos.org/OpenXR/specs/1.1/html/xrspec.html#XR_EXT_render_models>`_ comes in. This API allows us to query the XR runtime for 3D assets that are correct for the physical hardware being used. The API also allows us to query the position of this hardware within the tracking volume and the correct positioning of subcomponents of this hardware."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:30
msgid "For instance, we can correctly position and animate the trigger or show buttons being pressed."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:33
msgid "For those runtimes that support the `controller data source for hand tracking <https://registry.khronos.org/OpenXR/specs/1.1/html/xrspec.html#XR_EXT_hand_tracking_data_source>`_ , we can also correctly position the user's fingers and hand according to the shape of the controller. Do note that this works in combination with the `hand joints motion range extension <https://registry.khronos.org/OpenXR/specs/1.1/html/xrspec.html#XR_EXT_hand_joints_motion_range>`_ to prevent clipping of the fingers."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:42
msgid "OpenXR Render models node"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:44
msgid "The :ref:`OpenXRRenderModelManager<class_OpenXRRenderModelManager>` node can be used to automate most of the render models functionality. This node keeps track of the active render models currently made available by the XR runtime."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:49
msgid "It will create child nodes for each active render model resulting in that render model being displayed."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:52
msgid "This node must have an :ref:`XROrigin3D<class_XROrigin3D>` node as an ancestor."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:55
msgid "If ``tracker`` is set to ``Any`` our node will show all render models currently being tracked. In this scenario this node must be a direct child of our :ref:`XROrigin3D<class_XROrigin3D>` node."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:59
msgid "If ``tracker`` is set to ``None set`` our node will only show render models for which no tracker has been identified. In this scenario this node must also be a direct child of our :ref:`XROrigin3D<class_XROrigin3D>` node."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:64
msgid "If ``tracker`` is set to ``Left Hand`` or ``Right Hand`` our node will only show render models related to our left or right hand respectively. In this scenario, our node can be placed deeper in the scene tree."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:70
msgid "For most XR runtimes this means the render model represents a controller that is actually being held by the user but this is not a guarantee. Some XR runtimes will always set the tracker to either the left or right hand even if the controller is not currently held but is being tracked. You should always test this as this will lead to unwanted behavior."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:76
msgid "In this scenario we can also specify an action for a pose in the action map by setting the ``make_local_to_pose`` property to the pose action. Use this in combination with an :ref:`XRController3D<class_XRController3D>` node that is using the same pose and you can now add a layer that allows you to deviate from the tracked position of both your controller and the related render model (see example below)."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:85
msgid "Combining the above with hand tracking does introduce the problem that hand tracking is completely independent from the action map system. You will need to combine the hand tracking and controller tracking poses to properly offset the render models."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:90
msgid "This falls beyond the scope of this documentation."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:93
msgid "Render model manager example"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:95
msgid "You can download `our render models demo <https://github.com/godotengine/godot-demo-projects/tree/master/xr/openxr_render_models>`_ which implements the setup described below."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:100
msgid "In this setup we find an :ref:`OpenXRRenderModelManager<class_OpenXRRenderModelManager>` node directly underneath our :ref:`XROrigin3D<class_XROrigin3D>` node. On this node our ``target`` property is set to ``None set`` and will handle showing all render models that are currently not related to our left or right hand controllers."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:106
msgid "We then see the same setup for our left and right hand so we'll focus on just the left hand."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:109
msgid "We have an :ref:`XRController3D<class_XRController3D>` that will track the location of our hand."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:114
msgid "We are using the ``grip`` pose in this example. The ``palm`` pose is arguably more suitable and predictable however it is not supported by all XR runtimes. See the hand tracking demo project for a solution to switching between these poses based on what is supported."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:119
msgid "As a child of the node we have an :ref:`AnimatableBody3D<class_AnimatableBody3D>` node that follows the tracked location of the hand **but** will interact with physics objects to stop the player's hand from going through walls etc. This node has a collision shape that encapsulates the hand."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:126
msgid "It is important to set the physics priority so that this logic runs after any physics logic that moves the XROrigin3D node or the hand will lag a frame behind."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:130
msgid "The script below shows a basic implementation for this that you can build upon."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:155
msgid "Finally we see another :ref:`OpenXRRenderModelManager<class_OpenXRRenderModelManager>` node, this one with ``target`` set to the appropriate hand and ``make_local_to_pose`` set to the correct pose. This will ensure that the render models related to this hand are properly shown and offset if our collision handler has altered the location."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:169
msgid "Render model node"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:171
msgid "The :ref:`OpenXRRenderModel<class_OpenXRRenderModel>` node implements all the logic to display and position a given render model provided by the render models API."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:175
msgid "Instances of this node are added by the render model manager node we used up above but you can interact with these directly if you wish."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:178
msgid "Whenever Godot obtains information about a new render model an RID is created to reference that render model."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:181
msgid "By assigning that RID to the ``render_model`` property on this node, the node will start displaying the render model and manage both the transform that places the render model in the correct place and animates all the sub objects."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:186
msgid "The ``get_top_level_path`` function will return the top level path associated with this render model. This will point to either the left or right hand. As the top level path can be set or cleared depending on whether the user picks up, or puts down, the controller you can connect to the ``render_model_top_level_path_changes`` signal and react to these changes."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:193
msgid "Depending on your setup of the :ref:`OpenXRRenderModelManager<class_OpenXRRenderModelManager>` nodes, render models will be removed or added as their top level path changes."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:198
msgid "Backend access"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:200
msgid "The nodes we've detailed out above handle all the display logic for us but it is possible to interact with the data that drives this directly and create your own implementation."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:204
msgid "For this you can access the :ref:`OpenXRRenderModelExtension<class_OpenXRRenderModelExtension>` singleton."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:208
msgid "This object also lets you query whether render models are supported and enabled on the device currently being used by calling the ``is_active`` function on this object."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:212
msgid "The built-in logic implements the `interaction render model API <https://registry.khronos.org/OpenXR/specs/1.1/html/xrspec.html#XR_EXT_interaction_render_model>`_ that lists all render models related to controllers and similar devices that are present in the action map. It will automatically create and remove render model entities that are exposed through this API."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:219
msgid "As other extensions become available these can be implemented in a GDExtension plugin. Such a plugin can call ``render_model_create`` and ``render_model_destroy`` to create the object that will provide access to that render model through the core render models API."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:225
msgid "You should not destroy a render model outside of this logic."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:227
msgid "You can connect to the ``render_model_added`` and ``render_model_removed`` signals to be informed when new render models are added or removed."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:231
msgid "The core methods for working with this API are listed below:"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:234
msgid "Render modele extension functions"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:237
msgid "Function"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:238
msgid "Description"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:239
msgid "render_model_get_all"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:240
msgid "Provides an array of RIDs for all render models that are being tracked."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:242
msgid "render_model_new_scene_instance"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:243
msgid "Provides a new scene that contains all meshes needed to display the render model."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:245
msgid "render_model_get_subaction_paths"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:246
msgid "Provides a list of subaction paths from your action map related to this render mode."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:248
msgid "render_model_get_top_level_path"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:249
msgid "Returns the top level path associated with this render model (if any). Use the ``render_model_top_level_path_changed`` signal to react to this changing."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:253
msgid "render_model_get_confidence"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:254
msgid "Returns the tracking confidence for the tracking data for this render model."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:256
msgid "render_model_get_root_transform"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:257
msgid "Returns the root transform for this render model within our current reference space. This can be used to place the render model in space."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:260
msgid "render_model_get_animatable_node_count"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:261
msgid "Returns the number of nodes in our render model scene that can be animated"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:263
msgid "render_model_get_animatable_node_name"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:264
msgid "Returns the name of the node that we can animate. Note that this node can be any number of levels deep within the scene."
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:267
msgid "render_model_is_animatable_node_visible"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:268
msgid "Returns true if this animatable node should be visible"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:270
msgid "render_model_get_animatable_node_transform"
msgstr ""

#: ../../docs/tutorials/xr/openxr_render_models.rst:271
msgid "Returns the transform for this animatable node. This is a local transform that can be directly applied."
msgstr ""
