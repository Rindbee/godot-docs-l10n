# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/introduction_to_3d.rst:4
msgid "Introduction to 3D"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:6
msgid "Creating a 3D game can be challenging. That extra Z coordinate makes many of the common techniques that helped to make 2D games simpler no longer work. To aid in this transition, it is worth mentioning that Godot uses similar APIs for 2D and 3D. Most nodes are the same and are present in both 2D and 3D versions. In fact, it is worth checking the 3D platformer tutorial, or the 3D kinematic character tutorials, which are almost identical to their 2D counterparts."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:14
msgid "An example 3D game demo created using Godot"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:18
msgid "Godot Third Person Shooter (TPS) Demo, available on the `Github repository <https://github.com/godotengine/tps-demo>`__ or the :ref:`Asset Library <doc_project_manager_downloading_demos>`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:22
msgid "In 3D, math is a little more complex than in 2D. For an introduction to the relevant math written for game developers, not mathemeticians or engineers, check out :ref:`doc_vector_math` and :ref:`doc_using_transforms`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:27
msgid "3D workspace"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:29
msgid "Editing 3D scenes is done in the 3D workspace. This workspace can be selected manually, but it will be automatically selected when a Node3D node is selected."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:35
msgid "Similar to 2D, the tabs below the workspace selector are used to change between currently opened scenes or create a new one using the plus (+) button. The left and right docks should be familiar from :ref:`editor introduction <doc_editor_introduction>`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:39
msgid "Below the scene selector, the main toolbar is visible, and beneath the main toolbar is the 3D viewport."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:43
msgid "Main toolbar"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:45
msgid "Some buttons in the main toolbar are the same as those in the 2D workspace. A brief explanation is given with the shortcut if the mouse cursor is hovered over a button for one second. Some buttons may have additional functionality if another keypress is performed. A recap of main functionality of each button with its default shortcut is provided below from left to right:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:53
msgid "**Select Mode** (:kbd:`Q`): Allows selection of nodes in the viewport. Left clicking on a node to select one. Left clicking and dragging a rectangle selects all nodes within the rectangle's boundaries, once released. Holding :kbd:`Shift` while selecting adds more nodes to the selection. Clicking on a selected node while holding :kbd:`Shift` deselects the node. In this mode, you can use the gizmos to perform movement or rotation."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:59
msgid "**Move Mode** (:kbd:`W`): Enables move (or translate) mode for the selected nodes. See :ref:`doc_introduction_to_3d_space_and_manipulation` for more details."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:61
msgid "**Rotate Mode** (:kbd:`E`): Enables rotation mode for the selected nodes. See :ref:`doc_introduction_to_3d_space_and_manipulation` for more details."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:63
msgid "**Scale Mode** (:kbd:`R`): Enables scaling and displays scaling gizmos in different axes for the selected nodes. See :ref:`doc_introduction_to_3d_space_and_manipulation` for more details."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:66
msgid "**Show the list of selectable nodes at the clicked position**: As the description suggests, this provides a list of selectable nodes at the clicked position as a context menu, if there is more than one node in the clicked area."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:69
msgid "**Lock** (:kbd:`Ctrl + L`) the selected nodes, preventing selection and movement in the viewport. Clicking the button again (or using :kbd:`Ctrl + Shift + L`) unlocks the selected nodes. Locked nodes can only be selected in the scene tree. They can easily be identified with a padlock next to their node names in the scene tree. Clicking on this padlock also unlocks the nodes."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:74
msgid "**Group selected nodes** (:kbd:`Ctrl + G`). This allows selection of the root node if any of the children are selected. Using :kbd:`Ctrl + G` ungroups them. Additionally, clicking the ungroup button in the scene tree performs the same action."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:78
msgid "**Ruler Mode** (:kbd:`M`): When enabled you can click and drag to measure distance in the scene in meters."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:80
msgid "**Use Local Space** (:kbd:`T`): If enabled, gizmos of a node are drawn using the current node's rotation angle instead of the :ref:`global viewport axes <doc_introduction_to_3d_coordinate_system>`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:82
msgid "**Use Snap** (:kbd:`Y`): If enabled, movement, and rotation snap to grid. Snapping can also temporarily be activated using :kbd:`Ctrl` while performing the action. The settings for changing snap options are explained below."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:85
msgid "**Toggle preview sunlight**: If no DirectionalLight3D exist in the scene, a preview of sunlight can be used as a light source. See :ref:`doc_introduction_to_3d_preview_environment_light` for more details."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:88
msgid "**Toggle preview environment**: If no WorldEnvironment exists in the scene, a preview of the environment can be used as a placeholder. See :ref:`doc_introduction_to_3d_preview_environment_light` for more details."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:91
msgid "**Edit Sun and Environment Settings (three dots)**: Opens the menu to configure preview sunlight and environment settings. See :ref:`doc_introduction_to_3d_preview_environment_light` for more details."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:95
msgid "**Transform menu**: It has three options:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:97
msgid "*Snap Object to Floor*: Snaps an object to a solid floor."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:98
msgid "*Transform Dialog*: Opens a dialog to adjust transform parameters (translate, rotate, scale, and transform) manually."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:100
msgid "*Snap Settings*: Allows you to change transform, rotate snap (in degrees), and scale snap (in percent) settings."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:103
msgid "**View menu**: Controls the view options and enables additional viewports:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:107
msgid "In this menu, you can also show/hide grids, which are set to 1x1 meter by default, and the origin, where the blue, green, and red axis lines intersect. Moreover, specific types of gizmos can be toggled in this menu."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:113
msgid "An open eye means that the gizmo is visible, a closed eye means it is hidden. A half-open eye means that it is also visible through opaque surfaces."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:116
msgid "Clicking on *Settings* in this view menu opens a window to change the *Vertical Field of View (VFOV)* parameter (in degrees), *Z-Near*, and *Z-Far* values."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:120
msgid "Next to the View menu, additional buttons may be visible. In the toolbar image at the beginning of this chapter, an additional *Mesh* button appears because a MeshInstance3D is selected. This menu provides some quick actions or tools to work on a specific node or selection."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:126
msgid "View menu of viewport"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:128
msgid "Below the *Select* tool, in the 3D viewport, clicking on the three dots opens the **View menu** for the viewport. Hiding all shown gizmos in the editor's 3D view can also be performed through this menu:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:135
msgid "This menu also displays the current view type and enables quick adjustment of the viewport's viewing angle. Additionally, it offers options to modify the appearance of nodes within the viewport."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:142
msgid "Coordinate system"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:144
msgid "Godot uses the `metric <https://en.wikipedia.org/wiki/Metric_system>`__ system for everything in 3D, with 1 unit being equal to 1 meter. Physics and other areas are tuned for this scale. Therefore, attempting to use a different scale is usually a bad idea (unless you know what you are doing)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:149
msgid "When working with 3D assets, it's always best to work in the correct scale (set the unit to metric in your 3D modeling software). Godot allows scaling post-import and, while this works in most cases, in rare situations it may introduce floating-point precision issues (and thus, glitches or artifacts) in delicate areas such as rendering or physics. Make sure your artists always work in the right scale!"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:156
msgid "The Y coordinate is used for \"up\". As for the horizontal X/Z axes, Godot uses a **right-handed** coordinate system. This means that for most objects that need alignment (such as lights or cameras), the Z axis is used as a \"pointing towards\" direction. This convention roughly means that:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:161
msgid "**X** is sides"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:162
msgid "**Y** is up/down"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:163
msgid "**Z** is front/back"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:165
msgid "See this chart for comparison with other 3D software:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:167
msgid "3D coordinate systems comparison chart"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:171
msgid "Image by `Freya Holmér <https://twitter.com/FreyaHolmer>`__"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:177
msgid "Space and manipulation gizmos"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:179
msgid "Moving, rotating, and scaling objects in the 3D view is done through the manipulator gizmos. Each axis is represented by a color: Red, Green, Blue represent X, Y, Z respectively. This convention applies to the grid and other gizmos too (and also to the shader language, ordering of components for Vector3, Color, etc.)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:188
msgid "Some useful keybindings:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:190
msgid "To snap placement or rotation, press :kbd:`Ctrl` while moving, scaling, or rotating."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:192
msgid "To center the view on the selected object, press :kbd:`F`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:194
msgid "In the viewport, the arrows can be clicked and held to move the object on an axis. The arcs can be clicked and held to rotate the object. To lock one axis and move the object freely in the other two axes, the colored rectangles can be clicked, held, and dragged."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:199
msgid "If the transform mode is changed from *Select Mode* to *Scale Mode*, the arrows will be replaced by cubes, which can be dragged to scale an object as if the object is being moved."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:203
msgid "Navigating the 3D environment"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:205
msgid "In 3D environments, it is often important to adjust the viewpoint or angle from which you are viewing the scene. In Godot, navigating the 3D environment in the viewport (or spatial editor) can be done in multiple ways."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:210
msgid "The default 3D scene navigation controls are similar to Blender (aiming to have some sort of consistency in the free software pipeline), but options are included to customize mouse buttons and behavior to be similar to other tools in the Editor Settings. To change the controls to Maya or Modo controls, you can navigate to **Editor Settings > Editors > 3D**. Then, under *Navigation*, search for *Navigation Scheme*."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:219
msgid "Using the default settings, the following shortcuts control how one can navigate in the viewport:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:222
msgid "Pressing the middle mouse button and dragging the mouse allows you to orbit around the center of what is on the screen."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:225
msgid "It is also possible to left-click and hold the manipulator gizmo located on the top right of the viewport to orbit around the center:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:230
msgid "Left-clicking on one of the colored circles will set the view to the chosen orthogonal and the viewport's view menu will be updated accordingly."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:235
msgid "If the *Perspective* view is enabled on the viewport (can be seen on the viewport's View menu, not the View menu on the main toolbar), holding down the right mouse button on the viewport or pressing :kbd:`Shift + F` switches to \"free-look\" mode. In this mode you can move the mouse to look around, use the :kbd:`W` :kbd:`A` :kbd:`S` :kbd:`D` keys to fly around the view, :kbd:`E` to go up, and :kbd:`Q` to go down. To disable this mode, release the right mouse button or press :kbd:`Shift + F` again."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:243
msgid "In the free-look mode, you can temporarily increase the flying speed using :kbd:`Shift` or decrease it using :kbd:`Alt`. To change and keep the speed modifier use :kbd:`mouse wheel up` or :kbd:`mouse wheel down`, to increase or decrease it, respectively."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:248
msgid "In orthogonal mode, holding the right mouse button will pan the view instead. Use :kbd:`Keypad 5` to toggle between perspective and orthogonal view."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:252
msgid "Using Blender-style transform shortcuts"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:254
msgid "Since Godot 4.2, you can enable Blender-style shortcuts for translating, rotating and scaling nodes. In Blender, these shortcuts are:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:257
msgid ":kbd:`G` for translating"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:258
msgid ":kbd:`R` for rotating"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:259
msgid ":kbd:`S` for scaling"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:261
msgid "After pressing a shortcut key while focusing on the 3D editor viewport, move the mouse or enter a number to move the selected node(s) by the specified amount in 3D units. You can constrain movement to a specific axis by specifying the axis as a letter, then the distance (if entering a value with the keyboard)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:267
msgid "For instance, to move the selection upwards by 2.5 units, enter the following sequence in order (Y+ is upwards in Godot):"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:270
msgid ":kbd:`G`-:kbd:`Y`-:kbd:`2`-:kbd:`.`-:kbd:`5`-:kbd:`Enter`"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:272
msgid "To use Blender-style transform shortcuts in Godot, go to the Editor Settings' **Shortcuts** tab, then in the Spatial Editor section:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:275
msgid "Bind **Begin Translate Transformation** to :kbd:`G`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:276
msgid "Bind **Begin Rotate Transformation** to :kbd:`R`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:277
msgid "Bind **Begin Scale Transformation** to :kbd:`S`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:278
msgid "Finally, unbind **Scale Mode** so that its shortcut won't conflict with **Begin Rotate Transformation**."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:281
msgid "More shortcuts can be found on the :ref:`doc_default_key_mapping_shortcuts_spatial_editor` page."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:285
msgid "Node3D node"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:287
msgid ":ref:`Node2D <class_Node2D>` is the base node for 2D. :ref:`Control <class_Control>` is the base node for everything GUI. Following this reasoning, the 3D engine uses the :ref:`Node3D <class_Node3D>` node for everything 3D."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:294
msgid "Node3Ds have a local transform, which is relative to the parent node (as long as the parent node is also of **or inherits from** the type Node3D). This transform can be accessed as a 3×4 :ref:`Transform3D <class_Transform3D>`, or as 3 :ref:`Vector3 <class_Vector3>` members representing location, Euler rotation (X, Y and Z angles) and scale."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:304
msgid "3D content"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:306
msgid "Unlike 2D, where loading image content and drawing is straightforward, 3D is a little more difficult. The content needs to be created with special 3D tools (also called Digital Content Creation tools, or DCCs) and exported to an exchange file format to be imported in Godot. This is required since 3D formats are not as standardized as images."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:313
msgid "Manually authored models (using 3D modeling software)"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:318
msgid "It is possible to import 3D models in Godot created in external tools. Depending on the format, you can import entire scenes (exactly as they look in the 3D modeling software), including animation, skeletal rigs, blend shapes, or as simple resources."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:323
msgid "See :ref:`doc_importing_3d_scenes` for more on importing."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:326
msgid "Generated geometry"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:328
msgid "It is possible to create custom geometry by using the :ref:`ArrayMesh <class_ArrayMesh>` resource directly. Simply create your arrays and use the :ref:`ArrayMesh.add_surface_from_arrays() <class_ArrayMesh_method_add_surface_from_arrays>` function. A helper class is also available, :ref:`SurfaceTool <class_SurfaceTool>`, which provides a more straightforward API and helpers for indexing, generating normals, tangents, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:335
msgid "In any case, this method is meant for generating static geometry (models that will not be updated often), as creating vertex arrays and submitting them to the 3D API has a significant performance cost."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:339
msgid "To learn about prototyping inside Godot or using external tools, see :ref:`doc_csg_tools`."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:344
msgid "Immediate geometry"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:346
msgid "If, instead, you need to generate simple geometry that will be updated often, Godot provides a special :ref:`ImmediateMesh <class_ImmediateMesh>` resource that can be used in a :ref:`MeshInstance3D <class_MeshInstance3D>` node. This provides an OpenGL 1.x-style immediate-mode API to create points, lines, triangles, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:353
msgid "2D in 3D"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:355
msgid "While Godot packs a powerful 2D engine, many types of games use 2D in a 3D environment. By using a fixed camera (either orthogonal or perspective) that does not rotate, nodes such as :ref:`Sprite3D <class_Sprite3D>` and :ref:`AnimatedSprite3D <class_AnimatedSprite3D>` can be used to create 2D games that take advantage of mixing with 3D backgrounds, more realistic parallax, lighting/shadow effects, etc."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:363
msgid "The disadvantage is, of course, that added complexity and reduced performance in comparison to plain 2D, as well as the lack of reference of working in pixels."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:368
msgid "Environment"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:370
msgid "Besides editing a scene, it is often common to edit the environment. Godot provides a :ref:`WorldEnvironment <class_WorldEnvironment>` node that allows changing the background color, mode (as in, put a skybox), and applying several types of built-in post-processing effects. Environments can also be overridden in the Camera."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:379
msgid "Preview environment and light"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:381
msgid "By default, any 3D scene that doesn't have a :ref:`WorldEnvironment <class_WorldEnvironment>` node, or a :ref:`DirectionalLight3D <class_DirectionalLight3D>`, will have a preview turned on for what it's missing to light the scene."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:385
msgid "The preview light and environment will only be visible in the scene while in the editor. If you run the scene or export the project they will not affect the scene."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:389
msgid "The preview light and environment can be turned on or off from the top menu by clicking on their respective icon."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:395
msgid "The three dots dropdown menu next to those icons can be used to adjust the properties of the preview environment and light if they are enabled."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:401
msgid "The same preview sun and environment is used for every scene in the same project, So only make adjustments that would apply to all of the scenes you will need a preview light and environment for."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:406
msgid "Cameras"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:408
msgid "No matter how many objects are placed in the 3D space, nothing will be displayed unless a :ref:`Camera3D <class_Camera3D>` is also added to the scene. Cameras can work in either orthogonal or perspective projections:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:415
msgid "Cameras are associated with (and only display to) a parent or grandparent viewport. Since the root of the scene tree is a viewport, cameras will display on it by default, but if sub-viewports (either as render target or picture-in-picture) are desired, they need their own children cameras to display."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:423
msgid "When dealing with multiple cameras, the following rules are enforced for each viewport:"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:426
msgid "If no cameras are present in the scene tree, the first one that enters it will become the active camera. Further cameras entering the scene will be ignored (unless they are set as *current*)."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:429
msgid "If a camera has the \"*current*\" property set, it will be used regardless of any other camera in the scene. If the property is set, it will become active, replacing the previous camera."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:432
msgid "If an active camera leaves the scene tree, the first camera in tree-order will take its place."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:436
msgid "Lights"
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:438
msgid "The background environment emits some ambient light which appears on surfaces. Still, without any light sources placed in the scene, the scene will appear quite dark unless the background environment is very bright."
msgstr ""

#: ../../docs/tutorials/3d/introduction_to_3d.rst:442
msgid "Most outdoor scenes have a directional light (the sun or moon), while indoor scenes typically have several positional lights (lamps, torches, …). See :ref:`doc_lights_and_shadows` for more information on setting up lights in Godot."
msgstr ""
