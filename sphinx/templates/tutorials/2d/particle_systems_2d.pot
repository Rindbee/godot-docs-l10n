# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/particle_systems_2d.rst:6
msgid "2D particle systems"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:9
msgid "Intro"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:11
msgid "Particle systems are used to simulate complex physical effects, such as sparks, fire, magic particles, smoke, mist, etc."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:14
msgid "The idea is that a \"particle\" is emitted at a fixed interval and with a fixed lifetime. During its lifetime, every particle will have the same base behavior. What makes each particle different from the rest and provides a more organic look is the \"randomness\" associated with each parameter. In essence, creating a particle system means setting base physics parameters and then adding randomness to them."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:22
msgid "Particle nodes"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:24
msgid "Godot provides two different nodes for 2D particles, :ref:`class_GPUParticles2D` and :ref:`class_CPUParticles2D`. GPUParticles2D is more advanced and uses the GPU to process particle effects. CPUParticles2D is a CPU-driven option with near-feature parity with GPUParticles2D, but lower performance when using large amounts of particles. On the other hand, CPUParticles2D may perform better on low-end systems or in GPU-bottlenecked situations."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:31
msgid "While GPUParticles2D is configured via a :ref:`class_ParticleProcessMaterial` (and optionally with a custom shader), the matching options are provided via node properties in CPUParticles2D (with the exception of the trail settings)."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:35
msgid "Going forward there are no plans to add new features to CPUParticles2D, though pull requests to add features already in GPUParticles2D will be accepted. For that reason we recommend using GPUParticles3D unless you have an explicit reason not to."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:40
msgid "You can convert a CPUParticles2D node into a GPUParticles2D node by clicking on the node in the scene tree, selecting the 2D workspace, and selecting **CPUParticles2D > Convert to GPUParticles2D** in the toolbar."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:46
msgid "It is also possible to convert a GPUParticles2D node to a CPUParticles2D node, however there may be issues if you use GPU-only features."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:49
msgid "The rest of this tutorial is going to use the GPUParticles2D node. First, add a GPUParticles2D node to your scene. After creating that node you will notice that only a white dot was created, and that there is a warning icon next to your GPUParticles2D node in the scene dock. This is because the node needs a ParticleProcessMaterial to function."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:55
msgid "ParticleProcessMaterial"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:57
msgid "To add a process material to your particles node, go to ``Process Material`` in your inspector panel. Click on the box next to ``Material``, and from the dropdown menu select ``New ParticleProcessMaterial``."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:63
msgid "Your GPUParticles2D node should now be emitting white points downward."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:69
msgid "Texture"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:71
msgid "A particle system can use a single texture or an animation *flipbook*. A flipbook is a texture that contains several frames of animation that can be played back, or chosen at random during emission. This is equivalent to a spritesheet for particles."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:76
msgid "The texture is set via the **Texture** property:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:83
msgid "Using an animation flipbook"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:85
msgid "Particle flipbooks are suited to reproduce complex effects such as smoke, fire, explosions. They can also be used to introduce random texture variation, by making every particle use a different texture. You can find existing particle flipbook images online, or pre-render them using external tools such as `Blender <https://www.blender.org/>`__ or `EmberGen <https://jangafx.com/software/embergen/>`__."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:91
#: ../../docs/tutorials/2d/particle_systems_2d.rst:95
msgid "Example of a particle system that uses a flipbook texture"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:97
msgid "Using an animation flipbook requires additional configuration compared to a single texture. For demonstration purposes, we'll use this texture with 5 columns and 7 rows (right-click and choose **Save asâ€¦**):"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:101
msgid "Particle flipbook texture example"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:106
msgid "Credit: `JoesAlotofthings <https://opengameart.org/content/alot-of-particles-indispersal-special-effect-alotofparticles30>`__ (CC BY 4.0)"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:109
msgid "To use an animation flipbook, you must create a new CanvasItemMaterial in the Material section of the GPUParticles2D (or CPUParticles2D) node:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:112
#: ../../docs/tutorials/2d/particle_systems_2d.rst:116
msgid "Creating a CanvasItemMaterial at the bottom of the particles node inspector"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:118
msgid "In this CanvasItemMaterial, enable **Particle Animation** and set **H Frames** and **V Frames** to the number of columns and rows present in your flipbook texture:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:121
#: ../../docs/tutorials/2d/particle_systems_2d.rst:125
msgid "Configuring the CanvasItemMaterial for the example flipbook texture"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:127
msgid "Once this is done, the :ref:`Animation section <doc_particle_systems_2d_animation>` in ParticleProcessMaterial (for GPUParticles2D) or in the CPUParticles2D inspector will be effective."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:133
msgid "If your flipbook texture has a black background instead of a transparent background, you will also need to set the blend mode to **Add** instead of **Mix** for correct display. Alternatively, you can modify the texture to have a transparent background in an image editor. In `GIMP <https://gimp.org>`__, this can be done using the **Color > Color to Alpha** menu."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:140
msgid "Time parameters"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:143
msgid "Lifetime"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:145
msgid "The time in seconds that every particle will stay alive. When lifetime ends, a new particle is created to replace it."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:148
msgid "Lifetime: 0.5"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:152
msgid "Lifetime: 4.0"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:157
msgid "One Shot"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:159
msgid "When enabled, a GPUParticles2D node will emit all of its particles once and then never again."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:163
msgid "Preprocess"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:165
msgid "Particle systems begin with zero particles emitted, then start emitting. This can be an inconvenience when loading a scene and systems like a torch, mist, etc. begin emitting the moment you enter. Preprocess is used to let the system process a given number of seconds before it is actually drawn the first time."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:172
msgid "Speed Scale"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:174
msgid "The speed scale has a default value of ``1`` and is used to adjust the speed of a particle system. Lowering the value will make the particles slower while increasing the value will make the particles much faster."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:179
msgid "Explosiveness"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:181
msgid "If lifetime is ``1`` and there are 10 particles, it means a particle will be emitted every 0.1 seconds. The explosiveness parameter changes this, and forces particles to be emitted all together. Ranges are:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:185
msgid "0: Emit particles at regular intervals (default value)."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:186
msgid "1: Emit all particles simultaneously."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:188
msgid "Values in the middle are also allowed. This feature is useful for creating explosions or sudden bursts of particles:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:194
msgid "Randomness"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:196
msgid "All physics parameters can be randomized. Random values range from ``0`` to ``1``. The formula to randomize a parameter is:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:204
msgid "Fixed FPS"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:206
msgid "This setting can be used to set the particle system to render at a fixed FPS. For instance, changing the value to ``2`` will make the particles render at 2 frames per second. Note this does not slow down the particle system itself."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:212
msgid "Godot 4.3 does not currently support physics interpolation for 2D particles. As a workaround, disable physics interpolation for the particles node by setting **Node > Physics Interpolation > Mode** at the bottom of the inspector."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:217
msgid "Fract Delta"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:219
msgid "Setting Fract Delta to ``true`` results in fractional delta calculation, which has a smoother particles display effect. This increased smoothness stems from higher accuracy. The difference is more noticeable in systems with high randomness or fast-moving particles. It helps maintain the visual consistency of the particle system, making sure that each particle's motion aligns with its actual lifespan. Without it, particles might appear to jump or move more than they should in a single frame if they are emitted at a point within the frame. The greater accuracy has a performance tradeoff, particularly in systems with a higher amount of particles."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:231
msgid "Drawing parameters"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:234
msgid "Visibility Rect"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:237
msgid "The visibility rectangle controls the visibility of the particles on screen. If this rectangle is outside of the viewport, the engine will not render the particles on screen."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:239
msgid "The rectangle's ``W`` and ``H`` properties respectively control its Width and its Height. The ``X`` and ``Y`` properties control the position of the upper-left corner of the rectangle, relative to the particle emitter."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:243
msgid "You can have Godot generate a Visibility Rect automatically using the toolbar above the 2d view. To do so, select the GPUParticles2D node and Click ``Particles > Generate Visibility Rect``. Godot will simulate the Particles2D node emitting particles for a few seconds and set the rectangle to fit the surface the particles take."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:245
msgid "You can control the emit duration with the ``Generation Time (sec)`` option. The maximum value is 25 seconds. If you need more time for your particles to move around, you can temporarily change the ``preprocess`` duration on the Particles2D node."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:248
msgid "Local Coords"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:250
msgid "By default this option is on, and it means that the space that particles are emitted to is relative to the node. If the node is moved, all particles are moved with it:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:256
msgid "If disabled, particles will emit to global space, meaning that if the node is moved, already emitted particles are not affected:"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:262
msgid "Draw Order"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:264
msgid "This controls the order in which individual particles are drawn. ``Index`` means particles are drawn according to their emission order (default). ``Lifetime`` means they are drawn in order of remaining lifetime."
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:269
msgid "Particle Process Material Settings"
msgstr ""

#: ../../docs/tutorials/2d/particle_systems_2d.rst:271
msgid "For information on the settings in the ParticleProcessMaterial see :ref:`this page<doc_particle_process_material_2d>`."
msgstr ""
