# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/performance/index.rst:6
msgid "Performance"
msgstr ""

#: ../../docs/tutorials/performance/index.rst:9
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/performance/index.rst:11
msgid "Godot follows a balanced performance philosophy. In the performance world, there are always tradeoffs, which consist of trading speed for usability and flexibility. Some practical examples of this are:"
msgstr ""

#: ../../docs/tutorials/performance/index.rst:15
msgid "Rendering large amounts of objects efficiently is easy, but when a large scene must be rendered, it can become inefficient. To solve this, visibility computation must be added to the rendering. This makes rendering less efficient, but at the same time, fewer objects are rendered. Therefore, the overall rendering efficiency is improved."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:21
msgid "Configuring the properties of every material for every object that needs to be rendered is also slow. To solve this, objects are sorted by material to reduce the costs. At the same time, sorting has a cost."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:25
msgid "In 3D physics, a similar situation happens. The best algorithms to handle large amounts of physics objects (such as SAP) are slow at insertion/removal of objects and raycasting. Algorithms that allow faster insertion and removal, as well as raycasting, will not be able to handle as many active objects."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:31
msgid "And there are many more examples of this! Game engines strive to be general-purpose in nature. Balanced algorithms are always favored over algorithms that might be fast in some situations and slow in others, or algorithms that are fast but are more difficult to use."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:36
msgid "Godot is not an exception to this. While it is designed to have backends swappable for different algorithms, the default backends prioritize balance and flexibility over performance."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:40
msgid "With this clear, the aim of this tutorial section is to explain how to get the maximum performance out of Godot. While the tutorials can be read in any order, it is a good idea to start from :ref:`doc_general_optimization`."
msgstr ""

#: ../../docs/tutorials/performance/index.rst:45
msgid "Common"
msgstr ""

#: ../../docs/tutorials/performance/index.rst:55
msgid "CPU"
msgstr ""

#: ../../docs/tutorials/performance/index.rst:64
msgid "GPU"
msgstr ""

#: ../../docs/tutorials/performance/index.rst:75
msgid "3D"
msgstr ""

#: ../../docs/tutorials/performance/index.rst:86
msgid "Threads"
msgstr ""
