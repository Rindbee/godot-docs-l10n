# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/math/interpolation.rst:4
msgid "Interpolation"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:6
msgid "Interpolation is a common operation in graphics programming, which is used to blend or transition between two values. Interpolation can also be used to smooth movement, rotation, etc. It's good to become familiar with it in order to expand your horizons as a game developer."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:11
msgid "The basic idea is that you want to transition from A to B. A value ``t``, represents the states in-between."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:13
msgid "For example, if ``t`` is 0, then the state is A. If ``t`` is 1, then the state is B. Anything in-between is an *interpolation*."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:15
msgid "Between two real (floating-point) numbers, an interpolation can be described as:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:21
msgid "And often simplified to:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:27
msgid "The name of this type of interpolation, which transforms a value into another at *constant speed* is *\"linear\"*. So, when you hear about *Linear Interpolation*, you know they are referring to this formula."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:29
msgid "There are other types of interpolations, which will not be covered here. A recommended read afterwards is the :ref:`Bezier <doc_beziers_and_curves>` page."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:32
msgid "Vector interpolation"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:34
msgid "Vector types (:ref:`Vector2 <class_Vector2>` and :ref:`Vector3 <class_Vector3>`) can also be interpolated, they come with handy functions to do it :ref:`Vector2.lerp() <class_Vector2_method_lerp>` and :ref:`Vector3.lerp() <class_Vector3_method_lerp>`."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:37
msgid "For cubic interpolation, there are also :ref:`Vector2.cubic_interpolate() <class_Vector2_method_cubic_interpolate>` and :ref:`Vector3.cubic_interpolate() <class_Vector3_method_cubic_interpolate>`, which do a :ref:`Bezier <doc_beziers_and_curves>` style interpolation."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:39
msgid "Here is example pseudo-code for going from point A to B using interpolation:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:66
msgid "It will produce the following motion:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:71
msgid "Transform interpolation"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:73
msgid "It is also possible to interpolate whole transforms (make sure they have either uniform scale or, at least, the same non-uniform scale). For this, the function :ref:`Transform3D.interpolate_with() <class_Transform3D_method_interpolate_with>` can be used."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:76
msgid "Here is an example of transforming a monkey from Position1 to Position2:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:80
msgid "Using the following pseudocode:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:107
msgid "And again, it will produce the following motion:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:113
msgid "Smoothing motion"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:115
msgid "Interpolation can be used to smoothly follow a moving target value, such as a position or a rotation. Each frame, ``lerp()`` moves the current value towards the target value by a fixed percentage of the remaining difference between the values. The current value will smoothly move towards the target, slowing down as it gets closer. Here is an example of a circle following the mouse using interpolation smoothing:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:144
msgid "Here is how it looks:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:148
msgid "This is useful for smoothing camera movement, for allies following the player (ensuring they stay within a certain range), and for many other common game patterns."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:152
msgid "Despite using ``delta``, the formula used above is framerate-dependent, because the ``weight`` parameter of ``lerp()`` represents a *percentage* of the remaining difference in values, not an *absolute amount to change*. In ``_physics_process()``, this is usually fine because physics is expected to maintain a constant framerate, and therefore ``delta`` is expected to remain constant."
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:158
msgid "For a framerate-independent version of interpolation smoothing that can also be used in ``process()``, use the following formula instead:"
msgstr ""

#: ../../docs/tutorials/math/interpolation.rst:184
msgid "Deriving this formula is beyond the scope of this page. For an explanation, see `Improved Lerp Smoothing <https://www.gamedeveloper.com/programming/improved-lerp-smoothing->`__ or watch `Lerp smoothing is broken <https://www.youtube.com/watch?v=LSNQuFEDOyQ>`__."
msgstr ""
