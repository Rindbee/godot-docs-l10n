# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:4
msgid "Import configuration"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:6
msgid "Godot provides several ways to customize the imported data, such as the import dock, the advanced import setting dialog, and inherited scenes. This can be used to make further changes to the imported scene, such as adjusting meshes, adding physics information, and adding new nodes. You can also write a script that runs code at the end of the import process to perform arbitrary customization."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:13
msgid "Note that, when applicable, modifying the original data should be preferred to configuring the scene after import. This helps minimize the differences between the 3D modeling application and the imported scene. See the :ref:`doc_importing_3d_scenes_model_export_considerations` and :ref:`doc_importing_3d_scenes_node_type_customization` articles for more information."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:21
msgid "Import workflows"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:23
msgid "Since Godot can only save its own scene format (``.tscn``/``.scn``), Godot cannot save over the original 3D scene file (which uses a different format). This is also a safer approach as it avoids making accidental changes to the source file."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:28
msgid "To allow customizing the scene and its materials, Godot's scene importer allows for different workflows regarding how data is imported."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:31
#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:35
msgid "Import dock after selecting a 3D scene in the FileSystem dock"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:37
msgid "This import process is customizable using 3 separate interfaces, depending on your needs:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:39
msgid "The **Import** dock, after selecting the 3D scene by clicking it once in the FileSystem dock."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:41
msgid "The **Advanced Import Settings** dialog, which can be accessed by double-clicking the 3D scene in the FileSystem dock or by clicking the **Advancedâ€¦** button in the Import dock. This allows you to customize per-object options in Godot, and preview models and animations. please see the :ref:`doc_advanced_import_settings` page for more information."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:46
msgid ":ref:`Import hints <doc_importing_3d_scenes_node_type_customization>`, which are special suffixes added to object names in the 3D modeling software. This allows you to customize per-object options in the 3D modeling software."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:50
msgid "For basic customization, using the Import dock suffices. However, for more complex operations such as defining material overrides on a per-material basis, you'll need to use the Advanced Import Settings dialog, import hints, or possibly both."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:57
msgid "Using the Import dock"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:59
msgid "The following options can be adjusted in the Import dock after selecting a 3D scene in the FileSystem dock:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:62
msgid "**Root Type:** The node type to use as a root node. Using node types that inherit from Node3D is recommended. Otherwise, you'll lose the ability to position the node directly in the 3D editor."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:65
msgid "**Root Name:** The name of the root node in the imported scene. This is generally not noticeable when instancing the scene in the editor (or drag-and-dropping from the FileSystem dock), as the root node is renamed to match the filename in this case."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:69
msgid "**Apply Root Scale:** If enabled, **Root Scale** will be *applied* on the meshes and animations directly, while keeping the root node's scale to the default `(1, 1, 1)`. This means that if you add a child node later on within the imported scene, it won't be scaled. If disabled, **Root Scale** will multiply the scale of the root node instead."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:75
msgid "**Meshes**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:77
msgid "**Ensure Tangents:** If checked, generate vertex tangents using `Mikktspace <http://www.mikktspace.com/>`__ if the input meshes don't have tangent data. When possible, it's recommended to let the 3D modeling software generate tangents on export instead on relying on this option. Tangents are required for correct display of normal and height maps, along with any material/shader features that require tangents. If you don't need material features that require tangents, disabling this can reduce output file size and speed up importing if the source 3D file doesn't contain tangents."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:85
msgid "**Generate LODs:** If checked, generates lower detail variants of the mesh which will be displayed in the distance to improve rendering performance. Not all meshes benefit from LOD, especially if they are never rendered from far away. Disabling this can reduce output file size and speed up importing. See :ref:`doc_mesh_lod` for more information."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:90
msgid "**Create Shadow Meshes:** If checked, enables the generation of shadow meshes on import. This optimizes shadow rendering without reducing quality by welding vertices together when possible. This in turn reduces the memory bandwidth required to render shadows. Shadow mesh generation currently doesn't support using a lower detail level than the source mesh (but shadow rendering will make use of LODs when relevant)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:96
msgid "**Light Baking:** Configures the meshes' :ref:`global illumination mode <class_GeometryInstance3D_property_gi_mode>` in the 3D scene. If set to **Static Lightmaps**, sets the meshes' GI mode to **Static** and generates UV2 on import for :ref:`lightmap baking <doc_using_lightmap_gi>`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:100
msgid "**Lightmap Texel Size:** Only visible if **Light Baking** is set to **Static Lightmaps**. Controls the size of each texel on the baked lightmap. A smaller value results in more precise lightmaps, at the cost of larger lightmap sizes and longer bake times."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:105
msgid "**Skins**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:107
msgid "**Use Named Skins:** If checked, use named :ref:`Skins <class_Skin>` for animation. The :ref:`class_MeshInstance3D` node contains 3 properties of relevance here: a skeleton NodePath pointing to the Skeleton3D node (usually ``..``), a mesh, and a skin:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:111
msgid "The :ref:`class_Skeleton3D` node contains a list of bones with names, their pose and rest, a name and a parent bone."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:113
msgid "The mesh is all of the raw vertex data needed to display a mesh. In terms of the mesh, it knows how vertices are weight-painted and uses some internal numbering often imported from 3D modeling software."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:116
msgid "The skin contains the information necessary to bind this mesh onto this Skeleton3D. For every one of the internal bone IDs chosen by the 3D modeling software, it contains two things. Firstly, a Matrix known as the Bind Pose Matrix, Inverse Bind Matrix, or IBM for short. Secondly, the Skin contains each bone's name (if **Use Named Skins** is enabled), or the bone's index within the Skeleton3D list (if **Use Named Skins** is disabled)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:122
msgid "Together, this information is enough to tell Godot how to use the bone poses in the Skeleton3D node to render the mesh from each MeshInstance3D. Note that each MeshInstance3D may share binds, as is common in models exported from Blender, or each MeshInstance3D may use a separate Skin object, as is common in models exported from other tools such as Maya."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:129
msgid "**Animation**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:131
msgid "**Import:** If checked, import animations from the 3D scene."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:132
msgid "**FPS:** The number of frames per second to use for baking animation curves to a series of points with linear interpolation. It's recommended to configure this value to match the value you're using as a baseline in your 3D modeling software. Higher values result in more precise animation with fast movement changes, at the cost of higher file sizes and memory usage. Thanks to interpolation, there is usually not much benefit in going above 30 FPS (as the animation will still appear smooth at higher rendering framerates)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:139
msgid "**Trimming:** Trim the beginning and end of animations if there are no keyframe changes. This can reduce output file size and memory usage with certain 3D scenes, depending on the contents of their animation tracks."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:142
msgid "**Remove Immutable Tracks:** Remove animation tracks that only contain default values. This can reduce output file size and memory usage with certain 3D scenes, depending on the contents of their animation tracks."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:146
msgid "**Import Script**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:148
msgid "**Path:** Path to an import script, which can run code *after* the import process has completed for custom processing. See :ref:`doc_importing_3d_scenes_import_script` for more information."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:152
msgid "**glTF**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:154
msgid "**Embedded Texture Handling:** Controls how textures embedded within glTF scenes should be handled. **Discard All Textures** will not import any textures, which is useful if you wish to manually set up materials in Godot instead. **Extract Textures** extracts textures to external images, resulting in smaller file sizes and more control over import options. **Embed as Basis Universal** and **Embed as Uncompressed** keeps the textures embedded in the imported scene, with and without VRAM compression respectively."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:162
msgid "**FBX**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:164
msgid "**Importer** Which import method is used. ubfx handles fbx files as fbx files. FBX2glTF converts FBX files to glTF on import and requires additional setup. FBX2glTF is not recommended unless you have a specific rason to use it over ufbx or working with a different file format."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:168
msgid "**Allow Geometry Helper Nodes** enables or disables geometry helper nodes"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:169
msgid "**Embedded Texture Handling:** Controls how textures embedded within fbx scenes should be handled. **Discard All Textures** will not import any textures, which is useful if you wish to manually set up materials in Godot instead. **Extract Textures** extracts textures to external images, resulting in smaller file sizes and more control over import options. **Embed as Basis Universal** and **Embed as Uncompressed** keeps the textures embedded in the imported scene, with and without VRAM compression respectively."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:180
msgid "Using import scripts for automation"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:182
msgid "A special script to process the whole scene after import can be provided. This is great for post-processing, changing materials, doing funny stuff with the geometry, and more."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:186
msgid "Create a script that is not attached to any node by right-clicking in the FileSystem dock and choosing **New > Scriptâ€¦**. In the script editor, write the following:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:212
msgid "The ``_post_import(scene: Node)`` function takes the imported scene as argument (the parameter is actually the root node of the scene). The scene that will finally be used **must** be returned (even if the scene can be entirely different)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:216
msgid "To use your script, locate the script in the import tab's \"Path\" option under the \"Import Script\" category."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:219
msgid "Using animation libraries"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:221
msgid "As of Godot 4.0, you can choose to import **only** animations from a glTF file and nothing else. This is used in some asset pipelines to distribute animations separately from models. For example, this allows you to use one set of animations for several characters, without having to duplicate animation data in every character."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:227
msgid "To do so, select the glTF file in the FileSystem dock, then change the import mode to Animation Library in the Import dock:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:230
#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:234
msgid "Changing the import type to Animation Library in the Import dock"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:236
msgid "Click **Reimport** and restart the editor when prompted. After restarting, the glTF file will be imported as an :ref:`class_AnimationLibrary` instead of a :ref:`class_PackedScene`. This animation library can then be referenced in an :ref:`class_AnimationPlayer` node."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:241
msgid "The import options that are visible after changing the import mode to Animation Library act the same as when using the Scene import mode. See :ref:`doc_importing_3d_scenes_using_the_import_dock` for more information."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:246
msgid "Filter script"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:248
msgid "It is possible to specify a filter script in a special syntax to decide which tracks from which animations should be kept."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:251
msgid "The filter script is executed against each imported animation. The syntax consists of two types of statements, the first for choosing which animations to filter, and the second for filtering individual tracks within the matched animation. All name patterns are performed using a case-insensitive expression match, with support for ``?`` and ``*`` wildcards (using :ref:`String.matchn() <class_String_method_matchn>` under the hood)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:258
msgid "The script must start with an animation filter statement (as denoted by the line beginning with an ``@``). For example, if we would like to apply filters to all imported animations which have a name ending in ``\"_Loop\"``:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:266
msgid "Similarly, additional patterns can be added to the same line, separated by commas. Here is a modified example to additionally *include* all animations with names that begin with ``\"Arm_Left\"``, but also *exclude* all animations which have names ending in ``\"Attack\"``:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:275
msgid "Following the animation selection filter statement, we add track filtering patterns to indicate which animation tracks should be kept or discarded. If no track filter patterns are specified, then all tracks within the matched animations will be discarded!"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:280
msgid "It's important to note that track filter statements are applied in order for each track within the animation, this means that one line may include a track, a later rule can still discard it. Similarly, a track excluded by an early rule may then be re-included once again by a filter rule further down in the filter script."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:286
msgid "For example: include all tracks in animations with names ending in ``\"_Loop\"``, but discard any tracks affecting a ``\"Skeleton\"`` which end in ``\"Control\"``, unless they have ``\"Arm\"`` in their name:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:297
msgid "In the above example, tracks like ``\"Skeleton:Leg_Control\"`` would be discarded, while tracks such as ``\"Skeleton:Head\"`` or ``\"Skeleton:Arm_Left_Control\"`` would be retained."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:301
msgid "Any track filter lines that do not begin with a ``+`` or ``-`` are ignored."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:304
msgid "Scene inheritance"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:306
msgid "In many cases, it may be desired to make manual modifications to the imported scene. By default, this is not possible because if the source 3D asset changes, Godot will re-import the *whole* scene."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:310
msgid "However, it is possible to make local modifications by using *scene inheritance*. If you try to open the imported scene using **Scene > Open Sceneâ€¦** or **Scene > Quick Open Sceneâ€¦**, the following dialog will appear:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:314
#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:318
msgid "Dialog when opening an imported 3D scene in the editor"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:320
msgid "In inherited scenes, the only limitations for modification are:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:322
msgid "Nodes from the base scene can't be removed, but additional nodes can be added anywhere."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:324
msgid "Subresources can't be edited. Instead, you need to save them externally as described above."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/import_configuration.rst:327
msgid "Other than that, everything is allowed."
msgstr ""
