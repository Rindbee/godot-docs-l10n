# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:4
msgid "Node type customization using name suffixes"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:6
msgid "Many times, when editing a scene, there are common tasks that need to be done after exporting:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:9
msgid "Adding collision detection to objects."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:10
msgid "Setting objects as navigation meshes."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:11
msgid "Deleting nodes that are not used in the game engine (like specific lights used for modeling)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:14
msgid "To simplify this workflow, Godot offers several suffixes that can be added to the names of the objects in your 3D modeling software. When imported, Godot will detect suffixes in object names and will perform actions automatically."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:20
msgid "All the suffixes described below can be used with ``-``, ``$``, and ``_`` and are **case-insensitive**."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:24
msgid "Opting out"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:26
msgid "If you do not want Godot to perform any of the actions described below, you can set the ``nodes/use_node_type_suffixes`` import option to ``false``. This will disable all node type suffixes, which keeps nodes the same type as the original file indicated. However, the ``-noimp`` suffix will still be respected, as well as non-node suffixes like ``-vcol`` or ``-loop``."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:32
msgid "Alternatively, you can completely opt out of all name suffixes by setting the ``nodes/use_name_suffixes`` import option to ``false``. This will completely stop the general scene import code from looking at name suffixes. However, the format-specific import code may still look at name suffixes, such as the glTF importer checking for the ``-loop`` suffix."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:38
msgid "Disabling these options makes editor-imported files more similar to the original files, and more similar to importing files at runtime. For an import workflow that works at runtime, gives more predictable results, and only has explicitly defined behavior, consider setting these options to ``false`` and using :ref:`class_GLTFDocumentExtension` instead."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:45
msgid "Remove nodes and animations (-noimp)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:47
msgid "Nodes and animations that have the ``-noimp`` suffix will be removed at import time no matter what their type is. They will not appear in the imported scene."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:51
msgid "This is equivalent to enabling **Skip Import** for a node in the Advanced Import Settings dialog."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:55
msgid "Create collisions (-col, -convcol, -colonly, -convcolonly)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:57
msgid "The option ``-col`` will work only for Mesh objects. If it is detected, a child static collision node will be added, using the same geometry as the mesh. This will create a triangle mesh collision shape, which is a slow, but accurate option for collision detection. This option is usually what you want for level geometry (but see also ``-colonly`` below)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:63
msgid "The option ``-convcol`` will create a :ref:`class_ConvexPolygonShape3D` instead of a :ref:`class_ConcavePolygonShape3D`. Unlike triangle meshes which can be concave, a convex shape can only accurately represent a shape that doesn't have any concave angles (a pyramid is convex, but a hollow box is concave). Due to this, convex collision shapes are generally not suited for level geometry. When representing simple enough meshes, convex collision shapes can result in better performance compared to a triangle collision shape. This option is ideal for simple or dynamic objects that require mostly-accurate collision detection."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:72
msgid "However, in both cases, the visual geometry may be too complex or not smooth enough for collisions. This can create physics glitches and slow down the engine unnecessarily."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:76
msgid "To solve this, the ``-colonly`` modifier exists. It will remove the mesh upon importing and will create a :ref:`class_StaticBody3D` collision instead. This helps the visual mesh and actual collision to be separated."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:80
msgid "The option ``-convcolonly`` works in a similar way, but will create a :ref:`class_ConvexPolygonShape3D` instead using convex decomposition."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:83
msgid "With Collada files, the option ``-colonly`` can also be used with Blender's empty objects. On import, it will create a :ref:`class_StaticBody3D` with a collision node as a child. The collision node will have one of a number of predefined shapes, depending on Blender's empty draw type:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:88
#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:92
msgid "Choosing a draw type for an Empty on creation in Blender"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:94
msgid "Single arrow will create a :ref:`class_SeparationRayShape3D`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:95
msgid "Cube will create a :ref:`class_BoxShape3D`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:96
msgid "Image will create a :ref:`class_WorldBoundaryShape3D`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:97
msgid "Sphere (and the others not listed) will create a :ref:`class_SphereShape3D`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:99
msgid "When possible, **try to use a few primitive collision shapes** instead of triangle mesh or convex shapes. Primitive shapes often have the best performance and reliability."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:105
msgid "For better visibility on Blender's editor, you can set the \"X-Ray\" option on collision empties and set some distinct color for them by changing **Edit > Preferences > Themes > 3D Viewport > Empty**."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:109
msgid "If using Blender 2.79 or older, follow these steps instead: **User Preferences > Themes > 3D View > Empty**."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:114
msgid "See :ref:`doc_collision_shapes_3d` for a comprehensive overview of collision shapes."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:118
msgid "Create Occluder (-occ, -occonly)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:120
msgid "If a mesh is imported with the ``-occ`` suffix an :ref:`class_occluder3D` node will be created based on the geometry of the mesh, it does not replace the mesh. A mesh node with the ``-occonly`` suffix will be converted to an :ref:`class_occluder3D` on import."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:126
msgid "Create navigation (-navmesh)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:128
msgid "A mesh node with the ``-navmesh`` suffix will be converted to a navigation mesh. The original Mesh object will be removed at import-time."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:132
msgid "Create a VehicleBody (-vehicle)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:134
msgid "A mesh node with the ``-vehicle`` suffix will be imported as a child to a :ref:`class_VehicleBody3D` node."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:138
msgid "Create a VehicleWheel (-wheel)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:140
msgid "A mesh node with the ``-wheel`` suffix will be imported as a child to a :ref:`class_VehicleWheel3D` node."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:144
msgid "Rigid Body (-rigid)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:146
msgid "A mesh node with the ``-rigid`` suffix will be imported as a :ref:`class_RigidBody3D`."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:149
msgid "Animation loop (-loop, -cycle)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:151
msgid "Animation clips in the source 3D file that start or end with the token ``loop`` or ``cycle`` will be imported as a Godot :ref:`class_Animation` with the loop flag set. **Unlike the other suffixes described above, this does not require a hyphen.**"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:155
msgid "In Blender, this requires using the NLA Editor and naming the Action with the ``loop`` or ``cycle`` prefix or suffix."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:159
msgid "Material alpha (-alpha)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:161
msgid "A material with the ``-alpha`` suffix will be imported with the :ref:`TRANSPARENCY_ALPHA<class_BaseMaterial3D_constant_TRANSPARENCY_ALPHA>` transparency mode."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:165
msgid "Material vertex color (-vcol)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst:167
msgid "A material with the ``-vcol`` suffix will be imported with the :ref:`FLAG_ALBEDO_FROM_VERTEX_COLOR<class_BaseMaterial3D_constant_FLAG_ALBEDO_FROM_VERTEX_COLOR>` and :ref:`FLAG_SRGB_VERTEX_COLOR<class_BaseMaterial3D_constant_FLAG_SRGB_VERTEX_COLOR>` flags set."
msgstr ""
