# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/networking/ssl_certificates.rst:4
msgid "SSL/TLS certificates"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:9
msgid "It is often desired to use :abbr:`SSL (Secure Sockets Layer)` connections (also known as :abbr:`TLS (Transport Layer Security)` connections) for communications to avoid \"man in the middle\" attacks. Godot has a connection wrapper, :ref:`StreamPeerTLS <class_StreamPeerTLS>`, which can take a regular connection and add security around it. The :ref:`HTTPClient <class_HTTPClient>` and :ref:`HTTPRequest <class_HTTPRequest>` classes also support HTTPS using this same wrapper."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:17
msgid "Godot includes the `SSL certificate bundle from Mozilla <https://github.com/godotengine/godot/blob/master/thirdparty/certs/ca-certificates.crt>`__, but you can provide your own with a CRT file in the Project Settings:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:25
#: ../../docs/tutorials/networking/ssl_certificates.rst:25
msgid "Setting the TLS certificate bundle override project setting"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:27
msgid "When set, this file *overrides* the Mozilla certificate bundle Godot uses by default. This file should contain any number of public certificates in `PEM format <https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail>`__."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:31
msgid "Remember to add ``*.crt`` as the non-resource export filter to your export preset, so that the exporter recognizes this when exporting your project:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:38
#: ../../docs/tutorials/networking/ssl_certificates.rst:38
msgid "Adding ``*.crt`` to non-resource export filter in the export preset"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:40
msgid "There are two ways to obtain certificates:"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:43
msgid "Acquire a certificate from a certificate authority"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:45
msgid "The main approach to getting a certificate is to use a certificate authority (CA) such as `Let's Encrypt <https://letsencrypt.org/>`__. This is a more cumbersome process than a self-signed certificate, but it's more \"official\" and ensures your identity is clearly represented. The resulting certificate is also trusted by applications such as web browsers, unlike a self-signed certificate which requires additional configuration on the client side before it's considered trusted."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:53
msgid "These certificates do not require any configuration on the client to work, since Godot already bundles the Mozilla certificate bundle in the editor and exported projects."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:58
msgid "Generate a self-signed certificate"
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:60
msgid "For most use cases, it's recommended to go through certificate authority as the process is free with certificate authorities such as Let's Encrypt. However, if using a certificate authority is not an option, then you can generate a self-signed certificate and tell the client to consider your self-signed certificate as trusted."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:66
msgid "To create a self-signed certificate, generate a private and public key pair and add the public key (in PEM format) to the CRT file specified in the Project Settings."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:72
msgid "The private key should **only** go to your server. The client must not have access to it: otherwise, the security of the certificate will be compromised."
msgstr ""

#: ../../docs/tutorials/networking/ssl_certificates.rst:76
msgid "OpenSSL has `some documentation <https://raw.githubusercontent.com/openssl/openssl/master/doc/HOWTO/keys.txt>`__ about this. For local development purposes **only**, `mkcert <https://github.com/FiloSottile/mkcert>`__ can be used as an alternative."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
