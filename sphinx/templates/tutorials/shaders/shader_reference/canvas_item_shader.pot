# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:4
msgid "CanvasItem shaders"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:6
msgid "CanvasItem shaders are used to draw all 2D elements in Godot. These include all nodes that inherit from CanvasItems, and all GUI elements."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:9
msgid "CanvasItem shaders contain fewer built-in variables and functionality than :ref:`Spatial shaders<doc_spatial_shader>`, but they maintain the same basic structure with vertex, fragment, and light processor functions."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:14
msgid "Render modes"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:17
msgid "Render mode"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:17
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:58
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:108
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:218
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:292
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:352
msgid "Description"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:19
msgid "**blend_mix**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:19
msgid "Mix blend mode (alpha is transparency), default."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:21
msgid "**blend_add**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:21
msgid "Additive blend mode."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:23
msgid "**blend_sub**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:23
msgid "Subtractive blend mode."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:25
msgid "**blend_mul**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:25
msgid "Multiplicative blend mode."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:27
msgid "**blend_premul_alpha**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:27
msgid "Pre-multiplied alpha blend mode."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:29
msgid "**blend_disabled**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:29
msgid "Disable blending, values (including alpha) are written as-is."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:31
msgid "**unshaded**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:31
msgid "Result is just albedo. No lighting/shading happens in material."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:33
msgid "**light_only**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:33
msgid "Only draw on light pass."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:35
msgid "**skip_vertex_transform**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:35
msgid "``VERTEX`` needs to be transformed manually in the ``vertex()`` function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:38
msgid "**world_vertex_coords**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:38
msgid "``VERTEX`` is modified in world coordinates instead of local."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:42
msgid "Built-ins"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:44
msgid "Values marked as ``in`` are read-only. Values marked as ``out`` can optionally be written to and will not necessarily contain sensible values. Values marked as ``inout`` provide a sensible default value, and can optionally be written to. Samplers cannot be written to so they are not marked."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:48
msgid "Not all built-ins are available in all processing functions. To access a vertex built-in from the ``fragment()`` function, you can use a :ref:`varying <doc_shading_language_varyings>`. The same applies for accessing fragment built-ins from the ``light()`` function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:53
msgid "Global built-ins"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:55
msgid "Global built-ins are available everywhere, including custom functions."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:58
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:108
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:218
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:292
msgid "Built-in"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:60
msgid "in float **TIME**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:60
msgid "Global time since the engine has started, in seconds. It repeats after every ``3,600`` seconds (which can  be changed with the :ref:`rollover<class_ProjectSettings_property_rendering/limits/time/time_rollover_secs>` setting). It's affected by :ref:`time_scale<class_Engine_property_time_scale>` but not by pausing. If you need a ``TIME`` variable that is not affected by time scale, add your own :ref:`global shader uniform<doc_shading_language_global_uniforms>` and update it each frame."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:69
msgid "in float **PI**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:69
msgid "A ``PI`` constant (``3.141592``). A ratio of a circle's circumference to its diameter and amount of radians in half turn."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:72
msgid "in float **TAU**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:72
msgid "A ``TAU`` constant (``6.283185``). An equivalent of ``PI * 2`` and amount of radians in full turn."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:75
msgid "in float **E**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:75
msgid "An ``E`` constant (``2.718281``). Euler's number and a base of the natural logarithm."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:80
msgid "Vertex built-ins"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:82
msgid "Vertex data (``VERTEX``) is presented in local space (pixel coordinates, relative to the Node2D's origin). If not written to, these values will not be modified and be passed through as they came."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:85
msgid "The user can disable the built-in model to world transform (world to screen and projection will still happen later) and do it manually with the following code:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:98
msgid "Other built-ins, such as ``UV`` and ``COLOR``, are also passed through to the ``fragment()`` function if not modified."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:100
msgid "For instancing, the ``INSTANCE_CUSTOM`` variable contains the instance custom data. When using particles, this information is usually:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:103
msgid "**x**: Rotation angle in radians."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:104
msgid "**y**: Phase during lifetime (``0.0`` to ``1.0``)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:105
msgid "**z**: Animation frame."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:110
msgid "in mat4 **MODEL_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:110
msgid "Local space to world space transform. World space is the coordinates you normally use in the editor."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:113
msgid "in mat4 **CANVAS_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:113
msgid "World space to canvas space transform. In canvas space the origin is the upper-left corner of the screen and coordinates ranging from ``(0.0, 0.0)`` to viewport size."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:118
msgid "in mat4 **SCREEN_MATRIX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:118
msgid "Canvas space to clip space. In clip space coordinates ranging from ``(-1.0, -1.0)`` to ``(1.0, 1.0).``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:122
msgid "in int  **INSTANCE_ID**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:122
msgid "Instance ID for instancing."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:124
msgid "in vec4 **INSTANCE_CUSTOM**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:124
msgid "Instance custom data."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:126
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:234
msgid "in bool **AT_LIGHT_PASS**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:126
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:234
msgid "Always ``false``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:128
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:230
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:307
msgid "in vec2 **TEXTURE_PIXEL_SIZE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:128
msgid "Normalized pixel size of default 2D texture. For a Sprite2D with a texture of size 64x32px, **TEXTURE_PIXEL_SIZE** = ``vec2(1/64, 1/32)``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:132
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:256
msgid "inout vec2 **VERTEX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:132
msgid "Vertex position, in local space."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:134
msgid "in int **VERTEX_ID**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:134
msgid "The index of the current vertex in the vertex buffer."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:137
msgid "inout vec2 **UV**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:137
msgid "Normalized texture coordinates. Range from ``0.0`` to ``1.0``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:140
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:263
msgid "inout vec4 **COLOR**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:140
msgid "Color from vertex primitive multiplied by CanvasItem's :ref:`modulate<class_CanvasItem_property_modulate>` multiplied by CanvasItem's :ref:`self_modulate<class_CanvasItem_property_self_modulate>`."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:145
msgid "inout float **POINT_SIZE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:145
msgid "Point size for point drawing."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:147
msgid "in vec4 **CUSTOM0**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:147
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:149
msgid "Custom value from vertex primitive."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:149
msgid "in vec4 **CUSTOM1**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:155
msgid "Fragment built-ins"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:158
msgid "COLOR and TEXTURE"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:160
msgid "The built-in variable ``COLOR`` is used for a few things:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:162
msgid "In the ``vertex()`` function, ``COLOR`` contains the color from the vertex primitive multiplied by the CanvasItem's :ref:`modulate<class_CanvasItem_property_modulate>` multiplied by the CanvasItem's :ref:`self_modulate<class_CanvasItem_property_self_modulate>`."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:166
msgid "In the ``fragment()`` function, the input value ``COLOR`` is that same value multiplied by the color from the default ``TEXTURE`` (if present)."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:168
msgid "In the ``fragment()`` function, ``COLOR`` is also the final output."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:170
msgid "Certain nodes (for example, :ref:`Sprite2D <class_Sprite2D>`) display a texture by default, for example :ref:`texture <class_Sprite2D_property_texture>`. When using a custom ``fragment()`` function, you have a few options on how to sample this texture."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:175
msgid "To read only the contents of the default texture, ignoring the vertex ``COLOR``:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:183
msgid "To read the contents of the default texture multiplied by vertex ``COLOR``:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:192
msgid "To read only the vertex ``COLOR`` in ``fragment()``, ignoring the main texture, you must pass ``COLOR`` as a varying, then read it in ``fragment()``:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:206
msgid "NORMAL"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:208
msgid "Similarly, if a normal map is used in the :ref:`CanvasTexture <class_CanvasTexture>`, Godot uses it by default and assigns its value to the built-in ``NORMAL`` variable. If you are using a normal map meant for use in 3D, it will appear inverted. In order to use it in your shader, you must assign it to the ``NORMAL_MAP`` property. Godot will handle converting it for use in 2D and overwriting ``NORMAL``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:220
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:294
msgid "in vec4 **FRAGCOORD**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:220
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:294
msgid "Coordinate of pixel center. In screen space. ``xy`` specifies position in viewport. Upper-left of the viewport is the origin, ``(0.0, 0.0)``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:224
msgid "in vec2 **SCREEN_PIXEL_SIZE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:224
msgid "Size of individual pixels. Equal to inverse of resolution."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:226
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:313
msgid "in vec2 **POINT_COORD**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:226
msgid "Coordinate for drawing points."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:228
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:305
msgid "sampler2D **TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:228
msgid "Default 2D texture."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:230
msgid "Normalized pixel size of default 2D texture. For a Sprite2D with a texture of size 64x32px, ``TEXTURE_PIXEL_SIZE`` = ``vec2(1/64, 1/32)``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:236
msgid "sampler2D **SPECULAR_SHININESS_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:236
msgid "Specular shininess texture of this object."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:238
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:333
msgid "in vec4 **SPECULAR_SHININESS**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:238
msgid "Specular shininess color, as sampled from the texture."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:240
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:302
msgid "in vec2 **UV**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:240
msgid "UV from the ``vertex()`` function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:242
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:311
msgid "in vec2 **SCREEN_UV**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:242
#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:311
msgid "Screen UV coordinate for current pixel."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:244
msgid "sampler2D **SCREEN_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:244
msgid "Removed in Godot 4. Use a ``sampler2D`` with ``hint_screen_texture`` instead."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:247
msgid "inout vec3 **NORMAL**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:247
msgid "Normal read from ``NORMAL_TEXTURE``. Writable."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:249
msgid "sampler2D **NORMAL_TEXTURE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:249
msgid "Default 2D normal texture."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:251
msgid "out vec3 **NORMAL_MAP**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:251
msgid "Configures normal maps meant for 3D for use in 2D. If used, overrides ``NORMAL``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:254
msgid "out float **NORMAL_MAP_DEPTH**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:254
msgid "Normal map depth for scaling."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:256
msgid "Pixel position in screen space."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:258
msgid "inout vec2 **SHADOW_VERTEX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:258
msgid "Same as ``VERTEX`` but can be written to alter shadows."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:260
msgid "inout vec3 **LIGHT_VERTEX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:260
msgid "Same as ``VERTEX`` but can be written to alter lighting. Z component represents height."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:263
msgid "``COLOR`` from the ``vertex()`` function multiplied by the ``TEXTURE`` color. Also output color value."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:268
msgid "Light built-ins"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:270
msgid "Light processor functions work differently in Godot 4.x than they did in Godot 3.x. In Godot 4.x all lighting is done during the regular draw pass. In other words, Godot no longer draws the object again for each light."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:274
msgid "Use the ``unshaded`` render mode if you do not want the ``light()`` function to run. Use the ``light_only`` render mode if you only want to see the impact of lighting on an object; this can be useful when you only want the object visible where it is covered by light."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:279
msgid "If you define a ``light()`` function it will replace the built-in light function, even if your light function is empty."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:282
msgid "Below is an example of a light shader that takes a CanvasItem's normal map into account:"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:298
msgid "in vec3 **NORMAL**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:298
msgid "Input normal."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:300
msgid "in vec4 **COLOR**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:300
msgid "Input color. This is the output of the ``fragment()`` function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:302
msgid "UV from the ``vertex()`` function, equivalent to the UV in the ``fragment()`` function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:305
msgid "Current texture in use for CanvasItem."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:307
msgid "Normalized pixel size of ``TEXTURE``. For a Sprite2D with a ``TEXTURE`` of size ``64x32`` pixels, **TEXTURE_PIXEL_SIZE** = ``vec2(1/64, 1/32)``"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:313
msgid "UV for Point Sprite."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:315
msgid "in vec4 **LIGHT_COLOR**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:315
msgid ":ref:`Color<class_Light2D_property_color>` of the :ref:`class_Light2D`. If the light is a :ref:`class_PointLight2D`, multiplied by the light's :ref:`texture<class_PointLight2D_property_texture>`."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:319
msgid "in float **LIGHT_ENERGY**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:319
msgid ":ref:`Energy multiplier<class_Light2D_property_energy>` of the :ref:`class_Light2D`."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:322
msgid "in vec3 **LIGHT_POSITION**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:322
msgid "Position of the :ref:`class_Light2D` in screen space. If using a :ref:`class_DirectionalLight2D` this is always ``(0.0, 0.0, 0.0)``."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:325
msgid "in vec3 **LIGHT_DIRECTION**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:325
msgid "Direction of the :ref:`class_Light2D` in screen space."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:327
msgid "in bool **LIGHT_IS_DIRECTIONAL**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:327
msgid "``true`` if this pass is a :ref:`class_DirectionalLight2D`."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:329
msgid "in vec3 **LIGHT_VERTEX**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:329
msgid "Pixel position, in screen space as modified in the ``fragment()`` function."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:331
msgid "inout vec4 **LIGHT**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:331
msgid "Output color for this :ref:`class_Light2D`."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:333
msgid "Specular shininess, as set in the object's texture."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:335
msgid "out vec4 **SHADOW_MODULATE**"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:335
msgid "Multiply shadows cast at this point by this color."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:339
msgid "SDF functions"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:341
msgid "There are a few additional functions implemented to sample an automatically generated Signed Distance Field texture. These functions available for the ``fragment()`` and ``light()`` functions of CanvasItem shaders. Custom functions may also use them as long as they called from supported functions."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:346
msgid "The signed distance field is generated from :ref:`class_LightOccluder2D` nodes present in the scene with the **SDF Collision** property enabled (which is the default). See the :ref:`2D lights and shadows <doc_2d_lights_and_shadows_setting_up_shadows>` documentation for more information."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:352
msgid "Function"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:354
msgid "float **texture_sdf** (vec2 sdf_pos)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:354
msgid "Performs an SDF texture lookup."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:356
msgid "vec2 **texture_sdf_normal** (vec2 sdf_pos)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:356
msgid "Calculates a normal from the SDF texture."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:358
msgid "vec2 **sdf_to_screen_uv** (vec2 sdf_pos)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:358
msgid "Converts an SDF to screen UV."
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:360
msgid "vec2 **screen_uv_to_sdf** (vec2 uv)"
msgstr ""

#: ../../docs/tutorials/shaders/shader_reference/canvas_item_shader.rst:360
msgid "Converts screen UV to an SDF."
msgstr ""
