#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "3D gizmo plugins"
msgstr "Estensioni di gizmo 3D"

msgid "Introduction"
msgstr "Introduzione"

msgid ""
"3D gizmo plugins are used by the editor and custom plugins to define the "
"gizmos attached to any kind of Node3D node."
msgstr ""
"Le estensioni dei gizmo 3D sono utilizzate dall'editor e dalle estensioni "
"personalizzate per definire i gizmo collegati a qualsiasi tipo di nodo "
"Node3D."

msgid ""
"This tutorial shows the two main approaches to defining your own custom "
"gizmos. The first option works well for simple gizmos and creates less "
"clutter in your plugin structure, and the second one will let you store some "
"per-gizmo data."
msgstr ""
"Questo tutorial illustra i due approcci principali per definire i propri "
"gizmo personalizzati. La prima opzione è ideale per gizmo semplici e crea "
"meno ingombro nella struttura delle proprie estensione, mentre la seconda "
"consente di memorizzare alcuni dati per ogni gizmo."

msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page."
msgstr ""
"Questo tutorial presuppone che si sappia già come creare estensioni "
"generiche. Se in dubbio, consultare la pagina :ref:`doc_making_plugins`."

msgid "The EditorNode3DGizmoPlugin"
msgstr "L'EditorNode3DGizmoPlugin"

msgid ""
"Regardless of the approach we choose, we will need to create a "
"new :ref:`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>`. This "
"will allow us to set a name for the new gizmo type and define other "
"behaviors such as whether the gizmo can be hidden or not."
msgstr ""
"A prescindere dall'approccio scelto, dovremo creare un "
"nuovo :ref:`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>`. Questo "
"ci permetterà di impostare un nome per il nuovo tipo di gizmo e di definire "
"altri comportamenti, come ad esempio se il gizmo può essere nascosto o meno."

msgid "This would be a basic setup:"
msgstr "Questa sarebbe una configurazione basilare:"

msgid ""
"For simple gizmos, inheriting :ref:`EditorNode3DGizmoPlugin "
"<class_EditorNode3DGizmoPlugin>` is enough. If you want to store some per-"
"gizmo data or you are porting a Godot 3.0 gizmo to 3.1+, you should go with "
"the second approach."
msgstr ""
"Per i gizmo più semplici, basta ereditare :ref:`EditorNode3DGizmoPlugin "
"<class_EditorNode3DGizmoPlugin>`. Se si desidera memorizzare dati per ogni "
"gizmo o si sta trasferendo un gizmo da Godot 3.0 alla versione 3.1+, è "
"consigliabile adottare il secondo approccio."

msgid "Simple approach"
msgstr "Approccio semplice"

msgid ""
"The first step is to, in our custom gizmo plugin, override "
"the :ref:`_has_gizmo()<class_EditorNode3DGizmoPlugin_private_method__has_gizmo>` "
"method so that it returns ``true`` when the node parameter is of our target "
"type."
msgstr ""
"Il primo passo è quello di sovrascrivere il "
"metodo :ref:`_has_gizmo()<class_EditorNode3DGizmoPlugin_private_method__has_gizmo>` "
"nella nostra estensione gizmo personalizzata in modo che restituisca "
"``true`` quando il parametro node è del nostro tipo da influenzare."

msgid ""
"Then we can override methods "
"like :ref:`_redraw()<class_EditorNode3DGizmoPlugin_private_method__redraw>` "
"or all the handle related ones."
msgstr ""
"Successivamente possiamo sovrascrivere metodi "
"come :ref:`_redraw()<class_EditorNode3DGizmoPlugin_private_method__redraw>` "
"o tutti quelli che riguardano gli handle."

msgid ""
"Note that we created a material in the `_init` method, and retrieved it in "
"the `_redraw` method "
"using :ref:`get_material()<class_EditorNode3DGizmoPlugin_method_get_material>`. "
"This method retrieves one of the material's variants depending on the state "
"of the gizmo (selected and/or editable)."
msgstr ""
"Si noti che abbiamo creato un materiale nel metodo `_init` e lo abbiamo "
"recuperato nel metodo `_redraw` "
"tramite :ref:`get_material()<class_EditorNode3DGizmoPlugin_method_get_material>`. "
"Questo metodo recupera una delle varianti del materiale a seconda dello "
"stato del gizmo (selezionato e/o modificabile)."

msgid "So the final plugin would look somewhat like this:"
msgstr "Pertanto l'estensione finale sarebbe simile a questa:"

msgid ""
"Note that we just added some handles in the `_redraw` method, but we still "
"need to implement the rest of handle-related callbacks "
"in :ref:`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>` to get "
"properly working handles."
msgstr ""
"Si noti che abbiamo appena aggiunto alcuni handle nel metodo `_redraw`, ma "
"dobbiamo ancora implementare il resto dei callback correlati agli handle "
"in :ref:`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>` per "
"ottenere handle funzionanti correttamente."

msgid "Alternative approach"
msgstr "Approccio alternativo"

msgid ""
"In some cases we want to provide our own implementation "
"of :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, maybe because we want "
"to have some state stored in each gizmo or because we are porting an old "
"gizmo plugin and we don't want to go through the rewriting process."
msgstr ""
"In alcuni casi vogliamo fornire la nostra implementazione "
"di :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, magari perché vogliamo "
"che uno stato sia memorizzato in ogni gizmo o perché stiamo trasferendo una "
"vecchia estensione gizmo e non vogliamo riscriverla del tutto."

msgid ""
"In these cases all we need to do is, in our new gizmo plugin, "
"override :ref:`_create_gizmo()<class_EditorNode3DGizmoPlugin_private_method__create_gizmo>`, "
"so it returns our custom gizmo implementation for the Node3D nodes we want "
"to target."
msgstr ""
"In questi casi, tutto ciò che dobbiamo fare è "
"sovrascrivere :ref:`_create_gizmo()<class_EditorNode3DGizmoPlugin_private_method__create_gizmo>` "
"nella nostra nuova estensione gizmo, in modo che sia restituita la nostra "
"implementazione gizmo personalizzata per i nodi Node3D che vogliamo "
"influenzare."

msgid ""
"This way all the gizmo logic and drawing methods can be implemented in a new "
"class extending :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, like so:"
msgstr ""
"In questo modo tutta la logica e i metodi di disegno dei gizmo possono "
"essere implementati in una nuova classe che "
"estende :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, così:"

msgid ""
"Note that we just added some handles in the `_redraw` method, but we still "
"need to implement the rest of handle-related callbacks "
"in :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>` to get properly working "
"handles."
msgstr ""
"Si noti che abbiamo appena aggiunto alcuni handle nel metodo `_redraw`, ma "
"dobbiamo ancora implementare il resto dei callback riguardo gli handle "
"in :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>` per ottenere handle "
"funzionanti correttamente."
