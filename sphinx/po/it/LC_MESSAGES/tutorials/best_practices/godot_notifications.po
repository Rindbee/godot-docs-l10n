#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Notifiche di Godot"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_private_method__notification>` method. Its purpose is to allow "
"the Object to respond to a variety of engine-level callbacks that may relate "
"to it. For example, if the engine tells a :ref:`CanvasItem "
"<class_CanvasItem>` to \"draw\", it will call "
"``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Ogni oggetto in Godot implementa un metodo :ref:`_notification "
"<class_Object_private_method__notification>`. Il suo scopo è consentire "
"all'oggetto di rispondere a una varietà di callback a livello di motore che "
"potrebbero riguardarlo. Ad esempio, se il motore indica a "
"un :ref:`CanvasItem <class_CanvasItem>` di \"disegnare\", chiamerà "
"``_notification(NOTIFICATION_DRAW)``."

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"Alcune di queste notifiche, come \"draw\", sono utili da sovrascrivere negli "
"script. Tanto che Godot ne espone molte con funzioni dedicate:"

msgid "``_ready()``: ``NOTIFICATION_READY``"
msgstr "``_ready()``: ``NOTIFICATION_READY``"

msgid "``_enter_tree()``: ``NOTIFICATION_ENTER_TREE``"
msgstr "``_enter_tree()``: ``NOTIFICATION_ENTER_TREE``"

msgid "``_exit_tree()``: ``NOTIFICATION_EXIT_TREE``"
msgstr "``_exit_tree()``: ``NOTIFICATION_EXIT_TREE``"

msgid "``_process(delta)``: ``NOTIFICATION_PROCESS``"
msgstr "``_process(delta)``: ``NOTIFICATION_PROCESS``"

msgid "``_physics_process(delta)``: ``NOTIFICATION_PHYSICS_PROCESS``"
msgstr "``_physics_process(delta)``: ``NOTIFICATION_PHYSICS_PROCESS``"

msgid "``_draw()``: ``NOTIFICATION_DRAW``"
msgstr "``_draw()``: ``NOTIFICATION_DRAW``"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone, for example:"
msgstr ""
"Ciò che gli utenti potrebbero *non* intuire è che le notifiche esistono "
"anche per i tipi diversi da Node, ad esempio:"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: una callback che viene "
"attivato durante l'inizializzazione dell'oggetto. Non accessibile agli "
"script."

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a \"destructor\"."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: un callback che viene "
"attivato prima che il motore elimini un oggetto, ovvero un \"distruttore\"."

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"E inoltre molti dei callback che *esistono* nei nodi non hanno metodi "
"dedicati, ma sono comunque molto utili."

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: un callback che viene attivato "
"ogni volta che viene aggiunto un nodo figlio a un altro nodo."

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: un callback che viene "
"attivato ogni volta che viene rimosso un nodo figlio da un altro nodo."

msgid ""
"One can access all these custom notifications from the universal "
"``_notification()`` method."
msgstr ""
"È possibile accedere a tutte queste notifiche personalizzate tramite il "
"metodo universale ``_notification()``."

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"Anche i metodi nella documentazione etichettati come \"virtuali\" sono "
"concepiti per essere sovrascritti dagli script."

msgid ""
"A classic example is the :ref:`_init <class_Object_private_method__init>` "
"method in Object. While it has no ``NOTIFICATION_*`` equivalent, the engine "
"still calls the method. Most languages (except C#) rely on it as a "
"constructor."
msgstr ""
"Un esempio classico è il metodo :ref:`_init "
"<class_Object_private_method__init>` in Object. Sebbene non abbia una "
"``NOTIFICATION_*`` equivalente, il motore lo chiama comunque. La maggior "
"parte dei linguaggi (tranne C#) lo usano come costruttore."

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"Allora, in quale situazione si dovrebbe utilizzare ciascuna di queste "
"notifiche o funzioni virtuali?"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process vs _physics_process vs \\*_input"

msgid ""
"Use ``_process()`` when one needs a framerate-dependent delta time between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-timeout loop is another option."
msgstr ""
"Utilizza ``_process()`` quando sono necessari intervalli di tempo dipendenti "
"dal frame rate. Se il codice che aggiorna i dati degli oggetti deve essere "
"aggiornato il più spesso possibile, questo è il posto giusto. Qui vengono "
"spesso eseguiti controlli logici ricorrenti e memorizzazione dei dati nella "
"cache, ma tutto dipende dalla frequenza con cui è necessario aggiornarli. Se "
"non è necessario eseguirli ogni frame, un'altra opzione è implementare un "
"ciclo Timer-timeout."

msgid ""
"Use ``_physics_process()`` when one needs a framerate-independent delta time "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"Utilizza ``_physics_process()`` quando sono necessari intervalli di tempo "
"indipendenti dal frame rate. Se il codice necessita di aggiornamenti "
"costanti nel tempo, a prescindere dalla velocità con cui il tempo avanza, "
"questo è il posto giusto. Le operazioni cinematiche e di trasformazione "
"degli oggetti ricorrenti si dovrebbero eseguire qui."

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process()`` and "
"``_physics_process()`` will trigger at every opportunity (they do not "
"\"rest\" by default). In contrast, ``*_input()`` callbacks will trigger only "
"on frames in which the engine has actually detected the input."
msgstr ""
"Sebbene sia possibile, per ottenere le migliori prestazioni, si dovrebbe "
"evitare di effettuare controlli di input durante questi callback. "
"``_process()`` e ``_physics_process()`` verranno attivati a ogni occasione "
"(non \"riposano\" come predefinito). Al contrario, i callback ``*_input()`` "
"verranno attivati solo sui frame in cui il motore ha effettivamente rilevato "
"l'input."

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related delta time "
"methods as needed."
msgstr ""
"È possibile verificare le azioni di input all'interno dei callback di input "
"allo stesso modo. Se si desidera utilizzare un intervallo di tempo (delta), "
"è possibile recuperarlo dai metodi corrispondenti, se necessario."

msgid "_init vs. initialization vs. export"
msgstr "_init vs inizializzazione vs esportazione"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute in ``_init()``. Other property or SceneTree-independent "
"initializations should also run here."
msgstr ""
"Se lo script inizializza il proprio sotto-albero di nodi, senza una scena, "
"il codice si dovrebbe eseguire in ``_init()``. Anche altre inizializzazioni "
"indipendenti dallo SceneTree o da proprietà si dovrebbero eseguire qui."

msgid "The C# equivalent to GDScript's ``_init()`` method is the constructor."
msgstr ""
"L'equivalente in C# al metodo ``_init()`` di GDScript è il costruttore."

msgid ""
"``_init()`` triggers before ``_enter_tree()`` or ``_ready()``, but after a "
"script creates and initializes its properties. When instantiating a scene, "
"property values will set up according to the following sequence:"
msgstr ""
"``_init()`` viene attivato prima di ``_enter_tree()`` o ``_ready()``, ma "
"dopo che uno script ha creato e inizializzato le sue proprietà. Quando si "
"istanzia una scena, i valori delle proprietà vengono assegnati secondo la "
"seguente sequenza:"

msgid ""
"**Initial value assignment:** the property is assigned its initialization "
"value, or its default value if one is not specified. If a setter exists, it "
"is not used."
msgstr ""
"**Assegnazione del valore iniziale:** alla proprietà viene assegnato il suo "
"valore di inizializzazione, oppure il suo valore predefinito se non ne è "
"specificato uno. Se esiste un setter, non viene utilizzato."

msgid ""
"``_init()`` **assignment:** the property's value is replaced by any "
"assignments made in ``_init()``, triggering the setter."
msgstr ""
"**Assegnazione** in ``_init()``: il valore della proprietà viene sostituito "
"da qualsiasi assegnazione effettuata in ``_init()``, attivando il setter."

msgid ""
"**Exported value assignment:** an exported property's value is again "
"replaced by any value set in the Inspector, triggering the setter."
msgstr ""
"**Assegnazione del valore esportato:** il valore di una proprietà esportata "
"viene nuovamente sostituito da qualsiasi valore impostato nell'Ispettore, "
"attivando il setter."

msgid ""
"As a result, instantiating a script versus a scene may affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"Come risultato, l'istanziazione di uno script anziché di una scena può "
"influire sia sull'inizializzazione, *sia* sul numero di volte in cui il "
"motore chiama il setter."

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready vs _enter_tree vs NOTIFICATION_PARENTED"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init()`` calls) and build the "
"tree going downwards from the root. This causes ``_enter_tree()`` calls to "
"cascade down the tree. Once the tree is complete, leaf nodes call "
"``_ready``. A node will call this method once all child nodes have finished "
"calling theirs. This then causes a reverse cascade going up back to the "
"tree's root."
msgstr ""
"Quando viene istanziata una scena connessa alla prima scena eseguita, Godot "
"istanzia i nodi lungo l'albero (effettuando chiamate a ``_init()``) e "
"costruisce l'albero verso il basso, partendo dalla radice. Ciò assicura che "
"le chiamate a ``_enter_tree()`` vengano eseguite a cascata lungo l'albero. "
"Una volta completato l'albero, i nodi foglia chiamano ``_ready``. Un nodo "
"chiamerà questo metodo una volta che tutti i nodi figlio avranno finito di "
"chiamare il proprio. Ciò provocherà quindi una cascata inversa che risale "
"fino alla radice dell'albero."

msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree()`` callbacks trigger. "
"Instead, only the ``_init()`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree()`` and ``_ready()`` calls occur."
msgstr ""
"Quando viene istanziato uno script o una scena autonoma, i nodi non vengono "
"aggiunti allo SceneTree al momento della creazione, quindi non vengono "
"attivati i callback ``_enter_tree()``. Viene invece eseguita solo la "
"chiamata a ``_init()``. Quando la scena viene aggiunta allo SceneTree, "
"vengono eseguite le chiamate ``_enter_tree()`` e ``_ready()``."

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"Se è necessario attivare un comportamento che accade quando i nodi diventano "
"padri di un altri, a prescindere che accada o meno come parte della scena "
"principale o attiva, è possibile utilizzare la notifica :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`. Ad esempio, ecco uno frammento "
"di codice che collega un metodo di un nodo a un segnale personalizzato sul "
"nodo padre senza errori. Utile per i nodi incentrati sui dati che si "
"potrebbero creare in fase di esecuzione."
