#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Bisecting regressions"
msgstr "Ділення регресії навпіл"

msgid ""
"Bisecting is a way to find regressions in software. After reporting a bug on "
"the `Godot repository on GitHub <https://github.com/godotengine/godot>`__, "
"you may be asked by a contributor to *bisect* the issue. Bisecting makes it "
"possible for contributors to fix bugs faster, as they can know in advance "
"which commit caused the regression. Your effort will be widely appreciated :)"
msgstr ""
"Ділення навпіл – це спосіб знайти регресії в програмному забезпеченні. Після "
"повідомлення про помилку в `репозиторії Godot на GitHub <https://github.com/"
"godotengine/godot>`__, учасник може попросити вас *розділити* проблему. "
"Поділ навпіл дає змогу учасникам швидше виправляти помилки, оскільки вони "
"можуть заздалегідь знати, який комміт спричинив регресію. Ваші зусилля "
"будуть широко оцінені :)"

msgid "The guide below explains how to find a regression by bisecting."
msgstr ""
"У посібнику нижче пояснюється, як знайти регресію за допомогою ділення "
"навпіл."

msgid "What is bisecting?"
msgstr "Що таке діління навпіл?"

msgid ""
"Godot developers use the `Git <https://git-scm.com/>`__ version control "
"system. In the context of Git, bisecting is the process of performing a "
"manual `binary search <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__ to determine when a regression appeared. While "
"it's typically used for bugs, it can also be used to find other kinds of "
"unexpected changes such as performance regressions."
msgstr ""
"Розробники Godot використовують систему контролю версій `Git <https://git-"
"scm.com/>`__. У контексті Git розділення навпіл — це процес виконання "
"ручного `бінарного пошуку <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__, щоб визначити, коли з’явилася регресія. Хоча "
"зазвичай він використовується для виявлення помилок, його також можна "
"використовувати для пошуку інших типів неочікуваних змін, наприклад регресії "
"продуктивності."

msgid "Using official builds to speed up bisecting"
msgstr "Використання офіційних збірок для прискорення розділення навпіл"

msgid ""
"Project files may be incompatible between Godot versions. **Make a backup of "
"your project** before starting the bisection process."
msgstr ""
"Файли проекту можуть бути несумісними між версіями Godot. **Зробіть резервну "
"копію свого проекту** перед початком процесу розділення навпіл."

msgid ""
"Going from the oldest to the newest build generally reduces the risk of the "
"project not being able to successfully open in the editor, thanks to "
"backwards compatibility. Try to reduce your project to the smallest "
"repeatable example too. The more minimal the project is, the more likely "
"you'll be able to open it without compatibility issues in newer engine "
"versions."
msgstr ""
"Перехід від найстарішої до найновішої збірки зазвичай зменшує ризик "
"неможливості успішного відкриття проекту в редакторі завдяки зворотній "
"сумісності. Також спробуйте скоротити свій проект до найменшого "
"повторюваного прикладу. Чим мінімальнішим є проект, тим більша ймовірність, "
"що ви зможете відкрити його без проблем із сумісністю в новіших версіях "
"двигуна."

msgid "The Git bisect command"
msgstr "Команда Git розділити навпіл"

msgid ""
"If you've found a build that didn't exhibit the bug in the above testing "
"process, you can now start bisecting the regression. The Git version control "
"system offers a built-in command for this: ``git bisect``. This makes the "
"process semi-automated as you only have to build the engine, run it and try "
"to reproduce the bug."
msgstr ""
"Якщо ви знайшли збірку, яка не виявила помилки в описаному вище процесі "
"тестування, тепер ви можете почати ділити регресію навпіл. Система контролю "
"версій Git пропонує для цього вбудовану команду: ``git bisect``. Це робить "
"процес напівавтоматизованим, оскільки вам потрібно лише створити механізм, "
"запустити його та спробувати відтворити помилку."

msgid ""
"Before bisecting a regression, you need to set up a build environment to "
"compile Godot from source. To do so, read the :ref:`Compiling <toc-devel-"
"compiling>` page for your target platform. (Compiling Godot from source "
"doesn't require C++ programming knowledge.)"
msgstr ""
"Перш ніж розділити регресію навпіл, вам потрібно налаштувати середовище "
"збірки для компіляції Godot з вихідного коду. Для цього прочитайте "
"сторінку :ref:`Compiling <toc-devel-compiling>` для вашої цільової "
"платформи. (Для компіляції Godot з вихідних кодів не потрібні знання "
"програмування C++.)"

msgid ""
"Note that compiling Godot can take a while on slow hardware (up an hour for "
"each full rebuild on a slow dual-core CPU). This means the full process can "
"take up to several hours. If your hardware is too slow, you may want to stop "
"there and report the results of your \"pre-bisecting\" on the GitHub issue "
"so another contributor can continue bisecting from there."
msgstr ""
"Зауважте, що компіляція Godot може зайняти деякий час на повільному "
"апаратному забезпеченні (до години для кожного повного відновлення на "
"повільному двоядерному процесорі). Це означає, що повний процес може тривати "
"до кількох годин. Якщо ваше апаратне забезпечення надто повільне, ви можете "
"зупинитися на цьому та повідомити про результати вашого «попереднього "
"розділення навпіл» щодо проблеми GitHub, щоб інший учасник міг продовжити "
"розділення навпіл звідти."

msgid "Determine the commit hashes"
msgstr "Визначте хеші фіксації"

msgid ""
"To refer to the latest state of the master branch, you can use ``master`` "
"instead of a commit hash. Note that unlike tagged releases or snapshot "
"commit hashes, ``master`` is a perpetually moving target."
msgstr ""
"Щоб послатися на останній стан головної гілки, ви можете використовувати "
"``master`` замість хешу фіксації. Зауважте, що на відміну від тегованих "
"випусків або хешів фіксації моментальних знімків, ``master`` є ціллю, що "
"постійно змінюється."

msgid "Build the engine"
msgstr "Побудуйте двигун"

msgid ""
":ref:`Get Godot's source code using Git <doc_getting_source>`. Once this is "
"done, in the terminal window, use ``cd`` to reach the Godot repository "
"folder and enter the following command:"
msgstr ""
":ref:`Get Godot's source code using Git <doc_getting_source>`. Після цього у "
"вікні терміналу скористайтеся командою ``cd``, щоб перейти до папки "
"репозиторію Godot, і введіть таку команду:"

msgid "Compile Godot. This assumes you've set up a build environment:"
msgstr "Зібрати Godot. Це передбачає, що ви налаштували середовище збірки:"

msgid "Run the engine"
msgstr "Запустити двигун"

msgid ""
"Run the binary located in the ``bin/`` folder and try to reproduce the bug."
msgstr ""
"Запустіть двійковий файл, який знаходиться в папці ``bin/``, і спробуйте "
"відтворити помилку."

msgid ""
":ref:`Double-check the output file name "
"<doc_introduction_to_the_buildsystem_resulting_binary>` in ``bin/`` to make "
"sure you're actually running the binary you've just compiled. Different "
"Godot versions will output binaries with different names."
msgstr ""
":ref:`Double-check the output file name "
"<doc_introduction_to_the_buildsystem_resulting_binary>` в ``bin/``, щоб "
"переконатися, що ви дійсно використовуєте двійковий файл, який ви щойно "
"скомпільували. Різні версії Godot виводитимуть двійкові файли з різними "
"іменами."

msgid "If the build **still** exhibits the bug, run the following command:"
msgstr "Якщо збірка **досі** містить помилку, виконайте таку команду:"

msgid "If the build **does not** exhibit the bug, run the following command:"
msgstr "Якщо збірка **не** виявляє помилку, виконайте таку команду:"

msgid ""
"After entering one of the commands above, Git will switch to a different "
"commit. You should now build Godot again, try to reproduce the bug, then "
"enter ``git bisect good`` or ``git bisect bad`` depending on the result. "
"You'll have to repeat this several times. The longer the commit range, the "
"more steps will be required. 5 to 10 steps are usually sufficient to find "
"most regressions; Git will remind you of the number of steps remaining (in "
"the worst case scenario)."
msgstr ""
"Після введення однієї з наведених вище команд Git перейде до іншого коміту. "
"Тепер вам слід знову створити Godot, спробувати відтворити помилку, а потім "
"ввести ``git bisect good`` або ``git bisect bad`` залежно від результату. "
"Вам доведеться повторити це кілька разів. Чим довший діапазон фіксації, тим "
"більше кроків буде потрібно. Від 5 до 10 кроків зазвичай достатньо, щоб "
"знайти більшість регресій; Git нагадає вам про кількість кроків, що "
"залишилися (у гіршому випадку)."

msgid ""
"Once you've completed enough steps, Git will display the commit hash where "
"the regression appeared. Write this commit hash as a comment to the GitHub "
"issue you've bisected. This will help in solving the issue. Thanks again for "
"contributing to Godot :)"
msgstr ""
"Коли ви виконаєте достатньо кроків, Git відобразить хеш коміту, де з’явилася "
"регресія. Напишіть цей хеш коміту як коментар до проблеми GitHub, яку ви "
"розділили навпіл. Це допоможе вирішити проблему. Ще раз дякую за внесок у "
"Godot :)"

msgid ""
"You can read the full documentation on ``git bisect`` `here <https://git-"
"scm.com/docs/git-bisect>`__."
msgstr ""
"Ви можете прочитати повну документацію щодо ``git bisect`` `тут <https://git-"
"scm.com/docs/git-bisect>`__."
