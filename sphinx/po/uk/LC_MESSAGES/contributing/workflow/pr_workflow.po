#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Pull request workflow"
msgstr "Робочий процес запиту на отримання"

msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""
"Так званий «робочий процес PR», який використовує Godot, є загальним для "
"багатьох проектів, що використовують Git, і повинен бути знайомий ветеранам "
"вільного програмного забезпечення. Ідея полягає в тому, що лише невелика "
"кількість (якщо така є) приєднується безпосередньо до гілки *master*. "
"Замість цього учасники *розгалужують* проект (тобто створюють його копію, "
"яку вони можуть змінювати за своїм бажанням), а потім використовують "
"інтерфейс GitHub, щоб запитати *витягування* з однієї з гілок свого форка до "
"однієї гілки оригіналу ( часто називають сховищем *вгорі*)."

msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""
"Отриманий *запит на витягування* (PR) потім може бути переглянуто іншими "
"учасниками, які можуть його схвалити, відхилити або найчастіше вимагати "
"внесення змін. Після схвалення PR може бути об’єднаний одним із основних "
"розробників, а його коміти стануть частиною цільової гілки (зазвичай гілки "
"*master*)."

msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organization of Godot's Git repository."
msgstr ""
"Ми разом розглянемо приклад, щоб показати типовий робочий процес і "
"відповідні команди Git. Але спочатку давайте швидко розглянемо організацію "
"репозиторію Godot's Git."

msgid "Git source repository"
msgstr "Git вихідний репозиторій"

msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""
"`Репозиторій на GitHub <https://github.com/godotengine/godot>`_ — це `Git "
"<https://git-scm.com>`_ сховище коду разом із вбудованим відстеженням "
"проблем і системою PR."

msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"Якщо хочете взяти участь у написанні документації, сховище її коду "
"розташовано `тут <https://github.com/godotengine/godot-docs>`_."

msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""
"Система контролю версій Git — це інструмент, який використовується для "
"відстеження послідовних редагувань вихідного коду. Для ефективного внеску в "
"Godot *настійно* рекомендується вивчити основи командного рядка Git. Існують "
"деякі графічні інтерфейси для Git, але вони зазвичай спонукають користувачів "
"до шкідливих звичок щодо робочого процесу Git і PR, тому ми рекомендуємо не "
"використовувати їх. Зокрема, ми радимо не використовувати онлайн-редактор "
"GitHub для додавання коду (хоча він допускається для невеликих виправлень "
"або змін у документації), оскільки він вимагає одного коміту для кожного "
"файлу та кожної модифікації, що швидко призводить до PR із нечитабельною "
"історією Git (особливо після однорангового огляд)."

msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website. You can also try out `GitHub's interactive guide <https://"
"try.github.io/>`__."
msgstr ""
"Перші розділи «Книги» Git є хорошим вступом до філософії інструменту та "
"різноманітних команд, які вам потрібно освоїти у щоденному робочому процесі. "
"Ви можете прочитати їх онлайн на веб-сайті `Git SCM <https://git-scm.com/"
"book/en/v2>`_. Ви також можете спробувати `інтерактивний посібник GitHub "
"<https://try.github.io/>`__."

msgid "The branches on the Git repository are organized as follows:"
msgstr "Гілки в репозиторії Git організовані таким чином:"

msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""
"Гілка ``master`` - це місце, де відбувається розробка наступної основної "
"версії. Як гілка розробки, вона може бути нестабільною і не призначена для "
"використання у виробництві. Саме тут PR має бути в першу чергу."

msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next minor "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, please "
"check first if your changes are also relevant for the ``master`` branch, and "
"if so make the PR for the ``master`` branch in priority. Release managers "
"can then cherry-pick the fix to a stable branch if relevant."
msgstr ""
"Стабільні гілки називаються за їх версією, напр. ``3.1`` і ``2.1``. Вони "
"використовуються для резервного портування виправлень помилок і покращень із "
"гілки ``master`` до поточної стабільної версії (наприклад, 3.1.2 або 2.1.6). "
"Як правило, остання стабільна гілка зберігається до наступної проміжної "
"версії (наприклад, гілка ``3.0`` підтримувалася до випуску Godot 3.1). Якщо "
"ви хочете зробити PR проти стабільної гілки, будь ласка, спочатку перевірте, "
"чи ваші зміни також стосуються гілки ``master``, і якщо так, зробіть PR для "
"гілки ``master`` пріоритетною. Менеджери випусків можуть потім вибрати "
"виправлення для стабільної гілки, якщо це необхідно."

msgid ""
"There might occasionally be feature branches, usually meant to be merged "
"into the ``master`` branch at some time."
msgstr ""
"Час від часу можуть існувати гілки функцій, які, як правило, мають бути "
"об’єднані в гілку ``master``."

msgid "Forking and cloning"
msgstr "Створення відгалуження і клонування"

msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""
"Першим кроком є *форк* репозиторію `godotengine/godot <https://github.com/"
"godotengine/godot>`_ на GitHub. Для цього вам потрібно буде мати обліковий "
"запис GitHub і ввійти в систему. У верхньому правому куті сторінки GitHub "
"сховища ви повинні побачити кнопку «Форк», як показано нижче:"

msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""
"Клацніть його, і через деякий час вас буде перенаправлено до власного форка "
"репозиторію Godot із вашим іменем користувача GitHub як простором імен:"

msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""
"Потім ви можете *клонувати* свій форк, тобто створити локальну копію онлайн-"
"репозиторію (у Git — *віддалений вихідний файл*). Якщо ви ще цього не "
"зробили, завантажте Git з `його веб-сайту <https://git-scm.com>`_, якщо ви "
"використовуєте Windows або macOS, або встановіть його через менеджер "
"пакетів, якщо ви використовуєте Linux."

msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""
"Якщо ви використовуєте Windows, відкрийте Git Bash, щоб вводити команди. "
"Користувачі macOS і Linux можуть використовувати відповідні термінали."

msgid "To clone your fork from GitHub, use the following command:"
msgstr "Щоб клонувати свій форк із GitHub, скористайтеся такою командою:"

msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""
"Через деякий час у вашому поточному робочому каталозі має бути каталог "
"``godot``. Перейдіть до нього за допомогою команди ``cd``:"

msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr ""
"Ми почнемо з налаштування посилання на оригінальний репозиторій, який ми "
"роздвоїли:"

msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"``godotengine/godot`` repository. This will be useful when you want to pull "
"new commits from its ``master`` branch to update your fork. You have another "
"remote reference named ``origin``, which points to your fork (``USERNAME/"
"godot``)."
msgstr ""
"Це створить посилання під назвою ``upstream``, яке вказує на оригінальне "
"сховище ``godotengine/godot``. Це буде корисно, коли ви хочете отримати нові "
"коміти з гілки ``master``, щоб оновити свій форк. У вас є інше віддалене "
"посилання під назвою ``origin``, яке вказує на ваше розгалуження (``USERNAME/"
"godot``)."

msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""
"Вам потрібно виконати описані вище кроки лише один раз, доки ви зберігаєте "
"локальну папку ``godot`` (яку ви можете переміщувати, якщо хочете, "
"відповідні метадані приховані в її підпапці ``.git``)."

msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr ""
"* Розгалужуйте, витягуйте, кодуйте, інсценуйте, фіксуйте, надсилайте, "
"перебазуйте... технологічно.*"

msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""
"Цей поганий погляд на *Technologic* від Daft Punk демонструє загальне "
"уявлення початківців Git про його робочий процес: багато дивних команд, які "
"можна вивчати шляхом копіювання та вставлення, сподіваючись, що вони "
"працюватимуть, як очікувалося. І це насправді непоганий спосіб навчитися, "
"якщо вам цікаво і не соромтеся запитувати свою пошукову систему, коли ви її "
"загубили, тому ми дамо вам основні команди, які потрібно знати під час "
"роботи в Git."

msgid ""
"In the following, we will assume as an example that you want to implement a "
"feature in Godot's Project Manager, which is coded in the ``editor/"
"project_manager.cpp`` file."
msgstr ""
"Далі, як приклад, ми припустимо, що ви хочете реалізувати функцію в Godot's "
"Project Manager, яка закодована у файлі ``editor/project_manager.cpp``."

msgid "Branching"
msgstr "Створення гілки"

msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""
"За замовчуванням ``git clone`` мав розмістити вас у ``master`` гілці вашого "
"форка (``origin``). Щоб розпочати власну розробку функцій, ми створимо гілку "
"функцій:"

msgid "This command is equivalent:"
msgstr "Ця команда є еквівалентною до такої:"

msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr "Якщо ви хочете повернутися до гілки ``master``, скористайтеся:"

msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr ""
"Ви можете побачити, на якій гілці ви зараз перебуваєте, за допомогою команди "
"``git branch``:"

msgid ""
"Be sure to always go back to the ``master`` branch before creating a new "
"branch, as your current branch will be used as the base for the new one. "
"Alternatively, you can specify a custom base branch after the new branch's "
"name:"
msgstr ""
"Обов’язково завжди повертайтеся до гілки ``master`` перед створенням нової "
"гілки, оскільки ваша поточна гілка буде використана як основа для нової. "
"Крім того, ви можете вказати спеціальну базову гілку після назви нової гілки:"

msgid "Updating your branch"
msgstr "Оновлення вашої гілки"

msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""
"Це не знадобиться з першого разу (відразу після того, як ви розгалужите "
"вихідний репозиторій). Однак наступного разу, коли ви захочете над чимось "
"попрацювати, ви помітите, що ``master`` вашого форка містить кілька комітів "
"позаду верхньої гілки ``master``: запити на отримання від інших учасників "
"були б тим часом об’єднані."

msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""
"Щоб переконатися, що не буде конфліктів між функцією, яку ви розробляєте, і "
"поточною гілкою ``master``, вам доведеться оновити свою гілку, *витягнувши* "
"гілку вище за течією."

msgid ""
"The ``--rebase`` argument will ensure that any local changes that you "
"committed will be re-applied *on top* of the pulled branch, which is usually "
"what we want in our PR workflow. This way, when you open a pull request, "
"your own commits will be the only difference with the upstream ``master`` "
"branch."
msgstr ""
"Аргумент ``--rebase`` гарантує, що будь-які локальні зміни, які ви "
"зафіксували, будуть повторно застосовані *поверх* витягнутої гілки, що "
"зазвичай і є тим, чого ми хочемо в нашому робочому процесі PR. Таким чином, "
"коли ви відкриваєте запит на вилучення, ваші власні коміти будуть єдиною "
"відмінністю від гілки ``master`` вище за течією."

msgid ""
"While rebasing, conflicts may arise if your commits modified code that has "
"been changed in the upstream branch in the meantime. If that happens, Git "
"will stop at the conflicting commit and will ask you to resolve the "
"conflicts. You can do so with any text editor, then stage the changes (more "
"on that later), and proceed with ``git rebase --continue``. Repeat the "
"operation if later commits have conflicts too, until the rebase operation "
"completes."
msgstr ""
"Під час перебазування можуть виникнути конфлікти, якщо ви фіксуєте "
"модифікований код, який тим часом було змінено у верхній гілці. Якщо це "
"станеться, Git зупиниться на конфліктному коміті та попросить вас вирішити "
"конфлікти. Ви можете зробити це за допомогою будь-якого текстового "
"редактора, потім внести зміни (детальніше про це пізніше) і продовжити за "
"допомогою ``git rebase --continue``. Повторіть операцію, якщо пізніші коміти "
"також мають конфлікти, доки операція rebase не завершиться."

msgid ""
"If you're unsure about what is going on during a rebase and you panic (no "
"worry, we all do the first few times), you can abort the rebase with ``git "
"rebase --abort``. You will then be back to the original state of your branch "
"before calling ``git pull --rebase``."
msgstr ""
"Якщо ви не впевнені, що відбувається під час перебазування, і панікуєте (не "
"хвилюйтеся, ми всі це робимо перші кілька разів), ви можете перервати "
"перебазування за допомогою ``git rebase --abort``. Після цього ви "
"повернетеся до початкового стану вашої гілки перед викликом ``git pull --"
"rebase``."

msgid ""
"If you omit the ``--rebase`` argument, you will instead create a merge "
"commit which tells Git what to make of the two distinct branches. If any "
"conflicts arise, they would be resolved all at once via this merge commit."
msgstr ""
"Якщо ви опустите аргумент ``--rebase``, замість цього ви створите комміт "
"злиття, який повідомляє Git, що робити з двома різними гілками. Якщо "
"виникнуть будь-які конфлікти, вони будуть вирішені всі одразу за допомогою "
"цього коміту злиття."

msgid ""
"While this is a valid workflow and the default behavior of ``git pull``, "
"merge commits within PRs are frowned upon in our PR workflow. We only use "
"them when merging PRs into the upstream branch."
msgstr ""
"Хоча це дійсний робочий процес і типова поведінка ``git pull``, коміти "
"злиття в PR не сприймаються в нашому робочому процесі PR. Ми використовуємо "
"їх лише під час об’єднання PR у галузь upstream."

msgid ""
"The philosophy is that a PR should represent the final stage of the changes "
"made to the codebase, and we are not interested in mistakes and fixes that "
"would have been done in intermediate stages before merging. Git gives us "
"great tools to \"rewrite the history\" and make it as if we got things right "
"the first time, and we're happy to use it to ensure that changes are easy to "
"review and understand long after they have been merged."
msgstr ""
"Філософія полягає в тому, що PR має представляти останній етап змін, "
"внесених до кодової бази, і ми не зацікавлені в помилках і виправленнях, які "
"були б зроблені на проміжних етапах перед злиттям. Git надає нам чудові "
"інструменти, щоб «переписати історію» і зробити так, ніби ми зробили все "
"правильно з першого разу, і ми раді використовувати його, щоб гарантувати, "
"що зміни легко переглядати та розуміти ще довго після їх об’єднання."

msgid ""
"If you have already created a merge commit without using ``rebase``, or have "
"made any other changes that have resulted in undesired history, the best "
"option is to use an *interactive rebase* on the upstream branch. See the :"
"ref:`dedicated section <doc_pr_workflow_rebase>` for instructions."
msgstr ""
"Якщо ви вже створили комміт злиття без використання ``rebase``, або внесли "
"будь-які інші зміни, які призвели до небажаної історії, найкращим варіантом "
"є використання *інтерактивного перебазування* у гілці вище. Інструкції див. "
"у :ref:`спеціальному розділі <doc_pr_workflow_rebase>`."

msgid ""
"If at any time you want to *reset* a local branch to a given commit or "
"branch, you can do so with ``git reset --hard <commit ID>`` or ``git reset --"
"hard <remote>/<branch>`` (e.g. ``git reset --hard upstream/master``)."
msgstr ""
"Якщо в будь-який момент ви захочете *скинути* локальну гілку до певного "
"коміту або гілки, ви можете зробити це за допомогою ``git reset --hard "
"<ідентифікатор коміту>`` або ``git reset --hard <remote>/ <гілка>`` "
"(наприклад, ``git reset --hard upstream/master``)."

msgid ""
"Be warned that this will remove any changes that you might have committed in "
"this branch. If you ever lose commits by mistake, use the ``git reflog`` "
"command to find the commit ID of the previous state that you would like to "
"restore, and use it as argument of ``git reset --hard`` to go back to that "
"state."
msgstr ""
"Майте на увазі, що це призведе до видалення будь-яких змін, які ви могли "
"внести в цю гілку. Якщо ви помилково втратите коміти, скористайтеся командою "
"``git reflog``, щоб знайти ідентифікатор фіксації попереднього стану, який "
"ви хотіли б відновити, і використовуйте його як аргумент ``git reset --"
"hard`` для переходу повернутися до того стану."

msgid "Making changes"
msgstr "Внесення змін"

msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""
"Потім ви повинні внести зміни у файл ``editor/project_manager.cpp`` нашого "
"прикладу за допомогою свого звичайного середовища розробки (текстовий "
"редактор, IDE тощо)."

msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local Git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""
"За замовчуванням ці зміни є *непоетапними*. Проміжна область — це шар між "
"вашим робочим каталогом (де ви вносите свої зміни) і локальним сховищем Git "
"(коміти та всі метадані в папці ``.git``). Щоб перенести зміни з робочого "
"каталогу до репозиторію Git, вам потрібно *помістити* їх за допомогою "
"команди ``git add``, а потім зафіксувати їх за допомогою команди ``git "
"commit``."

msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr ""
"Існують різні команди, які вам слід знати, щоб переглянути свою поточну "
"роботу перед її інсценуванням, під час її інсценування та після її виконання."

msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr ""
"``git diff`` покаже вам поточні непрограшовані зміни, тобто відмінності між "
"вашим робочим каталогом і проміжною областю."

msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr ""
"``git checkout -- <files>`` скасує непоетапні зміни в наведених файлах."

msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr "``git add <files>`` *внесе* зміни у перелічені файли."

msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""
"``git diff --staged`` покаже поточні поетапні зміни, тобто відмінності між "
"проміжною областю та останнім комітом."

msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr "``git reset HEAD <files>`` *скасує* зміни в перелічених файлах."

msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr "``git status`` покаже вам, які поточні та непроведені модифікації."

msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""
"``git commit`` зафіксує поетапні файли. Він відкриє текстовий редактор (ви "
"можете визначити той, який ви бажаєте використовувати, за допомогою змінної "
"середовища ``GIT_EDITOR`` або налаштування ``core.editor`` у вашій "
"конфігурації Git), щоб ви могли писати журнал фіксації. Ви можете "
"використовувати git commit -m \"Cool commit log\" для безпосереднього запису "
"журналу."

msgid ""
"``git commit --amend`` lets you amend the last commit with your currently "
"staged changes (added with ``git add``). This is the best option if you want "
"to fix a mistake in the last commit (bug, typo, style issue, etc.)."
msgstr ""
"``git commit --amend`` дозволяє вносити зміни до останнього коміту поточними "
"змінами (доданими за допомогою ``git add``). Це найкращий варіант, якщо ви "
"хочете виправити помилку в останньому коміті (помилка, опечатка, проблема "
"стилю тощо)."

msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""
"``git log`` покаже вам останні коміти вашої поточної гілки. Якщо ви зробили "
"локальні коміти, вони повинні бути показані вгорі."

msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""
"``git show`` покаже вам зміни останнього коміту. Ви також можете вказати хеш "
"коміту, щоб побачити зміни для цього коміту."

msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""
"Це дуже багато для запам'ятовування! Не хвилюйтеся, просто перевірте цю "
"шпаргалку, коли вам потрібно внести зміни, і вчіться на практиці."

msgid "Here's how the shell history could look like on our example:"
msgstr "Ось як може виглядати історія оболонки на нашому прикладі:"

msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""
"Таким чином, ми повинні мати два нових коміти в нашій гілці ``better-project-"
"manager``, яких не було в гілці ``master``. Хоча вони все ще є лише "
"локальними, віддалений форк не знає про них, а також репозиторій угорі."

msgid "Pushing changes to a remote"
msgstr "Надсилання змін до віддаленого сховища"

msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""
"Ось тут у гру вступить ``git push``. У Git фіксація завжди виконується в "
"локальному сховищі (на відміну від Subversion, де фіксація безпосередньо "
"змінює віддалений репозиторій). Вам потрібно *надіслати* нові коміти у "
"віддалену гілку, щоб поділитися ними зі світом. Синтаксис для цього:"

msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""
"Частину про віддалену гілку можна опустити, якщо ви хочете, щоб вона мала "
"таку саму назву, як і локальна гілка, як у нашому випадку в цьому прикладі, "
"тому ми зробимо:"

msgid ""
"Git will ask you for your username and password. For your password, enter "
"your GitHub Personal Access Token (PAT). If you do not have a GitHub "
"Personal Access Token, or do not have one with the correct permissions for "
"your newly forked repository, you will need to create one. Follow this link "
"to create your Personal Access Token: `Creating a personal access token "
"<https://docs.github.com/en/authentication/keeping-your-account-and-data-"
"secure/creating-a-personal-access-token>`_."
msgstr ""
"Git запитає у вас ім’я користувача та пароль. У якості пароля введіть "
"особистий маркер доступу GitHub (PAT). Якщо у вас немає особистого маркера "
"доступу GitHub або його немає з належними дозволами для вашого щойно "
"розгалуженого сховища, вам потрібно буде його створити. Перейдіть за цим "
"посиланням, щоб створити свій особистий маркер доступу: `Створення "
"особистого маркера доступу <https://docs.github.com/en/authentication/"
"keeping-your-account-and-data-secure/creating-a-personal-access-token>`_."

msgid ""
"After you have successfully verified your account using your PAT, the "
"changes will be sent to your remote repository. If you check the fork's page "
"on GitHub, you should see a new branch with your added commits."
msgstr ""
"Після того, як ви успішно підтвердите свій обліковий запис за допомогою PAT, "
"зміни буде надіслано до вашого віддаленого сховища. Якщо ви перевірите "
"сторінку форка на GitHub, ви побачите нову гілку з доданими комітами."

msgid "Issuing a pull request"
msgstr "Надсилання запиту щодо злиття"

msgid ""
"When you load your fork's branch on GitHub, you should see a line saying "
"*\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch)."
msgstr ""
"Коли ви завантажуєте гілку форка на GitHub, ви маєте побачити рядок *\"Ця "
"гілка на 2 коміти випереджає godotengine:master.\"* (і, можливо, деякі "
"коміти відстають, якщо ваша гілка ``master`` не синхронізована з верхня "
"гілка ``master``)."

msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the ``godotengine/godot`` upstream "
"repository. It should show you your two commits, and state \"Able to "
"merge\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR yet, something went wrong. Go to our `Godot "
"Contributors Chat <https://chat.godotengine.org/>`_ and ask for support :)"
msgstr ""
"У цьому рядку є посилання «Pull request». Натиснувши його, ви відкриєте "
"форму, яка дозволить вам надіслати запит на витяг у вихідному сховищі "
"``godotengine/godot``. Він повинен показати вам два ваші коміти та вказати "
"«Можливий для злиття». Якщо ні (наприклад, він має набагато більше комітів "
"або говорить про конфлікти злиття), поки не створюйте PR, щось пішло не так. "
"Перейдіть до нашого `чату співавторів Godot <https://chat.godotengine.org/"
">`_ і попросіть підтримки :)"

msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""
"Використовуйте чіткий заголовок для PR і розмістіть необхідні деталі в "
"області коментарів. Ви можете перетягувати знімки екрана, GIF-файли або "
"заархівовані проекти, якщо це необхідно, щоб продемонструвати те, що "
"реалізовано у вашій роботі. Натисніть «Створити запит на отримання», і тоді!"

msgid "Modifying a pull request"
msgstr "Змінення запиту на отримання"

msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""
"Хоча його перевіряють інші учасники, вам часто доведеться вносити зміни до "
"свого ще не об’єднаного PR, або тому, що учасники вимагали їх, або тому, що "
"ви самі виявили проблеми під час тестування."

msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""
"Хороша новина полягає в тому, що ви можете змінити запит на отримання, "
"просто діючи на гілці, з якої ви зробили запит на отримання. Ви можете напр. "
"зробіть нову фіксацію на цій гілці, перемістіть її у свій форк, і PR буде "
"оновлено автоматично:"

msgid ""
"However, be aware that in our PR workflow, we favor commits that bring the "
"codebase from one functional state to another functional state, without "
"having intermediate commits fixing up bugs in your own code or style issues. "
"Most of the time, we will prefer a single commit in a given PR (unless "
"there's a good reason to keep the changes separate). Instead of authoring a "
"new commit, consider using ``git commit --amend`` to amend the previous "
"commit with your fixes. The above example would then become:"
msgstr ""
"Однак майте на увазі, що в нашому робочому процесі PR ми віддаємо перевагу "
"комітам, які переводять базу коду з одного функціонального стану в інший, "
"без проміжних комітів, які виправляють помилки у вашому власному коді чи "
"проблеми стилю. У більшості випадків ми надаємо перевагу одному коміту в "
"даному PR (якщо немає вагомих причин зберігати зміни окремо). Замість "
"створення нового коміту, розгляньте можливість використання ``git commit --"
"amend``, щоб змінити попередній коміт своїми виправленнями. Тоді наведений "
"вище приклад стане таким:"

msgid "The interactive rebase"
msgstr "Інтерактивне перебазування"

msgid ""
"If you didn't follow the above steps closely to *amend* changes into a "
"commit instead of creating fixup commits, or if you authored your changes "
"without being aware of our workflow and Git usage tips, reviewers might "
"request you to *rebase* your branch to *squash* some or all of the commits "
"into one."
msgstr ""
"Якщо ви не виконали наведених вище кроків, щоб *змінити* зміни у коміті "
"замість створення комітів виправлення, або якщо ви створили свої зміни, не "
"знаючи про наш робочий процес і поради щодо використання Git, рецензенти "
"можуть попросити вас *перебазувати* свій розгалуження, щоб *зтиснути* деякі "
"або всі коміти в одне."

msgid ""
"Indeed, if some commits have been made following reviews to fix bugs, typos, "
"etc. in the original commit, they are not relevant to a future changelog "
"reader who would want to know what happened in the Godot codebase, or when "
"and how a given file was last modified."
msgstr ""
"Дійсно, якщо деякі коміти були зроблені після переглядів для виправлення "
"помилок, друкарських помилок тощо в оригінальному коміті, вони не мають "
"відношення до майбутнього читача журналу змін, який хотів би знати, що "
"сталося в кодовій базі Godot, або коли і як заданий файл був востаннє "
"змінений."

msgid ""
"To squash those extraneous commits into the main one, we will have to "
"*rewrite history*. Right, we have that power. You may read that it's a bad "
"practice, and it's true when it comes to branches of the upstream repo. But "
"in your fork, you can do whatever you want, and everything is allowed to get "
"neat PRs :)"
msgstr ""
"Щоб стиснути ці сторонні коміти в основні, нам доведеться *переписати "
"історію*. Так, у нас є така влада. Ви можете прочитати, що це погана "
"практика, і це правда, коли справа доходить до гілок апстрім-репо. Але у "
"вашому форку можна робити все, що завгодно, і все дозволено, щоб отримати "
"акуратний піар :)"

msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit ID or a branch name as argument, and will let you "
"modify all commits between that commit/branch and the last one in your "
"working branch, the so-called ``HEAD``."
msgstr ""
"Для цього ми використаємо *інтерактивну перебазу* ``git rebase -i``. Ця "
"команда приймає ідентифікатор коміту або назву гілки як аргумент і дозволить "
"вам змінювати всі коміти між цим комітом/гілкою та останньою у вашій робочій "
"гілці, так званій ``HEAD``."

msgid ""
"While you can give any commit ID to ``git rebase -i`` and review everything "
"in between, the most common and convenient workflow involves rebasing on the "
"upstream ``master`` branch, which you can do with:"
msgstr ""
"Хоча ви можете вказати будь-який ідентифікатор коміту для ``git rebase -i`` "
"і переглянути все між ними, найпоширеніший і зручний робочий процес "
"передбачає перебазування у верхній гілці ``master``, яку ви можете зробити "
"за допомогою:"

msgid ""
"Referencing branches in Git is a bit tricky due to the distinction between "
"remote and local branches. Here, ``upstream/master`` (with a `/`) is a local "
"branch which has been pulled from the ``upstream`` remote's ``master`` "
"branch."
msgstr ""
"Посилання на гілки в Git є дещо складним через різницю між віддаленими та "
"локальними гілками. Тут ``upstream/master`` (з `/`) є локальною гілкою, яка "
"була отримана з ``master`` гілки віддаленого ``upstream``."

msgid ""
"Interactive rebases can only be done on local branches, so the `/` is "
"important here. As the upstream remote changes frequently, your local "
"``upstream/master`` branch may become outdated, so you can update it with "
"``git fetch upstream master``. Contrarily to ``git pull --rebase upstream "
"master`` which would update your currently checked out branch, ``fetch`` "
"will only update the ``upstream/master`` reference (which is distinct from "
"your local ``master`` branch... yes it's confusing, but you'll become "
"familiar with this little by little)."
msgstr ""
"Інтерактивне перебазування можна виконувати лише на локальних гілках, тому `/"
"` тут важливий. Оскільки віддалений вихідний канал часто змінюється, ваша "
"локальна гілка ``upstream/master`` може застаріти, тому ви можете оновити "
"його за допомогою ``git fetch upstream master``. На відміну від ``git pull --"
"rebase upstream master``, який оновить вашу поточну вилучену гілку, "
"``fetch`` оновить лише посилання ``upstream/master`` (яке відрізняється від "
"вашого локального ``master`` гілка... так, це заплутано, але ви потроху з "
"цим познайомитеся)."

msgid ""
"This will open a text editor (``vi`` by default, see `Git docs <https://git-"
"scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ to "
"configure your favorite one) with something which may look like this:"
msgstr ""
"Це відкриє текстовий редактор (``vi`` за замовчуванням, перегляньте `Git "
"docs <https://git-scm.com/book/en/v2/Customizing-Git-Git-"
"Configuration#_core_editor>`_, щоб налаштувати ваш улюблений) з чимось, що "
"може виглядати так:"

msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""
"Редактор також покаже інструкції щодо того, як ви можете діяти з цими "
"комітами. Зокрема, у ньому має бути вказано, що «вибрати» означає "
"використовувати цей комміт (нічого не робити), а «сквош» і «виправити» можна "
"використовувати для *змішування* коміту в його батьківському коміті. Різниця "
"між «squash» і «fixup» полягає в тому, що «fixup» видаляє журнал фіксації зі "
"здавленого коміту. У нашому прикладі ми не зацікавлені у збереженні журналу "
"коміту «Виправити помилку», тому ми використовуємо:"

msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""
"Після збереження та виходу з редактора відбудеться перебазування. Другий "
"коміт буде об’єднано з першим, а ``git log`` і ``git show`` тепер повинні "
"підтвердити, що у вас є лише один коміт зі змінами від обох попередніх "
"комітів."

msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""
"але! Ви переписали історію, і тепер ваші локальні та віддалені гілки "
"розійшлися. Дійсно, фіксація 1b4aad7 у наведеному вище прикладі буде "
"змінена, і, отже, отримано новий хеш фіксації. Якщо ви спробуєте надіслати "
"до вашої віддаленої гілки, це викличе помилку:"

msgid ""
"This is reasonable behavior, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""
"Це розумна поведінка, Git не дозволить вам внести зміни, які перевизначать "
"віддалений вміст. Але насправді це те, що ми хочемо зробити тут, тому нам "
"доведеться *примусово* це:"

msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""
"І тадаа! Git із задоволенням *замінить* вашу віддалену гілку на те, що було "
"у вас локально (тому переконайтеся, що це те, що ви хотіли, використовуючи "
"``git log``). Це також оновить PR відповідно."

msgid "Rebasing onto another branch"
msgstr "Перебазування на іншу гілку"

msgid ""
"If you have accidentally opened your PR on the wrong branch, or need to "
"target another branch for some reason, you might need to filter out a lot of "
"commits that differ between the old branch (for example ``4.2``) and the new "
"branch (for example ``master``). This can make rebasing difficult and "
"tedious. Fortunately ``git`` has a command just for this situation, ``git "
"rebase --onto``."
msgstr ""
"Якщо ви випадково відкрили свій PR не на тій гілці або з якоїсь причини вам "
"потрібно націлити іншу гілку, можливо, вам доведеться відфільтрувати багато "
"комітів, які відрізняються між старою гілкою (наприклад, ``4.2``) і новою "
"гілкою. гілка (наприклад ``master``). Це може зробити перебазування складним "
"і виснажливим. На щастя, у ``git`` є команда саме для цієї ситуації, ``git "
"rebase --onto``."

msgid ""
"If your PR was created from the ``4.2`` branch and you want to update it to "
"instead start at ``master`` the following steps *should* fix this in one "
"step:"
msgstr ""
"Якщо ваш PR було створено з гілки ``4.2`` і ви хочете оновити його, щоб "
"натомість починатися з ``master``, наступні кроки *мають* виправити це за "
"один крок:"

msgid ""
"This will take all the commits on your branch *after* the ``4.2`` branch, "
"and then splice them on top of ``master``, ignoring any commits from the "
"``4.2`` branch not on the ``master`` branch. You may still need to do some "
"fixing, but this command should save you a lot of tedious work removing "
"commits."
msgstr ""
"Це візьме всі коміти у вашій гілці *після* гілки ``4.2``, а потім з’єднає їх "
"поверх ``master``, ігноруючи будь-які коміти з гілки ``4.2``, що не є "
"``master`` `` гілка. Можливо, вам все одно доведеться виконати деякі "
"виправлення, але ця команда заощадить вам багато виснажливої роботи з "
"видалення комітів."

msgid ""
"Just like above for the interactive rebase you need to force push your "
"branch to handle the different changes:"
msgstr ""
"Так само, як і вище, для інтерактивного перебазування вам потрібно змусити "
"вашу гілку обробляти різні зміни:"

msgid "Deleting a Git branch"
msgstr "Вилучення гілки git"

msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""
"Після того, як ваш запит на отримання об’єднано, ви повинні зробити ще одне: "
"видалити свою гілку Git для PR. Не виникне проблем, якщо ви не видалите свою "
"гілку, але це добре робити. Вам потрібно буде зробити це двічі, один раз для "
"локальної гілки та другий для віддаленої гілки на GitHub."

msgid "To delete our better Project Manager branch locally, use this command:"
msgstr ""
"Щоб локально видалити нашу кращу гілку Project Manager, скористайтеся цією "
"командою:"

msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""
"Крім того, якщо гілку ще не об’єднано, і ми все одно хочемо її видалити, "
"замість ``-d`` ви б використовували ``-D``."

msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr ""
"Далі, щоб видалити віддалену гілку на GitHub, скористайтеся цією командою:"

msgid ""
"You can also delete the remote branch from the GitHub PR itself, a button "
"should appear once it has been merged or closed."
msgstr ""
"Ви також можете видалити віддалену гілку з самого GitHub PR, після її "
"об’єднання або закриття має з’явитися кнопка."
