#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for macOS"
msgstr "Компіляція для macOS"

msgid ""
"This page describes how to compile macOS editor and export template binaries "
"from source. If you're looking to export your project to macOS instead, "
"read :ref:`doc_exporting_for_macos`."
msgstr ""
"На цій сторінці описано, як скомпілювати редактор macOS і експортувати "
"двійкові файли шаблону з джерела. Якщо ви натомість хочете експортувати свій "
"проект у macOS, прочитайте :ref:`doc_exporting_for_macos`."

msgid "Requirements"
msgstr "Вимоги"

msgid "For compiling under macOS, the following is required:"
msgstr "Для компіляції під macOS необхідно:"

msgid "`Python 3.8+ <https://www.python.org/downloads/macos/>`_."
msgstr "`Python 3.8+ <https://www.python.org/downloads/macos/>`_."

msgid "`SCons 4.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr ""
"`SCons 4.0+ <https://scons.org/pages/download.html>`_ будувати систему."

msgid ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (or the more "
"lightweight Command Line Tools for Xcode)."
msgstr ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (або більш легкі "
"інструменти командного рядка для Xcode)."

msgid ""
"`Vulkan SDK <https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-"
"sdk.dmg>`_ for MoltenVK (macOS doesn't support Vulkan out of the box). The "
"latest Vulkan SDK version can be installed quickly by running ``misc/scripts/"
"install_vulkan_sdk_macos.sh`` within the Godot source repository."
msgstr ""
"`Vulkan SDK <https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-"
"sdk.dmg>`_ для MoltenVK (macOS не підтримує Vulkan із коробки). Останню "
"версію Vulkan SDK можна швидко встановити, запустивши ``misc/scripts/"
"install_vulkan_sdk_macos.sh`` у сховищі вихідних кодів Godot."

msgid ""
"Installing Homebrew will also fetch the Command Line Tools for Xcode "
"automatically if you don't have them already."
msgstr ""
"Встановлення Homebrew також призведе до автоматичного отримання інструментів "
"командного рядка для Xcode, якщо ви їх ще не маєте."

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""
"Щоб отримати вихідний код Godot для компіляції, "
"перегляньте :ref:`doc_getting_source`."

msgid ""
"For a general overview of SCons usage for Godot, "
"see :ref:`doc_introduction_to_the_buildsystem`."
msgstr ""
"Для загального огляду використання SCons для Godot "
"див. :ref:`doc_introduction_to_the_buildsystem`."

msgid "Compiling"
msgstr "Компілювання"

msgid "Start a terminal, go to the root directory of the engine source code."
msgstr ""
"Запустіть термінал, перейдіть до кореневого каталогу вихідного коду двигуна."

msgid ""
"If you are compiling Godot to make changes or contribute to the engine, you "
"may want to use the SCons options ``dev_build=yes`` or ``dev_mode=yes``. "
"See :ref:`doc_introduction_to_the_buildsystem_development_and_production_aliases` "
"for more info."
msgstr ""
"Якщо ви компілюєте Godot, щоб внести зміни або зробити внесок у механізм, ви "
"можете використати параметри SCons ``dev_build=yes`` або ``dev_mode=yes``. "
"Перегляньте :ref:`doc_introduction_to_the_buildsystem_development_and_production_aliases` "
"для отримання додаткової інформації."

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"``bin/`` subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the Project "
"Manager."
msgstr ""
"Якщо все піде добре, отриманий двійковий виконуваний файл буде розміщено в "
"підкаталозі ``bin/``. Цей виконуваний файл містить весь механізм і працює "
"без будь-яких залежностей. Після його виконання з’явиться менеджер проекту."

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""
"Якщо ви хочете використовувати окремі параметри редактора для власних збірок "
"Godot та офіційних випусків, ви можете "
"ввімкнути :ref:`doc_data_paths_self_contained_mode`, створивши файл під "
"назвою ``._sc_`` або ``_sc_`` у ``bin/`` папка."

msgid "Automatic ``.app`` bundle creation"
msgstr "Автоматичне створення пакета ``.app``"

msgid "Manual ``.app`` bundle creation"
msgstr "Створення комплекту ``.app`` вручну"

msgid "Running a headless/server build"
msgstr "Запуск безголової/серверної збірки"

msgid "Building export templates"
msgstr "Збірка шаблонів експорту"

msgid ""
"To build macOS export templates, you have to compile using the targets "
"without the editor: ``target=template_release`` (release template) and "
"``target=template_debug``."
msgstr ""
"Щоб створити шаблони експорту macOS, вам потрібно скомпілювати за допомогою "
"цілей без редактора: ``target=template_release`` (шаблон випуску) і "
"``target=template_debug``."

msgid ""
"Official templates are *Universal 2* binaries which support both ARM64 and "
"Intel x86_64 architectures."
msgstr ""
"Офіційні шаблони — це двійкові файли *Universal 2*, які підтримують "
"архітектури ARM64 і Intel x86_64."

msgid ""
"In most cases, static linking should be preferred as it makes distribution "
"easier. The main upside of dynamic linking is that it allows updating "
"MoltenVK without having to recompile export templates."
msgstr ""
"У більшості випадків слід віддавати перевагу статичному зв’язуванню, "
"оскільки це полегшує розповсюдження. Основна перевага динамічного "
"зв’язування полягає в тому, що воно дозволяє оновлювати MoltenVK без "
"необхідності перекомпілювати шаблони експорту."

msgid "Cross-compiling for macOS from Linux"
msgstr "Крос-компіляція для macOS з Linux"

msgid ""
"It is possible to compile for macOS in a Linux environment (and maybe also "
"in Windows using the Windows Subsystem for Linux). For that, you'll need to "
"install `OSXCross <https://github.com/tpoechtrager/osxcross>`__ to be able "
"to use macOS as a target. First, follow the instructions to install it:"
msgstr ""
"Можна скомпілювати для macOS у середовищі Linux (і, можливо, також у Windows "
"за допомогою підсистеми Windows для Linux). Для цього вам потрібно буде "
"встановити `OSXCross <https://github.com/tpoechtrager/osxcross>`__, щоб мати "
"можливість використовувати macOS як ціль. Спочатку дотримуйтесь інструкцій, "
"щоб встановити його:"

msgid ""
"Follow the instructions to package the SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"
msgstr ""
"Дотримуйтесь інструкцій, щоб упакувати SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"

msgid ""
"Follow the instructions to install OSXCross: https://github.com/tpoechtrager/"
"osxcross#installation"
msgstr ""
"Дотримуйтесь інструкцій для встановлення OSXCross: https://github.com/"
"tpoechtrager/osxcross#installation"

msgid "Troubleshooting"
msgstr "Вирішення проблем"
