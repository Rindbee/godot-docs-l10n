#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for macOS"
msgstr "Компіляція для macOS"

msgid ""
"This page describes how to compile macOS editor and export template binaries "
"from source. If you're looking to export your project to macOS instead, "
"read :ref:`doc_exporting_for_macos`."
msgstr ""
"На цій сторінці описано, як скомпілювати редактор macOS і експортувати "
"двійкові файли шаблону з джерела. Якщо ви натомість хочете експортувати свій "
"проект у macOS, прочитайте :ref:`doc_exporting_for_macos`."

msgid "Requirements"
msgstr "Вимоги"

msgid "For compiling under macOS, the following is required:"
msgstr "Для компіляції під macOS необхідно:"

msgid "`Python 3.6+ <https://www.python.org/downloads/macos/>`_."
msgstr "`Python 3.6+ <https://www.python.org/downloads/macos/>`_."

msgid "`SCons 3.1.2+ <https://scons.org/pages/download.html>`_ build system."
msgstr ""
"`SCons 3.1.2+ <https://scons.org/pages/download.html>`_ збірка системи."

msgid ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (or the more "
"lightweight Command Line Tools for Xcode)."
msgstr ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (або більш легкі "
"інструменти командного рядка для Xcode)."

msgid ""
"`Vulkan SDK <https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk."
"dmg>`_ for MoltenVK (macOS doesn't support Vulkan out of the box)."
msgstr ""
"`Vulkan SDK <https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk."
"dmg>`_ для MoltenVK (macOS не підтримує Vulkan із коробки)."

msgid ""
"If you have `Homebrew <https://brew.sh/>`_ installed, you can easily install "
"SCons using the following command::"
msgstr ""
"Якщо у вас встановлено `Homebrew <https://brew.sh/>`_, ви можете легко "
"встановити SCons за допомогою такої команди::"

msgid ""
"Installing Homebrew will also fetch the Command Line Tools for Xcode "
"automatically if you don't have them already."
msgstr ""
"Встановлення Homebrew також призведе до автоматичного отримання інструментів "
"командного рядка для Xcode, якщо ви їх ще не маєте."

msgid ""
"Similarly, if you have `MacPorts <https://www.macports.org/>`_ installed, "
"you can easily install SCons using the following command::"
msgstr ""
"Так само, якщо у вас встановлено `MacPorts <https://www.macports.org/>`_, ви "
"можете легко встановити SCons за допомогою такої команди::"

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""
"Щоб отримати вихідний код Godot для компіляції, перегляньте :ref:"
"`doc_getting_source`."

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"Для загального огляду використання SCons для Godot див. :ref:"
"`doc_introduction_to_the_buildsystem`."

msgid "Compiling"
msgstr "Компілювання"

msgid "Start a terminal, go to the root directory of the engine source code."
msgstr ""
"Запустіть термінал, перейдіть до кореневого каталогу вихідного коду двигуна."

msgid "To compile for Intel (x86-64) powered Macs, use::"
msgstr ""
"Для компіляції для комп’ютерів Mac на базі Intel (x86-64) використовуйте:"

msgid "To compile for Apple Silicon (ARM64) powered Macs, use::"
msgstr ""
"Для компіляції для комп’ютерів Mac на базі Apple Silicon (ARM64) "
"використовуйте:"

msgid ""
"To support both architectures in a single \"Universal 2\" binary, run the "
"above two commands and then use ``lipo`` to bundle them together::"
msgstr ""
"Щоб підтримувати обидві архітектури в одному двійковому файлі \"Universal "
"2\", запустіть дві команди, наведені вище, а потім скористайтеся ``lipo``, "
"щоб об’єднати їх разом:"

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"``bin/`` subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the Project "
"Manager."
msgstr ""
"Якщо все піде добре, отриманий двійковий виконуваний файл буде розміщено в "
"підкаталозі ``bin/``. Цей виконуваний файл містить весь механізм і працює "
"без будь-яких залежностей. Після його виконання з’явиться менеджер проекту."

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""
"Якщо ви хочете використовувати окремі параметри редактора для власних збірок "
"Godot та офіційних випусків, ви можете ввімкнути :ref:"
"`doc_data_paths_self_contained_mode`, створивши файл під назвою ``._sc_`` "
"або ``_sc_`` у ``bin/`` папка."

msgid ""
"To create an ``.app`` bundle like in the official builds, you need to use "
"the template located in ``misc/dist/macos_tools.app``. Typically, for an "
"optimized editor binary built with ``dev_build=yes``::"
msgstr ""
"Щоб створити пакет ``.app``, як в офіційних збірках, вам потрібно "
"використати шаблон, розташований у ``misc/dist/macos_tools.app``. Як "
"правило, для оптимізованого бінарного редактора, створеного за допомогою "
"``dev_build=yes``::"

msgid ""
"If you are building the ``master`` branch, you also need to include support "
"for the MoltenVK Vulkan portability library. By default, it will be linked "
"statically from your installation of the Vulkan SDK for macOS. You can also "
"choose to link it dynamically by passing ``use_volk=yes`` and including the "
"dynamic library in your ``.app`` bundle::"
msgstr ""
"Якщо ви створюєте гілку ``master``, вам також потрібно включити підтримку "
"бібліотеки переносимості MoltenVK Vulkan. За замовчуванням його буде "
"зв’язано статично з вашої інсталяції Vulkan SDK для macOS. Ви також можете "
"вибрати динамічне зв’язування, передавши ``use_volk=yes`` і включивши "
"динамічну бібліотеку у свій пакет ``.app``::"

msgid "Running a headless/server build"
msgstr "Запуск безголової/серверної збірки"

msgid ""
"To run in *headless* mode which provides editor functionality to export "
"projects in an automated manner, use the normal build::"
msgstr ""
"Щоб працювати в режимі *headless*, який надає функції редактора для "
"автоматичного експорту проектів, використовуйте звичайну збірку::"

msgid "And then use the ``--headless`` command line argument::"
msgstr "А потім скористайтеся аргументом командного рядка ``--headless``::"

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""
"Щоб зібрати *серверну* версію, яку можна використати зі :ref:`сторонніми "
"інструментами дебагу <doc_command_line_tutorial>`, скористайтесь:"

msgid ""
"To compile a release *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr ""
"Щоб скомпілювати збірку *сервера* випуску, оптимізовану для запуску "
"виділених ігрових серверів, використовуйте::"

msgid "Building export templates"
msgstr "Збірка шаблонів експорту"

msgid ""
"To build macOS export templates, you have to compile using the targets "
"without the editor: ``target=template_release`` (release template) and "
"``target=template_debug``."
msgstr ""
"Щоб створити шаблони експорту macOS, вам потрібно скомпілювати за допомогою "
"цілей без редактора: ``target=template_release`` (шаблон випуску) і "
"``target=template_debug``."

msgid ""
"You can then zip the ``macos_template.app`` folder to reproduce the ``macos."
"zip`` template from the official Godot distribution::"
msgstr ""
"Потім ви можете заархівувати папку ``macos_template.app``, щоб відтворити "
"шаблон ``macos.zip`` з офіційного дистрибутива Godot::"

msgid "Cross-compiling for macOS from Linux"
msgstr "Крос-компіляція для macOS з Linux"

msgid ""
"It is possible to compile for macOS in a Linux environment (and maybe also "
"in Windows using the Windows Subsystem for Linux). For that, you'll need to "
"install `OSXCross <https://github.com/tpoechtrager/osxcross>`__ to be able "
"to use macOS as a target. First, follow the instructions to install it:"
msgstr ""
"Можна скомпілювати для macOS у середовищі Linux (і, можливо, також у Windows "
"за допомогою підсистеми Windows для Linux). Для цього вам потрібно буде "
"встановити `OSXCross <https://github.com/tpoechtrager/osxcross>`__, щоб мати "
"можливість використовувати macOS як ціль. Спочатку дотримуйтесь інструкцій, "
"щоб встановити його:"

msgid ""
"Clone the `OSXCross repository <https://github.com/tpoechtrager/osxcross>`__ "
"somewhere on your machine (or download a ZIP file and extract it somewhere), "
"e.g.::"
msgstr ""
"Клонуйте `OSXCross репозиторій <https://github.com/tpoechtrager/osxcross>`__ "
"десь на вашому комп’ютері (або завантажте ZIP-файл і розпакуйте його десь), "
"наприклад::"

msgid ""
"Follow the instructions to package the SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"
msgstr ""
"Дотримуйтесь інструкцій, щоб упакувати SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"

msgid ""
"Follow the instructions to install OSXCross: https://github.com/tpoechtrager/"
"osxcross#installation"
msgstr ""
"Дотримуйтесь інструкцій для встановлення OSXCross: https://github.com/"
"tpoechtrager/osxcross#installation"

msgid ""
"After that, you will need to define the ``OSXCROSS_ROOT`` as the path to the "
"OSXCross installation (the same place where you cloned the repository/"
"extracted the zip), e.g.::"
msgstr ""
"Після цього вам потрібно буде визначити ``OSXCROSS_ROOT`` як шлях до "
"встановлення OSXCross (те саме місце, де ви клонували репозиторій/роздобули "
"zip), наприклад::"

msgid "Now you can compile with SCons like you normally would::"
msgstr "Тепер ви можете компілювати за допомогою SCons, як зазвичай:"

msgid ""
"If you have an OSXCross SDK version different from the one expected by the "
"SCons buildsystem, you can specify a custom one with the ``osxcross_sdk`` "
"argument::"
msgstr ""
"Якщо у вас є версія OSXCross SDK, відмінна від тієї, яку очікує система "
"збірки SCons, ви можете вказати спеціальну версію за допомогою аргументу "
"``osxcross_sdk``::"
