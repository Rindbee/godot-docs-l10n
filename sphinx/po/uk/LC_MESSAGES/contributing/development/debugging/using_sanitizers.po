#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using sanitizers"
msgstr "Використання дезінфікуючих засобів"

msgid "What are sanitizers?"
msgstr "Що таке санітайзери?"

msgid ""
"Sanitizers are static instrumentation tools that help find bugs that "
"traditional debuggers usually cannot catch. This is particularly useful when "
"combined with :ref:`doc_unit_testing` in continuous integration."
msgstr ""
"Санітайзери — це статичні інструменти, які допомагають знаходити помилки, "
"які традиційні налагоджувачі зазвичай не можуть виявити. Це особливо корисно "
"в поєднанні з :ref:`doc_unit_testing` у безперервній інтеграції."

msgid ""
"Sanitizers can be used on Windows, macOS and Linux by using the Clang "
"(LLVM), GCC or Visual Studio compilers. :ref:`Certain platforms "
"<doc_using_sanitizers_platform_specific_sanitizers>` may also have their own "
"sanitizers available. In situations where a single sanitizer is provided by "
"several different compilers, remember that their output and behavior will "
"differ slightly."
msgstr ""
"Санітайзери можна використовувати в Windows, macOS і Linux за допомогою "
"компіляторів Clang (LLVM), GCC або Visual Studio. :ref:`Деякі платформи "
"<doc_using_sanitizers_platform_specific_sanitizers>` також можуть мати "
"власні дезінфікуючі засоби. У ситуаціях, коли один дезінфікуючий засіб "
"надається кількома різними компіляторами, пам’ятайте, що їхні результати та "
"поведінка дещо відрізнятимуться."

msgid "Using sanitizers on Godot"
msgstr "Використання дезінфікуючих засобів на Godot"

msgid ""
"Sanitizers **require** recompiling the binary. This means you cannot use "
"official Godot binaries to run sanitizers."
msgstr ""
"Санітайзери **вимагають** перекомпілювати двійковий файл. Це означає, що ви "
"не можете використовувати офіційні двійкові файли Godot для запуску "
"дезінфікуючих засобів."

msgid ""
"When :ref:`compiling <toc-devel-compiling>` with any of the sanitizers "
"enabled, the resulting binary will have the ``.san`` suffix added to its "
"name to distinguish it from a binary without sanitizers."
msgstr ""
"Під час :ref:`компіляції <toc-devel-compiling>` з увімкненими дезінфікуючими "
"засобами, отриманий двійковий файл матиме суфікс ``.san`` до назви, щоб "
"відрізнити його від двійкового файлу без дезінфікуючих засобів."

msgid ""
"There is a performance impact as many additional runtime checks need to be "
"performed. Memory utilization will also increase. It is possible to enable "
"certain combinations of multiple sanitizers in a single build. Beware of the "
"performance impact when using multiple sanitizers at once though, as the "
"resulting binary may be excessively slow."
msgstr ""
"Існує вплив на продуктивність, оскільки потрібно виконувати багато "
"додаткових перевірок під час виконання. Використання пам'яті також "
"збільшиться. Можна ввімкнути певні комбінації кількох дезінфікуючих засобів "
"в одній збірці. Остерігайтеся впливу на продуктивність під час використання "
"кількох дезінфікуючих засобів одночасно, оскільки кінцевий двійковий файл "
"може бути надто повільним."

msgid ""
"Certain options can be passed to sanitizers without having to recompile the "
"binary using environment variables."
msgstr ""
"Певні параметри можна передати в дезінфікуючі засоби без необхідності "
"перекомпілювати двійковий файл за допомогою змінних середовища."

msgid "Address sanitizer (ASAN)"
msgstr "Адресний санітайзер (ASAN)"

msgid "Available in Clang and GCC."
msgstr "Доступно на Clang та GCC."

msgid "**Supported platforms:** Linux, macOS, Windows (Visual Studio), Web"
msgstr "**Підтримувані платформи:** Linux, macOS, Windows (Visual Studio), Web"

msgid ""
"`Clang ASAN documentation <https://clang.llvm.org/docs/AddressSanitizer."
"html>`__"
msgstr ""
"`Документація Clang ASAN <https://clang.llvm.org/docs/AddressSanitizer."
"html>`__"

msgid ""
"The address sanitizer is generally the most frequently used sanitizer. It "
"can diagnose issues such as buffer overruns and out-of-bounds access. If the "
"engine crashes with a message such as ``free(): invalid pointer``, this is "
"typically the result of a buffer overrun. (This message is printed by the C "
"runtime, not Godot.)"
msgstr ""
"Адресний дезінфікуючий засіб зазвичай є найбільш часто використовуваним "
"дезінфікуючим засобом. Він може діагностувати такі проблеми, як переповнення "
"буфера та доступ поза межами. Якщо механізм аварійно завершує роботу з "
"повідомленням на зразок ``free(): invalid pointer``, зазвичай це результат "
"переповнення буфера. (Це повідомлення друкує середовище виконання C, а не "
"Godot.)"

msgid ""
"In certain situations (such as detecting uninitialized memory reads), the "
"address sanitizer doesn't suffice. The :ref:"
"`doc_using_sanitizers_memory_sanitizer` should be used instead."
msgstr ""
"У певних ситуаціях (наприклад, виявлення неініціалізованих зчитувань "
"пам’яті) засобу очищення адреси недостатньо. Замість цього слід "
"використовувати :ref:`doc_using_sanitizers_memory_sanitizer`."

msgid ""
"It is also possible to detect use-after-return situations by specifying the "
"``ASAN_OPTIONS=detect_stack_use_after_return=1`` environment variable before "
"*running* Godot (not when compiling it). This increases the address "
"sanitizer's runtime overhead, so only enable this feature when you actually "
"need it."
msgstr ""
"Також можна виявити ситуації використання після повернення, вказавши змінну "
"середовища ``ASAN_OPTIONS=detect_stack_use_after_return=1`` перед *запуском* "
"Godot (а не під час його компіляції). Це збільшує час виконання "
"дезінфікуючої адреси, тому вмикайте цю функцію лише тоді, коли вона вам "
"дійсно потрібна."

msgid ""
"To enable the address sanitizer in a Godot build, pass the ``use_asan=yes`` "
"SCons option when compiling. Enabling ASAN generally makes the resulting "
"binary about 2× slower."
msgstr ""
"Щоб увімкнути дезінфекцію адрес у збірці Godot, передайте параметр "
"``use_asan=yes`` SCons під час компіляції. Увімкнення ASAN зазвичай робить "
"кінцевий двійковий приблизно вдвічі повільнішим."

msgid ""
"Due to a `design decision <https://stackoverflow.com/questions/36971902/why-"
"cant-clang-enable-all-sanitizers/>`__, the address, memory and thread "
"sanitizers are mutually exclusive. This means you can only use one of those "
"sanitizers in a given binary."
msgstr ""
"Через `дизайнерське рішення <https://stackoverflow.com/questions/36971902/"
"why-cant-clang-enable-all-sanitizers/>`__ дезінфікуючі засоби адреси, "
"пам’яті та потоку є взаємовиключними. Це означає, що ви можете "
"використовувати лише один із цих санітайзерів у певному двійковому файлі."

msgid "Leak sanitizer (LSAN)"
msgstr "Засіб для дезінфекції витоків (LSAN)"

msgid "**Supported platforms:** Linux, Web"
msgstr "**Підтримувані платформи:** Linux, Web"

msgid ""
"`Clang LSAN documentation <https://clang.llvm.org/docs/LeakSanitizer.html>`__"
msgstr ""
"`Документація Clang LSAN <https://clang.llvm.org/docs/LeakSanitizer.html>`__"

msgid ""
"The leak sanitizer can detect memory leaks, which are situations where "
"memory that is no longer in use is never freed by the running program. This "
"can potentially lead to out-of-memory situations if the program runs for "
"long enough. Since Godot may run on :ref:`dedicated servers "
"<doc_exporting_for_dedicated_servers>` for months or even years without a "
"restart, it's important to fix memory leaks when they occur."
msgstr ""
"Засіб очищення від витоків може виявляти витоки пам’яті, коли пам’ять, яка "
"більше не використовується, ніколи не звільняється запущеною програмою. Це "
"потенційно може призвести до ситуацій нестачі пам’яті, якщо програма працює "
"достатньо довго. Оскільки Godot може працювати на :ref:`виділених серверах "
"<doc_exporting_for_dedicated_servers>` протягом місяців або навіть років без "
"перезапуску, важливо виправляти витоки пам’яті, коли вони трапляються."

msgid ""
"To enable the leak sanitizer in a Godot build, pass the ``use_lsan=yes`` "
"SCons option when compiling. Enabling LSAN only has a small performance "
"overhead, but the program will be much slower to exit as leak detection "
"occurs when the program exits."
msgstr ""
"Щоб увімкнути засіб очищення від витоків у збірці Godot, передайте параметр "
"``use_lsan=yes`` SCons під час компіляції. Увімкнення LSAN має лише невеликі "
"витрати на продуктивність, але програма буде виходити набагато повільніше, "
"оскільки виявлення витоку відбувається під час виходу програми."

msgid "Memory sanitizer (MSAN)"
msgstr "Дезінфікуючий засіб пам'яті (MSAN)"

msgid "Available in Clang only, not GCC."
msgstr "Доступно лише в Clang, не GCC."

msgid "**Supported platforms:** Linux"
msgstr "**Підтримувані платформи:** Linux"

msgid ""
"`Clang MSAN documentation <https://clang.llvm.org/docs/MemorySanitizer."
"html>`__"
msgstr ""
"`Документація Clang MSAN <https://clang.llvm.org/docs/MemorySanitizer."
"html>`__"

msgid ""
"The memory sanitizer complements the :ref:"
"`doc_using_sanitizers_address_sanitizer`. Unlike the address sanitizer, the "
"memory sanitizer can detect uninitialized memory reads."
msgstr ""
"Засіб очищення пам’яті доповнює :ref:"
"`doc_using_sanitizers_address_sanitizer`. На відміну від засобу очищення "
"адреси, засіб очищення пам’яті може виявляти неініціалізовані зчитування "
"пам’яті."

msgid ""
"To enable the memory sanitizer in a Godot build, pass the ``use_msan=yes`` "
"SCons option when compiling. Enabling MSAN generally makes the resulting "
"binary about 3× slower."
msgstr ""
"Щоб увімкнути очисник пам’яті в збірці Godot, передайте параметр "
"``use_msan=yes`` SCons під час компіляції. Увімкнення MSAN зазвичай робить "
"кінцевий двійковий приблизно в 3 рази повільнішим."

msgid "Thread sanitizer (TSAN)"
msgstr "Дезінфікуючий засіб для ниток (TSAN)"

msgid "**Supported platforms:** Linux, macOS"
msgstr "**Підтримувані платформи:** Linux, macOS"

msgid ""
"`Clang TSAN documentation <https://clang.llvm.org/docs/ThreadSanitizer."
"html>`__"
msgstr ""
"`Документація Clang TSAN <https://clang.llvm.org/docs/ThreadSanitizer."
"html>`__"

msgid ""
"The thread sanitizer is used to track down race conditions related to "
"multithreading. A race condition is when multiple threads try to modify the "
"same data at the same time. Since thread scheduling can be ordered in any "
"fashion by the operating system, this leads to incorrect behavior that only "
"occurs occasionally (and can be difficult to track as a result). To prevent "
"a race condition, you need to add a lock to ensure only one thread can "
"access the shared data at a given time."
msgstr ""
"Засіб дезінфекції потоків використовується для відстеження умов змагання, "
"пов’язаних із багатопотоковістю. Умова змагання - це коли кілька потоків "
"намагаються змінити ті самі дані одночасно. Оскільки операційна система може "
"впорядковувати планування потоків у будь-який спосіб, це призводить до "
"неправильної поведінки, яка трапляється лише час від часу (і тому може бути "
"важко відстежити). Щоб запобігти умові змагання, потрібно додати блокування, "
"щоб гарантувати, що лише один потік може отримати доступ до спільних даних у "
"певний момент часу."

msgid ""
"To enable the thread sanitizer in a Godot build, pass the ``use_tsan=yes`` "
"SCons option when compiling. Enabling TSAN generally makes the resulting "
"binary 10× slower, while also multiplying memory usage by an approximately "
"8× factor."
msgstr ""
"Щоб увімкнути дезінфекцію потоків у збірці Godot, передайте опцію "
"``use_tsan=yes`` SCons під час компіляції. Увімкнення TSAN зазвичай робить "
"отриманий двійковий файл у 10 разів повільнішим, водночас примножуючи "
"використання пам’яті приблизно на коефіцієнт 8 разів."

msgid "Undefined behavior sanitizer (UBSAN)"
msgstr "Дезінфікуючий засіб невизначеної поведінки (UBSAN)"

msgid "**Supported platforms:** Linux, macOS, Web"
msgstr "**Підтримувані платформи:** Linux, macOS, Web"

msgid ""
"`Clang UBSAN documentation <https://clang.llvm.org/docs/"
"UndefinedBehaviorSanitizer.html>`__"
msgstr ""
"`Документація Clang UBSAN <https://clang.llvm.org/docs/"
"UndefinedBehaviorSanitizer.html>`__"

msgid ""
"The undefined behavior sanitizer is used to track down situations where the "
"program exhibits random and unpredictable behavior. This is due to C/C++ "
"code that is accepted by the compiler, but is not *correct*. Compiling with "
"a different set of optimizations can also change the observed results of "
"undefined behavior."
msgstr ""
"Засіб невизначеної поведінки використовується для відстеження ситуацій, коли "
"програма демонструє випадкову та непередбачувану поведінку. Це пов’язано з "
"кодом C/C++, який приймається компілятором, але не є *коректним*. Компіляція "
"з іншим набором оптимізацій також може змінити спостережувані результати "
"невизначеної поведінки."

msgid ""
"To enable the undefined behavior sanitizer in a Godot build, pass the "
"``use_ubsan=yes`` SCons option when compiling. Enabling UBSAN only has a "
"small performance overhead."
msgstr ""
"Щоб увімкнути засіб дезінфекції невизначеної поведінки в збірці Godot, "
"передайте параметр ``use_ubsan=yes`` SCons під час компіляції. Увімкнення "
"UBSAN має лише невеликі витрати на продуктивність."

msgid "Platform-specific sanitizers"
msgstr "Дезінфікуючі засоби для конкретної платформи"

msgid "Web"
msgstr "Інтернет"

msgid ""
"When :ref:`compiling for the Web <doc_compiling_for_web>`, there are 2 "
"additional sanitizer SCons options available:"
msgstr ""
"Під час :ref:`компіляції для Інтернету <doc_compiling_for_web>` доступні 2 "
"додаткові опції дезінфекції SCons:"

msgid ""
"``use_assertions=yes`` enables runtime Emscripten assertions, which can "
"catch various issues."
msgstr ""
"``use_assertions=yes`` вмикає твердження Emscripten під час виконання, які "
"можуть виявляти різні проблеми."

msgid ""
"``use_safe_heap=yes`` enables `Emscripten's SAFE_HEAP sanitizer <https://"
"emscripten.org/docs/debugging/Sanitizers.html>`__. It provides similar "
"functionality to ASAN, but it focuses on issues that are specific to "
"WebAssembly. ``SAFE_HEAP`` is not guaranteed to be compatible with ASAN and "
"UBSAN in the same binary, so you may have to build it separately."
msgstr ""
"``use_safe_heap=yes`` вмикає `Sanitizer SAFE_HEAP від Emscripten <https://"
"emscripten.org/docs/debugging/Sanitizers.html>`__. Він надає "
"функціональність, схожу на ASAN, але зосереджується на проблемах, які є "
"специфічними для WebAssembly. ``SAFE_HEAP`` не гарантовано буде сумісний з "
"ASAN і UBSAN в одному двійковому файлі, тому вам, можливо, доведеться "
"створювати його окремо."
