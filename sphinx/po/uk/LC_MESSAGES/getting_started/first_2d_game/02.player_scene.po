#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "Створення сцени гравця"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""
"Підготувавши параметри проекта ми можемо почати працювати над персонажем, "
"керованим гравцем."

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"Перша сцена визначає об'єкт ``Player`` *(Гравець)*. Однією з переваг "
"створення окремої сцени гравця є те, що ми можемо протестувати її окремо, ще "
"до того, як створили інші частини гри."

msgid "Node structure"
msgstr "Структура вузлів"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. In the upper-left corner, in the \"Scene\" tab, "
"click the \"Other Node\" button and add an :ref:`Area2D <class_Area2D>` node "
"to the scene."
msgstr ""
"Для початку нам потрібно вибрати кореневий вузол для об’єкта гравця. Як "
"правило, кореневий вузол сцени повинен відображати бажану функціональність "
"об'єкта - те, що об'єкт *є*. У верхньому лівому кутку на вкладці «Сцена» "
"натисніть кнопку «Інший вузол» і додайте до сцени вузол :ref:`Area2D "
"<class_Area2D>`."

msgid ""
"When you add the ``Area2D`` node, Godot will display the following **warning "
"icon** next to it in the scene tree:"
msgstr ""
"Коли ви додаєте вузол ``Area2D``, Godot відображатиме такий **піктограму "
"попередження** поруч із ним у дереві сцени:"

msgid ""
"This warning tells us that the ``Area2D`` node requires a shape to detect "
"collisions or overlaps. We can **ignore the warning temporarily** because we "
"will first set up the player's visuals (using an animated sprite). Once the "
"visuals are ready, we will add a collision shape as a child node. This will "
"allow us to accurately size and position the shape based on the sprite's "
"appearance."
msgstr ""
"Це попередження повідомляє нам, що для вузла ``Area2D`` потрібна форма для "
"виявлення зіткнень або накладень. Ми можемо **тимчасово ігнорувати "
"попередження**, оскільки спочатку налаштуємо візуальні ефекти гравця (за "
"допомогою анімованого спрайту). Коли візуальні елементи будуть готові, ми "
"додамо форму зіткнення як дочірній вузол. Це дозволить нам точно визначити "
"розмір і положення форми на основі зовнішнього вигляду спрайту."

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"За допомогою ``Area2D`` ми можемо виявляти об'єкти, які перекривають або "
"стикаються з гравцем. Змініть ім'я вузла на ``Player``, двічі клацнувши по "
"ньому. Тепер, коли ми встановили кореневий вузол сцени, ми можемо додавати "
"додаткові вузли, щоб додати більше функціоналу."

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock. Its tooltip says \"Groups the "
"selected node with its children. This causes the parent to be selected when "
"any child node is clicked in 2D and 3D view.\""
msgstr ""
"Перш ніж додати будь-яких дочірніх елементів до вузла ``Програвач``, ми "
"хочемо переконатися, що ми випадково не перемістимо або не змінимо їх "
"розмір, натиснувши на них. Виберіть вузол і натисніть значок праворуч від "
"замка. Його спливаюча підказка говорить: «Групує вибраний вузол із його "
"дочірніми елементами. Це призводить до вибору батьківського вузла, коли "
"клацнути будь-який дочірній вузол у 2D- і 3D-перегляді»"

msgid ""
"Save the scene as ``player.tscn``. Click **Scene > Save**, or "
"press :kbd:`Ctrl + S` on Windows/Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"Збережіть сцену як ``player.tscn``. Натисніть **Сцена > Зберегти** або "
"натисніть :kbd:`Ctrl + S` у Windows/Linux або :kbd:`Cmd + S` у macOS."

msgid "For this project, we will be following the Godot naming conventions."
msgstr "У цьому проєкті ми будемо дотримуватися правил іменування Godot."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: Класи (вузли) використовують PascalCase, змінні та функції "
"використовують snake_case, а константи використовують ALL_CAPS "
"(Дивіться :ref:`doc_gdscript_styleguide` )."

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase "
"(See :ref:`doc_c_sharp_styleguide`). Be careful to type the method names "
"precisely when connecting signals."
msgstr ""
"**C#**: Класи, експортовані змінні та методи використовують PascalCase, "
"приватні поля використовують _camelCase, локальні змінні та параметри "
"використовують camelCase (Дивіться :ref:`doc_c_sharp_styleguide` ). Будьте "
"обережні, вводячи назви методів саме під час підключення сигналів."

msgid "Sprite animation"
msgstr "Анімація спрайта"

msgid ""
"Click on the ``Player`` node and add (:kbd:`Ctrl + A` on Windows/Linux "
"or :kbd:`Cmd + A` on macOS) a child node :ref:`AnimatedSprite2D "
"<class_AnimatedSprite2D>`. The ``AnimatedSprite2D`` will handle the "
"appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite2D`` requires "
"a :ref:`SpriteFrames <class_SpriteFrames>` resource, which is a list of the "
"animations it can display. Make sure ``AnimatedSprite2D`` is selected and "
"then find the ``Sprite Frames`` property under the ``Animation`` section in "
"the Inspector and click \"[empty]\" -> \"New SpriteFrames\":"
msgstr ""
"Клацніть вузол ``Програвач`` і додайте (:kbd:`Ctrl + A` в Windows/Linux "
"або :kbd:`Cmd + A` в macOS) дочірній вузол :ref:`AnimatedSprite2D "
"<class_AnimatedSprite2D>`. ``AnimatedSprite2D`` керуватиме зовнішнім "
"виглядом і анімацією для нашого гравця. Зверніть увагу, що поруч із вузлом є "
"попереджувальний символ. Для ``AnimatedSprite2D`` потрібен "
"ресурс :ref:`SpriteFrames <class_SpriteFrames>`, який є списком анімацій, "
"які він може відображати. Переконайтеся, що вибрано ``AnimatedSprite2D``, а "
"потім знайдіть властивість ``Sprite Frames`` у розділі ``Animation`` в "
"інспекторі та натисніть «[empty]» -> «New SpriteFrames»:"

msgid ""
"Click on the ``SpriteFrames`` you just created to open the \"SpriteFrames\" "
"panel:"
msgstr ""
"Клацніть ``SpriteFrames``, який ви щойно створили, щоб відкрити панель "
"«SpriteFrames»:"

msgid ""
"On the left is a list of animations. Click the ``default`` one and rename it "
"to ``walk``. Then click the **Add Animation** button to create a second "
"animation named ``up``."
msgstr ""
"Зліва знаходиться список анімацій. Клацніть ``стандартний`` і перейменуйте "
"його на ``прогулянка``. Потім натисніть кнопку **Додати анімацію**, щоб "
"створити другу анімацію під назвою ``up``."

msgid ""
"Find the player images in the FileSystem dock - they're in the ``art`` "
"folder you unzipped earlier. Drag the two images for each animation, into "
"the **Animation Frames** side of the panel for the corresponding animation:"
msgstr ""
"Знайдіть зображення програвача в док-станції FileSystem - вони знаходяться в "
"папці ``art``, яку ви розпакували раніше. Перетягніть два зображення для "
"кожної анімації в **Кадри анімації** на панелі для відповідної анімації:"

msgid ""
"``playerGrey_walk1`` and ``playerGrey_walk2`` for the ``walk`` animation"
msgstr "``playerGrey_walk1`` і ``playerGrey_walk2`` для анімації ``walk``"

msgid "``playerGrey_up1`` and ``playerGrey_up2`` for the ``up`` animation"
msgstr "``playerGrey_up1`` і ``playerGrey_up2`` для анімації ``up``"

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite2D`` node and set the "
"``Scale`` property to ``(0.5, 0.5)``. You can find it in the Inspector under "
"the ``Node2D`` heading."
msgstr ""
"Зображення гравця трохи завеликі для вікна гри, тому нам потрібно їх "
"зменшити. Клацніть на вузлі ``AnimatedSprite2D`` та встановіть властивість "
"``Scale`` *(Масштаб)* на ``(0.5, 0.5)``. Ви можете знайти її в Інспекторі "
"під заголовком ``Node2D``."

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\" -> \"New "
"CapsuleShape2D\". Using the two size handles, resize the shape to cover the "
"sprite:"
msgstr ""
"Нарешті створіть ще одного нащадка ``Player``, "
"додайте :ref:`CollisionShape2D <class_CollisionShape2D>` *(Форма межі "
"зіткнень)*. Він визначатиме \"коробку чутливості\" гравця, або межі його "
"зони зіткнення. Для цього персонажа найкраще підходить вузол "
"``CapsuleShape2D`` *(Форма 2D капсули)*, тому поруч із пунктом \"Shape\" "
"(\"Форма\") в Інспекторі натисніть \"[порожній]\" \"->\" Нова CapsuleShape2D "
"\". Використовуючи дві ручки розмірів, змініть розмір форми, щоб покрити "
"спрайт:"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "Коли ви закінчите, ваша сцена ``Player`` повинна виглядати так:"

msgid ""
"Once this is done, the warning on the ``Area2D`` node will disappear, as it "
"now has a shape assigned and can interact with other objects."
msgstr ""
"Щойно це буде зроблено, попередження на вузлі ``Area2D`` зникне, оскільки "
"тепер йому призначено форму та він може взаємодіяти з іншими об’єктами."

msgid "Make sure to save the scene again after these changes."
msgstr "Не забудьте зберегти сцену знову після цих змін."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"У наступній частині ми додамо скрипт до вузла гравця для переміщення та "
"анімації. Потім ми налаштуємо виявлення зіткнень, щоб знати, коли гравець "
"зіткнувся з чимось."
