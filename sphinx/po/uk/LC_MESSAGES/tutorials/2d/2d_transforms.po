#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Viewport and canvas transforms"
msgstr "Перетворення вікна перегляду та полотна"

msgid "Introduction"
msgstr "Вступ"

msgid ""
"This is an overview of the 2D transforms going on for nodes from the moment "
"they draw their content locally to the time they are drawn onto the screen. "
"This overview discusses very low level details of the engine."
msgstr ""
"Це огляд 2D-перетворень, що відбуваються з вузлами від моменту, коли вони "
"малюють свій вміст локально, до того часу, коли вони потрапляють на екран. У "
"цьому огляді розглядаються деталі движка на дуже низькому рівні."

msgid "Canvas transform"
msgstr "Перетворення полотна"

msgid ""
"As mentioned in the previous tutorial, :ref:`doc_canvas_layers`, every "
"CanvasItem node (remember that Node2D and Control based nodes use CanvasItem "
"as their common root) will reside in a *Canvas Layer*. Every canvas layer "
"has a transform (translation, rotation, scale, etc.) that can be accessed as "
"a :ref:`Transform2D <class_Transform2D>`."
msgstr ""
"Як уже згадувалося в попередньому посібнику :ref:`doc_canvas_layers`, кожен "
"вузол CanvasItem (пам’ятайте, що вузли на основі Node2D та Control "
"використовують CanvasItem як загальний корінь) буде знаходитись у *Шарі "
"Полотна*. Кожен шар полотна має перетворення (переміщення, обертання, "
"масштаб тощо), до якого можна отримати доступ як :ref:`Transform2D "
"<class_Transform2D>`."

msgid ""
"Also covered in the previous tutorial, nodes are drawn by default in Layer "
"0, in the built-in canvas. To put nodes in a different layer, a :ref:"
"`CanvasLayer <class_CanvasLayer>` node can be used."
msgstr ""
"Також в попередньому посібнику говорилося, що вузли за замовчуванням "
"малюються на рівні 0 на вбудованому полотні. Щоб розмістити вузли в іншому "
"шарі, можна використовувати вузол :ref:`CanvasLayer (Полотняні "
"Шари)<class_CanvasLayer>`."

msgid "Global canvas transform"
msgstr "Глобальне перетворення полотна"

msgid "Stretch transform"
msgstr "Перетворення розтягування"

msgid ""
"Finally, viewports have a *Stretch Transform*, which is used when resizing "
"or stretching the screen. This transform is used internally (as described "
"in :ref:`doc_multiple_resolutions`), but can also be manually set on each "
"viewport."
msgstr ""
"Нарешті, у вікна перегляду є *Перетворення Розтягування*, яке "
"використовується при зміні розміру або розтягуванні екрана. Це перетворення "
"використовується внутрішньо (як описано в розділі :ref:"
"`doc_multiple_resolutions`), але його також можна встановити вручну для "
"кожного вікна перегляду."

msgid "Transform order"
msgstr "Порядок перетворень"

msgid "Transform functions"
msgstr "Функції перетворення"

msgid ""
"Finally, then, to convert a CanvasItem local coordinates to screen "
"coordinates, just multiply in the following order:"
msgstr ""
"Нарешті, щоб перетворити локальні координати CanvasItem на екранні "
"координати, просто помножте їх у наступному порядку:"

msgid ""
"Keep in mind, however, that it is generally not desired to work with screen "
"coordinates. The recommended approach is to simply work in Canvas "
"coordinates (``CanvasItem.get_global_transform()``), to allow automatic "
"screen resolution resizing to work properly."
msgstr ""
"Однак майте на увазі, що, як правило, не бажано працювати з координатами "
"екрану. Рекомендований підхід полягає в тому, щоб просто працювати в "
"координатах Полотна (``CanvasItem.get_global_transform()``), щоб дозволити "
"автоматичній зміні розміру роздільної здатності екрана працювати належним "
"чином."

msgid "Feeding custom input events"
msgstr "Подача власних подій введення"

msgid "Translation status"
msgstr "Стан перекладу"
