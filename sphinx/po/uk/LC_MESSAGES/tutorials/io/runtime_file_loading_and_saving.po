#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Runtime file loading and saving"
msgstr "Завантаження та збереження виконавчого файлу"

msgid ""
"See :ref:`doc_saving_games` for information on saving and loading game "
"progression."
msgstr ""
"Перегляньте :ref:`doc_saving_games` для отримання інформації про збереження "
"та завантаження прогресу гри."

msgid ""
"Sometimes, :ref:`exporting packs, patches, and mods <doc_exporting_pcks>` is "
"not ideal when you want players to be able to load user-generated content in "
"your project. It requires users to generate a PCK or ZIP file through the "
"Godot editor, which contains resources imported by Godot."
msgstr ""
"Іноді :ref:`експорт пакетів, патчів і модів <doc_exporting_pcks>` не "
"ідеальний, якщо ви хочете, щоб гравці могли завантажувати створений "
"користувачем вміст у вашому проекті. Він вимагає від користувачів створити "
"файл PCK або ZIP через редактор Godot, який містить ресурси, імпортовані "
"Godot."

msgid "Example use cases for runtime file loading and saving include:"
msgstr ""
"Приклади використання для завантаження та збереження файлів під час "
"виконання включають:"

msgid "Loading texture packs designed for the game."
msgstr "Завантаження текстурних пакетів, розроблених для гри."

msgid ""
"Loading user-provided audio tracks and playing them back in an in-game radio "
"station."
msgstr ""
"Завантаження звукових доріжок, наданих користувачем, і їх відтворення на "
"ігровій радіостанції."

msgid ""
"Loading custom levels or 3D models that can be designed with any 3D DCC that "
"can export to glTF (including glTF scenes saved by Godot at runtime)."
msgstr ""
"Завантаження користувацьких рівнів або 3D-моделей, які можна спроектувати за "
"допомогою будь-якого 3D DCC, який можна експортувати в glTF (включаючи сцени "
"glTF, збережені Godot під час виконання)."

msgid "Using user-provided fonts for menus and HUD."
msgstr "Використання наданих користувачами шрифтів для меню та HUD."

msgid ""
"Saving/loading a file format that can contain multiple files but can still "
"easily be read by other applications (ZIP)."
msgstr ""
"Збереження/завантаження файлу у форматі, який може містити декілька файлів, "
"але його легко читати іншими програмами (ZIP)."

msgid ""
"Loading files created by another game or program, or even game data files "
"from another game not made with Godot."
msgstr ""
"Завантаження файлів, створених іншою грою чи програмою, або навіть файлів "
"даних гри з іншої гри, створеної не за допомогою Godot."

msgid ""
"Runtime file loading can be combined with :ref:`HTTP requests "
"<doc_http_request_class>` to load resources from the Internet directly."
msgstr ""
"Завантаження файлів під час виконання можна поєднати з :ref:`HTTP-запитами "
"<doc_http_request_class>` для безпосереднього завантаження ресурсів з "
"Інтернету."

msgid ""
"Do **not** use this runtime loading approach to load resources that are part "
"of the project, as it's less efficient and doesn't allow benefiting from "
"Godot's resource handling functionality (such as translation remaps). See :"
"ref:`doc_import_process` for details."
msgstr ""
"**Не** використовуйте цей підхід до завантаження під час виконання, щоб "
"завантажувати ресурси, які є частиною проекту, оскільки він менш ефективний "
"і не дозволяє отримати вигоду від функцій обробки ресурсів Godot (наприклад, "
"перевідображення перекладу). Докладніше див. :ref:`doc_import_process`."

msgid ""
"You can see how saving and loading works in action using the `Run-time File "
"Saving and Loading (Serialization) demo project <https://github.com/"
"godotengine/godot-demo-projects/blob/master/loading/runtime_save_load>`__."
msgstr ""
"Ви можете побачити, як збереження та завантаження працює в дії, "
"використовуючи демонстраційний проект «Збереження та завантаження файлів під "
"час виконання `(серіалізація)» <https://github.com/godotengine/godot-demo-"
"projects/blob/master/loading/runtime_save_load> `__."

msgid "Plain text and binary files"
msgstr "Звичайний текст і двійкові файли"

msgid ""
"Godot's :ref:`class_FileAccess` class provides methods to access files on "
"the filesystem for reading and writing:"
msgstr ""
"Клас Godot :ref:`class_FileAccess` надає методи доступу до файлів у файловій "
"системі для читання та запису:"

msgid ""
"To handle custom binary formats (such as loading file formats not supported "
"by Godot), :ref:`class_FileAccess` provides several methods to read/write "
"integers, floats, strings and more. These FileAccess methods have names that "
"start with ``get_`` and ``store_``."
msgstr ""
"Для роботи з власними двійковими форматами (наприклад, завантаження форматів "
"файлів, які не підтримуються Godot), :ref:`class_FileAccess` надає кілька "
"методів для читання/запису цілих чисел, чисел з плаваючою точкою, рядків "
"тощо. Ці методи FileAccess мають імена, які починаються з ``get_`` і "
"``store_``."

msgid ""
"If you need more control over reading binary files or need to read binary "
"streams that are not part of a file, :ref:`class_PackedByteArray` provides "
"several helper methods to decode/encode series of bytes to integers, floats, "
"strings and more. These PackedByteArray methods have names that start with "
"``decode_`` and ``encode_``. See also :ref:`doc_binary_serialization_api`."
msgstr ""
"Якщо вам потрібно більше контролювати читання двійкових файлів або потрібно "
"читати двійкові потоки, які не є частиною файлу, :ref:"
"`class_PackedByteArray` надає кілька допоміжних методів для декодування/"
"кодування серії байтів у цілі числа, числа з плаваючою точкою, рядки тощо. "
"Ці методи PackedByteArray мають імена, які починаються з ``decode_`` і "
"``encode_``. Дивіться також :ref:`doc_binary_serialization_api`."

msgid "Images"
msgstr "Зображення"

msgid ""
"Image's :ref:`Image.load_from_file <class_Image_method_load_from_file>` "
"static method handles everything, from format detection based on file "
"extension to reading the file from disk."
msgstr ""
"Статичний метод :ref:`Image.load_from_file "
"<class_Image_method_load_from_file>` обробляє все, від визначення формату на "
"основі розширення файлу до читання файлу з диска."

msgid ""
"If you need error handling or more control (such as changing the scale an "
"SVG is loaded at), use one of the following methods depending on the file "
"format:"
msgstr ""
"Якщо вам потрібна обробка помилок або більше контролю (наприклад, зміна "
"масштабу завантаження SVG), скористайтеся одним із наведених нижче методів "
"залежно від формату файлу:"

msgid ""
":ref:`Image.load_jpg_from_buffer <class_Image_method_load_jpg_from_buffer>`"
msgstr ""
":ref:`Image.load_jpg_from_buffer <class_Image_method_load_jpg_from_buffer>`"

msgid ""
":ref:`Image.load_ktx_from_buffer <class_Image_method_load_ktx_from_buffer>`"
msgstr ""
":ref:`Image.load_ktx_from_buffer <class_Image_method_load_ktx_from_buffer>`"

msgid ""
":ref:`Image.load_png_from_buffer <class_Image_method_load_png_from_buffer>`"
msgstr ""
":ref:`Image.load_png_from_buffer <class_Image_method_load_png_from_buffer>`"

msgid ""
":ref:`Image.load_svg_from_buffer <class_Image_method_load_svg_from_buffer>` "
"or :ref:`Image.load_svg_from_string "
"<class_Image_method_load_svg_from_string>`"
msgstr ""
":ref:`Image.load_svg_from_buffer <class_Image_method_load_svg_from_buffer>` "
"або :ref:`Image.load_svg_from_string "
"<class_Image_method_load_svg_from_string>`"

msgid ""
":ref:`Image.load_tga_from_buffer <class_Image_method_load_tga_from_buffer>`"
msgstr ""
":ref:`Image.load_tga_from_buffer <class_Image_method_load_tga_from_buffer>`"

msgid ""
":ref:`Image.load_webp_from_buffer <class_Image_method_load_webp_from_buffer>`"
msgstr ""
":ref:`Image.load_webp_from_buffer <class_Image_method_load_webp_from_buffer>`"

msgid ""
"Several image formats can also be saved by Godot at runtime using the "
"following methods:"
msgstr ""
"Кілька форматів зображень також можна зберегти Godot під час виконання за "
"допомогою таких методів:"

msgid ""
":ref:`Image.save_png <class_Image_method_save_png>` or :ref:`Image."
"save_png_to_buffer <class_Image_method_save_png_to_buffer>`"
msgstr ""
":ref:`Image.save_png <class_Image_method_save_png>` або :ref:`Image."
"save_png_to_buffer <class_Image_method_save_png_to_buffer>`"

msgid ""
":ref:`Image.save_webp <class_Image_method_save_webp>` or :ref:`Image."
"save_webp_to_buffer <class_Image_method_save_webp_to_buffer>`"
msgstr ""
":ref:`Image.save_webp <class_Image_method_save_webp>` або :ref:`Image."
"save_webp_to_buffer <class_Image_method_save_webp_to_buffer>`"

msgid ""
":ref:`Image.save_jpg <class_Image_method_save_jpg>` or :ref:`Image."
"save_jpg_to_buffer <class_Image_method_save_jpg_to_buffer>`"
msgstr ""
":ref:`Image.save_jpg <class_Image_method_save_jpg>` або :ref:`Image."
"save_jpg_to_buffer <class_Image_method_save_jpg_to_buffer>`"

msgid ""
":ref:`Image.save_exr <class_Image_method_save_exr>` or :ref:`Image."
"save_exr_to_buffer <class_Image_method_save_exr_to_buffer>` *(only available "
"in editor builds, cannot be used in exported projects)*"
msgstr ""
":ref:`Image.save_exr <class_Image_method_save_exr>` або :ref:`Image."
"save_exr_to_buffer <class_Image_method_save_exr_to_buffer>` *(доступно лише "
"в збірках редакторів, не можна використовувати в експортованих проектах)*"

msgid ""
"The methods with the ``to_buffer`` suffix save the image to a "
"PackedByteArray instead of the filesystem. This is useful to send the image "
"over the network or into a ZIP archive without having to write it on the "
"filesystem. This can increase performance by reducing I/O utilization."
msgstr ""
"Методи з суфіксом ``to_buffer`` зберігають зображення в PackedByteArray "
"замість файлової системи. Це корисно, щоб надіслати зображення через мережу "
"або в ZIP-архів без необхідності записувати його у файлову систему. Це може "
"збільшити продуктивність за рахунок зменшення використання вводу-виводу."

msgid ""
"If displaying the loaded image on a 3D surface, make sure to call :ref:"
"`Image.generate_mipmaps <class_Image_method_generate_mipmaps>` so that the "
"texture doesn't look grainy when viewed at a distance. This is also useful "
"in 2D when following instructions on :ref:`reducing aliasing when "
"downsampling <doc_multiple_resolutions_reducing_aliasing_on_downsampling>`."
msgstr ""
"У разі відображення завантаженого зображення на 3D-поверхні обов’язково "
"викликайте :ref:`Image.generate_mipmaps "
"<class_Image_method_generate_mipmaps>`, щоб текстура не виглядала зернистою "
"при перегляді з відстані. Це також корисно в 2D, якщо слідувати інструкціям "
"щодо :ref:`зменшення псевдонімів при зниженні дискретизації "
"<doc_multiple_resolutions_reducing_aliasing_on_downsampling>`."

msgid ""
"Example of loading an image and displaying it in a :ref:`class_TextureRect` "
"node (which requires conversion to :ref:`class_ImageTexture`):"
msgstr ""
"Приклад завантаження зображення та його відображення у вузлі :ref:"
"`class_TextureRect` (який вимагає перетворення на :ref:`class_ImageTexture`):"

msgid "Audio/video files"
msgstr "Аудіо/відео файли"

msgid ""
"Godot supports loading Ogg Vorbis audio at runtime. Note that not *all* "
"files with an ``.ogg`` extension may be Ogg Vorbis files. Some may be Ogg "
"Theora videos, or contain Opus audio within an Ogg container. These files "
"will **not** load correctly as audio files in Godot."
msgstr ""
"Godot підтримує завантаження аудіо Ogg Vorbis під час виконання. Зауважте, "
"що *не всі* файли з розширенням ``.ogg`` можуть бути файлами Ogg Vorbis. "
"Деякі з них можуть бути відео Ogg Theora або містити аудіо Opus у контейнері "
"Ogg. Ці файли **не** правильно завантажуватимуться як аудіофайли в Godot."

msgid ""
"Example of loading an Ogg Vorbis audio file in an :ref:"
"`class_AudioStreamPlayer` node:"
msgstr ""
"Приклад завантаження аудіофайлу Ogg Vorbis у вузлі :ref:"
"`class_AudioStreamPlayer`:"

msgid ""
"Example of loading an Ogg Theora video file in a :ref:"
"`class_VideoStreamPlayer` node:"
msgstr ""
"Приклад завантаження відеофайлу Ogg Theora у вузол :ref:"
"`class_VideoStreamPlayer`:"

msgid ""
"Godot doesn't support runtime loading of MP3 or WAV files yet. Until this is "
"implemented, it's feasible to implement runtime WAV loading using a script "
"since :ref:`class_AudioStreamWAV`'s ``data`` property is exposed to "
"scripting."
msgstr ""
"Godot ще не підтримує завантаження файлів MP3 або WAV під час виконання. "
"Поки це не реалізовано, можливо реалізувати завантаження WAV під час "
"виконання за допомогою сценарію :ref:`class_AudioStreamWAV`'s ``data`` "
"властивість піддається сценарію."

msgid ""
"It's still possible to *save* WAV files using :ref:`AudioStreamWAV."
"save_to_wav <class_AudioStreamWAV_method_save_to_wav>`, which is useful for "
"procedurally generated audio or microphone recordings."
msgstr ""
"Все ще можна *зберігати* WAV-файли за допомогою :ref:`AudioStreamWAV."
"save_to_wav <class_AudioStreamWAV_method_save_to_wav>`, який корисний для "
"процедурно згенерованих аудіо або записів мікрофона."

msgid "3D scenes"
msgstr "3D сцени"

msgid ""
"Godot has first-class support for glTF 2.0, both in the editor and exported "
"projects. Using :ref:`class_gltfdocument` and :ref:`class_gltfstate` "
"together, Godot can load and save glTF files in exported projects, in both "
"text (``.gltf``) and binary (``.glb``) formats. The binary format should be "
"preferred as it's faster to write and smaller, but the text format is easier "
"to debug."
msgstr ""
"Godot має першокласну підтримку glTF 2.0 як у редакторі, так і в "
"експортованих проектах. Використовуючи разом :ref:`class_gltfdocument` і :"
"ref:`class_gltfstate`, Godot може завантажувати та зберігати файли glTF в "
"експортованих проектах як у текстовому (``.gltf``), так і в двійковому (``."
"glb``) форматах. Слід віддати перевагу двійковому формату, оскільки він "
"швидший для запису та менший, але текстовий формат легше налагодити."

msgid ""
"Example of loading a glTF scene and appending its root node to the scene:"
msgstr ""
"Приклад завантаження сцени glTF і додавання її кореневого вузла до сцени:"

msgid ""
"When loading a glTF scene, a *base path* must be set so that external "
"resources like textures can be loaded correctly. When loading from a file, "
"the base path is automatically set to the folder containing the file. When "
"loading from a buffer, this base path must be manually set as there is no "
"way for Godot to infer this path."
msgstr ""
"Під час завантаження сцени glTF потрібно встановити *базовий шлях*, щоб "
"зовнішні ресурси, такі як текстури, могли завантажуватися правильно. Під час "
"завантаження з файлу основний шлях автоматично встановлюється до папки, що "
"містить файл. Під час завантаження з буфера цей базовий шлях потрібно "
"встановити вручну, оскільки Годо не може визначити цей шлях."

msgid ""
"To set the base path, set :ref:`GLTFState.base_path "
"<class_GLTFState_property_base_path>` on your GLTFState instance *before* "
"calling :ref:`GLTFDocument.append_from_buffer "
"<class_GLTFDocument_method_append_from_buffer>` or :ref:`GLTFDocument."
"append_from_file <class_GLTFDocument_method_append_from_file>`."
msgstr ""
"Щоб встановити базовий шлях, установіть :ref:`GLTFState.base_path "
"<class_GLTFState_property_base_path>` на вашому екземплярі GLTFState *перед* "
"викликом :ref:`GLTFDocument.append_from_buffer "
"<class_GLTFDocument_method_append_from_buffer>` або :ref:`GLTFDocument."
"append_from_file <class_GLTFDocument_method_append_from_file>`."

msgid "Fonts"
msgstr "Шрифти"

msgid ""
":ref:`FontFile.load_dynamic_font <class_FontFile_method_load_bitmap_font>` "
"supports the following font file formats: TTF, OTF, WOFF, WOFF2, PFB, PFM"
msgstr ""
":ref:`FontFile.load_dynamic_font <class_FontFile_method_load_bitmap_font>` "
"підтримує такі формати файлів шрифтів: TTF, OTF, WOFF, WOFF2, PFB, PFM"

msgid ""
"On the other hand, :ref:`FontFile.load_bitmap_font "
"<class_FontFile_method_load_bitmap_font>` supports the `BMFont <https://www."
"angelcode.com/products/bmfont/>`__ format (``.fnt`` or ``.font``)."
msgstr ""
"З іншого боку, :ref:`FontFile.load_bitmap_font "
"<class_FontFile_method_load_bitmap_font>` підтримує формат `BMFont <https://"
"www.angelcode.com/products/bmfont/>`__ (``.fnt`` або ``. шрифт``)."

msgid ""
"Additionally, it is possible to load any font that is installed on the "
"system using Godot's support for :ref:`doc_using_fonts_system_fonts`."
msgstr ""
"Крім того, можна завантажити будь-який шрифт, встановлений у системі, "
"використовуючи підтримку Godot для :ref:`doc_using_fonts_system_fonts`."

msgid ""
"Example of loading a font file automatically according to its file "
"extension, then adding it as a theme override to a :ref:`class_Label` node:"
msgstr ""
"Приклад автоматичного завантаження файлу шрифту відповідно до його "
"розширення, а потім додавання його як перевизначення теми до вузла :ref:"
"`class_Label`:"

msgid "ZIP archives"
msgstr "ZIP архіви"

msgid ""
"Godot supports reading and writing ZIP archives using the :ref:"
"`class_zipreader` and :ref:`class_zippacker` classes. This supports any ZIP "
"file, including files generated by Godot's \"Export PCK/ZIP\" functionality "
"(although these will contain imported Godot resources rather than the "
"original project files)."
msgstr ""
"Godot підтримує читання та запис ZIP-архівів за допомогою класів :ref:"
"`class_zipreader` і :ref:`class_zippacker`. Це підтримує будь-який ZIP-файл, "
"включно з файлами, створеними за допомогою функції «Експорт PCK/ZIP» Godot "
"(хоча вони міститимуть імпортовані ресурси Godot, а не оригінальні файли "
"проекту)."

msgid ""
"Use :ref:`ProjectSettings.load_resource_pack "
"<class_ProjectSettings_method_load_resource_pack>` to load PCK or ZIP files "
"exported by Godot as :ref:`additional data packs <doc_exporting_pcks>`. That "
"approach is preferred for DLCs, as it makes interacting with additional data "
"packs seamless (virtual filesystem)."
msgstr ""
"Використовуйте :ref:`ProjectSettings.load_resource_pack "
"<class_ProjectSettings_method_load_resource_pack>`, щоб завантажити файли "
"PCK або ZIP, експортовані Godot як :ref:`додаткові пакети даних "
"<doc_exporting_pcks>`. Цей підхід є кращим для DLC, оскільки він забезпечує "
"безперебійну взаємодію з додатковими пакетами даних (віртуальна файлова "
"система)."

msgid ""
"This ZIP archive support can be combined with runtime image, 3D scene and "
"audio loading to provide a seamless modding experience without requiring "
"users to go through the Godot editor to generate PCK/ZIP files."
msgstr ""
"Цю підтримку архіву ZIP можна поєднати із завантаженням зображень під час "
"виконання, 3D-сцени та аудіо, щоб забезпечити бездоганний досвід моддингу, "
"не вимагаючи від користувачів проходити через редактор Godot для створення "
"файлів PCK/ZIP."

msgid ""
"Example that lists files in a ZIP archive in an :ref:`class_ItemList` node, "
"then writes contents read from it to a new ZIP archive (essentially "
"duplicating the archive):"
msgstr ""
"Приклад, який перераховує файли в ZIP-архіві у вузлі :ref:`class_ItemList`, "
"а потім записує прочитаний із нього вміст у новий ZIP-архів (по суті, "
"дублюючи архів):"
