#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the ArrayMesh"
msgstr "Використання ArrayMesh"

msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`."
msgstr "Цей урок дасть основи використання :ref:`ArrayMesh <class_arraymesh>`."

msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to five "
"parameters. The first two are required, while the last three are optional."
msgstr ""
"Для цього ми використаємо функцію :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, яка приймає до п’яти "
"параметрів. Перші два обов’язкові, а останні три необов’язкові."

msgid ""
"The first parameter is the ``PrimitiveType``, an OpenGL concept that "
"instructs the GPU how to arrange the primitive based on the vertices given, "
"i.e. whether they represent triangles, lines, points, etc. See :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` for the options available."
msgstr ""
"Перший параметр - ``PrimitiveType``, це концепція OpenGL, яка інструктує "
"графічний процесор, як розташувати примітив на основі вершин, враховуючи, чи "
"це трикутники, лінії, точки тощо. Повний список варіантів дивіться в :ref:"
"`Mesh.PrimitiveType <enum_Mesh_PrimitiveType>`."

msgid ""
"The second parameter, ``arrays``, is the actual Array that stores the mesh "
"information. The array is a normal Godot array that is constructed with "
"empty brackets ``[]``. It stores a ``Packed**Array`` (e.g. "
"PackedVector3Array, PackedInt32Array, etc.) for each type of information "
"that will be used to build the surface."
msgstr ""
"Другий параметр, ``arrays``, є фактичним масивом, який зберігає інформацію "
"про сітку. Масив є звичайним масивом Годо, який складається з порожніх дужок "
"``[]``. Він зберігає ``Packed**Array`` (наприклад, PackedVector3Array, "
"PackedInt32Array тощо) для кожного типу інформації, яка "
"використовуватиметься для створення поверхні."

msgid ""
"Common elements of ``arrays`` are listed below, together with the position "
"they must have within ``arrays``. See :ref:`Mesh.ArrayType "
"<enum_Mesh_ArrayType>` for a full list."
msgstr ""
"Загальні елементи ``масивів`` перераховані нижче разом із позицією, яку вони "
"повинні мати в ``масивах``. Див. :ref:`Mesh.ArrayType <enum_Mesh_ArrayType>` "
"для повного списку."

msgid "Index"
msgstr "Індекс"

msgid "Mesh.ArrayType Enum"
msgstr "Сітка.ТипМасиву.Enum"

msgid "Array type"
msgstr "Тип масиву"

msgid "0"
msgstr "0"

msgid "``ARRAY_VERTEX``"
msgstr "``ARRAY_VERTEX``"

msgid ""
":ref:`PackedVector3Array <class_PackedVector3Array>` or :ref:"
"`PackedVector2Array <class_PackedVector2Array>`"
msgstr ""
":ref:`PackedVector3Array <class_PackedVector3Array>` або :ref:"
"`PackedVector2Array <class_PackedVector2Array>`"

msgid "1"
msgstr "1"

msgid "``ARRAY_NORMAL``"
msgstr "``ARRAY_NORMAL``"

msgid ":ref:`PackedVector3Array <class_PackedVector3Array>`"
msgstr ":ref:`PackedVector3Array <class_PackedVector3Array>`"

msgid "2"
msgstr "2"

msgid "``ARRAY_TANGENT``"
msgstr "``ARRAY_TANGENT``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` or :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 floats. The "
"first 3 floats determine the tangent, and the last float the binormal "
"direction as -1 or 1."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` або :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` груп із 4 плаваючих "
"елементів. Перші 3 числа з плаваючою точкою визначають тангенс, а останні з "
"плаваючою точкою — бінормальний напрямок як -1 або 1."

msgid "3"
msgstr "3"

msgid "``ARRAY_COLOR``"
msgstr "``ARRAY_COLOR``"

msgid ":ref:`PackedColorArray <class_PackedColorArray>`"
msgstr ":ref:`PackedColorArray <class_PackedColorArray>`"

msgid "4"
msgstr "4"

msgid "``ARRAY_TEX_UV``"
msgstr "``ARRAY_TEX_UV``"

msgid ""
":ref:`PackedVector2Array <class_PackedVector2Array>` or :ref:"
"`PackedVector3Array <class_PackedVector3Array>`"
msgstr ""
":ref:`PackedVector2Array <class_PackedVector2Array>` або :ref:"
"`PackedVector3Array <class_PackedVector3Array>`"

msgid "5"
msgstr "5"

msgid "``ARRAY_TEX_UV2``"
msgstr "``ARRAY_TEX_UV2``"

msgid "10"
msgstr "10"

msgid "``ARRAY_BONES``"
msgstr "``ARRAY_BONES``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` of groups of 4 floats "
"or :ref:`PackedInt32Array <class_PackedInt32Array>` of groups of 4 ints. "
"Each group lists indexes of 4 bones that affects a given vertex."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` груп з 4 чисел або :ref:"
"`PackedInt32Array <class_PackedInt32Array>` груп з 4 int. Кожна група "
"містить індекси 4 кісток, які впливають на дану вершину."

msgid "11"
msgstr "11"

msgid "``ARRAY_WEIGHTS``"
msgstr "``ARRAY_WEIGHTS``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` or :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 floats. Each "
"float lists the amount of weight the corresponding bone in ``ARRAY_BONES`` "
"has on a given vertex."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` або :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` груп із 4 плаваючих "
"елементів. Кожен float перераховує кількість ваги відповідної кістки в "
"``ARRAY_BONES`` на даній вершині."

msgid "12"
msgstr "12"

msgid "``ARRAY_INDEX``"
msgstr "``ARRAY_INDEX``"

msgid ":ref:`PackedInt32Array <class_PackedInt32Array>`"
msgstr ":ref:`PackedInt32Array <class_PackedInt32Array>`"

msgid ""
"In most cases when creating a mesh, we define it by its vertex positions. So "
"usually, the array of vertices (at index 0) is required, while the index "
"array (at index 12) is optional and will only be used if included. It is "
"also possible to create a mesh with only the index array and no vertex "
"array, but that's beyond the scope of this tutorial."
msgstr ""
"У більшості випадків при створенні сітки ми визначаємо її положенням вершин. "
"Тому зазвичай масив вершин (з індексом 0) є обов’язковим, тоді як масив "
"індексів (з індексом 12) необов’язковий і використовуватиметься, лише якщо "
"він включений. Також можна створити сітку лише з масивом індексів і без "
"масиву вершин, але це виходить за рамки цього підручника."

msgid ""
"All the other arrays carry information about the vertices. They are optional "
"and will only be used if included. Some of these arrays (e.g. "
"``ARRAY_COLOR``) use one entry per vertex to provide extra information about "
"vertices. They must have the same size as the vertex array. Other arrays (e."
"g. ``ARRAY_TANGENT``) use four entries to describe a single vertex. These "
"must be exactly four times larger than the vertex array."
msgstr ""
"Всі інші масиви несуть інформацію про вершини. Вони є необов’язковими та "
"використовуватимуться, лише якщо включені. Деякі з цих масивів (наприклад, "
"``ARRAY_COLOR``) використовують один запис на вершину для надання додаткової "
"інформації про вершини. Вони повинні мати той самий розмір, що й масив "
"вершин Інші масиви (наприклад, ``ARRAY_TANGENT``) використовують чотири "
"записи для опису однієї вершини. Вони повинні бути точно в чотири рази "
"більші за масив вершин."

msgid ""
"For normal usage, the last three parameters in :ref:"
"`add_surface_from_arrays() <class_arraymesh_method_add_surface_from_arrays>` "
"are typically left empty."
msgstr ""
"Для нормального використання останні три параметри в :ref:"
"`add_surface_from_arrays() <class_arraymesh_method_add_surface_from_arrays>` "
"зазвичай залишаються порожніми."

msgid "Setting up the ArrayMesh"
msgstr "Налаштування ArrayMesh"

msgid ""
"In the editor, create a :ref:`MeshInstance3D <class_meshinstance3d>` and add "
"an :ref:`ArrayMesh <class_arraymesh>` to it in the Inspector. Normally, "
"adding an ArrayMesh in the editor is not useful, but in this case it allows "
"us to access the ArrayMesh from code without creating one."
msgstr ""
"У редакторі створіть :ref:`MeshInstance3D <class_meshinstance3d>` і додайте "
"до нього :ref:`ArrayMesh <class_arraymesh>` в інспекторі. Зазвичай додавання "
"ArrayMesh у редакторі не є корисним, але в цьому випадку це дозволяє "
"отримати доступ до ArrayMesh із коду, не створюючи його."

msgid "Next, add a script to the MeshInstance3D."
msgstr "Далі додайте сценарій до MeshInstance3D."

msgid "Under ``_ready()``, create a new Array."
msgstr "Під ``_ready()`` створіть новий масив."

msgid ""
"This will be the array that we keep our surface information in - it will "
"hold all the arrays of data that the surface needs. Godot will expect it to "
"be of size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""
"Це буде масив, в якому ми зберігаємо інформацію про нашу поверхню, він буде "
"містити всі масиви даних, які потрібні поверхні. Godot очікує, що він буде "
"розміром з ``Mesh.ARRAY_MAX``, тому змініть його відповідно."

msgid "Next create the arrays for each data type you will use."
msgstr ""
"Далі створіть масиви для кожного типу даних, які ви будете використовувати."

msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""
"Після того, як ви заповнили свої масиви даних геометрією, ви можете створити "
"меш, додавши кожен масив до ``surface_array`` *(масиву поверхні)*."

msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""
"У цьому прикладі ми використовували ``Mesh.PRIMITIVE_TRIANGLES``, але ви "
"можете використовувати будь-який тип примітиву, доступний для меша."

msgid "Put together, the full code looks like:"
msgstr "В сукупності повний код виглядає так:"

msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code for generating a sphere."
msgstr ""
"Код в середині, може бути інший, залежно від вашого бажання. Нижче ми "
"наведемо кілька прикладів коду для генерування сфери."

msgid "Generating geometry"
msgstr "Генерування геометрії"

msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""
"Ось зразок коду для створення сфери. Хоча код представлений в GDScript, "
"немає нічого специфічного для Godot в підході до його створення. Ця "
"реалізація не має нічого спільного з ArrayMesh-ами і є лише загальним "
"підходом до створення сфери. Якщо у вас виникли проблеми з розумінням, або "
"ви хочете дізнатися більше про процедурну геометрію, ви можете "
"використовувати будь-який урок, який знайдете в Інтернеті."

msgid "Saving"
msgstr "Збереження"

msgid ""
"Finally, we can use the :ref:`ResourceSaver <class_resourcesaver>` class to "
"save the ArrayMesh. This is useful when you want to generate a mesh and then "
"use it later without having to re-generate it."
msgstr ""
"Нарешті, ми можемо використати клас :ref:`ResourceSaver "
"<class_resourcesaver>`, щоб зберегти ArrayMesh. Це корисно, коли ви хочете "
"створити меш, а потім використовувати його пізніше без необхідності повторно "
"генерувати."
