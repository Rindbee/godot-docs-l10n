#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making main screen plugins"
msgstr "Створення плагінів головного екрана"

msgid "What this tutorial covers"
msgstr "Що охоплює цей посібник"

msgid ""
"Main screen plugins allow you to create new UIs in the central part of the "
"editor, which appear next to the \"2D\", \"3D\", \"Script\", and "
"\"AssetLib\" buttons. Such editor plugins are referred as \"Main screen "
"plugins\"."
msgstr ""
"Плагіни головного екрана дозволяють створювати нові інтерфейси користувача в "
"центральній частині редактора, які з’являються поруч із кнопками «2D», «3D», "
"«Сценарій» і «AssetLib». Такі плагіни редактора називаються «плагінами "
"головного екрана»."

msgid ""
"This tutorial leads you through the creation of a basic main screen plugin. "
"For the sake of simplicity, our main screen plugin will contain a single "
"button that prints text to the console."
msgstr ""
"Цей підручник допоможе вам створити базовий плагін головного екрана. Заради "
"простоти наш плагін головного екрана міститиме одну кнопку, яка друкує текст "
"на консолі."

msgid "Initializing the plugin"
msgstr "Ініціалізація плагіна"

msgid ""
"First create a new plugin from the Plugins menu. For this tutorial, we'll "
"put it in a folder called ``main_screen``, but you can use any name you'd "
"like."
msgstr ""
"Спочатку створіть новий плагін у меню «Плагіни». Для цього підручника ми "
"розмістимо його в папці під назвою ``main_screen``, але ви можете "
"використовувати будь-яке ім’я."

msgid ""
"The plugin script will come with ``_enter_tree()`` and ``_exit_tree()`` "
"methods, but for a main screen plugin we need to add a few extra methods. "
"Add five extra methods such that the script looks like this:"
msgstr ""
"Сценарій плагіна постачатиметься з методами ``_enter_tree()`` і "
"``_exit_tree()``, але для плагіна головного екрана нам потрібно додати "
"кілька додаткових методів. Додайте п’ять додаткових методів, щоб сценарій "
"виглядав так:"

msgid ""
"The important part in this script is the ``_has_main_screen()`` function, "
"which is overloaded so it returns ``true``. This function is automatically "
"called by the editor on plugin activation, to tell it that this plugin adds "
"a new center view to the editor. For now, we'll leave this script as-is and "
"we'll come back to it later."
msgstr ""
"Важливою частиною цього сценарію є функція ``_has_main_screen()``, яка "
"перевантажена, тому повертає ``true``. Ця функція автоматично викликається "
"редактором після активації плагіна, щоб повідомити, що цей плагін додає до "
"редактора новий центральний вигляд. Наразі ми залишимо цей сценарій як є та "
"повернемося до нього пізніше."

msgid "Main screen scene"
msgstr "Сцена головного екрана"

msgid ""
"Create a new scene with a root node derived from ``Control`` (for this "
"example plugin, we'll make the root node a ``CenterContainer``). Select this "
"root node, and in the viewport, click the ``Layout`` menu and select ``Full "
"Rect``. You also need to enable the ``Expand`` vertical size flag in the "
"inspector. The panel now uses all the space available in the main viewport."
msgstr ""
"Створіть нову сцену з кореневим вузлом, отриманим від ``Control`` (для цього "
"прикладу плагіна ми зробимо кореневий вузол ``CenterContainer``). Виберіть "
"цей кореневий вузол і у вікні перегляду клацніть меню ``Макет`` і виберіть "
"``Повний прямокутник``. Вам також потрібно ввімкнути прапорець вертикального "
"розміру ``Розгорнути`` в інспекторі. Тепер панель використовує весь простір, "
"доступний у головному вікні перегляду."

msgid ""
"Next, let's add a button to our example main screen plugin. Add a ``Button`` "
"node, and set the text to \"Print Hello\" or similar. Add a script to the "
"button like this:"
msgstr ""
"Далі додамо кнопку до нашого прикладу плагіна головного екрана. Додайте "
"вузол ``Кнопка`` та встановіть для тексту значення «Друкувати привіт» або "
"подібне. Додайте такий сценарій до кнопки:"

msgid ""
"Then connect the \"pressed\" signal to itself. If you need help with "
"signals, see the :ref:`doc_signals` article."
msgstr ""
"Потім підключіть «натиснутий» сигнал до себе. Якщо вам потрібна допомога "
"щодо сигналів, перегляньте статтю :ref:`doc_signals`."

msgid ""
"We are done with the main screen panel. Save the scene as ``main_panel."
"tscn``."
msgstr ""
"Ми закінчили з панеллю головного екрана. Збережіть сцену як ``main_panel."
"tscn``."

msgid "Update the plugin script"
msgstr "Оновіть сценарій плагіна"

msgid ""
"We need to update the ``main_screen_plugin.gd`` script so the plugin "
"instances our main panel scene and places it where it needs to be. Here is "
"the full plugin script:"
msgstr ""
"Нам потрібно оновити сценарій ``main_screen_plugin.gd``, щоб плагін "
"створював екземпляри нашої основної сцени панелі та розміщував її там, де "
"потрібно. Ось повний сценарій плагіна:"

msgid ""
"A couple of specific lines were added. ``MainPanel`` is a constant that "
"holds a reference to the scene, and we instance it into "
"`main_panel_instance`."
msgstr ""
"Було додано кілька конкретних рядків. ``MainPanel`` — це константа, яка "
"містить посилання на сцену, і ми вставляємо її в `main_panel_instance`."

msgid ""
"The ``_enter_tree()`` function is called before ``_ready()``. This is where "
"we instance the main panel scene, and add them as children of specific parts "
"of the editor. We use ``EditorInterface.get_editor_main_screen()`` to obtain "
"the main editor screen and add our main panel instance as a child to it. We "
"call the ``_make_visible(false)`` function to hide the main panel so it "
"doesn't compete for space when first activating the plugin."
msgstr ""
"Функція ``_enter_tree()`` викликається перед ``_ready()``. Тут ми створюємо "
"екземпляр сцени головної панелі та додаємо їх як дочірні елементи певних "
"частин редактора. Ми використовуємо ``EditorInterface."
"get_editor_main_screen()``, щоб отримати головний екран редактора та додати "
"до нього екземпляр нашої головної панелі як дочірнього. Ми викликаємо "
"функцію ``_make_visible(false)``, щоб приховати головну панель, щоб вона не "
"конкурувала за місце під час першої активації плагіна."

msgid ""
"The ``_exit_tree()`` function is called when the plugin is deactivated. If "
"the main screen still exists, we call ``queue_free()`` to free the instance "
"and remove it from memory."
msgstr ""
"Функція ``_exit_tree()`` викликається, коли плагін дезактивовано. Якщо "
"головний екран все ще існує, ми викликаємо ``queue_free()``, щоб звільнити "
"примірник і видалити його з пам’яті."

msgid ""
"The ``_make_visible()`` function is overridden to hide or show the main "
"panel as needed. This function is automatically called by the editor when "
"the user clicks on the main viewport buttons at the top of the editor."
msgstr ""
"Функцію ``_make_visible()`` перевизначено, щоб приховати або показати "
"головну панель за потреби. Ця функція автоматично викликається редактором, "
"коли користувач натискає кнопки головного вікна перегляду у верхній частині "
"редактора."

msgid ""
"The ``_get_plugin_name()`` and ``_get_plugin_icon()`` functions control the "
"displayed name and icon for the plugin's main viewport button."
msgstr ""
"Функції ``_get_plugin_name()`` і ``_get_plugin_icon()`` керують "
"відображуваною назвою та піктограмою для кнопки головного вікна перегляду "
"плагіна."

msgid ""
"Another function you can add is the ``handles()`` function, which allows you "
"to handle a node type, automatically focusing the main screen when the type "
"is selected. This is similar to how clicking on a 3D node will automatically "
"switch to the 3D viewport."
msgstr ""
"Іншою функцією, яку ви можете додати, є функція ``handles()``, яка дозволяє "
"обробляти тип вузла, автоматично фокусуючи головний екран, коли тип вибрано. "
"Це подібно до того, як клацання 3D-вузла автоматично перемикається на "
"тривимірне вікно перегляду."

msgid "Try the plugin"
msgstr "Спробуйте плагін"

msgid ""
"Activate the plugin in the Project Settings. You'll observe a new button "
"next to 2D, 3D, Script above the main viewport. Clicking it will take you to "
"your new main screen plugin, and the button in the middle will print text."
msgstr ""
"Активуйте плагін у налаштуваннях проекту. Ви побачите нову кнопку поруч із "
"2D, 3D, Script над головним вікном перегляду. Натиснувши її, ви перейдете до "
"нового плагіна головного екрана, а кнопка посередині надрукує текст."

msgid ""
"If you would like to try a finished version of this plugin, check out the "
"plugin demos here: https://github.com/godotengine/godot-demo-projects/tree/"
"master/plugins"
msgstr ""
"Якщо ви хочете спробувати готову версію цього плагіна, перегляньте "
"демонстраційні версії плагіна тут: https://github.com/godotengine/godot-demo-"
"projects/tree/master/plugins"

msgid ""
"If you would like to see a more complete example of what main screen plugins "
"are capable of, check out the 2.5D demo projects here: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/2.5d"
msgstr ""
"Якщо ви хочете побачити повніший приклад того, на що здатні плагіни "
"головного екрана, перегляньте демонстраційні проекти 2.5D тут: https://"
"github.com/godotengine/godot-demo-projects/tree/master/misc/ 2.5d"
