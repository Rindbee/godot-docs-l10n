#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making plugins"
msgstr "Створення додатків"

msgid "About plugins"
msgstr "Про плагіни"

msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be "
"made entirely with GDScript and standard scenes, without even reloading the "
"editor. Unlike modules, you don't need to create C++ code nor recompile the "
"engine. While this makes plugins less powerful, there are still many things "
"you can do with them. Note that a plugin is similar to any scene you can "
"already make, except it is created using a script to add editor "
"functionality."
msgstr ""
"Плагін — це чудовий спосіб розширити редактор корисними інструментами. Його "
"можна створити повністю за допомогою GDScript і стандартних сцен, навіть не "
"перезавантажуючи редактор. На відміну від модулів, вам не потрібно ні "
"створювати код C++, ні перекомпілювати механізм. Хоча це робить плагіни менш "
"потужними, з ними можна робити багато речей. Зауважте, що плагін подібний до "
"будь-якої сцени, яку ви вже можете створити, за винятком того, що він "
"створюється за допомогою сценарію для додавання функцій редактора."

msgid ""
"This tutorial will guide you through the creation of two plugins so you can "
"understand how they work and be able to develop your own. The first is a "
"custom node that you can add to any scene in the project, and the other is a "
"custom dock added to the editor."
msgstr ""
"Цей підручник допоможе вам створити два плагіни, щоб ви могли зрозуміти, як "
"вони працюють, і розробити свій власний. Перший — це настроюваний вузол, "
"який можна додати до будь-якої сцени в проекті, а інший — настроювана док-"
"станція, додана до редактора."

msgid "Creating a plugin"
msgstr "Створення плагіна"

msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as a base to develop and test the plugins."
msgstr ""
"Перш ніж почати, створіть новий порожній проект, де завгодно. Це буде "
"основою для розробки та тестування плагінів."

msgid ""
"The first thing you need for the editor to identify a new plugin is to "
"create two files: a ``plugin.cfg`` for configuration and a tool script with "
"the functionality. Plugins have a standard path like ``addons/plugin_name`` "
"inside the project folder. Godot provides a dialog for generating those "
"files and placing them where they need to be."
msgstr ""
"Перше, що вам потрібно для того, щоб редактор визначив новий плагін, це "
"створити два файли: ``plugin.cfg`` для конфігурації та сценарій інструменту "
"з функціональністю. Плагіни мають стандартний шлях, наприклад ``addons/"
"plugin_name`` у папці проекту. Godot надає діалогове вікно для створення цих "
"файлів і розміщення їх там, де вони мають бути."

msgid ""
"In the main toolbar, click the ``Project`` dropdown. Then click ``Project "
"Settings...``. Go to the ``Plugins`` tab and then click on the ``Create New "
"Plugin`` button in the top-right."
msgstr ""
"На головній панелі інструментів клацніть спадне меню ``Проект``. Потім "
"натисніть ``Налаштування проекту...``. Перейдіть на вкладку ``Плагіни``, а "
"потім натисніть кнопку ``Створити новий плагін`` у верхньому правому куті."

msgid "You will see the dialog appear, like so:"
msgstr "Ви побачите діалогове вікно, ось так:"

msgid ""
"The placeholder text in each field describes how it affects the plugin's "
"creation of the files and the config file's values."
msgstr ""
"Текст покажчика місця заповнення в кожному полі описує, як він впливає на "
"створення плагіном файлів і значень конфігураційного файлу."

msgid "To continue with the example, use the following values:"
msgstr "Щоб продовжити приклад, використовуйте такі значення:"

msgid ""
"Unchecking the ``Activate now?`` option in C# is always required because, "
"like every other C# script, the EditorPlugin script needs to be compiled "
"which requires building the project. After building the project the plugin "
"can be enabled in the ``Plugins`` tab of ``Project Settings``."
msgstr ""
"Зніміть прапорець ``Активувати зараз?`` у C# завжди потрібно, оскільки, як і "
"будь-який інший сценарій C#, сценарій EditorPlugin потрібно скомпілювати, що "
"вимагає створення проекту. Після створення проекту плагін можна ввімкнути на "
"вкладці ``Плагіни`` ``Налаштування проекту``."

msgid "You should end up with a directory structure like this:"
msgstr "Ви маєте отримати таку структуру каталогу:"

msgid ""
"``plugin.cfg`` is an INI file with metadata about your plugin. The name and "
"description help people understand what it does. Your name helps you get "
"properly credited for your work. The version number helps others know if "
"they have an outdated version; if you are unsure on how to come up with the "
"version number, check out `Semantic Versioning <https://semver.org/>`_. The "
"main script file will instruct Godot what your plugin does in the editor "
"once it is active."
msgstr ""
"``plugin.cfg`` — це INI-файл із метаданими про ваш плагін. Назва та опис "
"допомагають людям зрозуміти, що він робить. Ваше ім’я допомагає вам належним "
"чином оцінити вашу роботу. Номер версії допомагає іншим знати, чи є у них "
"застаріла версія; якщо ви не впевнені, як знайти номер версії, перегляньте "
"`Семантичне керування версіями <https://semver.org/>`_. Основний файл "
"сценарію вкаже Godot, що ваш плагін робить у редакторі, коли він активний."

msgid "The script file"
msgstr "Файл сценарію"

msgid ""
"Upon creation of the plugin, the dialog will automatically open the "
"EditorPlugin script for you. The script has two requirements that you cannot "
"change: it must be a ``@tool`` script, or else it will not load properly in "
"the editor, and it must inherit from :ref:`class_EditorPlugin`."
msgstr ""
"Після створення плагіна діалогове вікно автоматично відкриє для вас сценарій "
"EditorPlugin. Сценарій має дві вимоги, які ви не можете змінити: він має "
"бути сценарієм ``@tool``, інакше він не завантажуватиметься належним чином у "
"редакторі, і він має успадкувати від :ref:`class_EditorPlugin`."

msgid ""
"In addition to the EditorPlugin script, any other GDScript that your plugin "
"uses must *also* be a tool. Any GDScript without ``@tool`` used by the "
"editor will act like an empty file!"
msgstr ""
"Окрім сценарію EditorPlugin, будь-який інший GDScript, який використовує ваш "
"плагін, має *також* бути інструментом. Будь-який GDScript без ``@tool``, "
"який використовується редактором, діятиме як порожній файл!"

msgid ""
"It's important to deal with initialization and clean-up of resources. A good "
"practice is to use the virtual function :ref:`_enter_tree() "
"<class_Node_private_method__enter_tree>` to initialize your plugin "
"and :ref:`_exit_tree() <class_Node_private_method__exit_tree>` to clean it "
"up. Thankfully, the dialog generates these callbacks for you. Your script "
"should look something like this:"
msgstr ""
"Важливо мати справу з ініціалізацією та очищенням ресурсів. Хорошою "
"практикою є використання віртуальної функції :ref:`_enter_tree() "
"<class_Node_private_method__enter_tree>` для ініціалізації вашого плагіна "
"та :ref:`_exit_tree() <class_Node_private_method__exit_tree>` для його "
"очищення. На щастя, діалог генерує ці зворотні виклики для вас. Ваш сценарій "
"має виглядати приблизно так:"

msgid "This is a good template to use when creating new plugins."
msgstr "Це хороший шаблон для створення нових плагінів."

msgid "A custom node"
msgstr "Спеціальний вузол"

msgid ""
"Sometimes you want a certain behavior in many nodes, such as a custom scene "
"or control that can be reused. Instancing is helpful in a lot of cases, but "
"sometimes it can be cumbersome, especially if you're using it in many "
"projects. A good solution to this is to make a plugin that adds a node with "
"a custom behavior."
msgstr ""
"Іноді вам потрібна певна поведінка в багатьох вузлах, наприклад спеціальна "
"сцена або елемент керування, який можна повторно використовувати. Створення "
"екземплярів корисне в багатьох випадках, але іноді воно може бути "
"громіздким, особливо якщо ви використовуєте його в багатьох проектах. "
"Хорошим рішенням для цього є створення плагіна, який додає вузол зі "
"спеціальною поведінкою."

msgid ""
"Nodes added via an EditorPlugin are \"CustomType\" nodes. While they work "
"with any scripting language, they have fewer features than :ref:`the Script "
"Class system <doc_gdscript_basics_class_name>`. If you are writing GDScript "
"or NativeScript, we recommend using Script Classes instead."
msgstr ""
"Вузли, додані через EditorPlugin, є вузлами \"CustomType\". Хоча вони "
"працюють з будь-якою мовою сценаріїв, вони мають менше функцій, "
"ніж :ref:`the Script Class system <doc_gdscript_basics_class_name>`. Якщо ви "
"пишете GDScript або NativeScript, ми рекомендуємо замість них "
"використовувати Script Classes."

msgid ""
"To create a new node type, you can use the function :ref:`add_custom_type() "
"<class_EditorPlugin_method_add_custom_type>` from "
"the :ref:`class_EditorPlugin` class. This function can add new types to the "
"editor (nodes or resources). However, before you can create the type, you "
"need a script that will act as the logic for the type. While that script "
"doesn't have to use the ``@tool`` annotation, it can be added so the script "
"runs in the editor."
msgstr ""
"Щоб створити новий тип вузла, ви можете використати "
"функцію :ref:`add_custom_type() <class_EditorPlugin_method_add_custom_type>` "
"з класу :ref:`class_EditorPlugin`. Ця функція може додавати нові типи до "
"редактора (вузли або ресурси). Однак перш ніж ви зможете створити тип, вам "
"потрібен сценарій, який діятиме як логіка для цього типу. Хоча цей сценарій "
"не обов’язково має використовувати анотацію ``@tool``, її можна додати, щоб "
"сценарій запускався в редакторі."

msgid ""
"For this tutorial, we'll create a button that prints a message when clicked. "
"For that, we'll need a script that extends from :ref:`class_Button`. It "
"could also extend :ref:`class_BaseButton` if you prefer:"
msgstr ""
"Для цього підручника ми створимо кнопку, яка друкує повідомлення, якщо "
"натиснути. Для цього нам знадобиться скрипт, який походить "
"від :ref:`class_Button`. Він також може розширити :ref:`class_BaseButton`, "
"якщо ви бажаєте:"

msgid ""
"That's it for our basic button. You can save this as ``my_button.gd`` inside "
"the plugin folder. You'll also need a 16×16 icon to show in the scene tree. "
"If you don't have one, you can grab the default one from the engine and save "
"it in your `addons/my_custom_node` folder as `icon.png`, or use the default "
"Godot logo (`preload(\"res://icon.svg\")`)."
msgstr ""
"Ось і все для нашої основної кнопки. Ви можете зберегти це як "
"``my_button.gd`` у папці плагіна. Вам також знадобиться піктограма 16×16 для "
"відображення в дереві сцени. Якщо у вас його немає, ви можете отримати "
"типовий логотип із механізму та зберегти його у папці `addons/"
"my_custom_node` як `icon.png` або використати типовий логотип Godot "
"(`preload(\"res://) icon.svg\")`)."

msgid ""
"SVG images that are used as custom node icons should have the **Editor > "
"Scale With Editor Scale** and **Editor > Convert Colors With Editor "
"Theme** :ref:`import options <doc_importing_images_editor_import_options>` "
"enabled. This allows icons to follow the editor's scale and theming settings "
"if the icons are designed with the same color palette as Godot's own icons."
msgstr ""
"Зображення SVG, які використовуються як користувацькі піктограми вузлів, "
"повинні мати **Редактор > Масштабувати за допомогою масштабу редактора** та "
"**Редактор > Перетворити кольори за допомогою теми редактора** :ref:`import "
"options <doc_importing_images_editor_import_options>`. Це дозволяє "
"піктограмам відповідати параметрам масштабу та тематики редактора, якщо "
"піктограми розроблено з тією ж палітрою кольорів, що й власні піктограми "
"Godot."

msgid ""
"Now, we need to add it as a custom type so it shows on the **Create New "
"Node** dialog. For that, change the ``custom_node.gd`` script to the "
"following:"
msgstr ""
"Тепер нам потрібно додати його як спеціальний тип, щоб він відображався в "
"діалоговому вікні **Створити новий вузол**. Для цього змініть сценарій "
"``custom_node.gd`` на такий:"

msgid ""
"With that done, the plugin should already be available in the plugin list in "
"the **Project Settings**, so activate it as explained in `Checking the "
"results`_."
msgstr ""
"Після цього плагін уже має бути доступним у списку плагінів у "
"**Налаштуваннях проекту**, тому активуйте його, як описано в розділі "
"`Перевірка результатів`_."

msgid "Then try it out by adding your new node:"
msgstr "Потім спробуйте, додавши свій новий вузол:"

msgid ""
"When you add the node, you can see that it already has the script you "
"created attached to it. Set a text to the button, save and run the scene. "
"When you click the button, you can see some text in the console:"
msgstr ""
"Коли ви додаєте вузол, ви бачите, що до нього вже приєднано створений вами "
"сценарій. Встановіть текст на кнопку, збережіть і запустіть сцену. Коли ви "
"натискаєте кнопку, ви можете побачити певний текст у консолі:"

msgid "A custom dock"
msgstr "Спеціальний док"

msgid ""
"Sometimes, you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks "
"are just scenes based on Control, so they are created in a way similar to "
"usual GUI scenes."
msgstr ""
"Іноді вам потрібно розширити редактор і додати інструменти, які завжди "
"доступні. Простий спосіб зробити це – додати нову док-станцію з плагіном. "
"Доки — це просто сцени на основі Control, тому вони створюються подібно до "
"звичайних сцен GUI."

msgid ""
"Creating a custom dock is done just like a custom node. Create a new "
"``plugin.cfg`` file in the ``addons/my_custom_dock`` folder, then add the "
"following content to it:"
msgstr ""
"Створення настроюваного дока виконується так само, як настроюваний вузол. "
"Створіть новий файл ``plugin.cfg`` у папці ``addons/my_custom_dock``, а "
"потім додайте до нього такий вміст:"

msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill it with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` to "
"get a good start."
msgstr ""
"Потім створіть сценарій ``custom_dock.gd`` у тій же папці. Заповніть "
"його :ref:`template we've seen before <doc_making_plugins_template_code>`, "
"щоб добре почати."

msgid ""
"Since we're trying to add a new custom dock, we need to create the contents "
"of the dock. This is nothing more than a standard Godot scene: just create a "
"new scene in the editor then edit it."
msgstr ""
"Оскільки ми намагаємося додати нову спеціальну док-станцію, нам потрібно "
"створити вміст док-станції. Це не що інше, як стандартна сцена Godot: просто "
"створіть нову сцену в редакторі, а потім відредагуйте її."

msgid ""
"For an editor dock, the root node **must** be a :ref:`Control "
"<class_Control>` or one of its child classes. For this tutorial, you can "
"create a single button. The name of the root node will also be the name that "
"appears on the dock tab, so be sure to give it a short and descriptive name. "
"Also, don't forget to add some text to your button."
msgstr ""
"Для док-станції редактора кореневий вузол **має** бути :ref:`Control "
"<class_Control>` або одним із його дочірніх класів. Для цього підручника ви "
"можете створити одну кнопку. Ім’я кореневого вузла також буде ім’ям, яке "
"з’явиться на вкладці док-станції, тому обов’язково вкажіть йому коротке й "
"описове ім’я. Крім того, не забудьте додати текст до вашої кнопки."

msgid ""
"Save this scene as ``my_dock.tscn``. Now, we need to grab the scene we "
"created then add it as a dock in the editor. For this, you can rely on the "
"function :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` from the :ref:`EditorPlugin "
"<class_EditorPlugin>` class."
msgstr ""
"Збережіть цю сцену як ``my_dock.tscn``. Тепер нам потрібно захопити створену "
"сцену, а потім додати її як док-станцію в редакторі. Для цього ви можете "
"покластися на функцію :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` з класу :ref:`EditorPlugin "
"<class_EditorPlugin>`."

msgid ""
"You need to select a dock position and define the control to add (which is "
"the scene you just created). Don't forget to **remove the dock** when the "
"plugin is deactivated. The script could look like this:"
msgstr ""
"Вам потрібно вибрати позицію дока та визначити елемент керування, який "
"потрібно додати (це сцена, яку ви щойно створили). Не забудьте **вилучити "
"док**, коли плагін деактивовано. Сценарій може виглядати так:"

msgid ""
"Note that, while the dock will initially appear at its specified position, "
"the user can freely change its position and save the resulting layout."
msgstr ""
"Зауважте, що хоча док-станція спочатку з’явиться у вказаній позиції, "
"користувач може вільно змінити її позицію та зберегти отриманий макет."

msgid "Checking the results"
msgstr "Перевірка результатів"

msgid ""
"It's now time to check the results of your work. Open the **Project "
"Settings** and click on the **Plugins** tab. Your plugin should be the only "
"one on the list."
msgstr ""
"Настав час перевірити результати вашої роботи. Відкрийте **Налаштування "
"проекту** та натисніть вкладку **Плагіни**. Ваш плагін має бути єдиним у "
"списку."

msgid ""
"You can see the plugin is not enabled. Click the **Enable** checkbox to "
"activate the plugin. The dock should become visible before you even close "
"the settings window. You should now have a custom dock:"
msgstr ""
"Ви бачите, що плагін не ввімкнено. Щоб активувати плагін, установіть "
"прапорець **Увімкнути**. Док-станція має стати видимою ще до того, як ви "
"закриєте вікно налаштувань. Тепер у вас має бути спеціальна док-станція:"

msgid "Registering autoloads/singletons in plugins"
msgstr "Реєстрація автозавантажень/синглтонів у плагінах"

msgid ""
"It is possible for editor plugins to automatically register :ref:`autoloads "
"<doc_singletons_autoload>` when the plugin is enabled. This also includes "
"unregistering the autoload when the plugin is disabled."
msgstr ""
"Плагіни редактора можуть автоматично реєструвати :ref:`autoloads "
"<doc_singletons_autoload>`, коли плагін увімкнено. Це також включає "
"скасування реєстрації автозавантаження, коли плагін вимкнено."

msgid ""
"This makes setting up plugins faster for users, as they no longer have to "
"manually add autoloads to their project settings if your editor plugin "
"requires the use of an autoload."
msgstr ""
"Це пришвидшує налаштування плагінів для користувачів, оскільки їм більше не "
"потрібно вручну додавати автозавантаження до налаштувань проекту, якщо ваш "
"плагін редактора вимагає використання автозавантаження."

msgid "Use the following code to register a singleton from an editor plugin:"
msgstr ""
"Використовуйте наступний код, щоб зареєструвати синглтон із плагіна "
"редактора:"

msgid "Using sub-plugins"
msgstr "Використання підплагінів"

msgid ""
"Often a plugin adds multiple things, for example a custom node and a panel. "
"In those cases it might be easier to have a separate plugin script for each "
"of those features. Sub-plugins can be used for this."
msgstr ""
"Часто плагін додає кілька речей, наприклад спеціальний вузол і панель. У "
"таких випадках може бути легше мати окремий сценарій плагіна для кожної з "
"цих функцій. Для цього можна використовувати підплагіни."

msgid "First create all plugins and sub plugins as normal plugins:"
msgstr "Спочатку створіть усі плагіни та підплагіни як звичайні плагіни:"

msgid "Then move the sub plugins into the main plugin folder:"
msgstr "Потім перемістіть підплагіни в основну папку плагінів:"

msgid ""
"Godot will hide sub-plugins from the plugin list, so that a user can't "
"enable or disable them. Instead the main plugin script should enable and "
"disable sub-plugins like this:"
msgstr ""
"Godot приховає підплагіни зі списку плагінів, щоб користувач не міг "
"увімкнути або вимкнути їх. Натомість основний сценарій плагіна має вмикати "
"та вимикати такі додаткові плагіни:"

msgid "Going beyond"
msgstr "Виходячи за рамки"

msgid ""
"Now that you've learned how to make basic plugins, you can extend the editor "
"in several ways. Lots of functionality can be added to the editor with "
"GDScript; it is a powerful way to create specialized editors without having "
"to delve into C++ modules."
msgstr ""
"Тепер, коли ви навчилися створювати базові плагіни, ви можете розширити "
"редактор кількома способами. Багато функцій можна додати до редактора за "
"допомогою GDScript; це потужний спосіб створення спеціалізованих редакторів "
"без необхідності заглиблюватися в модулі C++."

msgid ""
"You can make your own plugins to help yourself and share them in the `Asset "
"Library <https://godotengine.org/asset-library/>`_ so that people can "
"benefit from your work."
msgstr ""
"Ви можете створити власні плагіни, щоб допомогти собі, і поділитися ними в "
"`Бібліотеці ресурсів <https://godotengine.org/asset-library/>`_, щоб люди "
"могли отримати користь від вашої роботи."
