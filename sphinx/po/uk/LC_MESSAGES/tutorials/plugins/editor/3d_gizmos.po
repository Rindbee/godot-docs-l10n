#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "3D gizmo plugins"
msgstr "Плагіни 3D gizmo"

msgid "Introduction"
msgstr "Вступ"

msgid ""
"3D gizmo plugins are used by the editor and custom plugins to define the "
"gizmos attached to any kind of Node3D node."
msgstr ""
"Плагіни 3D gizmo використовуються редактором і користувацькими плагінами для "
"визначення гізмо, приєднаних до будь-якого типу вузла Node3D."

msgid ""
"This tutorial shows the two main approaches to defining your own custom "
"gizmos. The first option works well for simple gizmos and creates less "
"clutter in your plugin structure, and the second one will let you store some "
"per-gizmo data."
msgstr ""
"У цьому підручнику показано два основні підходи до визначення власних гізмо. "
"Перший варіант добре працює для простих гізмо і створює менше безладу в "
"структурі вашого плагіна, а другий дозволить вам зберігати деякі дані гізмо."

msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page."
msgstr ""
"Цей підручник передбачає, що ви вже знаєте, як створювати загальні плагіни. "
"Якщо ви сумніваєтеся, зверніться до сторінки :ref:`doc_making_plugins`."

msgid "The EditorNode3DGizmoPlugin"
msgstr "EditorNode3DGizmoPlugin"

msgid ""
"Regardless of the approach we choose, we will need to create a new :ref:"
"`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>`. This will allow "
"us to set a name for the new gizmo type and define other behaviors such as "
"whether the gizmo can be hidden or not."
msgstr ""
"Незалежно від обраного підходу, нам потрібно буде створити новий :ref:"
"`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>`. Це дозволить нам "
"встановити ім’я для нового типу гізмо та визначити іншу поведінку, "
"наприклад, чи можна приховати гізмо чи ні."

msgid "This would be a basic setup:"
msgstr "Це буде базове налаштування:"

msgid ""
"For simple gizmos, inheriting :ref:`EditorNode3DGizmoPlugin "
"<class_EditorNode3DGizmoPlugin>` is enough. If you want to store some per-"
"gizmo data or you are porting a Godot 3.0 gizmo to 3.1+, you should go with "
"the second approach."
msgstr ""
"Для простих гізмо достатньо успадкувати :ref:`EditorNode3DGizmoPlugin "
"<class_EditorNode3DGizmoPlugin>`. Якщо ви хочете зберігати деякі дані гізмо "
"або портуєте гізмо Godot 3.0 на 3.1+, вам слід скористатися другим підходом."

msgid "Simple approach"
msgstr "Простий підхід"

msgid ""
"The first step is to, in our custom gizmo plugin, override the :ref:"
"`_has_gizmo()<class_EditorNode3DGizmoPlugin_private_method__has_gizmo>` "
"method so that it returns ``true`` when the node parameter is of our target "
"type."
msgstr ""
"Перший крок полягає в тому, щоб у нашому спеціальному плагіні gizmo "
"перевизначити метод :ref:"
"`_has_gizmo()<class_EditorNode3DGizmoPlugin_private_method__has_gizmo>`, щоб "
"він повертав ``true``, коли параметр вузла має наш цільовий тип."

msgid ""
"Then we can override methods like :ref:"
"`_redraw()<class_EditorNode3DGizmoPlugin_private_method__redraw>` or all the "
"handle related ones."
msgstr ""
"Тоді ми можемо перевизначити такі методи, як :ref:"
"`_redraw()<class_EditorNode3DGizmoPlugin_private_method__redraw>` або всі "
"пов’язані з дескрипторами."

msgid ""
"Note that we created a material in the `_init` method, and retrieved it in "
"the `_redraw` method using :ref:"
"`get_material()<class_EditorNode3DGizmoPlugin_method_get_material>`. This "
"method retrieves one of the material's variants depending on the state of "
"the gizmo (selected and/or editable)."
msgstr ""
"Зауважте, що ми створили матеріал у методі `_init` і отримали його в методі "
"`_redraw` за допомогою :ref:"
"`get_material()<class_EditorNode3DGizmoPlugin_method_get_material>`. Цей "
"метод отримує один із варіантів матеріалу залежно від стану гізмо (вибраного "
"та/або редагованого)."

msgid "So the final plugin would look somewhat like this:"
msgstr "Тож остаточний плагін виглядав би приблизно так:"

msgid ""
"Note that we just added some handles in the `_redraw` method, but we still "
"need to implement the rest of handle-related callbacks in :ref:"
"`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>` to get properly "
"working handles."
msgstr ""
"Зауважте, що ми щойно додали кілька дескрипторів у метод `_redraw`, але нам "
"все ще потрібно реалізувати решту пов’язаних з дескрипторами зворотних "
"викликів у :ref:`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>`, "
"щоб отримати належні робочі дескриптори."

msgid "Alternative approach"
msgstr "Альтернативний підхід"

msgid ""
"In some cases we want to provide our own implementation of :ref:"
"`EditorNode3DGizmo<class_EditorNode3DGizmo>`, maybe because we want to have "
"some state stored in each gizmo or because we are porting an old gizmo "
"plugin and we don't want to go through the rewriting process."
msgstr ""
"У деяких випадках ми хочемо надати власну реалізацію :ref:"
"`EditorNode3DGizmo<class_EditorNode3DGizmo>`, можливо, тому, що ми хочемо, "
"щоб певний стан зберігався в кожному gizmo, або тому, що ми переносимо "
"старий плагін gizmo, і ми не хочемо переходити через процес переписування."

msgid ""
"In these cases all we need to do is, in our new gizmo plugin, override :ref:"
"`_create_gizmo()<class_EditorNode3DGizmoPlugin_private_method__create_gizmo>`, "
"so it returns our custom gizmo implementation for the Node3D nodes we want "
"to target."
msgstr ""
"У цих випадках все, що нам потрібно зробити, це в нашому новому плагіні "
"gizmo перевизначити :ref:"
"`_create_gizmo()<class_EditorNode3DGizmoPlugin_private_method__create_gizmo>`, "
"щоб він повернув нашу власну реалізацію gizmo для вузлів Node3D, на які ми "
"хочемо націлити."

msgid ""
"This way all the gizmo logic and drawing methods can be implemented in a new "
"class extending :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, like so:"
msgstr ""
"Таким чином уся логіка гізмо та методи малювання можуть бути реалізовані в "
"новому класі, що розширює :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, "
"наприклад:"

msgid ""
"Note that we just added some handles in the `_redraw` method, but we still "
"need to implement the rest of handle-related callbacks in :ref:"
"`EditorNode3DGizmo<class_EditorNode3DGizmo>` to get properly working handles."
msgstr ""
"Зауважте, що ми щойно додали кілька дескрипторів у метод `_redraw`, але нам "
"все одно потрібно реалізувати решту пов’язаних з дескрипторами зворотних "
"викликів у :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, щоб отримати "
"належні робочі дескриптори."
