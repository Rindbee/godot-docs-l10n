#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to shaders"
msgstr "Знайомство з шейдерами"

msgid ""
"This page explains what shaders are and will give you an overview of how "
"they work in Godot. For a detailed reference of the engine's shading "
"language, see :ref:`doc_shading_language`."
msgstr ""
"На цій сторінці пояснюється, що таке шейдери, і ви дізнаєтеся, як вони "
"працюють у Godot. Щоб отримати детальну довідку про мову затінення двигуна, "
"перегляньте :ref:`doc_shading_language`."

msgid ""
"Shaders are a special kind of program that runs on Graphics Processing Units "
"(GPUs). They were initially used to shade 3D scenes but can nowadays do much "
"more. You can use them to control how the engine draws geometry and pixels "
"on the screen, allowing you to achieve all sorts of effects."
msgstr ""
"Шейдери — це особливий вид програм, які працюють на графічних процесорах "
"(GPU). Спочатку вони використовувалися для затінення 3D-сцен, але тепер "
"можуть робити набагато більше. Ви можете використовувати їх, щоб керувати "
"тим, як механізм малює геометрію та пікселі на екрані, дозволяючи вам "
"досягати різноманітних ефектів."

msgid ""
"Modern rendering engines like Godot draw everything with shaders: graphics "
"cards can run thousands of instructions in parallel, leading to incredible "
"rendering speed."
msgstr ""
"Сучасні механізми візуалізації, такі як Godot, малюють усе за допомогою "
"шейдерів: графічні карти можуть виконувати тисячі інструкцій паралельно, що "
"забезпечує неймовірну швидкість візуалізації."

msgid ""
"Because of their parallel nature, though, shaders don't process information "
"the way a typical program does. Shader code runs on each vertex or pixel in "
"isolation. You cannot store data between frames either. As a result, when "
"working with shaders, you need to code and think differently from other "
"programming languages."
msgstr ""
"Однак через свою паралельну природу шейдери не обробляють інформацію так, як "
"це робить типова програма. Код шейдера виконується на кожній вершині або "
"пікселі окремо. Ви також не можете зберігати дані між кадрами. Як наслідок, "
"під час роботи з шейдерами вам потрібно кодувати та мислити інакше, ніж інші "
"мови програмування."

msgid ""
"Suppose you want to update all the pixels in a texture to a given color. In "
"GDScript, your code would use ``for`` loops::"
msgstr ""
"Припустімо, ви хочете оновити всі пікселі в текстурі до певного кольору. У "
"GDScript ваш код використовуватиме цикли ``for``::"

msgid ""
"Your code is already part of a loop in a shader, so the corresponding code "
"would look like this."
msgstr ""
"Ваш код уже є частиною циклу в шейдері, тому відповідний код виглядатиме так."

msgid ""
"The graphics card calls the ``fragment()`` function once or more for each "
"pixel it has to draw. More on that below."
msgstr ""
"Відеокарта викликає функцію ``fragment()`` один або кілька разів для кожного "
"пікселя, який вона має намалювати. Детальніше про це нижче."

msgid "Shaders in Godot"
msgstr "Шейдери в Godot"

msgid ""
"Godot provides a shading language based on the popular OpenGL Shading "
"Language (GLSL) but simplified. The engine handles some of the lower-level "
"initialization work for you, making it easier to write complex shaders."
msgstr ""
"Godot пропонує мову затінення на основі популярної мови затінення OpenGL "
"(GLSL), але спрощену. Механізм виконує частину роботи з ініціалізації "
"нижчого рівня за вас, полегшуючи написання складних шейдерів."

msgid ""
"In Godot, shaders are made up of main functions called \"processor "
"functions\". Processor functions are the entry point for your shader into "
"the program. There are seven different processor functions."
msgstr ""
"У Godot шейдери складаються з основних функцій, які називаються «функціями "
"процесора». Функції процесора є точкою входу для вашого шейдера в програму. "
"Існує сім різних функцій процесора."

msgid ""
"The ``vertex()`` function runs over all the vertices in the mesh and sets "
"their positions and some other per-vertex variables. Used "
"in :ref:`canvas_item shaders <doc_canvas_item_shader>` and :ref:`spatial "
"shaders <doc_spatial_shader>`."
msgstr ""
"Функція ``vertex()`` виконується по всіх вершинах сітки та встановлює їхні "
"положення, а також деякі інші змінні для кожної вершини. Використовується "
"в :ref:`canvas_item shaders <doc_canvas_item_shader>` та :ref:`spatial "
"shaders <doc_spatial_shader>`."

msgid ""
"The ``fragment()`` function runs for every pixel covered by the mesh. It "
"uses values output by the ``vertex()`` function, interpolated between the "
"vertices. Used in :ref:`canvas_item shaders <doc_canvas_item_shader>` "
"and :ref:`spatial shaders <doc_spatial_shader>`."
msgstr ""
"Функція ``fragment()`` виконується для кожного пікселя, покритого сіткою. "
"Вона використовує значення, виведені функцією ``vertex()``, інтерпольовані "
"між вершинами. Використовується в :ref:`canvas_item shaders "
"<doc_canvas_item_shader>` та :ref:`spatial shaders <doc_spatial_shader>`."

msgid ""
"The ``light()`` function runs for every pixel and for every light. It takes "
"variables from the ``fragment()`` function and from its previous runs. Used "
"in :ref:`canvas_item shaders <doc_canvas_item_shader>` and :ref:`spatial "
"shaders <doc_spatial_shader>`."
msgstr ""
"Функція ``light()`` виконується для кожного пікселя та для кожного джерела "
"світла. Вона приймає змінні з функції ``fragment()`` та з її попередніх "
"запусків. Використовується в :ref:`canvas_item shaders "
"<doc_canvas_item_shader>` та :ref:`spatial shaders <doc_spatial_shader>`."

msgid ""
"The ``start()`` function runs for every particle in a particle system once "
"when the particle is first spawned. Used in :ref:`particles shaders "
"<doc_particle_shader>`."
msgstr ""
"Функція ``start()`` запускається для кожної частинки в системі частинок один "
"раз, коли частинка вперше породжується. Використовується в :ref:`particles "
"shaders <doc_particle_shader>`."

msgid ""
"The ``process()`` function runs for every particle in a particle system for "
"each frame. Used in :ref:`particles shaders <doc_particle_shader>`."
msgstr ""
"Функція ``process()`` запускається для кожної частинки в системі частинок "
"для кожного кадру. Використовується в :ref:`particles shaders "
"<doc_particle_shader>`."

msgid ""
"The ``sky()`` function runs for every pixel in the radiance cubemap when the "
"radiance cubemap needs to be updated, and for every pixel on the current "
"screen. Used in :ref:`sky shaders <doc_sky_shader>`."
msgstr ""
"Функція ``sky()`` запускається для кожного пікселя в кубічній карті "
"радіації, коли її потрібно оновити, а також для кожного пікселя на поточному "
"екрані. Використовується в :ref:`sky shaders <doc_sky_shader>`."

msgid ""
"The ``fog()`` function runs for every froxel in the volumetric fog froxel "
"buffer that intersects with the :ref:`FogVolume <class_FogVolume>`. Used "
"by :ref:`fog shaders <doc_fog_shader>`."
msgstr ""
"Функція ``fog()`` виконується для кожного фрокселя в об’ємному буфері "
"фрокселя туману, який перетинається з :ref:`FogVolume <class_FogVolume>`. "
"Використовується :ref:`fog shaders <doc_fog_shader>`."

msgid ""
"The ``light()`` function won't run if the ``vertex_lighting`` render mode is "
"enabled, or if **Rendering > Quality > Shading > Force Vertex Shading** is "
"enabled in the Project Settings. It's enabled by default on mobile platforms."
msgstr ""
"Функція ``light()`` не працюватиме, якщо ввімкнено режим візуалізації "
"``vertex_lighting`` або якщо в налаштуваннях проекту ввімкнено **Відтворення "
"> Якість > Затінення > Примусове затінення вершини**. Він увімкнено за "
"замовчуванням на мобільних платформах."

msgid ""
"Godot also exposes an API for users to write totally custom GLSL shaders. "
"For more information see :ref:`doc_compute_shaders`."
msgstr ""
"Godot також надає користувачам API для написання повністю власних шейдерів "
"GLSL. Для отримання додаткової інформації див. :ref:`doc_compute_shaders`."

msgid "Shader types"
msgstr "Типи шейдерів"

msgid ""
"Instead of supplying a general-purpose configuration for all uses (2D, 3D, "
"particles, sky, fog), you must specify the type of shader you're writing. "
"Different types support different render modes, built-in variables, and "
"processing functions."
msgstr ""
"Замість надання конфігурації загального призначення для всіх видів "
"використання (2D, 3D, частинки, небо, туман), ви повинні вказати тип "
"шейдера, який ви пишете. Різні типи підтримують різні режими візуалізації, "
"вбудовані змінні та функції обробки."

msgid ""
"In Godot, all shaders need to specify their type in the first line, like so:"
msgstr ""
"У Godot усі шейдери повинні вказувати свій тип у першому рядку, наприклад:"

msgid "Here are the available types:"
msgstr "Ось доступні типи:"

msgid ":ref:`spatial <doc_spatial_shader>` for 3D rendering."
msgstr ":ref:`spatial <doc_spatial_shader>` для 3D візуалізації."

msgid ":ref:`canvas_item <doc_canvas_item_shader>` for 2D rendering."
msgstr ":ref:`canvas_item <doc_canvas_item_shader>` для 2D візуалізації."

msgid ":ref:`particles <doc_particle_shader>` for particle systems."
msgstr ":ref:`particles <doc_particle_shader>` для систем частинок."

msgid ":ref:`sky <doc_sky_shader>` to render :ref:`Skies <class_Sky>`."
msgstr ":ref:`sky <doc_sky_shader>` рендерити :ref:`Skies <class_Sky>`."

msgid ""
":ref:`fog <doc_fog_shader>` to render :ref:`FogVolumes <class_FogVolume>`"
msgstr ""
":ref:`fog <doc_fog_shader>` для відтворення :ref:`FogVolumes "
"<class_FogVolume>`"

msgid "Render modes"
msgstr "Режими візуалізації"

msgid ""
"Shaders have optional render modes you can specify on the second line, after "
"the shader type, like so:"
msgstr ""
"Шейдери мають додаткові режими візуалізації, які можна вказати у другому "
"рядку після типу шейдера, наприклад:"

msgid ""
"Render modes alter the way Godot applies the shader. For example, the "
"``unshaded`` mode makes the engine skip the built-in light processor "
"function."
msgstr ""
"Режими візуалізації змінюють спосіб застосування шейдера Godot. Наприклад, у "
"режимі ``unshaded`` механізм пропускає вбудовану функцію світлового "
"процесора."

msgid ""
"Each shader type has different render modes. See the reference for each "
"shader type for a complete list of render modes."
msgstr ""
"Кожен тип шейдера має різні режими візуалізації. Повний список режимів "
"візуалізації див. у довідці для кожного типу шейдера."

msgid "Vertex processor"
msgstr "Вершиний процесор"

msgid ""
"The ``vertex()`` processing function is called once for every vertex in "
"``spatial`` and ``canvas_item`` shaders."
msgstr ""
"Функція обробки ``vertex()`` викликається один раз для кожної вершини в "
"``spatial`` і ``canvas_item`` шейдерах."

msgid ""
"Each vertex in your world's geometry has properties like a position and "
"color. The function modifies those values and passes them to the fragment "
"function. You can also use it to send extra data to the fragment function "
"using varyings."
msgstr ""
"Кожна вершина геометрії вашого світу має такі властивості, як положення та "
"колір. Функція змінює ці значення та передає їх у функцію фрагмента. Ви "
"також можете використовувати його для надсилання додаткових даних до функції "
"фрагменту за допомогою варіацій."

msgid ""
"By default, Godot transforms your vertex information for you, which is "
"necessary to project geometry onto the screen. You can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example."
msgstr ""
"За замовчуванням Godot перетворює інформацію про вершини, необхідну для "
"проектування геометрії на екран. Ви можете використовувати режими "
"візуалізації, щоб самостійно трансформувати дані; дивіться "
"приклад :ref:`Spatial shader doc <doc_spatial_shader>`."

msgid "Fragment processor"
msgstr "Процесор фрагментів"

msgid ""
"The ``fragment()`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in ``spatial``, ``canvas_item``, and "
"``sky`` shaders."
msgstr ""
"Функція обробки ``fragment()`` використовується для встановлення параметрів "
"матеріалу Godot на піксель. Цей код виконується на кожному видимому пікселі, "
"який малює об’єкт або примітив. Він доступний лише в шейдерах ``spatial``, "
"``canvas_item`` і ``sky``."

msgid ""
"The standard use of the fragment function is to set up material properties "
"used to calculate lighting. For example, you would set values for "
"``ROUGHNESS``, ``RIM``, or ``TRANSMISSION``, which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function, and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on the effects that you do not use."
msgstr ""
"Стандартним використанням функції фрагмента є налаштування властивостей "
"матеріалу, які використовуються для розрахунку освітлення. Наприклад, ви "
"повинні встановити значення для `` ROUGHNESS ``, `` RIM`` або `` `` "
"TRANSMISSION``, які повідомлять функції освітлення, як світло реагує на цей "
"фрагмент. Це дає змогу керувати складним конвеєром затінення без "
"необхідності написання коду користувачем. Якщо вам не потрібна ця вбудована "
"функція, ви можете проігнорувати її та написати власну функцію обробки "
"світла, і Godot оптимізує її. Наприклад, якщо ви не запишете значення в "
"``RIM``, Godot не обчислить освітлення обода. Під час компіляції Godot "
"перевіряє, чи використовується ``RIM``; якщо ні, він вирізає весь "
"відповідний код. Тому ви не будете витрачати розрахунки на ефекти, які ви не "
"використовуєте."

msgid "Light processor"
msgstr "Легкий процесор"

msgid ""
"The ``light()`` processor runs per pixel too, and it runs once for every "
"light that affects the object. It does not run if no lights affect the "
"object. It exists as a function called inside the ``fragment()`` processor "
"and typically operates on the material properties setup inside the "
"``fragment()`` function."
msgstr ""
"Процесор ``light()`` також працює на піксель, і він запускається один раз "
"для кожного світла, яке впливає на об’єкт. Він не запускається, якщо на "
"об’єкт не впливає світло. Він існує як функція, що викликається всередині "
"процесора ``fragment()`` і зазвичай працює з налаштуванням властивостей "
"матеріалу всередині функції ``fragment()``."

msgid ""
"The ``light()`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their "
"documentation, :ref:`CanvasItem shaders <doc_canvas_item_shader>` "
"and :ref:`Spatial shaders <doc_spatial_shader>`, respectively."
msgstr ""
"Процесор ``light()`` працює інакше у 2D, ніж у 3D; для опису того, як це "
"працює в кожному, дивіться їхню документацію, :ref:`CanvasItem shaders "
"<doc_canvas_item_shader>` і :ref:`Spatial shaders <doc_spatial_shader>` "
"відповідно."
