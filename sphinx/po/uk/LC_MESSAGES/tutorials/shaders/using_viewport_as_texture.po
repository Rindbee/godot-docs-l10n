#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using a SubViewport as a texture"
msgstr "Використання SubViewport як текстури"

msgid "Introduction"
msgstr "Вступ"

msgid ""
"This tutorial will introduce you to using the :ref:`SubViewport "
"<class_SubViewport>` as a texture that can be applied to 3D objects. In "
"order to do so, it will walk you through the process of making a procedural "
"planet like the one below:"
msgstr ""
"Цей підручник познайомить вас із використанням :ref:`SubViewport "
"<class_SubViewport>` як текстури, яку можна застосовувати до 3D-об’єктів. "
"Щоб це зробити, він проведе вас через процес створення процедурної планети, "
"як показано нижче:"

msgid ""
"This tutorial does not cover how to code a dynamic atmosphere like the one "
"this planet has."
msgstr ""
"У цьому підручнику не описано, як закодувати динамічну атмосферу, подібну до "
"тієї, що є на цій планеті."

msgid ""
"This tutorial assumes you are familiar with how to set up a basic scene "
"including: a :ref:`Camera3D <class_Camera3D>`, a :ref:`light source "
"<class_OmniLight3D>`, a :ref:`MeshInstance3D <class_MeshInstance3D>` with "
"a :ref:`Primitive Mesh <class_PrimitiveMesh>`, and applying "
"a :ref:`StandardMaterial3D <class_StandardMaterial3D>` to the mesh. The "
"focus will be on using the :ref:`SubViewport <class_SubViewport>` to "
"dynamically create textures that can be applied to the mesh."
msgstr ""
"У цьому підручнику передбачається, що ви знайомі з тим, як налаштувати "
"основну сцену, зокрема: :ref:`Camera3D <class_Camera3D>`, :ref:`light source "
"<class_OmniLight3D>`, :ref:`MeshInstance3D <class_MeshInstance3D>` з "
"a :ref:`Primitive Mesh <class_PrimitiveMesh>`, і "
"застосовуючи :ref:`StandardMaterial3D <class_StandardMaterial3D>` до сітки. "
"Основна увага буде зосереджена на використанні :ref:`SubViewport "
"<class_SubViewport>` для динамічного створення текстур, які можна "
"застосувати до сітки."

msgid "In this tutorial, we'll cover the following topics:"
msgstr "У цьому посібнику ми розглянемо такі теми:"

msgid "How to use a :ref:`SubViewport <class_SubViewport>` as a render texture"
msgstr ""
"Як використовувати :ref:`SubViewport <class_SubViewport>` як текстуру "
"візуалізації"

msgid "Mapping a texture to a sphere with equirectangular mapping"
msgstr ""
"Відображення текстури на сферу за допомогою рівнопрямокутного відображення"

msgid "Fragment shader techniques for procedural planets"
msgstr "Техніка фрагментного шейдера для процедурних планет"

msgid ""
"Setting a Roughness map from a :ref:`Viewport Texture "
"<class_ViewportTexture>`"
msgstr ""
"Встановлення карти шорсткості з :ref:`Viewport Texture "
"<class_ViewportTexture>`"

msgid "Setting up the scene"
msgstr "Налаштування сцени"

msgid "Create a new scene and add the following nodes exactly as shown below."
msgstr "Створіть нову сцену та додайте наступні вузли, як показано нижче."

msgid "Go into the the MeshInstance3D and make the mesh a SphereMesh"
msgstr "Перейдіть до MeshInstance3D і зробіть сітку SphereMesh"

msgid "Setting up the SubViewport"
msgstr "Налаштування SubViewport"

msgid ""
"Click on the :ref:`SubViewport <class_SubViewport>` node and set its size to "
"``(1024, 512)``. The :ref:`SubViewport <class_SubViewport>` can actually be "
"any size so long as the width is double the height. The width needs to be "
"double the height so that the image will accurately map onto the sphere, as "
"we will be using equirectangular projection, but more on that later."
msgstr ""
"Натисніть на вузол :ref:`SubViewport <class_SubViewport>` і встановіть для "
"нього розмір ``(1024, 512)``. :ref:`SubViewport <class_SubViewport>` "
"насправді може мати будь-який розмір, якщо ширина вдвічі перевищує висоту. "
"Ширина повинна бути вдвічі більшою за висоту, щоб зображення було точно "
"відображено на сфері, оскільки ми будемо використовувати рівнопрямокутну "
"проекцію, але про це пізніше."

msgid ""
"Next disable 3D. We will be using a :ref:`ColorRect <class_ColorRect>` to "
"render the surface, so we don't need 3D either."
msgstr ""
"Далі вимкніть 3D. Ми будемо використовувати :ref:`ColorRect "
"<class_ColorRect>` для візуалізації поверхні, тому нам також не потрібен 3D."

msgid ""
"Select the :ref:`ColorRect <class_ColorRect>` and in the inspector set the "
"anchors preset to ``Full Rect``. This will ensure that the :ref:`ColorRect "
"<class_ColorRect>` takes up the entire :ref:`SubViewport "
"<class_SubViewport>`."
msgstr ""
"Виберіть :ref:`ColorRect <class_ColorRect>` і в інспекторі встановіть "
"прив’язки на ``Full Rect``. Це гарантує, що :ref:`ColorRect "
"<class_ColorRect>` займає весь :ref:`SubViewport <class_SubViewport>`."

msgid ""
"Next, we add a :ref:`Shader Material <class_ShaderMaterial>` to "
"the :ref:`ColorRect <class_ColorRect>` (ColorRect > CanvasItem > Material > "
"Material > ``New ShaderMaterial``)."
msgstr ""
"Далі ми додаємо :ref:`Shader Material <class_ShaderMaterial>` "
"до :ref:`ColorRect <class_ColorRect>` (ColorRect > CanvasItem > Material > "
"Material > ``New ShaderMaterial``)."

msgid ""
"Basic familiarity with shading is recommended for this tutorial. However, "
"even if you are new to shaders, all the code will be provided, so you should "
"have no problem following along."
msgstr ""
"Для цього підручника рекомендується базове знайомство з затіненням. Однак, "
"навіть якщо ви новачок у шейдерах, увесь код буде надано, тож у вас не "
"повинно виникнути проблем з його дотриманням."

msgid ""
"Click the dropdown menu button for the shader material and click / Edit. "
"From here go to Shader > ``New Shader``. give it a name and click "
"\"Create\". click the shader in the inspector to open the shader editor. "
"Delete the default code and add the following:"
msgstr ""
"Натисніть кнопку спадного меню для матеріалу шейдера та натисніть / "
"Редагувати. Звідси перейдіть до Shader > ``New Shader``. дайте йому назву та "
"натисніть «Створити». клацніть шейдер в інспекторі, щоб відкрити редактор "
"шейдерів. Видаліть стандартний код і додайте наступне:"

msgid ""
"save the shader code, you'll see in the inspector that the above code "
"renders a gradient like the one below."
msgstr ""
"збережіть код шейдера, ви побачите в інспекторі, що наведений вище код "
"відображає градієнт, як наведений нижче."

msgid ""
"Now we have the basics of a :ref:`SubViewport <class_SubViewport>` that we "
"render to and we have a unique image that we can apply to the sphere."
msgstr ""
"Тепер у нас є основи :ref:`SubViewport <class_SubViewport>`, який ми "
"рендеримо, і у нас є унікальне зображення, яке ми можемо застосувати до "
"сфери."

msgid "Applying the texture"
msgstr "Нанесення текстури"

msgid ""
"Now go into the :ref:`MeshInstance3D <class_MeshInstance3D>` and add "
"a :ref:`StandardMaterial3D <class_StandardMaterial3D>` to it. No need for a "
"special :ref:`Shader Material <class_ShaderMaterial>` (although that would "
"be a good idea for more advanced effects, like the atmosphere in the example "
"above)."
msgstr ""
"Тепер перейдіть до :ref:`MeshInstance3D <class_MeshInstance3D>` і додайте до "
"нього :ref:`StandardMaterial3D <class_StandardMaterial3D>`. Немає потреби в "
"спеціальному :ref:`Shader Material <class_ShaderMaterial>` (хоча це було б "
"хорошою ідеєю для більш просунутих ефектів, як-от атмосфера у прикладі вище)."

msgid ""
"MeshInstance3D > GeometryInstance > Geometry > Material Override > ``New "
"StandardMaterial3D``"
msgstr ""
"MeshInstance3D > GeometryInstance > Geometry > material Override > ``New "
"StandardMaterial3D``"

msgid "Then click the dropdown for the StandardMaterial3D and click \"Edit\""
msgstr ""
"Потім натисніть спадне меню для StandardMaterial3D і натисніть «Редагувати»"

msgid ""
"Go to the \"Resource\" section and check the ``Local to scene`` box. Then, "
"go to the \"Albedo\" section and click beside the \"Texture\" property to "
"add an Albedo Texture. Here we will apply the texture we made. Choose \"New "
"ViewportTexture\""
msgstr ""
"Перейдіть до розділу «Ресурс» і встановіть прапорець ``Локально для сцени``. "
"Потім перейдіть до розділу «Альбедо» та клацніть біля властивості "
"«Текстура», щоб додати текстуру Альбедо. Тут ми застосуємо створену "
"текстуру. Виберіть «Нова текстура вікна перегляду»"

msgid ""
"Click on the ViewportTexture you just created in the inspector, then click "
"\"Assign\". Then, from the menu that pops up, select the Viewport that we "
"rendered to earlier."
msgstr ""
"Клацніть Viewport Texture, яку ви щойно створили в інспекторі, а потім "
"натисніть «Призначити». Потім у спливаючому меню виберіть вікно перегляду, "
"яке ми відтворили раніше."

msgid ""
"Your sphere should now be colored in with the colors we rendered to the "
"Viewport."
msgstr ""
"Тепер ваша сфера має бути забарвлена кольорами, які ми відобразили у вікні "
"перегляду."

msgid ""
"Notice the ugly seam that forms where the texture wraps around? This is "
"because we are picking a color based on UV coordinates and UV coordinates do "
"not wrap around the texture. This is a classic problem in 2D map projection. "
"Game developers often have a 2-dimensional map they want to project onto a "
"sphere, but when it wraps around, it has large seams. There is an elegant "
"workaround for this problem that we will illustrate in the next section."
msgstr ""
"Помітили потворний шов, який утворюється там, де текстура обертається "
"навколо? Це тому, що ми вибираємо колір на основі УФ-координат, а УФ-"
"координати не обертаються навколо текстури. Це класична проблема в "
"двовимірній картографічній проекції. Розробники ігор часто мають двовимірну "
"карту, яку вони хочуть спроектувати на сферу, але коли вона обертається "
"навколо, вона має великі шви. Існує елегантне рішення цієї проблеми, яке ми "
"проілюструємо в наступному розділі."

msgid "Making the planet texture"
msgstr "Створення текстури планети"

msgid ""
"So now, when we render to our :ref:`SubViewport <class_SubViewport>`, it "
"appears magically on the sphere. But there is an ugly seam created by our "
"texture coordinates. So how do we get a range of coordinates that wrap "
"around the sphere in a nice way? One solution is to use a function that "
"repeats on the domain of our texture. ``sin`` and ``cos`` are two such "
"functions. Let's apply them to the texture and see what happens. Replace the "
"existing color code in the shader with the following:"
msgstr ""
"Тож тепер, коли ми візуалізуємо наш :ref:`SubViewport <class_SubViewport>`, "
"він чарівним чином з’являється на сфері. Але є потворний шов, створений "
"нашими координатами текстури. Отже, як ми отримуємо діапазон координат, який "
"добре обертається навколо сфери? Одним із рішень є використання функції, яка "
"повторюється в області нашої текстури. ``sin`` і ``cos`` є двома такими "
"функціями. Давайте застосуємо їх до текстури і подивимося, що вийде. "
"Замініть існуючий код кольору в шейдері на такий:"

msgid ""
"Not too bad. If you look around, you can see that the seam has now "
"disappeared, but in its place, we have pinching at the poles. This pinching "
"is due to the way Godot maps textures to spheres in "
"its :ref:`StandardMaterial3D <class_StandardMaterial3D>`. It uses a "
"projection technique called equirectangular projection, which translates a "
"spherical map onto a 2D plane."
msgstr ""
"Не дуже погано. Якщо озирнутися навколо, то можна побачити, що шов тепер "
"зник, але на його місці ми маємо защемлення на полюсах. Це щипання пов’язане "
"з тим, як Godot відображає текстури на сферах у "
"своєму :ref:`StandardMaterial3D <class_StandardMaterial3D>`. Він "
"використовує техніку проекції, яка називається рівнопрямокутною проекцією, "
"яка переводить сферичну карту на двовимірну площину."

msgid ""
"If you are interested in a little extra information on the technique, we "
"will be converting from spherical coordinates into Cartesian coordinates. "
"Spherical coordinates map the longitude and latitude of the sphere, while "
"Cartesian coordinates are, for all intents and purposes, a vector from the "
"center of the sphere to the point."
msgstr ""
"Якщо вас цікавить трохи додаткової інформації про техніку, ми будемо "
"конвертувати сферичні координати в декартові координати. Сферичні координати "
"відображають довготу та широту сфери, тоді як декартові координати, для всіх "
"намірів і цілей, є вектором від центру сфери до точки."

msgid ""
"For each pixel, we will calculate its 3D position on the sphere. From that, "
"we will use 3D noise to determine a color value. By calculating the noise in "
"3D, we solve the problem of the pinching at the poles. To understand why, "
"picture the noise being calculated across the surface of the sphere instead "
"of across the 2D plane. When you calculate across the surface of the sphere, "
"you never hit an edge, and hence you never create a seam or a pinch point on "
"the pole. The following code converts the ``UVs`` into Cartesian coordinates."
msgstr ""
"Для кожного пікселя ми розрахуємо його 3D-положення на сфері. З цього ми "
"будемо використовувати тривимірний шум для визначення значення кольору. "
"Розраховуючи шум у 3D, ми вирішуємо проблему защемлення на полюсах. Щоб "
"зрозуміти чому, уявіть шум, який обчислюється по поверхні сфери, а не по 2D "
"площині. Коли ви обчислюєте поверхню сфери, ви ніколи не торкаєтеся краю, а "
"отже, ви ніколи не створюєте шва чи точки защемлення на стовпі. Наступний "
"код перетворює ``UV`` в декартові координати."

msgid "And if we use ``unit`` as an output ``COLOR`` value, we get:"
msgstr ""
"І якщо ми використовуємо ``одиницю`` як вихідне значення ``COLOR``, ми "
"отримаємо:"

msgid ""
"Now that we can calculate the 3D position of the surface of the sphere, we "
"can use 3D noise to make the planet. We will be using this noise function "
"directly from a `Shadertoy <https://www.shadertoy.com/view/Xsl3Dl>`_:"
msgstr ""
"Тепер, коли ми можемо обчислити 3D-положення поверхні сфери, ми можемо "
"використовувати 3D-шум, щоб створити планету. Ми будемо використовувати цю "
"функцію шуму безпосередньо з `Shadertoy <https://www.shadertoy.com/view/"
"Xsl3Dl>`_:"

msgid ""
"All credit goes to the author, Inigo Quilez. It is published under the "
"``MIT`` licence."
msgstr "Вся заслуга автора, Ініго Кілеза. Публікується за ліцензією ``MIT``."

msgid ""
"Now to use ``noise``, add the following to the    ``fragment`` function:"
msgstr ""
"Тепер, щоб використовувати ``noise``, додайте наступне до функції "
"``fragment``:"

msgid "In order to highlight the texture, we set the material to unshaded."
msgstr "Щоб підкреслити текстуру, ми встановлюємо незатінений матеріал."

msgid ""
"You can see now that the noise indeed wraps seamlessly around the sphere. "
"Although this looks nothing like the planet you were promised. So let's move "
"onto something more colorful."
msgstr ""
"Тепер ви бачите, що шум справді плавно обертається навколо сфери. Хоча це "
"зовсім не схоже на планету, яку вам обіцяли. Отже, давайте перейдемо до "
"чогось більш барвистого."

msgid "Coloring the planet"
msgstr "Розфарбовуємо планету"

msgid ""
"Now to make the planet colors. While there are many ways to do this, for "
"now, we will stick with a gradient between water and land."
msgstr ""
"Тепер розфарбуємо планету. Хоча є багато способів зробити це, поки що ми "
"будемо дотримуватися градієнта між водою та землею."

msgid ""
"To make a gradient in GLSL, we use the ``mix`` function. ``mix`` takes two "
"values to interpolate between and a third argument to choose how much to "
"interpolate between them; in essence, it *mixes* the two values together. In "
"other APIs, this function is often called ``lerp``. However, ``lerp`` is "
"typically reserved for mixing two floats together; ``mix`` can take any "
"values whether it be floats or vector types."
msgstr ""
"Щоб зробити градієнт у GLSL, ми використовуємо функцію ``mix``. ``mix`` "
"приймає два значення для інтерполяції між ними та третій аргумент для вибору "
"кількості інтерполяції між ними; по суті, він *змішує* два значення разом. В "
"інших API ця функція часто називається ``lerp``. Проте ``lerp`` зазвичай "
"зарезервований для змішування двох плаваючих елементів разом; ``mix`` може "
"приймати будь-які значення, незалежно від того, чи це плаваючі чи векторні "
"типи."

msgid ""
"The first color is blue for the ocean. The second color is a kind of reddish "
"color (because all alien planets need red terrain). And finally, they are "
"mixed together by ``n * 0.5 + 0.5``. ``n`` smoothly varies between ``-1`` "
"and ``1``. So we map it into the ``0-1`` range that ``mix`` expects. Now you "
"can see that the colors change between blue and red."
msgstr ""
"Перший колір - блакитний для океану. Другий колір — червонуватий колір "
"(оскільки всім чужим планетам потрібна червона місцевість). І, нарешті, вони "
"змішуються за допомогою ``n * 0,5 + 0,5``. ``n`` плавно змінюється між "
"``-1`` та ``1``. Тому ми відображаємо його в діапазоні ``0-1``, який очікує "
"``mix``. Тепер ви бачите, що кольори змінюються між синім і червоним."

msgid ""
"That is a little more blurry than we want. Planets typically have a "
"relatively clear separation between land and sea. In order to do that, we "
"will change the last term to ``smoothstep(-0.1, 0.0, n)``. And thus the "
"whole line becomes:"
msgstr ""
"Це трохи розмитіше, ніж ми хочемо. Планети зазвичай мають відносно чітке "
"відокремлення між сушею та морем. Щоб зробити це, ми змінимо останній член "
"на ``smoothstep(-0.1, 0.0, n)``. Таким чином, весь рядок виглядає так:"

msgid ""
"What ``smoothstep`` does is return ``0`` if the third argument is below the "
"first and ``1`` if the third argument is larger than the second and smoothly "
"blends between ``0`` and ``1`` if the third number is between the first and "
"the second. So in this line, ``smoothstep`` returns ``0`` whenever ``n`` is "
"less than ``-0.1`` and it returns ``1`` whenever ``n`` is above ``0``."
msgstr ""
"«Smoothstep» повертає «0», якщо третій аргумент нижчий за перший, і «1», "
"якщо третій аргумент більший за другий і плавно переходить між «0» і «1». "
"``, якщо третє число знаходиться між першим і другим. Отже, у цьому рядку "
"``smoothstep`` повертає ``0``, коли ``n`` менше за ``-0,1``, і повертає "
"``1``, коли ``n`` перевищує ``0``."

msgid ""
"One more thing to make this a little more planet-y. The land shouldn't be so "
"blobby; let's make the edges a little rougher. A trick that is often used in "
"shaders to make rough looking terrain with noise is to layer levels of noise "
"over one another at various frequencies. We use one layer to make the "
"overall blobby structure of the continents. Then another layer breaks up the "
"edges a bit, and then another, and so on. What we will do is calculate ``n`` "
"with four lines of shader code instead of just one. ``n`` becomes:"
msgstr ""
"Ще одна річ, щоб зробити це трохи більше планети. Земля не повинна бути "
"такою плямистою; давайте зробимо краї трохи шорсткіше. Трюк, який часто "
"використовується в шейдерах, щоб зробити нерівну місцевість із шумом, "
"полягає в накладенні рівнів шуму один на інший на різних частотах. Ми "
"використовуємо один шар, щоб створити загальну пухлисту структуру "
"континентів. Потім інший шар трохи розбиває краї, а потім ще один і так "
"далі. Що ми зробимо, це обчислимо ``n`` за допомогою чотирьох рядків "
"шейдерного коду замість одного. ``n`` стає:"

msgid "And now the planet looks like:"
msgstr "А зараз планета виглядає так:"

msgid "Making an ocean"
msgstr "Створення океану"

msgid ""
"One final thing to make this look more like a planet. The ocean and the land "
"reflect light differently. So we want the ocean to shine a little more than "
"the land. We can do this by passing a fourth value into the ``alpha`` "
"channel of our output ``COLOR`` and using it as a Roughness map."
msgstr ""
"Остання річ, щоб зробити це більше схожим на планету. Океан і земля по-"
"різному відбивають світло. Тому ми хочемо, щоб океан сяяв трохи більше, ніж "
"суша. Ми можемо зробити це, передавши четверте значення в ``альфа`` канал "
"нашого результату ``COLOR`` і використовуючи його як карту шорсткості."

msgid ""
"This line returns ``0.3`` for water and ``1.0`` for land. This means that "
"the land is going to be quite rough, while the water will be quite smooth."
msgstr ""
"Цей рядок повертає ``0,3`` для води та ``1,0`` для землі. Це означає, що "
"земля буде досить нерівною, тоді як вода буде досить гладкою."

msgid ""
"And then, in the material, under the \"Metallic\" section, make sure "
"``Metallic`` is set to ``0`` and ``Specular`` is set to ``1``. The reason "
"for this is the water reflects light really well, but isn't metallic. These "
"values are not physically accurate, but they are good enough for this demo."
msgstr ""
"А потім у матеріалі в розділі «Металевий» переконайтеся, що для "
"``Металевий`` встановлено ``0``, а ``Дзеркальне`` — ``1``. Причина цього "
"полягає в тому, що вода дуже добре відбиває світло, але не є металевою. Ці "
"значення фізично не точні, але їх достатньо для цієї демонстрації."

msgid ""
"Next, under the \"Roughness\" section set the roughness texture to "
"a :ref:`Viewport Texture <class_ViewportTexture>` pointing to our planet "
"texture :ref:`SubViewport <class_SubViewport>`. Finally, set the ``Texture "
"Channel`` to ``Alpha``. This instructs the renderer to use the ``alpha`` "
"channel of our output ``COLOR`` as the ``Roughness`` value."
msgstr ""
"Далі в розділі «Шорсткість» встановіть текстуру шорсткості на :ref:`Viewport "
"Texture <class_ViewportTexture>`, яка вказує на текстуру нашої "
"планети :ref:`SubViewport <class_SubViewport>`. Нарешті, встановіть "
"``Текстурний канал`` на ``Альфа``. Це вказує рендереру використовувати "
"``альфа`` канал нашого результату ``COLOR`` як значення ``Roughness``."

msgid ""
"You'll notice that very little changes except that the planet is no longer "
"reflecting the sky. This is happening because, by default, when something is "
"rendered with an alpha value, it gets drawn as a transparent object over the "
"background. And since the default background of the :ref:`SubViewport "
"<class_SubViewport>` is opaque, the ``alpha`` channel of the :ref:`Viewport "
"Texture <class_ViewportTexture>` is ``1``, resulting in the planet texture "
"being drawn with slightly fainter colors and a ``Roughness`` value of ``1`` "
"everywhere. To correct this, we go into the :ref:`SubViewport "
"<class_SubViewport>` and enable the \"Transparent Bg\" property. Since we "
"are now rendering one transparent object on top of another, we want to "
"enable ``blend_premul_alpha``:"
msgstr ""
"Ви помітите, що зміни мало, за винятком того, що планета більше не "
"відображає небо. Це відбувається тому, що за замовчуванням, коли щось "
"відображається зі значенням альфа, воно малюється як прозорий об’єкт на тлі. "
"А оскільки фон за замовчуванням :ref:`SubViewport <class_SubViewport>` "
"непрозорий, ``альфа`` канал :ref:`Viewport Texture <class_ViewportTexture>` "
"має значення ``1``, що призводить до текстури планети. намальовані дещо "
"тьмянішими кольорами та скрізь зі значенням ``Шорсткості`` ``1``. Щоб "
"виправити це, ми переходимо до :ref:`SubViewport <class_SubViewport>` і "
"вмикаємо властивість «Transparent Bg». Оскільки ми зараз рендеримо один "
"прозорий об’єкт поверх іншого, ми хочемо ввімкнути ``blend_premul_alpha``:"

msgid ""
"This pre-multiplies the colors by the ``alpha`` value and then blends them "
"correctly together. Typically, when blending one transparent color on top of "
"another, even if the background has an ``alpha`` of ``0`` (as it does in "
"this case), you end up with weird color bleed issues. Setting "
"``blend_premul_alpha`` fixes that."
msgstr ""
"Це попередньо множить кольори на значення ``альфа``, а потім правильно їх "
"поєднує. Як правило, під час змішування одного прозорого кольору поверх "
"іншого, навіть якщо фон має ``альфа`` ``0`` (як це відбувається в цьому "
"випадку), у вас виникають дивні проблеми з виливом кольору. Налаштування "
"``blend_premul_alpha`` виправляє це."

msgid ""
"Now the planet should look like it is reflecting light on the ocean but not "
"the land. move around the :ref:`OmniLight3D <class_OmniLight3D>` in the "
"scene so you can see the effect of the reflections on the ocean."
msgstr ""
"Тепер планета має виглядати так, ніби вона відбиває світло від океану, а не "
"від землі. переміщайтеся навколо :ref:`OmniLight3D <class_OmniLight3D>` у "
"сцені, щоб ви могли побачити ефект відблисків на океані."

msgid ""
"And there you have it. A procedural planet generated using "
"a :ref:`SubViewport <class_SubViewport>`."
msgstr ""
"І ось воно. Процедурна планета, створена за допомогою :ref:`SubViewport "
"<class_SubViewport>`."
