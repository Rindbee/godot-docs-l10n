#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Your second 3D shader"
msgstr "Ваш другий 3D-шейдер"

msgid ""
"From a high-level, what Godot does is give the user a bunch of parameters "
"that can be optionally set (``AO``, ``SSS_Strength``, ``RIM``, etc.). These "
"parameters correspond to different complex effects (Ambient Occlusion, "
"SubSurface Scattering, Rim Lighting, etc.). When not written to, the code is "
"thrown out before it is compiled and so the shader does not incur the cost "
"of the extra feature. This makes it easy for users to have complex PBR-"
"correct shading, without writing complex shaders. Of course, Godot also "
"allows you to ignore all these parameters and write a fully customized "
"shader."
msgstr ""
"На високому рівні Godot надає користувачеві низку параметрів, які можна за "
"бажанням встановити (``AO``, ``SSS_Strength``, ``RIM`` тощо). Ці параметри "
"відповідають різним комплексним ефектам (Ambient Occlusion, SubSurface "
"Scattering, Rim Lighting тощо). Якщо код не записується, він викидається до "
"компіляції, тому шейдер не бере на себе витрати на додаткові функції. Це "
"спрощує для користувачів складне PBR-коректне затінення без написання "
"складних шейдерів. Звичайно, Godot також дозволяє ігнорувати всі ці "
"параметри та писати повністю налаштований шейдер."

msgid ""
"For a full list of these parameters see the :ref:`spatial shader "
"<doc_spatial_shader>` reference doc."
msgstr ""
"Щоб отримати повний список цих параметрів, перегляньте довідковий документ :"
"ref:`spatial shader <doc_spatial_shader>`."

msgid ""
"A difference between the vertex function and a fragment function is that the "
"vertex function runs per vertex and sets properties such as ``VERTEX`` "
"(position) and ``NORMAL``, while the fragment shader runs per pixel and, "
"most importantly, sets the ``ALBEDO`` color of the :ref:"
"`MeshInstance3D<class_MeshInstance3D>`."
msgstr ""
"Різниця між вершинною функцією та фрагментною функцією полягає в тому, що "
"вершинна функція виконується для кожної вершини та встановлює такі "
"властивості, як ``VERTEX`` (позиція) і ``NORMAL``, тоді як фрагментний "
"шейдер працює для кожного пікселя і, що найважливіше, встановлює колір "
"``ALBEDO`` для :ref:`MeshInstance3D<class_MeshInstance3D>`."

msgid "Your first spatial fragment function"
msgstr "Ваша перша функція просторового фрагмента"

msgid ""
"As mentioned in the previous part of this tutorial. The standard use of the "
"fragment function in Godot is to set up different material properties and "
"let Godot handle the rest. In order to provide even more flexibility, Godot "
"also provides things called render modes. Render modes are set at the top of "
"the shader, directly below ``shader_type``, and they specify what sort of "
"functionality you want the built-in aspects of the shader to have."
msgstr ""
"Як згадувалося в попередній частині цього посібника. Стандартне використання "
"функції фрагмента в Godot полягає в тому, щоб налаштувати різні властивості "
"матеріалу та дозволити Godot впоратися з рештою. Щоб забезпечити ще більшу "
"гнучкість, Godot також надає речі, які називаються режимами візуалізації. "
"Режими візуалізації встановлюються у верхній частині шейдера, безпосередньо "
"під ``shader_type``, і вони визначають, яку функціональність ви хочете мати "
"у вбудованих аспектах шейдера."

msgid ""
"For example, if you do not want to have lights affect an object, set the "
"render mode to ``unshaded``:"
msgstr ""
"Наприклад, якщо ви не хочете, щоб світло впливало на об’єкт, встановіть "
"режим візуалізації на ``unshaded``:"

msgid ""
"You can also stack multiple render modes together. For example, if you want "
"to use toon shading instead of more-realistic PBR shading, set the diffuse "
"mode and specular mode to toon:"
msgstr ""
"Ви також можете поєднати кілька режимів візуалізації разом. Наприклад, якщо "
"ви хочете використовувати мультяшне затінення замість більш реалістичного "
"затінення PBR, встановіть дифузний режим і дзеркальний режим на мультяшне:"

msgid ""
"This model of built-in functionality allows you to write complex custom "
"shaders by changing only a few parameters."
msgstr ""
"Ця модель вбудованої функціональності дозволяє писати складні власні "
"шейдери, змінюючи лише кілька параметрів."

msgid ""
"For a full list of render modes see the :ref:`Spatial shader reference "
"<doc_spatial_shader>`."
msgstr ""
"Щоб отримати повний список режимів візуалізації, перегляньте :ref:`довідку "
"про просторовий шейдер <doc_spatial_shader>`."

msgid ""
"In this part of the tutorial, we will walk through how to take the bumpy "
"terrain from the previous part and turn it into an ocean."
msgstr ""
"У цій частині підручника ми розповімо, як взяти вибоїсту місцевість із "
"попередньої частини та перетворити її на океан."

msgid ""
"First let's set the color of the water. We do that by setting ``ALBEDO``."
msgstr "Спочатку встановимо колір води. Ми робимо це, встановлюючи ``ALBEDO``."

msgid "``ALBEDO`` is a ``vec3`` that contains the color of the object."
msgstr "``ALBEDO`` - це ``vec3``, який містить колір об'єкта."

msgid "Let's set it to a nice shade of blue."
msgstr "Давайте встановимо гарний відтінок синього."

msgid ""
"We set it to a very dark shade of blue because most of the blueness of the "
"water will come from reflections from the sky."
msgstr ""
"Ми встановлюємо дуже темний відтінок синього, тому що більша частина "
"блакитного відтінку води походить від відблисків неба."

msgid ""
"The PBR model that Godot uses relies on two main parameters: ``METALLIC`` "
"and ``ROUGHNESS``."
msgstr ""
"Модель PBR, яку використовує Годо, спирається на два основні параметри: "
"``МЕТАЛ`` і ``ШОРСТКІСТЬ``."

msgid ""
"``ROUGHNESS`` specifies how smooth/rough the surface of a material is. A low "
"``ROUGHNESS`` will make a material appear like a shiny plastic, while a high "
"roughness makes the material appear more solid in color."
msgstr ""
"``ROUGHNESS`` визначає, наскільки гладка/шорстка поверхня матеріалу. Низька "
"шорсткість зробить матеріал схожим на блискучий пластик, тоді як висока "
"шорсткість зробить матеріал більш твердим за кольором."

msgid ""
"``METALLIC`` specifies how much like a metal the object is. It is better set "
"close to ``0`` or ``1``. Think of ``METALLIC`` as changing the balance "
"between the reflection and the ``ALBEDO`` color. A high ``METALLIC`` almost "
"ignores ``ALBEDO`` altogether, and looks like a mirror of the sky. While a "
"low ``METALLIC`` has a more equal representation of sky color and ``ALBEDO`` "
"color."
msgstr ""
"``METALLIC`` визначає, наскільки об'єкт схожий на метал. Краще встановити "
"близько до ``0`` або ``1``. Подумайте про ``METALLIC`` як про зміну балансу "
"між відображенням і кольором ``ALBEDO``. Високий ``METALLIC`` майже ігнорує "
"``ALBEDO`` взагалі, і виглядає як дзеркало неба. Тоді як низький "
"``METALLIC`` має більш рівне представлення кольору неба та кольору "
"``ALBEDO``."

msgid ""
"``ROUGHNESS`` increases from ``0`` to ``1`` from left to right while "
"``METALLIC`` increase from ``0`` to ``1`` from top to bottom."
msgstr ""
"``ШОРСТКІСТЬ`` збільшується від ``0`` до ``1`` зліва направо, а ``МЕТАЛІК`` "
"збільшується від ``0`` до ``1`` зверху вниз."

msgid ""
"``METALLIC`` should be close to ``0`` or ``1`` for proper PBR shading. Only "
"set it between them for blending between materials."
msgstr ""
"``METALLIC`` має бути близьким до ``0`` або ``1`` для правильного затінення "
"PBR. Встановлюйте його лише між ними для змішування між матеріалами."

msgid ""
"Water is not a metal, so we will set its ``METALLIC`` property to ``0.0``. "
"Water is also highly reflective, so we will set its ``ROUGHNESS`` property "
"to be quite low as well."
msgstr ""
"Вода не є металом, тому ми встановимо для її властивості ``METALLIC`` "
"значення ``0.0``. Вода також має високу відбивну здатність, тому ми також "
"встановимо її властивість ``ШОРСТКІСТЬ`` досить низькою."

msgid ""
"Now we have a smooth plastic looking surface. It is time to think about some "
"particular properties of water that we want to emulate. There are two main "
"ones that will take this from a weird plastic surface to nice stylized "
"water. The first is specular reflections. Specular reflections are those "
"bright spots you see from where the sun reflects directly into your eye. The "
"second is fresnel reflectance. Fresnel reflectance is the property of "
"objects to become more reflective at shallow angles. It is the reason why "
"you can see into water below you, but farther away it reflects the sky."
msgstr ""
"Тепер ми маємо гладку пластикову поверхню. Настав час подумати про деякі "
"особливі властивості води, які ми хочемо наслідувати. Є два основних, які "
"перенесуть це від дивної пластикової поверхні до красивої стилізованої води. "
"По-перше, це дзеркальні відбиття. Дзеркальне відображення – це ті яскраві "
"плями, які ви бачите звідти, де сонце відбивається прямо у ваше око. По-"
"друге, це коефіцієнт відбиття Френеля. Коефіцієнт відбиття Френеля — це "
"властивість об’єктів ставати більш відбиваючими під невеликими кутами. Це "
"причина, чому ви можете бачити воду під собою, але далі вона відображає небо."

msgid ""
"In order to increase the specular reflections, we will do two things. First, "
"we will change the render mode for specular to toon because the toon render "
"mode has larger specular highlights."
msgstr ""
"Щоб збільшити дзеркальні відбиття, ми зробимо дві речі. По-перше, ми змінимо "
"режим візуалізації для specular на toon, оскільки режим рендерингу toon має "
"більші відблиски."

msgid ""
"Second we will add rim lighting. Rim lighting increases the effect of light "
"at glancing angles. Usually it is used to emulate the way light passes "
"through fabric on the edges of an object, but we will use it here to help "
"achieve a nice watery effect."
msgstr ""
"По-друге, ми додамо освітлення обода. Підсвічування обода посилює ефект "
"світла під кутами огляду. Зазвичай він використовується для імітації того, "
"як світло проходить через тканину на краях об’єкта, але ми використаємо його "
"тут, щоб допомогти досягти приємного водянистого ефекту."

msgid ""
"In order to add fresnel reflectance, we will compute a fresnel term in our "
"fragment shader. Here, we aren't going to use a real fresnel term for "
"performance reasons. Instead, we'll approximate it using the dot product of "
"the ``NORMAL`` and ``VIEW`` vectors. The ``NORMAL`` vector points away from "
"the mesh's surface, while the ``VIEW`` vector is the direction between your "
"eye and that point on the surface. The dot product between them is a handy "
"way to tell when you are looking at the surface head-on or at a glancing "
"angle."
msgstr ""
"Щоб додати коефіцієнт відбиття френеля, ми обчислимо член френеля в нашому "
"фрагментному шейдері. Тут ми не будемо використовувати справжній термін "
"Френеля з міркувань продуктивності. Натомість ми апроксимуємо його за "
"допомогою скалярного добутку векторів ``NORMAL`` і ``VIEW``. Вектор "
"``NORMAL`` вказує від поверхні сітки, тоді як вектор ``VIEW`` є напрямком "
"між вашим оком і цією точкою на поверхні. Скалярний добуток між ними — це "
"зручний спосіб визначити, що ви дивитеся на поверхню прямо чи під кутом."

msgid ""
"And mix it into both ``ROUGHNESS`` and ``ALBEDO``. This is the benefit of "
"ShaderMaterials over StandardMaterial3Ds. With StandardMaterial3D, we could "
"set these properties with a texture, or to a flat number. But with shaders "
"we can set them based on any mathematical function that we can dream up."
msgstr ""
"І змішайте це в `` ШОРСТКІСТЬ `` і `` АЛЬБЕДО``. Це перевага ShaderMaterials "
"над StandardMaterial3Ds. За допомогою StandardMaterial3D ми могли встановити "
"ці властивості за допомогою текстури або рівного числа. Але за допомогою "
"шейдерів ми можемо встановити їх на основі будь-якої математичної функції, "
"про яку тільки можемо мріяти."

msgid ""
"And now, with only 5 lines of code, you can have complex looking water. Now "
"that we have lighting, this water is looking too bright. Let's darken it. "
"This is done easily by decreasing the values of the ``vec3`` we pass into "
"``ALBEDO``. Let's set them to ``vec3(0.01, 0.03, 0.05)``."
msgstr ""
"І тепер, маючи лише 5 рядків коду, ви можете мати складну воду. Тепер, коли "
"у нас є освітлення, ця вода виглядає занадто яскравою. Давайте затемнити "
"його. Це легко зробити, зменшивши значення ``vec3``, які ми передаємо в "
"``ALBEDO``. Давайте встановимо для них значення ``vec3(0.01, 0.03, 0.05)``."

msgid "Animating with ``TIME``"
msgstr "Анімація за допомогою ``TIME``"

msgid ""
"Going back to the vertex function, we can animate the waves using the built-"
"in variable ``TIME``."
msgstr ""
"Повертаючись до вершинної функції, ми можемо анімувати хвилі за допомогою "
"вбудованої змінної ``TIME``."

msgid ""
"``TIME`` is a built-in variable that is accessible from the vertex and "
"fragment functions."
msgstr ""
"``TIME`` — це вбудована змінна, яка доступна з функцій вершин і фрагментів."

msgid ""
"In the last tutorial we calculated height by reading from a heightmap. For "
"this tutorial, we will do the same. Put the heightmap code in a function "
"called ``height()``."
msgstr ""
"У минулому посібнику ми обчислювали висоту, читаючи з карти висот. Для цього "
"підручника ми зробимо те саме. Помістіть код карти висот у функцію під "
"назвою ``height()``."

msgid ""
"In order to use ``TIME`` in the ``height()`` function, we need to pass it in."
msgstr ""
"Щоб використовувати ``TIME`` у функції ``height()``, нам потрібно передати "
"його."

msgid "And make sure to correctly pass it in inside the vertex function."
msgstr ""
"І переконайтеся, що ви правильно передали його всередину вершинної функції."

msgid ""
"Instead of using a normalmap to calculate normals. We are going to compute "
"them manually in the ``vertex()`` function. To do so use the following line "
"of code."
msgstr ""
"Замість використання карти нормалей для обчислення нормалей. Ми збираємося "
"обчислити їх вручну у функції ``vertex()``. Для цього використовуйте "
"наступний рядок коду."

msgid ""
"We need to compute ``NORMAL`` manually because in the next section we will "
"be using math to create complex-looking waves."
msgstr ""
"Нам потрібно обчислити ``NORMAL`` вручну, оскільки в наступному розділі ми "
"будемо використовувати математику для створення складних на вигляд хвиль."

msgid ""
"Now, we are going to make the ``height()`` function a little more "
"complicated by offsetting ``position`` by the cosine of ``TIME``."
msgstr ""
"Тепер ми збираємося зробити функцію ``height()`` трохи складнішою, зміщуючи "
"``position`` на косинус ``TIME``."

msgid ""
"This results in waves that move slowly, but not in a very natural way. The "
"next section will dig deeper into using shaders to create more complex "
"effects, in this case realistic waves, by adding a few more mathematical "
"functions."
msgstr ""
"Це призводить до хвиль, які рухаються повільно, але не дуже природним чином. "
"У наступному розділі глибше буде розглянуто використання шейдерів для "
"створення складніших ефектів, у цьому випадку реалістичних хвиль, додавши ще "
"кілька математичних функцій."

msgid "Advanced effects: waves"
msgstr "Розширені ефекти: хвилі"

msgid ""
"What makes shaders so powerful is that you can achieve complex effects by "
"using math. To illustrate this, we are going to take our waves to the next "
"level by modifying the ``height()`` function and by introducing a new "
"function called ``wave()``."
msgstr ""
"Що робить шейдери такими потужними, так це те, що ви можете досягти складних "
"ефектів за допомогою математики. Щоб проілюструвати це, ми збираємося "
"підняти наші хвилі на наступний рівень, змінивши функцію ``height()`` і "
"ввівши нову функцію під назвою ``wave()``."

msgid ""
"``wave()`` has one parameter, ``position``, which is the same as it is in "
"``height()``."
msgstr ""
"``wave()`` має один параметр, ``position``, який є таким самим, як і у "
"``height()``."

msgid ""
"We are going to call ``wave()`` multiple times in ``height()`` in order to "
"fake the way waves look."
msgstr ""
"Ми будемо викликати ``wave()`` кілька разів у ``height()``, щоб підробити "
"вигляд хвиль."

msgid "At first this looks complicated. So let's go through it line-by-line."
msgstr ""
"Спочатку це виглядає складно. Тож давайте розглянемо це рядок за рядком."

msgid ""
"Offset the position by the ``noise`` texture. This will make the waves "
"curve, so they won't be straight lines completely aligned with the grid."
msgstr ""
"Зміщення позиції текстурою ``шум``. Це зробить хвилі кривими, тому вони не "
"будуть прямими лініями, повністю вирівняними з сіткою."

msgid ""
"Define a wave-like function using ``sin()`` and ``position``. Normally "
"``sin()`` waves are very round. We use ``abs()`` to absolute to give them a "
"sharp ridge and constrain them to the 0-1 range. And then we subtract it "
"from ``1.0`` to put the peak on top."
msgstr ""
"Визначте хвилеподібну функцію за допомогою ``sin()`` і ``position``. "
"Зазвичай хвилі ``sin()`` дуже круглі. Ми використовуємо ``abs()`` для "
"абсолютизації, щоб надати їм різкий хребет і обмежити їх діапазоном 0-1. "
"Потім ми віднімаємо його від ``1.0``, щоб поставити пік зверху."

msgid ""
"Multiply the x-directional wave by the y-directional wave and raise it to a "
"power to sharpen the peaks. Then subtract that from ``1.0`` so that the "
"ridges become peaks and raise that to a power to sharpen the ridges."
msgstr ""
"Помножте хвилю, спрямовану по x, на хвилю, спрямовану по осі y, і зведіть її "
"до степеня, щоб піки були різкішими. Потім відніміть це значення від ``1.0`` "
"так, щоб хребти стали піками, і зведіть це до степеня, щоб загострити хребти."

msgid ""
"We can now replace the contents of our ``height()`` function with ``wave()``."
msgstr ""
"Тепер ми можемо замінити вміст нашої функції ``height()`` на ``wave()``."

msgid "Using this, you get:"
msgstr "Використовуючи це, ви отримуєте:"

msgid ""
"The shape of the sin wave is too obvious. So let's spread the waves out a "
"bit. We do this by scaling ``position``."
msgstr ""
"Форма хвилі гріха надто очевидна. Тож давайте трохи розвіємо хвилі. Ми "
"робимо це шляхом масштабування ``position``."

msgid "Now it looks much better."
msgstr "Тепер це виглядає набагато краще."

msgid ""
"We can do even better if we layer multiple waves on top of each other at "
"varying frequencies and amplitudes. What this means is that we are going to "
"scale position for each one to make the waves thinner or wider (frequency). "
"And we are going to multiply the output of the wave to make them shorter or "
"taller (amplitude)."
msgstr ""
"Ми можемо зробити ще краще, якщо накладемо кілька хвиль одна на одну з "
"різними частотами та амплітудами. Це означає, що ми будемо масштабувати "
"положення для кожного з них, щоб зробити хвилі тоншими або ширшими "
"(частота). І ми збираємося помножити вихід хвилі, щоб зробити їх коротшими "
"або вищими (амплітуда)."

msgid ""
"Here is an example for how you could layer the four waves to achieve nicer "
"looking waves."
msgstr ""
"Ось приклад того, як ви можете нашаровувати чотири хвилі, щоб отримати "
"красивіші хвилі."

msgid ""
"Note that we add time to two and subtract it from the other two. This makes "
"the waves move in different directions creating a complex effect. Also note "
"that the amplitudes (the number the result is multiplied by) all add up to "
"``1.0``. This keeps the wave in the 0-1 range."
msgstr ""
"Зверніть увагу, що ми додаємо час до двох і віднімаємо його від двох інших. "
"Це змушує хвилі рухатися в різних напрямках, створюючи складний ефект. Також "
"зауважте, що всі амплітуди (число, на яке множиться результат) у сумі "
"становлять ``1,0``. Це тримає хвилю в діапазоні 0-1."

msgid ""
"With this code you should end up with more complex looking waves and all you "
"had to do was add a bit of math!"
msgstr ""
"З цим кодом у вас повинні вийти складніші хвилі, і все, що вам потрібно "
"зробити, це додати трохи математики!"

msgid ""
"For more information about Spatial shaders read the :ref:`Shading Language "
"<doc_shading_language>` doc and the :ref:`Spatial Shaders "
"<doc_spatial_shader>` doc. Also look at more advanced tutorials in the :ref:"
"`Shading section <toc-learn-features-shading>` and the :ref:`3D <toc-learn-"
"features-3d>` sections."
msgstr ""
"Щоб дізнатися більше про просторові шейдери, ознайомтеся з документами :ref:"
"`Shading Language <doc_shading_language>` і :ref:`Spatial Shaders "
"<doc_spatial_shader>`. Також подивіться на більш просунуті підручники в :ref:"
"`розділі Shading <toc-learn-features-shading>` і :ref:`3D <toc-learn-"
"features-3d>` розділах."
