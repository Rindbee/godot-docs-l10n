#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Your first 2D shader"
msgstr "Ваш перший 2D-шейдер"

msgid "Introduction"
msgstr "Вступ"

msgid ""
"Shaders are special programs that execute on the GPU and are used for "
"rendering graphics. All modern rendering is done with shaders. For a more "
"detailed description of what shaders are please see :ref:`What are shaders "
"<doc_introduction_to_shaders>`."
msgstr ""
"Шейдери — це спеціальні програми, які виконуються на графічному процесорі та "
"використовуються для відтворення графіки. Увесь сучасний рендеринг "
"виконується за допомогою шейдерів. Для більш детального опису того, що таке "
"шейдери, перегляньте :ref:`Що таке шейдери <doc_introduction_to_shaders>`."

msgid ""
"This tutorial will focus on the practical aspects of writing shader programs "
"by walking you through the process of writing a shader with both vertex and "
"fragment functions. This tutorial targets absolute beginners to shaders."
msgstr ""
"Цей підручник зосередиться на практичних аспектах написання шейдерних "
"програм, провівши вас через процес написання шейдера як з вершинними, так і "
"з фрагментними функціями. Цей підручник орієнтований на абсолютних новачків "
"у шейдерах."

msgid ""
"If you have experience writing shaders and are just looking for an overview "
"of how shaders work in Godot, see the :ref:`Shading Reference <toc-shading-"
"reference>`."
msgstr ""
"Якщо у вас є досвід написання шейдерів і ви просто шукаєте огляд того, як "
"шейдери працюють у Godot, перегляньте :ref:`Довідник із затінення <toc-"
"shading-reference>`."

msgid "Setup"
msgstr "Налаштування"

msgid ""
":ref:`CanvasItem shaders <doc_canvas_item_shader>` are used to draw all 2D "
"objects in Godot, while :ref:`Spatial <doc_spatial_shader>` shaders are used "
"to draw all 3D objects."
msgstr ""
":ref:`Шейдери CanvasItem <doc_canvas_item_shader>` використовуються для "
"малювання всіх 2D-об’єктів у Godot, тоді як шейдери :ref:`Spatial "
"<doc_spatial_shader>` використовуються для малювання всіх 3D-об’єктів."

msgid ""
"In order to use a shader it must be attached inside a :ref:`Material "
"<class_Material>` which must be attached to an object. Materials are a type "
"of :ref:`Resource <doc_resources>`. To draw multiple objects with the same "
"material, the material must be attached to each object."
msgstr ""
"Щоб використовувати шейдер, він має бути прикріплений до :ref:`Material "
"<class_Material>`, який має бути прикріплений до об’єкта. Матеріали є типом :"
"ref:`Ресурс <doc_resources>`. Щоб намалювати кілька об’єктів одним і тим "
"самим матеріалом, матеріал має бути прикріплений до кожного об’єкта."

msgid ""
"To begin, create a Sprite2D node. :ref:`You can use any CanvasItem "
"<doc_custom_drawing_in_2d>`, so long as it is drawing to the canvas, so for "
"this tutorial we will use a Sprite2D, as it is the easiest CanvasItem to "
"start drawing with."
msgstr ""
"Для початку створіть вузол Sprite2D. :ref:`Ви можете використовувати будь-"
"який CanvasItem <doc_custom_drawing_in_2d>`, якщо він малює на полотні, тому "
"для цього уроку ми будемо використовувати Sprite2D, оскільки це найпростіший "
"CanvasItem для початку малювання."

msgid ""
"In the Inspector, click beside \"Texture\" where it says \"[empty]\" and "
"select \"Load\", then select \"icon.svg\". For new projects, this is the "
"Godot icon. You should now see the icon in the viewport."
msgstr ""
"В інспекторі клацніть поруч із «Текстурою», де написано «[пусто]», виберіть "
"«Завантажити», а потім виберіть «icon.svg». Для нових проектів це значок "
"Годо. Тепер ви повинні побачити значок у вікні перегляду."

msgid ""
"Next, look down in the Inspector, under the CanvasItem section, click beside "
"\"Material\" and select \"New ShaderMaterial\". This creates a new Material "
"resource. Click on the sphere that appears. Godot currently doesn't know "
"whether you are writing a CanvasItem Shader or a Spatial Shader and it "
"previews the output of spatial shaders. So what you are seeing is the output "
"of the default Spatial Shader."
msgstr ""
"Далі подивіться вниз в інспекторі, у розділі CanvasItem, клацніть біля "
"«Material» і виберіть «New ShaderMaterial». Це створює новий матеріальний "
"ресурс. Натисніть на сферу, що з'явиться. Наразі Godot не знає, чи пишете ви "
"шейдер CanvasItem чи просторовий шейдер, і попередньо переглядає результат "
"просторових шейдерів. Отже, ви бачите результат просторового шейдера за "
"замовчуванням."

msgid ""
"Click beside \"Shader\" and select \"New Shader\". Finally, click on the "
"shader you just created and the shader editor will open. You are now ready "
"to begin writing your first shader."
msgstr ""
"Клацніть поруч із «Шейдером» і виберіть «Новий шейдер». Нарешті клацніть "
"шейдер, який ви щойно створили, і відкриється редактор шейдерів. Тепер ви "
"готові почати писати свій перший шейдер."

msgid "Your first CanvasItem shader"
msgstr "Ваш перший шейдер CanvasItem"

msgid ""
"In Godot, all shaders start with a line specifying what type of shader they "
"are. It uses the following format:"
msgstr ""
"У Godot усі шейдери починаються з рядка, який визначає тип шейдера. Він "
"використовує такий формат:"

msgid ""
"Because we are writing a CanvasItem shader, we specify ``canvas_item`` in "
"the first line. All our code will go beneath this declaration."
msgstr ""
"Оскільки ми пишемо шейдер CanvasItem, ми вказуємо ``canvas_item`` у першому "
"рядку. Весь наш код буде розміщено під цією декларацією."

msgid ""
"This line tells the engine which built-in variables and functionality to "
"supply you with."
msgstr ""
"Цей рядок повідомляє механізму, які вбудовані змінні та функціональні "
"можливості надати вам."

msgid ""
"In Godot you can override three functions to control how the shader "
"operates; ``vertex``, ``fragment``, and ``light``. This tutorial will walk "
"you through writing a shader with both vertex and fragment functions. Light "
"functions are significantly more complex than vertex and fragment functions "
"and so will not be covered here."
msgstr ""
"У Godot ви можете змінити три функції, щоб керувати роботою шейдера; "
"``вершина``, ``фрагмент`` і ``світло``. Цей підручник допоможе вам створити "
"шейдер із функціями вершин і фрагментів. Функції світла значно складніші, "
"ніж функції вершин і фрагментів, тому тут не розглядатимуться."

msgid "Your first fragment function"
msgstr "Ваша перша функція фрагмента"

msgid ""
"The fragment function runs for every pixel in a Sprite2D and determines what "
"color that pixel should be."
msgstr ""
"Функція фрагмента виконується для кожного пікселя в Sprite2D і визначає "
"колір цього пікселя."

msgid ""
"They are restricted to the pixels covered by the Sprite2D, that means you "
"cannot use one to, for example, create an outline around a Sprite2D."
msgstr ""
"Вони обмежені пікселями, охопленими Sprite2D, це означає, що ви не можете "
"використовувати один, щоб, наприклад, створити контур навколо Sprite2D."

msgid ""
"The most basic fragment function does nothing except assign a single color "
"to every pixel."
msgstr ""
"Найпростіша функція фрагменту не робить нічого, крім призначення одного "
"кольору кожному пікселю."

msgid ""
"We do so by writing a ``vec4`` to the built-in variable ``COLOR``. ``vec4`` "
"is shorthand for constructing a vector with 4 numbers. For more information "
"about vectors see the :ref:`Vector math tutorial <doc_vector_math>`. "
"``COLOR`` is both an input variable to the fragment function and the final "
"output from it."
msgstr ""
"Ми робимо це, записуючи ``vec4`` у вбудовану змінну ``COLOR``. ``vec4`` — "
"скорочення для побудови вектора з 4 чисел. Для отримання додаткової "
"інформації про вектори перегляньте :ref:`підручник з векторної математики "
"<doc_vector_math>`. ``COLOR`` є як вхідною змінною функції фрагмента, так і "
"кінцевим її виходом."

msgid ""
"Congratulations! You're done. You have successfully written your first "
"shader in Godot."
msgstr "Щиро вітаю! Ви готові. Ви успішно написали свій перший шейдер у Godot."

msgid "Now let's make things more complex."
msgstr "Тепер давайте ускладнимо речі."

msgid ""
"There are many inputs to the fragment function that you can use for "
"calculating ``COLOR``. ``UV`` is one of them. UV coordinates are specified "
"in your Sprite2D (without you knowing it!) and they tell the shader where to "
"read from textures for each part of the mesh."
msgstr ""
"Існує багато вхідних даних для функції фрагменту, які можна використовувати "
"для обчислення ``COLOR``. ``UV`` - один з них. Ультрафіолетові координати "
"вказуються у вашому Sprite2D (без вашого відома!), і вони вказують шейдеру, "
"де зчитувати текстури для кожної частини сітки."

msgid ""
"In the fragment function you can only read from ``UV``, but you can use it "
"in other functions or to assign values to ``COLOR`` directly."
msgstr ""
"У функції фрагмента ви можете читати лише з ``UV``, але ви можете "
"використовувати його в інших функціях або призначати значення безпосередньо "
"``COLOR``."

msgid "``UV`` varies between 0-1 from left-right and from top-bottom."
msgstr "``UV`` змінюється в межах 0-1 зліва направо та зверху вниз."

msgid "Using ``TEXTURE`` built-in"
msgstr "Використання вбудованої ``ТЕКСТУРИ``"

msgid ""
"The default fragment function reads from the set Sprite2D texture and "
"displays it."
msgstr ""
"Функція фрагмента за замовчуванням читає зі встановленої текстури Sprite2D і "
"відображає її."

msgid ""
"When you want to adjust a color in a Sprite2D you can adjust the color from "
"the texture manually like in the code below."
msgstr ""
"Якщо ви хочете налаштувати колір у Sprite2D, ви можете налаштувати колір "
"текстури вручну, як показано в коді нижче."

msgid ""
"Certain nodes, like Sprite2Ds, have a dedicated texture variable that can be "
"accessed in the shader using ``TEXTURE``. If you want to use the Sprite2D "
"texture to combine with other colors, you can use the ``UV`` with the "
"``texture`` function to access this variable. Use them to redraw the "
"Sprite2D with the texture."
msgstr ""
"Певні вузли, наприклад Sprite2D, мають спеціальну змінну текстури, до якої "
"можна отримати доступ у шейдері за допомогою ``TEXTURE``. Якщо ви хочете "
"використовувати текстуру Sprite2D для поєднання з іншими кольорами, ви "
"можете використовувати ``UV`` з функцією ``texture`` для доступу до цієї "
"змінної. Використовуйте їх, щоб перемалювати Sprite2D з текстурою."

msgid "Uniform input"
msgstr "Рівномірне введення"

msgid ""
"Uniform input is used to pass data into a shader that will be the same "
"across the entire shader."
msgstr ""
"Уніфікований вхід використовується для передачі даних у шейдер, який буде "
"однаковим для всього шейдера."

msgid ""
"You can use uniforms by defining them at the top of your shader like so:"
msgstr ""
"Ви можете використовувати форму, визначивши її у верхній частині шейдера так:"

msgid ""
"For more information about usage see the :ref:`Shading Language doc "
"<doc_shading_language>`."
msgstr ""
"Додаткову інформацію про використання див. у :ref:`документації Shading "
"Language <doc_shading_language>`."

msgid "Add a uniform to change the amount of blue in our Sprite2D."
msgstr "Додайте форму, щоб змінити кількість синього кольору в Sprite2D."

msgid ""
"Now you can change the amount of blue in the Sprite2D from the editor. Look "
"back at the Inspector under where you created your shader. You should see a "
"section called \"Shader Param\". Unfold that section and you will see the "
"uniform you just declared. If you change the value in the editor, it will "
"overwrite the default value you provided in the shader."
msgstr ""
"Тепер ви можете змінити кількість синього кольору в Sprite2D з редактора. "
"Поверніться до інспектора під тим місцем, де ви створили свій шейдер. Ви "
"повинні побачити розділ під назвою «Параметр шейдера». Розгорніть цей "
"розділ, і ви побачите уніформу, яку щойно задекларували. Якщо ви зміните "
"значення в редакторі, воно перезапише значення за замовчуванням, яке ви "
"надали в шейдері."

msgid "Interacting with shaders from code"
msgstr "Взаємодія з шейдерами з коду"

msgid ""
"You can change uniforms from code using the function "
"``set_shader_parameter()`` which is called on the node's material resource. "
"With a Sprite2D node, the following code can be used to set the ``blue`` "
"uniform."
msgstr ""
"Ви можете змінити форму з коду за допомогою функції "
"``set_shader_parameter()``, яка викликається на матеріальному ресурсі вузла. "
"За допомогою вузла Sprite2D наступний код можна використовувати для "
"встановлення ``блакитної`` форми."

msgid ""
"Note that the name of the uniform is a string. The string must match exactly "
"with how it is written in the shader, including spelling and case."
msgstr ""
"Зверніть увагу, що назва уніформи – рядок. Рядок має точно відповідати тому, "
"як він написаний у шейдері, включаючи орфографію та регістр."

msgid "Your first vertex function"
msgstr "Ваша перша вершинна функція"

msgid "Now that we have a fragment function, let's write a vertex function."
msgstr ""
"Тепер, коли у нас є функція фрагмента, давайте напишемо функцію вершини."

msgid ""
"Use the vertex function to calculate where on the screen each vertex should "
"end up."
msgstr ""
"Використовуйте функцію вершини, щоб обчислити, де на екрані має опинитися "
"кожна вершина."

msgid ""
"The most important variable in the vertex function is ``VERTEX``. Initially, "
"it specifies the vertex coordinates in your model, but you also write to it "
"to determine where to actually draw those vertices. ``VERTEX`` is a ``vec2`` "
"that is initially presented in local-space (i.e. not relative to the camera, "
"viewport, or parent nodes)."
msgstr ""
"Найважливішою змінною у функції вершини є ``VERTEX``. Спочатку він визначає "
"координати вершин у вашій моделі, але ви також пишете в нього, щоб "
"визначити, де насправді малювати ці вершини. ``VERTEX`` - це ``vec2``, який "
"спочатку представлено в локальному просторі (тобто не відносно камери, вікна "
"перегляду або батьківських вузлів)."

msgid "You can offset the vertices by directly adding to ``VERTEX``."
msgstr "Ви можете зміщувати вершини, безпосередньо додаючи до ``VERTEX``."

msgid ""
"Combined with the ``TIME`` built-in variable, this can be used for basic "
"animation."
msgstr ""
"У поєднанні з вбудованою змінною ``TIME`` це можна використовувати для "
"базової анімації."

msgid "Conclusion"
msgstr "Висновки"

msgid ""
"At their core, shaders do what you have seen so far, they compute ``VERTEX`` "
"and ``COLOR``. It is up to you to dream up more complex mathematical "
"strategies for assigning values to those variables."
msgstr ""
"За своєю суттю шейдери роблять те, що ви бачили досі, вони обчислюють "
"``VERTEX`` і ``COLOR``. Вам належить придумати складніші математичні "
"стратегії для присвоєння значень цим змінним."

msgid ""
"For inspiration, take a look at some of the more advanced shader tutorials, "
"and look at other sites like `Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ and `The Book of Shaders <https://"
"thebookofshaders.com>`_."
msgstr ""
"Щоб отримати натхнення, подивіться на деякі з більш просунутих навчальних "
"посібників із шейдерів і подивіться на інші сайти, як `Shadertoy <https://"
"www.shadertoy.com/results?query=&sort=popular&from=10&num=4>`_ і `Книга "
"шейдерів <https://thebookofshaders.com>`_."
