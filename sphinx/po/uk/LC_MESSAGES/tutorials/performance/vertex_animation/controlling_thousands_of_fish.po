#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Controlling thousands of fish with Particles"
msgstr "Керуйте тисячами риб за допомогою частинок"

msgid ""
"The problem with :ref:`MeshInstance3D <class_MeshInstance3D>` is that it is "
"expensive to update their transform array. It is great for placing many "
"static objects around the scene. But it is still difficult to move the "
"objects around the scene."
msgstr ""
"Проблема з :ref:`MeshInstance3D <class_MeshInstance3D>` полягає в тому, що "
"оновлювати їх масив трансформації дорого. Це чудово підходить для розміщення "
"багатьох статичних об’єктів навколо сцени. Але все одно важко переміщати "
"предмети по сцені."

msgid ""
"To make each instance move in an interesting way, we will use a :ref:"
"`GPUParticles3D <class_GPUParticles3D>` node. Particles take advantage of "
"GPU acceleration by computing and setting the per-instance information in a :"
"ref:`Shader <class_Shader>`."
msgstr ""
"Щоб кожен екземпляр рухався цікавим способом, ми будемо використовувати "
"вузол :ref:`GPUParticles3D <class_GPUParticles3D>`. Частинки використовують "
"переваги прискорення GPU, обчислюючи та встановлюючи інформацію для кожного "
"екземпляра в :ref:`Shader <class_Shader>`."

msgid ""
"First create a Particles node. Then, under \"Draw Passes\" set the "
"Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under "
"\"Process Material\" create a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"Спочатку створіть вузол Particles. Потім у розділі «Пропуски малювання» "
"встановіть параметр «Прохід малювання 1» для вашої :ref:`Mesh <class_Mesh>`. "
"Потім у розділі «Process Material» створіть новий :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."

msgid "Set the ``shader_type`` to ``particles``."
msgstr "Встановіть ``shader_type`` на ``particles``."

msgid "Then add the following two functions:"
msgstr "Потім додайте такі дві функції:"

msgid ""
"These functions come from the default :ref:`ParticleProcessMaterial "
"<class_ParticleProcessMaterial>`. They are used to generate a random number "
"from each particle's ``RANDOM_SEED``."
msgstr ""
"Ці функції походять із стандартного :ref:`ParticleProcessMaterial "
"<class_ParticleProcessMaterial>`. Вони використовуються для генерації "
"випадкового числа з ``RANDOM_SEED`` кожної частинки."

msgid ""
"A unique thing about particle shaders is that some built-in variables are "
"saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be "
"accessed in the shader of the mesh, and also in the particle shader the next "
"time it is run."
msgstr ""
"Унікальна особливість частинкових шейдерів полягає в тому, що деякі "
"вбудовані змінні зберігаються між кадрами. Доступ до ``TRANSFORM``, "
"``COLOR`` і ``CUSTOM`` можна отримати в шейдері сітки, а також у шейдері "
"частинок під час наступного запуску."

msgid ""
"Next, setup your ``start()`` function. Particles shaders contain a "
"``start()`` function and a ``process()`` function."
msgstr ""
"Далі налаштуйте свою функцію ``start()``. Частинні шейдери містять функції "
"``start()`` і ``process()``."

msgid ""
"The code in the ``start()`` function only runs when the particle system "
"starts. The code in the ``process()`` function will always run."
msgstr ""
"Код у функції ``start()`` запускається лише під час запуску системи "
"частинок. Код у функції ``process()`` завжди виконуватиметься."

msgid ""
"We need to generate 4 random numbers: 3 to create a random position and one "
"for the random offset of the swim cycle."
msgstr ""
"Нам потрібно згенерувати 4 випадкові числа: 3 для створення випадкової "
"позиції та одне для випадкового зміщення циклу плавання."

msgid ""
"First, generate 4 seeds inside the ``start()`` function using the ``hash()`` "
"function provided above:"
msgstr ""
"По-перше, згенеруйте 4 зерна у функції ``start()`` за допомогою функції "
"``hash()``, наданої вище:"

msgid ""
"Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr ""
"Потім використовуйте ці початкові числа для генерації випадкових чисел за "
"допомогою ``rand_from_seed``:"

msgid ""
"Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of "
"the transform that holds the position information."
msgstr ""
"Нарешті, призначте ``position`` ``TRANSFORM[3].xyz``, який є частиною "
"перетворення, яка містить інформацію про місцезнаходження."

msgid "Remember, all this code so far goes inside the ``start()`` function."
msgstr "Пам’ятайте, що весь цей код досі міститься у функції ``start()``."

msgid ""
"The vertex shader for your mesh can stay the exact same as it was in the "
"previous tutorial."
msgstr ""
"Вершиний шейдер для вашої сітки може залишатися таким же, як і в "
"попередньому посібнику."

msgid ""
"Now you can move each fish individually each frame, either by adding to the "
"``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""
"Тепер ви можете переміщувати кожну рибу окремо в кожному кадрі, додаючи "
"безпосередньо до ``TRANSFORM`` або записуючи ``VELOCITY``."

msgid ""
"Let's transform the fish by setting their ``VELOCITY`` in the ``start()`` "
"function."
msgstr ""
"Давайте перетворимо рибу, встановивши її ``VELOCITY`` у функції ``start()``."

msgid ""
"This is the most basic way to set ``VELOCITY`` every particle (or fish) will "
"have the same velocity."
msgstr ""
"Це найпростіший спосіб встановити ``ШВИДКІСТЬ``, кожна частинка (або риба) "
"матиме однакову швидкість."

msgid ""
"Just by setting ``VELOCITY`` you can make the fish swim however you want. "
"For example, try the code below."
msgstr ""
"Просто встановивши ``VELOCITY``, ви можете змусити рибу плисти як завгодно. "
"Наприклад, спробуйте код нижче."

msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr "Це дасть кожній рибі унікальну швидкість від «2» до «10»."

msgid ""
"You can also let each fish change its velocity over time if you set the "
"velocity in the ``process()`` function."
msgstr ""
"Ви також можете дозволити кожній рибі змінювати свою швидкість з часом, якщо "
"встановите швидкість у функції ``process()``."

msgid ""
"If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of "
"the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""
"Якщо ви використовували ``CUSTOM.y`` в минулому підручнику, ви також можете "
"встановити швидкість анімації плавання на основі ``VELOCITY``. Просто "
"використовуйте ``CUSTOM.y``."

msgid "This code gives you the following behavior:"
msgstr "Цей код дає вам таку поведінку:"

msgid ""
"Using a ParticleProcessMaterial you can make the fish behavior as simple or "
"complex as you like. In this tutorial we only set Velocity, but in your own "
"Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). "
"Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` "
"for more information on particle shaders."
msgstr ""
"Використовуючи ParticleProcessMaterial, ви можете зробити поведінку риби "
"настільки простою чи складною, як вам подобається. У цьому підручнику ми "
"встановлюємо лише швидкість, але у ваших власних шейдерах ви також можете "
"встановити ``COLOR``, обертання, масштаб (за допомогою ``TRANSFORM``). Будь "
"ласка, зверніться до :ref:`Particles Shader Reference <doc_particle_shader>` "
"для отримання додаткової інформації про шейдери частинок."
