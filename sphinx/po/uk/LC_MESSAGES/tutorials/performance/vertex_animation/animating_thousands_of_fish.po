#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Animating thousands of fish with MultiMeshInstance3D"
msgstr "Анімація тисяч риб за допомогою MultiMeshInstance3D"

msgid ""
"This tutorial explores a technique used in the game `ABZU <https://www."
"gdcvault.com/play/1024409/Creating-the-Art-of-ABZ>`_ for rendering and "
"animating thousands of fish using vertex animation and static mesh "
"instancing."
msgstr ""
"У цьому підручнику розглядається техніка, яка використовується в грі `ABZU "
"<https://www.gdcvault.com/play/1024409/Creating-the-Art-of-ABZ>`_ для "
"відтворення й анімації тисяч риб за допомогою вершинної анімації та статики "
"екземпляр сітки."

msgid ""
"In Godot, this can be accomplished with a custom :ref:`Shader "
"<class_Shader>` and a :ref:`MultiMeshInstance3D "
"<class_MultiMeshInstance3D>`. Using the following technique you can render "
"thousands of animated objects, even on low end hardware."
msgstr ""
"У Godot це можна зробити за допомогою спеціального :ref:`Shader "
"<class_Shader>` і :ref:`MultiMeshInstance3D <class_MultiMeshInstance3D>`. "
"Використовуючи наведену нижче техніку, ви можете рендерити тисячі анімованих "
"об’єктів, навіть на низькому апаратному забезпеченні."

msgid ""
"We will start by animating one fish. Then, we will see how to extend that "
"animation to thousands of fish."
msgstr ""
"Ми почнемо з анімації однієї риби. Потім ми побачимо, як поширити цю "
"анімацію на тисячі риб."

msgid "Animating one Fish"
msgstr "Анімація однієї рибки"

msgid ""
"We will start with a single fish. Load your fish model into a :ref:"
"`MeshInstance3D <class_MeshInstance3D>` and add a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"Почнемо з однієї риби. Завантажте свою модель риби в :ref:`MeshInstance3D "
"<class_MeshInstance3D>` і додайте новий :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."

msgid ""
"Here is the fish we will be using for the example images, you can use any "
"fish model you like."
msgstr ""
"Ось риба, яку ми будемо використовувати для прикладів зображень, ви можете "
"використовувати будь-яку модель риби, яка вам подобається."

msgid ""
"The fish model in this tutorial is made by `QuaterniusDev <https://"
"quaternius.com>`_ and is shared with a creative commons license. CC0 1.0 "
"Universal (CC0 1.0) Public Domain Dedication https://creativecommons.org/"
"publicdomain/zero/1.0/"
msgstr ""
"Модель риби в цьому підручнику створено `QuaterniusDev <https://quaternius."
"com>`_ і використовується за ліцензією Creative Commons. CC0 1.0 "
"Універсальний (CC0 1.0) Призначення публічного домену https://"
"creativecommons.org/publicdomain/zero/1.0/"

msgid ""
"Typically, you would use bones and a :ref:`Skeleton3D <class_Skeleton3D>` to "
"animate objects. However, bones are animated on the CPU and so you end "
"having to calculate thousands of operations every frame and it becomes "
"impossible to have thousands of objects. Using vertex animation in a vertex "
"shader, you avoid using bones and can instead calculate the full animation "
"in a few lines of code and completely on the GPU."
msgstr ""
"Як правило, ви використовуєте кістки та :ref:`Skeleton3D <class_Skeleton3D>` "
"для анімації об’єктів. Однак кістки анімуються на процесорі, тому вам "
"доведеться обчислювати тисячі операцій у кожному кадрі, і стає неможливим "
"мати тисячі об’єктів. Використовуючи вершинну анімацію у вершинному шейдері, "
"ви уникаєте використання кісток і натомість можете розрахувати повну "
"анімацію в кількох рядках коду та повністю на GPU."

msgid "The animation will be made of four key motions:"
msgstr "Анімація складатиметься з чотирьох ключових рухів:"

msgid "A side to side motion"
msgstr "Рух з боку в бік"

msgid "A pivot motion around the center of the fish"
msgstr "Поворотний рух навколо центру риби"

msgid "A panning wave motion"
msgstr "Хвилеподібний рух"

msgid "A panning twist motion"
msgstr "Поворотний рух панорамування"

msgid ""
"All the code for the animation will be in the vertex shader with uniforms "
"controlling the amount of motion. We use uniforms to control the strength of "
"the motion so that you can tweak the animation in editor and see the results "
"in real time, without the shader having to recompile."
msgstr ""
"Весь код для анімації буде у вершинному шейдері з уніформою, яка контролює "
"кількість руху. Ми використовуємо уніформи для контролю сили руху, щоб ви "
"могли налаштувати анімацію в редакторі та побачити результати в режимі "
"реального часу, без необхідності перекомпілювати шейдер."

msgid ""
"All the motions will be made using cosine waves applied to ``VERTEX`` in "
"model space. We want the vertices to be in model space so that the motion is "
"always relative to the orientation of the fish. For example, side-to-side "
"will always move the fish back and forth in its left to right direction, "
"instead of on the ``x`` axis in the world orientation."
msgstr ""
"Усі рухи виконуватимуться за допомогою косинусних хвиль, застосованих до "
"``VERTEX`` у просторі моделі. Ми хочемо, щоб вершини були в просторі моделі, "
"щоб рух завжди відбувався відносно орієнтації риби. Наприклад, з боку в бік "
"риба завжди буде рухатися вперед і назад у напрямку зліва направо, а не по "
"осі ``x`` у світовій орієнтації."

msgid ""
"In order to control the speed of the animation, we will start by defining "
"our own time variable using ``TIME``."
msgstr ""
"Щоб контролювати швидкість анімації, ми почнемо з визначення нашої власної "
"змінної часу за допомогою ``TIME``."

msgid ""
"The first motion we will implement is the side to side motion. It can be "
"made by offsetting ``VERTEX.x`` by ``cos`` of ``TIME``. Each time the mesh "
"is rendered, all the vertices will move to the side by the amount of "
"``cos(time)``."
msgstr ""
"Перший рух, який ми здійснимо, це рух із боку в бік. Це можна зробити шляхом "
"зсуву ``VERTEX.x`` на ``cos`` ``TIME``. Кожного разу, коли сітка "
"візуалізується, усі вершини будуть переміщатися вбік на величину "
"``cos(time)``."

msgid "The resulting animation should look something like this:"
msgstr "Отримана анімація має виглядати приблизно так:"

msgid ""
"Next, we add the pivot. Because the fish is centered at (0, 0), all we have "
"to do is multiply ``VERTEX`` by a rotation matrix for it to rotate around "
"the center of the fish."
msgstr ""
"Далі ми додаємо опору. Оскільки риба знаходиться в центрі (0, 0), все, що "
"нам потрібно зробити, це помножити ``VERTEX`` на матрицю обертання, щоб вона "
"оберталася навколо центру риби."

msgid "We construct a rotation matrix like so:"
msgstr "Будуємо матрицю обертання так:"

msgid ""
"And then we apply it in the ``x`` and ``z`` axes by multiplying it by "
"``VERTEX.xz``."
msgstr ""
"Потім ми застосовуємо його до осей ``x`` і ``z``, помноживши його на "
"``VERTEX.xz``."

msgid "With only the pivot applied you should see something like this:"
msgstr "Застосувавши лише опору, ви повинні побачити щось на зразок цього:"

msgid ""
"The next two motions need to pan down the spine of the fish. For that, we "
"need a new variable, ``body``. ``body`` is a float that is ``0`` at the tail "
"of the fish and ``1`` at its head."
msgstr ""
"Наступними двома рухами потрібно панорамувати вниз по хребту риби. Для цього "
"нам потрібна нова змінна, ``body``. ``body`` - це поплавок, який має ``0`` у "
"хвості риби та ``1`` у її голові."

msgid ""
"The next motion is a cosine wave that moves down the length of the fish. To "
"make it move along the spine of the fish, we offset the input to ``cos`` by "
"the position along the spine, which is the variable we defined above, "
"``body``."
msgstr ""
"Наступний рух — це косинусова хвиля, яка рухається вниз по довжині риби. Щоб "
"змусити його рухатися вздовж хребта риби, ми зміщуємо вхідні дані для "
"``cos`` на позицію вздовж хребта, яка є змінною, яку ми визначили вище, "
"``body``."

msgid ""
"This looks very similar to the side to side motion we defined above, but in "
"this one, by using ``body`` to offset ``cos`` each vertex along the spine "
"has a different position in the wave making it look like a wave is moving "
"along the fish."
msgstr ""
"Це дуже схоже на рух із боку в бік, який ми визначили вище, але в цьому "
"випадку, використовуючи ``body`` to offset ``cos``, оскільки кожна вершина "
"вздовж хребта має інше положення в хвилі, що робить її схожою на хвиля "
"рухається уздовж риби."

msgid ""
"The last motion is the twist, which is a panning roll along the spine. "
"Similarly to the pivot, we first construct a rotation matrix."
msgstr ""
"Останнім рухом є поворот, який являє собою перекат уздовж хребта. Подібно до "
"опорної точки, ми спочатку будуємо матрицю обертання."

msgid ""
"We apply the rotation in the ``xy`` axes so that the fish appears to roll "
"around its spine. For this to work, the fish's spine needs to be centered on "
"the ``z`` axis."
msgstr ""
"Ми застосовуємо обертання по осях ``xy`` так, щоб риба ніби оберталася "
"навколо свого хребта. Щоб це спрацювало, хребет риби має бути зосереджений "
"на осі ``z``."

msgid "Here is the fish with twist applied:"
msgstr "Ось нанесена риба з твіст:"

msgid ""
"If we apply all these motions one after another, we get a fluid jelly-like "
"motion."
msgstr ""
"Якщо ми застосовуємо всі ці рухи один за одним, ми отримаємо текучий "
"желеподібний рух."

msgid ""
"Normal fish swim mostly with the back half of their body. Accordingly, we "
"need to limit the panning motions to the back half of the fish. To do this, "
"we create a new variable, ``mask``."
msgstr ""
"Звичайна риба плаває переважно задньою половиною тіла. Відповідно, нам "
"потрібно обмежити рухи панорамування задньою половиною риби. Для цього ми "
"створюємо нову змінну ``mask``."

msgid ""
"``mask`` is a float that goes from ``0`` at the front of the fish to ``1`` "
"at the end using ``smoothstep`` to control the point at which the transition "
"from ``0`` to ``1`` happens."
msgstr ""
"``mask`` — це поплавок, який змінюється від ``0`` у передній частині риби до "
"``1`` у кінці, використовуючи ``smoothstep``, щоб контролювати точку "
"переходу від ``0` ` до ``1`` відбувається."

msgid "Below is an image of the fish with ``mask`` used as ``COLOR``:"
msgstr ""
"Нижче наведено зображення риби з ``маскою``, яка використовується як "
"``КОЛЬОР``:"

msgid ""
"For the wave, we multiply the motion by ``mask`` which will limit it to the "
"back half."
msgstr ""
"Для хвилі ми множимо рух на ``маску``, що обмежить його задньою половиною."

msgid ""
"In order to apply the mask to the twist, we use ``mix``. ``mix`` allows us "
"to mix the vertex position between a fully rotated vertex and one that is "
"not rotated. We need to use ``mix`` instead of multiplying ``mask`` by the "
"rotated ``VERTEX`` because we are not adding the motion to the ``VERTEX`` we "
"are replacing the ``VERTEX`` with the rotated version. If we multiplied that "
"by ``mask``, we would shrink the fish."
msgstr ""
"Для того щоб нанести маску на закрутку, використовуємо «мікс». ``mix`` "
"дозволяє нам змішувати позицію вершини між повністю повернутою вершиною та "
"не повернутою. Нам потрібно використовувати ``mix`` замість множення "
"``mask`` на повернуту ``VERTEX``, оскільки ми не додаємо рух до ``VERTEX``, "
"а замінюємо ``VERTEX`` на повернута версія. Якби ми помножили це на "
"``маску``, ми б зменшили рибу."

msgid "Putting the four motions together gives us the final animation."
msgstr "Поєднання чотирьох рухів разом дає нам остаточну анімацію."

msgid ""
"Go ahead and play with the uniforms in order to alter the swim cycle of the "
"fish. You will find that you can create a wide variety of swim styles using "
"these four motions."
msgstr ""
"Грайте з уніформою, щоб змінити плавальний цикл риби. Ви побачите, що за "
"допомогою цих чотирьох рухів можна створювати різноманітні стилі плавання."

msgid "Making a school of fish"
msgstr "Виготовлення зграї рибок"

msgid ""
"Godot makes it easy to render thousands of the same object using a "
"MultiMeshInstance3D node."
msgstr ""
"Godot дозволяє легко відтворювати тисячі однакових об’єктів за допомогою "
"вузла MultiMeshInstance3D."

msgid ""
"A MultiMeshInstance3D node is created and used the same way you would make a "
"MeshInstance3D node. For this tutorial, we will name the MultiMeshInstance3D "
"node ``School``, because it will contain a school of fish."
msgstr ""
"Вузол MultiMeshInstance3D створюється та використовується так само, як і "
"вузол MeshInstance3D. У цьому підручнику ми назвемо вузол "
"MultiMeshInstance3D ``School``, оскільки він міститиме зграю риб."

msgid ""
"Once you have a MultiMeshInstance3D add a :ref:`MultiMesh "
"<class_MultiMesh>`, and to that MultiMesh add your :ref:`Mesh <class_Mesh>` "
"with the shader from above."
msgstr ""
"Коли у вас є MultiMeshInstance3D, додайте :ref:`MultiMesh "
"<class_MultiMesh>`, а до цього MultiMesh додайте свій :ref:`Mesh "
"<class_Mesh>` з шейдером вище."

msgid ""
"MultiMeshes draw your Mesh with three additional per-instance properties: "
"Transform (rotation, translation, scale), Color, and Custom. Custom is used "
"to pass in 4 multi-use variables using a :ref:`Color <class_Color>`."
msgstr ""
"MultiMeshes малює ваш Mesh з трьома додатковими властивостями для кожного "
"екземпляра: Transform (обертання, переклад, масштаб), Color і Custom. Custom "
"використовується для передачі 4 багаторазових змінних за допомогою :ref:"
"`Color <class_Color>`."

msgid ""
"``instance_count`` specifies how many instances of the mesh you want to "
"draw. For now, leave ``instance_count`` at ``0`` because you cannot change "
"any of the other parameters while ``instance_count`` is larger than ``0``. "
"We will set ``instance count`` in GDScript later."
msgstr ""
"``instance_count`` визначає, скільки екземплярів сітки ви хочете намалювати. "
"Наразі залиште ``instance_count`` на ``0``, оскільки ви не можете змінити "
"будь-які інші параметри, поки ``instance_count`` більший за ``0``. Пізніше "
"ми встановимо ``підрахунок екземплярів`` у GDScript."

msgid ""
"``transform_format`` specifies whether the transforms used are 3D or 2D. For "
"this tutorial, select 3D."
msgstr ""
"``transform_format`` визначає, 3D чи 2D трансформації. Для цього підручника "
"виберіть 3D."

msgid ""
"For both ``color_format`` and ``custom_data_format`` you can choose between "
"``None``, ``Byte``, and ``Float``. ``None`` means you won't be passing in "
"that data (either a per-instance ``COLOR`` variable, or ``INSTANCE_CUSTOM``) "
"to the shader. ``Byte`` means each number making up the color you pass in "
"will be stored with 8 bits while ``Float`` means each number will be stored "
"in a floating-point number (32 bits). ``Float`` is slower but more precise, "
"``Byte`` will take less memory and be faster, but you may see some visual "
"artifacts."
msgstr ""
"Для ``color_format`` і ``custom_data_format`` ви можете вибрати між "
"``None``, ``Byte`` і ``Float``. ``Немає`` означає, що ви не передаватимете "
"ці дані (або змінну ``COLOR`` для кожного екземпляра, або "
"``INSTANCE_CUSTOM``) до шейдера. ``Byte`` означає, що кожне число, що "
"входить до складу переданого вами кольору, зберігатиметься з 8 бітами, тоді "
"як ``Float`` означає, що кожне число зберігатиметься у вигляді числа з "
"плаваючою комою (32 біти). ``Float`` повільніший, але більш точний, ``Byte`` "
"займе менше пам'яті та буде швидшим, але ви можете побачити деякі візуальні "
"артефакти."

msgid "Now, set ``instance_count`` to the number of fish you want to have."
msgstr ""
"Тепер встановіть ``instance_count`` на кількість риби, яку ви хочете мати."

msgid "Next we need to set the per-instance transforms."
msgstr "Далі нам потрібно встановити перетворення для кожного екземпляра."

msgid ""
"There are two ways to set per-instance transforms for MultiMeshes. The first "
"is entirely in editor and is described in the :ref:`MultiMeshInstance3D "
"tutorial <doc_using_multi_mesh_instance>`."
msgstr ""
"Існує два способи встановлення трансформацій для кожного екземпляра для "
"MultiMeshes. Перший повністю знаходиться в редакторі та описаний у :ref:"
"`підручнику MultiMeshInstance3D <doc_using_multi_mesh_instance>`."

msgid ""
"The second is to loop over all the instances and set their transforms in "
"code. Below, we use GDScript to loop over all the instances and set their "
"transform to a random position."
msgstr ""
"Другий полягає в тому, щоб зациклити всі екземпляри та встановити їх "
"перетворення в коді. Нижче ми використовуємо GDScript для циклічного "
"перегляду всіх екземплярів і встановлення їхнього перетворення у випадкову "
"позицію."

msgid ""
"Running this script will place the fish in random positions in a box around "
"the position of the MultiMeshInstance3D."
msgstr ""
"Запуск цього сценарію розмістить рибу у випадкових позиціях у рамці навколо "
"положення MultiMeshInstance3D."

msgid ""
"If performance is an issue for you, try running the scene with fewer fish."
msgstr ""
"Якщо продуктивність є проблемою для вас, спробуйте запустити сцену з меншою "
"кількістю риби."

msgid ""
"Notice how all the fish are all in the same position in their swim cycle? It "
"makes them look very robotic. The next step is to give each fish a different "
"position in the swim cycle so the entire school looks more organic."
msgstr ""
"Помітили, що всі риби знаходяться в однаковому положенні під час свого "
"плавального циклу? Це робить їх дуже роботизованими. Наступний крок — надати "
"кожній рибі інше положення в плавальному циклі, щоб уся зграя виглядала "
"більш органічно."

msgid "Animating a school of fish"
msgstr "Анімація зграї риб"

msgid ""
"One of the benefits of animating the fish using ``cos`` functions is that "
"they are animated with one parameter, ``time``. In order to give each fish a "
"unique position in the swim cycle, we only need to offset ``time``."
msgstr ""
"Однією з переваг анімації риби за допомогою функцій ``cos`` є те, що вони "
"анімуються за допомогою одного параметра, ``time``. Щоб надати кожній рибі "
"унікальну позицію в циклі плавання, нам потрібно лише зсунути ``час``."

msgid ""
"We do that by adding the per-instance custom value ``INSTANCE_CUSTOM`` to "
"``time``."
msgstr ""
"Ми робимо це, додаючи спеціальне значення INSTANCE_CUSTOM для кожного "
"екземпляра до ``time``."

msgid ""
"Next, we need to pass a value into ``INSTANCE_CUSTOM``. We do that by adding "
"one line into the ``for`` loop from above. In the ``for`` loop we assign "
"each instance a set of four random floats to use."
msgstr ""
"Далі нам потрібно передати значення в ``INSTANCE_CUSTOM``. Ми робимо це, "
"додаючи один рядок у цикл ``for`` зверху. У циклі ``for`` ми призначаємо "
"кожному екземпляру набір із чотирьох випадкових чисел з плаваючою точкою для "
"використання."

msgid ""
"Now the fish all have unique positions in the swim cycle. You can give them "
"a little more individuality by using ``INSTANCE_CUSTOM`` to make them swim "
"faster or slower by multiplying by ``TIME``."
msgstr ""
"Тепер усі риби мають унікальні позиції в плавальному циклі. Ви можете надати "
"їм трохи більше індивідуальності, використовуючи ``INSTANCE_CUSTOM``, щоб "
"змусити їх плавати швидше або повільніше, помноживши на ``TIME``."

msgid ""
"You can even experiment with changing the per-instance color the same way "
"you changed the per-instance custom value."
msgstr ""
"Ви навіть можете поекспериментувати зі зміною кольору кожного екземпляра так "
"само, як ви змінювали спеціальне значення кожного екземпляра."

msgid ""
"One problem that you will run into at this point is that the fish are "
"animated, but they are not moving. You can move them by updating the per-"
"instance transform for each fish every frame. Although doing so will be "
"faster than moving thousands of MeshInstance3Ds per frame, it'll still "
"likely be slow."
msgstr ""
"Одна проблема, з якою ви зіткнетеся на цьому етапі, полягає в тому, що риби "
"живі, але вони не рухаються. Ви можете переміщувати їх, оновлюючи "
"трансформацію кожного екземпляра для кожної риби в кожному кадрі. Незважаючи "
"на те, що це буде швидше, ніж переміщення тисяч MeshInstance3D за кадр, це, "
"швидше за все, буде повільним."

msgid ""
"In the next tutorial we will cover how to use :ref:`GPUParticles3D "
"<class_GPUParticles3D>` to take advantage of the GPU and move each fish "
"around individually while still receiving the benefits of instancing."
msgstr ""
"У наступному посібнику ми розповімо, як використовувати :ref:`GPUParticles3D "
"<class_GPUParticles3D>`, щоб скористатися перевагами графічного процесора та "
"переміщувати кожну рибу окремо, зберігаючи переваги інстансування."
