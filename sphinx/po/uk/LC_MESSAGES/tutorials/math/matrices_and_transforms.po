#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Matrices and transforms"
msgstr "Матриці та перетворення"

msgid "Introduction"
msgstr "Вступ"

msgid ""
"Before reading this tutorial, we recommend that you thoroughly read and "
"understand the :ref:`doc_vector_math` tutorial, as this tutorial requires a "
"knowledge of vectors."
msgstr ""
"Перед тим як читати цю статтю, радимо вам пройти урок :ref:"
"`doc_vector_math`так як вам потрібно знати базові концепції векторів щоб "
"зрозуміти цю статтю."

msgid ""
"This tutorial is about *transformations* and how we represent them in Godot "
"using matrices. It is not a full in-depth guide to matrices. Transformations "
"are most of the time applied as translation, rotation, and scale, so we will "
"focus on how to represent those with matrices."
msgstr ""
"Ця стаття розповідає про *перетворення* та про те, як ми представляємо їх у "
"Godot за допомогою матриць. Це не є поглиблений посібник з матриць. "
"Перетворення в основному застосовуються для переміщення, обертання та "
"масштабування, тому ми зосередимося на тому, як це робити за допомогою "
"матриць."

msgid ""
"Most of this guide focuses on 2D, using :ref:`class_Transform2D` and :ref:"
"`class_Vector2`, but the way things work in 3D is very similar."
msgstr ""
"Більша частина цього посібника зосереджена на 2D і використовує :ref:"
"`class_Transform2D` та :ref:`class_Vector2`, але перетворення в 3D працюють "
"схожим чином."

msgid ""
"As mentioned in the previous tutorial, it is important to remember that in "
"Godot, the Y axis points *down* in 2D. This is the opposite of how most "
"schools teach linear algebra, with the Y axis pointing up."
msgstr ""
"Як згадувалося в попередній статті, важливо пам'ятати, що в Godot, у 2D, "
"вісь Y вказує *вниз*. На відміну від шкільного курсу лінійної алгебри, де "
"вісь Y вказує вгору."

msgid ""
"The convention is that the X axis is red, the Y axis is green, and the Z "
"axis is blue. This tutorial is color-coded to match these conventions, but "
"we will also represent the origin vector with a blue color."
msgstr ""
"Умовність полягає в тому, що вісь X - червона, вісь Y - зелена, а вісь Z - "
"синя. Ця стаття буде використовувати колір відповідно до цієї умовності, але "
"синім кольором ми також будемо малювати вектор походження."

msgid "Matrix components and the Identity matrix"
msgstr "Компоненти матриці та Матриця Ідентичності"

msgid ""
"The identity matrix represents a transform with no translation, no rotation, "
"and no scale. Let's start by looking at the identity matrix and how its "
"components relate to how it visually appears."
msgstr ""
"Матриця ідентичності - це перетворення без переміщення, обертання і "
"масштабування. Почнемо з погляду на матрицю ідентичності і на те, як її "
"компоненти пов'язані з тим, як вона візуально проявляється."

msgid ""
"Matrices have rows and columns, and a transformation matrix has specific "
"conventions on what each does."
msgstr ""
"Матриці мають рядки та стовпці, а матриця перетворення має конкретні "
"умовності щодо того, що робить кожен з них."

msgid ""
"In the image above, we can see that the red X vector is represented by the "
"first column of the matrix, and the green Y vector is likewise represented "
"by the second column. A change to the columns will change these vectors. We "
"will see how they can be manipulated in the next few examples."
msgstr ""
"На зображенні вище ми бачимо, що червоний вектор X представлений першим "
"стовпцем матриці, а зелений вектор Y - представлений другим стовпцем. Зміна "
"стовпців змінить ці вектори. Ми побачимо, як ними можна маніпулювати в "
"наступних прикладах."

msgid ""
"You should not worry about manipulating rows directly, as we usually work "
"with columns. However, you can think of the rows of the matrix as showing "
"which vectors contribute to moving in a given direction."
msgstr ""
"Вам не варто чіплятися за безпосереднє маніпулювання рядками, бо зазвичай ми "
"працюємо зі стовпцями. Однак ви можете думати про рядки матриці, як про "
"вектори, які сприяють руху в заданому напрямку."

msgid "Scaling the transformation matrix"
msgstr "Масштабування за допомогою матриці перетворення"

msgid ""
"Applying a scale is one of the easiest operations to understand. Let's start "
"by placing the Godot logo underneath our vectors so that we can visually see "
"the effects on an object:"
msgstr ""
"Масштабування є однією з найпростіших для розуміння операцій. Почнемо з "
"розміщення логотипу Godot під нашими векторами, щоб ми могли візуально "
"бачити вплив на об'єкт:"

msgid ""
"Now, to scale the matrix, all we need to do is multiply each component by "
"the scale we want. Let's scale it up by 2. 1 times 2 becomes 2, and 0 times "
"2 becomes 0, so we end up with this:"
msgstr ""
"Тепер, щоб масштабувати матрицю, все, що нам потрібно зробити, це помножити "
"кожен компонент на потрібний масштаб. Давайте збільшимо його на 2. 1 "
"помножити на 2 стає 2, а 0 помножити на 2 стає 0, тому ми в кінцевому "
"підсумку отримуємо це:"

msgid ""
"If we wanted to return it to its original scale, we can multiply each "
"component by 0.5. That's pretty much all there is to scaling a "
"transformation matrix."
msgstr ""
"Якби ми хотіли повернути його до початкового масштабу, ми могли б помножити "
"кожен компонент на 0,5. Це майже все, що треба знати для масштабування "
"матриці перетворення."

msgid "Rotating the transformation matrix"
msgstr "Обертання за допомогою матриці перетворення"

msgid ""
"We'll start the same way as earlier, with the Godot logo underneath the "
"identity matrix:"
msgstr "Почнемо з того самого логотипу Godot під матрицею ідентичності:"

msgid ""
"As an example, let's say we want to rotate our Godot logo clockwise by 90 "
"degrees. Right now the X axis points right and the Y axis points down. If we "
"rotate these in our head, we would logically see that the new X axis should "
"point down and the new Y axis should point left."
msgstr ""
"Припустимо, що ми хочемо повернути наш логотип за годинниковою стрілкою на "
"90 градусів. Зараз вісь X вказує праворуч, а вісь Y - вниз. Якщо ми уявімо "
"їх поворот, то зрозуміємо, що нова вісь X повинна вказувати вниз, а нова "
"вісь Y повинна вказувати ліворуч."

msgid ""
"You can imagine that you grab both the Godot logo and its vectors, and then "
"spin it around the center. Wherever you finish spinning, the orientation of "
"the vectors determines what the matrix is."
msgstr ""
"Ви можете уявити собі, що ви хапаєте, і логотип Godot, і його вектори, а "
"потім крутите його відносно центру. Де б ви не спинили обертатися, "
"орієнтація векторів визначає матрицю."

msgid ""
"If you have trouble understanding the above, try this exercise: Cut a square "
"of paper, draw X and Y vectors on top of it, place it on graph paper, then "
"rotate it and note the endpoints."
msgstr ""
"Якщо у вас виникли проблеми з розумінням вищесказаного, спробуйте таку "
"вправу: Витніть з паперу квадрат, намалюйте на ньому вектори X і Y, "
"помістіть його на розграфлений папір, потім поверніть його і занотуйте куди "
"вказують вектори. *(Примітка перекладача: Напрям вверх має координати (0, "
"-1), вправо - (1, 0), вниз - (0, 1), вліво - (-1, 0), при обертанні картинки "
"її вектори змінюють напрямок у який вказують)*."

msgid ""
"To perform rotation in code, we need to be able to calculate the values "
"programmatically. This image shows the formulas needed to calculate the "
"transformation matrix from a rotation angle. Don't worry if this part seems "
"complicated, I promise it's the hardest thing you need to know."
msgstr ""
"Для виконання обертання в коді нам потрібно вміти обчислювати значення "
"програмно. Це зображення показує формули, необхідні для обчислення матриці "
"кута повороту. Не хвилюйтеся, якщо ця частина здається складною, я обіцяю, "
"що це найважче, що вам потрібно знати."

msgid ""
"Godot represents all rotations with radians, not degrees. A full turn is "
"`TAU` or `PI*2` radians, and a quarter turn of 90 degrees is `TAU/4` or "
"`PI/2` radians. Working with `TAU` usually results in more readable code."
msgstr ""
"Godot представляє всі обертання в радіанах, а не градусах. Повний поворот "
"рівний ``TAU``, або ``PI*2``, радіан, а чверть повороту, на 90 градусів, - "
"``TAU/4``, або ``PI/2`` радіан. Використання ``TAU`` зазвичай дає більш "
"читабельний код."

msgid ""
"Fun fact: In addition to Y being *down* in Godot, rotation is represented "
"clockwise. This means that all the math and trig functions behave the same "
"as a Y-is-up CCW system, since these differences \"cancel out\". You can "
"think of rotations in both systems being \"from X to Y\"."
msgstr ""
"Цікавий факт: На додаток до того, що Y в Godot вказує *вниз*, обертання "
"представлене за годинниковою стрілкою. Це означає, що всі математичні та "
"тригерні функції поводяться так само, як і система CCW Y-зверху, оскільки ці "
"відмінності \"скасовуються\". Ви можете думати, що обертання в обох системах "
"є \"від X до Y\"."

msgid "Here's how that would be done in code (place the script on a Node2D):"
msgstr "Ось як це буде зроблено в коді (помістіть скрипт на вузол Node2D):"

msgid "Basis of the transformation matrix"
msgstr "Основа матриці перетворення"

msgid "Translating the transformation matrix"
msgstr "Переміщення за допомогою матриці перетворення"

msgid ""
"Let's work through an example to help understand this. We will start with "
"the identity transform like last time, except we will keep track of the "
"origin vector this time."
msgstr ""
"Давайте розглянемо приклад, щоб зрозуміти це. Ми почнемо з матриці "
"ідентичності, як минулого разу, за винятком того, що цього разу ми будемо "
"відстежувати вектор походження."

msgid ""
"Godot's 2D uses coordinates based on pixels, so in actual projects you will "
"want to translate by hundreds of units."
msgstr ""
"Godot в 2D використовує координати, засновані на пікселях, тому в реальних "
"проектах ви будете переміщувати на сотні одиниць."

msgid "Putting it all together"
msgstr "Збираємо все це докупи"

msgid ""
"Let's set the translation to (350, 150), rotate by -0.5 rad, and scale by 3. "
"I've posted a screenshot, and the code to reproduce it, but I encourage you "
"to try and reproduce the screenshot without looking at the code!"
msgstr ""
"Давайте встановимо переміщення на (350, 150), поворот на -0,5 радіан і "
"масштаб на 3. Я опублікував скріншот, і код, для його відтворення, але "
"закликаю вас спробувати відтворити скріншот, не заглядаючи в код!"

msgid "Shearing the transformation matrix (advanced)"
msgstr "Перекоси за допомогою матриці перетворення (додатково)"

msgid ""
"If you are only looking for how to *use* transformation matrices, feel free "
"to skip this section of the tutorial. This section explores an uncommonly "
"used aspect of transformation matrices for the purpose of building an "
"understanding of them."
msgstr ""
"Якщо ви шукаєте інформацію тільки про *використання* матриць перетворення, "
"не соромтеся пропустити цей розділ статті. Цей розділ досліджує мало коли "
"використовуваний аспект матриць перетворення з метою формування розуміння їх."

msgid ""
"You may have noticed that a transform has more degrees of freedom than the "
"combination of the above actions. The basis of a 2D transformation matrix "
"has four total numbers in two :ref:`class_Vector2` values, while a rotation "
"value and a Vector2 for scale only has 3 numbers. The high-level concept for "
"the missing degree of freedom is called *shearing*."
msgstr ""
"Можливо, ви помітили, що перетворення має більше ступенів свободи, ніж "
"поєднання вищезазначених дій. Основа матриці 2D-перетворення має чотири "
"загальних числа у двох значеннях :ref:`class_Vector2`, тоді як значення "
"обертання та Вектор2 для масштабу мають лише 3 числа. Концепція високого "
"рівня з обмеження ступенів свободи дозволяє *перекоси*."

msgid ""
"Normally, you will always have the basis vectors perpendicular to each "
"other. However, shearing can be useful in some situations, and understanding "
"shearing helps you understand how transforms work."
msgstr ""
"Як правило, базові вектори у вас завжди будуть перпендикулярні один одному. "
"Однак перекоси можуть бути корисними в деяких ситуаціях, а їх розуміння "
"допомагає зрозуміти, як працюють перетворення."

msgid ""
"To show you visually how it will look, let's overlay a grid onto the Godot "
"logo:"
msgstr ""
"Щоб візуально показати вам, як це буде виглядати, давайте накладемо сітку на "
"логотип Godot:"

msgid ""
"Each point on this grid is obtained by adding the basis vectors together. "
"The bottom-right corner is X + Y, while the top-right corner is X - Y. If we "
"change the basis vectors, the entire grid moves with it, as the grid is "
"composed of the basis vectors. All lines on the grid that are currently "
"parallel will remain parallel no matter what changes we make to the basis "
"vectors."
msgstr ""
"Кожна точка на цій сітці є отримана за допомогою додавання основних "
"векторів. Нижній правий кут рівний X + Y, а верхній правий кут рівний X - Y. "
"Якщо ми змінимо вектори основи, то з ними зрушиться вся сітка, так як сітка "
"складається з основних векторів. Всі лінії на сітці, які в даний час "
"паралельні, залишаться паралельними, незалежно від того, які зміни ми "
"вносимо в основні вектори."

msgid "As an example, let's set Y to (1, 1):"
msgstr "Як приклад, давайте встановимо Y на (1, 1):"

msgid ""
"You can't set the raw values of a Transform2D in the editor, so you *must* "
"use code if you want to shear the object."
msgstr ""
"Ви не можете встановити необроблені значення Transform2D у редакторі, тому "
"ви *повинні* використовувати код, якщо хочете перекосити об'єкт."

msgid ""
"Due to the vectors no longer being perpendicular, the object has been "
"sheared. The bottom-center of the grid, which is (0, 1) relative to itself, "
"is now located at a world position of (1, 1)."
msgstr ""
"Через те, що вектори більше не перпендикулярні, об'єкт перекосився. Нижній "
"центр сітки, який (0, 1) відносно себе, у світовому положенні тепер "
"розташований (1, 1)."

msgid ""
"The intra-object coordinates are called UV coordinates in textures, so let's "
"borrow that terminology for here. To find the world position from a relative "
"position, the formula is U * X + V * Y, where U and V are numbers and X and "
"Y are the basis vectors."
msgstr ""
"Внутрішні координати об'єкта називаються текстурними координатами, тому "
"давайте запозичимо цю термінологію сюди. Щоб знайти світову позицію з "
"відносної позиції використовується формула - U * X + V * Y, де U і V - "
"числа, а X і Y - базові вектори."

msgid ""
"The bottom-right corner of the grid, which is always at the UV position of "
"(1, 1), is at the world position of (2, 1), which is calculated from X*1 + "
"Y*1, which is (1, 0) + (1, 1), or (1 + 1, 0 + 1), or (2, 1). This matches up "
"with our observation of where the bottom-right corner of the image is."
msgstr ""
"Нижній правий кут сітки, який в текстурних координатах завжди знаходиться на "
"(1, 1), світових знаходиться на (2, 1), які розраховуються від X*1 + Y*1, що "
"дорівнює (1, 0) + (1, 1), або (1 + 1, 0 + 1), або (2, 1). Це узгоджується з "
"нашим спостереженням за тим, де знаходиться правий нижній кут зображення."

msgid ""
"Similarly, the top-right corner of the grid, which is always at the UV "
"position of (1, -1), is at the world position of (0, -1), which is "
"calculated from X*1 + Y*-1, which is (1, 0) - (1, 1), or (1 - 1, 0 - 1), or "
"(0, -1). This matches up with our observation of where the top-right corner "
"of the image is."
msgstr ""
"Аналогічно, верхній правий кут сітки, який в текстурних координатах завжди "
"знаходиться на (1, -1), у світових знаходиться на (0, -1), які вираховуються "
"з X*1 + Y*-1, що дорівнює (1, 0) - (1, 1), або (1 - 1, 0 - 1), або (0, -1). "
"Це узгоджується з нашим спостереженням за тим, де знаходиться верхній правий "
"кут зображення."

msgid ""
"Hopefully you now fully understand the how a transformation matrix affects "
"the object, and the relationship between the basis vectors and how the "
"object's \"UV\" or \"intra-coordinates\" have their world position changed."
msgstr ""
"Сподіваюся, тепер ви повністю розумієте, як матриця перетворення впливає на "
"об'єкт, і взаємозв'язок між основними векторами і тим, як \"внутрішні "
"координати\" об'єкта змінюють своє світове положення."

msgid ""
"In Godot, all transform math is done relative to the parent node. When we "
"refer to \"world position\", that would be relative to the node's parent "
"instead, if the node had a parent."
msgstr ""
"У Godot вся математика перетворення виконується відносно батьківського "
"вузла. Коли ми маємо на увазі \"світову позицію\", то говоримо про позицію "
"відносно батьківського вузла, якщо у вузла є батько."

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about linear transformations: https://www.youtube.com/watch?"
"v=kYB8IZa5AuE"
msgstr ""
"Якщо ви хочете отримати додаткові пояснення, вам слід переглянути чудове "
"відео 3Blue1Brown про лінійні перетворення: https://www.youtube.com/watch?"
"v=kYB8IZa5AuE"

msgid "Practical applications of transforms"
msgstr "Практичне застосування перетворень"

msgid "Converting positions between transforms"
msgstr "Конвертування позицій між перетвореннями"

msgid ""
"There are many cases where you'd want to convert a position in and out of a "
"transform. For example, if you have a position relative to the player and "
"would like to find the world (parent-relative) position, or if you have a "
"world position and want to know where it is relative to the player."
msgstr ""
"Є багато випадків, коли вам треба конвертувати позицію в і зовні "
"перетворення. Наприклад, якщо у вас є позиція відносно гравця і ви хотіли б "
"знайти світову (відносну батька) позицію, або якщо у вас є світова позиція і "
"ви хочете знати, де вона знаходиться відносно гравця."

msgid ""
"If you know in advance that the transform is positioned at (0, 0), you can "
"use the \"basis_xform\" or \"basis_xform_inv\" methods instead, which skip "
"dealing with translation."
msgstr ""
"Якщо ви заздалегідь знаєте, що вузол перетворення розташований на (0, 0), то "
"можете використовувати методи ``basis_xform``, або ``basis_xform_inv``, які "
"пропускають конвертацію."

msgid "Moving an object relative to itself"
msgstr "Переміщення об'єкта відносно себе"

msgid ""
"A common operation, especially in 3D games, is to move an object relative to "
"itself. For example, in first-person shooter games, you would want the "
"character to move forward (-Z axis) when you press :kbd:`W`."
msgstr ""
"Поширеною операцією, особливо в 3D-іграх, є переміщення об'єкта відносно "
"себе. Наприклад, у шутерах від першої особи потрібно, щоб персонаж рухався "
"вперед (вісь -Z) під час натискання клавіші :kbd:`W`."

msgid "This code moves an object 100 units to its own right:"
msgstr "Цей код переміщує об'єкт на 100 одиниць праворуч:"

msgid "For moving in 3D, you would need to replace \"x\" with \"basis.x\"."
msgstr "Для переміщення в 3D вам потрібно буде замінити ``x`` на ``basis.x``."

msgid "Applying transforms onto transforms"
msgstr "Застосування перетворень на перетвореннях"

msgid ""
"One of the most important things to know about transforms is how you can use "
"several of them together. A parent node's transform affects all of its "
"children. Let's dissect an example."
msgstr ""
"Одна з найважливіших речей, які потрібно знати про перетворення, - це те, що "
"ви можете використовувати кілька їх разом. Перетворення батьківського вузла "
"впливає на всіх його дітей. Давайте розглянемо приклад."

msgid ""
"In this image, the child node has a \"2\" after the component names to "
"distinguish them from the parent node. It might look a bit overwhelming with "
"so many numbers, but remember that each number is displayed twice (next to "
"the arrows and also in the matrices), and that almost half of the numbers "
"are zero."
msgstr ""
"На цьому зображенні дочірній вузол має приставку \"2\" до назв компонентів, "
"щоб відрізнити їх від компонентів батьківського вузла. Це може виглядати "
"трохи приголомшливо з такою кількістю чисел, але пам'ятайте, що кожне число "
"відображається двічі (поруч зі стрілками, а також у матрицях), і що майже "
"половина чисел дорівнює нулю."

msgid ""
"The only transformations going on here are that the parent node has been "
"given a scale of (2, 1), the child has been given a scale of (0.5, 0.5), and "
"both nodes have been given positions."
msgstr ""
"Єдині перетворення, що відбуваються тут, - це те, що батьківському вузлу "
"була наданий масштаб (2, 1), дитині - масштаб (0,5, 0,5), і обом вузлам були "
"надані позиції."

msgid ""
"To calculate a child transform's world space transform manually, this is the "
"code we would use:"
msgstr ""
"Щоб розрахувати перетворення дитини відносно світового простору вручну, ми "
"можемо використовувати такий код:"

msgid "When multiplying matrices, order matters! Don't mix them up."
msgstr "При множенні матриць, порядок має значення! Не змішуйте їх."

msgid "Lastly, applying the identity transform will always do nothing."
msgstr ""
"Нарешті, застосування перетворення ідентичності завжди нічого не зробить."

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about matrix composition: https://www.youtube.com/watch?"
"v=XkY2DOUCWMU"
msgstr ""
"Якщо ви хочете отримати додаткове пояснення, вам слід переглянути чудове "
"відео 3Blue1Brown про матричну композицію: https://www.youtube.com/watch?"
"v=XkY2DOUCWMU"

msgid "Inverting a transformation matrix"
msgstr "Інвертування матриці перетворення"

msgid ""
"Multiplying an inverse transform by the normal transform undoes all "
"transformations:"
msgstr ""
"Множення інвертованого перетворення на нормальне перетворення скасовує всі "
"перетворення:"

msgid "How does it all work in 3D?"
msgstr "Як усе це працює в 3D?"

msgid ""
"All of the concepts for how translation, rotation, scale, and shearing work "
"in 3D are all the same compared to 2D. To scale, we take each component and "
"multiply it; to rotate, we change where each basis vector is pointing; to "
"translate, we manipulate the origin; and to shear, we change the basis "
"vectors to be non-perpendicular."
msgstr ""
"Всі концепції того, як працюють переміщення, обертання, масштабування і "
"скошення в 3D, такі самі, як і в 2D. Для масштабування беремо кожен "
"компонент і множимо його; щоб повернути, ми змінюємо, напрям кожного "
"основного вектора; для переміщення ми маніпулюємо походженням;а для "
"перекосів, ми змінюємо основні вектори, щоб вони були неперпендикулярними."

msgid ""
"If you would like, it's a good idea to play around with transforms to get an "
"understanding of how they work. Godot allows you to edit 3D transform "
"matrices directly from the inspector. You can download this project which "
"has colored lines and cubes to help visualize the :ref:`class_Basis` vectors "
"and the origin in both 2D and 3D: https://github.com/godotengine/godot-demo-"
"projects/tree/master/misc/matrix_transform"
msgstr ""
"Якщо хочете, можете по-експериментувати з перетвореннями, щоб зрозуміти їх "
"роботу. Godot дозволяє редагувати матриці 3D-перетворення безпосередньо в "
"Інспекторі. Ви можете завантажити цей проект, який має кольорові лінії та "
"кубики, щоб допомогти візуалізувати вектори :ref:`class_Basis` та походження "
"як у 2D, так і в 3D: https://github.com/godotengine/godot-demo-projects/tree/"
"master/misc/matrix_transform"

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about 3D linear transformations: https://www.youtube.com/"
"watch?v=rHLEWRxRGiM"
msgstr ""
"Якщо хочете отримати додаткове пояснення, вам слід ознайомитися з чудовим "
"відео 3Blue1Brown про 3D-лінійні перетворення: https://www.youtube.com/watch?"
"v=rHLEWRxRGiM"

msgid "Representing rotation in 3D (advanced)"
msgstr "Представлення обертання в 3D (додатково)"

msgid ""
"The biggest difference between 2D and 3D transformation matrices is how you "
"represent rotation by itself without the basis vectors."
msgstr ""
"Найбільша відмінність між матрицями перетворення 2D і 3D полягає в тому, як "
"ви представляєте обертання саме по собі без базових векторів."

msgid ""
"However, if you really must know how it works, here are some great "
"resources, which you can follow in order:"
msgstr ""
"Однак, якщо вам дійсно треба знати, як це працює, ось деякі великі ресурси, "
"з якими ви можете ознайомитися:"

msgid "https://www.youtube.com/watch?v=mvmuCPvRoWQ"
msgstr "https://www.youtube.com/watch?v=mvmuCPvRoWQ"

msgid "https://www.youtube.com/watch?v=d4EgbgTm0Bg"
msgstr "https://www.youtube.com/watch?v=d4EgbgTm0Bg"

msgid "https://eater.net/quaternions"
msgstr "https://eater.net/quaternions"

msgid "Translation status"
msgstr "Стан перекладу"
