#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Resources"
msgstr "Ресурси"

msgid "Nodes and resources"
msgstr "Вузли та ресурси"

msgid ""
"Up to this tutorial, we focused on the :ref:`Node <class_Node>` class in "
"Godot as that's the one you use to code behavior and most of the engine's "
"features rely on it. There is another datatype that is just as "
"important: :ref:`Resource <class_Resource>`."
msgstr ""
"В цьому уроці ми зосередилися на класі :ref:`Node <class_Node>` в Godot, "
"оскільки саме його ви використовуєте для кодування поведінки, і більшість "
"функцій движка покладаються саме на нього. Є ще один тип даних, який так "
"само важливий: :ref:`Resource <class_Resource>`."

msgid ""
"*Nodes* give you functionality: they draw sprites, 3D models, simulate "
"physics, arrange user interfaces, etc. **Resources** are **data "
"containers**. They don't do anything on their own: instead, nodes use the "
"data contained in resources."
msgstr ""
"*Вузли* надають вам функціональність: вони малюють спрайти, тривимірні "
"моделі, імітують фізику, впорядковують інтерфейс користувача тощо. "
"**Ресурси** - це **контейнери даних**. Вони нічого не роблять самостійно: "
"натомість, вузли використовують дані, що містяться в ресурсах."

msgid ""
"Anything Godot saves or loads from disk is a resource. Be it a scene (a "
"``.tscn`` or an ``.scn`` file), an image, a script... Here are "
"some :ref:`Resource <class_Resource>` examples:"
msgstr ""
"Все, що Godot зберігає або завантажує з диска, є ресурсом. Будь то сцена "
"(файл ``.tscn`` або ``.scn``), зображення, сценарій... Ось "
"деякі :ref:`Resource <class_Resource>` наприклади:"

msgid ":ref:`Texture <class_Texture>`"
msgstr ":ref:`Texture <class_Texture>`"

msgid ":ref:`Script <class_Script>`"
msgstr ":ref:`Script <class_Script>`"

msgid ":ref:`Mesh <class_Mesh>`"
msgstr ":ref:`Mesh <class_Mesh>`"

msgid ":ref:`Animation <class_Animation>`"
msgstr ":ref:`Animation <class_Animation>`"

msgid ":ref:`AudioStream <class_AudioStream>`"
msgstr ":ref:`AudioStream <class_AudioStream>`"

msgid ":ref:`Font <class_Font>`"
msgstr ":ref:`Font <class_Font>`"

msgid ":ref:`Translation <class_Translation>`"
msgstr ":ref:`Translation <class_Translation>`"

msgid ""
"When the engine loads a resource from disk, **it only loads it once**. If a "
"copy of that resource is already in memory, trying to load the resource "
"again will return the same copy every time. As resources only contain data, "
"there is no need to duplicate them."
msgstr ""
"Коли двигун завантажує ресурс з диска, **він завантажує його лише один "
"раз**. Якщо копія цього ресурсу вже є в пам'яті, при спробі знову "
"завантажити ресурс, кожен раз буде повертатися та сама копія. Оскільки "
"ресурси містять лише дані, не потрібно дублювати їх."

msgid ""
"Every object, be it a Node or a Resource, can export properties. There are "
"many types of Properties, like String, integer, Vector2, etc., and any of "
"these types can become a resource. This means that both nodes and resources "
"can contain resources as properties:"
msgstr ""
"Кожен об'єкт, чи то Вузол, чи Ресурс, може експортувати властивості. Існує "
"багато типів властивостей, таких як String, integer, Vector2 тощо, і будь-"
"який з цих типів може стати ресурсом. Це означає, що і вузли, і ресурси "
"можуть містити ресурси типу властивостей:"

msgid "External vs built-in"
msgstr "Зовнішні та вбудовані"

msgid "There are two ways to save resources. They can be:"
msgstr "Існує два способи зберігання ресурсів:"

msgid "**External** to a scene, saved on the disk as individual files."
msgstr "**Зовнішнє**, збережене на диску у вигляді окремих файлів."

msgid ""
"**Built-in**, saved inside the ``.tscn`` or the ``.scn`` file they're "
"attached to."
msgstr "**Вбудований**, збережений всередині ``.tscn``, або у ``.scn``, файлу."

msgid ""
"To be more specific, here's a :ref:`Texture2D <class_Texture2D>` in "
"a :ref:`Sprite2D <class_Sprite2D>` node:"
msgstr ""
"Щоб бути більш конкретним, ось :ref:`Texture2D <class_Texture2D>` у "
"вузлі :ref:`Sprite2D <class_Sprite2D>`:"

msgid ""
"Clicking the resource preview allows us to view the resource's properties."
msgstr ""
"Натиснувши кнопку попереднього перегляду ресурсу, ви зможете переглянути "
"властивості ресурсу."

msgid ""
"The path property tells us where the resource comes from. In this case, it "
"comes from a PNG image called ``robi.png``. When the resource comes from a "
"file like this, it is an external resource. If you erase the path or this "
"path is empty, it becomes a built-in resource."
msgstr ""
"Властивість Path (шлях) повідомляє нам, звідки береться ресурс. У цьому "
"випадку воно походить від зображення PNG ``robi.png``. Коли ресурс походить "
"з такого файлу, це зовнішній ресурс. Якщо стерти шлях, або цей шлях "
"порожній, він стане вбудованим ресурсом."

msgid ""
"The switch between built-in and external resources happens when you save the "
"scene. In the example above, if you erase the path ``\"res://robi.png\"`` "
"and save, Godot will save the image inside the ``.tscn`` scene file."
msgstr ""
"Перемикання між вбудованими та зовнішніми ресурсами відбувається під час "
"збереження сцени. У наведеному вище прикладі, якщо стерти шлях ``\"res://"
"robi.png\"`` і зберегти сцену, Godot збереже зображення всередині файла "
"сцени ``.tscn``."

msgid ""
"Even if you save a built-in resource, when you instance a scene multiple "
"times, the engine will only load one copy of it."
msgstr ""
"Навіть якщо ви зберігаєте вбудований ресурс, коли ви копіюєте сцену кілька "
"разів, движок завантажить лише одну його копію."

msgid "Loading resources from code"
msgstr "Завантаження ресурсів з коду"

msgid ""
"There are two ways to load resources from code. First, you can use the "
"``load()`` function anytime:"
msgstr ""
"Існує два способи завантаження ресурсів з коду. По-перше, ви в будь-який час "
"можете використовувати функцію ``load()``:"

msgid ""
"You can also ``preload`` resources. Unlike ``load``, this function will read "
"the file from disk and load it at compile-time. As a result, you cannot call "
"``preload`` with a variable path: you need to use a constant string."
msgstr ""
"Ви також можете ``попередньо завантажити`` ресурси. На відміну від ``load``, "
"ця функція читатиме файл із диска та завантажуватиме його під час "
"компіляції. Як результат, ви не можете викликати ``preload`` зі змінним "
"шляхом: вам потрібно використовувати постійний рядок."

msgid "Loading scenes"
msgstr "Завантаження сцен"

msgid ""
"Scenes are also resources, but there is a catch. Scenes saved to disk are "
"resources of type :ref:`PackedScene <class_PackedScene>`. The scene is "
"packed inside a :ref:`Resource <class_Resource>`."
msgstr ""
"Сцени також є ресурсами, але тут є підступ. Сцени, збережені на диску, є "
"ресурсами типу :ref:`PackedScene <class_PackedScene>`. Сцена упакована "
"всередину :ref:`Resource <class_Resource>`."

msgid ""
"To get an instance of the scene, you have to use "
"the :ref:`PackedScene.instantiate() <class_PackedScene_method_instantiate>` "
"method."
msgstr ""
"Щоб отримати екземпляр сцени, вам потрібно використати "
"метод :ref:`PackedScene.instantiate() "
"<class_PackedScene_method_instantiate>`."

msgid ""
"This method creates the nodes in the scene's hierarchy, configures them, and "
"returns the root node of the scene. You can then add it as a child of any "
"other node."
msgstr ""
"Цей метод створює вузли в ієрархії сцени, налаштовує їх і повертає кореневий "
"вузол сцени. Потім ви можете додати його в вигляді нащадка будь-якому іншому "
"вузлу."

msgid ""
"The approach has several advantages. As the :ref:`PackedScene.instantiate() "
"<class_PackedScene_method_instantiate>` function is fast, you can create new "
"enemies, bullets, effects, etc. without having to load them again from disk "
"each time. Remember that, as always, images, meshes, etc. are all shared "
"between the scene instances."
msgstr ""
"Підхід має кілька переваг. Оскільки функція :ref:`PackedScene.instantiate() "
"<class_PackedScene_method_instantiate>` є швидкою, ви можете створювати "
"нових ворогів, кулі, ефекти тощо, не завантажуючи їх щоразу з диска. "
"Пам’ятайте, що, як завжди, зображення, сітки тощо є спільними для "
"екземплярів сцени."

msgid "Freeing resources"
msgstr "Звільнення ресурсів"

msgid ""
"When a :ref:`Resource <class_Resource>` is no longer in use, it will "
"automatically free itself. Since, in most cases, Resources are contained in "
"Nodes, when you free a node, the engine frees all the resources it owns as "
"well if no other node uses them."
msgstr ""
"Коли :ref:`Ресурс <class_Resource>` більше не використовується, він "
"автоматично звільниться. Оскільки в більшості випадків ресурси містяться у "
"вузлах, коли ви звільняєте вузол, система також звільняє всі ресурси, якими "
"володіє, якщо жоден інший вузол їх не використовує."

msgid "Creating your own resources"
msgstr "Створення власних ресурсів"

msgid ""
"Like any Object in Godot, users can also script Resources. Resource scripts "
"inherit the ability to freely translate between object properties and "
"serialized text or binary data (\\*.tres, \\*.res). They also inherit the "
"reference-counting memory management from the RefCounted type."
msgstr ""
"Як і будь-який об’єкт у Godot, користувачі також можуть створювати сценарії "
"ресурсів. Сценарії ресурсів успадковують можливість вільного перекладу між "
"властивостями об’єкта та серіалізованим текстом або двійковими даними "
"(\\*.tres, \\*.res). Вони також успадковують керування пам’яттю для "
"підрахунку посилань від типу RefCounted."

msgid ""
"This comes with many distinct advantages over alternative data structures, "
"such as JSON, CSV, or custom TXT files. Users can only import these assets "
"as a :ref:`Dictionary <class_Dictionary>` (JSON) or as a :ref:`FileAccess "
"<class_FileAccess>` to parse. What sets Resources apart is their inheritance "
"of :ref:`Object <class_Object>`, :ref:`RefCounted <class_RefCounted>`, "
"and :ref:`Resource <class_Resource>` features:"
msgstr ""
"Це має багато явних переваг перед альтернативними структурами даних, такими "
"як файли JSON, CSV або спеціальні TXT. Користувачі можуть імпортувати ці "
"ресурси лише як :ref:`Dictionary <class_Dictionary>` (JSON) або "
"як :ref:`FileAccess <class_FileAccess>` для аналізу. Що відрізняє Resources "
"від інших, так це їх успадкування функцій :ref:`Object "
"<class_Object>`, :ref:`RefCounted <class_RefCounted>` і :ref:`Resource "
"<class_Resource>`:"

msgid ""
"They can define constants, so constants from other data fields or objects "
"are not needed."
msgstr ""
"Вони можуть визначати константи, тому константи з інших полів даних, або "
"об'єктів, не потрібні."

msgid ""
"They can define methods, including setter/getter methods for properties. "
"This allows for abstraction and encapsulation of the underlying data. If the "
"Resource script's structure needs to change, the game using the Resource "
"need not also change."
msgstr ""
"Вони можуть визначати методи, включаючи методи встановлення/отримання "
"(setter/getter) для властивостей. Це дозволяє абстрагувати та інкапсулювати "
"основні дані. Якщо структура скрипту Resource потребує змін, то гра, що "
"використовує Resource, не потребує їх."

msgid ""
"They can define signals, so Resources can trigger responses to changes in "
"the data they manage."
msgstr ""
"Вони можуть визначати сигнали, тому Ресурси можуть реагувати на зміни в "
"даних, якими вони керують."

msgid ""
"They have defined properties, so users know 100% that their data will exist."
msgstr ""
"Вони мають визначені властивості, тому користувачі впевнені на 100%, що їх "
"дані будуть існувати."

msgid ""
"Resource auto-serialization and deserialization is a built-in Godot Engine "
"feature. Users do not need to implement custom logic to import/export a "
"resource file's data."
msgstr ""
"Автосеріалізація та десеріалізація ресурсів є вбудованою функцією Godot "
"Engine. Користувачам не потрібно застосовувати власну логіку для імпорту/"
"експорту даних файлу ресурсу."

msgid ""
"Resources can even serialize sub-Resources recursively, meaning users can "
"design even more sophisticated data structures."
msgstr ""
"Ресурси можуть навіть використовувати вкладені ресурси рекурсивно, тобто "
"користувачі можуть створювати ще складніші структури даних."

msgid ""
"Users can save Resources as version-control-friendly text files (\\*.tres). "
"Upon exporting a game, Godot serializes resource files as binary files "
"(\\*.res) for increased speed and compression."
msgstr ""
"Користувачі можуть зберігати Ресурси як текстові файли (\\*.tres). Після "
"експорту гри Godot серіалізує файли ресурсів у вигляді бінарних файлів "
"(\\*.res) для збільшення швидкості та стиснення."

msgid ""
"Godot Engine's Inspector renders and edits Resource files out-of-the-box. As "
"such, users often do not need to implement custom logic to visualize or edit "
"their data. To do so, double-click the resource file in the FileSystem dock "
"or click the folder icon in the Inspector and open the file in the dialog."
msgstr ""
"Інспектор Godot Engine виводить і редагує файли ресурсів з коробки. Таким "
"чином, користувачам часто не потрібно застосовувати власну логіку для "
"візуалізації, чи редагування, своїх даних. Для цього двічі клацніть файл "
"ресурсу на панелі **Файлова система**, або натисніть значок папки в "
"інспекторі та відкрийте файл у діалоговому вікні."

msgid ""
"They can extend **other** resource types besides just the base Resource."
msgstr ""
"Вони можуть розширювати **інші** типи ресурсів, окрім базового ресурсу."

msgid "Godot makes it easy to create custom Resources in the Inspector."
msgstr "Godot дозволяє легко створювати власні ресурси в Інспекторі."

msgid "Set the ``script`` property in the Inspector to be your script."
msgstr "Встановіть властивість ``script`` в Інспекторі для вашого скрипту."

msgid ""
"If the script's language supports :ref:`script classes "
"<doc_gdscript_basics_class_name>`, then it streamlines the process. Defining "
"a name for your script alone will add it to the Inspector's creation dialog. "
"This will auto-add your script to the Resource object you create."
msgstr ""
"Якщо мова сценарію підтримує :ref:`класи сценаріїв "
"<doc_gdscript_basics_class_name>`, це спрощує процес. Визначення назви лише "
"для вашого сценарію додасть його до діалогового вікна створення інспектора. "
"Це автоматично додасть ваш сценарій до об’єкта Resource, який ви створюєте."

msgid ""
"Let's see some examples. Create a :ref:`Resource <class_Resource>` and name "
"it ``bot_stats``. It should appear in your file tab with the full name "
"``bot_stats.tres``. Without a script, it's useless, so let's add some data "
"and logic! Attach a script to it named ``bot_stats.gd`` (or just create a "
"new script, and then drag it to it)."
msgstr ""
"Давайте розглянемо кілька прикладів. Створіть :ref:`Ресурс <class_Resource>` "
"і назвіть його ``bot_stats``. Він має з’явитися на вкладці вашого файлу з "
"повною назвою ``bot_stats.tres``. Без сценарію це марно, тому давайте додамо "
"трохи даних і логіки! Додайте до нього сценарій під назвою ``bot_stats.gd`` "
"(або просто створіть новий сценарій, а потім перетягніть його туди)."

msgid ""
"Now, create a :ref:`CharacterBody3D <class_CharacterBody3D>`, name it "
"``Bot``, and add the following script to it:"
msgstr ""
"Тепер створіть :ref:`CharacterBody3D <class_CharacterBody3D>`, назвіть його "
"``Bot`` і додайте до нього такий сценарій:"

msgid ""
"Now, select the :ref:`CharacterBody3D <class_CharacterBody3D>` node which we "
"named ``bot``, and drag&drop the ``bot_stats.tres`` resource onto the "
"Inspector. It should print 10! Obviously, this setup can be used for more "
"advanced features than this, but as long you really understand *how* it all "
"worked, you should figure out everything else related to Resources."
msgstr ""
"Тепер виберіть вузол :ref:`CharacterBody3D <class_CharacterBody3D>`, який ми "
"назвали ``bot``, і перетягніть ресурс ``bot_stats.tres`` в інспектор. Має "
"надрукувати 10! Очевидно, що це налаштування можна використовувати для більш "
"розширених функцій, ніж це, але якщо ви дійсно розумієте, *як* це все "
"працювало, вам слід зрозуміти все інше, пов’язане з ресурсами."

msgid ""
"Resource scripts are similar to Unity's ScriptableObjects. The Inspector "
"provides built-in support for custom resources. If desired though, users can "
"even design their own Control-based tool scripts and combine them with "
"an :ref:`EditorPlugin <class_EditorPlugin>` to create custom visualizations "
"and editors for their data."
msgstr ""
"Скрипти ресурсів схожі на ScriptableObjects в Unity. Інспектор забезпечує "
"вбудовану підтримку користувацьких ресурсів. За бажанням користувачі можуть "
"навіть розробити власні скрипти інструментів на основі контролю (Control) та "
"комбінувати їх з :ref:`EditorPlugin <class_EditorPlugin>`, щоб створити "
"власні візуалізації та редактори для своїх даних."

msgid ""
"Unreal Engine's DataTables and CurveTables are also easy to recreate with "
"Resource scripts. DataTables are a String mapped to a custom struct, similar "
"to a Dictionary mapping a String to a secondary custom Resource script."
msgstr ""
"DataTables і CurveTables Unreal Engine також легко відтворити за допомогою "
"сценаріїв Resource. DataTables — це рядок, зіставлений зі спеціальною "
"структурою, подібно до того, як словник зіставляє рядок із вторинним "
"настроюваним сценарієм ресурсу."

msgid ""
"Instead of inlining the Dictionary values, one could also, alternatively:"
msgstr ""
"Замість того, щоб просто вписати значення Словника, можна також "
"альтернативно:"

msgid ""
"Import a table of values from a spreadsheet and generate these key-value "
"pairs."
msgstr ""
"Імпортувати таблицю значень із електронної таблиці та згенерувати пари ключ-"
"значення або."

msgid ""
"Design a visualization within the editor and create a plugin that adds it to "
"the Inspector when you open these types of Resources."
msgstr ""
"Розробіть візуалізацію в редакторі та створіть плагін, який додає її до "
"інспектора, коли ви відкриваєте ці типи ресурсів."

msgid ""
"CurveTables are the same thing, except mapped to an Array of float values or "
"a :ref:`Curve <class_Curve>`/:ref:`Curve2D <class_Curve2D>` resource object."
msgstr ""
"CurveTables - це те саме, за винятком відображення масиву з десяткових "
"значень, або об'єкта ресурсу :ref:`Curve <class_Curve>`/:ref:`Curve2D "
"<class_Curve2D>` ."

msgid ""
"Beware that resource files (\\*.tres/\\*.res) will store the path of the "
"script they use in the file. When loaded, they will fetch and load this "
"script as an extension of their type. This means that trying to assign a "
"subclass, i.e. an inner class of a script (such as using the ``class`` "
"keyword in GDScript) won't work. Godot will not serialize the custom "
"properties on the script subclass properly."
msgstr ""
"Пильнуйте, щоб файли ресурсів (\\*.tres /\\*.res) зберігали у файлі шлях до "
"скрипту, який вони використовують. При завантаженні вони будуть отримувати "
"та завантажувати цей скрипт, як розширення свого типу. Це означає, що спроба "
"призначити підклас, тобто внутрішній клас скрипту (наприклад, з допомогою "
"ключового слова ``class`` в GDScript), не буде працювати. Godot не буде "
"належним чином серіалізувати власні властивості підкласу скрипту."

msgid ""
"In the example below, Godot would load the ``Node`` script, see that it "
"doesn't extend ``Resource``, and then determine that the script failed to "
"load for the Resource object since the types are incompatible."
msgstr ""
"У наведеному нижче прикладі Godot завантажує скрипт ``Node``, бачить, що він "
"не розширюється ``Resource``, а потім визначає, що скрипт не вдалося "
"завантажити для об'єкта ресурсу, оскільки типи несумісні."
