#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Nodes and scene instances"
msgstr "Вузли та екземпляри сцени"

msgid ""
"This guide explains how to get nodes, create nodes, add them as a child, and "
"instantiate scenes from code."
msgstr ""
"У цьому посібнику пояснюється, як отримувати вузли, створювати вузли, "
"додавати їх як дочірні елементи та створювати екземпляри сцен із коду."

msgid ""
"Check the :ref:`doc_instancing` tutorial to learn about Godot's approach to "
"scene instancing."
msgstr ""
"Перегляньте підручник :ref:`doc_instancing`, щоб дізнатися про підхід Godot "
"до створення екземплярів сцени."

msgid "Getting nodes"
msgstr "Отримання вузлів"

msgid ""
"You can get a reference to a node by calling the :ref:`Node.get_node() "
"<class_Node_method_get_node>` method. For this to work, the child node must "
"be present in the scene tree. Getting it in the parent node's ``_ready()`` "
"function guarantees that."
msgstr ""
"Ви можете отримати посилання на вузол, викликавши "
"метод :ref:`Node.get_node() <class_Node_method_get_node>`. Щоб це працювало, "
"дочірній вузол має бути присутнім у дереві сцени. Отримання його у функції "
"``_ready()`` батьківського вузла гарантує це."

msgid ""
"If, for example,  you have a scene tree like this, and you want to get a "
"reference to the Sprite2D and Camera2D nodes to access them in your script."
msgstr ""
"Якщо, наприклад, у вас є дерево сцен, як це, і ви хочете отримати посилання "
"на вузли Sprite2D і Camera2D, щоб отримати доступ до них у вашому сценарії."

msgid "To do so, you can use the following code."
msgstr "Для цього ви можете скористатися наступним кодом."

msgid ""
"Note that you get nodes using their name, not their type. Above, "
"\"Sprite2D\" and \"Camera2D\" are the nodes' names in the scene."
msgstr ""
"Зверніть увагу, що ви отримуєте вузли, використовуючи їх ім’я, а не тип. "
"Вище «Sprite2D» і «Camera2D» є іменами вузлів у сцені."

msgid ""
"If you rename the Sprite2D node as Skin in the Scene dock, you have to "
"change the line that gets the node to ``get_node(\"Skin\")`` in the script."
msgstr ""
"Якщо ви перейменуєте вузол Sprite2D на Skin у доку Scene, вам доведеться "
"змінити рядок, який отримує вузол, на ``get_node(\"Skin\")`` у сценарії."

msgid "Node paths"
msgstr "Шляхи вузлів"

msgid ""
"When getting a reference to a node, you're not limited to getting a direct "
"child. The ``get_node()`` function supports paths, a bit like when working "
"with a file browser. Add a slash to separate nodes."
msgstr ""
"Отримавши посилання на вузол, ви не обмежені отриманням безпосереднього "
"дочірнього елемента. Функція ``get_node()`` підтримує шляхи, схоже на роботу "
"з файловим браузером. Додайте косу риску для розділення вузлів."

msgid ""
"Take the following example scene, with the script attached to the "
"UserInterface node."
msgstr ""
"Візьмемо наступний приклад сцени зі сценарієм, приєднаним до вузла "
"UserInterface."

msgid "To get the AnimationPlayer node, you would use the following code."
msgstr "Щоб отримати вузол AnimationPlayer, слід скористатися наступним кодом."

msgid ""
"As with file paths, you can use \"..\" to get a parent node. The best "
"practice is to avoid doing that though not to break encapsulation. You can "
"also start the path with a forward slash to make it absolute, in which case "
"your topmost node would be \"/root\", the application's predefined root "
"viewport."
msgstr ""
"Як і у випадку шляхів до файлів, ви можете використовувати «..», щоб "
"отримати батьківський вузол. Найкраще уникати цього, хоча й не порушувати "
"інкапсуляцію. Ви також можете починати шлях із косої риски, щоб зробити його "
"абсолютним. У цьому випадку ваш верхній вузол буде «/root», попередньо "
"визначене кореневе вікно перегляду програми."

msgid "Syntactic sugar"
msgstr "Синтаксичний цукор"

msgid ""
"You can use two shorthands to shorten your code in GDScript. Firstly, "
"putting the ``@onready`` annotation before a member variable makes it "
"initialize right before the ``_ready()`` callback."
msgstr ""
"Щоб скоротити свій код у GDScript, можна використовувати два скорочення. По-"
"перше, розміщення анотації ``@onready`` перед змінною-членом ініціалізує її "
"безпосередньо перед зворотним викликом ``_ready()``."

msgid ""
"There is also a short notation for ``get_node()``: the dollar sign, \"$\". "
"You place it before the name or path of the node you want to get."
msgstr ""
"Існує також коротке позначення для ``get_node()``: знак долара, \"$\". Ви "
"розміщуєте його перед назвою або шляхом до вузла, який хочете отримати."

msgid "Creating nodes"
msgstr "Створення вузлів"

msgid ""
"To create a node from code, call its ``new()`` method like for any other "
"class-based datatype."
msgstr ""
"Щоб створити вузол з коду, викличте його метод ``new()``, як і для будь-"
"якого іншого типу даних, заснованого на класі."

msgid ""
"You can store the newly created node's reference in a variable and call "
"``add_child()`` to add it as a child of the node to which you attached the "
"script."
msgstr ""
"Ви можете зберегти посилання на щойно створений вузол у змінній і викликати "
"``add_child()``, щоб додати його як дочірнього вузла, до якого ви прикріпили "
"сценарій."

msgid ""
"To delete a node and free it from memory, you can call its ``queue_free()`` "
"method. Doing so queues the node for deletion at the end of the current "
"frame after it has finished processing. At that point, the engine removes "
"the node from the scene and frees the object in memory."
msgstr ""
"Щоб видалити вузол і звільнити його з пам’яті, ви можете викликати його "
"метод ``queue_free()``. Це поставить вузол у чергу на видалення в кінці "
"поточного кадру після завершення його обробки. У цей момент механізм видаляє "
"вузол зі сцени та звільняє об’єкт у пам’яті."

msgid ""
"Before calling ``sprite2d.queue_free()``, the remote scene tree looks like "
"this."
msgstr ""
"Перед викликом ``sprite2d.queue_free()`` дерево віддаленої сцени виглядає "
"так."

msgid ""
"After the engine freed the node, the remote scene tree doesn't display the "
"sprite anymore."
msgstr ""
"Після того як механізм звільнив вузол, дерево віддаленої сцени більше не "
"відображає спрайт."

msgid ""
"You can alternatively call ``free()`` to immediately destroy the node. You "
"should do this with care as any reference to it will instantly become "
"``null``. We recommend using ``queue_free()`` unless you know what you're "
"doing."
msgstr ""
"Ви також можете викликати ``free()``, щоб негайно знищити вузол. Ви повинні "
"робити це обережно, оскільки будь-яке посилання на нього миттєво стане "
"``нульовим``. Ми рекомендуємо використовувати ``queue_free()``, якщо ви не "
"знаєте, що робите."

msgid ""
"When you free a node, it also frees all its children. Thanks to this, to "
"delete an entire branch of the scene tree, you only have to free the topmost "
"parent node."
msgstr ""
"Коли ви звільняєте вузол, він також звільняє всіх своїх дітей. Завдяки "
"цьому, щоб видалити цілу гілку дерева сцени, вам потрібно звільнити лише "
"самий верхній батьківський вузол."

msgid "Instancing scenes"
msgstr "Інстансування сцени"

msgid ""
"Scenes are templates from which you can create as many reproductions as "
"you'd like. This operation is called instancing, and doing it from code "
"happens in two steps:"
msgstr ""
"Сцени — це шаблони, з яких можна створити скільки завгодно репродукцій. Ця "
"операція називається екземпляром, і її виконання з коду відбувається в два "
"етапи:"

msgid "Loading the scene from the local drive."
msgstr "Завантажуємо сцену з локального диска."

msgid ""
"Creating an instance of the loaded :ref:`PackedScene <class_PackedScene>` "
"resource."
msgstr ""
"Створення екземпляра завантаженого ресурсу :ref:`PackedScene "
"<class_PackedScene>`."

msgid ""
"Preloading the scene can improve the user's experience as the load operation "
"happens when the compiler reads the script and not at runtime. This feature "
"is only available with GDScript."
msgstr ""
"Попереднє завантаження сцени може покращити роботу користувача, оскільки "
"операція завантаження відбувається, коли компілятор читає сценарій, а не під "
"час виконання. Ця функція доступна лише з GDScript."

msgid ""
"At that point, ``scene`` is a packed scene resource, not a node. To create "
"the actual node, you need to call :ref:`PackedScene.instantiate() "
"<class_PackedScene_method_instantiate>`. It returns a tree of nodes that you "
"can use as a child of your current node."
msgstr ""
"У цей момент ``scene`` є ресурсом упакованої сцени, а не вузлом. Щоб "
"створити власне вузол, вам потрібно "
"викликати :ref:`PackedScene.instantiate() "
"<class_PackedScene_method_instantiate>`. Він повертає дерево вузлів, яке ви "
"можете використовувати як дочірнє до поточного вузла."

msgid ""
"The advantage of this two-step process is you can keep a packed scene loaded "
"and create new instances on the fly. For example, to quickly instance "
"several enemies or bullets."
msgstr ""
"Перевага цього двоетапного процесу полягає в тому, що ви можете тримати "
"упаковану сцену завантаженою та створювати нові екземпляри на льоту. "
"Наприклад, щоб швидко інстантувати кілька ворогів або куль."
