#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Idle and Physics Processing"
msgstr "Idle і Physics Processing"

msgid ""
"Games run in a loop. Each frame, you need to update the state of your game "
"world before drawing it on screen. Godot provides two virtual methods in the "
"Node class to do so: :ref:`Node._process() "
"<class_Node_private_method__process>` and :ref:`Node._physics_process() "
"<class_Node_private_method__physics_process>`. If you define either or both "
"in a script, the engine will call them automatically."
msgstr ""
"Ігри виконуються циклічно. Для кожного кадру вам потрібно оновити стан свого "
"ігрового світу, перш ніж відобразити його на екрані. Для цього Godot надає "
"два віртуальні методи в класі Node: :ref:`Node._process() "
"<class_Node_private_method__process>` і :ref:`Node._physics_process() "
"<class_Node_private_method__physics_process>`. Якщо ви визначите один або "
"обидва в сценарії, механізм викличе їх автоматично."

msgid "There are two types of processing available to you:"
msgstr "Вам доступні два види обробки:"

msgid ""
"**Idle processing** allows you to run code that updates a node every frame, "
"as often as possible."
msgstr ""
"**Неактивна обробка** дозволяє запускати код, який оновлює вузол кожного "
"кадру якомога частіше."

msgid ""
"**Physics processing** happens at a fixed rate, 60 times per second by "
"default. This is independent of your game's actual framerate, and keeps "
"physics running smoothly. You should use it for anything that involves the "
"physics engine, like moving a body that collides with the environment."
msgstr ""
"**Фізична обробка** відбувається з фіксованою швидкістю, 60 разів на секунду "
"за умовчанням. Це не залежить від фактичної частоти кадрів вашої гри та "
"забезпечує безперебійну роботу фізики. Ви повинні використовувати його для "
"всього, що стосується фізичного механізму, як-от переміщення тіла, яке "
"стикається з навколишнім середовищем."

msgid ""
"You can activate idle processing by defining the ``_process()`` method in a "
"script. You can turn it off and back on by calling :ref:`Node.set_process() "
"<class_Node_method_set_process>`."
msgstr ""
"Ви можете активувати неактивну обробку, визначивши метод ``_process()`` у "
"сценарії. Ви можете вимкнути та знову ввімкнути його, "
"викликавши :ref:`Node.set_process() <class_Node_method_set_process>`."

msgid "The engine calls this method every time it draws a frame:"
msgstr "Двигун викликає цей метод кожного разу, коли малює кадр:"

msgid ""
"Keep in mind that the frequency at which the engine calls ``_process()`` "
"depends on your application's framerate, which varies over time and across "
"devices."
msgstr ""
"Майте на увазі, що частота, з якою механізм викликає ``_process()``, "
"залежить від частоти кадрів вашої програми, яка змінюється з часом і на "
"різних пристроях."

msgid ""
"The function's ``delta`` parameter is the time elapsed in seconds since the "
"previous call to ``_process()``. Use this parameter to make calculations "
"independent of the framerate. For example, you should always multiply a "
"speed value by ``delta`` to animate a moving object."
msgstr ""
"Параметр ``delta`` функції - це час, що минув у секундах з моменту "
"попереднього виклику ``_process()``. Використовуйте цей параметр, щоб робити "
"обчислення незалежно від частоти кадрів. Наприклад, ви завжди повинні "
"помножити значення швидкості на ``дельту``, щоб анімувати рухомий об'єкт."

msgid ""
"Physics processing works with a similar virtual function: "
"``_physics_process()``. Use it for calculations that must happen before each "
"physics step, like moving a character that collides with the game world. As "
"mentioned above, ``_physics_process()`` runs at fixed time intervals as much "
"as possible to keep the physics interactions stable. You can change the "
"interval between physics steps in the Project Settings, under Physics -> "
"Common -> Physics Fps. By default, it's set to run 60 times per second."
msgstr ""
"Обробка фізичних даних працює за допомогою подібної віртуальної функції: "
"``_physics_process()``. Використовуйте його для обчислень, які мають "
"виконуватися перед кожним кроком фізики, як-от переміщення персонажа, який "
"стикається зі світом гри. Як згадувалося вище, ``_physics_process()`` "
"виконується з фіксованими інтервалами часу, наскільки це можливо, щоб "
"підтримувати фізичні взаємодії стабільними. Ви можете змінити інтервал між "
"кроками фізики в налаштуваннях проекту в розділі Фізика -> Загальні -> "
"Фізика Fps. За замовчуванням він налаштований на виконання 60 разів на "
"секунду."

msgid "The engine calls this method before every physics step:"
msgstr "Двигун викликає цей метод перед кожним кроком фізики:"

msgid ""
"The function ``_process()`` is not synchronized with physics. Its rate "
"depends on hardware and game optimization. It also runs after the physics "
"step in single-threaded games."
msgstr ""
"Функція ``_process()`` не синхронізована з фізикою. Його швидкість залежить "
"від апаратного забезпечення та оптимізації гри. Він також запускається після "
"етапу фізики в однопоточних іграх."

msgid ""
"You can see the ``_process()`` function at work by creating a scene with a "
"single Label node, with the following script attached to it:"
msgstr ""
"Ви можете спостерігати за роботою функції ``_process()``, створивши сцену з "
"одним вузлом Label, до якого додається наступний сценарій:"

msgid "When you run the scene, you should see a counter increasing each frame."
msgstr ""
"Коли ви запускаєте сцену, ви повинні побачити лічильник, що збільшує кожен "
"кадр."
