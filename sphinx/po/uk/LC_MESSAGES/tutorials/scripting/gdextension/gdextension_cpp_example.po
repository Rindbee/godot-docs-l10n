#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDExtension C++ example"
msgstr "Приклад GDExtension C++"

msgid "Introduction"
msgstr "Вступ"

msgid ""
"The C++ bindings for GDExtension are built on top of the C GDExtension API "
"and provide a nicer way to \"extend\" nodes and other built-in classes in "
"Godot using C++. This new system allows the extension of Godot to nearly the "
"same level as statically linked C++ modules."
msgstr ""
"Прив’язки C++ для GDExtension створені на основі API C GDExtension і "
"забезпечують кращий спосіб «розширити» вузли та інші вбудовані класи в Godot "
"за допомогою C++. Ця нова система дозволяє розширити Godot майже до того ж "
"рівня, що й статично пов’язані модулі C++."

msgid ""
"You can download the included example in the test folder of the godot-cpp "
"repository `on GitHub <https://github.com/godotengine/godot-cpp>`__."
msgstr ""
"Ви можете завантажити включений приклад у тестову папку репозиторію godot-"
"cpp `на GitHub <https://github.com/godotengine/godot-cpp>`__."

msgid "Setting up the project"
msgstr "Налаштування проекту"

msgid "There are a few prerequisites you'll need:"
msgstr "Вам знадобиться кілька передумов:"

msgid "a Godot 4 executable,"
msgstr "виконуваний файл Godot 4,"

msgid "a C++ compiler,"
msgstr "компілятор C++,"

msgid "SCons as a build tool,"
msgstr "SCons як інструмент для створення,"

msgid ""
"a copy of the `godot-cpp repository <https://github.com/godotengine/godot-"
"cpp>`__."
msgstr ""
"копія репозиторію godot-cpp <https://github.com/godotengine/godot-cpp>`__."

msgid ""
"See also :ref:`Configuring an IDE <toc-devel-configuring_an_ide>` "
"and :ref:`Compiling <toc-devel-compiling>` as the build tools are identical "
"to the ones you need to compile Godot from source."
msgstr ""
"Дивіться також :ref:`Configuring an IDE <toc-devel-configuring_an_ide>` "
"i :ref:`Compiling <toc-devel-compiling>` оскільки інструменти збирання "
"ідентичні тим, які вам потрібні для компіляції Godot із вихідних кодів."

msgid ""
"You can download the `godot-cpp repository <https://github.com/godotengine/"
"godot-cpp>`__ from GitHub or let Git do the work for you. Note that this "
"repository has different branches for different versions of Godot. "
"GDExtensions will not work in older versions of Godot (only Godot 4 and up) "
"and vice versa, so make sure you download the correct branch."
msgstr ""
"Ви можете завантажити репозиторій godot-cpp <https://github.com/godotengine/"
"godot-cpp>`__ з GitHub або дозволити Git зробити роботу за вас. Зауважте, що "
"це сховище має різні гілки для різних версій Godot. GDExtensions не "
"працюватимуть у старіших версіях Godot (тільки Godot 4 і вище) і навпаки, "
"тому переконайтеся, що ви завантажили правильну гілку."

msgid ""
"To use `GDExtension <https://godotengine.org/article/introducing-gd-"
"extensions>`__ you need to use the godot-cpp branch that matches the version "
"of Godot that you are targeting. For example, if you're targeting Godot 4.1, "
"use the ``4.1`` branch. Throughout this tutorial we use ``4.x``, which will "
"need to be replaced with the version of Godot you are targeting."
msgstr ""
"Ви можете завантажити репозиторій godot-cpp <https://github.com/godotengine/"
"godot-cpp>`__ з GitHub або дозволити Git зробити роботу для вас. Зауважте, "
"що це сховище має різні гілки для різних версій Godot. GDExtensions не "
"працюють у старих версіях Godot (тільки Godot 4 і вище) і навпаки, тому "
"переконайтеся, що ви завантажили правильну гілку."

msgid ""
"The ``master`` branch is the development branch which is updated regularly "
"to work with Godot's ``master`` branch."
msgstr ""
"Гілка ``master`` — це гілка розробки, яка регулярно оновлюється для роботи з "
"гілкою ``master`` Godot."

msgid ""
"Our long-term goal is that GDExtensions targeting an earlier version of "
"Godot will work in later minor versions, but not vice-versa. For example, a "
"GDExtension targeting Godot 4.1 should work just fine in Godot 4.2, but one "
"targeting Godot 4.2 won't work in Godot 4.1."
msgstr ""
"Наша довгострокова мета полягає в тому, щоб GDExtensions, націлені на "
"попередню версію Godot, працювали в наступних проміжних версіях, але не "
"навпаки. Наприклад, GDExtension, націлене на Godot 4.1, має добре працювати "
"в Godot 4.2, але розширення, націлене на Godot 4.2, не працюватиме в Godot "
"4.1."

msgid ""
"However, GDExtension is currently *experimental*, which means that we may "
"break compatibility in order to fix major bugs or include critical features. "
"For example, GDExtensions created for Godot 4.0 aren't compatible with Godot "
"4.1 (see :ref:`updating_your_gdextension_for_godot_4_1`)."
msgstr ""
"Однак наразі GDExtension є *експериментальним*, що означає, що ми можемо "
"порушити сумісність, щоб виправити основні помилки або включити критичні "
"функції. Наприклад, GDExtensions, створені для Godot 4.0, несумісні з Godot "
"4.1 (див. :ref:`updating_your_gdextension_for_godot_4_1`)."

msgid ""
"If you are versioning your project using Git, it is recommended to add it as "
"a Git submodule:"
msgstr ""
"Якщо ви керуєте версіями свого проекту за допомогою Git, рекомендуємо додати "
"його як субмодуль Git:"

msgid "Alternatively, you can also clone it to the project folder:"
msgstr "Крім того, ви також можете клонувати його до папки проекту:"

msgid ""
"If you decide to download the repository or clone it into your folder, make "
"sure to keep the folder layout the same as we've setup here. Much of the "
"code we'll be showcasing here assumes the project has this layout."
msgstr ""
"Якщо ви вирішите завантажити репозиторій або клонувати його у свою папку, "
"переконайтеся, що макет папки такий самий, як ми налаштувати тут. Значна "
"частина коду, який ми тут демонструватимемо, припускає, що проект має такий "
"макет."

msgid ""
"If you cloned the example from the link specified in the introduction, the "
"submodules are not automatically initialized. You will need to execute the "
"following commands:"
msgstr ""
"Якщо ви клонували приклад за посиланням, указаним у вступі, субмодулі не "
"ініціалізуються автоматично. Вам потрібно буде виконати наступні команди:"

msgid "This will initialize the repository in your project folder."
msgstr "Це ініціалізує репозиторій у вашій папці проекту."

msgid "Building the C++ bindings"
msgstr "Побудова прив'язок C++"

msgid ""
"Now that we've downloaded our prerequisites, it is time to build the C++ "
"bindings."
msgstr ""
"Тепер, коли ми завантажили наші передумови, настав час створювати прив’язки "
"C++."

msgid ""
"The repository contains a copy of the metadata for the current Godot "
"release, but if you need to build these bindings for a newer version of "
"Godot, call the Godot executable:"
msgstr ""
"Репозиторій містить копію метаданих для поточного випуску Godot, але якщо "
"вам потрібно створити ці зв’язки для новішої версії Godot, викличте "
"виконуваний файл Godot:"

msgid ""
"The resulting ``extension_api.json`` file will be created in the "
"executable's directory. Copy it to the project folder and add "
"``custom_api_file=<PATH_TO_FILE>`` to the scons command below."
msgstr ""
"Отриманий файл ``extension_api.json`` буде створено в каталозі виконуваного "
"файлу. Скопіюйте його до папки проекту та додайте "
"``custom_api_file=<PATH_TO_FILE>`` до команди scons нижче."

msgid ""
"To generate and compile the bindings, use this command (replacing "
"``<platform>`` with ``windows``, ``linux`` or ``macos`` depending on your "
"OS):"
msgstr ""
"Щоб створити та скомпілювати прив’язки, використовуйте цю команду (замінивши "
"``<платформа>`` на ``windows``, ``linux`` або ``macos`` залежно від вашої "
"ОС):"

msgid ""
"The build process automatically detects the number of CPU threads to use for "
"parallel builds. To specify a number of CPU threads to use, add ``-jN`` at "
"the end of the SCons command line where ``N`` is the number of CPU threads "
"to use."
msgstr ""
"Процес збірки автоматично визначає кількість потоків ЦП, які потрібно "
"використовувати для паралельних збірок. Щоб вказати кількість потоків ЦП для "
"використання, додайте ``-jN`` в кінці командного рядка SCons, де ``N`` — це "
"кількість потоків ЦП для використання."

msgid ""
"This step will take a while. When it is completed, you should have static "
"libraries that can be compiled into your project stored in ``godot-cpp/bin/"
"``."
msgstr ""
"Цей крок займе деякий час. Після завершення у вас повинні бути статичні "
"бібліотеки, які можна скомпілювати у ваш проект, які зберігаються в ``godot-"
"cpp/bin/``."

msgid "You may need to add ``bits=64`` to the command on Windows or Linux."
msgstr ""
"Можливо, вам знадобиться додати ``bits=64`` до команди в Windows або Linux."

msgid "Creating a simple plugin"
msgstr "Створення простого додатка"

msgid ""
"Now it's time to build an actual plugin. We'll start by creating an empty "
"Godot project in which we'll place a few files."
msgstr ""
"Тепер настав час створити справжній плагін. Ми почнемо зі створення "
"порожнього проекту Godot, у якому ми розмістимо кілька файлів."

msgid ""
"Open Godot and create a new project. For this example, we will place it in a "
"folder called ``demo`` inside our GDExtension's folder structure."
msgstr ""
"Відкрийте Godot і створіть новий проект. Для цього прикладу ми розмістимо "
"його в папці під назвою ``demo`` у структурі папок нашого GDExtension."

msgid ""
"In our demo project, we'll create a scene containing a Node called \"Main\" "
"and we'll save it as ``main.tscn``. We'll come back to that later."
msgstr ""
"У нашому демонстраційному проекті ми створимо сцену, що містить вузол під "
"назвою «Main» і збережемо його як ``main.tscn``. Ми повернемося до цього "
"пізніше."

msgid ""
"Back in the top-level GDExtension module folder, we're also going to create "
"a subfolder called ``src`` in which we'll place our source files."
msgstr ""
"Повернувшись до папки модуля GDExtension верхнього рівня, ми також "
"збираємося створити підпапку під назвою ``src``, у яку ми розмістимо наші "
"вихідні файли."

msgid ""
"You should now have ``demo``, ``godot-cpp``, and ``src`` directories in your "
"GDExtension module."
msgstr ""
"Тепер у вашому модулі GDExtension повинні бути каталоги ``demo``, ``godot-"
"cpp`` і ``src``."

msgid "Your folder structure should now look like this:"
msgstr "Тепер ваша структура папок має виглядати так:"

msgid ""
"In the ``src`` folder, we'll start with creating our header file for the "
"GDExtension node we'll be creating. We will name it ``gdexample.h``:"
msgstr ""
"У папці ``src`` ми почнемо зі створення нашого файлу заголовка для вузла "
"GDExtension, який ми будемо створювати. Ми назвемо його ``gdexample.h``:"

msgid "gdextension_cpp_example/src/gdexample.h"
msgstr "gdextension_cpp_example/src/gdexample.h"

msgid ""
"There are a few things of note to the above. We include ``sprite2d.hpp`` "
"which contains bindings to the Sprite2D class. We'll be extending this class "
"in our module."
msgstr ""
"Є кілька речей, які варто відзначити. Ми включаємо ``sprite2d.hpp``, який "
"містить прив’язки до класу Sprite2D. Ми розширимо цей клас у нашому модулі."

msgid ""
"We're using the namespace ``godot``, since everything in GDExtension is "
"defined within this namespace."
msgstr ""
"Ми використовуємо простір імен ``godot``, оскільки все в GDExtension "
"визначено в цьому просторі імен."

msgid ""
"Then we have our class definition, which inherits from our Sprite2D through "
"a container class. We'll see a few side effects of this later on. The "
"``GDCLASS`` macro sets up a few internal things for us."
msgstr ""
"Тоді ми маємо наше визначення класу, яке успадковує наш Sprite2D через клас-"
"контейнер. Пізніше ми побачимо кілька побічних ефектів цього. Макрос "
"`GDCLASS`` налаштовує для нас кілька внутрішніх речей."

msgid "After that, we declare a single member variable called ``time_passed``."
msgstr ""
"Після цього ми оголошуємо єдину змінну-член під назвою ``time_passed``."

msgid ""
"In the next block we're defining our methods, we have our constructor and "
"destructor defined, but there are two other functions that will likely look "
"familiar to some, and one new method."
msgstr ""
"У наступному блоці ми визначаємо наші методи, у нас визначені конструктор і "
"деструктор, але є ще дві функції, які, ймовірно, здадуться комусь знайомими, "
"і один новий метод."

msgid ""
"The first is ``_bind_methods``, which is a static function that Godot will "
"call to find out which methods can be called and which properties it "
"exposes. The second is our ``_process`` function, which will work exactly "
"the same as the ``_process`` function you're used to in GDScript."
msgstr ""
"Перший — це ``_bind_methods``, яка є статичною функцією, яку Godot викликає, "
"щоб дізнатися, які методи можна викликати та які властивості вона надає. "
"Друга — це наша функція ``_process``, яка працюватиме точно так само, як "
"функція ``_process``, до якої ви звикли в GDScript."

msgid "Let's implement our functions by creating our ``gdexample.cpp`` file:"
msgstr "Давайте реалізуємо наші функції, створивши наш файл ``gdexample.cpp``:"

msgid "gdextension_cpp_example/src/gdexample.cpp"
msgstr "gdextension_cpp_example/src/gdexample.cpp"

msgid ""
"This one should be straightforward. We're implementing each method of our "
"class that we defined in our header file."
msgstr ""
"Цей має бути простим. Ми реалізуємо кожен метод нашого класу, який ми "
"визначили у нашому файлі заголовка."

msgid ""
"Note our ``_process`` function, which keeps track of how much time has "
"passed and calculates a new position for our sprite using a sine and cosine "
"function."
msgstr ""
"Зверніть увагу на нашу функцію ``_process``, яка відстежує, скільки часу "
"минуло, і обчислює нову позицію нашого спрайту за допомогою функції синуса "
"та косинуса."

msgid ""
"There is one more C++ file we need; we'll name it ``register_types.cpp``. "
"Our GDExtension plugin can contain multiple classes, each with their own "
"header and source file like we've implemented ``GDExample`` up above. What "
"we need now is a small bit of code that tells Godot about all the classes in "
"our GDExtension plugin."
msgstr ""
"Нам потрібен ще один файл C++; ми назвемо його ``register_types.cpp``. Наш "
"плагін GDExtension може містити кілька класів, кожен із власним заголовком і "
"вихідним файлом, як ми реалізували ``GDExample`` вище. Зараз нам потрібен "
"невеликий фрагмент коду, який повідомляє Godot про всі класи в нашому "
"плагіні GDExtension."

msgid "gdextension_cpp_example/src/register_types.cpp"
msgstr "gdextension_cpp_example/src/register_types.cpp"

msgid ""
"The ``initialize_example_module`` and ``uninitialize_example_module`` "
"functions get called respectively when Godot loads our plugin and when it "
"unloads it. All we're doing here is parse through the functions in our "
"bindings module to initialize them, but you might have to set up more things "
"depending on your needs. We call the ``GDREGISTER_RUNTIME_CLASS`` macro for "
"each of our classes in our library. This will make them run only in game, "
"like the default for GDScript."
msgstr ""
"Функції ``initialize_example_module`` і ``uninitialize_example_module`` "
"викликаються відповідно, коли Godot завантажує наш плагін і коли він його "
"вивантажує. Все, що ми робимо тут, це розібрати функції в нашому модулі "
"прив’язок, щоб ініціалізувати їх, але вам, можливо, доведеться налаштувати "
"більше речей залежно від ваших потреб. Ми викликаємо макрос "
"``GDREGISTER_RUNTIME_CLASS`` для кожного з наших класів у нашій бібліотеці. "
"Це змусить їх працювати лише в грі, як за замовчуванням для GDScript."

msgid ""
"The important function is the third function called "
"``example_library_init``. We first call a function in our bindings library "
"that creates an initialization object. This object registers the "
"initialization and termination functions of the GDExtension. Furthermore, it "
"sets the level of initialization (core, servers, scene, editor, level)."
msgstr ""
"Важливою функцією є третя функція під назвою ``example_library_init``. "
"Спочатку ми викликаємо функцію в нашій бібліотеці прив’язок, яка створює "
"об’єкт ініціалізації. Цей об’єкт реєструє функції ініціалізації та "
"завершення GDExtension. Крім того, він встановлює рівень ініціалізації "
"(ядро, сервери, сцена, редактор, рівень)."

msgid ""
"At last, we need the header file for the ``register_types.cpp`` named "
"``register_types.h``."
msgstr ""
"Нарешті, нам потрібен файл заголовка для ``register_types.cpp`` під назвою "
"``register_types.h``."

msgid "gdextension_cpp_example/src/register_types.h"
msgstr "gdextension_cpp_example/src/register_types.h"

msgid "Compiling the plugin"
msgstr "Компіляція плагіна"

msgid ""
"To compile the project we need to define how SCons using should compile it "
"using a ``SConstruct`` file which references the one in ``godot-cpp``. "
"Writing it from scratch is outside the scope of this tutorial, but you "
"can :download:`the SConstruct file we prepared <files/cpp_example/"
"SConstruct>`. We'll cover a more customizable, detailed example on how to "
"use these build files in a subsequent tutorial."
msgstr ""
"Щоб скомпілювати проект, нам потрібно визначити, як SCons using має "
"компілювати його за допомогою файлу ``SConstruct``, який посилається на файл "
"``godot-cpp``. Написання з нуля виходить за рамки цього підручника, але ви "
"можете :download:`the SConstruct file we prepared <files/cpp_example/"
"SConstruct>`. У наступному підручнику ми розглянемо більш настроюваний, "
"детальний приклад використання цих файлів збірки."

msgid ""
"This ``SConstruct`` file was written to be used with the latest ``godot-"
"cpp`` master, you may need to make small changes using it with older "
"versions or refer to the ``SConstruct`` file in the Godot 4.x documentation."
msgstr ""
"Цей файл ``SConstruct`` було створено для використання з останнім ``godot-"
"cpp`` master, можливо, вам знадобиться внести невеликі зміни, використовуючи "
"його зі старішими версіями, або зверніться до файлу ``SConstruct`` у Godot "
"4 .x документація."

msgid ""
"Once you've downloaded the ``SConstruct`` file, place it in your GDExtension "
"folder structure alongside ``godot-cpp``, ``src`` and ``demo``, then run:"
msgstr ""
"Завантаживши файл ``SConstruct``, розмістіть його в структурі папок "
"GDExtension поряд з ``godot-cpp``, ``src`` і ``demo``, а потім запустіть:"

msgid "You should now be able to find the module in ``demo/bin/<platform>``."
msgstr "Тепер ви зможете знайти модуль у ``demo/bin/<platform>``."

msgid ""
"When building for iOS, package the module as a static `.xcframework`, you "
"can use following commands to do so:"
msgstr ""
"Під час створення для iOS запакуйте модуль як статичний `.xcframework`, для "
"цього можна використати такі команди:"

msgid ""
"Here, we've compiled both godot-cpp and our gdexample library as debug "
"builds. For optimized builds, you should compile them using the "
"``target=template_release`` switch."
msgstr ""
"Тут ми скомпілювали як godot-cpp, так і нашу бібліотеку gdexample як збірки "
"для налагодження. Для оптимізованих збірок вам слід скомпілювати їх за "
"допомогою перемикача ``target=template_release``."

msgid "Using the GDExtension module"
msgstr "Використання модуля GDExtension"

msgid ""
"Before we jump back into Godot, we need to create one more file in ``demo/"
"bin/``."
msgstr ""
"Перш ніж повернутися до Godot, нам потрібно створити ще один файл у ``demo/"
"bin/``."

msgid ""
"This file lets Godot know what dynamic libraries should be loaded for each "
"platform and the entry function for the module. It is called "
"``gdexample.gdextension``."
msgstr ""
"Цей файл дозволяє Godot знати, які динамічні бібліотеки слід завантажити для "
"кожної платформи, і функцію входу для модуля. Він називається "
"``gdexample.gdextension``."

msgid ""
"The ``libraries`` section is the important bit: it tells Godot the location "
"of the dynamic library in the project's filesystem for each supported "
"platform. It will also result in *just* that file being exported when you "
"export the project, which means the data pack won't contain libraries that "
"are incompatible with the target platform."
msgstr ""
"Розділ ``libraries`` є важливим елементом: він повідомляє Godot про "
"розташування динамічної бібліотеки у файловій системі проекту для кожної "
"підтримуваної платформи. Це також призведе до того, що під час експорту "
"проекту буде експортовано *тільки* файл, що означає, що пакет даних не "
"міститиме бібліотек, несумісних із цільовою платформою."

msgid ""
"Finally, the ``dependencies`` section allows you to name additional dynamic "
"libraries that should be included as well. This is important when your "
"GDExtension plugin implements someone else's library and requires you to "
"supply a third-party dynamic library with your project."
msgstr ""
"Нарешті, у розділі ``залежностей`` можна назвати додаткові динамічні "
"бібліотеки, які також слід включити. Це важливо, коли ваш плагін GDExtension "
"реалізує чужу бібліотеку та вимагає від вас надати сторонню динамічну "
"бібліотеку з вашим проектом."

msgid "Here is another overview to check the correct file structure:"
msgstr "Ось ще один огляд, щоб перевірити правильну структуру файлу:"

msgid ""
"Time to jump back into Godot. We load up the main scene we created way back "
"in the beginning and now add a newly available GDExample node to the scene:"
msgstr ""
"Час повернутися до Godot. Ми завантажуємо основну сцену, яку ми створили ще "
"на початку, і тепер додаємо новий доступний вузол GDExample до сцени:"

msgid ""
"We're going to assign the Godot logo to this node as our texture, disable "
"the ``centered`` property:"
msgstr ""
"Ми збираємося призначити логотип Godot цьому вузлу як нашу текстуру, "
"вимкнувши властивість ``centered``:"

msgid "We're finally ready to run the project:"
msgstr "Ми нарешті готові до запуску проекту:"

msgid "Adding properties"
msgstr "Додавання властивостей"

msgid ""
"GDScript allows you to add properties to your script using the ``export`` "
"keyword. In GDExtension you have to register the properties with a getter "
"and setter function or directly implement the ``_get_property_list``, "
"``_get`` and ``_set`` methods of an object (but that goes far beyond the "
"scope of this tutorial)."
msgstr ""
"GDScript дозволяє додавати властивості до сценарію за допомогою ключового "
"слова ``export``. У GDExtension вам потрібно зареєструвати властивості за "
"допомогою функції getter і setter або безпосередньо реалізувати методи "
"``_get_property_list``, ``_get`` і ``_set`` об’єкта (але це виходить далеко "
"за межі цього посібника). )."

msgid ""
"Lets add a property that allows us to control the amplitude of our wave."
msgstr ""
"Давайте додамо властивість, яка дозволяє нам контролювати амплітуду нашої "
"хвилі."

msgid ""
"In our ``gdexample.h`` file we need to add a member variable and getter and "
"setter functions:"
msgstr ""
"У наш файл ``gdexample.h`` нам потрібно додати змінну-член і функції getter "
"і setter:"

msgid ""
"In our ``gdexample.cpp`` file we need to make a number of changes, we will "
"only show the methods we end up changing, don't remove the lines we're "
"omitting:"
msgstr ""
"У нашому файлі ``gdexample.cpp`` нам потрібно внести низку змін, ми покажемо "
"лише методи, які ми змінили, не видаляйте рядки, які ми пропускаємо:"

msgid ""
"Once you compile the module with these changes in place, you will see that a "
"property has been added to our interface. You can now change this property "
"and when you run your project, you will see that our Godot icon travels "
"along a larger figure."
msgstr ""
"Після компіляції модуля з цими змінами ви побачите, що до нашого інтерфейсу "
"додано властивість. Тепер ви можете змінити цю властивість, і коли ви "
"запустите свій проект, ви побачите, що наш значок Godot рухається вздовж "
"більшої фігури."

msgid ""
"Let's do the same but for the speed of our animation and use a setter and "
"getter function. Our ``gdexample.h`` header file again only needs a few more "
"lines of code:"
msgstr ""
"Давайте зробимо те саме, але для швидкості нашої анімації та скористаємося "
"функціями встановлення та отримання. Наш файл заголовка ``gdexample.h`` "
"знову потребує лише кількох рядків коду:"

msgid ""
"This requires a few more changes to our ``gdexample.cpp`` file, again we're "
"only showing the methods that have changed so don't remove anything we're "
"omitting:"
msgstr ""
"Це потребує ще кількох змін у нашому файлі ``gdexample.cpp``, ми знову "
"показуємо лише методи, які змінилися, тому не видаляйте нічого, що ми "
"пропускаємо:"

msgid ""
"Now when the project is compiled, we'll see another property called speed. "
"Changing its value will make the animation go faster or slower. Furthermore, "
"we added a property range which describes in which range the value can be. "
"The first two arguments are the minimum and maximum value and the third is "
"the step size."
msgstr ""
"Тепер, коли проект скомпільовано, ми побачимо іншу властивість під назвою "
"швидкість. Зміна його значення призведе до пришвидшення або сповільнення "
"анімації. Крім того, ми додали діапазон властивостей, який описує, у якому "
"діапазоні може бути значення. Перші два аргументи – мінімальне та "
"максимальне значення, а третій – розмір кроку."

msgid ""
"For simplicity, we've only used the hint_range of the property method. There "
"are a lot more options to choose from. These can be used to further "
"configure how properties are displayed and set on the Godot side."
msgstr ""
"Для простоти ми використали лише hint_range методу властивості. Є ще багато "
"варіантів на вибір. Їх можна використовувати для подальшого налаштування "
"того, як властивості відображаються та встановлюються на стороні Godot."

msgid "Signals"
msgstr "Сигнали"

msgid ""
"Last but not least, signals fully work in GDExtension as well. Having your "
"extension react to a signal given out by another object requires you to call "
"``connect`` on that object. We can't think of a good example for our "
"wobbling Godot icon, we would need to showcase a far more complete example."
msgstr ""
"І останнє, але не менш важливе: сигнали також повністю працюють у "
"GDExtension. Щоб ваше розширення реагувало на сигнал від іншого об’єкта, "
"потрібно викликати ``connect`` для цього об’єкта. Ми не можемо придумати "
"гарний приклад для нашої хитаючої ікони Godot, нам потрібно було б "
"продемонструвати набагато повніший приклад."

msgid "This is the required syntax:"
msgstr "Це необхідний синтаксис:"

msgid ""
"To connect our signal ``the_signal`` from some other node with our method "
"``my_method``, we need to provide the ``connect`` method with the name of "
"the signal and a ``Callable``. The ``Callable`` holds information about an "
"object on which a method can be called. In our case, it associates our "
"current object instance ``this`` with the method ``my_method`` of the "
"object. Then the ``connect`` method will add this to the observers of "
"``the_signal``. Whenever ``the_signal`` is now emitted, Godot knows which "
"method of which object it needs to call."
msgstr ""
"Щоб з’єднати наш сигнал ``the_signal`` з іншого вузла з нашим методом "
"``my_method``, нам потрібно надати метод ``connect`` з назвою сигналу та "
"``Callable``. ``Callable`` містить інформацію про об’єкт, для якого можна "
"викликати метод. У нашому випадку він пов’язує наш поточний екземпляр "
"об’єкта this з методом my_method об’єкта. Тоді метод ``connect`` додасть це "
"до спостерігачів ``the_signal``. Щоразу, коли ``the_signal`` випромінюється, "
"Godot знає, який метод якого об’єкта йому потрібно викликати."

msgid ""
"Note that you can only call ``my_method`` if you've previously registered it "
"in your ``_bind_methods`` method. Otherwise Godot will not know about the "
"existence of ``my_method``."
msgstr ""
"Зауважте, що ви можете викликати ``my_method``, лише якщо ви попередньо "
"зареєстрували його у своєму методі ``_bind_methods``. Інакше Godot не "
"дізнається про існування ``my_method``."

msgid ""
"To learn more about ``Callable``, check out the class reference "
"here: :ref:`Callable <class_Callable>`."
msgstr ""
"Щоб дізнатися більше про ``Callable``, перегляньте посилання на клас "
"тут: :ref:`Callable <class_Callable>`."

msgid ""
"Having your object sending out signals is more common. For our wobbling "
"Godot icon, we'll do something silly just to show how it works. We're going "
"to emit a signal every time a second has passed and pass the new location "
"along."
msgstr ""
"Більш поширеним є те, що ваш об’єкт надсилає сигнали. Для нашої хитаючої "
"піктограми Godot ми зробимо щось дурне, щоб показати, як це працює. Ми "
"будемо випромінювати сигнал щоразу, коли мине секунда, і передамо нове місце."

msgid ""
"In our ``gdexample.h`` header file, we need to define a new member "
"``time_emit``:"
msgstr ""
"У нашому файлі заголовків ``gdexample.h`` нам потрібно визначити новий член "
"``time_emit``:"

msgid ""
"This time, the changes in ``gdexample.cpp`` are more elaborate. First, "
"you'll need to set ``time_emit = 0.0;`` in either our ``_init`` method or in "
"our constructor. We'll look at the other 2 needed changes one by one."
msgstr ""
"Цього разу зміни в ``gdexample.cpp`` більш детальні. По-перше, вам потрібно "
"буде встановити ``time_emit = 0.0;`` або в нашому методі ``_init``, або в "
"нашому конструкторі. Ми почергово розглянемо інші 2 необхідні зміни."

msgid ""
"In our ``_bind_methods`` method, we need to declare our signal. This is done "
"as follows:"
msgstr ""
"У нашому методі ``_bind_methods`` нам потрібно оголосити наш сигнал. Це "
"робиться наступним чином:"

msgid ""
"Here, our ``ADD_SIGNAL`` macro can be a single call with a ``MethodInfo`` "
"argument. ``MethodInfo``'s first parameter will be the signal's name, and "
"its remaining parameters are ``PropertyInfo`` types which describe the "
"essentials of each of the method's parameters. ``PropertyInfo`` parameters "
"are defined with the data type of the parameter, and then the name that the "
"parameter will have by default."
msgstr ""
"Тут наш макрос ``ADD_SIGNAL`` може бути одним викликом з аргументом "
"``MethodInfo``. Першим параметром ``MethodInfo`` буде ім'я сигналу, а решта "
"його параметрів - це типи ``PropertyInfo``, які описують суть кожного з "
"параметрів методу. Параметри ``PropertyInfo`` визначаються типом даних "
"параметра, а потім назвою, яку параметр матиме за замовчуванням."

msgid ""
"So here, we add a signal, with a ``MethodInfo`` which names the signal "
"\"position_changed\". The ``PropertyInfo`` parameters describe two essential "
"arguments, one of type ``Object``, the other of type ``Vector2``, "
"respectively named \"node\" and \"new_pos\"."
msgstr ""
"Отже, тут ми додаємо сигнал із ``MethodInfo``, який називає сигнал "
"\"position_changed\". Параметри ``PropertyInfo`` описують два важливі "
"аргументи, один типу ``Object``, інший типу ``Vector2``, відповідно названих "
"«node» і «new_pos»."

msgid "Next, we'll need to change our ``_process`` method:"
msgstr "Далі нам потрібно буде змінити наш метод ``_process``:"

msgid ""
"After a second has passed, we emit our signal and reset our counter. We can "
"add our parameter values directly to ``emit_signal``."
msgstr ""
"Через секунду ми видаємо свій сигнал і скидаємо лічильник. Ми можемо додати "
"значення наших параметрів безпосередньо до ``emit_signal``."

msgid ""
"Once the GDExtension library is compiled, we can go into Godot and select "
"our sprite node. In the **Node** dock, we can find our new signal and link "
"it up by pressing the **Connect** button or double-clicking the signal. "
"We've added a script on our main node and implemented our signal like this:"
msgstr ""
"Після компіляції бібліотеки GDExtension ми можемо зайти в Godot і вибрати "
"наш вузол спрайту. У док-станції **Node** ми можемо знайти наш новий сигнал "
"і зв’язати його, натиснувши кнопку **Connect** або двічі клацнувши сигнал. "
"Ми додали сценарій на наш головний вузол і реалізували наш сигнал так:"

msgid "Every second, we output our position to the console."
msgstr "Кожну секунду ми виводимо свою позицію на консоль."

msgid "Next steps"
msgstr "Наступні кроки"

msgid ""
"We hope the above example showed you the basics. You can build upon this "
"example to create full-fledged scripts to control nodes in Godot using C++."
msgstr ""
"Сподіваємося, наведений вище приклад показав вам основи. На основі цього "
"прикладу можна створювати повноцінні сценарії для керування вузлами в Godot "
"за допомогою C++."
