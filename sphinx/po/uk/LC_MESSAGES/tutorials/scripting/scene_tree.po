#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using SceneTree"
msgstr "Використання Дерева сцени"

msgid "Introduction"
msgstr "Вступ"

msgid ""
"In previous tutorials, everything revolved around the concept of nodes. "
"Scenes are collections of nodes. They become active once they enter the "
"*scene tree*."
msgstr ""
"У попередніх уроках все оберталося навколо концепції вузлів. Сцени - це "
"колекції вузлів. Вони стають активними, як тільки входять у *дерево сцен*."

msgid "MainLoop"
msgstr "MainLoop (Головний цикл)"

msgid ""
"The way Godot works internally is as follows. There is the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the beginning. "
"Afterwards, all drivers, servers, scripting languages, scene system, etc are "
"loaded."
msgstr ""
"Внутрішня робота Godot полягає в наступному. Існує клас :ref:`OS "
"<class_OS>`, який є єдиним екземпляром, який запускається на початку. Після "
"цього завантажуються всі драйвери, сервери, скриптові мови, система сцен "
"тощо."

msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be supplied "
"a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all this is "
"internals working (you can check main/main.cpp file in the source code if "
"you are ever interested to see how this works internally)."
msgstr ""
"Коли ініціалізація завершена, :ref:`OS <class_OS>` потрібно для запуску :ref:"
"`MainLoop <class_MainLoop>`. До цього моменту все це внутрішня обробка (ви "
"можете перевірити файл main/main.cpp у вихідному коді, якщо вам стане колись "
"цікаво побачити, як це працює всередині)."

msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-synchronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is low level and "
"when making games in Godot, writing your own MainLoop seldom makes sense."
msgstr ""
"Програма користувача, або гра, запускається в MainLoop. У цьому класі є "
"кілька методів для ініціалізації, простою (зворотний синхронізований кадр), "
"фіксації (фізичний синхронізований зворотний виклик) та введення. Однак це "
"низький рівень, і при розробці ігор в Godot, рідко має сенс писати власний "
"MainLoop."

msgid "SceneTree"
msgstr "Дерево Сцен"

msgid ""
"One of the ways to explain how Godot works is that it's a high level game "
"engine over a low level middleware."
msgstr ""
"Суть роботи Godot полягає в тому, що це ігровий движок високого рівня "
"заснований на програмному забезпеченні низького рівня."

msgid ""
"The scene system is the game engine, while the :ref:`OS <class_OS>` and "
"servers are the low level API."
msgstr ""
"Система сцен - це ігровий движок, тоді як :ref:`OS <class_OS>` і сервери - "
"API низького рівня."

msgid ""
"The scene system provides its own main loop to OS, :ref:`SceneTree "
"<class_SceneTree>`. This is automatically instanced and set when running a "
"scene, no need to do any extra work."
msgstr ""
"Система сцен забезпечує власний головний цикл для ОС, :ref:`SceneTree "
"<class_SceneTree>`. Він автоматично встановлюється і налаштовується під час "
"запуску сцени, не потрібно робити зайвих робіт."

msgid ""
"It's important to know that this class exists because it has a few important "
"uses:"
msgstr ""
"Важливо знати, про наявність цього класу, оскільки він має кілька важливих "
"застосувань:"

msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, to which a scene is "
"added as a child when it's first opened to become part of the *Scene Tree* "
"(more on that next)."
msgstr ""
"Він містить кореневий :ref:`Viewport <class_Viewport>`, до якого додається "
"сцена в якості нащадка, при першому відкритті, щоб стати частиною *Дерева "
"сцен* (докладніше про це далі)."

msgid ""
"It contains information about the groups and has the means to call all nodes "
"in a group or get a list of them."
msgstr ""
"Він містить інформацію про групи і має засоби для виклику всіх вузлів групи, "
"або отримання їх списку."

msgid ""
"It contains some global state functionality, such as setting pause mode or "
"quitting the process."
msgstr ""
"Він містить деяку функціональність глобального стану, наприклад встановлення "
"режиму паузи, або вихід."

msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by calling :ref:`Node."
"get_tree() <class_Node_method_get_tree>`."
msgstr ""
"Коли вузол є частиною дерева сцен, сиглтон (одиночний екземпляр) :ref:"
"`SceneTree <class_SceneTree>` можна отримати, викликавши :ref:`Node."
"get_tree() <class_Node_method_get_tree>`."

msgid "Root viewport"
msgstr "Кореневе вікно перегляду"

msgid ""
"The root :ref:`Viewport <class_Viewport>` is always at the top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""
"Кореневе :ref:`Viewport (Вікно перегляду)<class_Viewport>` завжди "
"знаходиться у верхній частині сцени. З вузла його можна отримати двома "
"різними способами:"

msgid ""
"This node contains the main viewport. Anything that is a child of a :ref:"
"`Viewport <class_Viewport>` is drawn inside of it by default, so it makes "
"sense that the top of all nodes is always a node of this type otherwise "
"nothing would be seen."
msgstr ""
"Цей вузол містить головне вікно перегляду. Всі нащадки :ref:`Viewport "
"<class_Viewport>`, малюються всередині нього за замовчуванням, тому є сенс в "
"тому, щоб коренем всіх вузлів завжди був вузол такого типу, інакше нічого не "
"буде видно."

msgid ""
"While other viewports can be created in the scene (for split-screen effects "
"and such), this one is the only one that is never created by the user. It's "
"created automatically inside SceneTree."
msgstr ""
"Хоча в сцені можуть створюватися інші вікна перегляду (для ефектів "
"розділеного екрана і подібних речей), це єдине, яке ніколи не створюється "
"користувачем. Воно створюється автоматично всередині SceneTree (дерева сцен)."

msgid "Scene tree"
msgstr "Дерево сцени"

msgid ""
"When a node is connected, directly or indirectly, to the root viewport, it "
"becomes part of the *scene tree*."
msgstr ""
"Коли вузол підключений безпосередньо, або опосередковано, до кореневого "
"вікна перегляду, він стає частиною *дерева сцен*."

msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access to "
"everything they need to process, get input, display 2D and 3D visuals, "
"receive and send notifications, play sounds, etc. When they are removed from "
"the *scene tree*, they lose these abilities."
msgstr ""
"Коли вузли входять у *дерево сцен*, вони стають активними. Вони отримують "
"доступ до всього необхідного для обробки, отримують введення, демонструють "
"2D та 3D-візуальні зображення, отримують та надсилають сповіщення, "
"відтворюють звуки тощо. Коли їх видаляють із дерева сцен , вони втрачають ці "
"здібності."

msgid "Tree order"
msgstr "Послідовність в дереві"

msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr "\"Становлення активним\" при вході в *дерево сцен*"

msgid "A scene is loaded from disk or created by scripting."
msgstr "Сцена завантажується з диска, або створюється скриптом."

msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( ``_exit_tree()`` callback in GDScript) in bottom-to-top order "
"(the exact reverse of top-to-bottom order)."
msgstr ""
"Коли сцену (або її частину) видалено, вони отримують сповіщення про \"вихід "
"зі сцени\" (зворотний виклик ``_exit_tree()`` у GDScript) у порядку знизу-"
"вгору (зворотному порядку зверху-вниз)."

msgid "Changing current scene"
msgstr "Зміна поточної сцени"

msgid "Translation status"
msgstr "Стан перекладу"
