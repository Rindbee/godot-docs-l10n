#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Сповіщення Godot"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_private_method__notification>` method. Its purpose is to allow "
"the Object to respond to a variety of engine-level callbacks that may relate "
"to it. For example, if the engine tells a :ref:`CanvasItem "
"<class_CanvasItem>` to \"draw\", it will call "
"``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Кожен Об'єкт у Godot реалізує метод :ref:`_notification "
"<клас_Об'єкта_приватний_метод__notification>`. Його мета - дозволити об'єкту "
"реагувати на різноманітні зворотні виклики на рівні рушія, які можуть мати "
"до нього відношення. Наприклад, якщо рушій скаже :ref:`CanvasItem "
"<клас_CanvasItem>` \"намалювати\", він викличе "
"``_notification(NOTIFICATION_DRAW)``."

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"Деякі з цих сповіщень, наприклад, малювання (draw), корисно замінити у "
"скриптах. Настільки, що Godot поставляє багатьох із них зі спеціальними "
"функціями:"

msgid "``_ready()``: ``NOTIFICATION_READY``"
msgstr "``_ready()``: ``ПОВІДОМЛЕННЯ_ГОТОВЕ``"

msgid "``_enter_tree()``: ``NOTIFICATION_ENTER_TREE``"
msgstr "``_enter_tree()``: ``NOTIFICATION_ENTER_TREE``"

msgid "``_exit_tree()``: ``NOTIFICATION_EXIT_TREE``"
msgstr "``_exit_tree()`` : ДЕРЕВО_ВИХОДУ_ПОВІДОМЛЕННЯ"

msgid "``_process(delta)``: ``NOTIFICATION_PROCESS``"
msgstr "``_process(delta)`` : ПРОЦЕС_ПОВІДОМЛЕННЯ"

msgid "``_physics_process(delta)``: ``NOTIFICATION_PHYSICS_PROCESS``"
msgstr "``_physics_process(delta)``: ``ПОВІДОМЛЕННЯ_ФІЗИЧНОГО_ПРОЦЕСУ``"

msgid "``_draw()``: ``NOTIFICATION_DRAW``"
msgstr "``_draw()`` : ПОВІДОМЛЕННЯ"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone, for example:"
msgstr ""
"Користувачі можуть *не* розуміти, що сповіщення існують і для інших типів, "
"окрім, наприклад, Node:"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: зворотний виклик, який "
"спрацьовує під час ініціалізації об’єкта. Не доступний для скриптів."

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a \"destructor\"."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: зворотний виклик, який "
"спрацьовує перед тим, як рушій видалить об'єкт, тобто \"деструктор\"."

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"І багато зворотних викликів, які *існують* у вузлах, не мають спеціальних "
"методів, але все ще є досить корисними."

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: зворотний виклик, який "
"запускається щоразу, коли один додає дочірній вузол до іншого вузла."

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: зворотний виклик, який "
"запускається в будь-який час, коли один видаляє дочірній вузол з іншого "
"вузла."

msgid ""
"One can access all these custom notifications from the universal "
"``_notification()`` method."
msgstr ""
"Доступ до всіх цих кастомних сповіщень можна отримати за допомогою "
"універсального методу ``_notification()``."

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"Методи в документації, позначені як \"virtual\" *(віртуальні)*, також "
"призначені для перевизначення у скриптах."

msgid ""
"A classic example is the :ref:`_init <class_Object_private_method__init>` "
"method in Object. While it has no ``NOTIFICATION_*`` equivalent, the engine "
"still calls the method. Most languages (except C#) rely on it as a "
"constructor."
msgstr ""
"Класичним прикладом є метод :ref:`_init <class_Object_private_method__init>` "
"в Object. Хоча він не має еквівалента ``NOTIFICATION_*``, рушій все одно "
"викликає цей метод. Більшість мов (крім C#) використовують його як "
"конструктор."

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"Отже, в якій ситуації слід використовувати кожне з цих сповіщень або "
"віртуальні функції?"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process та _physics_process vs. \\*_input"

msgid "_init vs. initialization vs. export"
msgstr "_init, initialization та export"

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready, _enter_tree та NOTIFICATION_PARENTED"

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"Якщо потрібно ініціювати поведінку, яка виникає як поведінка батьківського "
"вузла до іншого, незалежно від того, відбувається вона як частина основної/"
"активної сцени чи ні, можна використовувати сповіщення :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`. Наприклад, ось фрагмент, який "
"підключає метод вузла до користувацького сигналу на батьківському вузлі без "
"збоїв. Корисно для вузлів, орієнтованих на дані, які можна створити під час "
"виконання."

msgid "Translation status"
msgstr "Стан перекладу"
