#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating instances"
msgstr "Vytváření instancí"

msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""
"V předchozí části jsme si ukázali, že scéna je kolekce uzlů uspořádaných do "
"stromové struktury s jedním kořenovým uzlem. Svůj projekt můžete rozdělit do "
"libovolného počtu scén, což vám pomůže lépe rozčlenit a organizovat "
"jednotlivé komponenty vaší hry."

msgid ""
"You can create as many scenes as you'd like and save them as files with the "
"``.tscn`` extension, which stands for \"text scene\". The ``label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""
"Můžete vytvořit tolik scén, kolik chcete, a uložit je jako soubory s "
"příponou ``.tscn`` (zkratka pro \"textová scéna\"). Příkladem byl soubor "
"``label.tscn`` z předchozí lekce. Takovéto soubory nazýváme \"zabalené "
"scény\", protože obsahují informace o obsahu vaší scény."

msgid ""
"Here's an example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite2D <class_Sprite2D>` node, and a :"
"ref:`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""
"Jako příklad si vezměme následující míč. Skládá se z kořenového uzlu :ref:"
"`RigidBody2D <class_RigidBody2D>` s názvem Míč, který mu umožňuje padat a "
"odrážet se po stěnách, uzlu :ref:`Sprite2D <class_Sprite2D>` a uzlu :ref:"
"`CollisionShape2D <class_CollisionShape2D>`."

msgid ""
"Once you have saved a scene, it works as a blueprint: you can reproduce it "
"in other scenes as many times as you'd like. Replicating an object from a "
"template like this is called **instancing**."
msgstr ""
"Jakmile scénu uložíte, funguje jako šablona: můžete ji opakovaně vkládat do "
"dalších scén, kolikrát chcete. Tento způsob opakovaného použití objektu na "
"základě šablony se nazývá **instancování**."

msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""
"Jak jsme zmínili v předchozí části, instance scén se chovají jako běžné "
"uzly: editor ve výchozím nastavení skryje jejich vnitřní strukturu. Když "
"tedy instancujete scénu Míč, uvidíte jen uzel s názvem Míč. Všimněte si "
"také, že každý duplikát má jedinečný název."

msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""
"Každá instance scény Míč vychází ze stejné struktury a vlastností "
"definováných v souboru ``ball.tscn``. Každou z nich však můžete nezávisle "
"upravit – například změnit, jak se odráží, jak jsou těžké nebo jakoukoli "
"vlastnost, kterou zdrojová scéna nabízí."

msgid "In practice"
msgstr "Praktická ukázka"

msgid "The ball appears in the top-left corner of the viewport."
msgstr "Koule se zobrazí v levém horním rohu okna zobrazení."

msgid "You can repeat this process until you have several in the scene."
msgstr "Tento postup můžete opakovat, dokud jich na scéně nebude několik."

msgid "Editing scenes and instances"
msgstr "Úpravy scén a instancí"

msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""
"Všimněte si, že vedle upravené vlastnosti se zobrazí šedé tlačítko "
"„obnovit“. Je-li toto tlačítko k dispozici, znamená to, že jste v instanci "
"scény upravili vlastnost originální scény tj tak, aby přepsala svoji hodnotu "
"v uložených vlastnostech upravené scény. I když je tato vlastnost "
"modifikována ve scéně původni, zde v instanci zůstane hodnota upravená . "
"Stisknutím tlačítka pro obnovení vrátíte vlastnost na hodnotu v uložené "
"scéně."

msgid "For example, you could break down a shooter game like so:"
msgstr "Například takhle by se dala představit jednoduchá střílečka:"

msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""
"Hodně času stráveného při programováním her (nebo softwaru obecně) je o "
"navrhování architektury a přizpůsobení herních komponent této architektuře. "
"Navrh založený na scénách nahrazuje tento přístup a dělá vývoj mnohem "
"rychlejším a přímočarějším, což vám umožňuje soustředit se na samotnou herní "
"logiku. Protože většina herních komponent je mapována přímo na scénu, "
"použití designu založeného na instancích scén znamená, že žádné další "
"rozšiřování architektury kódem není většinou potřeba."

msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""
"Podívejme se na další příklad hry typu otevřený-svět se spoustou zdrojů a "
"vnořených prvků:"

msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""
"Později bychom mohli vytvořit scény, které představují Stráže (a další NPC) "
"a také je přidat do Citadely. V důsledku toho by byli nepřímo přidáni do "
"celého herního světa."

msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""
"S Godotem je snadné takto postupně budovat vaši hru, protože vše, co musíte "
"udělat, je vytvořit další scény a následně jejich instance. Kromě toho je "
"uživatelské rozhraní editoru navrženo tak, aby bylo uživatelsky přívětivé "
"pro programátory i neprogramátory. Typický proces týmového vývoje může "
"vyžadovat 2D nebo 3D umělce, návrháře úrovní, herní návrháře a animátory, "
"všechny pracující s jedním editorem."

msgid "Summary"
msgstr "Shrnutí"

msgid "The ability to divide your game into reusable components."
msgstr "Možnost rozdělit hru na opakovaně použitelné komponenty."
