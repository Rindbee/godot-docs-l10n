#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Listening to player input"
msgstr "Poslouchání pro hráčský vstup"

msgid ""
"Building upon the previous lesson, :ref:`doc_scripting_first_script`, let's "
"look at another important feature of any game: giving control to the player. "
"To add this, we need to modify our ``sprite_2d.gd`` code."
msgstr ""
"V návaznosti na předchozí lekci, :ref:`doc_scripting_first_script`, se nyní "
"podívejme na další důležitou funkci každé hry: možnost ji ovládat hráčem. "
"Abychom toto umožnili, musíme upravit náš kód ``sprite_2d.gd``."

msgid "You have two main tools to process the player's input in Godot:"
msgstr ""
"Godot vám poskytuje dva hlavní nástroje pro zpracování hráčského vstupu:"

msgid ""
"The built-in input callbacks, mainly ``_unhandled_input()``. Like "
"``_process()``, it's a built-in virtual function that Godot calls every time "
"the player presses a key. It's the tool you want to use to react to events "
"that don't happen every frame, like pressing :kbd:`Space` to jump. To learn "
"more about input callbacks, see :ref:`doc_inputevent`."
msgstr ""
"Vestavěné funkce zpětného volání v reakci na vstup, zejména "
"``_unhandled_input()`` (\"nezpracovaný vstup\"). Tak jako u ``_process()`` "
"jde o vestavěnou virtuální funkci. Godot ji volá pokaždé, když hráč stiskne "
"libovolnou klávesu. Je vhodná pro reagování na události, které se typicky "
"nedějí v každém snímku, jako například stisknutí :kbd:`Mezerník` pro "
"skákání. Více se o funkcích zpětného volání při vstupu můžete dovědět "
"v :ref:`doc_inputevent`."

msgid ""
"The ``Input`` singleton. A singleton is a globally accessible object. Godot "
"provides access to several in scripts. It's the right tool to check for "
"input every frame."
msgstr ""
"Singleton ``Input`` (\"vstup\"). Singleton je globálně přístupný objekt. "
"Godot poskytuje ve skriptech přístup k několika takovým objektům. ``Input`` "
"je vhodný pro kontrolu vstupu v každém snímku."

msgid ""
"We're going to use the ``Input`` singleton here as we need to know if the "
"player wants to turn or move every frame."
msgstr ""
"My nyní využijeme právě singleton ``Input``, protože potřebujeme v každém "
"snímku vědět, jestli se hráč chce pohnout nebo otočit."

msgid ""
"For turning, we should use a new variable: ``direction``. In our "
"``_process()`` function, replace the ``rotation += angular_speed * delta`` "
"line with the code below."
msgstr ""
"Pro otáčení bychom měli využít novou proměnnou: ``direction`` (směr). Ve "
"funkci ``_process()`` nahraďte řádek ``rotation += angular_speed * delta`` "
"následujícím kódem."

msgid ""
"Our ``direction`` local variable is a multiplier representing the direction "
"in which the player wants to turn. A value of ``0`` means the player isn't "
"pressing the left or the right arrow key. A value of ``1`` means the player "
"wants to turn right, and ``-1`` means they want to turn left."
msgstr ""
"Naše místní proměnná ``direction`` je násobitel představující směr, ve "
"kterém se hráč chce otočit. Hodnota ``0`` znamená, že hráč nedrží levou ani "
"pravou šipku. Hodnota ``1`` znamená, že se chce otočit doprava a ``-1``, že "
"se chce otočit doleva."

msgid ""
"To check if a key was pressed this frame, we call "
"``Input.is_action_pressed()``. The method takes a text string representing "
"an input action and returns ``true`` if the action is pressed, ``false`` "
"otherwise."
msgstr ""
"Abychom zjistili, zda byla v aktuálním snímku stisknuta klávesa, zavoláme "
"``Input.is_action_pressed()`` (\"je akce stisknuta\"). Tato metoda vezme "
"textový řetězec představující vstupní akci a vrátí ``true``, pokud je "
"odpovídající akce stisknuta. Pokud tomu tak není, vrátí ``false``."

msgid ""
"The two actions we use above, \"ui_left\" and \"ui_right\", are predefined "
"in every Godot project. They respectively trigger when the player presses "
"the left and right arrows on the keyboard or left and right on a gamepad's D-"
"pad."
msgstr ""
"Dvě akce, které jsme výše použili, \"ui_left\" a \"ui_right\", jsou v každém "
"Godot projektu předdefinované. Spouštějí se, když hráč stiskne levou a "
"pravou šipku na klávesnici nebo levé a pravé směrové tlačítko na herním "
"ovladači."

msgid ""
"You can see and edit input actions in your project by going to Project -> "
"Project Settings and clicking on the Input Map tab."
msgstr ""
"Vstupní akce ve svém projektu můžete zobrazit a upravovat v záložce Mapa "
"vstupů v okně Projekt -> Nastavení projektu."

msgid ""
"Finally, we use the ``direction`` as a multiplier when we update the node's "
"``rotation``: ``rotation += angular_speed * direction * delta``."
msgstr ""
"Nakonec použijeme ``direction`` jako násobitel při aktualizaci rotace uzlu: "
"``rotation += angular_speed * direction * delta``."

msgid ""
"Comment out the lines ``var velocity = Vector2.UP.rotated(rotation) * "
"speed`` and ``position += velocity * delta`` like this:"
msgstr ""
"Zakomentujte řádky ``var velocity = Vector2.UP.rotated(rotation) * speed`` a "
"``position += velocity * delta`` takto:"

msgid ""
"This will ignore the code that moved the icon's position in a circle without "
"user input from the previous exercise."
msgstr ""
"Tímto budeme ignorovat kód z předchozího cvičení, který posouval pozici "
"ikony v kruhu bez zásahu uživatele."

msgid ""
"If you run the scene with this code, the icon should rotate when you "
"press :kbd:`Left` and :kbd:`Right`."
msgstr ""
"Když nyní spustíte scénu s tímto kódem a stisknete :kbd:`Doleva` "
"nebo :kbd:`Doprava`, ikona by se měla otáčet."

msgid "Moving when pressing \"up\""
msgstr "Pohyb při stisku \"nahoru\""

msgid ""
"To only move when pressing a key, we need to modify the code that calculates "
"the velocity. Uncomment the code and replace the line starting with ``var "
"velocity`` with the code below."
msgstr ""
"Aby se ikona pohybovala pouze při stisknutí klávesy, musíme dále upravit "
"kód, který vypočítává rychlost. Odkomentujte kód a nahraďte řádek začínající "
"``var velocity`` následujícím kódem."

msgid ""
"We initialize the ``velocity`` with a value of ``Vector2.ZERO``, another "
"constant of the built-in ``Vector`` type representing a 2D vector of length "
"0."
msgstr ""
"Rychlost ``velocity`` nyní inicializujeme na hodnotu ``Vector2.ZERO``. To je "
"další konstanta vestavěného typu ``Vector`` a představuje 2D vektor délky 0."

msgid ""
"If the player presses the \"ui_up\" action, we then update the velocity's "
"value, causing the sprite to move forward."
msgstr ""
"Když hráč stiskne akci \"ui_up\", aktualizujeme hodnotu rychlosti, což "
"způsobí, že se sprite posune vpřed."

msgid "Complete script"
msgstr "Kompletní skript"

msgid "Here is the complete ``sprite_2d.gd`` file for reference."
msgstr "Zde je pro vaši kontrolu celý soubor ``sprite_2d.gd``."

msgid ""
"If you run the scene, you should now be able to rotate with the left and "
"right arrow keys and move forward by pressing :kbd:`Up`."
msgstr ""
"Spustíte-li scénu nyní, měli byste se moci otáčet pomocí levé a pravé šipky "
"a hýbat se dopředu stisknutím :kbd:`Nahoru`."

msgid "Summary"
msgstr "Shrnutí"

msgid ""
"In summary, every script in Godot represents a class and extends one of the "
"engine's built-in classes. The node types your classes inherit from give you "
"access to properties, such as ``rotation`` and ``position`` in our sprite's "
"case. You also inherit many functions, which we didn't get to use in this "
"example."
msgstr ""
"Pro shrnutí, každý skript v Godotu představuje třídu, která rozšiřuje jednu "
"z vestavěných tříd enginu. Typy uzlů, ze kterých vaše třídy dědí, vám "
"poskytují přístup ke svým vlastnostem, jako je v případě našeho spritu "
"rotace ``rotation`` a pozice ``position``. Stojí také za zmínku, že děděny "
"jsou také mnohé funkce, byť ty jsme v tomto příkladu nepoužili."

msgid ""
"In GDScript, the variables you put at the top of the file are your class's "
"properties, also called member variables. Besides variables, you can define "
"functions, which, for the most part, will be your classes' methods."
msgstr ""
"V GDscriptu jsou proměnné, které umisťujete na začátek souborů, vlastnosti "
"třídy. Říkáme jim také proměnné členy. Mimo proměnné můžete definovat i "
"funkce, které budou z většiny metodami vašich tříd."

msgid ""
"Godot provides several virtual functions you can define to connect your "
"class with the engine. These include ``_process()``, to apply changes to the "
"node every frame, and ``_unhandled_input()``, to receive input events like "
"key and button presses from the users. There are quite a few more."
msgstr ""
"Godot poskytuje několik virtuálních funkcí, které můžete definovat a "
"propojit tak vaše třídy s enginem. Patří mezi ně ``_process()``, která na "
"daný uzel aplikuje změny v každém snímku a ``_unhandled_input()``, který "
"přijímá vstupní události, jako je stisknutí kláves a tlačítek uživatelem. "
"Vedle těchto dvou existuje poměrně dost dalších."

msgid ""
"The ``Input`` singleton allows you to react to the players' input anywhere "
"in your code. In particular, you'll get to use it in the ``_process()`` loop."
msgstr ""
"Singleton ``Input`` vám umožňuje reagovat na hráčský vstup kdekoli ve vašem "
"kódu. Zejména jej využijete ve smyčce ``_process()``."

msgid ""
"In the next lesson, :ref:`doc_signals`, we'll build upon the relationship "
"between scripts and nodes by having our nodes trigger code in scripts."
msgstr ""
"V příští lekci, :ref:`doc_signals`, budeme dále stavět na vztahu mezi "
"skripty a uzly tím, že necháme naše uzly spouštět kód ve skriptech."
