#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Signal"
msgstr "Signál"

msgid "Using signals"
msgstr "Používání signálů"

msgid ""
"In this lesson, we will look at signals. They are messages that nodes emit "
"when something specific happens to them, like a button being pressed. Other "
"nodes can connect to that signal and call a function when the event occurs."
msgstr ""
"V této lekci se podíváme na signály. To jsou zprávy, které uzly vysílají, "
"když se jim něco konkrétního stane, například když hráč stiskne tlačítko. K "
"signálům se mohou připojovat další uzly a volat své vlastní funkce, když k "
"odpovídající události dojde."

msgid ""
"Signals are a delegation mechanism built into Godot that allows one game "
"object to react to a change in another without them referencing one another. "
"Using signals limits `coupling <https://en.wikipedia.org/wiki/"
"Coupling_(computer_programming)>`_ and keeps your code flexible."
msgstr ""
"Signály jsou mechanismus delegace vestavěný do Godotu, který umožňuje "
"jednomu hernímu objektu reagovat na změnu v jiném bez toho, aby na sebe "
"musely přímo odkazovat. Použití signálů snižuje `provázanost <https://"
"cs.wikipedia.org/wiki/Prov%C3%A1zanost>`_ a nechává váš kód flexibilní."

msgid ""
"For example, you might have a life bar on the screen that represents the "
"player's health. When the player takes damage or uses a healing potion, you "
"want the bar to reflect the change. To do so, in Godot, you would use "
"signals."
msgstr ""
"Můžete například mít na obrazovce ukazatel života, který představuje zdraví "
"hráče. Když hráč utrpí zranění nebo použije léčivý lektvar, chcete, aby se v "
"ukazateli projevila odpovídající změna. K tomu v Godotu typicky použijete "
"signál."

msgid ""
"Like methods (:ref:`class_callable`), signals are a first-class type since "
"Godot 4.0. This means you can pass them around as method arguments directly "
"without having to pass them as strings, which allows for better "
"autocompletion and is less error-prone. See the :ref:`class_signal` class "
"reference for a list of what you can do with the Signal type directly."
msgstr ""
"Stejně jako metody (:ref:`class_callable`) jsou signály od Godotu 4.0 typem "
"první třídy. To znamená, že je můžete předávat jako argumenty metod přímo, "
"aniž byste je museli předávat jako řetězce. To umožňuje lepší automatické "
"dokončování kódu a je to přístup méně náchylný k chybám. Pro seznam všeho, "
"co můžete dělat přímo s typem Signal se můžete podívat na referenční "
"dokumentaci třídy :ref:`class_signal` ."

msgid ""
"As mentioned in the introduction, signals are Godot's version of the "
"observer pattern. You can learn more about it in `Game Programming Patterns "
"<https://gameprogrammingpatterns.com/observer.html>`__."
msgstr ""
"Jak bylo zmíněno v úvodu, signály jsou verze vzoru observer (pozorovatel) v "
"Godotu. Více se o tomto vzoru můžete dozvědět v `Game Programming Patterns "
"<https://gameprogrammingpatterns.com/observer.html>`__."

msgid ""
"We will now use a signal to make our Godot icon from the previous lesson "
"(:ref:`doc_scripting_player_input`) move and stop by pressing a button."
msgstr ""
"Nyní použijeme signál, abychom naši ikonu Godotu z předchozí lekce "
"(:ref:`doc_scripting_player_input`) nechali hýbat nebo zastavili stisknutím "
"tlačítka."

msgid "For this project, we will be following the Godot naming conventions."
msgstr ""
"V tomto projektu budeme dodržovat konvence Godotu pro názvy identifikátorů."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: Třídy (uzly) používají PascalCase, proměnné a funkce používají "
"snake_case a konstanty používají ALL_CAPS "
"(viz :ref:`doc_gdscript_styleguide`)."

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase "
"(See :ref:`doc_c_sharp_styleguide`). Be careful to type the method names "
"precisely when connecting signals."
msgstr ""
"**C #**: Třídy, exportované proměnné a metody používají PascalCase, soukromá "
"pole používají _camelCase, místní proměnné a parametry používají camelCase "
"(viz :ref:`doc_c_sharp_styleguide`). Při připojování signálů dávejte pozor, "
"abyste názvy metod zadali přesně."

msgid "Scene setup"
msgstr "Příprava scény"

msgid ""
"To add a button to our game, we will create a new scene which will include "
"both a :ref:`Button <class_button>` and the ``sprite_2d.tscn`` scene we "
"created in the :ref:`doc_scripting_first_script` lesson."
msgstr ""
"Abychom do naší hry přidali tlačítko, vytvoříme novou scénu, která bude "
"obsahovat jak :ref:`Button <class_button>` (\"tlačítko\"), tak scénu "
"``sprite_2d.tscn``, kterou jsme vytvořili v "
"lekci :ref:`doc_scripting_first_script`."

msgid "Create a new scene by going to the menu Scene -> New Scene."
msgstr "Vytvořte novou scénu v nabídce Scéna -> Nová scéna."

msgid ""
"In the Scene dock, click the 2D Scene button. This will add a :ref:`Node2D "
"<class_Node2D>` as our root."
msgstr ""
"V doku Scéna klikněte na tlačítko 2D scéna. To přidá :ref:`Node2D "
"<class_Node2D>` (\"2D uzel\") jako náš kořenový uzel."

msgid ""
"In the FileSystem dock, click and drag the ``sprite_2d.tscn`` file you saved "
"previously onto the Node2D to instantiate it."
msgstr ""
"Přetáhněte soubor ``sprite_2d.tscn``, který jste dříve uložili, z doku "
"Souborový systém na uzel Node2D. Tím instancujete scénu."

msgid ""
"We want to add another node as a sibling of the Sprite2D. To do so, right-"
"click on Node2D and select Add Child Node."
msgstr ""
"Nyní chceme přidat další uzel jako sourozence Sprite2D. Klikněte pravým "
"tlačítkem na Node2D a vyberte Přidat podřízený uzel."

msgid "Search for the :ref:`Button <class_button>` node and add it."
msgstr "Vyhledejte uzel s názvem :ref:`Button <class_button>` a přidejte jej."

msgid ""
"The node is small by default. Click and drag on the bottom-right handle of "
"the Button in the viewport to resize it."
msgstr ""
"Uzel je ve výchozím nastavení malý. Změňte jeho velikost kliknutím na pravý "
"dolní úchyt tlačítka v průzoru a jeho roztažením."

msgid ""
"If you don't see the handles, ensure the select tool is active in the "
"toolbar."
msgstr ""
"Pokud úchyty nevidíte, ujistěte se, že je v panelu nástrojů aktivní nástroj "
"Vybrat."

msgid "Click and drag on the button itself to move it closer to the sprite."
msgstr ""
"Přesuňte tlačítko blíže ke spritu tím, že kliknete na něj samotné a "
"přetáhnete ho."

msgid ""
"You can also write a label on the Button by editing its Text property in the "
"Inspector. Enter ``Toggle motion``."
msgstr ""
"Můžete také tlačítku přidat popisek úpravou jeho vlastnosti Text v "
"Inspektoru. Zadejte do něj ``Přepnout pohyb``."

msgid "Your scene tree and viewport should look like this."
msgstr "Strom scény a průzor by teď měly vypadat takto."

msgid ""
"Save your newly created scene as ``node_2d.tscn``, if you haven't already. "
"You can then run it with :kbd:`F6` (:kbd:`Cmd + R` on macOS). At the moment, "
"the button will be visible, but nothing will happen if you press it."
msgstr ""
"Pokud jste tak ještě neučinili, uložte svou nově vytvořenou scénu jako "
"``node_2d.tscn``. Poté ji můžete spustit pomocí :kbd:`F6` (:kbd:`Cmd + R` na "
"macOS). Teď bude tlačítko viditelné, ale když jej stisknete, nic se nestane."

msgid "Connecting a signal in the editor"
msgstr "Připojení signálu v editoru"

msgid ""
"Here, we want to connect the Button's \"pressed\" signal to our Sprite2D, "
"and we want to call a new function that will toggle its motion on and off. "
"We need to have a script attached to the Sprite2D node, which we do from the "
"previous lesson."
msgstr ""
"Chceme propojit signál tlačítka \"pressed\" (\"stisknuto\") s naším Sprite2D "
"a zavolat novou funkci, která bude zapínat a vypínat jeho pohyb. K uzlu "
"Sprite2D musíme mít připojený skript, což z předchozí lekce máme."

msgid ""
"You can connect signals in the Node dock. Select the Button node and, on the "
"right side of the editor, click on the tab named \"Node\" next to the "
"Inspector."
msgstr ""
"Signály můžete připojit v doku Uzel. Vyberte uzel Button a na pravé straně "
"editoru klikněte na záložku s názvem \"Uzel\" vedle Inspektoru."

msgid "The dock displays a list of signals available on the selected node."
msgstr "Dok zobrazuje seznam signálů dostupných ve vybraném uzlu."

msgid "Double-click the \"pressed\" signal to open the node connection window."
msgstr "Dvojklikem na signál \"pressed\" otevřete okno připojení uzlu."

msgid ""
"There, you can connect the signal to the Sprite2D node. The node needs a "
"receiver method, a function that Godot will call when the Button emits the "
"signal. The editor generates one for you. By convention, we name these "
"callback methods \"_on_node_name_signal_name\". Here, it'll be "
"\"_on_button_pressed\"."
msgstr ""
"Zde můžete signál připojit k uzlu Sprite2D. Uzel potřebuje přijímací metodu, "
"tj. funkci, kterou Godot zavolá, když tlačítko vyšle signál. Editor vám "
"metodu vygeneruje. Podle konvence nazýváme tyto metody zpětného volání "
"\"_on_nazev_uzlu_nazev_signalu\". Zde to bude \"_on_button_pressed\"."

msgid ""
"When connecting signals via the editor's Node dock, you can use two modes. "
"The simple one only allows you to connect to nodes that have a script "
"attached to them and creates a new callback function on them."
msgstr ""
"Při připojování signálů přes dok Uzel v editoru můžete použít dva režimy. "
"Ten jednoduchý umožňuje pouze připojení k uzlům, ke kterým je připojen "
"skript a vytvoří v nich novou funkci zpětného volání."

msgid ""
"The advanced view lets you connect to any node and any built-in function, "
"add arguments to the callback, and set options. You can toggle the mode in "
"the window's bottom-right by clicking the Advanced button."
msgstr ""
"Pokročilé zobrazení vám umožňuje připojit se k libovolnému uzlu a jakékoli "
"vestavěné funkci, přidávat argumenty pro zpětné volání a nastavovat další "
"možnosti. Režim můžete přepnout v levém dolním rohu okna kliknutím na "
"tlačítko Pokročilé."

msgid ""
"If you are using an external editor (such as VS Code), this automatic code "
"generation might not work. In this case, you need to connect the signal via "
"code as explained in the next section."
msgstr ""
"Pokud používáte externí editor (například VS Code), toto automatické "
"generování kódu nemusí fungovat. V takovém případě musíte signál připojit "
"pomocí kódu, jak je vysvětleno v následující části."

msgid ""
"Click the Connect button to complete the signal connection and jump to the "
"Script workspace. You should see the new method with a connection icon in "
"the left margin."
msgstr ""
"Kliknutím na tlačítko Připojit dokončete připojení signálu a přejděte na "
"pracovní prostor Skript. Měli byste vidět novou metodu s ikonou připojení na "
"levém okraji."

msgid ""
"If you click the icon, a window pops up and displays information about the "
"connection. This feature is only available when connecting nodes in the "
"editor."
msgstr ""
"Když na ikonu kliknete, zobrazí se okno s informacemi o připojení. Tato "
"funkce je dostupná pouze při připojení uzlů v editoru."

msgid ""
"Let's replace the line with the ``pass`` keyword with code that'll toggle "
"the node's motion."
msgstr ""
"Řádek s klíčovým slovem ``pass`` (\"vynechat\") nahradíme kódem, který "
"přepne pohyb uzlu."

msgid ""
"Our Sprite2D moves thanks to code in the ``_process()`` function. Godot "
"provides a method to toggle processing on and off: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Another method of the Node class, "
"``is_processing()``, returns ``true`` if idle processing is active. We can "
"use the ``not`` keyword to invert the value."
msgstr ""
"Náš Sprite2D se pohybuje díky kódu ve funkci ``_process()`` "
"(\"zpracování\"). Godot poskytuje metodu pro zapínání a vypínání "
"zpracování: :ref:`Node.set_process() <class_Node_method_set_process>` "
"(\"nastavit zpracování\"). Další metoda třídy Node, ``is_processing()`` "
"(\"zpracovává\"), vrací ``true``, pokud je aktivní nečinné zpracování. K "
"invertování hodnoty můžeme použít klíčové slovo ``not``."

msgid ""
"This function will toggle processing and, in turn, the icon's motion on and "
"off upon pressing the button."
msgstr ""
"Tato funkce při stisknutí tlačítka přepne zpracování a tím i pohyb ikony."

msgid ""
"Before trying the game, we need to simplify our ``_process()`` function to "
"move the node automatically and not wait for user input. Replace it with the "
"following code, which we saw two lessons ago:"
msgstr ""
"Než hru vyzkoušíme, musíme zjednodušit naši funkci ``_process()`` tak, aby "
"se uzel pohyboval automaticky a nečekal na vstup uživatele. Nahraďte jej "
"následujícím kódem, který jsme viděli před dvěma lekcemi:"

msgid "Your complete ``sprite_2d.gd`` code should look like the following."
msgstr "Váš kompletní kód ``sprite_2d.gd`` by měl vypadat následovně."

msgid "Connecting a signal via code"
msgstr "Připojení signálů v kódu"

msgid ""
"You can connect signals via code instead of using the editor. This is "
"necessary when you create nodes or instantiate scenes inside of a script."
msgstr ""
"Namísto použití editoru můžete signály propojit pomocí kódu. To je nutné, "
"když vytváříte uzly nebo instancujete scény uvnitř skriptu."

msgid ""
"Let's use a different node here. Godot has a :ref:`Timer <class_Timer>` node "
"that's useful to implement skill cooldown times, weapon reloading, and more."
msgstr ""
"Zde použijeme jiný uzel. Godot má uzel :ref:`Timer <class_Timer>` "
"(\"časovač\"), který je užitečný, když chcete implementovat oddálené "
"obnovení dovedností, přebíjení zbraní a podobně."

msgid ""
"Head back to the 2D workspace. You can either click the \"2D\" text at the "
"top of the window or press :kbd:`Ctrl + F1` (:kbd:`Ctrl + Cmd + 1` on macOS)."
msgstr ""
"Vraťte se do pracovního prostoru 2D. Můžete buď kliknout na text \"2D\" v "
"horní části okna nebo stisknout :kbd:`Ctrl + F1` (:kbd:`Ctrl + Cmd + 1` na "
"macOS)."

msgid ""
"In the Scene dock, right-click on the Sprite2D node and add a new child "
"node. Search for Timer and add the corresponding node. Your scene should now "
"look like this."
msgstr ""
"V doku Scéna klikněte pravým tlačítkem na uzel Sprite2D a přidejte nový "
"podřízený uzel. Vyhledejte Timer a přidejte odpovídající uzel. Vaše scéna by "
"nyní měla vypadat takto."

msgid ""
"With the Timer node selected, go to the Inspector and enable the "
"**Autostart** property."
msgstr ""
"S vybraným uzlem Timer přejděte do Inspektoru a povolte vlastnost "
"**Automatický start**."

msgid ""
"Click the script icon next to Sprite2D to jump back to the scripting "
"workspace."
msgstr ""
"Kliknutím na ikonu skriptu vedle Sprite2D přejdete zpět do pracovního "
"prostoru pro skriptování."

msgid "We need to do two operations to connect the nodes via code:"
msgstr "Pro propojení uzlů pomocí kódu musíme provést dvě operace:"

msgid "Get a reference to the Timer from the Sprite2D."
msgstr "Získat odkaz na časovač Timer ze Sprite2D."

msgid "Call the ``connect()`` method on the Timer's \"timeout\" signal."
msgstr ""
"Zavolat metodu ``connect()`` (\"připojit\") na signál \"timeout\" (\"čas "
"vypršel\") Timeru."

msgid ""
"To connect to a signal via code, you need to call the ``connect()`` method "
"of the signal you want to listen to. In this case, we want to listen to the "
"Timer's \"timeout\" signal."
msgstr ""
"Pro připojení signálu v kódu musíte zavolat metodu ``connect()`` toho "
"signálu, který chcete poslouchat. V tomto případě chceme poslouchat signál "
"Timeru \"timeout“."

msgid ""
"We want to connect the signal when the scene is instantiated, and we can do "
"that using the :ref:`Node._ready() <class_Node_private_method__ready>` built-"
"in function, which is called automatically by the engine when a node is "
"fully instantiated."
msgstr ""
"Chceme připojit signál ve chvíli, když scénu instancujeme. To můžeme udělat "
"pomocí vestavěné funkce :ref:`Node._ready() "
"<class_Node_private_method__ready>` (\"připraveno\"), kterou engine "
"automaticky zavolá v momentě, kdy je uzel plně instancován."

msgid ""
"To get a reference to a node relative to the current one, we use the "
"method :ref:`Node.get_node() <class_Node_method_get_node>`. We can store the "
"reference in a variable."
msgstr ""
"Abychom získali odkaz na uzel vzhledem k aktuálnímu, použijeme "
"metodu :ref:`Node.get_node() <class_Node_method_get_node>` (\"získat "
"uzel\"). Odkaz si můžeme uložit do proměnné."

msgid ""
"The function ``get_node()`` looks at the Sprite2D's children and gets nodes "
"by their name. For example, if you renamed the Timer node to "
"\"BlinkingTimer\" in the editor, you would have to change the call to "
"``get_node(\"BlinkingTimer\")``."
msgstr ""
"Funkce ``get_node()`` se podívá na potomky Sprite2D a získá uzly podle "
"jejich jména. Pokud byste například v editoru přejmenovali uzel Timer na "
"\"CasovacBlikani\", museli byste změnit volání na "
"``get_node(\"CasovacBlikani\")``."

msgid ""
"We can now connect the Timer to the Sprite2D in the ``_ready()`` function."
msgstr "Nyní můžeme Timer připojit ke Sprite2D ve funkci ``_ready()``."

msgid ""
"The line reads like so: we connect the Timer's \"timeout\" signal to the "
"node to which the script is attached. When the Timer emits ``timeout``, we "
"want to call the function ``_on_timer_timeout()``, that we need to define. "
"Let's add it at the bottom of our script and use it to toggle our sprite's "
"visibility."
msgstr ""
"Řádek můžeme číst takto: připojíme signál \"timeout\" Timeru k uzlu, ke "
"kterému je skript připojen. Když Timer vyšle ``timeout``, chceme zavolat "
"funkci ``_on_timer_timeout()``, kterou ještě musíme definovat. Přidáme ji na "
"konec našeho skriptu a použijeme k přepínání viditelnosti spritu."

msgid ""
"By convention, we name these callback methods in GDScript as "
"\"_on_node_name_signal_name\" and in C# as \"OnNodeNameSignalName\". Here, "
"it'll be \"_on_timer_timeout\" for GDScript and OnTimerTimeout() for C#."
msgstr ""
"Podle konvence nazýváme tyto metody zpětného volání v GDScriptu "
"\"_on_nazev_uzlu_nazev_signalu\" a v C# \"OnNazevUzluNazevSignalu\". Zde to "
"bude \"_on_timer_timeout\" pro GDScript a OnTimerTimeout() pro C#."

msgid ""
"The ``visible`` property is a boolean that controls the visibility of our "
"node. The line ``visible = not visible`` toggles the value. If ``visible`` "
"is ``true``, it becomes ``false``, and vice-versa."
msgstr ""
"Vlastnost ``visible`` (\"viditelné\") je booleovská hodnota, která řídí "
"viditelnost našeho uzlu. Řádek ``visible = not visible`` hodnotu přepíná. Je-"
"li ``visible`` ``true``, stane se z něj ``false`` a naopak."

msgid ""
"If you run the Node2D scene now, you will see that the sprite blinks on and "
"off, at one second intervals."
msgstr ""
"Když scénu Node2D spustíte nyní, uvidíte, že se sprite zapíná a vypíná v "
"jednosekundových intervalech."

msgid "Complete script"
msgstr "Kompletní skript"

msgid ""
"That's it for our little moving and blinking Godot icon demo! Here is the "
"complete ``sprite_2d.gd`` file for reference."
msgstr ""
"To je pro naši malou ukázku pohyblivé a blikající ikony Godotu vše! Zde je "
"úplný soubor ``sprite_2d.gd`` pro vaši kontrolu."

msgid "Custom signals"
msgstr "Vlastní signály"

msgid ""
"This section is a reference on how to define and use your own signals, and "
"does not build upon the project created in previous lessons."
msgstr ""
"Tato sekce slouží jako reference pro definování a používání vašich vlastních "
"signálů. Nestaví na projektu, který jsme vytvořili v předchozích lekcích."

msgid ""
"You can define custom signals in a script. Say, for example, that you want "
"to show a game over screen when the player's health reaches zero. To do so, "
"you could define a signal named \"died\" or \"health_depleted\" when their "
"health reaches 0."
msgstr ""
"Vlastní signály můžete definovat ve skriptu. Řekněme, že chcete ukázat "
"obrazovku pro konec hry, když životy hráče klesnou na nulu. K tomu můžete "
"definovat signál s názvem \"died\" (\"zemřel\") nebo třeba "
"\"health_depleted\" (\"životy vyčerpány\"), když životy dosáhnou 0."

msgid ""
"As signals represent events that just occurred, we generally use an action "
"verb in the past tense in their names."
msgstr ""
"Protože signály představují události, které právě nastaly, obecně v jejich "
"názvech používáme sloveso popisující akci v minulém čase."

msgid ""
"Your signals work the same way as built-in ones: they appear in the Node tab "
"and you can connect to them like any other."
msgstr ""
"Vaše signály fungují stejně jako ty vestavěné: zobrazí se na kartě Uzel a "
"můžete se k nim připojit jako k jakémukoli jinému."

msgid "To emit a signal in your scripts, call ``emit()`` on the signal."
msgstr ""
"Chcete-li ve svých skriptech signál vyslat, zavolejte na něm metodu "
"``emit()`` (\"vyslat\")."

msgid ""
"A signal can optionally declare one or more arguments. Specify the argument "
"names between parentheses:"
msgstr ""
"Signál může také volitelně deklarovat jeden nebo více argumentů. Jejich "
"názvy uveďte mezi závorkami:"

msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"Argumenty signálu se zobrazují v doku Uzel v editoru a Godot je může použít "
"k vytvoření funkcí zpětného volání za vás. Signály však můžete stále vysílat "
"s libovolným počtem argumentů. Je tedy na vás, abyste poslali ty správné "
"hodnoty."

msgid ""
"To emit values along with the signal, add them as extra arguments to the "
"``emit()`` function:"
msgstr ""
"Chcete-li spolu se signálem předat hodnoty, přidejte je jako dodatečné "
"argumenty funkce ``emit()``:"

msgid "Summary"
msgstr "Shrnutí"

msgid ""
"Any node in Godot emits signals when something specific happens to them, "
"like a button being pressed. Other nodes can connect to individual signals "
"and react to selected events."
msgstr ""
"Jakýkoli uzel v Godotu vysílá signály, když se jim něco konkrétního stane, "
"například když hráč stiskne tlačítko. K jednotlivým signálům se mohou "
"připojovat ostatní uzly a reagovat na vybrané události."

msgid ""
"Signals have many uses. With them, you can react to a node entering or "
"exiting the game world, to a collision, to a character entering or leaving "
"an area, to an element of the interface changing size, and much more."
msgstr ""
"Signály mají mnoho využití. Můžete s nimi reagovat na to, když uzel vstoupí "
"nebo opustí herní svět, na kolize, na to, že hráč vstoupil do oblasti nebo "
"ji opustil, na změnu velikosti prvku uživatelského rozhraní a mnoho dalšího."

msgid ""
"For example, an :ref:`Area2D <class_Area2D>` representing a coin emits a "
"``body_entered`` signal whenever the player's physics body enters its "
"collision shape, allowing you to know when the player collected it."
msgstr ""
"Například :ref:`Area2D <class_Area2D>` (\"2D oblast\") představující minci "
"může vyslat signál ``body_entered`` (\"těleso vstoupilo\"), kdykoli "
"fyzikální těleso hráče vstoupí do jejího kolizního tvaru, díky čemuž "
"dokážete zaznamenat okamžik, kdy hráč minci sebral."

msgid ""
"In the next section, :ref:`doc_your_first_2d_game`, you'll create a complete "
"2D game and put everything you learned so far into practice."
msgstr ""
"V následující sekci, :ref:`doc_your_first_2d_game` ,vytvoříte kompletní 2D "
"hru a uvedete vše, co jste se doposud naučili, do praxe."
