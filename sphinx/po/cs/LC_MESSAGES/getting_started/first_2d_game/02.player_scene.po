#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "Vytvoření scény hráče"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""
"S připraveným projektem můžeme začít pracovat na postavě, kterou bude "
"ovládat hráč."

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"První scéna bude definovat objekt ``Player``. Jednou z výhod vytvoření "
"samostatné scény pro postavu hráče je, že ji můžeme testovat samostatně, "
"dokonce ještě předtím, než vytvoříme další části hry."

msgid "Node structure"
msgstr "Struktura uzlu"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. In the upper-left corner, in the \"Scene\" tab, "
"click the \"Other Node\" button and add an :ref:`Area2D <class_Area2D>` node "
"to the scene."
msgstr ""
"Nejprve musíme pro objekt hráče vybrat vhodný kořenový uzel. Obecně vzato by "
"kořenový uzel scény měl odrážet požadovanou funkčnost objektu – to, co "
"objekt *je*. V záložce \"Scéna\" v levém horním rohu klikněte na tlačítko "
"\"Jiný uzel\" a přidejte do scény uzel :ref:`Area2D <class_Area2D>` (\"2D "
"oblast\")."

msgid ""
"When you add the ``Area2D`` node, Godot will display the following **warning "
"icon** next to it in the scene tree:"
msgstr ""
"Když uzel ``Area2D`` přidáte, Godot vedle něj ve stromu scény zobrazí "
"následující **varovnou ikonu**:"

msgid ""
"This warning tells us that the ``Area2D`` node requires a shape to detect "
"collisions or overlaps. We can **ignore the warning temporarily** because we "
"will first set up the player's visuals (using an animated sprite). Once the "
"visuals are ready, we will add a collision shape as a child node. This will "
"allow us to accurately size and position the shape based on the sprite's "
"appearance."
msgstr ""
"Toto varování nám říká, že ``Area2D`` vyžaduje tvar pro detekci kolizí nebo "
"překrývání. Varování můžeme **prozatím ignorovat**. Nejdříve nastavíme "
"podobu hráče pomocí animovaného spritu. Jakmile budeme mít připravenu "
"vizuální stránku, přidáme nový podřízený uzel pro kolizní tvar. To nám "
"umožní přesně nastavit velikost a umístění tvaru na základě vzhledu spritu."

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"Pomocí ``Area2D`` můžeme detekovat objekty, které překryjí nebo narazí do "
"hráče. Změňte název uzlu na ``Player`` tím, že na něj poklepáte. Nyní, když "
"jsme nastavili kořenový uzel scény, můžeme přidat další uzly, které nám "
"umožní používat další funkce."

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock. Its tooltip says \"Groups the "
"selected node with its children. This causes the parent to be selected when "
"any child node is clicked in 2D and 3D view.\""
msgstr ""
"Než uzlu ``Hráč`` přidáme potomky, chětli bychom se ujistit, že je omylem "
"nepřemístíme nebo nezměníme jejich velikost, když na ně klikneme. Vyberte "
"uzel a klikněte na ikonu napravo od zámku. V jeho nápovědě by mělo stát "
"\"Seskupí vybraný uzel s jeho potomky. To způsobí, že při kliknutí na "
"libovolný podřízený uzel ve 2D a 3D pohledu bude vybrán rodič.\""

msgid ""
"Save the scene as ``player.tscn``. Click **Scene > Save**, or "
"press :kbd:`Ctrl + S` on Windows/Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"Uložte scénu pod názvem ``player.tscn``. Klikněte na **Scéna > Uložit**, "
"případně stiskněte :kbd:`Ctrl + S` v systému Windows/Linux nebo :kbd:`Cmd + "
"S` v systému macOS."

msgid "For this project, we will be following the Godot naming conventions."
msgstr ""
"V tomto projektu budeme dodržovat konvence Godotu pro názvy identifikátorů."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: Třídy (uzly) používají PascalCase, proměnné a funkce používají "
"snake_case a konstanty používají ALL_CAPS "
"(viz :ref:`doc_gdscript_styleguide`)."

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase "
"(See :ref:`doc_c_sharp_styleguide`). Be careful to type the method names "
"precisely when connecting signals."
msgstr ""
"**C #**: Třídy, exportované proměnné a metody používají PascalCase, soukromá "
"pole používají _camelCase, místní proměnné a parametry používají camelCase "
"(viz :ref:`doc_c_sharp_styleguide`). Při připojování signálů dávejte pozor, "
"abyste názvy metod zadali přesně."

msgid "Sprite animation"
msgstr "Animace spritu"

msgid ""
"Click on the ``Player`` node and add (:kbd:`Ctrl + A` on Windows/Linux "
"or :kbd:`Cmd + A` on macOS) a child node :ref:`AnimatedSprite2D "
"<class_AnimatedSprite2D>`. The ``AnimatedSprite2D`` will handle the "
"appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite2D`` requires "
"a :ref:`SpriteFrames <class_SpriteFrames>` resource, which is a list of the "
"animations it can display. Make sure ``AnimatedSprite2D`` is selected and "
"then find the ``Sprite Frames`` property under the ``Animation`` section in "
"the Inspector and click \"[empty]\" -> \"New SpriteFrames\":"
msgstr ""
"Klikněte na uzel ``Player`` a přidejte mu (:kbd:`Ctrl + A` v systému Windows/"
"Linux nebo :kbd:`Cmd + A` v systému macOS) podřízený "
"uzel :ref:`AnimatedSprite2D <class_AnimatedSprite2D>` (\"2D animovaný "
"sprite\"). Ten se postará o vzhled a animace našeho hráče. Všimněte si, že "
"vedle uzlu je  další varovný symbol. ``AnimatedSprite2D`` vyžaduje "
"zdroj :ref:`SpriteFrames <class_SpriteFrames>` (\"snímky spritu\"), což je "
"seznam animací, které může zobrazit. Ujistěte se, že máte "
"``AnimatedSprite2D`` vybraný a v Inspektoru najděte vlastnost ``Snímky "
"spritu`` v sekci ``Animace``. Klikněte na \"[prázdné]\" -> \"Nový "
"SpriteFrames\":"

msgid ""
"Click on the ``SpriteFrames`` you just created to open the \"SpriteFrames\" "
"panel:"
msgstr ""
"Kliknutím na ``SpriteFrames``, které jste právě vytvořili, otevřete panel "
"\"Snímky spritu\":"

msgid ""
"On the left is a list of animations. Click the ``default`` one and rename it "
"to ``walk``. Then click the **Add Animation** button to create a second "
"animation named ``up``."
msgstr ""
"Vlevo je seznam animací. Klikněte na ``výchozí`` a přejmenujte jej na "
"``walk`` (\"chůze\"). Poté klikněte na tlačítko **Přidat animaci** a "
"vytvořte druhou animaci s názvem ``up`` (\"nahoru\")."

msgid ""
"Find the player images in the FileSystem dock - they're in the ``art`` "
"folder you unzipped earlier. Drag the two images for each animation, into "
"the **Animation Frames** side of the panel for the corresponding animation:"
msgstr ""
"Najděte obrázky hráče v doku Souborový systém - jsou ve složce ``art``, "
"kterou jste před chvílí rozbalili. Přetáhněte oba obrázky odpovídajících "
"animací na stranu panelu **Snímky animace**:"

msgid ""
"``playerGrey_walk1`` and ``playerGrey_walk2`` for the ``walk`` animation"
msgstr "``playerGrey_walk1`` a ``playerGrey_walk2`` pro animaci ``walk``"

msgid "``playerGrey_up1`` and ``playerGrey_up2`` for the ``up`` animation"
msgstr "``playerGrey_up1`` a ``playerGrey_up2`` pro animaci ``up``"

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite2D`` node and set the "
"``Scale`` property to ``(0.5, 0.5)``. You can find it in the Inspector under "
"the ``Node2D`` heading."
msgstr ""
"Obrázky hráče jsou pro okno hry příliš velké, takže je musíme zmenšit. "
"Klikněte na uzel ``AnimatedSprite2D`` a nastavte vlastnost ``Měřítko`` na "
"``(0.5, 0.5)``. Najdete jej v Inspektoru pod hlavičkou ``Node2D`` (\"2D "
"uzel\")."

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\" -> \"New "
"CapsuleShape2D\". Using the two size handles, resize the shape to cover the "
"sprite:"
msgstr ""
"No a konečně přidejte uzlu ``Player`` potomka :ref:`CollisionShape2D "
"<class_CollisionShape2D>` (\"2D kolizní tvar\"). Ten bude určovat hráčův "
"\"hitbox\", neboli hranice jeho kolizní oblasti. Pro tuto postavu nejlépe "
"vyhovuje uzel ``CapsuleShape2D`` (\"2D tvar kapsle\"). V Inspektoru tedy "
"vedle \"Tvar\" klikněte na \"[prázdné]\" -> \"Nový CapsuleShape2D\". Pomocí "
"dvou úchytů velikosti změňte velikost tvaru tak, aby pokryl celý sprite:"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "Až budete hotovi, měla by vaše scéna ``Player`` vypadat takto:"

msgid ""
"Once this is done, the warning on the ``Area2D`` node will disappear, as it "
"now has a shape assigned and can interact with other objects."
msgstr ""
"Varování na uzlu ``Area2D`` by nyní mělo zmizet, protože má nyní přiřazený "
"tvar a může interagovat s jinými objekty."

msgid "Make sure to save the scene again after these changes."
msgstr "Nezapomeňte scénu po těchto změnách znovu uložit."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"V příští části připojíme k uzlu hráče skript, který nám umožní ovládat jeho "
"pohyb a animace. Poté nastavíme detekci kolize, abychom věděli, kdy hráče "
"něco zasáhlo."
