#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Coding the player"
msgstr "Programování hráče"

msgid ""
"In this lesson, we'll add player movement, animation, and set it up to "
"detect collisions."
msgstr ""
"V této lekci přidáme pohyb hráče a jeho animaci a nastavíme jej, aby "
"detekoval kolize."

msgid ""
"To do so, we need to add some functionality that we can't get from a built-"
"in node, so we'll add a script. Click the ``Player`` node and click the "
"\"Attach Script\" button:"
msgstr ""
"K tomu potřebujeme přidat nějaké funkce, které v žádném vestavěném uzlu "
"nenajdeme, takže přidáme skript. Klikněte na uzel ``Player`` (\"hráč\") a "
"klikněte na tlačítko \"Připojit skript\":"

msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"V okně nastavení skriptu můžete ponechat výchozí nastavení. Stačí kliknout "
"na \"Vytvořit\":"

msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"Pokud vytváříte skript C# nebo jiné jazyky, předtím než stisknete tlačítko "
"Vytvořit, zvolte odpovídající `jazyk` v rozbalovací nabídce."

msgid ""
"If this is your first time encountering GDScript, please "
"read :ref:`doc_scripting` before continuing."
msgstr ""
"Pokud se s GDScriptem setkáváte poprvé, přečtěte si prosím "
"nejprve :ref:`doc_scripting`."

msgid "Start by declaring the member variables this object will need:"
msgstr ""
"Začněme deklarací členských proměnných, které bude tento objekt potřebovat:"

msgid ""
"Using the ``export`` keyword on the first variable ``speed`` allows us to "
"set its value in the Inspector. This can be handy for values that you want "
"to be able to adjust just like a node's built-in properties. Click on the "
"``Player`` node and you'll see the property now appears in the Inspector in "
"a new section with the name of the script. Remember, if you change the value "
"here, it will override the value written in the script."
msgstr ""
"Pomocí klíčového slova ``export`` před první proměnnou ``speed`` "
"(\"rychlost\") můžeme upravovat její hodnotu v Inspektoru. To je užitečné "
"pro hodnoty, které chcete mít možnost upravit stejně jako vestavěné "
"vlastnosti uzlu. Klikněte na uzel ``Player`` a uvidíte, že vlastnost se "
"objevila v Inspektoru v nové sekci pojmenované stejně jako skript. Pokud zde "
"hodnotu změníte, přepíše se hodnota zapsaná ve skriptu."

msgid ""
"If you're using C#, you need to (re)build the project assemblies whenever "
"you want to see new export variables or signals. This build can be manually "
"triggered by clicking the **Build** button at the top right of the editor."
msgstr ""
"Pokud používáte C#, musíte (znovu) sestavit projektová sestavení, kdykoli "
"chcete vidět nové exportované proměnné nebo signály. Sestavení lze spustit "
"ručně kliknutím na tlačítko **Sestavení** v pravém horním rohu editoru."

msgid ""
"Your ``player.gd`` script should already contain a ``_ready()`` and a "
"``_process()`` function. If you didn't select the default template shown "
"above, create these functions while following the lesson."
msgstr ""
"Váš skript ``player.gd`` by již měl obsahovat funkce ``_ready()`` "
"(\"připraveno\") a ``_process()`` (\"zpracování\"). Pokud jste nevybrali "
"výchozí šablonu zobrazenou výše, vytvořte tyto funkce během lekce."

msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"Funkce ``_ready ()`` se volá, když uzel vstoupí do stromu scény, což je "
"dobrý čas pro získání velikosti okna hry:"

msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"Nyní můžeme pomocí funkce ``_process ()`` definovat, co bude hráč dělat. "
"``_process ()`` se volá v každém snímku takže tuto funkci použijeme k "
"aktualizaci těch prvků naší hry, které se často mění. Pro hráče musíme "
"udělat následující:"

msgid "Check for input."
msgstr "Zkontrolovat vstup."

msgid "Move in the given direction."
msgstr "Pohnout se v požadovaném směru."

msgid "Play the appropriate animation."
msgstr "Přehrát příslušnou animaci."

msgid ""
"First, we need to check for input - is the player pressing a key? For this "
"game, we have 4 direction inputs to check. Input actions are defined in the "
"Project Settings under \"Input Map\". Here, you can define custom events and "
"assign different keys, mouse events, or other inputs to them. For this game, "
"we will map the arrow keys to the four directions."
msgstr ""
"Nejprve musíme zkontrolovat vstup – drží hráč stisknutou klávesu? Pro tuto "
"hru musíme zkontrolovat 4 směrové vstupy. Vstupní akce jsou definovány v "
"Nastavení projektu pod \"Mapa vstupů\". Zde můžete definovat vlastní "
"události a přiřadit jim různé klávesy, události myši nebo jiné vstupy. V "
"této hře namapujeme klávesy se šipkami do čtyř směrů."

msgid ""
"Click on *Project -> Project Settings* to open the project settings window "
"and click on the *Input Map* tab at the top. Type \"move_right\" in the top "
"bar and click the \"Add\" button to add the ``move_right`` action."
msgstr ""
"Kliknutím na *Projekt -> Nastavení projektu* otevřete okno nastavení "
"projektu a klikněte na záložku *Mapa vstupů* v horní části. Do horní lišty "
"napište \"move_right\" a kliknutím na tlačítko \"Přidat\" akci "
"``move_right`` (\"pohnout_doprava\")přidejte."

msgid ""
"We need to assign a key to this action. Click the \"+\" icon on the right, "
"to open the event manager window."
msgstr ""
"Akci musíme přiřadit klávesu. Kliknutím na ikonu \"+\" vpravo otevřete okno "
"správce událostí."

msgid ""
"The \"Listening for Input...\" field should automatically be selected. Press "
"the \"right\" key on your keyboard, and the menu should look like this now."
msgstr ""
"Automaticky by mělo být vybráno pole \"Čekání na vstup...\". Stiskněte "
"pravou šipku na klávesnici a nabídka by nyní měla vypadat takto."

msgid ""
"Select the \"ok\" button. The \"right\" key is now associated with the "
"``move_right`` action."
msgstr ""
"Zvolte tlačítko \"ok\". Pravá šipka je nyní spojena s akcí ``move_right``."

msgid "Repeat these steps to add three more mappings:"
msgstr "Zopakujte tento postup pro zbylá tři mapování:"

msgid "``move_left`` mapped to the left arrow key."
msgstr "``move_left`` mapované na šipku doleva."

msgid "``move_up`` mapped to the up arrow key."
msgstr "``move_up`` mapované na šipku nahoru."

msgid "And ``move_down`` mapped to the down arrow key."
msgstr "A nakonec ``move_down`` mapované na šipku dolů."

msgid "Your input map tab should look like this:"
msgstr "Záložka mapy vstupu by měla vypadat takto:"

msgid "Click the \"Close\" button to close the project settings."
msgstr "Kliknutím na tlačítko \"Zavřít\" zavřete nastavení projektu."

msgid ""
"We only mapped one key to each input action, but you can map multiple keys, "
"joystick buttons, or mouse buttons to the same input action."
msgstr ""
"Ke každé vstupní akci jsme namapovali pouze jednu klávesu, ale můžete k "
"jedné vstupní akci namapovat více různých kláves, tlačítek joysticku nebo "
"tlačítek myši."

msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""
"Zda je klávesa stisknuta můžete zjistit pomocí funkce "
"``Input.is_action_pressed()`` (\"je akce stisknuta\"), která vrací ``true``, "
"pokud je stisknuta, nebo ``false``, pokud není."

msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""
"Začneme nastavením rychlosti ``velocity`` na ``(0, 0)`` - ve výchozím "
"nastavení by se hráč neměl pohybovat. Pak zkontrolujeme každý vstup a "
"přidáme / odečteme z ``velocity``, abychom získali celkový směr. Pokud "
"například podržíte ``right`` a ``down`` současně, bude výsledný vektor "
"``velocity`` ``(1, 1)``. V tomto případě, protože přidáváme vodorovný a "
"svislý pohyb, by se hráč pohyboval *rychleji* diagonálně, než kdyby se "
"pohyboval vodorovně."

msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"Tomu můžeme zabránit *normalizací* vektoru rychlosti, což znamená, že "
"nastavíme jeho *velikost* na ``1`` a násladně jej vynásobíme velikostí "
"požadované rychlosti. Tím pádem se budeme pohybovat stejně rychle bez ohledu "
"na směr."

msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"Pokud jste nikdy dříve vektorovou matematiku nepoužívali, nebo potřebujete "
"opakování, vysvětlení fungování vektorů v Godotu najdete "
"v :ref:`doc_vector_math`. Je dobré s vektory umět pracovat, ale po zbytek "
"tohoto tutoriálu to nebude nutné."

msgid ""
"We also check whether the player is moving so we can call ``play()`` or "
"``stop()`` on the AnimatedSprite2D."
msgstr ""
"Dále zkontrolujeme, zda se hráč pohybuje, abychom mohli na AnimatedSprite2D "
"(\"2D animovaný sprite\") zavolat ``play()`` (\"přehrávat\") nebo ``stop()`` "
"(\"zastavit\")."

msgid ""
"``$`` is shorthand for ``get_node()``. So in the code above, "
"``$AnimatedSprite2D.play()`` is the same as "
"``get_node(\"AnimatedSprite2D\").play()``."
msgstr ""
"``$`` je zkratka pro ``get_node()`` (\"získat uzel\"). Ve výše uvedeném kódu "
"je tedy ``$AnimatedSprite.play()`` totéž co "
"``get_node(\"AnimatedSprite\").play()``."

msgid ""
"In GDScript, ``$`` returns the node at the relative path from the current "
"node, or returns ``null`` if the node is not found. Since AnimatedSprite2D "
"is a child of the current node, we can use ``$AnimatedSprite2D``."
msgstr ""
"V GDScriptu vrací ``$`` cestu k vzbranému uzlu relativní vzhledem k "
"aktuálnímu uzlu, případně ``null``, pokud uzel nebyl nalezen. Protože "
"AnimatedSprite2D je potomek aktuálního uzlu, můžeme použít "
"``$AnimatedSprite2D``."

msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""
"Nyní když máme směr pohybu, můžeme aktualizovat pozici hráče. Můžeme také "
"použít funkci ``clamp()`` (\"sevřít\"), abychom hráči zabránili opustit "
"obrazovku. *Sevření* hodnoty znamená její omezení na určitý rozsah. Na konec "
"funkce ``_process`` přidejte následující (ujistěte se, že kód není odsazen "
"jako pokračování větve `else`):"

msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"Parametr ``delta`` ve funkci ``_process()`` označuje *délku snímku*, tj. "
"dobu, kterou předchozí snímek potřeboval k dokončení. Použitím této hodnoty "
"zajistíte, že pohyb zůstane konzistentní, i když se změní snímková frekvence."

msgid ""
"Click \"Run Current Scene\" (:kbd:`F6`, :kbd:`Cmd + R` on macOS) and confirm "
"you can move the player around the screen in all directions."
msgstr ""
"Klikněte na \"Spustit aktuální scénu\" (:kbd:`F6`, :kbd:`Cmd + R` v systému "
"MacOS) a ujistěte se, že můžete hráčem posunovat po obrazovce ve všech "
"směrech."

msgid "If you get an error in the \"Debugger\" panel that says"
msgstr "Pokud se v panelu \"Ladění\" zobrazí následující chyba"

msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""
"``Pokus o volání funkce 'play' v základní 'null instance' na null instance``"

msgid ""
"this likely means you spelled the name of the AnimatedSprite2D node wrong. "
"Node names are case-sensitive and ``$NodeName`` must match the name you see "
"in the scene tree."
msgstr ""
"znamená to pravděpodobně, že jste špatně zadali název uzlu AnimatedSprite2D. "
"Názvy uzlů rozlišují velká a malá písmena a ``$NodeName`` musí odpovídat "
"jménu, které vidíte ve stromu scény."

msgid "Choosing animations"
msgstr "Výběr animací"

msgid ""
"Now that the player can move, we need to change which animation the "
"AnimatedSprite2D is playing based on its direction. We have the \"walk\" "
"animation, which shows the player walking to the right. This animation "
"should be flipped horizontally using the ``flip_h`` property for left "
"movement. We also have the \"up\" animation, which should be flipped "
"vertically with ``flip_v`` for downward movement. Let's place this code at "
"the end of the ``_process()`` function:"
msgstr ""
"Nyní když se hráč může pohybovat, musíme změnit podle směru jeho pohybu "
"animaci, kterou AnimatedSprite2D přehrává. Máme animaci \"walk\" (chůze), "
"která ukazuje pohyb hráče doprava, Tato animace by se pro pohyb doleva měla "
"vodorovně převrátit pomocí vlastnosti ``flip_h`` (\"překlopit "
"horizontálně\"). Máme také animaci \"up\", která by se pro pohyb dolů měla "
"svisle převrátit za pomoci ``flip_v`` (\"překlopit vertikálně\"). Přidejme "
"tento kód na konec funkce ``_process()``:"

msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""
"Booleovská přiřazení ve výše uvedeném kódu jsou běžnými zkratkami při "
"programování. Protože provádíme (booleovské) porovnání a následně "
"*přiřazujeme* booleovskou hodnotu, můžeme oba kroky provést současně. "
"Porovnejte tento kód s jednořádkovým přiřazením výše:"

msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr ""
"Spusťte scénu znovu a zkontrolujte, že jsou animace ve všech směrech správné."

msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""
"Častou chybou je nesprávné zadání názvů animací. Názvy animací v panelu "
"Snímky spritu se musí shodovat s těmi, které zadáte v kódu. Pokud jste "
"animaci pojmenovali ``\"Walk\"``, musíte v kódu také použít velké písmeno "
"\"W\"."

msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"Pokud jste si jisti, že pohyb funguje správně, přidejte tento řádek do "
"``_ready ()``, takže hráč bude při spuštění hry skrytý:"

msgid "Preparing for collisions"
msgstr "Příprava na kolize"

msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"Chceme, aby ``Player`` detekoval, když je zasažen nepřítelem, ale zatím jsme "
"žádného nepřítele nevytvořili! To je v pořádku, protože zde použijeme "
"*signály* Godotu."

msgid ""
"Add the following at the top of the script. If you're using GDScript, add it "
"after ``extends Area2D``. If you're using C#, add it after ``public partial "
"class Player : Area2D``:"
msgstr ""
"Přidejte následující kód do horní části skriptu. Pokud používáte GDScript, "
"přidejte jej za ``extends Area2D``. Pokud používáte C#, přidejte jej za "
"``public partial class Player : Area2D``:"

msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"Tímto definujeme vlastní signál nazvaný \"hit\" (zasažen), který náš hráč "
"vyšle, když se srazí s nepřítelem. K detekci kolize použijeme ``Area2D`` "
"(\"2D oblast\"). Vyberte uzel ``Player`` a klikněte na záložku \"Uzel\" "
"vedle záložky Inspektor pro zobrazení signálů, které může hráč vysílat:"

msgid ""
"Notice our custom \"hit\" signal is there as well! Since our enemies are "
"going to be ``RigidBody2D`` nodes, we want the ``body_entered(body: "
"Node2D)`` signal. This signal will be emitted when a body contacts the "
"player. Click \"Connect..\" and the \"Connect a Signal\" window appears."
msgstr ""
"Náš vlastní signál \"hit\" je tam také! Protože našimi nepřáteli budou uzly "
"``RigidBody2D`` (\"2D pevná tělesa\"), chceme signál ``body_entered(body: "
"Node2D)`` (\"těleso vstoupilo\"). Tento signál bude vyslán, když se hráče "
"dotkne libovolné těleso. Klikněte na \"Připojit..\" a zobrazí se okno "
"\"Připojit signál\"."

msgid ""
"Godot will create a function with that exact name directly in script for "
"you. You don't need to change the default settings right now."
msgstr ""
"Godot pro vás vytvoří funkci pojmenovanou přesně takto přímo ve skriptu. V "
"tomto případě není třeba měnit výchozí nastavení."

msgid ""
"If you're using an external text editor (for example, Visual Studio Code), a "
"bug currently prevents Godot from doing so. You'll be sent to your external "
"editor, but the new function won't be there."
msgstr ""
"Pokud používáte externí textový editor (například Visual Studio Code), "
"aktuálně tomuto brání chyba v Godotu. Budete odesláni do externího editoru, "
"ale nová funkce tam nebude."

msgid ""
"In this case, you'll need to write the function yourself into the Player's "
"script file."
msgstr "Napište do Player skriptu funkci sami."

msgid ""
"Note the green icon indicating that a signal is connected to this function; "
"this does not mean the function exists, only that the signal will attempt to "
"connect to a function with that name, so double-check that the spelling of "
"the function matches exactly!"
msgstr ""
"Povšimněte si zelené ikony, která značí, že je k této funkci připojen "
"signál. To neznamená, že funkce existuje, pouze to, že se signál pokusí "
"připojit k funkci s tímto jménem, takže znovu zkontrolujte, zda se název "
"funkce přesně shoduje!"

msgid "Next, add this code to the function:"
msgstr "Dále přidejte do funkce tento kód:"

msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"Pokaždé, když hráče zasáhne nepřítel, signál se vyšle. Abychom signál "
"``hit`` nespustili více než jednou, musíme následně kolize hráče deaktivovat."

msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""
"Deaktivace kolizního tvaru oblasti může způsobit chybu, pokud k ní dojde "
"uprostřed zpracování kolizí enginem. Použití ``set_deferred()`` (\"nastavit "
"odložené\") instruuje Godot, aby s deaktivací tvaru počkal, než to bude "
"bezpečné."

msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr ""
"Nakonec ještě potředbujeme přidat funkci, kterou hráče resetujeme při "
"začátku nové hry."

msgid "With the player working, we'll work on the enemy in the next lesson."
msgstr "S hráčem zprovozněným se v příští lekci zaměříme na nepřítele."
