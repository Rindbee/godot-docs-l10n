#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Bisecting regressions"
msgstr "二分法追蹤迴歸"

msgid ""
"Bisecting is a way to find regressions in software. After reporting a bug on "
"the `Godot repository on GitHub <https://github.com/godotengine/godot>`__, "
"you may be asked by a contributor to *bisect* the issue. Bisecting makes it "
"possible for contributors to fix bugs faster, as they can know in advance "
"which commit caused the regression. Your effort will be widely appreciated :)"
msgstr ""
"二分法（Bisect）是一種用來找出軟體迴歸問題的方法。在 `GitHub 上的 Godot 原始"
"碼庫 <https://github.com/godotengine/godot>`__ 回報錯誤後，貢獻者可能會請你協"
"助進行 *二分法追蹤*。透過這個流程，貢獻者能更快鎖定導致迴歸的 commit，進而加"
"速修復。你的協助將受到大家的感謝 :)"

msgid "The guide below explains how to find a regression by bisecting."
msgstr "以下指南說明如何透過二分法找出迴歸。"

msgid "What is bisecting?"
msgstr "什麼是二分法追蹤？"

msgid ""
"Godot developers use the `Git <https://git-scm.com/>`__ version control "
"system. In the context of Git, bisecting is the process of performing a "
"manual `binary search <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__ to determine when a regression appeared. While "
"it's typically used for bugs, it can also be used to find other kinds of "
"unexpected changes such as performance regressions."
msgstr ""
"Godot 開發者使用 `Git <https://git-scm.com/>`__ 版本控制系統。在 Git 的語境"
"下，二分法（bisect）指的是手動進行 `二元搜尋 <https://zh.wikipedia.org/zh-tw/"
"%E4%BA%8C%E5%88%86%E6%90%9C%E5%B0%8B%E6%BC%94%E7%AE%97%E6%B3%95>`__，找出某個"
"迴歸首次出現的時間點。雖然通常用來追蹤錯誤，這個方法也適用於其他非預期的變"
"動，例如效能下降等。"

msgid "Using official builds to speed up bisecting"
msgstr "使用官方建構版本加快二分法追蹤"

msgid ""
"Project files may be incompatible between Godot versions. **Make a backup of "
"your project** before starting the bisection process."
msgstr "Godot 各版本的專案檔案可能不相容。**請務必在開始追蹤前備份你的專案**。"

msgid ""
"Going from the oldest to the newest build generally reduces the risk of the "
"project not being able to successfully open in the editor, thanks to "
"backwards compatibility. Try to reduce your project to the smallest "
"repeatable example too. The more minimal the project is, the more likely "
"you'll be able to open it without compatibility issues in newer engine "
"versions."
msgstr ""
"由於向下相容性，建議從最舊版本逐步測試到最新版本，這樣較不會遇到專案無法在編"
"輯器開啟的狀況。同時也建議將專案簡化為最小可重現範例，越精簡的專案越不容易遇"
"到相容性問題。"

msgid "The Git bisect command"
msgstr "Git 的 bisect 指令"

msgid ""
"If you've found a build that didn't exhibit the bug in the above testing "
"process, you can now start bisecting the regression. The Git version control "
"system offers a built-in command for this: ``git bisect``. This makes the "
"process semi-automated as you only have to build the engine, run it and try "
"to reproduce the bug."
msgstr ""
"如果在上述測試流程中，你已找到不會出錯的建構版本，便可開始追蹤迴歸。Git 版本"
"控制系統內建 `git bisect` 指令，可將流程半自動化：你只要建構引擎、執行並測試"
"即可。"

msgid ""
"Before bisecting a regression, you need to set up a build environment to "
"compile Godot from source. To do so, read the :ref:`Compiling <toc-devel-"
"compiling>` page for your target platform. (Compiling Godot from source "
"doesn't require C++ programming knowledge.)"
msgstr ""
"在追蹤迴歸前，你必須先建立從原始碼編譯 Godot 的建構環境。請參考目標平台對應"
"的 :ref:`編譯 <toc-devel-compiling>` 頁面。（從原始碼編譯 Godot 不需要 C++ 程"
"式基礎。）"

msgid ""
"Note that compiling Godot can take a while on slow hardware (up an hour for "
"each full rebuild on a slow dual-core CPU). This means the full process can "
"take up to several hours. If your hardware is too slow, you may want to stop "
"there and report the results of your \"pre-bisecting\" on the GitHub issue "
"so another contributor can continue bisecting from there."
msgstr ""
"請注意，若硬體較慢（例如雙核心 CPU），編譯 Godot 可能每次都需要一個小時，全流"
"程甚至耗時數小時。如果你的硬體效能較低，可考慮在這步驟結束，並於 GitHub "
"issue 回報「二分法前」的結果，讓其他貢獻者接續追蹤。"

msgid "Determine the commit hashes"
msgstr "確認 commit 雜湊值"

msgid ""
"To refer to the latest state of the master branch, you can use ``master`` "
"instead of a commit hash. Note that unlike tagged releases or snapshot "
"commit hashes, ``master`` is a perpetually moving target."
msgstr ""
"如需指定 master 分支最新狀態，可直接用 ``master`` 取代 commit 雜湊。請注意，"
"與標籤釋出或快照 commit 不同，``master`` 會隨時變動。"

msgid "Build the engine"
msgstr "建構引擎"

msgid ""
":ref:`Get Godot's source code using Git <doc_getting_source>`. Once this is "
"done, in the terminal window, use ``cd`` to reach the Godot repository "
"folder and enter the following command:"
msgstr ""
":ref:`使用 Git 取得 Godot 原始碼 <doc_getting_source>`。完成後，在終端機視窗"
"用 ``cd`` 切換到 Godot 原始碼資料夾，並輸入下列指令："

msgid "Compile Godot. This assumes you've set up a build environment:"
msgstr "編譯 Godot，此處假設你已建立好建構環境："

msgid "Run the engine"
msgstr "執行引擎"

msgid ""
"Run the binary located in the ``bin/`` folder and try to reproduce the bug."
msgstr "執行 ``bin/`` 資料夾內的二進位檔，並嘗試重現錯誤。"

msgid ""
":ref:`Double-check the output file name "
"<doc_introduction_to_the_buildsystem_resulting_binary>` in ``bin/`` to make "
"sure you're actually running the binary you've just compiled. Different "
"Godot versions will output binaries with different names."
msgstr ""
":ref:`請再次確認的輸出檔名 "
"<doc_introduction_to_the_buildsystem_resulting_binary>` 在 ``bin/`` 內，確保"
"你執行的是剛剛編譯出來的二進位檔。不同版本的 Godot 會產生不同名稱的二進位檔。"

msgid "If the build **still** exhibits the bug, run the following command:"
msgstr "若此建構版本**仍然**有錯誤，請執行以下指令："

msgid "If the build **does not** exhibit the bug, run the following command:"
msgstr "如果此建構版本**沒有**此錯誤，請執行以下指令："

msgid ""
"After entering one of the commands above, Git will switch to a different "
"commit. You should now build Godot again, try to reproduce the bug, then "
"enter ``git bisect good`` or ``git bisect bad`` depending on the result. "
"You'll have to repeat this several times. The longer the commit range, the "
"more steps will be required. 5 to 10 steps are usually sufficient to find "
"most regressions; Git will remind you of the number of steps remaining (in "
"the worst case scenario)."
msgstr ""
"輸入上述任一指令後，Git 會切換到另一個 commit。你需再次建構 Godot、測試是否重"
"現錯誤，並依據結果輸入 ``git bisect good`` 或 ``git bisect bad``。這個流程需"
"重複數次，commit 範圍越大，步驟越多。通常 5 到 10 步就能找出大多數迴歸；Git "
"會提示剩餘步數（最壞情況下）。"

msgid ""
"Once you've completed enough steps, Git will display the commit hash where "
"the regression appeared. Write this commit hash as a comment to the GitHub "
"issue you've bisected. This will help in solving the issue. Thanks again for "
"contributing to Godot :)"
msgstr ""
"當步驟完成後，Git 會顯示該迴歸首次出現的 commit 雜湊值。請把這個雜湊值留言到"
"對應的 GitHub issue，協助問題修復。再次感謝你的貢獻 :)"

msgid ""
"You can read the full documentation on ``git bisect`` `here <https://git-"
"scm.com/docs/git-bisect>`__."
msgstr ""
"你可以在 `這裡 <https://git-scm.com/docs/git-bisect>`__ 參閱完整的 ``git "
"bisect`` 說明文件。"
