#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Pull request review process"
msgstr "Pull Request 審查流程"

msgid ""
"This page is intended to provide insight into the pull request (PR) review "
"process that we aspire to. As such, it is primarily targeted at engine "
"maintainers who are responsible for reviewing and approving pull requests. "
"That being said, much of the content is useful for prospective contributors "
"wanting to know how to ensure that their PR is merged."
msgstr ""
"本頁旨在說明我們期望的 Pull Request（PR）審查流程。主要讀者是負責審查與核准 "
"PR 的引擎維護者。不過，許多內容同樣適用於希望了解如何確保自己 PR 能夠合併的潛"
"在貢獻者。"

msgid ""
"From a high level, the ideal life cycle of a pull request looks like the "
"following:"
msgstr "從整體流程來看，Pull Request 的理想生命週期如下："

msgid ""
"A contributor opens a PR that fixes a specific problem (optimally closing a "
"GitHub `issue <https://github.com/godotengine/godot>`_ or implementing a "
"`proposal <https://github.com/godotengine/godot-proposals>`_)."
msgstr ""
"貢獻者開啟修復特定問題的 PR（最佳情況下同時關閉 GitHub `issue <https://"
"github.com/godotengine/godot>`_ 或實作 `proposal <https://github.com/"
"godotengine/godot-proposals>`_）。"

msgid ""
"Other contributors provide feedback on the PR (including reviewing and/or "
"approving the PR, as appropriate)."
msgstr "其他貢獻者對此 PR 提供回饋（包括進行審查和/或視情況給予核准）。"

msgid ""
"An engine maintainer reviews the code and provides feedback, requests "
"changes, or approves the pull request, as appropriate."
msgstr "引擎維護者審查程式碼，並依需要提供回饋、請求修改或核准該 PR。"

msgid ""
"Another maintainer reviews the code with a focus on code style/clarity and "
"approves it once satisfied."
msgstr "另一位維護者會著重於程式碼風格與可讀性進行審查，滿意後予以核准。"

msgid ""
"A team leader or a member of the `production team <https://godotengine.org/"
"teams#production>`_ merges the pull request if satisfied that it has been "
"sufficiently reviewed."
msgstr ""
"若團隊領導者或 `生產團隊 <https://godotengine.org/teams#production>`_ 成員認"
"為該 PR 已經充分審查，則會執行合併。"

msgid ""
"This document will explain steps 2, 3, 4, and 5 in more detail. For a more "
"detailed explanation of the pull request workflow please see the :ref:`pull "
"request workflow document <doc_pr_workflow>`."
msgstr ""
"本文件將更詳細說明步驟 2、3、4 和 5。若需更完整的 PR 工作流程說明，請參"
"閱 :ref:`拉取請求工作流程文件 <doc_pr_workflow>`。"

msgid ""
"In practice these steps may blend together. Oftentimes maintainers will "
"provide comments on code style and code quality at the same time and will "
"approve a pull request for both."
msgstr ""
"實務上，這些步驟可能同時進行。維護者常常會同時針對程式碼風格與品質給予意見，"
"並一併核准 PR。"

msgid ""
"Typically the first interaction on a pull request will be an engine "
"maintainer assigning tags to the pull request and flagging it for review by "
"someone familiar with that area of code."
msgstr ""
"通常，Pull Request 的第一步是引擎維護者指派標籤，並標記給熟悉該程式碼區域的人"
"員進行審查。"

msgid ""
"Engine maintainers are folks who are \"members\" of the Godot project "
"repository on GitHub and/or are listed on the `Teams page <https://"
"godotengine.org/teams>`_ on the Godot website. Maintainers are responsible "
"for a given area of the engine. Typically this means they are the people who "
"are given more trust to approve and recommend pull requests for merging."
msgstr ""
"引擎維護者是指在 GitHub Godot 專案儲存庫內的「成員」及/或於 Godot 網站 `團隊"
"頁面 <https://godotengine.org/teams>`_ 上所列的人員。維護者負責引擎的特定區"
"塊。一般來說，他們擁有較高信任度，可以核准及推薦 PR 合併。"

msgid ""
"Even if you are not a maintainer, you can still help by reviewing code, "
"providing feedback on PRs and testing PRs locally on your machine to confirm "
"that they work as intended. Many of the currently active maintainers started "
"out doing this before they became maintainers."
msgstr ""
"即使不是維護者，您仍然可以協助：審查程式碼、對 PR 提出回饋，並在本機測試 PR "
"以確認其運作符合預期。許多現任維護者在成為維護者之前，都是這樣開始貢獻的。"

msgid "Code review and testing"
msgstr "程式碼審查與測試"

msgid ""
"The following is a list of things that contributors and engine maintainers "
"can do to conduct a substantive code review of a pull request."
msgstr "以下是貢獻者與引擎維護者在進行實質程式碼審查時可執行的事項。"

msgid ""
"If you want to conduct a code review, but can't do everything on this list, "
"say that in your review comment. For example, it is still very helpful to "
"provide comments on code, even if you can't build the pull request locally "
"to test the pull request (or vice versa). Feel free to review the code, just "
"remember to make a note at the end of your review that you have reviewed the "
"code only and have not tested the changes locally."
msgstr ""
"如果您希望進行程式碼審查，但無法完成清單上的所有項目，請在審查留言中註明。例"
"如，即使您無法在本機編譯並測試該 PR，僅針對程式碼本身給予意見也相當有幫助。請"
"放心進行審查，只要在最後註明您僅檢查了程式碼，尚未在本地測試變更即可。"

msgid "1. Confirm that the problem exists"
msgstr "1. 確認問題存在"

msgid ""
"PRs need to solve problems and problems need to be documented. Make sure "
"that the pull request links and closes (or at least addresses) a bug or a "
"proposal. If it doesn't, consider asking the contributor to update the "
"opening message of the PR to explain the problem that the PR aims to solve "
"in more detail."
msgstr ""
"每個 PR 都必須解決一個具體問題，且該問題需有記錄。請確認該 PR 有連結並關閉"
"（或至少處理）一個錯誤或建議。如果沒有，請考慮要求貢獻者補充 PR 開頭說明，詳"
"細描述該 PR 旨在解決的問題。"

msgid ""
"It should be clear _why_ a pull request is needed before it is merged. This "
"assists reviewers in determining whether a PR does what it says it does and "
"it helps contributors in the future understand why the code is the way it is."
msgstr ""
"在合併前，必須清楚說明_為什麼_需要這個 PR。這有助於審查者判斷 PR 是否如其所述"
"解決問題，也能讓日後的貢獻者理解程式碼這樣設計的原因。"

msgid "2. Test the PR and look for regressions"
msgstr "2. 測試 PR 並檢查是否有回歸（Regression）"

msgid ""
"While strict code review and CI help to ensure that all pull requests work "
"as intended, mistakes happen and sometimes contributors push code that "
"creates a problem in addition to solving a problem. Maintainers will avoid "
"merging code that contains a regression even if it solves the problem as "
"intended."
msgstr ""
"即使有嚴格的程式碼審查與 CI，難免會有錯誤，有時貢獻者的修正同時也產生了新問"
"題。維護者應避免合併出現 Regression 的程式碼，即使該 PR 原本解決了既有問題。"

msgid ""
"When reviewing a pull request, ensure that the PR does what it says it does "
"(i.e. fixes the linked bug or implements the new feature) and nothing "
"outside of the PR target area is broken by the change. You can do this by "
"running the editor and trying out some common functions of the editor "
"(adding objects to a scene, running GDScript, opening and closing menus "
"etc.). Also, while reviewing the code, look for suspicious changes in other "
"parts of the engine. Sometimes during rebasing changes slip through that "
"contributors are not aware of."
msgstr ""
"審查 PR 時，請確認它確實完成所述目標（例如修正指定錯誤或實作新功能），而且不"
"會導致目標範圍外的其他功能出現問題。您可以開啟編輯器，嘗試常見功能（新增場景"
"物件、執行 GDScript、開關選單等）來驗證。此外，也請特別留意程式碼中是否有引擎"
"其他部分被意外更動，有時變基（rebase）過程中可能會夾帶不預期的修改。"

msgid "3. Do a code review"
msgstr "3. 進行程式碼審查"

msgid ""
"Code reviews are usually done by people who are already experienced in a "
"given area. They may be able to provide ideas to make code faster, more "
"organized, or more idiomatic. But, even if you are not very experienced, you "
"may want to conduct a code review to provide feedback within the scope of "
"what you are comfortable reviewing. Doing so is valuable for the area "
"maintainer (as a second set of eyes on a problem is always helpful) and it "
"is also helpful for you as it will help you get more familiar with that area "
"of code and will expose you to how other people solve problems. In fact, "
"reviewing the code of experienced engine maintainers is a great way to get "
"to know the codebase."
msgstr ""
"程式碼審查通常由熟悉該領域的人進行，他們能夠提供讓程式碼更快、更有條理或更貼"
"近慣用寫法的建議。不過，即使您經驗尚淺，也可以針對自己有把握的範圍進行審查並"
"給予回饋。這不僅對維護者有幫助（多一雙眼睛總是好的），對您自己而言也能加深對"
"該區域程式碼的了解，看見他人如何解決問題。事實上，閱讀資深維護者的程式碼，是"
"認識整個程式碼庫的好方法。"

msgid ""
"Here are some things to think about and look out for as you review the code:"
msgstr "進行程式碼審查時，請特別留意以下事項："

msgid ""
"**Code only touches the areas announced in the PR (and the commit message).**"
msgstr "**程式碼僅影響 PR（及其提交說明）所描述的區域。**"

msgid ""
"It can be tempting to fix random things in the code, as you see them. "
"However, this can quickly make a pull request difficult to review and can "
"make it hard to dig through in the commit history. Small touch-ups next to "
"the related area are alright, but often bugs that you can find along the way "
"are better fixed in their own PRs."
msgstr ""
"審查時看到順手可修的小錯誤很容易就順便修正，但這樣會讓 PR 變得難以審查，也增"
"加日後追查歷史紀錄的困難。相關區域的小幅修正可以接受，但若發現與此 PR 無關的 "
"Bug，建議另開新 PR 處理。"

msgid "**Code properly uses Godot's own APIs and patterns.**"
msgstr "**程式碼確實遵循 Godot 的 API 與設計模式。**"

msgid ""
"Consistency is very important, and a solution that already exists in the "
"codebase is preferable to an ad-hoc solution."
msgstr "一致性很重要，優先採用程式庫中現有的解法，而非臨時針對個案的寫法。"

msgid "**Are core areas affected by the change?**"
msgstr "**這項修改是否影響到核心區域？**"

msgid ""
"Sometimes a PR that is supposed to solve a local problem can have a far-"
"reaching effect way outside of its scope. Usually it is best to keep code "
"changes local to where the problem arises. If you think that the solution "
"requires changes outside the scope of the problem, it is usually best to "
"seek the opinion of a team leader who may have another idea for how to solve "
"the problem."
msgstr ""
"有時，原本只想修某個小問題，卻不小心影響到系統其他區塊。通常最好讓變更只限於"
"原問題區域。如果覺得解法會牽涉到其他區域，建議先詢問團隊領導者意見，也許他們"
"有不同的處理方式。"

msgid "4. Iterate with the contributor and improve the PR"
msgstr "4. 與貢獻者反覆修正並改進 PR"

msgid ""
"Maintainers should provide feedback and suggestions for improvement if they "
"spot things in the code that they would like changed. Preferably, "
"suggestions should come in order of importance: first, address overall code "
"design and the approach to solving the problem, then make sure the code is "
"complying with the engine's best practices, and lastly, do the :ref:`code "
"style review <doc_code_style_review>`."
msgstr ""
"維護者若發現程式碼有需要調整之處，應提供回饋與改進建議。建議依重要性排序：先"
"處理整體設計與解法，再確認程式碼是否符合引擎最佳實踐，最後才進行 :ref:`程式碼"
"風格審查 <doc_code_style_review>`。"

msgid "**Communicate barriers to merging early in the review process.**"
msgstr "**在審查流程初期就明確溝通合併的阻礙。**"

msgid ""
"If the PR has clear blockers or will likely not get merged for whatever "
"other reason, that fact should be communicated as early and clearly as "
"possible. We want to avoid stringing people along because it feels bad to "
"say \"sorry, no\"."
msgstr ""
"若 PR 存在明顯阻礙或因其他原因不太可能被合併，請儘早明確告知。我們不希望讓人"
"空等，只因為不敢早說「很抱歉，這不行」。"

msgid ""
"As you review pull requests, keep the Godot `Code of Conduct <https://"
"godotengine.org/code-of-conduct>`_ in mind. Especially the following:"
msgstr ""
"審查 PR 時，請謹記 Godot `行為準則 <https://godotengine.org/code-of-"
"conduct>`_ ，特別注意以下幾點："

msgid "Politeness is expected at all times. Be kind and courteous."
msgstr "請始終保持禮貌，友善且尊重他人。"

msgid "Always assume positive intent from others."
msgstr "請永遠假設他人出於善意。"

msgid "Feedback is always welcome, but keep your criticism constructive."
msgstr "任何回饋都非常歡迎，但請保持批評具建設性。"

msgid ""
"Here are some things to avoid as you iterate on a pull request with a "
"contributor:"
msgstr "在與貢獻者反覆修正 PR 時，請避免以下情況："

msgid "**Needless double reviews.**"
msgstr "**不必要的多次重複審查。**"

msgid ""
"In other words, review the full PR at once and avoid coming back endless "
"times to point out issues that you could have noted in the first review. Of "
"course, this can't always be avoided, but we should try to catch everything "
"at once."
msgstr ""
"也就是說，盡可能一次性完整審查 PR，避免多次回來重複指出第一次就能發現的問題。"
"雖然有時難以避免，但還是要盡量一次性檢查清楚。"

msgid "**Being overly nitpicky.**"
msgstr "**過度吹毛求疵。**"

msgid ""
"Code quality can be flexible depending on the area of the engine you are "
"working in. In general, our standard for code quality is much higher in core "
"areas and in performance-sensitive areas than it is in editor code for "
"example."
msgstr ""
"程式碼品質標準可視所屬引擎區域彈性調整。一般來說，核心區域及效能敏感區的品質"
"標準遠高於編輯器本身的程式碼。"

msgid "**Expanding the scope of a pull request.**"
msgstr "**擴大 PR 範圍。**"

msgid ""
"Providing context or related/similar issues or proposals that may be fixed "
"similarly can be helpful, but adding a \"may as well fix that thing over "
"there as well while at it\" or \"could we add to this as well?\" isn't "
"always fair to the contributor. Use your judgement when deciding whether "
"additional fixes are within scope, but try to keep the scope as close to the "
"original pull request as possible."
msgstr ""
"提供相關背景、類似問題或建議有助於討論，但要求「順便把那邊也修掉」或「能不能"
"也加上這個」對貢獻者並不公平。請自行判斷額外修正是否屬於本 PR 範圍，盡量讓內"
"容聚焦於原始 PR。"

msgid ""
"And ultimately, don't feel pressured to deal with the PR all alone. Feel "
"free to ask for a helping hand on the `Godot Contributors Chat <https://"
"chat.godotengine.org>`_, in the appropriate channel or in #general. Other "
"teams may already be tagged for review, so you can also wait or ask for "
"their assistance."
msgstr ""
"最重要的是，不必一個人獨自處理 PR。可以隨時在 `Godot 貢獻者聊天室 <https://"
"chat.godotengine.org>`_ 的適當頻道或 #general 尋求協助。其他團隊可能已標記待"
"審查，也可以等候或主動請求他們幫忙。"

msgid "5. Approve the pull request"
msgstr "5. 核准 PR"

msgid ""
"After reviewing the code, if you think that the code is ready to be merged "
"into the engine, then go ahead and \"approve\" it. Make sure to also comment "
"and specify the nature of your review (i.e. say whether you ran the code "
"locally, whether you reviewed for style as well as correctness, etc.). Even "
"if you are not an engine maintainer, approving a pull request signals to "
"others that the code is good and likely solves the problem the PR says it "
"does. Approving a pull request as a non-engine maintainer does not guarantee "
"that the code will be merged, other people will still review it, so don't be "
"shy."
msgstr ""
"審查完畢，若認為程式碼已可合併進引擎，請點選「核准」。同時請留言說明您的審查"
"內容（例如：是否有在本機執行、是否檢查了風格與正確性等）。即使不是引擎維護"
"者，通過 PR 也能讓其他人知道這份程式碼有品質、確實解決了 PR 所述問題。非維護"
"者的核准不保證一定會合併，仍會有其他人再審查，所以不必害羞。"

msgid "Code style review"
msgstr "程式碼風格審查"

msgid ""
"Generally speaking, we aim to conduct a code review before a style/clarity "
"review as contributors typically want to know if their general approach is "
"acceptable before putting in the effort to make nitpicky changes to style. "
"In other words, maintainers shouldn't ask contributors to change the style "
"of code that may need to be rewritten in subsequent reviews. Similarly, "
"maintainers should avoid asking for contributors to rebase PRs if the PR has "
"not been reviewed."
msgstr ""
"一般來說，我們會先進行程式碼邏輯審查，再進行風格與可讀性審查，因為貢獻者通常"
"希望先確認整體思路可行，再花力氣微調風格。換句話說，維護者不該要求貢獻者修改"
"可能還需大幅重寫的程式碼風格。同樣，PR 尚未審查前，應避免要求貢獻者 rebase。"

msgid ""
"That being said, not everyone feels confident enough to provide a review on "
"code correctness, in that case, providing comments on code style and clarity "
"ahead of a more substantive code review is totally appropriate and more than "
"welcome."
msgstr ""
"話雖如此，不是每個人都能對程式碼正確性下判斷，因此在進行更深入審查前，先給予"
"風格與可讀性意見也是完全可以且非常歡迎的。"

msgid ""
"In practice the code style review can be done as part of the substantive "
"code review. The important thing is that both the substantive code and the "
"code style need to be reviewed and considered before a pull request is "
"merged."
msgstr ""
"實務上，程式碼風格審查可以與邏輯審查同時進行。重點是，合併 PR 前，必須同時審"
"查其功能與風格。"

msgid ""
"When reviewing code style pay particular attention to ensuring that the pull "
"request follows the :ref:`doc_code_style_guidelines`. While ``clang-format`` "
"and various CI checks can catch a lot of inconsistencies, they are far from "
"perfect and are unable to detect some issues. For example, you should check "
"that:"
msgstr ""
"審查程式碼風格時，請特別確認 PR 是否有遵循 :ref:`doc_code_style_guidelines`。"
"雖然 `clang-format` 和各種 CI 檢查能抓出許多不一致之處，但仍有盲點。例如，您"
"應檢查："

msgid "The style of header includes is respected."
msgstr "是否正確包含標頭檔案。"

msgid "Identifiers use ``snake_case`` and follow our naming conventions."
msgstr "識別名稱是否採用 ``snake_case`` 並遵循命名慣例。"

msgid ""
"Method parameters start with ``p_*`` or ``r_*`` (if they are used to return "
"a value)."
msgstr "方法參數是否以 ``p_*`` 或 ``r_*`` 開頭（用於傳回值時）。"

msgid "Braces are used appropriately, even for one-liner conditionals."
msgstr "大括號是否正確使用，即便是單行條件式也要加上。"

msgid ""
"Code is properly spaced (exactly one empty line between methods, no "
"unnecessary empty lines inside of method bodies)."
msgstr "程式碼間距是否適當（方法間僅有一行空白，方法內容內不應有多餘空白行）。"

msgid ""
"This list is not complete and doesn't aim to be complete. Refer to the "
"linked style guide document for a complete set of rules. Keep in mind that "
"``clang-format`` may not catch things you hope it would, so pay attention "
"and try to build a sense of what exactly it can and cannot detect."
msgstr ""
"這個清單並不完整，詳細規則請參照連結的風格指南。請注意，`clang-format` 有它的"
"侷限，無法抓出所有問題，請多加留意並累積經驗。"

msgid "Merging pull requests"
msgstr "合併 Pull Request"

msgid ""
"In general, pull requests should only be merged by members of the production "
"team or team leaders for pull requests in their area of the engine. For "
"example, the networking team leader could merge a networking pull request "
"that doesn't substantially change non-networking sections of code."
msgstr ""
"一般來說，只有生產團隊成員或各區塊負責的團隊領導者，才能合併屬於自己負責範圍"
"的 Pull Request。例如，網路團隊領導者可以合併僅變更網路相關、不影響其他區塊"
"的 PR。"

msgid ""
"In practice it is best to wait for a member of the production team to merge "
"the pull request as they keep a close eye on the entire codebase and will "
"likely have a better sense of what other recent/upcoming changes this pull "
"request may conflict with (or any other reason that it may make sense to "
"delay the pull request). Feel free to leave a comment saying that the PR "
"should be ready to merge."
msgstr ""
"實務上，建議由生產團隊成員來負責合併 PR，因為他們比較熟悉整體程式碼庫，能判斷"
"此 PR 是否會與近期或即將進來的變更衝突（或有其他暫緩合併的理由）。如果您認為 "
"PR 已準備好合併，也可以留言提醒。"

msgid ""
"The following are the steps to take before merging a pull request. The "
"degree to which you adhere to these steps can be flexible for simple/"
"straightforward pull requests, but they should be carefully taken for "
"complex or risky pull requests."
msgstr ""
"以下是在合併 Pull Request 前需進行的步驟。對於簡單直接的 PR，可以彈性處理，但"
"遇到複雜或高風險的 PR 時，請務必嚴格遵循。"

msgid ""
"As a contributor you can help move a pull request forward by doing some of "
"these steps yourself."
msgstr "作為貢獻者，您也可以自行完成部分步驟，加速 PR 推進。"

msgid "1. Get feedback from the right people/teams"
msgstr "1. 徵詢正確人員／團隊的回饋"

msgid ""
"Production team members should ensure that the right people look at a pull "
"request before it is merged. In some cases this may require multiple people "
"to weigh in. In other cases, only one substantive approval is needed before "
"the code can be merged."
msgstr ""
"生產團隊成員應確保相關領域的適當人員有審查該 PR。部分情況需多位人員共同評估，"
"有些則只需一名專業維護者核准即可。"

msgid ""
"In general, try not to merge things based on one review alone, especially if "
"it is your own. Get a second opinion from another maintainer, and make sure "
"all the teams that may be impacted have been reasonably represented by the "
"reviewers. For example, if a pull request adds to the documentation, it's "
"often useful to let the area maintainers check it for factual correctness "
"and let documentation maintainers check it for formatting, style, and "
"grammar."
msgstr ""
"通常不要僅靠一人（尤其是自己本身）的審查就合併 PR，建議徵詢另一位維護者意見，"
"並確保所有受影響的團隊都有人參與審查。例如，若 PR 涉及文件，讓負責該功能區域"
"的維護者檢查內容正確性，讓文件維護者檢查格式、語法與風格都很重要。"

msgid ""
"A good rule of thumb is that at least one subject matter expert should have "
"approved the pull request for correctness, and at least one other maintainer "
"should have approved the pull request for code style. Either of those people "
"could be the person merging the pull request."
msgstr ""
"一個好的原則是，至少有一位專業領域維護者核准其功能正確性，另有一位維護者核准"
"其程式碼風格。這兩者皆可負責最終合併。"

msgid ""
"Make sure that the reviews and approvals were left by people competent in "
"that specific engine area. It is possible that even a long-standing member "
"of the Godot organization left a review without having the relevant "
"expertise."
msgstr ""
"務必確認審查與核准來自該功能區域的專業維護者。有時即使是資深成員，也可能因不"
"熟悉該領域而留下一般性審查意見。"

msgid ""
"An easy way to find PRs that may be ready for merging is filtering by "
"approved PRs and sorting by recently updated. For example, in the main Godot "
"repository, you can use `this link <https://github.com/godotengine/godot/"
"pulls?q=is%3Apr+is%3Aopen+review%3Aapproved+sort%3Aupdated-desc>`_."
msgstr ""
"要找出已準備好合併的 PR，可以篩選「已核准」並按「最近更新」排序。在主 Godot "
"儲存庫可使用 `這個連結 <https://github.com/godotengine/godot/pulls?"
"q=is%3Apr+is%3Aopen+review%3Aapproved+sort%3Aupdated-desc>`_ 。"

msgid "2. Get feedback from the community"
msgstr "2. 徵詢社群回饋"

msgid ""
"If a pull request is having trouble attracting reviewers, you may need to "
"reach out more broadly to ask for help reviewing. Consider asking:"
msgstr "若 PR 難以吸引審查者，建議擴大範圍主動徵求協助，可詢問："

msgid ""
"the person who reported the bug if the pull request fixes the bug for them,"
msgstr "回報此錯誤的人，詢問此 PR 是否已解決他們的問題，"

msgid ""
"contributors who have recently edited that file if they could take a look, or"
msgstr "最近編輯過該檔案的貢獻者，是否能幫忙看一下，或"

msgid ""
"a more experienced maintainer from another area if they could provide "
"feedback."
msgstr "其他領域較有經驗的維護者，是否能給予意見。"

msgid "3. Git checklist"
msgstr "3. Git 注意事項"

msgid "**Make sure that the PR comes in one commit.**"
msgstr "**確保 PR 僅有一個提交（commit）。**"

msgid ""
"When each commit is self-contained and could be used to build a clean and "
"working version of the engine, it may be okay to merge a pull request with "
"multiple commits, but in general, we require that all pull requests only "
"have one commit. This helps us keep the Git history clean."
msgstr ""
"若每個提交都自成一體、可單獨構建出可運作的引擎版本，合併多提交 PR 亦可接受。"
"但一般來說，所有 PR 建議僅保留一個提交，以維持 Git 歷史清晰。"

msgid ""
"**Fixes made during the review process must be squashed into the main "
"commit.**"
msgstr "**審查期間的修正需 Squash 合併到主提交。**"

msgid ""
"For multi-commit PRs check that those fixes are amended in the relevant "
"commits, and are not just applied on top of everything."
msgstr ""
"對於多提交的 PR，請確認修正已合併到正確的提交中，而非僅在最上層再補一個修正。"

msgid "**Make sure that the PR has no merge conflicts.**"
msgstr "**確保 PR 沒有合併衝突。**"

msgid ""
"Contributors may need to rebase their changes on top of the relevant branch "
"(e.g. ``master`` or ``3.x``) and manually fix merge conflicts. Even if there "
"are no merge conflicts, contributors may need to rebase especially old PRs "
"as the GitHub conflict checker may not catch all conflicts, or the CI may "
"have changed since it was originally run."
msgstr ""
"貢獻者可能需要將更動 rebase 到適當分支（如 ``master`` 或 ``3.x``），並手動解"
"決合併衝突。即使未顯示有衝突，特別是舊 PR，還是建議 rebase 一次，因為 GitHub "
"的衝突檢查不一定能抓到所有問題，CI 流程也可能已更新。"

msgid "**Check for proper commit attribution.**"
msgstr "**檢查提交（commit）歸屬正確。**"

msgid ""
"If a contributor uses an author signature that is not listed in their GitHub "
"account, GitHub won't link the merged pull request to their account. This "
"keeps them from getting proper credit in the GitHub history and makes them "
"appear like a new contributor on the GitHub UI even after several "
"contributions."
msgstr ""
"若貢獻者的提交簽名未與其 GitHub 帳號綁定，GitHub 將無法將合併後的 PR 正確連結"
"至他們帳號，如此他們在貢獻歷史中無法獲得正確歸屬，UI 也會將其視為新貢獻者。"

msgid ""
"Ultimately, it's up to the user if they want to fix it, but they can do so "
"by authoring the Git commit with the same email they use for their GitHub "
"account, or by adding the email they used for the Git commit to their GitHub "
"profile."
msgstr ""
"最終是否要修正取決於使用者自己，他們可以用與 GitHub 帳戶相同的 email 簽署提"
"交，或將該 email 加入 GitHub 個人檔案。"

msgid "**Check for proper commit messages.**"
msgstr "**檢查提交訊息是否合適。**"

msgid ""
"While we don't have a very strict ruleset for commit messages, we still "
"require them to be short yet descriptive and use proper English. As a "
"maintainer you've probably written them enough times to know how to make "
"one, but for a general template think about *\"Fix <issue> in <part of "
"codebase>\"*. For a more detailed recommendation see the `contributing.md "
"<https://github.com/godotengine/godot/blob/master/CONTRIBUTING.md#format-"
"your-commit-messages-with-readability-in-mind>`_ page in the main Godot "
"repository."
msgstr ""
"雖然我們對提交訊息沒有硬性規範，但仍需言簡意賅、具描述性，並使用正確英文。維"
"護者應該很熟練，通用範例如：*「Fix <issue> in <part of codebase>」*。更詳細建"
"議請見主儲存庫的 `contributing.md <https://github.com/godotengine/godot/blob/"
"master/CONTRIBUTING.md#format-your-commit-messages-with-readability-in-"
"mind>`_。"

msgid "4. GitHub checklist"
msgstr "4. GitHub 注意事項"

msgid "**Validate the target branch of the PR.**"
msgstr "**確認 PR 目標分支。**"

msgid ""
"Most Godot development happens around in the ``master`` branch. Therefore "
"most pull requests must be made against it. From there pull requests can "
"then be backported to other branches. Be wary of people making PRs on the "
"version they are using (e.g, ``3.3``) and guide them to make a change "
"against a higher-order branch (e.g. ``3.x``). If the change is not "
"applicable for the ``master`` branch, the initial PR can be made against the "
"current maintenance branch, such as ``3.x``. It's okay for people to make "
"multiple PRs for each target branch, especially if the changes cannot be "
"easily backported. Cherry-picking is also an option, if possible. Use the "
"appropriate labels if the PR can be cherrypicked (e.g. ``cherrypick:3.x``)."
msgstr ""
"大多數 Godot 開發都以 ``master`` 分支為主，因此大部分 PR 都應該針對該分支提"
"出，然後再視需要回溯合併到其他分支。需留意有人會針對自己使用的版本（如 "
"``3.3``）發 PR，應指引他們改為針對更高階分支（如 ``3.x``）。若變更不適用於 "
"``master``，可直接針對目前維護的分支（如 ``3.x``）發 PR。針對多個目標分支各自"
"開 PR 也是可以的，尤其當變更難以直接回溯時。也可進行 cherry-pick，若適用請加"
"上相對應的標籤（如 ``cherrypick:3.x``）。"

msgid ""
"It is possible to change the target branch of the PR, that has already been "
"submitted, but be aware of the consequences. As it cannot be synchronized "
"with the push, the target branch change will inevitable tag the entire list "
"of maintainers for review. It may also render the CI incapable of running "
"properly. A push should help with that, but if nothing else, recommend "
"opening a new, fresh PR."
msgstr ""
"已送出的 PR 可以變更目標分支，但要注意後果。這種變更無法與推送同步，會導致所"
"有維護者都被標記需要審查，也可能造成 CI 無法正常運作。推送更新後通常能解決，"
"但若問題持續，建議直接重開新 PR。"

msgid "**Make sure that the appropriate milestone is assigned.**"
msgstr "**確認已指派正確的里程碑。**"

msgid ""
"This will make it more obvious which version would include the submitted "
"changes, should the pull request be merged now. Note, that the milestone is "
"not a binding contract and does not guarantee that this version is "
"definitely going to include the PR. If the pull request is not merged before "
"the version is released, the milestone will be moved (and the PR itself may "
"require a target branch change)."
msgstr ""
"這樣能讓大家清楚該 PR 若合併，會納入哪個版本。請注意，里程碑僅供參考，無法保"
"證該版本一定會包含此 PR。若 PR 未能及時合併，里程碑會被調整（PR 本身也可能需"
"要更換目標分支）。"

msgid ""
"Similarly, when merging a PR with a higher milestone than the current "
"version, or a \"wildcard\" milestone (e.g. \"4.x\"), ensure to update the "
"milestone to the current version."
msgstr ""
"同理，若合併 PR 時其里程碑高於目前版本，或設為「*」（如「4.x」），請記得將其"
"更新為目前版本。"

msgid ""
"**Make sure that the opening message of the PR contains the magic words "
"\"Closes #...\" or \"Fixes #...\".**"
msgstr "**確認 PR 開頭訊息包含「Closes #...」或「Fixes #...」等關鍵字。**"

msgid ""
"These link the PR and the referenced issue together and allow GitHub to auto-"
"close the latter when you merge the changes. Note, that this only works for "
"the PRs that target the ``master`` branch. For others you need to pay "
"attention and close the related issues manually. Do it with *\"Fixed by #..."
"\"* or *\"Resolved by #...\"* comment to clearly indicate the act for future "
"contributors."
msgstr ""
"這能將 PR 與 Issue 連結，合併時 GitHub 會自動關閉對應 Issue。注意：僅針對 "
"``master`` 分支的 PR 可自動關閉，其他分支需手動關閉 Issue。請留言註明 *"
"「Fixed by #...」* 或 *「Resolved by #...」*，方便未來查閱。"

msgid ""
"**For the issues that get closed by the PR add the closest relevant "
"milestone.**"
msgstr "**為 PR 關閉的 Issue 加上對應的最近里程碑。**"

msgid ""
"In other words, if the PR is targeting the ``master`` branch, but is then "
"also cherrypicked for ``3.x``, the next ``3.x`` release would be the "
"appropriate milestone for the closed issue."
msgstr ""
"換句話說，若 PR 目標是 ``master``，但之後有 cherry-pick 到 ``3.x``，則對應 "
"Issue 的里程碑應設為下一個 ``3.x`` 發行版本。"

msgid "5. Merge the pull request"
msgstr "5. 合併 PR"

msgid ""
"If it is appropriate for you to be merging a pull request (i.e. you are on "
"the production team or you are the team leader for that area), you are "
"confident that the pull request has been sufficiently reviewed, and once you "
"carry out these steps you can go ahead and merge the pull request."
msgstr ""
"如果您身分合適（如生產團隊成員或該區塊負責人），且確認 PR 已充分審查，經上述"
"步驟即可進行合併。"
