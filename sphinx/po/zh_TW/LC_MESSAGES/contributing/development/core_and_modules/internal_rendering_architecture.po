#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Internal rendering architecture"
msgstr "內部算繪架構"

msgid ""
"This page is a high-level overview of Godot 4's internal renderer design. It "
"does not apply to previous Godot versions."
msgstr "本頁提供 Godot 4 內部算繪器設計的高階綜覽，內容不適用於舊版 Godot。"

msgid ""
"The goal of this page is to document design decisions taken to best "
"suit :ref:`Godot's design philosophy "
"<doc_best_practices_for_engine_contributors>`, while providing a starting "
"point for new rendering contributors."
msgstr ""
"本頁目標是記錄為了符合 :ref:`Godot 設計理念 "
"<doc_best_practices_for_engine_contributors>` 所做的設計決策，同時為新的算繪"
"貢獻者提供入門說明。"

msgid ""
"If you have questions about rendering internals not answered here, feel free "
"to ask in the ``#rendering`` channel of the `Godot Contributors Chat "
"<https://chat.godotengine.org/channel/rendering>`__."
msgstr ""
"若你有關於算繪內部原理的問題未在此解答，歡迎加入 `Godot 貢獻者聊天室 "
"<https://chat.godotengine.org/channel/rendering>`__ 的 ``#rendering`` 頻道提"
"問。"

msgid ""
"If you have difficulty understanding concepts on this page, it is "
"recommended to go through an OpenGL tutorial such as `LearnOpenGL <https://"
"learnopengl.com/>`__."
msgstr ""
"若你在理解本頁內容時遇到困難，建議先參閱 `LearnOpenGL <https://"
"learnopengl.com/>`__ 等 OpenGL 教學資源。"

msgid ""
"Modern low-level APIs (Vulkan/Direct3D 12/Metal) require intermediate "
"knowledge of higher-level APIs (OpenGL/Direct3D 11) to be used effectively. "
"Thankfully, contributors rarely need to work directly with low-level APIs. "
"Godot's renderers are built entirely on OpenGL and RenderingDevice, which is "
"our abstraction over Vulkan/Direct3D 12/Metal."
msgstr ""
"現代低階 API（如 Vulkan、Direct3D 12、Metal）要能有效使用，需具備中等以上的高"
"階 API（如 OpenGL、Direct3D 11）知識。幸好，貢獻者很少需要直接操作這些底層 "
"API。Godot 的算繪器完全建立在 OpenGL 與 RenderingDevice 之上，後者是針對 "
"Vulkan／Direct3D 12／Metal 的抽象層。"

msgid "Rendering methods"
msgstr "算繪方法"

msgid "Forward+"
msgstr "Forward+"

msgid ""
"This is a forward renderer that uses a *clustered* approach to lighting."
msgstr "這是一個採用*集群式*光源處理的前向算繪器（Forward Renderer）。"

msgid ""
"Clustered lighting uses a compute shader to group lights into a 3D frustum "
"aligned grid. Then, at render time, pixels can lookup what lights affect the "
"grid cell they are in and only run light calculations for lights that might "
"affect that pixel."
msgstr ""
"集群光照會以運算著色器將燈光分組到 3D 視錐體對齊的格點內。算繪時，像素會查詢"
"其所在柵格受哪些燈光影響，僅針對這些燈光進行光照運算。"

msgid ""
"This approach can greatly speed up rendering performance on desktop "
"hardware, but is substantially less efficient on mobile."
msgstr "這種方法能大幅提升桌面硬體的算繪效能，但在行動裝置上效率則較低。"

msgid "Mobile"
msgstr "行動裝置"

msgid ""
"This is a forward renderer that uses a traditional single-pass approach to "
"lighting. Internally, it is called **Forward Mobile**."
msgstr ""
"這是一個前向算繪器，採用傳統的單通道光照方法。在內部稱為 **Forward Mobile**。"

msgid ""
"Intended for mobile platforms, but can also run on desktop platforms. This "
"rendering method is optimized to perform well on mobile GPUs. Mobile GPUs "
"have a very different architecture compared to desktop GPUs due to their "
"unique constraints around battery usage, heat, and overall bandwidth "
"limitations of reading and writing data. Compute shaders also have very "
"limited support or aren't supported at all. As a result, the mobile renderer "
"purely uses raster-based shaders (fragment/vertex)."
msgstr ""
"本方法主要針對行動平臺設計，但同樣可於桌面平臺執行。其針對行動 GPU 進行優化，"
"由於行動 GPU 在耗電、散熱與資料頻寬等條件和桌面 GPU 差異極大，因此對計算著色"
"器支援通常有限甚至完全不支援。因此，行動裝置的算繪器僅採用光柵（頂點／片段）"
"著色器。"

msgid ""
"Unlike desktop GPUs, mobile GPUs perform *tile-based rendering*. Instead of "
"rendering the whole image as a single unit, the image is divided in smaller "
"tiles that fit within the faster internal memory of the mobile GPU. Each "
"tile is rendered and then written out to the destination texture. This all "
"happens automatically on the graphics driver."
msgstr ""
"行動 GPU 不同於桌面 GPU，會採用*基於圖塊（Tile-based）*的算繪方式。整張畫面不"
"是一次處理，而是分割為可放入 GPU 內部高速記憶體的小圖塊。每個圖塊獨立算繪後再"
"寫入目標紋理。這過程由圖形驅動自動完成。"

msgid ""
"The problem is that this introduces bottlenecks in our traditional approach. "
"For desktop rendering, we render all opaque geometry, then handle the "
"background, then transparent geometry, then post-processing. Each pass will "
"need to read the current result into tile memory, perform its operations and "
"then write it out again. We then wait for all tiles to be completed before "
"moving on to the next pass."
msgstr ""
"這會對傳統算繪流程帶來瓶頸。桌面算繪通常先處理不透明幾何、再處理背景、再繪製"
"透明物件，最後做後處理。每個步驟都必須將目前結果讀入圖塊記憶體、處理完再寫"
"回。每個階段都需等所有圖塊完成後方可進入下一步。"

msgid ""
"The first important change in the mobile renderer is that the mobile "
"renderer does not use the RGBA16F texture formats that the desktop renderer "
"does. Instead, it is using an R10G10B10A2 UNORM texture format. This halves "
"the bandwidth required and has further improvements as mobile hardware often "
"further optimizes for 32-bit formats. The tradeoff is that the mobile "
"renderer has limited HDR capabilities due to the reduced precision and "
"maximum values in the color data."
msgstr ""
"行動算繪器的第一個重要改變，是不再使用桌面算繪常見的 RGBA16F 紋理格式，而改"
"用 R10G10B10A2 UNORM 紋理格式。這不僅將頻寬需求減半，也因行動硬體多針對 32 位"
"元格式做優化，帶來更多效能提升。其代價是顏色資料精度與最大值下降，使行動端 "
"HDR 能力受限。"

msgid ""
"The second important change is the use of sub-passes whenever possible. Sub-"
"passes allows us to perform the rendering steps end-to-end per tile saving "
"on the overhead introduced by reading from and writing to the tiles between "
"each rendering pass. The ability to use sub-passes is limited by the "
"inability to read neighboring pixels, as we're constrained to working within "
"a single tile."
msgstr ""
"第二個重要改變是盡可能使用子通道（sub-pass）。這讓我們能在每個圖塊內一次完成"
"所有算繪步驟，節省每階段之間頻繁讀寫圖塊的開銷。使用子通道的限制在於無法跨圖"
"塊讀取相鄰像素，只能於單一圖塊範圍內運算。"

msgid ""
"This limitation of subpasses results in not being able to implement features "
"such as glow and depth of field efficiently. Similarly, if there is a "
"requirement to read from the screen texture or depth texture, we must fully "
"write out the rendering result limiting our ability to use sub-passes. When "
"such features are enabled, a mix of sub-passes and normal passes are used, "
"and these features result in a notable performance penalty."
msgstr ""
"子通道的這項限制，導致無法高效實作輝光、景深等效果。同樣地，若需讀取畫面紋理"
"或深度紋理，也必須將算繪結果完整寫出，限制了子通道的應用。當這些功能啟用時，"
"會混合使用子通道與一般通道，並導致明顯效能損失。"

msgid ""
"On desktop platforms, the use of sub-passes won't have any impact on "
"performance. However, this rendering method can still perform better than "
"Forward+ in simple scenes thanks to its lower complexity and lower bandwidth "
"usage. This is especially noticeable on low-end GPUs, integrated graphics or "
"in VR applications."
msgstr ""
"在桌面平臺，使用子通道對效能影響不大。但對於簡單場景，這個方法因複雜度低、頻"
"寬需求小，仍可勝過 Forward+。在低階 GPU、整合型顯示晶片或 VR 應用上尤為明顯。"

msgid ""
"Given its low-end focus, this rendering method does not provide high-end "
"rendering features such as SDFGI and :ref:`doc_volumetric_fog`. Several post-"
"processing effects are also not available."
msgstr ""
"由於著重支援低階裝置，本方法不支援 SDFGI、:ref:`doc_volumetric_fog` 等高階算"
"繪功能，亦不支援多種後期處理效果。"

msgid "Compatibility"
msgstr "相容性"

msgid ""
"This is the only rendering method available when using the OpenGL driver. "
"This rendering method is not available when using Vulkan, Direct3D 12, or "
"Metal."
msgstr ""
"這是在使用 OpenGL 驅動時唯一可用的算繪方法。若使用 Vulkan、Direct3D 12 或 "
"Metal 則不支援此方法。"

msgid ""
"This is a traditional (non-clustered) forward renderer. Internally, it is "
"called **GL Compatibility**. It's intended for old GPUs that don't have "
"Vulkan support, but still works very efficiently on newer hardware. "
"Specifically, it is optimized for older and lower-end mobile devices. "
"However, many optimizations carry over making it a good choice for older and "
"lower-end desktop as well."
msgstr ""
"這是一個傳統（非集群）的前向算繪器，內部稱為 **GL Compatibility**。其主要目的"
"是支援不支援 Vulkan 的舊 GPU，但在新硬體上效率同樣不錯。特別是針對舊型與低階"
"行動裝置做了優化，許多優化也適用於舊型或低階桌面，因此也是低效能電腦的好選"
"擇。"

msgid ""
"Like the Mobile renderer, the Compatibility renderer uses an R10G10B10A2 "
"UNORM texture for 3D rendering. Unlike the mobile renderer, colors are "
"tonemapped and stored in sRGB format so there is no HDR support. This avoids "
"the need for a tonemapping pass and allows us to use the lower bit texture "
"without substantial banding."
msgstr ""
"與行動算繪器類似，相容性算繪器在 3D 算繪時也採用 R10G10B10A2 UNORM 紋理。不同"
"之處在於顏色會經過色調映射並以 sRGB 格式儲存，因此不支援 HDR。這樣可省略色調"
"映射階段，並以較低位元紋理避免明顯條帶問題。"

msgid ""
"The Compatibility renderer uses a traditional forward single-pass approach "
"to drawing objects with lights, but it uses a multi-pass approach to draw "
"lights with shadows. Specifically, in the first pass, it can draw multiple "
"lights without shadows and up to one DirectionalLight3D with shadows. In "
"each subsequent pass, it can draw up to one OmniLight3D, one SpotLight3D and "
"one DirectionalLight3D with shadows. Lights with shadows will affect the "
"scene differently than lights without shadows, as the lighting is blended in "
"sRGB space instead of linear space. This difference in lighting will impact "
"how the scene looks and needs to be kept in mind when designing scenes for "
"the Compatibility renderer."
msgstr ""
"相容性算繪器對帶光源的物件採用傳統單通道前向算繪，但對有陰影的光源則使用多通"
"道算繪。具體來說，第一個通道可繪製多個無陰影光源及一個帶陰影的 "
"DirectionalLight3D，其後每個通道最多各可繪製一個帶陰影的 OmniLight3D、"
"SpotLight3D 及 DirectionalLight3D。有陰影的光源會以 sRGB 空間（非線性空間）混"
"合光照，產生與無陰影光源不同的場景外觀，設計場景時須注意此差異。"

msgid ""
"Given its low-end focus, this rendering method does not provide high-end "
"rendering features (even less so compared to Mobile). Most post-processing "
"effects are not available."
msgstr ""
"由於本方法重點在低階裝置，因此不支援高階算繪功能（甚至比行動版還少），大多數"
"後期處理效果亦不可用。"

msgid "Why not deferred rendering?"
msgstr "為什麼不採用延遲算繪？"

msgid ""
"Forward rendering generally provides a better tradeoff for performance "
"versus flexibility, especially when a clustered approach to lighting is "
"used. While deferred rendering can be faster in some cases, it's also less "
"flexible and requires using hacks to be able to use MSAA. Since games with a "
"less realistic art style can benefit a lot from MSAA, we chose to go with "
"forward rendering for Godot 4 (like Godot 3)."
msgstr ""
"前向算繪在性能與彈性之間通常能取得較佳平衡，特別是採用集群光照時。延遲算繪雖"
"在部分情境下更快，但其彈性較低，且需特殊處理才能支援 MSAA。由於許多非寫實風格"
"遊戲極需 MSAA，因此 Godot 4（如同 Godot 3）選擇前向算繪。"

msgid ""
"That said, parts of the forward renderer *are* performed with a deferred "
"approach to allow for some optimizations when possible. This applies to "
"VoxelGI and SDFGI in particular."
msgstr ""
"話雖如此，前向算繪器的部分處理*確實*採用延遲算繪手法，以在合適時進行最佳化。"
"這尤其應用於 VoxelGI 與 SDFGI。"

msgid ""
"A clustered deferred renderer may be developed in the future. This renderer "
"could be used in situations where performance is favored over flexibility."
msgstr ""
"未來有可能開發集群延遲算繪器。此渲染器適用於需極致效能而可犧牲彈性的場景。"

msgid "Rendering drivers"
msgstr "算繪驅動"

msgid "Godot 4 supports the following graphics APIs:"
msgstr "Godot 4 支援以下圖形 API："

msgid "Vulkan"
msgstr "Vulkan"

msgid ""
"This is the main driver in Godot 4, with most of the development focus going "
"towards this driver."
msgstr "這是 Godot 4 的主要驅動，開發重心多集中於此。"

msgid ""
"Vulkan 1.0 is required as a baseline, with optional Vulkan 1.1 and 1.2 "
"features used when available. `volk <https://github.com/zeux/volk>`__ is "
"used as a Vulkan loader, and `Vulkan Memory Allocator <https://github.com/"
"GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator>`__ is used for memory "
"management."
msgstr ""
"Vulkan 1.0 為最低需求，若可用則將額外利用 Vulkan 1.1 及 1.2 功能。Godot 使用 "
"`volk <https://github.com/zeux/volk>`__ 作為 Vulkan 載入器，並透過 `Vulkan "
"Memory Allocator <https://github.com/GPUOpen-LibrariesAndSDKs/"
"VulkanMemoryAllocator>`__ 來管理記憶體。"

msgid ""
"Both the Forward+ and "
"Mobile :ref:`doc_internal_rendering_architecture_methods` are supported when "
"using the Vulkan driver."
msgstr ""
"Vulkan 驅動同時支援 Forward+ 與 "
"Mobile :ref:`doc_internal_rendering_architecture_methods` 算繪方法。"

msgid "**Vulkan context creation:**"
msgstr "**Vulkan Context 建立：**"

msgid ""
"`drivers/vulkan/vulkan_context.cpp <https://github.com/godotengine/godot/"
"blob/4.2/drivers/vulkan/vulkan_context.cpp>`__"
msgstr ""
"`drivers/vulkan/vulkan_context.cpp <https://github.com/godotengine/godot/"
"blob/4.2/drivers/vulkan/vulkan_context.cpp>`__"

msgid "**Direct3D 12 context creation:**"
msgstr "**Direct3D 12 Context 建立：**"

msgid ""
"`drivers/d3d12/d3d12_context.cpp <https://github.com/godotengine/godot/blob/"
"master/drivers/d3d12/d3d12_context.cpp>`__"
msgstr ""
"`drivers/d3d12/d3d12_context.cpp <https://github.com/godotengine/godot/blob/"
"master/drivers/d3d12/d3d12_context.cpp>`__"

msgid "Direct3D 12"
msgstr "Direct3D 12"

msgid ""
"Like Vulkan, the Direct3D 12 driver targets modern platforms only. It is "
"designed to target both Windows and Xbox (whereas Vulkan can't be used "
"directly on Xbox)."
msgstr ""
"如同 Vulkan，Direct3D 12 驅動僅支援現代平臺，並專為 Windows 與 Xbox 設計"
"（Vulkan 無法直接於 Xbox 使用）。"

msgid ""
"Both the Forward+ and "
"Mobile :ref:`doc_internal_rendering_architecture_methods` can be used with "
"Direct3D 12."
msgstr ""
"Direct3D 12 可同時用於 Forward+ 與 "
"Mobile :ref:`doc_internal_rendering_architecture_methods` 算繪方法。"

msgid ""
":ref:`doc_internal_rendering_architecture_core_shaders` are shared with the "
"Vulkan renderer. Shaders are transpiled from :abbr:`SPIR-V (Standard "
"Portable Intermediate Representation)` to :abbr:`DXIL (DirectX Intermediate "
"Language)` using Mesa NIR (`more information <https://godotengine.org/"
"article/d3d12-adventures-in-shaderland/>`__)."
msgstr ""
":ref:`doc_internal_rendering_architecture_core_shaders` 與 Vulkan 算繪器共"
"用。 著色器會透過 Mesa NIR 將 :abbr:`SPIR-V (Standard Portable Intermediate "
"Representation)` 轉譯為 :abbr:`DXIL (DirectX Intermediate Language)` ，詳見 `"
"更多資訊 <https://godotengine.org/article/d3d12-adventures-in-shaderland/"
">`__ 。"

msgid ""
"**This driver is still experimental and only available in Godot 4.3 and "
"later.** While Direct3D 12 allows supporting Direct3D-exclusive features on "
"Windows 11 such as windowed optimizations and Auto HDR, Vulkan is still "
"recommended for most projects. See the `pull request that introduced "
"Direct3D 12 support <https://github.com/godotengine/godot/pull/70315>`__ for "
"more information."
msgstr ""
"**此驅動仍屬實驗性，僅於 Godot 4.3 及以後版本提供。** 雖然 Direct3D 12 能支"
"援 Windows 11 上專屬的 Direct3D 功能（如視窗化最佳化與自動 HDR），但大多數專"
"案仍建議使用 Vulkan。詳情請參閱新增 Direct3D 12 支援的「pull request "
"<https://github.com/godotengine/godot/pull/70315>」。"

msgid "Metal"
msgstr "Metal"

msgid ""
"Godot provides a native Metal driver that works on all Apple Silicon "
"hardware (macOS ARM). Compared to using the MoltenVK translation layer, this "
"is significantly faster, particularly in CPU-bound scenarios."
msgstr ""
"Godot 提供原生 Metal 驅動，適用於所有 Apple Silicon 硬體（macOS ARM）。與透"
"過 MoltenVK 轉譯層相比，原生 Metal 驅動效能顯著提升，特別在受限於 CPU 的情境"
"下更為明顯。"

msgid ""
"Both the Forward+ and "
"Mobile :ref:`doc_internal_rendering_architecture_methods` can be used with "
"Metal."
msgstr ""
"Metal 驅動可同時使用 Forward+ 與 "
"Mobile :ref:`doc_internal_rendering_architecture_methods` 算繪方法。"

msgid ""
":ref:`doc_internal_rendering_architecture_core_shaders` are shared with the "
"Vulkan renderer. Shaders are transpiled from GLSL to :abbr:`MSL (Metal "
"Shading Language)` using SPIRV-Cross."
msgstr ""
":ref:`doc_internal_rendering_architecture_core_shaders` 與 Vulkan 算繪器共"
"用。著色器透過 SPIRV-Cross 從 GLSL 轉譯為 :abbr:`MSL (Metal Shading "
"Language)` 。"

msgid ""
"Godot also supports Metal rendering via `MoltenVK <https://github.com/"
"KhronosGroup/MoltenVK>`__, which is used as a fallback when native Metal "
"support is not available (e.g. on x86 macOS)."
msgstr ""
"Godot 也可透過 `MoltenVK <https://github.com/KhronosGroup/MoltenVK>`__ 支援 "
"Metal 算繪，當原生 Metal 不可用時（如 x86 macOS）會自動切換使用。"

msgid ""
"**This driver is still experimental and only available in Godot 4.4 and "
"later.** See the `pull request that introduced Metal support <https://"
"github.com/godotengine/godot/pull/88199>`__ for more information."
msgstr ""
"**此驅動仍屬實驗性，僅於 Godot 4.4 及以後版本提供。** 詳情請參閱新增 Metal 支"
"援的「pull request <https://github.com/godotengine/godot/pull/88199>」。"

msgid "OpenGL"
msgstr "OpenGL"

msgid ""
"This driver uses OpenGL ES 3.0 and targets legacy and low-end devices that "
"don't support Vulkan. OpenGL 3.3 Core Profile is used on desktop platforms "
"to run this driver, as most graphics drivers on desktop don't support OpenGL "
"ES. WebGL 2.0 is used for web exports."
msgstr ""
"此驅動採用 OpenGL ES 3.0，主要針對不支援 Vulkan 的舊型與低階裝置。桌面版則以 "
"OpenGL 3.3 Core Profile 執行（因大多數桌面驅動不支援 OpenGL ES），Web 匯出則"
"用 WebGL 2.0。"

msgid ""
"It is possible to use OpenGL ES 3.0 directly on desktop platforms by passing "
"the ``--rendering-driver opengl3_es`` command line argument, although this "
"will only work on graphics drivers that feature native OpenGL ES support "
"(such as Mesa)."
msgstr ""
"你也可以在桌面平臺直接使用 OpenGL ES 3.0，只要於命令列加上 ``--rendering-"
"driver opengl3_es`` 參數，但僅支援原生 OpenGL ES 的圖形驅動（如 Mesa）。"

msgid ""
"Only the :ref:`doc_internal_rendering_architecture_compatibility` rendering "
"method can be used with the OpenGL driver."
msgstr ""
"OpenGL 驅動僅支援 :ref:`doc_internal_rendering_architecture_compatibility` 算"
"繪方法。"

msgid ""
":ref:`doc_internal_rendering_architecture_core_shaders` are entirely "
"different from the Vulkan renderer."
msgstr ""
":ref:`doc_internal_rendering_architecture_core_shaders` 與 Vulkan 算繪器完全"
"不同。"

msgid ""
"Many advanced features are not supported with this driver, as it targets low-"
"end devices first and foremost."
msgstr "由於此驅動主要鎖定低階裝置，因此不支援多項進階功能。"

msgid "Summary of rendering drivers/methods"
msgstr "算繪驅動／方法總覽"

msgid ""
"The following rendering API + rendering method combinations are currently "
"possible:"
msgstr "目前可用的算繪 API 與算繪方法組合如下："

msgid "Vulkan + Forward+ (optionally through MoltenVK on macOS and iOS)"
msgstr "Vulkan + Forward+（macOS 與 iOS 可選用 MoltenVK）"

msgid "Vulkan + Mobile (optionally through MoltenVK on macOS and iOS)"
msgstr "Vulkan + Mobile（macOS 與 iOS 可選用 MoltenVK）"

msgid "Direct3D 12 + Forward+"
msgstr "Direct3D 12 + Forward+"

msgid "Direct3D 12 + Mobile"
msgstr "Direct3D 12 + Mobile"

msgid "Metal + Forward+"
msgstr "Metal + Forward+"

msgid "Metal + Mobile"
msgstr "Metal + Mobile"

msgid "OpenGL + Compatibility (optionally through ANGLE on Windows and macOS)"
msgstr "OpenGL + 相容性（Windows 與 macOS 可選用 ANGLE）"

msgid ""
"Each combination has its own limitations and performance characteristics. "
"Make sure to test your changes on all rendering methods if possible before "
"opening a pull request."
msgstr ""
"每種組合皆有其限制與效能特性。建議你在送出 Pull Request 前，盡量於所有算繪方"
"法下測試你的變更。"

msgid "RenderingDevice abstraction"
msgstr "RenderingDevice 抽象層"

msgid "The OpenGL driver does not use the RenderingDevice abstraction."
msgstr "OpenGL 驅動不使用 RenderingDevice 抽象層。"

msgid ""
"To make the complexity of modern low-level graphics APIs more manageable, "
"Godot uses its own abstraction called RenderingDevice."
msgstr ""
"為了讓現代低階圖形 API 的複雜性更易於管理，Godot 採用自有的抽象層——"
"RenderingDevice。"

msgid ""
"This means that when writing code for modern rendering methods, you don't "
"actually use the Vulkan, Direct3D 12, or Metal APIs directly. While this is "
"still lower-level than an API like OpenGL, this makes working on the "
"renderer easier, as RenderingDevice will abstract many API-specific quirks "
"for you. The RenderingDevice presents a similar level of abstraction as "
"WebGPU."
msgstr ""
"這表示在為現代算繪方法撰寫程式碼時，你實際上不會直接操作 Vulkan、Direct3D 12 "
"或 Metal API。雖然這層仍比 OpenGL 更貼近底層，但可讓算繪器的開發更容易，因為 "
"RenderingDevice 已為你封裝許多 API 相關的細節。其抽象層級與 WebGPU 類似。"

msgid "**Vulkan RenderingDevice implementation:**"
msgstr "**Vulkan RenderingDevice 實作：**"

msgid ""
"`drivers/vulkan/rendering_device_driver_vulkan.cpp <https://github.com/"
"godotengine/godot/blob/master/drivers/vulkan/"
"rendering_device_driver_vulkan.cpp>`__"
msgstr ""
"`drivers/vulkan/rendering_device_driver_vulkan.cpp <https://github.com/"
"godotengine/godot/blob/master/drivers/vulkan/"
"rendering_device_driver_vulkan.cpp>`__"

msgid "**Direct3D 12 RenderingDevice implementation:**"
msgstr "**Direct3D 12 RenderingDevice 實作：**"

msgid ""
"`drivers/d3d12/rendering_device_driver_d3d12.cpp <https://github.com/"
"godotengine/godot/blob/master/drivers/d3d12/"
"rendering_device_driver_d3d12.cpp>`__"
msgstr ""
"`drivers/d3d12/rendering_device_driver_d3d12.cpp <https://github.com/"
"godotengine/godot/blob/master/drivers/d3d12/"
"rendering_device_driver_d3d12.cpp>`__"

msgid "**Metal RenderingDevice implementation:**"
msgstr "**Metal RenderingDevice 實作：**"

msgid ""
"`drivers/metal/rendering_device_driver_metal.mm <https://github.com/"
"godotengine/godot/blob/master/drivers/metal/"
"rendering_device_driver_metal.mm>`__"
msgstr ""
"`drivers/metal/rendering_device_driver_metal.mm <https://github.com/"
"godotengine/godot/blob/master/drivers/metal/"
"rendering_device_driver_metal.mm>`__"

msgid "Core rendering classes architecture"
msgstr "核心算繪類別架構"

msgid ""
"This diagram represents the structure of rendering classes in Godot, "
"including the RenderingDevice abstraction:"
msgstr "下圖展示 Godot 的算繪類別結構，包含 RenderingDevice 抽象層："

msgid ""
"`View at full size <https://raw.githubusercontent.com/godotengine/godot-docs/"
"master/contributing/development/core_and_modules/img/"
"rendering_architecture_diagram.webp>`__"
msgstr ""
"`檢視完整尺寸 <https://raw.githubusercontent.com/godotengine/godot-docs/"
"master/contributing/development/core_and_modules/img/"
"rendering_architecture_diagram.webp>`__"

msgid "Core shaders"
msgstr "核心著色器"

msgid ""
"While shaders in Godot projects are written using a :ref:`custom language "
"inspired by GLSL <doc_shading_language>`, core shaders are written directly "
"in GLSL."
msgstr ""
"雖然 Godot 專案內的著色器多以 :ref:`GLSL 為靈感的自訂語言 "
"<doc_shading_language>` 編寫，但核心著色器則直接以 GLSL 撰寫。"

msgid ""
"These core shaders are embedded in the editor and export template binaries "
"at compile-time. To see any changes you've made to those GLSL shaders, you "
"need to recompile the editor or export template binary."
msgstr ""
"這些核心著色器於編譯時嵌入編輯器及匯出模板二進位檔。若你修改了這些 GLSL 著色"
"器，必須重新編譯編輯器或匯出模板才能看到效果。"

msgid ""
"Some material features such as height mapping, refraction and proximity fade "
"are not part of core shaders, and are performed in the default "
"BaseMaterial3D using the Godot shader language instead (not GLSL). This is "
"done by procedurally generating the required shader code depending on the "
"features enabled in the material."
msgstr ""
"部分材質功能（如高度貼圖、折射與鄰近淡出）並非核心著色器的一部分，而是透過 "
"BaseMaterial3D 的 Godot 著色器語言（非 GLSL）來實作。系統會依據啟用的功能，程"
"序化產生對應的著色器程式碼。"

msgid ""
"By convention, shader files with ``_inc`` in their name are included in "
"other GLSL files for better code reuse. Standard GLSL preprocessing is used "
"to achieve this."
msgstr ""
"按照慣例，檔名含 ``_inc`` 的著色器檔會被其他 GLSL 檔案 include，以利程式碼重"
"用。這是利用標準 GLSL 前處理器實作。"

msgid ""
"Core material shaders will be used by every material in the scene – both "
"with the default BaseMaterial3D and custom shaders. As a result, these "
"shaders must be kept as simple as possible to avoid performance issues and "
"ensure shader compilation doesn't become too slow."
msgstr ""
"場景中所有材質（不論使用 BaseMaterial3D 或自訂著色器）都會用到核心材質著色"
"器。因此，這些著色器必須盡量簡潔，以避免效能問題並確保著色器編譯速度。"

msgid ""
"If you use ``if`` branching in a shader, performance may decrease "
"as :abbr:`VGPR (Vector General-Purpose Register)` usage will increase in the "
"shader. This happens even if all pixels evaluate to ``true`` or ``false`` in "
"a given frame."
msgstr ""
"在著色器中使用 ``if`` 分支會導致 :abbr:`VGPR (Vector General-Purpose "
"Register)` 占用量增加，進而降低效能。即使同一幀所有像素的判斷結果都一樣，也會"
"如此。"

msgid ""
"If you use ``#if`` preprocessor branching, the number of required shader "
"versions will increase in the scene. In a worst-case scenario, adding a "
"single boolean ``#define`` can *double* the number of shader versions that "
"may need to be compiled in a given scene. In some cases, Vulkan "
"specialization constants can be used as a faster (but more limited) "
"alternative."
msgstr ""
"如在著色器中用 ``#if`` 前處理分支，會導致場景中需編譯的著色器版本數量暴增。最"
"壞情況下，單一布林 ``#define`` 便可能使需要編譯的著色器數量加倍。有時可以用 "
"Vulkan 的專用常數作為較快（但較有限）的替代方案。"

msgid ""
"This means there is a high barrier to adding new built-in material features "
"in Godot, both in the core shaders and BaseMaterial3D. While BaseMaterial3D "
"can make use of dynamic code generation to only include the shader code if "
"the feature is enabled, it'll still require generating more shader versions "
"when these features are used in a project. This can make shader compilation "
"stutter more noticeable in complex 3D scenes."
msgstr ""
"這也代表 Godot 無論於核心著色器還是 BaseMaterial3D，要新增內建材質功能都具備"
"高度門檻。雖然 BaseMaterial3D 可動態產生程式碼並僅針對啟用功能產生對應著色"
"器，但專案若啟用多項功能仍會導致編譯更多著色器版本，複雜 3D 場景中會明顯增加"
"編譯卡頓。"

msgid ""
"See `The Shader Permutation Problem <https://therealmjp.github.io/posts/"
"shader-permutations-part1/>`__ and `Branching on a GPU <https://medium.com/"
"@jasonbooth_86226/branching-on-a-gpu-18bfc83694f2>`__ blog posts for more "
"information."
msgstr ""
"詳情請參閱「著色器排列問題 <https://therealmjp.github.io/posts/shader-"
"permutations-part1/>」及「GPU 上的分支 <https://medium.com/@jasonbooth_86226/"
"branching-on-a-gpu-18bfc83694f2>」部落格文章。"

msgid "**Core GLSL material shaders:**"
msgstr "**核心 GLSL 材質著色器：**"

msgid ""
"Forward+: `servers/rendering/renderer_rd/shaders/forward_clustered/"
"scene_forward_clustered.glsl <https://github.com/godotengine/godot/blob/4.2/"
"servers/rendering/renderer_rd/shaders/forward_clustered/"
"scene_forward_clustered.glsl>`__"
msgstr ""
"Forward+：`servers/rendering/renderer_rd/shaders/forward_clustered/"
"scene_forward_clustered.glsl <https://github.com/godotengine/godot/blob/4.2/"
"servers/rendering/renderer_rd/shaders/forward_clustered/"
"scene_forward_clustered.glsl>`__"

msgid ""
"Mobile: `servers/rendering/renderer_rd/shaders/forward_mobile/"
"scene_forward_mobile.glsl <https://github.com/godotengine/godot/blob/4.2/"
"servers/rendering/renderer_rd/shaders/forward_mobile/"
"scene_forward_mobile.glsl>`__"
msgstr ""
"Mobile：`servers/rendering/renderer_rd/shaders/forward_mobile/"
"scene_forward_mobile.glsl <https://github.com/godotengine/godot/blob/4.2/"
"servers/rendering/renderer_rd/shaders/forward_mobile/"
"scene_forward_mobile.glsl>`__"

msgid ""
"Compatibility: `drivers/gles3/shaders/scene.glsl <https://github.com/"
"godotengine/godot/blob/4.2/drivers/gles3/shaders/scene.glsl>`__"
msgstr ""
"Compatibility：`drivers/gles3/shaders/scene.glsl <https://github.com/"
"godotengine/godot/blob/4.2/drivers/gles3/shaders/scene.glsl>`__"

msgid "**Material shader generation:**"
msgstr "**材質著色器產生：**"

msgid ""
"`scene/resources/material.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/resources/material.cpp>`__"
msgstr ""
"`scene/resources/material.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/resources/material.cpp>`__"

msgid "**Other GLSL shaders for Forward+ and Mobile rendering methods:**"
msgstr "**Forward+ 與 Mobile 算繪方法的其他 GLSL 著色器：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/ <https://github.com/godotengine/"
"godot/blob/4.2/servers/rendering/renderer_rd/shaders/>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/ <https://github.com/godotengine/"
"godot/blob/4.2/servers/rendering/renderer_rd/shaders/>`__"

msgid ""
"`modules/lightmapper_rd/ <https://github.com/godotengine/godot/blob/4.2/"
"modules/lightmapper_rd>`__"
msgstr ""
"`modules/lightmapper_rd/ <https://github.com/godotengine/godot/blob/4.2/"
"modules/lightmapper_rd>`__"

msgid "**Other GLSL shaders for the Compatibility rendering method:**"
msgstr "**Compatibility 算繪方法的其他 GLSL 著色器：**"

msgid ""
"`drivers/gles3/shaders/ <https://github.com/godotengine/godot/blob/4.2/"
"drivers/gles3/shaders/>`__"
msgstr ""
"`drivers/gles3/shaders/ <https://github.com/godotengine/godot/blob/4.2/"
"drivers/gles3/shaders/>`__"

msgid "2D and 3D rendering separation"
msgstr "2D 與 3D 算繪分離"

msgid ""
"The following is only applicable in the Forward+ and Mobile rendering "
"methods, not in Compatibility. Multiple Viewports can be used to emulate "
"this when using the Compatibility renderer, or to perform 2D resolution "
"scaling."
msgstr ""
"以下內容僅適用於 Forward+ 與 Mobile 算繪方法，在 Compatibility 模式下不適用。"
"若使用 Compatibility 算繪器，可透過多重 Viewport 模擬分離，或用於執行 2D 解析"
"度縮放。"

msgid ""
"2D and 3D are rendered to separate buffers, as 2D rendering in Godot is "
"performed in :abbr:`LDR (Low Dynamic Range)` sRGB-space while 3D rendering "
"uses :abbr:`HDR (High Dynamic Range)` linear space."
msgstr ""
"2D 與 3D 會分別算繪到不同的緩衝區，因為 Godot 的 2D 算繪是在 :abbr:`LDR (低動"
"態範圍)` sRGB 空間下進行，而 3D 算繪則在 :abbr:`HDR (高動態範圍)` 線性空間"
"中。"

msgid ""
"The color format used for 2D rendering is RGB8 (RGBA8 if the **Transparent** "
"property on the Viewport is enabled). 3D rendering uses a 24-bit unsigned "
"normalized integer depth buffer, or 32-bit signed floating-point if a 24-bit "
"depth buffer is not supported by the hardware. 2D rendering does not use a "
"depth buffer."
msgstr ""
"2D 算繪使用的色彩格式為 RGB8；若 Viewport 啟用 **Transparent** 屬性則為 "
"RGBA8。3D 算繪則採用 24 位元無符號標準化整數深度緩衝區，若硬體不支援 24 位深"
"度，則以 32 位元有符號浮點。2D 算繪則不使用深度緩衝區。"

msgid ""
"3D resolution scaling is performed differently depending on whether bilinear "
"or FSR 1.0 scaling is used. When bilinear scaling is used, no special "
"upscaling shader is run. Instead, the viewport's texture is stretched and "
"displayed with a linear sampler (which makes the filtering happen directly "
"on the hardware). This allows maximizing the performance of bilinear 3D "
"scaling."
msgstr ""
"3D 解析度縮放的方式會根據選擇雙線性縮放或 FSR 1.0 縮放而有所不同。若使用雙線"
"性縮放，不會執行特殊放大著色器，而是將視窗紋理直接拉伸，並以線性取樣器顯示"
"（過濾直接交由硬體處理）。這可最大化雙線性 3D 縮放的效能。"

msgid ""
"The ``configure()`` function in RenderSceneBuffersRD reallocates the 2D/3D "
"buffers when the resolution or scaling changes."
msgstr ""
"當解析度或縮放比例變更時，RenderSceneBuffersRD 的 ``configure()`` 函式會重新"
"分配 2D／3D 緩衝區。"

msgid ""
"Dynamic resolution scaling isn't supported yet, but is planned in a future "
"Godot release."
msgstr "目前尚未支援動態解析度縮放，未來 Godot 版本計畫加入此功能。"

msgid "**2D and 3D rendering buffer configuration C++ code:**"
msgstr "**2D 與 3D 算繪緩衝區配置 C++ 程式碼：**"

msgid ""
"`servers/rendering/renderer_rd/storage_rd/render_scene_buffers_rd.cpp "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"storage_rd/render_scene_buffers_rd.cpp>`__"
msgstr ""
"`servers/rendering/renderer_rd/storage_rd/render_scene_buffers_rd.cpp "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"storage_rd/render_scene_buffers_rd.cpp>`__"

msgid "**FSR 1.0:**"
msgstr "**FSR 1.0：**"

msgid ""
"`servers/rendering/renderer_rd/effects/fsr.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/fsr.cpp>`__"
msgstr ""
"`servers/rendering/renderer_rd/effects/fsr.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/fsr.cpp>`__"

msgid ""
"`thirdparty/amd-fsr/ <https://github.com/godotengine/godot/tree/master/"
"thirdparty/amd-fsr>`__"
msgstr ""
"`thirdparty/amd-fsr/ <https://github.com/godotengine/godot/tree/master/"
"thirdparty/amd-fsr>`__"

msgid "2D rendering techniques"
msgstr "2D 算繪技術"

msgid ""
"2D light rendering is performed in a single pass to allow for better "
"performance with large amounts of lights."
msgstr "2D 燈光算繪以單通道進行，以提升大量燈光下的效能。"

msgid ""
"MSAA can be enabled in 2D to provide \"automatic\" line and polygon "
"antialiasing, but FXAA does not affect 2D rendering as it's calculated "
"before 2D rendering begins. Godot's 2D drawing methods such as the Line2D "
"node or some CanvasItem ``draw_*()`` methods provide their own way of "
"antialiasing based on triangle strips and vertex colors, which don't require "
"MSAA to work."
msgstr ""
"2D 算繪可開啟 MSAA 以自動處理線條和多邊形的抗鋸齒，但 FXAA 不會影響 2D 算繪，"
"因為它在 2D 算繪開始前已計算完畢。Godot 的 2D 繪製方法（如 Line2D 節點或部分 "
"CanvasItem 的 ``draw_*()`` 方法）會以三角帶與頂點色進行自家抗鋸齒，不需倚賴 "
"MSAA。"

msgid ""
"A 2D signed distance field representing LightOccluder2D nodes in the "
"viewport is automatically generated if a user shader requests it. This can "
"be used for various effects in custom shaders, such as 2D global "
"illumination. It is also used to calculate particle collisions in 2D."
msgstr ""
"若使用者著色器有需求，系統會自動產生代表 Viewport 內 LightOccluder2D 節點的 "
"2D 簽名距離場。這可用於自訂著色器的多種效果（如 2D 全域照明），也可用來計算 "
"2D 粒子碰撞。"

msgid "**2D SDF generation GLSL shader:**"
msgstr "**2D SDF 產生 GLSL 著色器：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/canvas_sdf.glsl <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"canvas_sdf.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/canvas_sdf.glsl <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"canvas_sdf.glsl>`__"

msgid "3D rendering techniques"
msgstr "3D 算繪技術"

msgid "Batching and instancing"
msgstr "批次與實例化"

msgid "Light, decal and reflection probe rendering"
msgstr "燈光、貼花與反射探查算繪"

msgid ""
"Decal rendering is currently not available in the Compatibility renderer."
msgstr "目前 Compatibility 算繪器尚不支援貼花（Decal）算繪。"

msgid ""
"The Forward+ renderer uses clustered lighting. This allows using as many "
"lights as you want; performance largely depends on screen coverage. Shadow-"
"less lights can be almost free if they don't occupy much space on screen."
msgstr ""
"Forward+ 算繪器採用集群光照（Clustered Lighting），可讓你任意增加燈光數量；效"
"能主要取決於燈光在螢幕的覆蓋範圍。若無陰影且佔螢幕面積小的燈光，幾乎不會造成"
"效能負擔。"

msgid ""
"All rendering methods also support rendering up to 8 directional lights at "
"the same time (albeit with lower shadow quality when more than one light has "
"shadows enabled)."
msgstr ""
"所有算繪方法都支援同時算繪最多 8 個定向光源（若多於一個光源啟用陰影，則陰影品"
"質會降低）。"

msgid ""
"The Mobile renderer uses a single-pass lighting approach, with a limitation "
"of 8 OmniLights + 8 SpotLights affecting each Mesh *resource* (plus a "
"limitation of 256 OmniLights + 256 SpotLights in the camera view). These "
"limits are hardcoded and can't be adjusted in the project settings."
msgstr ""
"Mobile 算繪器採用單通道光照，每個 Mesh 資源最多受 8 個 OmniLight 與 8 個 "
"SpotLight 影響（攝影機視野內總數分別上限為 256）。這些限制為硬編碼，無法在專"
"案設定中調整。"

msgid ""
"The Compatibility renderer uses a hybrid single-pass + multi-pass lighting "
"approach. Lights without shadows are rendered in a single pass. Lights with "
"shadows are rendered in multiple passes. This is required for performance "
"reasons on mobile devices. As a result, performance does not scale well with "
"many shadow-casting lights. It is recommended to only have a handful of "
"lights with shadows in the camera frustum at a time and for those lights to "
"be spread apart so that each object is only touched by 1 or 2 shadowed "
"lights at a time. The maximum number of lights visible at once can be "
"adjusted in the project settings."
msgstr ""
"Compatibility 算繪器採用混合單通道＋多通道光照。無陰影的燈光在單通道內算繪，"
"有陰影的燈光則需多通道處理。這主要是為了行動裝置效能考量，因此若場景中同時存"
"在大量投射陰影的燈光，效能不易線性擴展。建議每次攝影機視錐內僅保留少量陰影光"
"源，且盡量分散，讓每個物件同時僅受 1～2 個陰影燈光影響。最大可見燈光數可於專"
"案設定調整。"

msgid ""
"In all 3 methods, lights without shadows are much cheaper than lights with "
"shadows. To improve performance, lights are only updated when the light is "
"modified or when objects in its radius are modified. Godot currently doesn't "
"separate static shadow rendering from dynamic shadow rendering, but this is "
"planned in a future release."
msgstr ""
"在這三種算繪方法中，無陰影的燈光運算成本遠低於有陰影的燈光。為了提升效能，只"
"有當燈光本身或其半徑內物件變動時，才會更新燈光。Godot 目前尚未將靜態陰影與動"
"態陰影算繪分離，未來版本計畫加入此功能。"

msgid ""
"Clustering is also used for reflection probes and decal rendering in the "
"Forward+ renderer."
msgstr "Forward+ 算繪器也利用集群技術進行反射探查與貼花算繪。"

msgid "Shadow mapping"
msgstr "陰影貼圖"

msgid ""
"Both Forward+ and Mobile methods use :abbr:`PCF (Percentage Closer "
"Filtering)` to filter shadow maps and create a soft penumbra. Instead of "
"using a fixed PCF pattern, these methods use a vogel disk pattern which "
"allows for changing the number of samples and smoothly changing the quality."
msgstr ""
"Forward+ 與 Mobile 算繪方法都會使用 :abbr:`PCF (百分比接近過濾)` 來處理陰影貼"
"圖並產生柔和的半影。這兩種方法採用 vogel disk（渦格圓盤）取樣，可調整樣本數量"
"並平順地切換陰影品質，而非固定 PCF 取樣方式。"

msgid ""
"Godot also supports percentage-closer soft shadows (PCSS) for more realistic "
"shadow penumbra rendering. PCSS shadows are limited to the Forward+ renderer "
"as they're too demanding to be usable in the Mobile renderer. PCSS also uses "
"a vogel-disk shaped kernel."
msgstr ""
"Godot 亦支援 PCSS（百分比接近軟陰影），可產生更真實的半影效果。PCSS 僅於 "
"Forward+ 算繪器中提供，因行動裝置效能無法負荷。PCSS 同樣使用 vogel disk 形狀"
"的取樣核心。"

msgid ""
"Additionally, both shadow-mapping techniques rotate the kernel on a per-"
"pixel basis to help soften under-sampling artifacts."
msgstr ""
"此外，這兩種陰影貼圖技術都會針對每個像素旋轉取樣核心，以減輕取樣不足造成的偽"
"影。"

msgid ""
"The Compatibility renderer supports shadow mapping for DirectionalLight3D, "
"OmniLight3D, and SpotLight3D lights."
msgstr ""
"Compatibility 算繪器支援 DirectionalLight3D、OmniLight3D 及 SpotLight3D 的陰"
"影貼圖。"

msgid "Temporal antialiasing"
msgstr "時間性抗鋸齒（TAA）"

msgid ""
"Only available in the Forward+ renderer, not the Mobile or Compatibility "
"renderers."
msgstr "僅於 Forward+ 算繪器中提供，Mobile 與 Compatibility 算繪器不支援。"

msgid ""
"Godot uses a custom TAA implementation based on the old TAA implementation "
"from `Spartan Engine <https://github.com/PanosK92/SpartanEngine>`__."
msgstr ""
"Godot 採用自訂的 TAA（時間性抗鋸齒）實作，基於 Spartan Engine <https://"
"github.com/PanosK92/SpartanEngine> 舊版 TAA 實現。"

msgid ""
"Temporal antialiasing requires motion vectors to work. If motion vectors are "
"not correctly generated, ghosting will occur when the camera or objects move."
msgstr ""
"時間性抗鋸齒需要運動向量支援。若運動向量未正確產生，則攝影機或物件移動時會出"
"現重影。"

msgid ""
"Motion vectors are generated on the GPU in the main material shader. This is "
"done by running the vertex shader corresponding to the previous rendered "
"frame (with the previous camera transform) in addition to the vertex shader "
"for the current rendered frame, then storing the difference between them in "
"a color buffer."
msgstr ""
"運動向量於 GPU 端的主材質著色器中產生，會同時運行前一影格（含前一攝影機變換）"
"與目前影格的頂點著色器，然後將其差異存於顏色緩衝區。"

msgid ""
"Alternatively, FSR 2.2 can be used as an upscaling solution that also "
"provides its own temporal antialiasing algorithm. FSR 2.2 is implemented on "
"top of the RenderingDevice abstraction as opposed to using AMD's reference "
"code directly."
msgstr ""
"另外也可使用 FSR 2.2 作為升頻方案，內建自家時間性抗鋸齒演算法。Godot 的 FSR "
"2.2 是基於 RenderingDevice 抽象層重新實作，並非直接採用 AMD 官方程式碼。"

msgid "**TAA resolve:**"
msgstr "**TAA 解算：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/taa_resolve.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/taa_resolve.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/taa_resolve.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/taa_resolve.glsl>`__"

msgid "**FSR 2.2:**"
msgstr "**FSR 2.2：**"

msgid ""
"`servers/rendering/renderer_rd/effects/fsr2.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/fsr2.cpp>`__"
msgstr ""
"`servers/rendering/renderer_rd/effects/fsr2.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/fsr2.cpp>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/fsr2/ <https://github.com/"
"godotengine/godot/tree/master/servers/rendering/renderer_rd/shaders/effects/"
"fsr2>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/fsr2/ <https://github.com/"
"godotengine/godot/tree/master/servers/rendering/renderer_rd/shaders/effects/"
"fsr2>`__"

msgid ""
"`thirdparty/amd-fsr2/ <https://github.com/godotengine/godot/tree/master/"
"thirdparty/amd-fsr2>`__"
msgstr ""
"`thirdparty/amd-fsr2/ <https://github.com/godotengine/godot/tree/master/"
"thirdparty/amd-fsr2>`__"

msgid "Global illumination"
msgstr "全域照明"

msgid ""
"VoxelGI and SDFGI are only available in the Forward+ renderer, not the "
"Mobile or Compatibility renderers."
msgstr ""
"VoxelGI 與 SDFGI 僅於 Forward+ 算繪器中提供，Mobile 與 Compatibility 算繪器不"
"支援。"

msgid ""
"LightmapGI *baking* is only available in the Forward+ and Mobile renderers, "
"and can only be performed within the editor (not in an exported project). "
"LightmapGI *rendering* is supported by the Compatibility renderer."
msgstr ""
"LightmapGI 的*烘焙*僅於 Forward+ 與 Mobile 算繪器中提供，且只能於編輯器內操作"
"（無法在匯出專案時進行）。LightmapGI 的*算繪*則由 Compatibility 算繪器支援。"

msgid ""
"Godot supports voxel-based GI (VoxelGI), signed distance field GI (SDFGI) "
"and lightmap baking and rendering (LightmapGI). These techniques can be used "
"simultaneously if desired."
msgstr ""
"Godot 支援體素式全域照明（VoxelGI）、有符號距離場全域照明（SDFGI），以及光照"
"貼圖烘焙與算繪（LightmapGI）。這些技術可依需求同時應用。"

msgid ""
"Lightmap baking happens on the GPU using Vulkan compute shaders. The GPU-"
"based lightmapper is implemented in the LightmapperRD class, which inherits "
"from the Lightmapper class. This allows for implementing additional "
"lightmappers, paving the way for a future port of the CPU-based lightmapper "
"present in Godot 3.x. This would allow baking lightmaps while using the "
"Compatibility renderer."
msgstr ""
"光照貼圖烘焙會在 GPU 上以 Vulkan 運算著色器執行。GPU 版光照貼圖器實作於 "
"LightmapperRD 類別，並繼承自 Lightmapper，故未來可新增更多光照貼圖法，也可讓 "
"Godot 3.x 的 CPU 版光照貼圖器移植至 4.x，進而在 Compatibility 算繪器下實現光"
"照貼圖烘焙。"

msgid "**Core GI C++ code:**"
msgstr "**全域照明（GI）核心 C++ 程式碼：**"

msgid ""
"`servers/rendering/renderer_rd/environment/gi.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/environment/"
"gi.cpp>`__"
msgstr ""
"`servers/rendering/renderer_rd/environment/gi.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/environment/"
"gi.cpp>`__"

msgid ""
"`scene/3d/voxel_gi.cpp <https://github.com/godotengine/godot/blob/4.2/scene/"
"3d/voxel_gi.cpp>`__ - VoxelGI node"
msgstr ""
"`scene/3d/voxel_gi.cpp <https://github.com/godotengine/godot/blob/4.2/scene/"
"3d/voxel_gi.cpp>`__ - VoxelGI 節點"

msgid ""
"`editor/plugins/voxel_gi_editor_plugin.cpp <https://github.com/godotengine/"
"godot/blob/4.2/editor/plugins/voxel_gi_editor_plugin.cpp>`__ - Editor UI for "
"the VoxelGI node"
msgstr ""
"`editor/plugins/voxel_gi_editor_plugin.cpp <https://github.com/godotengine/"
"godot/blob/4.2/editor/plugins/voxel_gi_editor_plugin.cpp>`__ - VoxelGI 節點的"
"編輯器介面"

msgid "**Core GI GLSL shaders:**"
msgstr "**全域照明（GI）核心 GLSL 著色器：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/environment/voxel_gi.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"environment/voxel_gi.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/voxel_gi.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"environment/voxel_gi.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/environment/voxel_gi_debug.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/voxel_gi_debug.glsl>`__ - VoxelGI debug draw mode"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/voxel_gi_debug.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/voxel_gi_debug.glsl>`__ - VoxelGI 除錯繪製模式"

msgid ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_debug.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"environment/sdfgi_debug.glsl>`__ - SDFGI Cascades debug draw mode"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_debug.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"environment/sdfgi_debug.glsl>`__ - SDFGI 層級除錯繪製模式"

msgid ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_debug_probes.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_debug_probes.glsl>`__ - SDFGI Probes debug draw "
"mode"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_debug_probes.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_debug_probes.glsl>`__ - SDFGI 探針除錯繪製模式"

msgid ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_integrate.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_integrate.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_integrate.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_integrate.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_preprocess.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_preprocess.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_preprocess.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_preprocess.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_direct_light.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_direct_light.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_direct_light.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_direct_light.glsl>`__"

msgid "**Lightmapper C++ code:**"
msgstr "**光照貼圖器 C++ 程式碼：**"

msgid ""
"`scene/3d/lightmap_gi.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/3d/lightmap_gi.cpp>`__ - LightmapGI node"
msgstr ""
"`scene/3d/lightmap_gi.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/3d/lightmap_gi.cpp>`__ - LightmapGI 節點"

msgid ""
"`editor/plugins/lightmap_gi_editor_plugin.cpp <https://github.com/"
"godotengine/godot/blob/4.2/editor/plugins/lightmap_gi_editor_plugin.cpp>`__ "
"- Editor UI for the LightmapGI node"
msgstr ""
"`editor/plugins/lightmap_gi_editor_plugin.cpp <https://github.com/"
"godotengine/godot/blob/4.2/editor/plugins/lightmap_gi_editor_plugin.cpp>`__ "
"- LightmapGI 節點的編輯器介面"

msgid ""
"`scene/3d/lightmapper.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/3d/lightmapper.cpp>`__ - Abstract class"
msgstr ""
"`scene/3d/lightmapper.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/3d/lightmapper.cpp>`__ - 抽象類別"

msgid ""
"`modules/lightmapper_rd/lightmapper_rd.cpp <https://github.com/godotengine/"
"godot/blob/4.2/modules/lightmapper_rd/lightmapper_rd.cpp>`__ - GPU-based "
"lightmapper implementation"
msgstr ""
"`modules/lightmapper_rd/lightmapper_rd.cpp <https://github.com/godotengine/"
"godot/blob/4.2/modules/lightmapper_rd/lightmapper_rd.cpp>`__ - GPU 版光照貼圖"
"器實作"

msgid "**Lightmapper GLSL shaders:**"
msgstr "**光照貼圖器 GLSL 著色器：**"

msgid ""
"`modules/lightmapper_rd/lm_raster.glsl <https://github.com/godotengine/godot/"
"blob/4.2/modules/lightmapper_rd/lm_raster.glsl>`__"
msgstr ""
"`modules/lightmapper_rd/lm_raster.glsl <https://github.com/godotengine/godot/"
"blob/4.2/modules/lightmapper_rd/lm_raster.glsl>`__"

msgid ""
"`modules/lightmapper_rd/lm_compute.glsl <https://github.com/godotengine/"
"godot/blob/4.2/modules/lightmapper_rd/lm_compute.glsl>`__"
msgstr ""
"`modules/lightmapper_rd/lm_compute.glsl <https://github.com/godotengine/"
"godot/blob/4.2/modules/lightmapper_rd/lm_compute.glsl>`__"

msgid ""
"`modules/lightmapper_rd/lm_blendseams.glsl <https://github.com/godotengine/"
"godot/blob/4.2/modules/lightmapper_rd/lm_blendseams.glsl>`__"
msgstr ""
"`modules/lightmapper_rd/lm_blendseams.glsl <https://github.com/godotengine/"
"godot/blob/4.2/modules/lightmapper_rd/lm_blendseams.glsl>`__"

msgid "Depth of field"
msgstr "景深"

msgid ""
"Only available in the Forward+ and Mobile renderers, not the Compatibility "
"renderer."
msgstr "僅於 Forward+ 與 Mobile 算繪器中提供，Compatibility 算繪器不支援。"

msgid ""
"The Forward+ and Mobile renderers use different approaches to DOF rendering, "
"with different visual results. This is done to best match the performance "
"characteristics of the target hardware. In Forward+, DOF is performed using "
"a compute shader. In Mobile, DOF is performed using a fragment shader "
"(raster)."
msgstr ""
"Forward+ 與 Mobile 算繪器採用不同的景深（DOF）算繪方法，視覺效果也各異。這是"
"為了最佳適配不同硬體的效能特性。Forward+ 採用運算著色器實作 DOF，Mobile 則以"
"片段著色器（光柵）完成。"

msgid ""
"Box, hexagon and circle bokeh shapes are available (from fastest to "
"slowest). Depth of field can optionally be jittered every frame to improve "
"its appearance when temporal antialiasing is enabled."
msgstr ""
"支援方形、六角形與圓形光斑（bokeh），順序由快至慢。開啟時間性抗鋸齒（TAA）"
"時，也可選擇讓景深每幀抖動以改善視覺效果。"

msgid "**Depth of field C++ code:**"
msgstr "**景深 C++ 程式碼：**"

msgid ""
"`servers/rendering/renderer_rd/effects/bokeh_dof.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/"
"bokeh_dof.cpp>`__"
msgstr ""
"`servers/rendering/renderer_rd/effects/bokeh_dof.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/"
"bokeh_dof.cpp>`__"

msgid "**Depth of field GLSL shader (compute - used for Forward+):**"
msgstr "**景深 GLSL 著色器（運算用於 Forward+）：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/bokeh_dof.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/bokeh_dof.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/bokeh_dof.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/bokeh_dof.glsl>`__"

msgid "**Depth of field GLSL shader (raster - used for Mobile):**"
msgstr "**景深 GLSL 著色器（光柵用於 Mobile）：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/bokeh_dof_raster.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/bokeh_dof_raster.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/bokeh_dof_raster.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/bokeh_dof_raster.glsl>`__"

msgid "Screen-space effects (SSAO, SSIL, SSR, SSS)"
msgstr "螢幕空間效果（SSAO、SSIL、SSR、SSS）"

msgid ""
"The Forward+ renderer supports screen-space ambient occlusion, screen-space "
"indirect lighting, screen-space reflections and subsurface scattering."
msgstr ""
"Forward+ 算繪器支援螢幕空間環境光遮蔽（SSAO）、螢幕空間間接照明（SSIL）、螢幕"
"空間反射（SSR）及次表面散射（SSS）。"

msgid ""
"SSAO uses an implementation derived from Intel's `ASSAO <https://"
"www.intel.com/content/www/us/en/developer/articles/technical/adaptive-screen-"
"space-ambient-occlusion.html>`__ (converted to Vulkan). SSIL is derived from "
"SSAO to provide high-performance indirect lighting."
msgstr ""
"SSAO 採用 Intel 的 `ASSAO <https://www.intel.com/content/www/us/en/developer/"
"articles/technical/adaptive-screen-space-ambient-occlusion.html>`__ 實作（改"
"寫為 Vulkan 版本）。SSIL 則以 SSAO 為基礎，提供高效能的間接照明。"

msgid ""
"When both SSAO and SSIL are enabled, parts of SSAO and SSIL are shared to "
"reduce the performance impact."
msgstr "當 SSAO 與 SSIL 同時啟用時，兩者部分運算資源會共用，以減少效能損耗。"

msgid ""
"SSAO and SSIL are performed at half resolution by default to improve "
"performance. SSR is always performed at half resolution to improve "
"performance."
msgstr ""
"預設情況下，SSAO 與 SSIL 皆以半解析度執行以提升效能。SSR 也一律採半解析度。"

msgid "**Screen-space effects C++ code:**"
msgstr "**螢幕空間效果 C++ 程式碼：**"

msgid ""
"`servers/rendering/renderer_rd/effects/ss_effects.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/"
"ss_effects.cpp>`__"
msgstr ""
"`servers/rendering/renderer_rd/effects/ss_effects.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/"
"ss_effects.cpp>`__"

msgid "**Screen-space ambient occlusion GLSL shader:**"
msgstr "**螢幕空間環境光遮蔽 GLSL 著色器：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssao.glsl <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"ssao.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssao.glsl <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"ssao.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_blur.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssao_blur.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_blur.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssao_blur.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_interleave.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssao_interleave.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_interleave.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssao_interleave.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_importance_map.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/ssao_importance_map.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_importance_map.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/ssao_importance_map.glsl>`__"

msgid "**Screen-space indirect lighting GLSL shader:**"
msgstr "**螢幕空間間接照明 GLSL 著色器：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssil.glsl <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"ssil.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssil.glsl <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"ssil.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_blur.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssil_blur.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_blur.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssil_blur.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_interleave.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssil_interleave.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_interleave.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssil_interleave.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_importance_map.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/ssil_importance_map.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_importance_map.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/ssil_importance_map.glsl>`__"

msgid "**Screen-space reflections GLSL shader:**"
msgstr "**螢幕空間反射 GLSL 著色器：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/screen_space_reflection.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/screen_space_reflection.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/screen_space_reflection.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/screen_space_reflection.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_scale.glsl <https://github.com/godotengine/godot/"
"blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_scale.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_scale.glsl <https://github.com/godotengine/godot/"
"blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_scale.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_filter.glsl <https://github.com/godotengine/godot/"
"blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_filter.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_filter.glsl <https://github.com/godotengine/godot/"
"blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_filter.glsl>`__"

msgid "**Subsurface scattering GLSL:**"
msgstr "**次表面散射 GLSL 著色器：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/effects/subsurface_scattering.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/subsurface_scattering.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/subsurface_scattering.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/subsurface_scattering.glsl>`__"

msgid "Sky rendering"
msgstr "天空算繪"

msgid ":ref:`doc_sky_shader`"
msgstr ":ref:`doc_sky_shader`"

msgid ""
"Godot supports using shaders to render the sky background. The radiance map "
"(which is used to provide ambient light and reflections for PBR materials) "
"is automatically updated based on the sky shader."
msgstr ""
"Godot 支援使用著色器進行天空背景算繪。輻射度貼圖（用於為 PBR 材質提供環境光及"
"反射）會根據天空著色器自動更新。"

msgid ""
"The SkyMaterial resources such as ProceduralSkyMaterial, PhysicalSkyMaterial "
"and PanoramaSkyMaterial generate a built-in shader for sky rendering. This "
"is similar to what BaseMaterial3D provides for 3D scene materials."
msgstr ""
"SkyMaterial 資源（如 ProceduralSkyMaterial、PhysicalSkyMaterial、"
"PanoramaSkyMaterial）會自動產生內建天空算繪著色器，與 BaseMaterial3D 為 3D 場"
"景材質產生著色器機制類似。"

msgid ""
"A detailed technical implementation can be found in the `Custom sky shaders "
"in Godot 4.0 <https://godotengine.org/article/custom-sky-shaders-"
"godot-4-0>`__ article."
msgstr ""
"詳細技術實作可參見「Godot 4.0 的自訂天空著色器 <https://godotengine.org/"
"article/custom-sky-shaders-godot-4-0>」文章。"

msgid "**Sky rendering C++ code:**"
msgstr "**天空算繪 C++ 程式碼：**"

msgid ""
"`servers/rendering/renderer_rd/environment/sky.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/environment/"
"sky.cpp>`__ - Sky rendering"
msgstr ""
"`servers/rendering/renderer_rd/environment/sky.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/environment/"
"sky.cpp>`__ - 天空算繪"

msgid ""
"`scene/resources/sky.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/resources/sky.cpp>`__ - Sky resource (not to be confused with sky "
"rendering)"
msgstr ""
"`scene/resources/sky.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/resources/sky.cpp>`__ - Sky 資源（非天空算繪本身）"

msgid ""
"`scene/resources/sky_material.cpp <https://github.com/godotengine/godot/blob/"
"4.2/scene/resources/sky_material.cpp>`__ SkyMaterial resources (used in the "
"Sky resource)"
msgstr ""
"`scene/resources/sky_material.cpp <https://github.com/godotengine/godot/blob/"
"4.2/scene/resources/sky_material.cpp>`__ - SkyMaterial 資源（用於 Sky 資源）"

msgid "**Sky rendering GLSL shader:**"
msgstr "**天空算繪 GLSL 著色器：**"

msgid "Volumetric fog"
msgstr "體積霧"

msgid ":ref:`doc_fog_shader`"
msgstr ":ref:`doc_fog_shader`"

msgid ""
"Godot supports a frustum-aligned voxel (froxel) approach to volumetric fog "
"rendering. As opposed to a post-processing filter, this approach is more "
"general-purpose as it can work with any light type. Fog can also use shaders "
"for custom behavior, which allows animating the fog or using a 3D texture to "
"represent density."
msgstr ""
"Godot 採用視錐體對齊體素（froxel）方法進行體積霧算繪，這與傳統後處理濾鏡不"
"同，更具通用性，能適用於各種光源。體積霧亦可用著色器自訂行為，例如製作動畫效"
"果或用 3D 紋理表示密度。"

msgid ""
"The FogMaterial resource generates a built-in shader for FogVolume nodes. "
"This is similar to what BaseMaterial3D provides for 3D scene materials."
msgstr ""
"FogMaterial 資源會自動為 FogVolume 節點產生內建著色器，與 BaseMaterial3D 處"
"理 3D 場景材質的方式相同。"

msgid ""
"A detailed technical explanation can be found in the `Fog Volumes arrive in "
"Godot 4.0 <https://godotengine.org/article/fog-volumes-arrive-in-godot-4>`__ "
"article."
msgstr ""
"詳細技術說明可參見「Godot 4.0 新增 Fog Volumes <https://godotengine.org/"
"article/fog-volumes-arrive-in-godot-4>」一文。"

msgid "**Volumetric fog C++ code:**"
msgstr "**體積霧 C++ 程式碼：**"

msgid ""
"`servers/rendering/renderer_rd/environment/fog.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/environment/"
"fog.cpp>`__ - General volumetric fog"
msgstr ""
"`servers/rendering/renderer_rd/environment/fog.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/environment/"
"fog.cpp>`__ - 一般體積霧"

msgid ""
"`scene/3d/fog_volume.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/3d/fog_volume.cpp>`__ - FogVolume node"
msgstr ""
"`scene/3d/fog_volume.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/3d/fog_volume.cpp>`__ - FogVolume 節點"

msgid ""
"`scene/resources/fog_material.cpp <https://github.com/godotengine/godot/blob/"
"4.2/scene/resources/fog_material.cpp>`__ - FogMaterial resource (used by "
"FogVolume)"
msgstr ""
"`scene/resources/fog_material.cpp <https://github.com/godotengine/godot/blob/"
"4.2/scene/resources/fog_material.cpp>`__ - FogMaterial 資源（FogVolume 專用）"

msgid "**Volumetric fog GLSL shaders:**"
msgstr "**體積霧 GLSL 著色器：**"

msgid ""
"`servers/rendering/renderer_rd/shaders/environment/volumetric_fog.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/volumetric_fog.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/volumetric_fog.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/volumetric_fog.glsl>`__"

msgid ""
"`servers/rendering/renderer_rd/shaders/environment/"
"volumetric_fog_process.glsl <https://github.com/godotengine/godot/blob/4.2/"
"servers/rendering/renderer_rd/shaders/environment/"
"volumetric_fog_process.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/"
"volumetric_fog_process.glsl <https://github.com/godotengine/godot/blob/4.2/"
"servers/rendering/renderer_rd/shaders/environment/"
"volumetric_fog_process.glsl>`__"

msgid "Occlusion culling"
msgstr "遮蔽剔除"

msgid ""
"While modern GPUs can handle drawing a lot of triangles, the number of draw "
"calls in complex scenes can still be a bottleneck (even with Vulkan, "
"Direct3D 12, and Metal)."
msgstr ""
"即使現代 GPU 能處理大量三角形，複雜場景中的繪製呼叫數（Draw Call）仍然可能成"
"為瓶頸（即便使用 Vulkan、Direct3D 12 或 Metal 亦然）。"

msgid ""
"Godot 4 supports occlusion culling to reduce overdraw (when the depth "
"prepass is disabled) and reduce vertex throughput. This is done by "
"rasterizing a low-resolution buffer on the CPU using `Embree <https://"
"github.com/embree/embree>`__. The buffer's resolution depends on the number "
"of CPU threads on the system, as this is done in parallel. This buffer "
"includes occluder shapes that were baked in the editor or created at runtime."
msgstr ""
"Godot 4 支援遮蔽剔除，可降低過度繪製（若未啟用深度預通道）並減少頂點運算負"
"擔。這是利用 `Embree <https://github.com/embree/embree>`__ 於 CPU 上光柵化低"
"解析度緩衝區來實現，緩衝區解析度取決於系統 CPU 執行緒數（會並行運作）。此緩衝"
"區涵蓋編輯器內烘焙或執行時產生的遮蔽物形狀。"

msgid ""
"As complex occluders can introduce a lot of strain on the CPU, baked "
"occluders can be simplified automatically when generated in the editor."
msgstr ""
"複雜遮蔽物會大幅增加 CPU 負擔，故於編輯器產生遮蔽物時可自動簡化其形狀。"

msgid ""
"Godot's occlusion culling doesn't support dynamic occluders yet, but "
"OccluderInstance3D nodes can still have their visibility toggled or be "
"moved. However, this will be slow when updating complex occluders this way. "
"Therefore, updating occluders at runtime is best done only on simple "
"occluder shapes such as quads or cuboids."
msgstr ""
"Godot 的遮蔽剔除尚未支援動態遮蔽物，但 OccluderInstance3D 節點仍可切換可見性"
"或移動。然而，這種方式若遇到複雜遮蔽物會極慢，因此建議僅對簡單形狀（如四邊"
"形、立方體）於執行時更新遮蔽物。"

msgid ""
"This CPU-based approach has a few advantages over other solutions, such as "
"portals and rooms or a GPU-based culling solution:"
msgstr ""
"這種以 CPU 為基礎的剔除方式，相較於門戶（Portals）房間法或 GPU 剔除方案有數項"
"優勢："

msgid ""
"No manual setup required (but can be tweaked manually for best performance)."
msgstr "無需人工設置（但可自訂調整以達最佳效能）。"

msgid ""
"No frame delay, which is problematic in cutscenes during camera cuts or when "
"the camera moves fast behind a wall."
msgstr ""
"無畫面延遲（Frame Delay）問題，這對於過場動畫、鏡頭切換或快速穿越牆壁的情境尤"
"其有利。"

msgid ""
"Works the same on all rendering drivers and methods, with no unpredictable "
"behavior depending on the driver or GPU hardware."
msgstr ""
"各種算繪驅動與方法間行為一致，不會因驅動或 GPU 硬體不同而出現不可預期行為。"

msgid ""
"Occlusion culling is performed by registering occluder meshes, which is done "
"using OccluderInstance3D *nodes* (which themselves use Occluder3D "
"*resources*). RenderingServer then performs occlusion culling by calling "
"Embree in RendererSceneOcclusionCull."
msgstr ""
"遮蔽剔除是透過註冊遮蔽物網格完成，方法為放置 OccluderInstance3D *節點*（其本"
"身連結 Occluder3D *資源*）。RenderingServer 會於 RendererSceneOcclusionCull "
"中呼叫 Embree 執行遮蔽剔除。"

msgid "**Occlusion culling C++ code:**"
msgstr "**遮蔽剔除 C++ 程式碼：**"

msgid ""
"`scene/3d/occluder_instance_3d.cpp <https://github.com/godotengine/godot/"
"blob/4.2/scene/3d/occluder_instance_3d.cpp>`__"
msgstr ""
"`scene/3d/occluder_instance_3d.cpp <https://github.com/godotengine/godot/"
"blob/4.2/scene/3d/occluder_instance_3d.cpp>`__"

msgid ""
"`servers/rendering/renderer_scene_occlusion_cull.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/"
"renderer_scene_occlusion_cull.cpp>`__"
msgstr ""
"`servers/rendering/renderer_scene_occlusion_cull.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/"
"renderer_scene_occlusion_cull.cpp>`__"

msgid "Visibility range (LOD)"
msgstr "可見範圍（LOD）"

msgid ""
"Godot supports manually authored hierarchical level of detail (HLOD), with "
"distances specified by the user in the inspector."
msgstr ""
"Godot 支援手動建立的階層式細節層級（HLOD），可於屬性面板為每個 LOD 指定啟用距"
"離。"

msgid ""
"In RenderingSceneCull, the ``_scene_cull()`` and ``_render_scene()`` "
"functions are where most of the LOD determination happens. Each viewport can "
"render the same mesh with different LODs (to allow for split screen "
"rendering to look correct)."
msgstr ""
"在 RenderingSceneCull 類別中，``_scene_cull()`` 與 ``_render_scene()`` 函式負"
"責決定 LOD。每個 Viewport 可對同一網格採用不同 LOD（以正確支援分割畫面算"
"繪）。"

msgid "**Visibility range C++ code:**"
msgstr "**可見範圍 C++ 程式碼：**"

msgid ""
"`servers/rendering/renderer_scene_cull.cpp <https://github.com/godotengine/"
"godot/blob/4.2/servers/rendering/renderer_scene_cull.cpp>`__"
msgstr ""
"`servers/rendering/renderer_scene_cull.cpp <https://github.com/godotengine/"
"godot/blob/4.2/servers/rendering/renderer_scene_cull.cpp>`__"

msgid "Automatic mesh LOD"
msgstr "自動網格 LOD"

msgid ""
"The ImporterMesh class is used for the 3D mesh import workflow in the "
"editor. Its ``generate_lods()`` function handles generating using the "
"`meshoptimizer <https://meshoptimizer.org/>`__ library."
msgstr ""
"ImporterMesh 類別用於編輯器內 3D 網格匯入流程。其 ``generate_lods()`` 函式會"
"呼叫 `meshoptimizer <https://meshoptimizer.org/>`__ 函式庫自動產生多層 LOD。"

msgid ""
"LOD mesh generation also generates shadow meshes at the same time. These are "
"meshes that have their vertices welded regardless of smoothing and "
"materials. This is used to improve shadow rendering performance by lowering "
"the vertex throughput required to render shadows."
msgstr ""
"LOD 網格產生時，也會同步產生陰影網格。這些陰影網格會將頂點焊接（無論平滑或材"
"質），以降低陰影算繪所需的頂點數，提升陰影效能。"

msgid ""
"The RenderingSceneCull class's ``_render_scene()`` function determines which "
"mesh LOD should be used when rendering. Each viewport can render the same "
"mesh with different LODs (to allow for split screen rendering to look "
"correct)."
msgstr ""
"RenderingSceneCull 類別的 ``_render_scene()`` 函式會決定算繪時使用哪個網格 "
"LOD。每個 Viewport 可對同一網格採用不同 LOD（以正確支援分割畫面算繪）。"

msgid ""
"The mesh LOD is automatically chosen based on a screen coverage metric. This "
"takes resolution and camera FOV changes into account without requiring user "
"intervention. The threshold multiplier can be adjusted in the project "
"settings."
msgstr ""
"網格 LOD 會根據畫面覆蓋率自動選擇，會考慮解析度與攝影機視角變化，無需使用者手"
"動調整。閾值倍數可於專案設定調整。"

msgid ""
"To improve performance, shadow rendering and reflection probe rendering also "
"choose their own mesh LOD thresholds (which can be different from the main "
"scene rendering)."
msgstr ""
"為提升效能，陰影算繪與反射探查算繪可自訂專用的網格 LOD 閾值（可與主場景不"
"同）。"

msgid "**Mesh LOD generation on import C++ code:**"
msgstr "**匯入時網格 LOD 產生 C++ 程式碼：**"

msgid ""
"`scene/resources/importer_mesh.cpp <https://github.com/godotengine/godot/"
"blob/4.2/scene/resources/importer_mesh.cpp>`__"
msgstr ""
"`scene/resources/importer_mesh.cpp <https://github.com/godotengine/godot/"
"blob/4.2/scene/resources/importer_mesh.cpp>`__"

msgid "**Mesh LOD determination C++ code:**"
msgstr "**網格 LOD 判定 C++ 程式碼：**"
