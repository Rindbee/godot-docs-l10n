#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom platform ports"
msgstr "自訂平台移植"

msgid ""
"Similar to :ref:`doc_custom_modules_in_cpp`, Godot's multi-platform "
"architecture is designed in a way that allows creating platform ports "
"without modifying any existing source code."
msgstr ""
"如同 :ref:`doc_custom_modules_in_cpp`，Godot 的多平台架構設計允許你在不修改現"
"有原始碼的情況下，建立自訂平台移植。"

msgid ""
"An example of a custom platform port distributed independently from the "
"engine is `FRT <https://github.com/efornara/frt>`__, which targets single-"
"board computers. Note that this platform port currently targets Godot 3.x; "
"therefore, it does not use the :ref:`class_DisplayServer` abstraction that "
"is new in Godot 4."
msgstr ""
"有一個獨立於引擎本體發佈的自訂平台移植範例為 `FRT <https://github.com/"
"efornara/frt>`__，其目標為單板電腦。請注意，該平台移植目前僅支援 Godot 3.x，"
"因此並未使用 Godot 4 新增的 :ref:`class_DisplayServer` 抽象層。"

msgid "Some reasons to create custom platform ports might be:"
msgstr "你可能想建立自訂平台移植的原因包括："

msgid ""
"You want to :ref:`port your game to consoles <doc_consoles>`, but wish to "
"write the platform layer yourself. This is a long and arduous process, as it "
"requires signing NDAs with console manufacturers, but it allows you to have "
"full control over the console porting process."
msgstr ""
"你想要 :ref:`將你的遊戲移植至主機平台 <doc_consoles>`，但希望自行撰寫平台層。"
"這是相當長且艱鉅的過程，因為必須與主機製造商簽署保密協議（NDA），但這樣你可以"
"完全掌握移植流程。"

msgid ""
"You want to port Godot to an exotic platform that isn't currently supported."
msgstr "你想將 Godot 移植到目前尚未支援的特殊平台。"

msgid ""
"If you have questions about creating a custom platform port, feel free to "
"ask in the ``#platforms`` channel of the `Godot Contributors Chat <https://"
"chat.godotengine.org/channel/platforms>`__."
msgstr ""
"如果你對建立自訂平台移植有任何問題，歡迎在 `Godot 貢獻者聊天室 <https://"
"chat.godotengine.org/channel/platforms>`__ 的「#platforms」頻道中發問。"

msgid ""
"Godot is a modern engine with modern requirements. Even if you only intend "
"to run simple 2D projects on the target platform, it still requires an "
"amount of memory that makes it unviable to run on most retro consoles. For "
"reference, in Godot 4, an empty project with nothing visible requires about "
"100 MB of RAM to run on Linux (50 MB in headless mode)."
msgstr ""
"Godot 是一款現代化的引擎，對硬體有現代等級的需求。即使你只打算在目標平台上執"
"行單純的 2D 專案，仍需消耗足夠的記憶體，使其無法在大多數復古主機上運作。以 "
"Godot 4 為例，在 Linux 上執行一個空白專案約需 100 MB RAM（無頭模式約 50 "
"MB）。"

msgid ""
"If you want to run Godot on heavily memory-constrained platforms, older "
"Godot versions have lower memory requirements. The porting process is "
"similar, with the exception of :ref:`class_DisplayServer` not being split "
"from the :ref:`class_OS` singleton."
msgstr ""
"如果你想在記憶體非常有限的平台上運行 Godot，可以考慮使用較舊版本的 Godot，其"
"記憶體需求較低。移植流程大致相同，唯一差異是舊版 Godot 並未"
"將 :ref:`class_DisplayServer` 從 :ref:`class_OS` 單例中分離。"

msgid "Official platform ports"
msgstr "官方平台移植"

msgid ""
"The official platform ports can be used as a reference when creating a "
"custom platform port:"
msgstr "建立自訂平台移植時，可參考官方平台移植的實作："

msgid ""
"`Windows <https://github.com/godotengine/godot/tree/master/platform/"
"windows>`__"
msgstr ""
"`Windows <https://github.com/godotengine/godot/tree/master/platform/"
"windows>`__"

msgid ""
"`macOS <https://github.com/godotengine/godot/tree/master/platform/macos>`__"
msgstr ""
"`macOS <https://github.com/godotengine/godot/tree/master/platform/macos>`__"

msgid ""
"`Linux/\\*BSD <https://github.com/godotengine/godot/tree/master/platform/"
"linuxbsd>`__"
msgstr ""
"`Linux/\\*BSD <https://github.com/godotengine/godot/tree/master/platform/"
"linuxbsd>`__"

msgid ""
"`Android <https://github.com/godotengine/godot/tree/master/platform/"
"android>`__"
msgstr ""
"`Android <https://github.com/godotengine/godot/tree/master/platform/"
"android>`__"

msgid "`iOS <https://github.com/godotengine/godot/tree/master/platform/ios>`__"
msgstr ""
"`iOS <https://github.com/godotengine/godot/tree/master/platform/ios>`__"

msgid "`Web <https://github.com/godotengine/godot/tree/master/platform/web>`__"
msgstr ""
"`Web <https://github.com/godotengine/godot/tree/master/platform/web>`__"

msgid ""
"While platform code is usually self-contained, there are exceptions to this "
"rule. For instance, audio drivers that are shared across several platforms "
"and rendering drivers are located in the `drivers/ folder <https://"
"github.com/godotengine/godot/tree/master/drivers>`__ of the Godot source "
"code."
msgstr ""
"雖然平台程式碼通常是獨立的，但也有例外。例如，跨多平台共用的音效驅動與算繪驅"
"動程式，會被放在 Godot 原始碼的 `drivers/ 資料夾 <https://github.com/"
"godotengine/godot/tree/master/drivers>`__ 中。"

msgid "Creating a custom platform port"
msgstr "建立自訂平台移植"

msgid ""
"Creating a custom platform port is a large undertaking which requires prior "
"knowledge of the platform's SDKs. Depending on what features you need, the "
"amount of work needed varies:"
msgstr ""
"建立自訂平台移植是一項龐大的工程，需要事先熟悉該平台的 SDK。你所需的功能越"
"多，所需投入的工作量也會隨之增加："

msgid "Required features of a platform port"
msgstr "平台移植必備功能"

msgid ""
"At the very least, a platform port must have methods from "
"the :ref:`class_OS` singleton implemented to be buildable and usable for "
"headless operation. A ``logo.svg`` (32×32) vector image must also be present "
"within the platform folder. This logo is displayed in the Export dialog for "
"each export preset targeting the platform in question."
msgstr ""
"最低限度，平台移植必須實作 :ref:`class_OS` 單例中的方法，才能進行建置並支援無"
"頭模式運作。此外，平台資料夾內必須有一個 ``logo.svg`` （32×32像素）向量圖，這"
"個圖示將出現在匯出預設檔案中。"

msgid ""
"See `this implementation <https://github.com/godotengine/godot/blob/master/"
"platform/linuxbsd/os_linuxbsd.cpp>`__ for the Linux/\\*BSD platform as an "
"example. See also the `OS singleton header <https://github.com/godotengine/"
"godot/blob/master/core/os/os.h>`__ for reference."
msgstr ""
"請參考 Linux/\\*BSD 平台的 `這個實作 <https://github.com/godotengine/godot/"
"blob/master/platform/linuxbsd/os_linuxbsd.cpp>`__ 作為範例，也可參考 `OS 單例"
"標頭 <https://github.com/godotengine/godot/blob/master/core/os/os.h>`__。"

msgid ""
"If your target platform is UNIX-like, consider inheriting from the "
"``OS_Unix`` class to get much of the work done automatically."
msgstr ""
"如果你的目標平台類似 UNIX，建議繼承 `OS_Unix` 類別，這樣能自動完成大部分作"
"業。"

msgid ""
"If the platform is not UNIX-like, you might use the `Windows port <https://"
"github.com/godotengine/godot/blob/master/platform/windows/os_windows.cpp>`__ "
"as a reference."
msgstr ""
"如果平台不是類 UNIX，可以參考 `Windows 移植 <https://github.com/godotengine/"
"godot/blob/master/platform/windows/os_windows.cpp>`__ 的實作。"

msgid "**detect.py file**"
msgstr "**detect.py 檔案**"

msgid ""
"A ``detect.py`` file must be created within the platform's folder with all "
"methods implemented. This file is required for SCons to detect the platform "
"as a valid option for compiling. See the `detect.py file <https://github.com/"
"godotengine/godot/blob/master/platform/linuxbsd/detect.py>`__ for the Linux/"
"\\*BSD platform as an example."
msgstr ""
"你必須在平台資料夾下建立 `detect.py` 檔案並實作所有方法。SCons 需要這個檔案來"
"判斷平台是否為可用的編譯選項。可參考 Linux/\\*BSD 平台的 `detect.py 檔案 "
"<https://github.com/godotengine/godot/blob/master/platform/linuxbsd/"
"detect.py>`__。"

msgid "All methods should be implemented within ``detect.py`` as follows:"
msgstr "``detect.py`` 內應實作下列所有方法："

msgid ""
"``is_active()``: Can be used to temporarily disable building for a platform. "
"This should generally always return ``True``."
msgstr "``is_active()``：可用於暫時停用該平台建置。通常應永遠回傳 ``True``。"

msgid "``get_name()``: Returns the platform's user-visible name as a string."
msgstr "``get_name()``：回傳平台在使用者介面可見的名稱字串。"

msgid ""
"``can_build()``: Return ``True`` if the host system is able to build for the "
"target platform, ``False`` otherwise. Do not put slow checks here, as this "
"is queried when the list of platforms is requested by the user. Use "
"``configure()`` for extensive dependency checks instead."
msgstr ""
"``can_build()``：如果主機系統能建置該平台，則回傳 ``True``，否則回傳 "
"``False``。不要在這裡放慢速檢查，因為這會在使用者查詢平台清單時執行。請改用 "
"``configure()`` 進行較完整的相依檢查。"

msgid ""
"``get_opts()``: Returns the list of SCons build options that can be defined "
"by the user for this platform."
msgstr "``get_opts()``：回傳該平台可由使用者自訂的 SCons 建置選項清單。"

msgid ""
"``get_flags()``: Returns the list of overridden SCons flags for this "
"platform."
msgstr "``get_flags()``：回傳此平台會覆寫的 SCons 旗標清單。"

msgid ""
"``configure()``: Perform build configuration, such as selecting compiler "
"options depending on SCons options chosen."
msgstr "``configure()``：執行建置組態，例如根據 SCons 選項自動選擇編譯器參數。"

msgid "Optional features of a platform port"
msgstr "平台移植的選用功能"

msgid ""
"In practice, headless operation doesn't suffice if you want to see anything "
"on screen and handle input devices. You may also want audio output for most "
"games."
msgstr ""
"實務上，如果你要顯示畫面並處理輸入裝置，僅有無頭模式是不夠的。對大多數遊戲來"
"說，也需要音效輸出功能。"

msgid ""
"*Some links on this list point to the Linux/\\*BSD platform implementation "
"as a reference.*"
msgstr "*本清單中的部分連結以 Linux/\\*BSD 平台實作為參考。*"

msgid ""
"One or more `DisplayServers <https://github.com/godotengine/godot/blob/"
"master/platform/linuxbsd/x11/display_server_x11.cpp>`__, with the windowing "
"methods implemented. DisplayServer also covers features such as mouse "
"support, touchscreen support and tablet driver (for pen input). See the "
"`DisplayServer singleton header <https://github.com/godotengine/godot/blob/"
"master/servers/display_server.h>`__ for reference."
msgstr ""
"一個或多個 `DisplayServer <https://github.com/godotengine/godot/blob/master/"
"platform/linuxbsd/x11/display_server_x11.cpp>`__，需實作視窗管理相關方法。"
"DisplayServer 也涵蓋滑鼠、觸控螢幕、繪圖板（筆輸入）等功能。可參考 "
"`DisplayServer 單例標頭 <https://github.com/godotengine/godot/blob/master/"
"servers/display_server.h>`__。"

msgid ""
"For platforms not featuring full windowing support (or if it's not relevant "
"for the port you are making), most windowing functions can be left mostly "
"unimplemented. These functions can be made to only check if the window ID is "
"``MAIN_WINDOW_ID`` and specific operations like resizing may be tied to the "
"platform's screen resolution feature (if relevant). Any attempt to create or "
"manipulate other window IDs can be rejected."
msgstr ""
"對於不具備完整視窗系統的平台（或你的移植不需要完整視窗支援），大部分視窗相關"
"函式可以保持未實作。其功能僅需檢查視窗 ID 是否為 ``MAIN_WINDOW_ID``，如調整大"
"小等操作可直接對應到平台的螢幕解析度功能（如適用）。其他視窗 ID 的建立或操作"
"可直接拒絕。"

msgid ""
"*If the target platform supports the graphics APIs in question:* Rendering "
"context for `Vulkan <https://github.com/godotengine/godot/blob/master/"
"platform/linuxbsd/x11/rendering_context_driver_vulkan_x11.cpp>`__, `Direct3D "
"12 <https://github.com/godotengine/godot/blob/master/drivers/d3d12/"
"rendering_context_driver_d3d12.cpp>`__ `OpenGL 3.3 or OpenGL ES 3.0 <https://"
"github.com/godotengine/godot/blob/master/platform/linuxbsd/x11/"
"gl_manager_x11.cpp>`__."
msgstr ""
"*如果目標平台支援相關圖形 API：* 需實作 `Vulkan <https://github.com/"
"godotengine/godot/blob/master/platform/linuxbsd/x11/"
"rendering_context_driver_vulkan_x11.cpp>`__、`Direct3D 12 <https://"
"github.com/godotengine/godot/blob/master/drivers/d3d12/"
"rendering_context_driver_d3d12.cpp>`__、`OpenGL 3.3 或 OpenGL ES 3.0 "
"<https://github.com/godotengine/godot/blob/master/platform/linuxbsd/x11/"
"gl_manager_x11.cpp>`__ 的算繪上下文。"

msgid ""
"Input handlers for `keyboard <https://github.com/godotengine/godot/blob/"
"master/platform/linuxbsd/x11/key_mapping_x11.cpp>`__ and `controller "
"<https://github.com/godotengine/godot/blob/master/platform/linuxbsd/"
"joypad_linux.cpp>`__."
msgstr ""
"必須提供 `鍵盤 <https://github.com/godotengine/godot/blob/master/platform/"
"linuxbsd/x11/key_mapping_x11.cpp>`__ 與 `控制器 <https://github.com/"
"godotengine/godot/blob/master/platform/linuxbsd/joypad_linux.cpp>`__ 的輸入處"
"理程式。"

msgid ""
"One or more `audio drivers <https://github.com/godotengine/godot/blob/master/"
"drivers/pulseaudio/audio_driver_pulseaudio.cpp>`__. The audio driver can be "
"located in the ``platform/`` folder (this is done for the Android and Web "
"platforms), or in the ``drivers/`` folder if multiple platforms may be using "
"this audio driver. See the `AudioServer singleton header <https://github.com/"
"godotengine/godot/blob/master/servers/audio_server.h>`__ for reference."
msgstr ""
"一個或多個 `音效驅動 <https://github.com/godotengine/godot/blob/master/"
"drivers/pulseaudio/audio_driver_pulseaudio.cpp>`__。音效驅動可以放在 "
"``platform/`` 資料夾（如 Android、Web 平台），或若多平台共用則可放於 "
"``drivers/`` 資料夾。可參考 `AudioServer 單例標頭 <https://github.com/"
"godotengine/godot/blob/master/servers/audio_server.h>`__。"

msgid ""
"`Crash handler <https://github.com/godotengine/godot/blob/master/platform/"
"linuxbsd/crash_handler_linuxbsd.cpp>`__, for printing crash backtraces when "
"the game crashes. This allows for easier troubleshooting on platforms where "
"logs aren't readily accessible."
msgstr ""
"`當機處理器 <https://github.com/godotengine/godot/blob/master/platform/"
"linuxbsd/crash_handler_linuxbsd.cpp>`__，可於遊戲當機時列印回溯，有助於在無法"
"直接取得日誌的平台上進行除錯。"

msgid ""
"`Text-to-speech driver <https://github.com/godotengine/godot/blob/master/"
"platform/linuxbsd/tts_linux.cpp>`__ (for accessibility)."
msgstr ""
"`文字轉語音驅動 <https://github.com/godotengine/godot/blob/master/platform/"
"linuxbsd/tts_linux.cpp>`__ （提升無障礙性）。"

msgid ""
"`Export handler <https://github.com/godotengine/godot/tree/master/platform/"
"linuxbsd/export>`__ (for exporting from the editor, including :ref:`doc_one-"
"click_deploy`). Not required if you intend to export only a PCK from the "
"editor, then run the export template binary directly by renaming it to match "
"the PCK file. See the `EditorExportPlatform header <https://github.com/"
"godotengine/godot/blob/master/editor/export/editor_export_platform.h>`__ for "
"reference. ``run_icon.svg`` (16×16) should be present within the platform "
"folder if :ref:`doc_one-click_deploy` is implemented for the target "
"platform. This icon is displayed at the top of the editor when one-click "
"deploy is set up for the target platform."
msgstr ""
"`匯出處理器 <https://github.com/godotengine/godot/tree/master/platform/"
"linuxbsd/export>`__ （用於從編輯器匯出，包含 :ref:`doc_one-click_deploy` 功"
"能）。如果你只需從編輯器匯出 PCK 並直接執行範本二進位檔，則不必實作匯出處理"
"器。可參考 `EditorExportPlatform 標頭 <https://github.com/godotengine/godot/"
"blob/master/editor/export/editor_export_platform.h>`__ 。若實"
"作 :ref:`doc_one-click_deploy` ，平台資料夾應包含 ``run_icon.svg`` "
"（16×16），此圖示會顯示於編輯器上方。"

msgid ""
"If the target platform doesn't support running Vulkan, Direct3D 12, OpenGL "
"3.3, or OpenGL ES 3.0, you have two options:"
msgstr ""
"如果目標平台不支援運行 Vulkan、Direct3D 12、OpenGL 3.3 或 OpenGL ES 3.0，你有"
"兩種選擇："

msgid ""
"Use a library at runtime to translate Vulkan or OpenGL calls to another "
"graphics API. For example, `MoltenVK <https://moltengl.com/moltenvk/>`__ is "
"used on macOS to translate Vulkan to Metal at runtime."
msgstr ""
"於執行時使用函式庫將 Vulkan 或 OpenGL 呼叫轉換為其他圖形 API。例如，macOS 上"
"會用 `MoltenVK <https://moltengl.com/moltenvk/>`__ 將 Vulkan 呼叫即時轉換為 "
"Metal。"

msgid ""
"Create a new renderer from scratch. This is a large undertaking, especially "
"if you want to support both 2D and 3D rendering with advanced features."
msgstr ""
"從零開始設計新的算繪器。這是非常大的工程，尤其是如果你要同時支援進階 2D 與 "
"3D 算繪功能。"

msgid "Distributing a custom platform port"
msgstr "發佈自訂平台移植"

msgid ""
"Before distributing a custom platform port, make sure you're allowed to "
"distribute all the code that is being linked against. Console SDKs are "
"typically under NDAs which prevent redistribution to the public."
msgstr ""
"在發佈自訂平台移植前，請確認你有權分發所有連結到的程式碼。主機平台 SDK 通常"
"受 NDA 保護，禁止對外公開散布。"

msgid ""
"Platform ports are designed to be as self-contained as possible. Most of the "
"code can be kept within a single folder located in ``platform/``. "
"Like :ref:`doc_custom_modules_in_cpp`, this allows for streamlining the "
"build process by making it possible to ``git clone`` a platform folder "
"within a Godot repository clone's ``platform/`` folder, then run ``scons "
"platform=<name>``. No other steps are necessary for building, unless third-"
"party platform-specific dependencies need to be installed first."
msgstr ""
"平台移植設計上儘量自給自足。大多數程式碼都能放在 `platform/` 子資料夾內。"
"與 :ref:`doc_custom_modules_in_cpp` 類似，只需將平台資料夾 `git clone` 到 "
"Godot 專案的 `platform/` 目錄，執行 `scons platform=<名稱>` 就能建置。除非需"
"要安裝第三方依賴，否則不需其他步驟。"

msgid ""
"However, when a custom rendering driver is needed, another folder must be "
"added in ``drivers/``. In this case, the platform port can be distributed as "
"a fork of the Godot repository, or as a collection of several folders that "
"can be added over a Godot Git repository clone."
msgstr ""
"但如果需要自訂算繪驅動，就必須在 `drivers/` 資料夾下新增其他目錄。這種情況"
"下，可以將平台移植作為 Godot 倉庫的 fork 發佈，或作為多個可套用到 Godot 倉庫 "
"clone 的目錄組合發佈。"
