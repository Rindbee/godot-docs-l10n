#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Unit testing"
msgstr "單元測試"

msgid "Platform and target support"
msgstr "平台與目標支援"

msgid ""
"C++ unit tests can be run on Linux, macOS, and Windows operating systems."
msgstr "C++ 單元測試可在 Linux、macOS 與 Windows 作業系統上執行。"

msgid ""
"Tests can only be run with editor ``tools`` enabled, which means that export "
"templates cannot be tested currently."
msgstr ""
"僅在啟用編輯器 ``tools`` 時才能執行測試，代表目前無法針對匯出範本進行測試。"

msgid "Running tests"
msgstr "執行測試"

msgid ""
"Before tests can be actually run, the engine must be compiled with the "
"``tests`` build option enabled (and any other build option you typically "
"use), as the tests are not compiled as part of the engine by default:"
msgstr ""
"在實際執行測試前，必須以啟用 ``tests`` 編譯選項（以及你慣用的其他選項）來編譯"
"引擎，因為預設情況下測試不會納入引擎本身："

msgid ""
"Once the build is done, run the tests with a ``--test`` command-line option:"
msgstr "編譯完成後，使用 ``--test`` 命令列選項執行測試："

msgid ""
"The test run can be configured with the various doctest-specific command-"
"line options. To retrieve the full list of supported options, run the ``--"
"test`` command with the ``--help`` option:"
msgstr ""
"測試執行時可透過多種 doctest 專用命令列選項來設定。若要取得所有支援的選項，可"
"在 ``--test`` 命令後加上 ``--help``："

msgid ""
"Any other options and arguments after the ``--test`` command are treated as "
"arguments for doctest."
msgstr "``--test`` 命令之後的所有選項與參數，都會作為 doctest 的參數。"

msgid ""
"Tests are compiled automatically if you use the ``dev_mode=yes`` SCons "
"option. ``dev_mode=yes`` is recommended if you plan on contributing to the "
"engine development as it will automatically treat compilation warnings as "
"errors. The continuous integration system will fail if any compilation "
"warnings are detected, so you should strive to fix all warnings before "
"opening a pull request."
msgstr ""
"如果你在 SCons 編譯時加上 ``dev_mode=yes``，測試會自動編譯。如果你有意貢獻引"
"擎開發，建議使用 ``dev_mode=yes``，因為它會把編譯警告自動視為錯誤。持續整合"
"（CI）系統偵測到任何警告都會讓檢查失敗，因此請於發送 pull request 前修正所有"
"警告。"

msgid "Filtering tests"
msgstr "篩選測試"

msgid ""
"By default, all tests are run if you don't supply any extra arguments after "
"the ``--test`` command. But if you're writing new tests or would like to see "
"the successful assertions output coming from those tests for debugging "
"purposes, you can run the tests of interest with the various filtering "
"options provided by doctest."
msgstr ""
"預設狀況下，若在 ``--test`` 指令後未加任何參數，會執行所有測試。但若你正在撰"
"寫新測試，或想針對特定測試進行偵錯並觀察其成功判斷提示輸出，可以搭配 doctest "
"提供的各種篩選選項來執行特定測試。"

msgid ""
"The wildcard syntax ``*`` is supported for matching any number of characters "
"in test suites, test cases, and source file names:"
msgstr ""
"支援萬用字元 ``*`` 語法，可在測試組、測試案例、原始檔案名稱中配對任意字元："

msgid "**Filter options**"
msgstr "**篩選選項**"

msgid "**Shorthand**"
msgstr "**縮寫**"

msgid "**Examples**"
msgstr "**範例**"

msgid "``--test-suite``"
msgstr "``--test-suite``"

msgid "``-ts``"
msgstr "``-ts``"

msgid "``-ts=\"*[GDScript]*\"``"
msgstr "``-ts=\"*[GDScript]*\"``"

msgid "``--test-case``"
msgstr "``--test-case``"

msgid "``-tc``"
msgstr "``-tc``"

msgid "``-tc=\"*[String]*\"``"
msgstr "``-tc=\"*[String]*\"``"

msgid "``--source-file``"
msgstr "``--source-file``"

msgid "``-sf``"
msgstr "``-sf``"

msgid "``-sf=\"*test_color*\"``"
msgstr "``-sf=\"*test_color*\"``"

msgid "For instance, to run only the ``String`` unit tests, run:"
msgstr "例如，只執行 ``String`` 單元測試時，請執行："

msgid ""
"Successful assertions output can be enabled with the ``--success`` (``-s``) "
"option, and can be combined with any combination of filtering options above, "
"for instance:"
msgstr ""
"可加上 ``--success``（縮寫 ``-s``）選項來顯示成功判斷提示的輸出，也可以與前述"
"篩選選項組合，例如："

msgid ""
"Specific tests can be skipped with corresponding ``-exclude`` options. As of "
"now, some tests include random stress tests which take a while to execute. "
"In order to skip those kind of tests, run the following command:"
msgstr ""
"可用對應的 ``-exclude`` 選項來略過特定測試。目前有部分測試屬於隨機壓力測試，"
"執行時間較長。若要略過這些測試，可執行以下命令："

msgid "Writing tests"
msgstr "撰寫測試"

msgid ""
"Test suites represent C++ header files which must be included as part of the "
"main test entry point in ``tests/test_main.cpp``. Most test suites are "
"located directly under ``tests/`` directory."
msgstr ""
"測試組對應 C++ 標頭檔（header），必須包含在主要測試進入點 ``tests/"
"test_main.cpp`` 之中。大多數測試組直接放在 ``tests/`` 資料夾下。"

msgid ""
"All header files are prefixed with ``test_``, and this is a naming "
"convention which the Godot build system relies on to detect tests throughout "
"the engine."
msgstr ""
"所有測試標頭檔名稱都以 ``test_`` 為前綴，這是 Godot 編譯系統用來自動偵測引擎"
"測試的命名慣例。"

msgid "Here's a minimal working test suite with a single test case written:"
msgstr "以下是一個僅含一個測試案例的最基本測試組範例："

msgid ""
"You can quickly generate new tests using the ``create_test.py`` script found "
"in the ``tests/`` directory. This script automatically creates a new test "
"file with the required boilerplate code in the appropriate location. It's "
"also able to automatically include the new header in ``tests/test_main.cpp`` "
"using invasive mode (``-i`` flag). To view usage instructions, run the "
"script with the ``-h`` flag."
msgstr ""
"你可以用 ``tests/`` 目錄下的 ``create_test.py`` 腳本快速產生新測試。這個腳本"
"會在正確的位置自動建立含有必要模板程式碼的新測試檔案，也可用侵入式模式（``-"
"i`` 參數）自動在 ``tests/test_main.cpp`` 加入新標頭檔。欲查看使用說明，請加"
"上 ``-h`` 參數執行該腳本。"

msgid ""
"The ``tests/test_macros.h`` header encapsulates everything which is needed "
"for writing C++ unit tests in Godot. It includes doctest assertion and "
"logging macros such as ``CHECK`` as seen above, and of course the "
"definitions for writing test cases themselves."
msgstr ""
"``tests/test_macros.h`` 標頭檔包涵了在 Godot 撰寫 C++ 單元測試所需的一切，包"
"括如上例的 doctest 判斷提示宏（如 ``CHECK``），以及撰寫測試案例所需的定義。"

msgid ""
"`tests/test_macros.h <https://github.com/godotengine/godot/blob/master/tests/"
"test_macros.h>`_ source code for currently implemented macros and aliases "
"for them."
msgstr ""
"`tests/test_macros.h <https://github.com/godotengine/godot/blob/master/tests/"
"test_macros.h>`_ 提供目前所有巨集與別名的原始碼。"

msgid ""
"Test cases are created using ``TEST_CASE`` function-like macro. Each test "
"case must have a brief description written in parentheses, optionally "
"including custom tags which allow to filter the tests at runtime, such as "
"``[String]``, ``[Stress]`` etc."
msgstr ""
"測試案例需使用 ``TEST_CASE`` 類函式巨集建立。每個測試案例必須在括號內加上簡要"
"描述，也可選擇性附加自訂標籤（如 ``[String]``、``[Stress]``），以便於執行時過"
"濾測試。"

msgid ""
"Test cases are written in a dedicated namespace. This is not required, but "
"allows to prevent naming collisions for when other static helper functions "
"are written to accommodate the repeating testing procedures such as "
"populating common test data for each test, or writing parameterized tests."
msgstr ""
"建議將測試案例寫在專用命名空間內，雖然不是強制，但這樣能避免你為了重複測試流"
"程（如共用測試資料、參數化測試等）編寫輔助函式時發生命名衝突。"

msgid ""
"Godot supports writing tests per C++ module. For instructions on how to "
"write module tests, refer to :ref:`doc_custom_module_unit_tests`."
msgstr ""
"Godot 支援針對 C++ 模組撰寫測試。如何撰寫模組測試，請參"
"考 :ref:`doc_custom_module_unit_tests`。"

msgid "Subcases"
msgstr "子案例"

msgid ""
"In situations where you have a common setup for several test cases with only "
"slight variations, subcases can be very helpful. Here's an example:"
msgstr ""
"若多個測試案例僅有細微差異且共用大部分設定，可善用子案例（subcases）簡化程式"
"碼。以下為範例："

msgid ""
"Each ``SUBCASE`` causes the ``TEST_CASE`` to be executed from the beginning. "
"Subcases can be nested to an arbitrary depth, but it is advised to limit "
"nesting to no more than one level deep."
msgstr ""
"每個 ``SUBCASE`` 都會讓 ``TEST_CASE`` 從頭開始執行。子案例可任意巢狀，但建議"
"最多只巢狀一層。"

msgid "Assertions"
msgstr "判斷提示"

msgid ""
"A list of all commonly used assertions used throughout the Godot tests, "
"sorted by severity."
msgstr "以下為 Godot 測試常用的判斷提示，依嚴重性排序。"

msgid "**Assertion**"
msgstr "**判斷提示**"

msgid "**Description**"
msgstr "**說明**"

msgid "``REQUIRE``"
msgstr "``REQUIRE``"

msgid ""
"Test if condition holds true. Fails the entire test immediately if the "
"condition does not hold true."
msgstr "測試條件是否為真。若條件不成立，立即使整個測試失敗。"

msgid "``REQUIRE_FALSE``"
msgstr "``REQUIRE_FALSE``"

msgid ""
"Test if condition does not hold true. Fails the entire test immediately if "
"the condition holds true."
msgstr "測試條件是否為假。若條件成立，立即使整個測試失敗。"

msgid "``CHECK``"
msgstr "``CHECK``"

msgid ""
"Test if condition holds true. Marks the test run as failing, but allow to "
"run other assertions."
msgstr "測試條件是否為真。若失敗會標記該測試為失敗，但仍繼續執行其他判斷提示。"

msgid "``CHECK_FALSE``"
msgstr "``CHECK_FALSE``"

msgid ""
"Test if condition does not hold true. Marks the test run as failing, but "
"allow to run other assertions."
msgstr "測試條件是否為假。若失敗會標記該測試為失敗，但仍繼續執行其他判斷提示。"

msgid "``WARN``"
msgstr "``WARN``"

msgid ""
"Test if condition holds true. Does not fail the test under any circumstance, "
"but logs a warning if something does not hold true."
msgstr ""
"測試條件是否為真。不論條件如何都不會使測試失敗，但若條件不成立則會記錄警告訊"
"息。"

msgid "``WARN_FALSE``"
msgstr "``WARN_FALSE``"

msgid ""
"Test if condition does not hold true. Does not fail the test under any "
"circumstance, but logs a warning if something holds true."
msgstr ""
"測試條件是否為假。不論條件如何都不會使測試失敗，但若條件成立則會記錄警告訊"
"息。"

msgid ""
"All of the above assertions have corresponding ``*_MESSAGE`` macros, which "
"allow to print optional message with rationale of what should happen."
msgstr "上述所有判斷提示皆有對應 ``*_MESSAGE`` 巨集，可用來輸出補充說明訊息。"

msgid ""
"Prefer to use ``CHECK`` for self-explanatory assertions and "
"``CHECK_MESSAGE`` for more complex ones if you think that it deserves a "
"better explanation."
msgstr ""
"若判斷提示意義明確，建議用 ``CHECK``，較複雜且需補充說明之處則用 "
"``CHECK_MESSAGE``。"

msgid "Logging"
msgstr "記錄"

msgid ""
"The test output is handled by doctest itself, and does not rely on Godot "
"printing or logging functionality at all, so it's recommended to use "
"dedicated macros which allow to log test output in a format written by "
"doctest."
msgstr ""
"測試輸出由 doctest 處理，完全不依賴 Godot 內建的列印或記錄功能，因此建議使用"
"專用巨集以 doctest 格式記錄測試輸出。"

msgid "**Macro**"
msgstr "**巨集**"

msgid "``MESSAGE``"
msgstr "``MESSAGE``"

msgid "Prints a message."
msgstr "輸出一則訊息。"

msgid "``FAIL_CHECK``"
msgstr "``FAIL_CHECK``"

msgid ""
"Marks the test as failing, but continue the execution. Can be wrapped in "
"conditionals for complex checks."
msgstr "將測試標記為失敗，但會繼續執行。可用於條件判斷中處理複雜檢查。"

msgid "``FAIL``"
msgstr "``FAIL``"

msgid ""
"Fails the test immediately. Can be wrapped in conditionals for complex "
"checks."
msgstr "立即使測試失敗。可用於條件判斷中進行複雜檢查。"

msgid ""
"Different reporters can be chosen at runtime. For instance, here's how the "
"output can be redirected to an XML file:"
msgstr "執行時可指定不同輸出格式，舉例來說，以下指令可將輸出導向 XML 檔案："

msgid "Testing failure paths"
msgstr "測試失敗路徑"

msgid ""
"Sometimes, it's not always feasible to test for an *expected* result. With "
"the Godot development philosophy of that the engine should not crash and "
"should gracefully recover whenever a non-fatal error occurs, it's important "
"to check that those failure paths are indeed safe to execute without "
"crashing the engine."
msgstr ""
"有時無法總是測試「預期」結果。根據 Godot 的開發理念，引擎不應當機，遇到非致命"
"錯誤時須能正常恢復，因此必須確認這些失敗路徑確實能安全執行，不會導致引擎當"
"機。"

msgid ""
"*Unexpected* behavior can be tested in the same way as anything else. The "
"only problem this creates is that the error printing shall unnecessarily "
"pollute the test output with errors coming from the engine itself (even if "
"the end result is successful)."
msgstr ""
"「非預期」行為同樣可以用一般方式測試。唯一的問題是，這些錯誤訊息會讓測試輸出"
"混入引擎本身產生的錯誤（即使測試結論是成功）。"

msgid ""
"To alleviate this problem, use ``ERR_PRINT_OFF`` and ``ERR_PRINT_ON`` macros "
"directly within test cases to temporarily disable the error output coming "
"from the engine, for instance:"
msgstr ""
"為避免上述問題，可在測試案例中直接用 ``ERR_PRINT_OFF`` 與 ``ERR_PRINT_ON`` 巨"
"集，暫時關閉來自引擎的錯誤輸出，例如："

msgid "Special tags in test case names"
msgstr "測試案例名稱的特殊標籤"

msgid ""
"These tags can be added to the test case name to modify or extend the test "
"environment:"
msgstr "可在測試案例名稱內加上下列標籤，以變更或擴充測試環境："

msgid "**Tag**"
msgstr "**標籤**"

msgid "``[SceneTree]``"
msgstr "``[SceneTree]``"

msgid ""
"Required for test cases that rely on a scene tree with MessageQueue to be "
"available. It also enables a mock rendering server "
"and :ref:`ThemeDB<class_ThemeDB>`."
msgstr ""
"若測試案例需要可用的 SceneTree 以及 MessageQueue，必須加上此標籤。此標籤同時"
"啟用模擬繪圖伺服器與 :ref:`ThemeDB<class_ThemeDB>`。"

msgid "``[Editor]``"
msgstr "``[Editor]``"

msgid ""
"Like ``[SceneTree]``, but with additional editor-related infrastructure "
"available, such as :ref:`EditorSettings<class_EditorSettings>`."
msgstr ""
"和 ``[SceneTree]`` 類似，但會額外啟用與編輯器相關的基礎設施，"
"如 :ref:`EditorSettings<class_EditorSettings>`。"

msgid "``[Audio]``"
msgstr "``[Audio]``"

msgid ""
"Initializes the :ref:`AudioServer<class_AudioServer>` using a mock audio "
"driver."
msgstr "使用模擬音訊驅動程式初始化 :ref:`AudioServer<class_AudioServer>`。"

msgid "``[Navigation]``"
msgstr "``[Navigation]``"

msgid ""
"Creates the default 2D/3D navigation servers and makes them available for "
"testing."
msgstr "建立預設的 2D/3D 導航伺服器，並讓其可供測試使用。"

msgid ""
"You can use them together to combine multiple test environment extensions."
msgstr "這些標籤可組合使用，以同時擴充多種測試環境。"

msgid "Testing signals"
msgstr "測試訊號"

msgid "The following macros can be use to test signals:"
msgstr "可用下列巨集來測試訊號："

msgid "Macro"
msgstr "巨集"

msgid "Description"
msgstr "說明"

msgid "``SIGNAL_WATCH(object, \"signal_name\")``"
msgstr "``SIGNAL_WATCH(object, \"signal_name\")``"

msgid "Starts watching the specified signal on the given object."
msgstr "開始監看指定物件的訊號。"

msgid "``SIGNAL_UNWATCH(object, \"signal_name\")``"
msgstr "``SIGNAL_UNWATCH(object, \"signal_name\")``"

msgid "Stops watching the specified signal on the given object."
msgstr "停止監看指定物件的訊號。"

msgid "``SIGNAL_CHECK(\"signal_name\", Vector<Vector<Variant>>)``"
msgstr "``SIGNAL_CHECK(\"signal_name\", Vector<Vector<Variant>>)``"

msgid ""
"Checks the arguments of all fired signals. The outer vector contains each "
"fired signal, while the inner vector contains the list of arguments for that "
"signal. The order of signals is significant."
msgstr ""
"檢查所有已發出的訊號參數。外層 Vector 代表每次發出的訊號，內層 Vector 則為該"
"次訊號帶入的參數清單。訊號的順序具有意義。"

msgid "``SIGNAL_CHECK_FALSE(\"signal_name\")``"
msgstr "``SIGNAL_CHECK_FALSE(\"signal_name\")``"

msgid "Checks if the specified signal was not fired."
msgstr "檢查指定訊號是否未被發送。"

msgid "``SIGNAL_DISCARD(\"signal_name\")``"
msgstr "``SIGNAL_DISCARD(\"signal_name\")``"

msgid "Discards all records of the specified signal."
msgstr "丟棄指定訊號的所有紀錄。"

msgid "Below is an example demonstrating the use of these macros:"
msgstr "以下為這些巨集用法的範例："

msgid "Test tools"
msgstr "測試工具"

msgid ""
"Test tools are advanced methods which allow you to run arbitrary procedures "
"to facilitate the process of manual testing and debugging the engine "
"internals."
msgstr ""
"測試工具是進階用法，可讓你執行自訂流程，方便手動測試與偵錯引擎內部運作。"

msgid ""
"These tools can be run by supplying the name of a tool after the ``--test`` "
"command-line option. For instance, the GDScript module implements and "
"registers several tools to help the debugging of the tokenizer, parser, and "
"compiler:"
msgstr ""
"這些工具可在 ``--test`` 命令列選項後指定工具名稱來執行。例如 GDScript 模組便"
"實作並註冊了多個工具，協助偵錯分詞器、語法剖析器與編譯器："

msgid ""
"If any such tool is detected, then the rest of the unit tests are skipped."
msgstr "若有偵測到這類工具，其餘單元測試會被略過。"

msgid ""
"Test tools can be registered anywhere throughout the engine as the "
"registering mechanism closely resembles of what doctest provides while "
"registering test cases using dynamic initialization technique, but usually "
"these can be registered at corresponding ``register_types.cpp`` sources (per "
"module or core)."
msgstr ""
"測試工具可於引擎各處註冊，註冊機制與 doctest 註冊測試案例（採用動態初始化）類"
"似，通常建議在各模組或核心的 ``register_types.cpp`` 檔案中註冊。"

msgid ""
"Here's an example of how GDScript registers test tools in ``modules/gdscript/"
"register_types.cpp``:"
msgstr ""
"以下是 GDScript 在 ``modules/gdscript/register_types.cpp`` 註冊測試工具的範"
"例："

msgid ""
"The custom command-line parsing can be performed by a test tool itself with "
"the help of OS :ref:`get_cmdline_args<class_OS_method_get_cmdline_args>` "
"method."
msgstr ""
"測試工具也可自行透過 OS "
"的 :ref:`get_cmdline_args<class_OS_method_get_cmdline_args>` 方法進行自訂命令"
"列解析。"

msgid "Integration tests for GDScript"
msgstr "GDScript 整合測試"

msgid ""
"Godot uses doctest to prevent regressions in GDScript during development. "
"There are several types of test scripts which can be written:"
msgstr ""
"Godot 利用 doctest 防止 GDScript 開發過程中出現回歸錯誤。可撰寫多種類型的測試"
"腳本："

msgid "tests for expected errors;"
msgstr "預期錯誤測試;"

msgid "tests for warnings;"
msgstr "警告測試;"

msgid "tests for features."
msgstr "功能測試。"

msgid ""
"Therefore, the process of writing integration tests for GDScript is the "
"following:"
msgstr "因此，GDScript 的整合測試流程如下："

msgid ""
"Pick a type of a test script you'd like to write, and create a new GDScript "
"file under the ``modules/gdscript/tests/scripts`` directory within "
"corresponding sub-directory."
msgstr ""
"選擇欲撰寫的測試腳本類型，在 ``modules/gdscript/tests/scripts`` 下對應子資料"
"夾建立新的 GDScript 檔案。"

msgid ""
"Write GDScript code. The test script must have a function called ``test()`` "
"which takes no arguments. Such function will be called by the test runner. "
"The test should not have any dependency unless it's part of the test too. "
"Global classes (using ``class_name``) are registered before the runner "
"starts, so those should work if needed."
msgstr ""
"撰寫 GDScript 程式碼。測試腳本需有一個無參數的 ``test()`` 函式，該函式將由測"
"試運作器自動呼叫。測試不應有外部依賴，除非該依賴本身也是測試的一部分。全域類"
"別（使用 ``class_name``）會在運作器啟動前註冊，因此可於測試內使用。"

msgid "Here's an example test script:"
msgstr "以下為範例測試腳本："

msgid "Change directory to the Godot source repository root."
msgstr "切換目錄至 Godot 原始碼倉庫根目錄。"

msgid ""
"Generate ``*.out`` files to update the expected results from the output:"
msgstr "產生 ``*.out`` 檔案以更新預期輸出結果："

msgid ""
"You may add the ``--print-filenames`` option to see filenames as their test "
"outputs are generated. If you are working on a new feature that is causing "
"hard crashes, you can use this option to quickly find which test file causes "
"the crash and debug from there."
msgstr ""
"你可以加上 ``--print-filenames`` 選項來顯示產生測試輸出時的檔案名稱。若在開發"
"新功能出現嚴重當機，可用此選項快速找出是哪個測試檔造成當機，方便後續偵錯。"

msgid "Run GDScript tests with:"
msgstr "以以下指令執行 GDScript 測試："

msgid "This also accepts the ``--print-filenames`` option (see above)."
msgstr "此指令同樣支援 ``--print-filenames`` 選項（見上文）。"

msgid "If no errors are printed and everything goes well, you're done!"
msgstr "若未出現錯誤訊息且一切順利，代表測試完成！"

msgid ""
"Make sure the output does have the expected values before submitting a pull "
"request. If ``--gdscript-generate-tests`` produces ``*.out`` files which are "
"unrelated to newly added tests, you should revert those files back and only "
"commit ``*.out`` files for new tests."
msgstr ""
"提交 pull request 前，請先確保輸出結果皆為預期值。若 ``--gdscript-generate-"
"tests`` 產生的 ``*.out`` 檔與新測試無關，請勿提交，僅須提交與新測試相關的 "
"``*.out`` 檔案。"

msgid ""
"The GDScript test runner is meant for testing the GDScript implementation, "
"not for testing user scripts nor testing the engine using scripts. We "
"recommend writing new tests for already resolved `issues related to GDScript "
"at GitHub <https://github.com/godotengine/godot/issues?"
"q=is%3Aissue+label%3Atopic%3Agdscript+is%3Aclosed>`_, or writing tests for "
"currently working features."
msgstr ""
"GDScript 測試運作器僅用於測試 GDScript 實作本身，並非用來測試使用者腳本或透過"
"腳本測試引擎本體。建議針對 GitHub 上已解決的 `GDScript 相關議題 <https://"
"github.com/godotengine/godot/issues?"
"q=is%3Aissue+label%3Atopic%3Agdscript+is%3Aclosed>`_ 撰寫新測試，或針對現有功"
"能撰寫測試。"

msgid ""
"If your test case requires that there is no ``test()`` function present "
"inside the script file, you can disable the runtime section of the test by "
"naming the script file so that it matches the pattern ``*.notest.gd``. For "
"example, \"test_empty_file.notest.gd\"."
msgstr ""
"若你的測試案例需要腳本中不含 ``test()`` 函式，可將腳本命名為 ``*.notest.gd`` "
"來停用執行階段測試區段，例如：test_empty_file.notest.gd。"
