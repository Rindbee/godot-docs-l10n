#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "CLion"
msgstr "CLion"

msgid ""
"`CLion <https://www.jetbrains.com/clion/>`_ is a commercial `JetBrains "
"<https://www.jetbrains.com/>`_ IDE for C++."
msgstr ""
"`CLion <https://www.jetbrains.com/clion/>`_ 是 `JetBrains <https://"
"www.jetbrains.com/>`_ 推出的商業 C++ IDE。"

msgid "Importing the project"
msgstr "匯入專案"

msgid ""
"CLion can import a project's `compilation database file <https://"
"clang.llvm.org/docs/JSONCompilationDatabase.html>`_, commonly named "
"``compile_commands.json``. To generate the compilation database file, open "
"the terminal, change to the Godot root directory, and run:"
msgstr ""
"CLion 可以匯入專案的 `編譯資料庫檔 <https://clang.llvm.org/docs/"
"JSONCompilationDatabase.html>`_，通常檔名為 ``compile_commands.json``。要產生"
"此編譯資料庫，請打開終端機，切換到 Godot 根目錄，然後執行："

msgid ""
"Then, open the Godot root directory with CLion. CLion will import the "
"compilation database, index the codebase, and provide autocompletion and "
"other advanced code navigation and refactoring functionality."
msgstr ""
"接著，以 CLion 開啟 Godot 根目錄。CLion 會自動匯入編譯資料庫、索引程式碼庫，"
"並提供自動補全、程式碼導覽、重構等進階功能。"

msgid "Compiling and debugging the project"
msgstr "編譯與除錯專案"

msgid ""
"CLion does not support compiling and debugging Godot via SCons out of the "
"box. This can be achieved by creating a custom build target and run "
"configuration in CLion. Before creating a custom build target, you "
"must :ref:`compile Godot <toc-devel-compiling>` once on the command line, to "
"generate the Godot executable. Open the terminal, change into the Godot root "
"directory, and execute:"
msgstr ""
"CLion 預設無法直接用 SCons 編譯與除錯 Godot，需自訂建置目標與執行設定。建立"
"前，必須先於命令列 :ref:`編譯 Godot <toc-devel-compiling>` 一次，以產生可執行"
"檔。開啟終端機，切換至 Godot 根目錄，然後執行："

msgid "To add a custom build target that invokes SCons for compilation:"
msgstr "新增以 SCons 編譯的自訂建置目標："

msgid ""
"Open CLion and navigate to **Preferences > Build, Execution, Deployment > "
"Custom Build Targets**"
msgstr ""
"開啟 CLion，進入 **Preferences > Build, Execution, Deployment > Custom Build "
"Targets**"

msgid "Click **Add target** and give the target a name, e.g. ``Godot debug``."
msgstr "點擊 **Add target** 並命名（例如 ``Godot debug``）。"

msgid ""
"Click **...** next to the **Build:** selectbox, then click the **+** button "
"in the **External Tools** dialog to add a new external tool."
msgstr ""
"在 **Build:** 選擇框旁點擊 **...**，於 **External Tools** 視窗點選 **+** 來新"
"增外部工具。"

msgid ""
"Give the tool a name, e.g. ``Build Godot debug``, set **Program** to "
"``scons``, set **Arguments** to the compilation settings you want "
"(see :ref:`compiling Godot <toc-devel-compiling>`), and set the **Working "
"directory** to ``$ProjectFileDir$``, which equals the Godot root directory. "
"Click **OK** to create the tool."
msgstr ""
"將工具命名（如 ``Build Godot debug``），**Program** 設為 ``scons`` ， "
"**Arguments** 填入欲用的編譯參數（詳見 :ref:`編譯 Godot <toc-devel-"
"compiling>`）， **Working directory** 設為 ``$ProjectFileDir$`` （即 Godot 根"
"目錄），完成後點擊 **OK** 。"

msgid ""
"CLion does not expand shell commands like ``scons -j$(nproc)``. Use concrete "
"values instead, e.g. ``scons -j8``."
msgstr ""
"CLion 不會展開如 ``scons -j$(nproc)`` 這種 shell 指令，請直接寫明值，例如 "
"``scons -j8``。"

msgid ""
"Back in the **External Tools** dialog, click the **+** again to add a second "
"external tool for cleaning the Godot build via SCons. Give the tool a name, "
"e.g. ``Clean Godot debug``, set **Program** to ``scons``, set **Arguments** "
"to ``-c`` (which will clean the build), and set the **Working directory** to "
"``$ProjectFileDir$``. Click **OK** to create the tool."
msgstr ""
"於 **External Tools** 視窗再點一次 **+**，新增一個用於清除建置的工具。命名為 "
"``Clean Godot debug``，**Program** 設為 ``scons``，**Arguments** 設為 ``-"
"c``，**Working directory** 設為 ``$ProjectFileDir$``，最後點 **OK**。"

msgid ""
"Close the **External Tools** dialog. In the **Custom Build Target** dialog "
"for the custom ``Godot debug`` build target, select the **Build Godot "
"debug** tool from the **Build** select box, and select the **Clean Godot "
"debug** tool from the **Clean** select box. Click **OK** to create the "
"custom build target."
msgstr ""
"關閉 **External Tools** 視窗。在自訂 ``Godot debug`` 建置目標的 **Custom "
"Build Target** 視窗中，**Build** 欄位選擇 **Build Godot debug**，**Clean** 欄"
"位選擇 **Clean Godot debug**，點 **OK** 完成。"

msgid "In the main IDE window, click **Add Configuration**."
msgstr "在主 IDE 視窗中點選 **Add Configuration**。"

msgid ""
"In the **Run/Debug Configuration** dialog, click **Add new...**, then select "
"**Custom Build Application** to create a new custom run/debug configuration."
msgstr ""
"於 **Run/Debug Configuration** 視窗點選 **Add new...**，再選擇 **Custom "
"Build Application**，新增自訂執行/除錯設定。"

msgid ""
"Give the run/debug configuration a name, e.g. ``Godot debug``, select the "
"``Godot debug`` custom build target as the **Target**. Select the Godot "
"executable in the ``bin/`` folder as the **Executable**, and set the "
"**Program arguments** to ``--editor --path path-to-your-project/``, where "
"``path-to-your-project/`` should be a path pointing to an existing Godot "
"project. If you omit the ``--path`` argument, you will only be able to debug "
"the Godot Project Manager window. Click **OK** to create the run/debug "
"configuration."
msgstr ""
"將此執行/除錯設定命名（如 ``Godot debug``），**Target** 選擇 ``Godot "
"debug``，**Executable** 選擇 `bin/` 資料夾下的 Godot 執行檔，**Program "
"arguments** 設為 ``--editor --path path-to-your-project/``（`path-to-your-"
"project/` 請填寫你專案的路徑），若省略 ``--path`` 會只除錯專案管理員。完成後"
"點 **OK**。"

msgid ""
"You can now build, run, debug, profile, and Valgrind check the Godot editor "
"via the run configuration."
msgstr ""
"現在可以透過此設定建置、執行、除錯、分析甚至用 Valgrind 檢查 Godot 編輯器。"

msgid ""
"When playing a scene, the Godot editor will spawn a separate process. You "
"can debug this process in CLion by going to **Run > Attach to process...**, "
"typing ``godot``, and selecting the Godot process with the highest **pid** "
"(process ID), which will usually be the running project."
msgstr ""
"在執行場景時，Godot 編輯器會啟動另一個獨立程序。你可於 CLion 透過 **Run > "
"Attach to process...**，搜尋 ``godot``，再選取 pid（程序編號）最高的 Godot 程"
"序進行除錯，這通常就是你執行的專案。"

msgid "Ignoring object and library files"
msgstr "忽略物件檔和函式庫檔案"

msgid ""
"After building Godot in CLion, you may see the object and library files "
"showing up in the **Project** view."
msgstr ""
"在 CLion 中建置 Godot 後，**Project** 檢視中可能會出現 .o 和 .a 等物件／函式"
"庫檔。"

msgid "You can configure CLion to ignore those files:"
msgstr "你可以設定 CLion 來忽略這些檔案："

msgid ""
"Open CLion and navigate to **Preferences > Editor > File Types > Ignored "
"Files and Folders**"
msgstr ""
"開啟 CLion，進入 **Preferences > Editor > File Types > Ignored Files and "
"Folders**"

msgid ""
"Click the **+** button to add ``*.o`` and ``*.a`` to the list. In Windows, "
"you would add ``*.obj`` and ``*.dll``."
msgstr ""
"點選 **+** 將 ``*.o`` 與 ``*.a`` 加入清單，若是 Windows 則加上 ``*.obj`` 和 "
"``*.dll``。"

msgid "Now, the files should be ignored in the Project view."
msgstr "這樣這些檔案就不會在 Project 檢視中顯示。"
