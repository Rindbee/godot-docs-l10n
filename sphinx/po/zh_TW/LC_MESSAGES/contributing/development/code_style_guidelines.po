#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Code style guidelines"
msgstr "程式碼樣式方針"

msgid ""
"When contributing to Godot's source code, you will be expected to follow the "
"style guidelines outlined below. Some of them are checked via the Continuous "
"Integration process and reviewers will ask you to fix potential issues, so "
"best setup your system as outlined below to ensure all your commits follow "
"the guidelines."
msgstr ""
"在參與貢獻 Godot 原始碼時需要遵守下述樣式方針。其中的一些規則會在 CI (持續整"
"合, Continuos Integration) 過程中自動檢查，而審閱者也會要求你修正一些潛在的問"
"題。因此，最好先依照下屬方式設定系統，並確保你的 Commit 都有符合本方針。"

msgid "C++ and Objective-C"
msgstr "C++ 與 Objective-C"

msgid ""
"There are no written guidelines, but the code style agreed upon by the "
"developers is enforced via the `clang-format <https://clang.llvm.org/docs/"
"ClangFormat.html>`__ code beautifier, which takes care for you of all our "
"conventions. To name a few:"
msgstr ""
"雖然沒有正式文件記載，Godot 的 C++ 與 Objective-C 程式碼樣式由開發者共識透過 "
"`clang-format <https://clang.llvm.org/docs/ClangFormat.html>`__ 自動強制執"
"行，這個美化工具會協助你遵守所有慣例。舉例如下："

msgid ""
"Indentation and alignment are both tab based (respectively one and two tabs)"
msgstr "縮排與對齊均採 Tab 字元（分別為 1 個與 2 個 Tab）"

msgid "One space around math and assignments operators as well as after commas"
msgstr "數學與賦值運算子前後，以及逗號之後須有一個空格"

msgid ""
"Pointer and reference operators are affixed to the variable identifier, not "
"to the type name"
msgstr "指標與參照運算子應緊貼變數名稱，而非型別名稱"

msgid "See further down regarding header includes"
msgstr "關於標頭檔引用的細節請見下文"

msgid ""
"The rules used by clang-format are outlined in the `.clang-format <https://"
"github.com/godotengine/godot/blob/master/.clang-format>`__ file of the Godot "
"repository."
msgstr ""
"clang-format 採用的規則詳見 Godot 原始碼庫中的 `.clang-format <https://"
"github.com/godotengine/godot/blob/master/.clang-format>`__ 檔案。"

msgid ""
"As long as you ensure that your style matches the surrounding code and that "
"you're not introducing trailing whitespace or space-based indentation, you "
"should be fine. If you plan to contribute regularly, however, we strongly "
"advise that you set up clang-format locally to check and automatically fix "
"all your commits."
msgstr ""
"只要您確保您的風格符合周圍的程式碼，並且沒有引入行尾空白字元或以空白字元為基"
"礎的縮排，您就沒問題了。然而，如果您打算定期貢獻，我們強烈建議您在本地端設定 "
"clang-format，以檢查並自動修正您所有的提交。"

msgid ""
"Godot's code style should *not* be applied to third-party code, i.e. code "
"that is included in Godot's source tree, but was not written specifically "
"for our project. Such code usually comes from different upstream projects "
"with their own style guides (or lack thereof), and don't want to introduce "
"differences that would make syncing with upstream repositories harder."
msgstr ""
"Godot 的程式碼風格*不*應套用於第三方程式碼，亦即包含在 Godot 原始碼樹中但並非"
"專為我們的專案所編寫的程式碼。此類程式碼通常來自於具有其自身風格指南 (或沒"
"有) 的不同上游專案，且不希望引入會使與上游儲存庫同步變得更加困難的差異。"

msgid ""
"Third-party code is usually included in the ``thirdparty/`` folder and can "
"thus easily be excluded from formatting scripts. For the rare cases where a "
"third-party code snippet needs to be included directly within a Godot file, "
"you can use ``/* clang-format off */`` and ``/* clang-format on */`` to tell "
"clang-format to ignore a chunk of code."
msgstr ""
"第三方程式碼通常位於 ``thirdparty/`` 資料夾，因此能輕鬆排除於格式化腳本之外。"
"若少數情況下需將第三方程式碼片段直接寫入 Godot 檔案，可用 ``/* clang-format "
"off */`` 及 ``/* clang-format on */`` 來讓 clang-format 忽略該區段。"

msgid ""
"These guidelines only cover code formatting. "
"See :ref:`doc_cpp_usage_guidelines` for a list of language features that are "
"permitted in pull requests."
msgstr ""
"本規範僅涵蓋程式碼格式化。關於拉取請求允許的語言功能，請參"
"閱 :ref:`doc_cpp_usage_guidelines`。"

msgid "Using clang-format locally"
msgstr "在本機使用 clang-format"

msgid ""
"You need to use **clang-format 17** to be compatible with Godot's format. "
"Later versions might be suitable, but previous versions may not support all "
"used options, or format some things differently, leading to style issues in "
"pull requests."
msgstr ""
"您需要使用 **clang-format 17** 才能與 Godot 的格式相容。較新的版本可能適用，"
"但較舊的版本可能不支援所有使用的選項，或以不同方式格式化某些內容，導致拉取請"
"求中出現樣式問題。"

msgid "Pre-commit hook"
msgstr "Pre-commit 掛鉤"

msgid ""
"For ease of use, we provide hooks for Git with the `pre-commit <https://pre-"
"commit.com/>`__ Python framework that will run clang-format automatically on "
"all your commits with the correct version of clang-format. To set up:"
msgstr ""
"為方便使用，我們提供 Git 的掛鉤，搭配 `pre-commit <https://pre-commit.com/"
">`__ Python 框架，這會自動在您所有的提交上執行正確版本的 clang-format。設定方"
"式如下："

msgid "You can also run the hook manually with ``pre-commit run``."
msgstr "你也可以手動執行 hook，指令為 ``pre-commit run``。"

msgid ""
"Previously, we supplied a hook in the folder ``misc/hooks``. If you copied "
"the script manually, these hooks should still work, but symlinks will be "
"broken. If you are using the new system, run ``rm .git/hooks/*`` to remove "
"the old hooks that are no longer needed."
msgstr ""
"先前我們在 ``misc/hooks`` 資料夾中提供了 hook。如果你是手動複製腳本，這些 "
"hook 應該仍可運作，但符號連結會失效。如果你已經改用新系統，請執行 ``rm .git/"
"hooks/*``，移除不再需要的舊 hook。"

msgid "Installation"
msgstr "安裝"

msgid "Here's how to install clang-format:"
msgstr "clang-format 的安裝方式如下："

msgid ""
"Linux: It will usually be available out-of-the-box with the clang toolchain "
"packaged by your distribution. If your distro version is not the required "
"one, you can download a pre-compiled version from the `LLVM website <https://"
"releases.llvm.org/download.html>`__, or if you are on a Debian derivative, "
"use the `upstream repos <https://apt.llvm.org/>`__."
msgstr ""
"Linux：大部分發行版的 clang 工具鏈都會直接內建。若版本不符需求，可至 `LLVM 網"
"站 <https://releases.llvm.org/download.html>`__ 下載預編譯版本，或若你使用的"
"是 Debian 衍生版，則可參考 `上游套件庫 <https://apt.llvm.org/>`__。"

msgid ""
"macOS and Windows: You can download precompiled binaries from the `LLVM "
"website <https://releases.llvm.org/download.html>`__. You may need to add "
"the path to the binary's folder to your system's ``PATH`` environment "
"variable to be able to call clang-format out of the box."
msgstr ""
"macOS 與 Windows：你可以從 `LLVM 官方網站 <https://releases.llvm.org/"
"download.html>`__ 下載預先編譯好的執行檔。你可能需要把執行檔所在的資料夾路徑"
"新增到系統的 ``PATH`` 環境變數，才能直接執行 clang-format。"

msgid ""
"You then have different possibilities to apply clang-format to your changes:"
msgstr "你可以用多種方式將 clang-format 套用至你的變更："

msgid "Manual usage"
msgstr "手動使用"

msgid ""
"You can apply clang-format manually for one or more files with the following "
"command:"
msgstr "你可以用以下指令手動將 clang-format 套用到一個或多個檔案："

msgid ""
"``-i`` means that the changes should be written directly to the file (by "
"default clang-format would only output the fixed version to the terminal)."
msgstr ""
"``-i`` 代表改動應直接寫入到檔案內 (clang-format 預設只會將修正後的版本輸出到"
"終端機上)。"

msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell. Be careful when globbing so that you "
"don't run clang-format on compiled objects (.o and .a files) that are in "
"Godot's tree. So better use ``core/*.{cpp,h}`` than ``core/*``."
msgstr ""
"路徑可指向多個檔案，無論是逐一列出或用萬用字元（與一般 Unix shell 相同）。使"
"用萬用字元時請避免誤用於 Godot 專案資料夾內的編譯物件檔（如 .o、.a）。建議用 "
"``core/*.{cpp,h}`` 而非 ``core/*``。"

msgid "IDE plugin"
msgstr "IDE 外掛"

msgid ""
"Most IDEs or code editors have beautifier plugins that can be configured to "
"run clang-format automatically, for example, each time you save a file."
msgstr ""
"大多數的 IDE 或程式碼編輯器都有美化外掛，可以設定在每次儲存檔案時自動執行 "
"clang-format。"

msgid "Here is a non-exhaustive list of beautifier plugins for some IDEs:"
msgstr "此處僅列出部分用於一些 IDE 的美化外掛："

msgid ""
"Qt Creator: `Beautifier plugin <https://doc.qt.io/qtcreator/creator-"
"beautifier.html>`__"
msgstr ""
"Qt Creator: `Beautifier plugin <https://doc.qt.io/qtcreator/creator-"
"beautifier.html>`__"

msgid ""
"Visual Studio Code: `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`__"
msgstr ""
"Visual Studio Code: `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`__"

msgid ""
"Visual Studio: `Clang Power Tools 2022 <https://marketplace.visualstudio.com/"
"items?itemName=caphyon.ClangPowerTools2022>`__"
msgstr ""
"Visual Studio：`Clang Power Tools 2022 <https://marketplace.visualstudio.com/"
"items?itemName=caphyon.ClangPowerTools2022>`__"

msgid "vim: `vim-clang-format <https://github.com/rhysd/vim-clang-format>`__"
msgstr "vim: `vim-clang-format <https://github.com/rhysd/vim-clang-format>`__"

msgid ""
"CLion: Starting from version ``2019.1``, no plugin is required. Instead, "
"enable `ClangFormat <https://www.jetbrains.com/help/clion/clangformat-as-"
"alternative-formatter.html#clion-support>`__"
msgstr ""
"CLion：自 ``2019.1`` 版起不需額外外掛，直接啟用 `ClangFormat <https://"
"www.jetbrains.com/help/clion/clangformat-as-alternative-formatter.html#clion-"
"support>`__ 即可"

msgid "(Pull requests are welcome to extend this list with tested plugins.)"
msgstr "(歡迎提出 Pull Request，協助擴充此清單以納入更多經過驗證的外掛。)"

msgid "Header includes"
msgstr "標頭檔引用"

msgid ""
"When adding new C++ or Objective-C files or including new headers in "
"existing ones, the following rules should be followed:"
msgstr ""
"新增 C++ 或 Objective-C 檔案，或對既有檔案引用新標頭時，請遵守以下規範："

msgid ""
"The first lines in the file should be Godot's copyright header and MIT "
"license, copy-pasted from another file. Make sure to adjust the filename."
msgstr ""
"檔案開頭應放置 Godot 版權標頭與 MIT 授權條款，可從其他檔案複製，並確保檔名正"
"確。"

msgid ""
"In a ``.h`` header, include guards should be used with the form "
"``FILENAME_H``."
msgstr ""
"在 ``.h`` 標頭檔內，應以 ``FILENAME_H`` 形式加入 include guard（防止重複引"
"用）。"

msgid ""
"In a ``.cpp`` file (e.g. ``filename.cpp``), the first include should be the "
"one where the class is declared (e.g. ``#include \"filename.h\"``), followed "
"by an empty line for separation."
msgstr ""
"在 ``.cpp`` 檔案（如 ``filename.cpp``）中，第一個 include 應為該類別宣告檔"
"（如 ``#include \"filename.h\"``），並於其後加一空行分隔。"

msgid ""
"Then come headers from Godot's own code base, included in alphabetical order "
"(enforced by ``clang-format``) with paths relative to the root folder. Those "
"includes should be done with quotes, e.g. ``#include \"core/object.h\"``. "
"The block of Godot header includes should then be followed by an empty line "
"for separation."
msgstr ""
"接著是 Godot 自身程式碼的標頭檔，須以字母順序（clang-format 會自動排序）並使"
"用相對於根目錄的路徑引用，且以引號包覆（如 ``#include \"core/object.h\"``）。"
"Godot 標頭檔引用區塊結束後應加一空行分隔。"

msgid ""
"Finally, third-party headers (either from ``thirdparty`` or from the "
"system's include paths) come next and should be included with the < and > "
"symbols, e.g. ``#include <png.h>``. The block of third-party headers should "
"also be followed by an empty line for separation."
msgstr ""
"最後是第三方標頭檔（來自 ``thirdparty`` 或系統 include 路徑），應以 < > 包覆"
"（如 ``#include <png.h>``）。第三方標頭區段結束後同樣需加一空行分隔。"

msgid ""
"Godot and third-party headers should be included in the file that requires "
"them, i.e. in the `.h` header if used in the declarative code or in the "
"`.cpp` if used only in the imperative code."
msgstr ""
"Godot 與第三方標頭檔應於實際需要的檔案引用，若於宣告式程式碼中使用請於 `.h` "
"檔 include，僅於實作（命令式）程式碼中使用則於 `.cpp` include。"

msgid "Example:"
msgstr "範例："

msgid "my_new_file.h"
msgstr "my_new_file.h"

msgid "my_new_file.cpp"
msgstr "my_new_file.cpp"

msgid "Java"
msgstr "Java"

msgid ""
"Godot's Java code (mostly in ``platform/android``) is also enforced via "
"``clang-format``, so see the instructions above to set it up. Keep in mind "
"that this style guide only applies to code written and maintained by Godot, "
"not third-party code such as the ``java/src/com/google`` subfolder."
msgstr ""
"Godot 的 Java 程式碼（多數位於 ``platform/android``）也由 ``clang-format`` 強"
"制格式化，請參考上方設定說明。請注意，本樣式指南僅適用於 Godot 開發與維護的程"
"式碼，第三方程式碼（如 ``java/src/com/google`` 目錄）不在此限。"

msgid "Python"
msgstr "Python"

msgid ""
"Godot's SCons buildsystem is written in Python, and various scripts included "
"in the source tree are also using Python."
msgstr ""
"Godot 的 SCons 建置系統以 Python 寫成，原始碼樹中也有多個 Python 腳本。"

msgid ""
"For those, we use the `Ruff linter and code formatter <https://"
"docs.astral.sh/ruff/>`__."
msgstr ""
"針對這些，我們使用 `Ruff linter 與程式碼格式化工具 <https://docs.astral.sh/"
"ruff/>`__。"

msgid "Using ruff locally"
msgstr "在本機使用 ruff"

msgid ""
"First of all, you will need to install Ruff. Ruff requires Python 3.7+ to "
"run."
msgstr "首先，你需要安裝 Ruff。執行 Ruff 需要 Python 3.7 以上版本。"

msgid "Here's how to install ruff:"
msgstr "安裝 ruff 的方式如下："

msgid "You then have different possibilities to apply ruff to your changes:"
msgstr "你可以用不同方式將 ruff 套用到你的變更上："

msgid ""
"You can apply ``ruff`` manually to one or more files with the following "
"command:"
msgstr "你可以用下列指令手動將 ``ruff`` 套用到一個或多個檔案："

msgid ""
"``-l 120`` means that the allowed number of characters per line is 120. This "
"number was agreed upon by the developers."
msgstr ""
"``-l 120`` 表示每行最多允許 120 個字元。這個數字是由多位開發人員公認的。"

msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell."
msgstr ""
"路徑可以指向多個檔案，可以直接寫出多個檔案，或是使用如一般 Unix Shell 的萬用"
"字元。"

msgid ""
"For ease of use, we provide hooks for Git with the `pre-commit <https://pre-"
"commit.com/>`__ Python framework that will run ``ruff`` automatically on all "
"your commits with the correct version of ``ruff``. To set up:"
msgstr ""
"為了方便使用，我們提供了 Git 的 `pre-commit <https://pre-commit.com/>`__ "
"Python 框架 hook，可以在每次提交時自動以正確版本執行 ``ruff``。設定方式如下："

msgid "Editor integration"
msgstr "編輯器整合"

msgid "Comment style guide"
msgstr "C# 風格指南"

msgid ""
"This comment style guide applies to all programming languages used within "
"Godot's codebase."
msgstr "本注釋風格指南適用於Godot程式碼庫中使用的所有程式設計語言."

msgid ""
"Begin comments with a space character to distinguish them from disabled code."
msgstr "以空間字元開始注釋, 以將其與禁用程式碼區分開來."

msgid ""
"Use sentence case for comments. Begin comments with an uppercase character "
"and always end them with a period."
msgstr "注釋使用句子大小寫. 注釋以大寫字母開頭, 並始終以句號結束."

msgid "Reference variable/function names and values using backticks."
msgstr "使用反引號引用變數和函式名和值."

msgid "Wrap comments to ~100 characters."
msgstr "將注釋控制在~100個字元。"

msgid ""
"You can use ``TODO:``, ``FIXME:``, ``NOTE:``, ``WARNING:``, or ``HACK:`` as "
"admonitions when needed."
msgstr ""
"你可以在需要時使用 ``TODO:``、``FIXME:``、``NOTE:``、``WARNING:`` 或 "
"``HACK:`` 作為提示標註。"

msgid "**Example:**"
msgstr "**範例：**"

msgid ""
"Don't repeat what the code says in a comment. Explain the *why* rather than "
"*how*."
msgstr "不要在註解中重複程式碼的內容，應解釋*為什麼*這麼做，而不是*怎麼做*。"

msgid "**Bad:**"
msgstr "**錯誤範例：**"

msgid ""
"You can use Javadoc-style comments above function or macro definitions. It's "
"recommended to use Javadoc-style comments *only* for methods which are not "
"exposed to scripting. This is because exposed methods should be documented "
"in the :ref:`class reference XML <doc_updating_the_class_reference>` instead."
msgstr ""
"你可以在函式或巨集定義上面使用Javadoc風格的注釋. 建議只對不公開給腳本的方法使"
"用Javadoc風格的注釋. 這是因為公開的方法應該在 :ref:`class reference XML "
"<doc_updating_the_class_reference>` 中進行記錄."

msgid ""
"For member variables, don't use Javadoc-style comments, but use single-line "
"comments instead:"
msgstr "對於成員變數，請不要使用 Javadoc 風格註解，改用單行註解："
