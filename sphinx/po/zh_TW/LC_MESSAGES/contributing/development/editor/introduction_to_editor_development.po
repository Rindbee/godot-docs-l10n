#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to editor development"
msgstr "編輯器開發簡介"

msgid "On this page, you will learn:"
msgstr "本頁將介紹："

msgid "The **design decisions** behind the Godot editor."
msgstr "Godot 編輯器背後的**設計決策**。"

msgid "How to work efficiently on the Godot editor's C++ code."
msgstr "如何有效率地開發 Godot 編輯器的 C++ 程式碼。"

msgid ""
"This guide is aimed at current or future engine contributors. To create "
"editor plugins in GDScript, see :ref:`doc_making_plugins` instead."
msgstr ""
"本指南適用於現有或未來的引擎貢獻者。若要用 GDScript 建立編輯器外掛，請參"
"閱 :ref:`doc_making_plugins`。"

msgid ""
"If you are new to Godot, we recommended you to "
"read :ref:`doc_godot_design_philosophy` before continuing. Since the Godot "
"editor is a Godot project written in C++, much of the engine's philosophy "
"applies to the editor."
msgstr ""
"如果你是 Godot 的新手，建議你在繼續閱讀之前先參"
"考 :ref:`doc_godot_design_philosophy`。由於 Godot 編輯器本身也是以 C++ 開發"
"的 Godot 專案，因此許多引擎的設計理念同樣適用於編輯器。"

msgid "Technical choices"
msgstr "技術選擇"

msgid ""
"The Godot editor is drawn using Godot's renderer and :ref:`UI system "
"<doc_user_interface>`. It does *not* rely on a toolkit such as GTK or Qt. "
"This is similar in spirit to software like Blender. While using toolkits "
"makes it easier to achieve a \"native\" appearance, they are also quite "
"heavy and their licensing is not compatible with Godot's."
msgstr ""
"Godot 編輯器是以 Godot 自身的算繪器與 :ref:`UI 系統 <doc_user_interface>` 繪"
"製，*不* 依賴 GTK、Qt 等外部 UI 工具包。這與 Blender 等軟體有類似精神。雖然使"
"用工具包可比較容易實作「原生」外觀，但這些工具包較為龐大，且授權條款與 Godot "
"不相容。"

msgid ""
"The editor is fully written in C++. It can't contain any GDScript or C# code."
msgstr "編輯器本身完全以 C++ 撰寫，不能包含任何 GDScript 或 C# 程式碼。"

msgid "Directory structure"
msgstr "目錄結構"

msgid ""
"The editor's code is fully self-contained in the `editor/ <https://"
"github.com/godotengine/godot/tree/master/editor>`__ folder of the Godot "
"source repository."
msgstr ""
"編輯器的程式碼完整地放在 Godot 原始碼儲存庫的 `editor/ <https://github.com/"
"godotengine/godot/tree/master/editor>`__ 資料夾中。"

msgid ""
"Some editor functionality is also implemented via :ref:`modules "
"<doc_custom_modules_in_cpp>`. Some of these are only enabled in editor "
"builds to decrease the binary size of export templates. See the `modules/ "
"<https://github.com/godotengine/godot/tree/master/modules>`__ folder in the "
"Godot source repository."
msgstr ""
"部分編輯器功能也會透過 :ref:`modules <doc_custom_modules_in_cpp>` 模組實作。"
"有些模組僅於編輯器版本啟用，以減少匯出範本的二進位檔案大小。詳見 Godot 儲存庫"
"的 `modules/ <https://github.com/godotengine/godot/tree/master/modules>`__ 目"
"錄。"

msgid "Some important files in the editor are:"
msgstr "編輯器中幾個重要檔案："

msgid ""
"`editor/editor_node.cpp <https://github.com/godotengine/godot/blob/master/"
"editor/editor_node.cpp>`__: Main editor initialization file. Effectively the "
"\"main scene\" of the editor."
msgstr ""
"`editor/editor_node.cpp <https://github.com/godotengine/godot/blob/master/"
"editor/editor_node.cpp>`__：主要的編輯器初始化檔，相當於編輯器的「主場景」。"

msgid ""
"`editor/project_manager.cpp <https://github.com/godotengine/godot/blob/"
"master/editor/project_manager.cpp>`__: Main Project Manager initialization "
"file. Effectively the \"main scene\" of the Project Manager."
msgstr ""
"`editor/project_manager.cpp <https://github.com/godotengine/godot/blob/"
"master/editor/project_manager.cpp>`__：主要的專案管理器初始化檔，相當於專案管"
"理器的「主場景」。"

msgid ""
"`editor/plugins/canvas_item_editor_plugin.cpp <https://github.com/"
"godotengine/godot/blob/master/editor/plugins/"
"canvas_item_editor_plugin.cpp>`__: The 2D editor viewport and related "
"functionality (toolbar at the top, editing modes, overlaid helpers/panels, "
"…)."
msgstr ""
"`editor/plugins/canvas_item_editor_plugin.cpp <https://github.com/"
"godotengine/godot/blob/master/editor/plugins/"
"canvas_item_editor_plugin.cpp>`__：2D 編輯器視口與相關功能（上方工具列、編輯"
"模式、輔助工具/面板疊加等）。"

msgid ""
"`editor/plugins/node_3d_editor_plugin.cpp <https://github.com/godotengine/"
"godot/blob/master/editor/plugins/node_3d_editor_plugin.cpp>`__: The 3D "
"editor viewport and related functionality (toolbar at the top, editing "
"modes, overlaid panels, …)."
msgstr ""
"`editor/plugins/node_3d_editor_plugin.cpp <https://github.com/godotengine/"
"godot/blob/master/editor/plugins/node_3d_editor_plugin.cpp>`__：3D 編輯器視口"
"與相關功能（上方工具列、編輯模式、面板疊加等）。"

msgid ""
"`editor/plugins/node_3d_editor_gizmos.cpp <https://github.com/godotengine/"
"godot/blob/master/editor/plugins/node_3d_editor_gizmos.cpp>`__: Where the 3D "
"editor gizmos are defined and drawn. This file doesn't have a 2D counterpart "
"as 2D gizmos are drawn by the nodes themselves."
msgstr ""
"`editor/plugins/node_3d_editor_gizmos.cpp <https://github.com/godotengine/"
"godot/blob/master/editor/plugins/node_3d_editor_gizmos.cpp>`__：定義與繪製 "
"3D 編輯器操作小工具（gizmo）的檔案。2D 小工具則由各節點自行繪製，沒有獨立對應"
"檔案。"

msgid "Editor dependencies in ``scene/`` files"
msgstr "``scene/`` 內的編輯器依賴"

msgid ""
"When working on an editor feature, you may have to modify files in Godot's "
"GUI nodes, which you can find in the ``scene/`` folder."
msgstr ""
"在開發編輯器功能時，有時必須修改 Godot 的 GUI 節點檔案，這些檔案位於 ``scene/"
"`` 目錄下。"

msgid ""
"One rule to keep in mind is that you must **not** introduce new dependencies "
"to ``editor/`` includes in other folders such as ``scene/``. This applies "
"even if you use ``#ifdef TOOLS_ENABLED``."
msgstr ""
"請特別注意， **不可** 在如 ``scene/`` 等其他資料夾中引入對 ``editor/`` 的新依"
"賴，即使有使用 ``#ifdef TOOLS_ENABLED`` 也不例外。"

msgid ""
"To make the codebase easier to follow and more self-contained, the allowed "
"dependency order is:"
msgstr "為了讓程式碼結構更清晰且具備良好模組化，建議依賴順序如下："

msgid "``editor/`` -> ``scene/`` -> ``servers/`` -> ``core/``"
msgstr "``editor/`` → ``scene/`` → ``servers/`` → ``core/``"

msgid ""
"This means that files in ``editor/`` can depend on includes from ``scene/``, "
"``servers/``, and ``core/``. But, for example, while ``scene/`` can depend "
"on includes from ``servers/`` and ``core/``, it cannot depend on includes "
"from ``editor/``."
msgstr ""
"也就是說，``editor/`` 內的檔案可以依賴 ``scene/``、``servers/``、``core/``，"
"而 ``scene/`` 可以依賴 ``servers/`` 與 ``core/``，但絕對不能依賴 ``editor/"
"``。"

msgid ""
"Currently, there are some dependencies to ``editor/`` includes in ``scene/`` "
"files, but `they are in the process of being removed <https://github.com/"
"godotengine/godot/issues/53295>`__."
msgstr ""
"目前 ``scene/`` 內仍有部分檔案依賴到 ``editor/``，但 `這些依賴正在逐步移除 "
"<https://github.com/godotengine/godot/issues/53295>`__。"

msgid "Development tips"
msgstr "開發小技巧"

msgid ""
"To iterate quickly on the editor, we recommend to set up a test project "
"and :ref:`open it from the command line <doc_command_line_tutorial>` after "
"compiling the editor. This way, you don't have to go through the Project "
"Manager every time you start Godot."
msgstr ""
"為了加快開發週期，建議建立一個測試專案並在編譯完成後 :ref:`從命令列開啟 "
"<doc_command_line_tutorial>`。如此就能避免每次啟動 Godot 都需經過專案管理器。"
