#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for macOS"
msgstr "為 macOS 進行編譯"

msgid ""
"This page describes how to compile macOS editor and export template binaries "
"from source. If you're looking to export your project to macOS instead, "
"read :ref:`doc_exporting_for_macos`."
msgstr ""
"這個頁面描述的是如何從源碼編譯 macOS 編輯器和匯出範本二進位檔案。如果你要找的"
"是匯出專案到 macOS，請閱讀 :ref:`doc_exporting_for_macos`。"

msgid "Requirements"
msgstr "系統需求"

msgid "For compiling under macOS, the following is required:"
msgstr "若要在 macOS 下編譯，必須滿足下列需求："

msgid "`Python 3.6+ <https://www.python.org/downloads/macos/>`_."
msgstr "`Python 3.5+ <https://www.python.org/downloads/>`_ 。"

msgid ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (or the more "
"lightweight Command Line Tools for Xcode)."
msgstr ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (或更輕巧的適用於 "
"Xcode 的命令行工具)。"

msgid ""
"`Vulkan SDK <https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-sdk."
"dmg>`_ for MoltenVK (macOS doesn't support Vulkan out of the box)."
msgstr ""
"適用於 MoltenVK 的「Vulkan SDK <https://sdk.lunarg.com/sdk/download/latest/"
"mac/vulkan-sdk.dmg>」（macOS 不支援開箱即用的 Vulkan）。"

msgid ""
"If you have `Homebrew <https://brew.sh/>`_ installed, you can easily install "
"SCons using the following command::"
msgstr ""
"若有安裝 `Homebrew <https://brew.sh/>`_ ，則可以通過下列指令來輕鬆安裝 SCons "
"與 yasm："

msgid ""
"Installing Homebrew will also fetch the Command Line Tools for Xcode "
"automatically if you don't have them already."
msgstr "安裝 Homebrew 時，若還未有適用於 Xcode 的命令行工具，也會自動安裝。"

msgid ""
"Similarly, if you have `MacPorts <https://www.macports.org/>`_ installed, "
"you can easily install SCons using the following command::"
msgstr ""
"若有安裝 `Homebrew <https://brew.sh/>`_ ，則可以通過下列指令來輕鬆安裝 SCons "
"與 yasm："

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr "要獲取編譯所需的 Godot 源碼，請參閱 :ref:`doc_getting_source`。"

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"有關配合 Godot 使用 SCons 的一般說明，請參考 :ref:"
"`doc_introduction_to_the_buildsystem` 。"

msgid "Compiling"
msgstr "編譯"

msgid "Start a terminal, go to the root directory of the engine source code."
msgstr "開啟終端機，移至 Godot 原始碼的根目錄。"

msgid "To compile for Intel (x86-64) powered Macs, use::"
msgstr "若要為 Intel (x86-64) 核心的 Mac 編譯，請使用："

msgid "To compile for Apple Silicon (ARM64) powered Macs, use::"
msgstr ""
"若要為 Apple Silicon (ARM64) 核心的 Mac 編譯，請使用 (僅可用於 Godot "
"3.2.3+)："

msgid ""
"To support both architectures in a single \"Universal 2\" binary, run the "
"above two commands and then use ``lipo`` to bundle them together::"
msgstr ""
"若要使用單一「Universal 2」二進位執行檔來同時支援兩個架構，請執行上述兩個指"
"令，然後通過 ``lipo`` 來將這兩個檔案捆綁在一起："

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"``bin/`` subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the Project "
"Manager."
msgstr ""
"若沒出現問題的話，產生的二進位執行檔會被放在 ``bin/`` 子資料夾中。該執行檔包"
"含了完整的 Godot 遊戲引擎，且不需任何相依性套件即可執行。執行該檔案會開啟專案"
"管理員。"

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""
"若想在客製化建置上使用與 Godot 官方釋出版本不同的編輯器設定，可以通過在 "
"``bin/`` 資料夾中建立檔名為 ``._sc_`` 或 ``_sc_`` 的檔案來開啟 :ref:"
"`doc_data_paths_self_contained_mode` 。"

msgid ""
"If you are building the ``master`` branch, you also need to include support "
"for the MoltenVK Vulkan portability library. By default, it will be linked "
"statically from your installation of the Vulkan SDK for macOS. You can also "
"choose to link it dynamically by passing ``use_volk=yes`` and including the "
"dynamic library in your ``.app`` bundle::"
msgstr ""
"如果您正在建立「master」分支，您還需要包含對 MoltenVK Vulkan 可移植性庫的支"
"援。預設情況下，它將透過您安裝的適用於 macOS 的 Vulkan SDK 進行靜態連結。您也"
"可以選擇透過傳遞“use_volk=yes”並將動態庫包含在“.app”包中來動態連結它："

msgid "Running a headless/server build"
msgstr "編譯無周邊版本與伺服器版本"

msgid ""
"To run in *headless* mode which provides editor functionality to export "
"projects in an automated manner, use the normal build::"
msgstr "若要編譯用於以編輯器功能來自動化匯出專案的 **無周邊** 版本，請使用："

msgid "And then use the ``--headless`` command line argument::"
msgstr "然後使用“--headless”命令列參數::"

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""
"如果要編譯除錯版本的*伺服器*，支援:ref:`遠端除錯工具 "
"<doc_command_line_tutorial>`，那麼請使用： ::"

msgid ""
"To compile a release *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr "若要編譯可執行專屬遊戲伺服器的 **伺服器** 版本，請使用："

msgid "Building export templates"
msgstr "建置匯出樣板"

msgid ""
"To build macOS export templates, you have to compile using the targets "
"without the editor: ``target=template_release`` (release template) and "
"``target=template_debug``."
msgstr ""
"要建立macOS的匯出範本，你必須用 ``tools=no`` （無編輯器）進行編譯，並分別為 "
"``target=release`` （發行範本）和 ``target=release_debug``."

msgid ""
"You can then zip the ``macos_template.app`` folder to reproduce the ``macos."
"zip`` template from the official Godot distribution::"
msgstr ""
"然後你可以壓縮 ``osx_template.app`` 資料夾來複製 Godot 官方發行的 ``osx."
"zip`` 範本： ::"

msgid "Cross-compiling for macOS from Linux"
msgstr "在 Linux 上為 macOS 進行交叉編譯"

msgid ""
"It is possible to compile for macOS in a Linux environment (and maybe also "
"in Windows using the Windows Subsystem for Linux). For that, you'll need to "
"install `OSXCross <https://github.com/tpoechtrager/osxcross>`__ to be able "
"to use macOS as a target. First, follow the instructions to install it:"
msgstr ""
"可以在 Linux 環境下為 macOS 編譯 (Windows 下也許可以使用適用於 Linux 的 "
"Windows 子系統來編譯)。若要在 Linux 下為 macOS 交叉編譯，則必須安裝 "
"`OSXCross <https://github.com/tpoechtrager/osxcross>`__ 來將 macOS 作為建置目"
"標使用。首先，請依照下列指示安裝 OSXCross："

msgid ""
"Clone the `OSXCross repository <https://github.com/tpoechtrager/osxcross>`__ "
"somewhere on your machine (or download a ZIP file and extract it somewhere), "
"e.g.::"
msgstr ""
"先 Clone `OSXCross 儲存庫 <https://github.com/tpoechtrager/osxcross>`__ 至電"
"腦上的某處 (或下載 ZIP 檔然後解壓縮)。如："

msgid ""
"Follow the instructions to package the SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"
msgstr ""
"請依照這個指示來打包 SDK：https://github.com/tpoechtrager/osxcross#packaging-"
"the-sdk"

msgid ""
"Follow the instructions to install OSXCross: https://github.com/tpoechtrager/"
"osxcross#installation"
msgstr ""
"請依照這個指示來安裝 OSXCross：https://github.com/tpoechtrager/"
"osxcross#installation"

msgid ""
"After that, you will need to define the ``OSXCROSS_ROOT`` as the path to the "
"OSXCross installation (the same place where you cloned the repository/"
"extracted the zip), e.g.::"
msgstr ""
"之後，還需要將 ``OSXCROSS_ROOT`` 定義為 OSXCross 安裝的路徑 (也就是與儲存庫 "
"Clone 或解壓縮的路徑)。如："

msgid "Now you can compile with SCons like you normally would::"
msgstr "之後就可以與平常一樣使用 SCons："

msgid ""
"If you have an OSXCross SDK version different from the one expected by the "
"SCons buildsystem, you can specify a custom one with the ``osxcross_sdk`` "
"argument::"
msgstr ""
"若 OSXCross 的 SDK 版本與 SCons 建置系統所預期不同，則必須通過 "
"``osxcross_sdk`` 參數來指定一個版本："
