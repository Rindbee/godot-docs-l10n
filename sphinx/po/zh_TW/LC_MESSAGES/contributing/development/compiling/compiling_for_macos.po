#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for macOS"
msgstr "在 macOS 上編譯"

msgid ""
"This page describes how to compile macOS editor and export template binaries "
"from source. If you're looking to export your project to macOS instead, "
"read :ref:`doc_exporting_for_macos`."
msgstr ""
"本頁說明如何從原始碼編譯 macOS 編輯器與匯出樣板二進位檔。如果你想將專案匯出"
"到 macOS，請參閱 :ref:`doc_exporting_for_macos`。"

msgid "Requirements"
msgstr "系統需求"

msgid "For compiling under macOS, the following is required:"
msgstr "在 macOS 下編譯時，需符合以下需求："

msgid "`Python 3.8+ <https://www.python.org/downloads/macos/>`_."
msgstr "`Python 3.8+ <https://www.python.org/downloads/macos/>`_。"

msgid "`SCons 4.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr "`SCons 4.0+ <https://scons.org/pages/download.html>`_ 建置系統。"

msgid ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ (or the more "
"lightweight Command Line Tools for Xcode)."
msgstr ""
"`Xcode <https://apps.apple.com/us/app/xcode/id497799835>`_ （或更輕量的 "
"Xcode 命令列工具）。"

msgid ""
"`Vulkan SDK <https://sdk.lunarg.com/sdk/download/latest/mac/vulkan-"
"sdk.dmg>`_ for MoltenVK (macOS doesn't support Vulkan out of the box). The "
"latest Vulkan SDK version can be installed quickly by running ``misc/scripts/"
"install_vulkan_sdk_macos.sh`` within the Godot source repository."
msgstr ""
"適用於 MoltenVK 的 `Vulkan SDK <https://sdk.lunarg.com/sdk/download/latest/"
"mac/vulkan-sdk.dmg>`_ （macOS 預設不支援 Vulkan）。可在 Godot 原始碼資料夾中"
"執行 ``misc/scripts/install_vulkan_sdk_macos.sh`` 以快速安裝最新版 Vulkan "
"SDK。"

msgid ""
"If you have `Homebrew <https://brew.sh/>`_ installed, you can easily install "
"SCons using the following command::"
msgstr ""
"若已安裝 `Homebrew <https://brew.sh/>`_，可以用以下指令輕鬆安裝 SCons："

msgid ""
"Installing Homebrew will also fetch the Command Line Tools for Xcode "
"automatically if you don't have them already."
msgstr "安裝 Homebrew 時，若尚未安裝 Xcode 命令列工具，會自動下載安裝。"

msgid ""
"Similarly, if you have `MacPorts <https://www.macports.org/>`_ installed, "
"you can easily install SCons using the following command::"
msgstr ""
"同樣地，若已安裝 `MacPorts <https://www.macports.org/>`_，可使用以下指令安裝 "
"SCons："

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr "如需取得 Godot 編譯所需的原始碼，請參閱 :ref:`doc_getting_source`。"

msgid ""
"For a general overview of SCons usage for Godot, "
"see :ref:`doc_introduction_to_the_buildsystem`."
msgstr ""
"關於 Godot 使用 SCons 的基本說明，請參"
"閱 :ref:`doc_introduction_to_the_buildsystem`。"

msgid "Compiling"
msgstr "編譯"

msgid "Start a terminal, go to the root directory of the engine source code."
msgstr "開啟終端機，切換至引擎原始碼的根目錄。"

msgid "To compile for Intel (x86-64) powered Macs, use::"
msgstr "若要為 Intel (x86-64) 架構的 Mac 編譯，請輸入："

msgid "To compile for Apple Silicon (ARM64) powered Macs, use::"
msgstr "若要為 Apple Silicon（ARM64 架構）的 Mac 編譯，請輸入："

msgid ""
"If you are compiling Godot to make changes or contribute to the engine, you "
"may want to use the SCons options ``dev_build=yes`` or ``dev_mode=yes``. "
"See :ref:`doc_introduction_to_the_buildsystem_development_and_production_aliases` "
"for more info."
msgstr ""
"若你自行編譯 Godot 以進行修改或貢獻開發，建議在 SCons 加上 ``dev_build=yes`` "
"或 ``dev_mode=yes`` 選項。詳情請參"
"閱 :ref:`doc_introduction_to_the_buildsystem_development_and_production_aliases`。"

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"``bin/`` subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the Project "
"Manager."
msgstr ""
"若一切順利，產生的二進位執行檔會放在 ``bin/`` 子資料夾中。此執行檔包含完整引"
"擎，無須任何相依套件即可執行。啟動後會顯示專案管理員。"

msgid ""
"Using a standalone editor executable is not recommended, it should be always "
"packaged into an ``.app`` bundle to avoid UI activation issues."
msgstr ""
"不建議直接使用獨立執行檔，應將其包裝為 ``.app`` 應用程式，以避免使用者介面啟"
"動上的問題。"

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""
"若希望自編譯 Godot 和官方版本使用不同編輯器設定，可在 ``bin/`` 資料夾內建立 "
"``._sc_`` 或 ``_sc_`` 檔案，以啟"
"用 :ref:`doc_data_paths_self_contained_mode`。"

msgid "Automatic ``.app`` bundle creation"
msgstr "自動建立 ``.app`` 應用程式包"

msgid ""
"To automatically create an ``.app`` bundle like in the official builds, use "
"the ``generate_bundle=yes`` option on the *last* SCons command used to build "
"editor::"
msgstr ""
"若要像官方版本一樣自動建立 ``.app`` 應用程式包，請在最後一次建構編輯器時於 "
"SCons 指令加上 ``generate_bundle=yes`` 選項："

msgid "Manual ``.app`` bundle creation"
msgstr "手動建立 ``.app`` 應用程式包"

msgid ""
"To support both architectures in a single \"Universal 2\" binary, run the "
"above two commands and then use ``lipo`` to bundle them together::"
msgstr ""
"若要用單一「Universal 2」二進位檔同時支援兩種架構，請先執行上述兩個指令，再"
"用 ``lipo`` 將執行檔合併："

msgid ""
"To create an ``.app`` bundle, you need to use the template located in ``misc/"
"dist/macos_tools.app``. Typically, for an optimized editor binary built with "
"``dev_build=yes``::"
msgstr ""
"若要建立 ``.app`` 應用程式包，需使用 ``misc/dist/macos_tools.app`` 樣板。一般"
"來說，若以 ``dev_build=yes`` 建構最佳化編輯器，請執行："

msgid ""
"If you are building the ``master`` branch, you also need to include support "
"for the MoltenVK Vulkan portability library. By default, it will be linked "
"statically from your installation of the Vulkan SDK for macOS. You can also "
"choose to link it dynamically by passing ``use_volk=yes`` and including the "
"dynamic library in your ``.app`` bundle::"
msgstr ""
"如果你是建構 ``master`` 分支，也需包含對 MoltenVK Vulkan 可攜性函式庫的支援。"
"預設會從已安裝的 macOS Vulkan SDK 進行靜態連結，也可選擇加上 "
"``use_volk=yes``，並將動態函式庫放入 ``.app`` 套件，以改用動態連結："

msgid "Running a headless/server build"
msgstr "執行無介面／伺服器版本"

msgid ""
"To run in *headless* mode which provides editor functionality to export "
"projects in an automated manner, use the normal build::"
msgstr "若要以 *無介面* 模式執行，提供自動化專案匯出的功能，請照常建構執行檔："

msgid "And then use the ``--headless`` command line argument::"
msgstr "接著使用 ``--headless`` 指令列參數："

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""
"若要編譯可搭配 :ref:`遠端偵錯工具 <doc_command_line_tutorial>` 使用的 *伺服器"
"* 除錯版本，請輸入："

msgid ""
"To compile a release *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr "若要編譯專為遊戲伺服器最佳化的發行版 *伺服器*，請輸入："

msgid "Building export templates"
msgstr "建構匯出樣板"

msgid ""
"To build macOS export templates, you have to compile using the targets "
"without the editor: ``target=template_release`` (release template) and "
"``target=template_debug``."
msgstr ""
"要建構 macOS 匯出樣板，需以無編輯器目標進行編譯：``target=template_release``"
"（發行樣板）及 ``target=template_debug``。"

msgid ""
"Official templates are *Universal 2* binaries which support both ARM64 and "
"Intel x86_64 architectures."
msgstr ""
"官方樣板為 *Universal 2* 二進位檔，可同時支援 ARM64 及 Intel x86_64 架構。"

msgid "To support ARM64 (Apple Silicon) + Intel x86_64::"
msgstr "若需同時支援 ARM64（Apple Silicon）及 Intel x86_64："

msgid ""
"To support ARM64 (Apple Silicon) only (smaller file size, but less "
"compatible with older hardware)::"
msgstr "若僅需支援 ARM64（Apple Silicon）（檔案較小，但不相容舊硬體）："

msgid ""
"To create an ``.app`` bundle like in the official builds, you need to use "
"the template located in ``misc/dist/macos_template.app``. This process can "
"be automated by using the ``generate_bundle=yes`` option on the *last* SCons "
"command used to build export templates (so that all binaries can be "
"included). This option also takes care of calling ``lipo`` to create an "
"*Universal 2* binary from two separate ARM64 and x86_64 binaries (if both "
"were compiled beforehand)."
msgstr ""
"若要如官方發行版般建立 ``.app`` 套件，需使用 ``misc/dist/"
"macos_template.app`` 樣板。此流程可在最後一次建構匯出樣板時於 SCons 指令加上 "
"``generate_bundle=yes`` 選項自動完成（可包含所有二進位檔）。此選項也會自動調"
"用 ``lipo``，將 ARM64 與 x86_64 兩種二進位檔合併為 *Universal 2* 二進位檔（若"
"兩者皆已編譯）。"

msgid ""
"You also need to include support for the MoltenVK Vulkan portability "
"library. By default, it will be linked statically from your installation of "
"the Vulkan SDK for macOS. You can also choose to link it dynamically by "
"passing ``use_volk=yes`` and including the dynamic library in your ``.app`` "
"bundle::"
msgstr ""
"也需包含對 MoltenVK Vulkan 可攜性函式庫的支援。預設會從你的 macOS Vulkan SDK "
"安裝進行靜態連結，你也可選擇加上 ``use_volk=yes``，並將動態函式庫放入 "
"``.app`` 套件，以改用動態連結："

msgid ""
"In most cases, static linking should be preferred as it makes distribution "
"easier. The main upside of dynamic linking is that it allows updating "
"MoltenVK without having to recompile export templates."
msgstr ""
"大多數情況下建議使用靜態連結，方便發佈。動態連結的好處是日後可更新 MoltenVK "
"而無需重新編譯匯出樣板。"

msgid ""
"You can then zip the ``macos_template.app`` folder to reproduce the "
"``macos.zip`` template from the official Godot distribution::"
msgstr ""
"然後可將 ``macos_template.app`` 資料夾壓縮為 ZIP 檔，以產生與 Godot 官方發行"
"相同的 ``macos.zip`` 樣板："

msgid "Cross-compiling for macOS from Linux"
msgstr "於 Linux 上為 macOS 進行交叉編譯"

msgid ""
"It is possible to compile for macOS in a Linux environment (and maybe also "
"in Windows using the Windows Subsystem for Linux). For that, you'll need to "
"install `OSXCross <https://github.com/tpoechtrager/osxcross>`__ to be able "
"to use macOS as a target. First, follow the instructions to install it:"
msgstr ""
"你可以在 Linux 環境下編譯 macOS 執行檔（也可在 Windows 的子系統 Linux 上嘗"
"試）。需安裝 `OSXCross <https://github.com/tpoechtrager/osxcross>`__，以將 "
"macOS 設為目標平台。請先依下列說明安裝："

msgid ""
"Clone the `OSXCross repository <https://github.com/tpoechtrager/osxcross>`__ "
"somewhere on your machine (or download a ZIP file and extract it somewhere), "
"e.g.::"
msgstr ""
"將 `OSXCross 儲存庫 <https://github.com/tpoechtrager/osxcross>`__ 複製"
"（clone）到電腦上（或下載 ZIP 並解壓），例如："

msgid ""
"Follow the instructions to package the SDK: https://github.com/tpoechtrager/"
"osxcross#packaging-the-sdk"
msgstr ""
"請依官方說明包裝 SDK：https://github.com/tpoechtrager/osxcross#packaging-the-"
"sdk"

msgid ""
"Follow the instructions to install OSXCross: https://github.com/tpoechtrager/"
"osxcross#installation"
msgstr ""
"請依官方說明安裝 OSXCross：https://github.com/tpoechtrager/"
"osxcross#installation"

msgid ""
"After that, you will need to define the ``OSXCROSS_ROOT`` as the path to the "
"OSXCross installation (the same place where you cloned the repository/"
"extracted the zip), e.g.::"
msgstr ""
"接著需將 ``OSXCROSS_ROOT`` 設定為 OSXCross 的安裝路徑（即你 clone 儲存庫或解"
"壓縮的資料夾），例如："

msgid "Now you can compile with SCons like you normally would::"
msgstr "現在可以像平常一樣用 SCons 編譯："

msgid ""
"If you have an OSXCross SDK version different from the one expected by the "
"SCons buildsystem, you can specify a custom one with the ``osxcross_sdk`` "
"argument::"
msgstr ""
"若 OSXCross SDK 版本與 SCons 建構系統預期的不同，可用 ``osxcross_sdk`` 參數指"
"定："

msgid "Troubleshooting"
msgstr "疑難排解"
