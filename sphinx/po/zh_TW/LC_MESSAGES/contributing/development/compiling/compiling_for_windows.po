#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for Windows"
msgstr "在 Windows 上編譯"

msgid ""
"This page describes how to compile Windows editor and export template "
"binaries from source. If you're looking to export your project to Windows "
"instead, read :ref:`doc_exporting_for_windows`."
msgstr ""
"本頁說明如何從原始碼編譯 Windows 編輯器與匯出範本二進位檔。若你想要將專案匯出"
"到 Windows，請參閱 :ref:`doc_exporting_for_windows`。"

msgid "Requirements"
msgstr "系統需求"

msgid "For compiling under Windows, the following is required:"
msgstr "在 Windows 下編譯需要下列條件："

msgid "A C++ compiler. Use one of the following:"
msgstr "需要一個 C++ 編譯器，請選擇以下其中一種："

msgid ""
"`Visual Studio Community <https://www.visualstudio.com/vs/community/>`_, "
"version 2019 or later. Visual Studio 2022 is recommended. **Make sure to "
"enable C++ in the list of workflows to install.** If you've already "
"installed Visual Studio without C++ support, run the installer again; it "
"should present you a **Modify** button. Supports ``x86_64``, ``x86_32``, and "
"``arm64``."
msgstr ""
"`Visual Studio Community <https://www.visualstudio.com/vs/community/>`_，"
"2019 或更新版本。建議使用 Visual Studio 2022。**請務必在安裝流程中勾選 C++ 支"
"援。** 若你已經安裝了 Visual Studio 但沒有 C++ 支援，請重新執行安裝程式並點"
"選 **Modify** 按鈕。支援 ``x86_64``、``x86_32`` 和 ``arm64`` 架構。"

msgid ""
"`MinGW-w64 <https://mingw-w64.org/>`_ with GCC can be used as an alternative "
"to Visual Studio. Be sure to install/configure it to use the ``posix`` "
"thread model. **Important:** When using MinGW to compile the ``master`` "
"branch, you need GCC 9 or later. Supports ``x86_64`` and ``x86_32`` only."
msgstr ""
"也可以使用配有 GCC 的 `MinGW-w64 <https://mingw-w64.org/>`_ 來取代 Visual "
"Studio。請確保安裝或設定時選用 ``posix`` 執行緒模型。**重要：** 若要用 MinGW "
"編譯 ``master`` 分支，需使用 GCC 9 或更新版本。僅支援 ``x86_64`` 與 "
"``x86_32`` 架構。"

msgid ""
"`MinGW-LLVM <https://github.com/mstorsjo/llvm-mingw/releases>`_ with clang "
"can be used as an alternative to Visual Studio and MinGW-w64. Supports "
"``x86_64``, ``x86_32``, and ``arm64``."
msgstr ""
"也可使用配有 clang 的 `MinGW-LLVM <https://github.com/mstorsjo/llvm-mingw/"
"releases>`_ 來取代 Visual Studio 與 MinGW-w64。支援 ``x86_64``、``x86_32`` "
"與 ``arm64`` 架構。"

msgid ""
"`Python 3.8+ <https://www.python.org/downloads/windows/>`_. **Make sure to "
"enable the option to add Python to the** ``PATH`` **in the installer.**"
msgstr ""
"`Python 3.8+ <https://www.python.org/downloads/windows/>`_。**請記得在安裝程"
"式中勾選「將 Python 加入 ``PATH``」的選項。**"

msgid ""
"`SCons 4.0+ <https://scons.org/pages/download.html>`_ build system. Using "
"the latest release is recommended, especially for proper support of recent "
"Visual Studio releases."
msgstr ""
"`SCons 4.0+ <https://scons.org/pages/download.html>`_ 建構系統。建議使用最新"
"版，才能正確支援最新的 Visual Studio。"

msgid ""
"If you have `Scoop <https://scoop.sh/>`_ installed, you can easily install "
"MinGW and other dependencies using the following command::"
msgstr ""
"若有安裝 `Scoop <https://scoop.sh/>`_，可用下列指令輕鬆安裝 MinGW 及其他相依"
"套件："

msgid ""
"If you have `MSYS2 <https://www.msys2.org/>`_ installed, you can easily "
"install MinGW and other dependencies using the following command::"
msgstr ""
"若有安裝 `MSYS2 <https://www.msys2.org/>`_，可用下列指令輕鬆安裝 MinGW 及其他"
"相依套件："

msgid ""
"For each MSYS2 MinGW subsystem, you should then run `pip3 install scons` in "
"its shell."
msgstr "需在每個 MSYS2 MinGW 子系統的 Shell 中執行 `pip3 install scons`。"

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr "如需取得 Godot 編譯所需的原始碼，請參閱 :ref:`doc_getting_source`。"

msgid ""
"For a general overview of SCons usage for Godot, "
"see :ref:`doc_introduction_to_the_buildsystem`."
msgstr ""
"關於 Godot 使用 SCons 的基本說明，請參"
"閱 :ref:`doc_introduction_to_the_buildsystem`。"

msgid "Setting up SCons"
msgstr "設定 SCons"

msgid ""
"To install SCons, open the command prompt and run the following command::"
msgstr "要安裝 SCons，請開啟命令提示字元並輸入下列指令："

msgid ""
"If you are prompted with the message ``Defaulting to user installation "
"because normal site-packages is not writeable``, you may have to run that "
"command again using elevated permissions. Open a new command prompt as an "
"Administrator then run the command again to ensure that SCons is available "
"from the ``PATH``."
msgstr ""
"若看到 ``Defaulting to user installation because normal site-packages is not "
"writeable`` 訊息，請以系統管理員身分重新開啟命令提示字元並再次執行該指令，以"
"確保 SCons 能在 ``PATH`` 中使用。"

msgid ""
"To check whether you have installed Python and SCons correctly, you can type "
"``python --version`` and ``scons --version`` into a command prompt "
"(``cmd.exe``)."
msgstr ""
"可於命令提示字元（``cmd.exe``）輸入 ``python --version`` 與 ``scons --"
"version`` 來檢查 Python 與 SCons 是否安裝正確。"

msgid ""
"If the commands above don't work, make sure to add Python to your ``PATH`` "
"environment variable after installing it, then check again. You can do so by "
"running the Python installer again and enabling the option to add Python to "
"the ``PATH``."
msgstr ""
"如果上述指令無法執行，請確認安裝 Python 後已將其加入 ``PATH`` 環境變數，再重"
"新檢查。可再次執行 Python 安裝程式並勾選「將 Python 加入 ``PATH``」選項。"

msgid ""
"If SCons cannot detect your Visual Studio installation, it might be that "
"your SCons version is too old. Update it to the latest version with ``python "
"-m pip install --upgrade scons``."
msgstr ""
"若 SCons 無法偵測你的 Visual Studio 安裝，可能是 SCons 版本過舊，請用 "
"``python -m pip install --upgrade scons`` 升級至最新版。"

msgid "Downloading Godot's source"
msgstr "下載 Godot 原始碼"

msgid "Refer to :ref:`doc_getting_source` for detailed instructions."
msgstr "詳情請參閱 :ref:`doc_getting_source`。"

msgid ""
"The tutorial will assume from now on that you placed the source code in ``C:"
"\\godot``."
msgstr "本教學接下來預設你的原始碼放在 ``C:\\godot``。"

msgid ""
"To prevent slowdowns caused by continuous virus scanning during compilation, "
"add the Godot source folder to the list of exceptions in your antivirus "
"software."
msgstr ""
"為避免在編譯時因為殺毒軟體持續掃描導致速度變慢，請將 Godot 原始碼資料夾加入防"
"毒軟體的例外清單。"

msgid ""
"For Windows Defender, hit the :kbd:`Windows` key, type \"Windows Security\" "
"then hit :kbd:`Enter`. Click on **Virus & threat protection** on the left "
"panel. Under **Virus & threat protection settings** click on **Manage "
"Settings** and scroll down to **Exclusions**. Click **Add or remove "
"exclusions** then add the Godot source folder."
msgstr ""
"對於 Windows Defender，請按下 :kbd:`Windows` 鍵，輸入「Windows 安全性」並"
"按 :kbd:`Enter`。點選左側的 **病毒與威脅防護**。在 **病毒與威脅防護設定** "
"下，點擊 **管理設定** 並捲動到 **排除項目**。點選 **新增或移除排除項目**，然"
"後新增 Godot 原始碼資料夾。"

msgid "Compiling"
msgstr "編譯"

msgid "Selecting a compiler"
msgstr "選擇編譯器"

msgid ""
"SCons will automatically find and use an existing Visual Studio "
"installation. If you do not have Visual Studio installed, it will attempt to "
"use MinGW instead. If you already have Visual Studio installed and want to "
"use MinGW-w64, pass ``use_mingw=yes`` to the SCons command line. Note that "
"MSVC builds cannot be performed from the MSYS2 or MinGW shells. Use either "
"``cmd.exe`` or PowerShell instead. If you are using MinGW-LLVM, pass both "
"``use_mingw=yes`` and ``use_llvm=yes`` to the SCons command line."
msgstr ""
"SCons 會自動搜尋並使用已安裝的 Visual Studio。如果你沒有安裝 Visual Studio，"
"SCons 會改用 MinGW。若已安裝 Visual Studio 但想用 MinGW-w64，請在 SCons 命令"
"列加上 ``use_mingw=yes``。注意：MSVC 編譯無法在 MSYS2 或 MinGW shell 下進行，"
"請改用 ``cmd.exe`` 或 PowerShell。如果要用 MinGW-LLVM，請同時加上 "
"``use_mingw=yes`` 與 ``use_llvm=yes``。"

msgid ""
"During development, using the Visual Studio compiler is usually a better "
"idea, as it links the Godot binary much faster than MinGW. However, MinGW "
"can produce more optimized binaries using link-time optimization (see "
"below), making it a better choice for production use. This is particularly "
"the case for the GDScript VM which performs much better with MinGW compared "
"to MSVC. Therefore, it's recommended to use MinGW to produce builds that you "
"distribute to players."
msgstr ""
"開發期間，建議使用 Visual Studio 編譯器，因為它連結 Godot 二進位檔的速度比 "
"MinGW 快很多。但 MinGW 支援連結時最佳化（LTO，見下方），可生成更高效的二進位"
"檔，適合正式發行版本。特別是在 GDScript VM 部分，使用 MinGW 的效能會比 MSVC "
"好許多。因此，建議用 MinGW 編譯要發佈給玩家的版本。"

msgid ""
"All official Godot binaries are built in `custom containers <https://"
"github.com/godotengine/build-containers>`__ using MinGW."
msgstr ""
"Godot 官方所有二進位檔皆是在 `專用容器 <https://github.com/godotengine/build-"
"containers>`__ 以 MinGW 編譯產生。"

msgid "Running SCons"
msgstr "執行 SCons"

msgid ""
"After opening a command prompt, change to the root directory of the engine "
"source code (using ``cd``) and type:"
msgstr ""
"開啟命令提示字元後，請（用 ``cd``）切換到引擎原始碼的根目錄，然後輸入："

msgid ""
"When compiling with multiple CPU threads, SCons may warn about pywin32 being "
"missing. You can safely ignore this warning."
msgstr ""
"如果用多核心執行緒編譯，SCons 可能會提示找不到 pywin32，可以放心忽略這個警"
"告。"

msgid ""
"If you are compiling Godot to make changes or contribute to the engine, you "
"may want to use the SCons options ``dev_build=yes`` or ``dev_mode=yes``. "
"See :ref:`doc_introduction_to_the_buildsystem_development_and_production_aliases` "
"for more info."
msgstr ""
"若你自行編譯 Godot 以進行修改或貢獻開發，建議在 SCons 加上 ``dev_build=yes`` "
"或 ``dev_mode=yes`` 選項。詳情請參"
"閱 :ref:`doc_introduction_to_the_buildsystem_development_and_production_aliases`。"

msgid ""
"If all goes well, the resulting binary executable will be placed in ``C:"
"\\godot\\bin\\`` with the name ``godot.windows.editor.x86_32.exe`` or "
"``godot.windows.editor.x86_64.exe``. By default, SCons will build a binary "
"matching your CPU architecture, but this can be overridden using "
"``arch=x86_64``, ``arch=x86_32``, or ``arch=arm64``."
msgstr ""
"編譯完成後，產生的執行檔會放在 ``C:\\godot\\bin\\``，檔名為 "
"``godot.windows.editor.x86_32.exe`` 或 ``godot.windows.editor.x86_64.exe``。"
"預設 SCons 會自動偵測並建構符合你 CPU 架構的二進位檔，也可用 "
"``arch=x86_64``、``arch=x86_32`` 或 ``arch=arm64`` 來指定。"

msgid ""
"This executable file contains the whole engine and runs without any "
"dependencies. Running it will bring up the Project Manager."
msgstr "此執行檔包含完整引擎，無其他相依檔案，啟動後會進入專案管理員。"

msgid ""
"If you are compiling Godot for production use, you can make the final "
"executable smaller and faster by adding the SCons option ``production=yes``. "
"This enables additional compiler optimizations and link-time optimization."
msgstr ""
"若要為正式發行版本編譯 Godot，可加上 SCons 選項 ``production=yes``，讓最終執"
"行檔更精簡且速度更快。此選項會啟用進階編譯器最佳化與連結時最佳化（LTO）。"

msgid ""
"LTO takes some time to run and requires up to 30 GB of available RAM while "
"compiling (depending on toolchain). If you're running out of memory with the "
"above option, use ``production=yes lto=none`` or ``production=yes lto=thin`` "
"(LLVM only) for a lightweight but less effective form of LTO."
msgstr ""
"LTO（連結時最佳化）會延長編譯時間，且需高達 30GB 記憶體（視工具鏈而異）。若記"
"憶體不足，可用 ``production=yes lto=none`` 或（僅限 LLVM）用 "
"``production=yes lto=thin``，這樣會使用較少資源但最佳化效果較低。"

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""
"若希望自編譯 Godot 和官方版本使用不同編輯器設定，可在 ``bin/`` 資料夾內建立 "
"``._sc_`` 或 ``_sc_`` 檔案，以啟"
"用 :ref:`doc_data_paths_self_contained_mode`。"

msgid "Compiling with support for Direct3D 12"
msgstr "編譯支援 Direct3D 12"

msgid ""
"By default, builds of Godot do not contain support for the Direct3D 12 "
"graphics API."
msgstr "預設情況下，Godot 並未內建支援 Direct3D 12 圖形 API。"

msgid ""
"You can install the required dependencies by running ``python misc/scripts/"
"install_d3d12_sdk_windows.py`` in the Godot source repository. After running "
"this script, add the ``d3d12=yes`` SCons option to enable Direct3D 12 "
"support. This will use the default paths for the various dependencies, which "
"match the ones used in the script."
msgstr ""
"你可以在 Godot 原始碼資料夾中執行 ``python misc/scripts/"
"install_d3d12_sdk_windows.py`` 來安裝所需相依套件。執行完畢後，在 SCons 命令"
"加上 ``d3d12=yes`` 參數即可啟用 Direct3D 12 支援。這會自動使用與腳本一致的預"
"設相依套件路徑。"

msgid ""
"You can find the detailed steps below if you wish to set up dependencies "
"manually, but the above script handles everything for you (including the "
"optional PIX and Agility SDK components)."
msgstr ""
"若你想手動安裝相依套件，下方會有詳細步驟，但上述腳本已會自動處理（包含選用的 "
"PIX 與 Agility SDK 元件）。"

msgid ""
"`godot-nir-static library <https://github.com/godotengine/godot-nir-static/"
"releases/>`_. We compile the Mesa libraries you will need into a static "
"library. Download it anywhere, unzip it and remember the path to the "
"unzipped folder, you will need it below."
msgstr ""
"`godot-nir-static library <https://github.com/godotengine/godot-nir-static/"
"releases/>`_。我們已將所需的 Mesa 函式庫編譯成靜態函式庫。請下載後解壓縮，並"
"記下路徑，後續會用到。"

msgid ""
"You can optionally build the godot-nir-static libraries yourself with the "
"following steps:"
msgstr "你也可依下列步驟自行編譯 godot-nir-static 函式庫："

msgid ""
"Install the Python package `mako <https://www.makotemplates.org>`_ which is "
"needed to generate some files."
msgstr ""
"安裝 Python 套件 `mako <https://www.makotemplates.org>`_，這是用來產生部分檔"
"案所需。"

msgid ""
"Clone the `godot-nir-static <https://github.com/godotengine/godot-nir-"
"static>`_ directory and navigate to it."
msgstr ""
"複製 `godot-nir-static <https://github.com/godotengine/godot-nir-static>`_ 專"
"案並切換到該資料夾。"

msgid "Run the following::"
msgstr "執行下列指令："

msgid ""
"If you are building with MinGW-w64, add ``use_mingw=yes`` to the ``scons`` "
"command, you can also specify build architecture using ``arch={architecture}"
"``. If you are building with MinGW-LLVM, add both ``use_mingw=yes`` and "
"``use_llvm=yes`` to the ``scons`` command."
msgstr ""
"若用 MinGW-w64 編譯，請於 ``scons`` 指令加上 ``use_mingw=yes``，並可用 "
"``arch={architecture}`` 指定架構。若用 MinGW-LLVM，請同時加上 "
"``use_mingw=yes`` 與 ``use_llvm=yes``。"

msgid ""
"If you are building with MinGW and the binaries are not located in the "
"``PATH``, add ``mingw_prefix=\"/path/to/mingw\"`` to the ``scons`` command."
msgstr ""
"若用 MinGW 編譯且執行檔不在 ``PATH``，請於 ``scons`` 指令加上 "
"``mingw_prefix=\"/path/to/mingw\"``。"

msgid ""
"Mesa static library should be built using the same compiler and the same CRT "
"(if you are building with MinGW) you are using for building Godot."
msgstr ""
"Mesa 靜態函式庫必須使用與你編譯 Godot 相同的編譯器與 CRT（C 執行期庫，若用 "
"MinGW 時）。"

msgid "Optionally, you can compile with the following for additional features:"
msgstr "你也可以加上以下功能進行編譯："

msgid ""
"`PIX <https://devblogs.microsoft.com/pix/download>`_ is a performance tuning "
"and debugging application for Direct3D12 applications. If you compile-in "
"support for it, you can get much more detailed information through PIX that "
"will help you optimize your game and troubleshoot graphics bugs. To use it, "
"download the WinPixEventRuntime package. You will be taken to a NuGet "
"package page where you can click \"Download package\" to get it. Once "
"downloaded, change the file extension to .zip and unzip the file to some "
"path."
msgstr ""
"`PIX <https://devblogs.microsoft.com/pix/download>`_ 是針對 Direct3D12 應用的"
"效能調校與偵錯工具。若你編譯時加入其支援，可藉由 PIX 取得更詳細資訊，協助優化"
"遊戲與偵錯圖形問題。使用方法：下載 WinPixEventRuntime 套件（會導向 NuGet 網"
"頁，點選「Download package」），下載後將副檔名改為 .zip 並解壓縮。"

msgid ""
"`Agility SDK <https://devblogs.microsoft.com/directx/directx12agility>`_ can "
"be used to provide access to the latest Direct3D 12 features without relying "
"on driver updates. To use it, download the latest Agility SDK package. You "
"will be taken to a NuGet package page where you can click \"Download "
"package\" to get it. Once downloaded, change the file extension to .zip and "
"unzip the file to some path."
msgstr ""
"`Agility SDK <https://devblogs.microsoft.com/directx/directx12agility>`_ 可讓"
"你不需依賴顯示卡驅動程式更新也能用到最新的 Direct3D 12 功能。使用方法：下載最"
"新版 Agility SDK 套件（同樣會導向 NuGet，點選「Download package」），下載後將"
"副檔名改為 .zip 並解壓縮。"

msgid ""
"If you use a preview version of the Agility SDK, remember to enable "
"developer mode in Windows; otherwise it won't be used."
msgstr ""
"若使用 Agility SDK 預覽版，請記得在 Windows 啟用開發人員模式，否則無法套用。"

msgid ""
"If you want to use a PIX with MinGW build, navigate to PIX runtime directory "
"and use the following commands to generate import library::"
msgstr ""
"若要在 MinGW 編譯版本中啟用 PIX，請切換至 PIX 執行時目錄並執行下列指令以產生 "
"import library："

msgid ""
"When building Godot, you will need to tell SCons to use Direct3D 12 and "
"where to look for the additional libraries:"
msgstr "編譯 Godot 時，需指定 SCons 啟用 Direct3D 12，並告知相依函式庫路徑："

msgid "Or, with all options enabled:"
msgstr "或啟用全部選項時："

msgid ""
"For the Agility SDK's DLLs you have to explicitly choose the kind of "
"workflow. Single-arch is the default (DLLs copied to ``bin/``). If you pass "
"``agility_sdk_multi_arch=yes`` to SCons, you'll opt-in for multi-arch. DLLs "
"will be copied to the appropriate ``bin/<arch>/`` subdirectories and at "
"runtime the right one will be loaded."
msgstr ""
"Agility SDK 的 DLL 需選擇作業模式。預設為單一架構（DLL 複製到 ``bin/``）。若"
"在 SCons 加上 ``agility_sdk_multi_arch=yes`` 則會轉為多架構模式，DLL 會自動複"
"製到 ``bin/<arch>/`` 子目錄並於執行時自動載入正確版本。"

msgid "Compiling with ANGLE support"
msgstr "編譯支援 ANGLE"

msgid ""
"ANGLE provides a translation layer from OpenGL ES 3.x to Direct3D 11 and can "
"be used to improve support for the Compatibility renderer on some older GPUs "
"with outdated OpenGL drivers and on Windows for ARM."
msgstr ""
"ANGLE 提供 OpenGL ES 3.x 到 Direct3D 11 的轉換層，可提升部分舊型顯示卡"
"（OpenGL 驅動程式較舊）及 Windows on ARM 上的相容性渲染器支援。"

msgid ""
"By default, Godot is built with dynamically linked ANGLE, you can use it by "
"placing ``libEGL.dll`` and ``libGLESv2.dll`` alongside the executable."
msgstr ""
"Godot 預設會使用動態連結的 ANGLE，只要將 ``libEGL.dll`` 與 ``libGLESv2.dll`` "
"放在執行檔旁即可。"

msgid ""
"You can use dynamically linked ANGLE with export templates as well, rename "
"aforementioned DLLs to ``libEGL.{architecture}.dll`` and ``libGLESv2."
"{architecture}.dll`` and place them alongside export template executables, "
"and libraries will be automatically copied during the export process."
msgstr ""
"你也可以在匯出樣板中使用動態連結 ANGLE，將上述 DLL 檔案分別重新命名為 "
"``libEGL.{architecture}.dll`` 與 ``libGLESv2.{architecture}.dll`` 並放在匯出"
"樣板執行檔旁，匯出時系統會自動複製所需函式庫。"

msgid "To compile Godot with statically linked ANGLE:"
msgstr "若要以靜態連結方式編譯 Godot 並支援 ANGLE："

msgid ""
"Download pre-built static libraries from `godot-angle-static library "
"<https://github.com/godotengine/godot-angle-static/releases>`_, and unzip "
"them."
msgstr ""
"請從 `godot-angle-static library <https://github.com/godotengine/godot-angle-"
"static/releases>`_ 下載預編譯靜態函式庫並解壓縮。"

msgid ""
"When building Godot, add ``angle_libs={path}`` to tell SCons where to look "
"for the ANGLE libraries::"
msgstr ""
"編譯 Godot 時，在 SCons 命令加上 ``angle_libs={path}``，指定 ANGLE 函式庫路"
"徑："

msgid ""
"You can optionally build the godot-angle-static libraries yourself with the "
"following steps:"
msgstr "你也可以依下列步驟自行編譯 godot-angle-static 靜態函式庫："

msgid ""
"Clone the `godot-angle-static <https://github.com/godotengine/godot-angle-"
"static>`_ directory and navigate to it."
msgstr ""
"複製 `godot-angle-static <https://github.com/godotengine/godot-angle-"
"static>`_ 專案並切換到該資料夾。"

msgid "Run the following command::"
msgstr "執行下列指令："

msgid ""
"If you are buildng with MinGW, add ``use_mingw=yes`` to the command, you can "
"also specify build architecture using ``arch={architecture}``. If you are "
"building with MinGW-LLVM, add both ``use_mingw=yes`` and ``use_llvm=yes`` to "
"the ``scons`` command."
msgstr ""
"若用 MinGW 編譯，請加上 ``use_mingw=yes``，也可用 ``arch={architecture}`` 指"
"定架構。若用 MinGW-LLVM，請同時加上 ``use_mingw=yes`` 與 ``use_llvm=yes``。"

msgid ""
"ANGLE static library should be built using the same compiler and the same "
"CRT (if you are building with MinGW) you are using for building Godot."
msgstr ""
"ANGLE 靜態函式庫必須使用與 Godot 相同的編譯器及 C 執行期庫（CRT，若用 MinGW "
"時）編譯。"

msgid "Development in Visual Studio"
msgstr "在 Visual Studio 進行開發"

msgid ""
"Using an IDE is not required to compile Godot, as SCons takes care of "
"everything. But if you intend to do engine development or debugging of the "
"engine's C++ code, you may be interested in configuring a code editor or an "
"IDE."
msgstr ""
"編譯 Godot 不一定要用 IDE，SCons 會自動處理。不過如果你打算開發或除錯引擎 C+"
"+ 原始碼，建議可以設定程式碼編輯器或 IDE。"

msgid ""
"Folder-based editors don't require any particular setup to start working "
"with Godot's codebase. To edit projects with Visual Studio they need to be "
"set up as a solution."
msgstr ""
"資料夾型編輯器不需特殊設定即可開始瀏覽 Godot 原始碼。若要用 Visual Studio 編"
"輯專案，需先建立解決方案。"

msgid ""
"You can create a Visual Studio solution via SCons by running SCons with the "
"``vsproj=yes`` parameter, like this::"
msgstr ""
"可透過 SCons 加上 ``vsproj=yes`` 參數來產生 Visual Studio 解決方案，例如："

msgid ""
"You will be able to open Godot's source in a Visual Studio solution now, and "
"able to build Godot using Visual Studio's **Build** button."
msgstr ""
"之後即可在 Visual Studio 解決方案中開啟 Godot 原始碼，並使用 **建置** 按鈕直"
"接編譯。"

msgid "See :ref:`doc_configuring_an_ide_vs` for further details."
msgstr "詳情請參閱 :ref:`doc_configuring_an_ide_vs`。"

msgid "Cross-compiling for Windows from other operating systems"
msgstr "在其他作業系統上交叉編譯 Windows 版本"

msgid ""
"If you are a Linux or macOS user, you need to install `MinGW-w64 <https://"
"www.mingw-w64.org/>`__, which typically comes in 32-bit and 64-bit variants, "
"or `MinGW-LLVM <https://github.com/mstorsjo/llvm-mingw/releases>`_, which "
"comes as a single archive for all target architectures. The package names "
"may differ based on your distribution, here are some known ones:"
msgstr ""
"若你是 Linux 或 macOS 使用者，需安裝 `MinGW-w64 <https://www.mingw-w64.org/"
">`__ （通常有 32 位元與 64 位元版本），或 `MinGW-LLVM <https://github.com/"
"mstorsjo/llvm-mingw/releases>`_ （單一壓縮檔支援所有目標架構）。不同套件管理"
"系統名稱可能不同，以下列出部分常見名稱："

msgid "**Arch Linux**"
msgstr "**Arch Linux**"

msgid "**Debian** / **Ubuntu**"
msgstr "**Debian** / **Ubuntu**"

msgid "**Fedora**"
msgstr "**Fedora**"

msgid "**macOS**"
msgstr "**macOS**"

msgid "**Mageia**"
msgstr "**Mageia**"

msgid ""
"Before attempting the compilation, SCons will check for the following "
"binaries in your ``PATH`` environment variable::"
msgstr "在開始編譯前，SCons 會檢查這些執行檔是否已在你的 ``PATH`` 環境變數中："

msgid ""
"If the binaries are not located in the ``PATH`` (e.g. ``/usr/bin``), you can "
"define the following environment variable to give a hint to the build "
"system::"
msgstr ""
"若這些執行檔不在 ``PATH``（例如 ``/usr/bin``）中，可以定義下列環境變數讓建構"
"系統找到："

msgid ""
"Where ``/path/to/mingw`` is the path containing the ``bin`` directory where "
"``i686-w64-mingw32-gcc`` and ``x86_64-w64-mingw32-gcc`` are located (e.g. ``/"
"opt/mingw-w64`` if the binaries are located in ``/opt/mingw-w64/bin``)."
msgstr ""
"其中 ``/path/to/mingw`` 應為包含 ``bin`` 資料夾的路徑，該資料夾內應有 ``i686-"
"w64-mingw32-gcc`` 及 ``x86_64-w64-mingw32-gcc``（例如檔案在 ``/opt/mingw-w64/"
"bin`` 時請設為 ``/opt/mingw-w64``）。"

msgid ""
"To make sure you are doing things correctly, executing the following in the "
"shell should result in a working compiler (the version output may differ "
"based on your system)::"
msgstr ""
"為確認設定正確，可在 shell 執行下列指令，若有正確顯示版本號即表示可用（版本號"
"會依系統不同而不同）："

msgid ""
"If you are building with MinGW-LLVM, add ``use_llvm=yes`` to the ``scons`` "
"command."
msgstr "若用 MinGW-LLVM 編譯，請在 ``scons`` 指令中加上 ``use_llvm=yes``。"

msgid ""
"When cross-compiling for Windows using MinGW-w64, keep in mind only "
"``x86_64`` and ``x86_32`` architectures are supported. MinGW-LLVM supports "
"``arm64`` as well. Be sure to specify the right ``arch=`` option when "
"invoking SCons if building from a different architecture."
msgstr ""
"使用 MinGW-w64 交叉編譯 Windows 時，僅支援 ``x86_64`` 與 ``x86_32`` 架構。若"
"用 MinGW-LLVM，亦支援 ``arm64``。如交叉編譯，請用 ``arch=`` 指定正確架構。"

msgid "Troubleshooting"
msgstr "疑難排解"

msgid ""
"Cross-compiling from some Ubuntu versions may lead to `this bug <https://"
"github.com/godotengine/godot/issues/9258>`_, due to a default configuration "
"lacking support for POSIX threading."
msgstr ""
"在某些 Ubuntu 版本上交叉編譯時，可能會因預設未支援 POSIX 執行緒而遇到 `這個 "
"bug <https://github.com/godotengine/godot/issues/9258>`_。"

msgid ""
"You can change that configuration following those instructions, for 64-bit::"
msgstr "可依照下列指示修改該設定（64 位元）："

msgid "And for 32-bit::"
msgstr "32 位元則："

msgid "Creating Windows export templates"
msgstr "建立 Windows 匯出樣板"

msgid ""
"Windows export templates are created by compiling Godot without the editor, "
"with the following flags:"
msgstr "Windows 匯出樣板需使用下列旗標編譯不含編輯器的 Godot："

msgid ""
"If you plan on replacing the standard export templates, copy these to the "
"following location, replacing ``<version>`` with the version identifier "
"(such as ``4.2.1.stable`` or ``4.3.dev``):"
msgstr ""
"如欲取代內建匯出樣板，請將這些檔案複製到下列位置，並將 ``<version>`` 替換為版"
"本識別（如 ``4.2.1.stable`` 或 ``4.3.dev``）："

msgid "With the following names::"
msgstr "檔名如下："

msgid ""
"However, if you are using custom modules or custom engine code, you may "
"instead want to configure your binaries as custom export templates here:"
msgstr "但如果使用自訂模組或自訂引擎原始碼，可在此設定自訂的匯出樣板："

msgid "Select matching architecture in the export config."
msgstr "請在匯出設定中選擇相符的架構。"

msgid ""
"You don't need to copy them in this case, just reference the resulting files "
"in the ``bin\\`` directory of your Godot source folder, so the next time you "
"build, you will automatically have the custom templates referenced."
msgstr ""
"這種情況下不用複製檔案，只需在 Godot 原始碼的 ``bin\\`` 資料夾中直接參照產生"
"的檔案即可，下次編譯會自動使用自訂樣板。"
