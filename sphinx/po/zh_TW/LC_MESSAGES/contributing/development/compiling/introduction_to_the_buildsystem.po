#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to the buildsystem"
msgstr "建置系統介紹"

msgid ""
"Godot is a primarily C++ project and it :ref:`uses the SCons build system. "
"<doc_faq_why_scons>` We love SCons for how maintainable and easy to set up "
"it makes our buildsystem. And thanks to that compiling Godot from source can "
"be as simple as running::"
msgstr ""
"Godot 主要是以 C++ 開發的專案，並 :ref:`採用 SCons 作為建置系統 "
"<doc_faq_why_scons>` 。SCons 讓我們的建置系統易於維護且設定簡單，因此從原始碼"
"編譯 Godot 只需執行以下指令："

msgid ""
"This produces an editor build for your current platform, operating system, "
"and architecture. You can change what gets built by specifying a target, a "
"platform, and/or an architecture. For example, to build an export template "
"used for running exported games, you can run::"
msgstr ""
"這會為你目前的平台、作業系統與架構產生一個編輯器版本。你可以透過指定目標、平"
"台，或處理器架構來改變建置內容。舉例來說，若要建置用於執行匯出遊戲的匯出樣"
"板，可以執行："

msgid ""
"If you plan to debug or develop the engine, then you might want to enable "
"the ``dev_build`` option to enable dev-only debugging code::"
msgstr ""
"如果你打算除錯或開發引擎本身，建議啟用 ``dev_build`` 選項，以啟用僅供開發階段"
"使用的除錯程式碼："

msgid ""
"Following sections in the article will explain these and other universal "
"options in more detail. But before you can compile Godot, you need to "
"install a few prerequisites. Please refer to the platform documentation to "
"learn more:"
msgstr ""
"下方各節將進一步說明這些及其他通用選項。但在編譯 Godot 前，你需要先安裝一些必"
"要套件。請參考各平台的相關文件："

msgid ":ref:`doc_compiling_for_android`"
msgstr ":ref:`doc_compiling_for_android`"

msgid ":ref:`doc_compiling_for_ios`"
msgstr ":ref:`doc_compiling_for_ios`"

msgid ":ref:`doc_compiling_for_linuxbsd`"
msgstr ":ref:`doc_compiling_for_linuxbsd`"

msgid ":ref:`doc_compiling_for_macos`"
msgstr ":ref:`doc_compiling_for_macos`"

msgid ":ref:`doc_compiling_for_web`"
msgstr ":ref:`doc_compiling_for_web`"

msgid ":ref:`doc_compiling_for_windows`"
msgstr ":ref:`doc_compiling_for_windows`"

msgid ""
"These articles cover in great detail both how to setup your environment to "
"compile Godot on a specific platform, and how to compile for that platform. "
"Please feel free to go back and forth between them and this article to "
"reference platform-specific and universal configuration options."
msgstr ""
"這些文章將詳細說明如何在各平台設定環境並進行編譯。你可以隨時搭配本篇內容與平"
"台專屬文件，查閱平台專屬與通用的建置設定選項。"

msgid "Using multi-threading"
msgstr "使用多執行緒"

msgid ""
"The build process may take a while, depending on how powerful your system "
"is. By default, Godot's SCons setup is configured to use all CPU threads but "
"one (to keep the system responsive during compilation). If you want to "
"adjust how many CPU threads SCons will use, use the ``-j <threads>`` "
"parameter to specify how many threads will be used for the build."
msgstr ""
"建置過程所需時間會依你的電腦效能而異。預設情況下，Godot 的 SCons 設定會使用除"
"了 1 條之外的所有 CPU 執行緒（以保持系統回應）。若要調整 SCons 使用的執行緒數"
"量，請透過 ``-j <執行緒數>`` 參數指定建置時要用多少執行緒。"

msgid "Example for using 4 threads::"
msgstr "使用 4 執行緒的範例："

msgid "Platform selection"
msgstr "平台選擇"

msgid ""
"Godot's build system will begin by detecting the platforms it can build for. "
"If not detected, the platform will simply not appear on the list of "
"available platforms. The build requirements for each platform are described "
"in the rest of this tutorial section."
msgstr ""
"Godot 的建置系統會先偵測可支援建置的平台。若某平台未被偵測到，則不會出現在可"
"用平台列表中。各平台的建置需求會在本教學後續章節中說明。"

msgid ""
"SCons is invoked by just calling ``scons``. If no platform is specified, "
"SCons will detect the target platform automatically based on the host "
"platform. It will then start building for the target platform right away."
msgstr ""
"只需執行 ``scons`` 即可啟動 SCons。若未指定平台，SCons 會依據主機平台自動偵測"
"目標平台，並直接為該目標平台開始建置。"

msgid "To list the available target platforms, use ``scons platform=list``::"
msgstr "若要列出所有可用的目標平台，請執行 ``scons platform=list``："

msgid ""
"To build for a platform (for example, ``linuxbsd``), run with the "
"``platform=`` (or ``p=`` to make it short) argument:"
msgstr ""
"若要為特定平台（例如 ``linuxbsd``）進行建置，請加上 ``platform=``（或簡寫 "
"``p=``）參數執行："

msgid "Resulting binary"
msgstr "產生的執行檔"

msgid ""
"The resulting binaries will be placed in the ``bin/`` subdirectory, "
"generally with this naming convention::"
msgstr "產生的執行檔會放在 ``bin/`` 子資料夾中，命名慣例如下："

msgid "For the previous build attempt, the result would look like this:"
msgstr "依照上述建置範例，產生的檔案名稱會如下："

msgid ""
"This means that the binary is for Linux *or* \\*BSD (*not* both), is not "
"optimized, has the whole editor compiled in, and is meant for 64 bits."
msgstr ""
"這表示這個執行檔是專為 Linux *或* \\*BSD （ *非* 同時支援兩者）所建，未經最佳"
"化，包含完整的編輯器，且為 64 位元版本。"

msgid "A Windows binary with the same configuration will look like this:"
msgstr "相同設定下的 Windows 執行檔則會長這樣："

msgid ""
"Copy that binary to any location you like, as it contains the Project "
"Manager, editor and all means to execute the game. However, it lacks the "
"data to export it to the different platforms. For that the export templates "
"are needed (which can be either downloaded from `godotengine.org <https://"
"godotengine.org/>`__, or you can build them yourself)."
msgstr ""
"由於該執行檔包含了專案管理員、編輯器及所有執行遊戲所需功能，你可以將它複製到"
"任何位置。但這個執行檔缺少匯出到其他平台所需的資料。要匯出到不同平台，需安裝"
"匯出樣板（可從 `godotengine.org <https://godotengine.org/>`__ 下載，或自行建"
"置）。"

msgid ""
"Aside from that, there are a few standard options that can be set in all "
"build targets, and which will be explained below."
msgstr "此外，還有一些可用於所有建置目標的標準選項，詳見以下說明。"

msgid "Target"
msgstr "建置目標"

msgid ""
"The editor is enabled by default in all PC targets (Linux, Windows, macOS), "
"disabled for everything else. Disabling the editor produces a binary that "
"can run projects but does not include the editor or the Project Manager."
msgstr ""
"在所有 PC 平台（Linux、Windows、macOS）上，預設會啟用編輯器；其他平台則預設關"
"閉。若未啟用編輯器，則產生的執行檔僅能執行專案，無法使用編輯器與專案管理員。"

msgid "Development and production aliases"
msgstr "開發與發行別名"

msgid ""
"When creating builds for development (running debugging/:ref:`profiling "
"<doc_using_cpp_profilers>` tools), you often have different goals compared "
"to production builds (making binaries as fast and small as possible)."
msgstr ""
"當進行開發用途建置（用於偵錯或 :ref:`效能分析 <doc_using_cpp_profilers>` 工"
"具）時，與發行（正式版）建置的目標不同，通常會偏重偵錯功能或簡化設定，而發行"
"建置則以產生更快更小的執行檔為主。"

msgid "Godot provides two aliases for this purpose:"
msgstr "Godot 提供兩個常用別名以因應這些需求："

msgid ""
"``dev_mode=yes`` is an alias for ``verbose=yes warnings=extra werror=yes "
"tests=yes``. This enables warnings-as-errors behavior (similar to Godot's "
"continuous integration setup) and also builds :ref:`unit tests "
"<doc_unit_testing>` so you can run them locally."
msgstr ""
"``dev_mode=yes`` 是 ``verbose=yes warnings=extra werror=yes tests=yes`` 的別"
"名。啟用此模式會將警告當作錯誤處理（類似 Godot 的 CI 設定），並建置 :ref:`單"
"元測試 <doc_unit_testing>`，方便你在本機執行測試。"

msgid ""
"``production=yes`` is an alias for ``use_static_cpp=yes debug_symbols=no "
"lto=auto``. Statically linking libstdc++ allows for better binary "
"portability when compiling for Linux. This alias also enables link-time "
"optimization when compiling for Linux, Web and Windows with MinGW, but keeps "
"LTO disabled when compiling for macOS, iOS or Windows with MSVC. This is "
"because LTO on those platforms is very slow to link or has issues with the "
"generated code."
msgstr ""
"``production=yes`` 是 ``use_static_cpp=yes debug_symbols=no lto=auto`` 的別"
"名。靜態連結 libstdc++ 能提升 Linux 二進位的可攜性。此別名會在編譯 Linux、"
"Web 與使用 MinGW 的 Windows 時啟用連結時最佳化（LTO），但在 macOS、iOS 或使"
"用 MSVC 的 Windows 則會關閉 LTO，因為這些平台 LTO 連結速度較慢，或可能導致產"
"生的程式碼有問題。"

msgid ""
"You can manually override options from those aliases by specifying them on "
"the same command line with different values. For example, you can use "
"``scons production=yes debug_symbols=yes`` to create production-optimized "
"binaries with debugging symbols included."
msgstr ""
"你也可以在同一指令列上以不同值指定這些選項來手動覆寫別名內容。例如可用 "
"``scons production=yes debug_symbols=yes`` 來產生包含偵錯符號的發行版最佳化執"
"行檔。"

msgid "Dev build"
msgstr "開發建置"

msgid ""
"``dev_build`` should **not** be confused with ``dev_mode``, which is an "
"alias for several development-related options (see above)."
msgstr ""
"``dev_build`` **不要** 和 ``dev_mode`` 混淆，後者是多個開發相關選項的合成別名"
"（見上）。"

msgid ""
"When doing engine development the ``dev_build`` option can be used together "
"with ``target`` to enable dev-specific code. ``dev_build`` defines "
"``DEV_ENABLED``, disables optimization (``-O0``/``/0d``), enables generating "
"debug symbols, and does not define ``NDEBUG`` (so ``assert()`` works in "
"thirdparty libraries)."
msgstr ""
"在進行引擎開發時，可以搭配 ``target`` 使用 ``dev_build`` 選項，來啟用開發專用"
"程式碼。``dev_build`` 會定義 ``DEV_ENABLED``、停用最佳化（``-O0``/``/0d``）、"
"啟用產生偵錯符號，並且不定義 ``NDEBUG``（讓 ``assert()`` 能在第三方函式庫中正"
"常運作）。"

msgid ""
"This flag appends the ``.dev`` suffix (for development) to the generated "
"binary name."
msgstr "此選項會讓產生的執行檔名稱加上 ``.dev`` 後綴（代表開發用）。"

msgid ""
"There are additional SCons options to enable *sanitizers*, which are tools "
"you can enable at compile-time to better debug certain engine issues. "
"See :ref:`doc_using_sanitizers` for more information."
msgstr ""
"SCons 還有其他選項可啟用 *sanitizer* 工具，這些工具能於編譯階段協助你偵錯特定"
"的引擎問題。詳情請參考 :ref:`doc_using_sanitizers` 。"

msgid "Debugging symbols"
msgstr "偵錯符號"

msgid ""
"By default, ``debug_symbols=no`` is used, which means **no** debugging "
"symbols are included in compiled binaries. Use ``debug_symbols=yes`` to "
"include debug symbols within compiled binaries, which allows debuggers and "
"profilers to work correctly. Debugging symbols are also required for Godot's "
"crash stacktraces to display with references to source code files and lines."
msgstr ""
"預設會使用 ``debug_symbols=no``，也就是編譯後的執行檔**不會**包含偵錯符號。若"
"要在執行檔中包含偵錯符號，請使用 ``debug_symbols=yes``，這能讓偵錯器和效能分"
"析工具正常運作，Godot 的當機堆疊追蹤也需要偵錯符號才能顯示出原始碼檔案與行號"
"的資訊。"

msgid ""
"The downside is that debugging symbols are large files (significantly larger "
"than the binaries themselves). As a result, official binaries currently do "
"not include debugging symbols. This means you need to compile Godot yourself "
"to have access to debugging symbols."
msgstr ""
"缺點是偵錯符號通常非常大（甚至比執行檔本身還大）。因此官方釋出的執行檔並不包"
"含偵錯符號。如需偵錯符號，需自行編譯 Godot。"

msgid ""
"When using ``debug_symbols=yes``, you can also use "
"``separate_debug_symbols=yes`` to put debug information in a separate file "
"with a ``.debug`` suffix. This allows distributing both files independently. "
"Note that on Windows, when compiling with MSVC, debugging information is "
"*always* written to a separate ``.pdb`` file regardless of "
"``separate_debug_symbols``."
msgstr ""
"在使用 ``debug_symbols=yes`` 時，也可加上 ``separate_debug_symbols=yes``，將"
"偵錯資訊存到副檔名為 ``.debug`` 的獨立檔案，方便分開發布。注意，在 Windows 上"
"用 MSVC 編譯時，偵錯資訊*永遠*會寫到獨立的 ``.pdb`` 檔，不受 "
"``separate_debug_symbols`` 是否啟用影響。"

msgid ""
"Use the ``strip <path/to/binary>`` command to remove debugging symbols from "
"a binary you've already compiled."
msgstr "若要移除已編譯執行檔的偵錯符號，可使用 ``strip <binary檔路徑>`` 指令。"

msgid "Optimization level"
msgstr "最佳化等級"

msgid "Several compiler optimization levels can be chosen from:"
msgstr "可選擇以下幾種編譯器最佳化等級："

msgid ""
"``optimize=speed_trace`` *(default when targeting non-Web platforms)*: "
"Favors execution speed at the cost of larger binary size. Optimizations may "
"sometimes negatively impact debugger usage (stack traces may be less "
"accurate. If this occurs to you, use ``optimize=debug`` instead."
msgstr ""
"``optimize=speed_trace`` *（非 Web 平台的預設值）*：以提升執行速度為主，犧牲"
"二進位大小。部分最佳化可能會影響偵錯器的可用性（如堆疊追蹤不夠精確）。若遇此"
"狀況，建議改用 ``optimize=debug``。"

msgid ""
"``optimize=speed``: Favors even more execution speed, at the cost of even "
"larger binary size compared to ``optimize=speed_trace``. Even less friendly "
"to debugging compared to ``optimize=debug``, as this uses the most "
"aggressive optimizations available."
msgstr ""
"``optimize=speed``：進一步提升執行速度，二進位檔更大。比 ``optimize=debug`` "
"更不利於偵錯，因為會啟用最激進的最佳化選項。"

msgid ""
"``optimize=size`` *(default when targeting the Web platform)*: Favors small "
"binaries at the cost of slower execution speed."
msgstr ""
"``optimize=size`` *（Web 平台預設值）*：優先減小執行檔大小，但執行速度較慢。"

msgid ""
"``optimize=debug``: Only enables optimizations that do not impact debugging "
"in any way. This results in faster binaries than ``optimize=none``, but "
"slower binaries than ``optimize=speed_trace``."
msgstr ""
"``optimize=debug``：僅啟用對偵錯無影響的最佳化，執行檔速度快於 "
"``optimize=none``，但慢於 ``optimize=speed_trace``。"

msgid ""
"``optimize=none``: Do not perform any optimization. This provides the "
"fastest build times, but the slowest execution times."
msgstr "``optimize=none``：完全不進行最佳化。建置最快，但執行效能最差。"

msgid ""
"``optimize=custom`` *(advanced users only)*: Do not pass optimization "
"arguments to the C/C++ compilers. You will have to pass arguments manually "
"using the ``cflags``, ``ccflags`` and ``cxxflags`` SCons options."
msgstr ""
"``optimize=custom`` *（僅限進階用戶）*：不自動將最佳化參數傳給 C/C++ 編譯器，"
"你需要自行以 ``cflags``、``ccflags`` 和 ``cxxflags`` SCons 選項手動設定相關參"
"數。"

msgid "Architecture"
msgstr "架構"

msgid ""
"The ``arch`` option is meant to control the CPU or OS version intended to "
"run the binaries. It is focused mostly on desktop platforms and ignored "
"everywhere else."
msgstr ""
"``arch`` 選項用來指定執行檔要支援的 CPU 架構或系統版本。主要用於桌面平台，其"
"他平台通常會被忽略。"

msgid ""
"Supported values for the ``arch`` option are **auto**, **x86_32**, "
"**x86_64**, **arm32**, **arm64**, **rv64**, **ppc32**, **ppc64** and "
"**wasm32**."
msgstr ""
"``arch`` 支援的值有：**auto**、**x86_32**、**x86_64**、**arm32**、**arm64**、"
"**rv64**、**ppc32**、**ppc64**、**wasm32**。"

msgid ""
"This flag appends the value of ``arch`` to resulting binaries when "
"relevant.  The default value ``arch=auto`` detects the architecture that "
"matches the host platform."
msgstr ""
"此選項會在產生的執行檔名稱後加上對應的 ``arch`` 字串。預設為 ``arch=auto``，"
"會自動偵測與主機相符的架構。"

msgid "Custom modules"
msgstr "自訂模組"

msgid ""
"It's possible to compile modules residing outside of Godot's directory tree, "
"along with the built-in modules."
msgstr "除了編譯內建模組外，亦可同時編譯位於 Godot 專案目錄外的自訂模組。"

msgid ""
"A ``custom_modules`` build option can be passed to the command line before "
"compiling. The option represents a comma-separated list of directory paths "
"containing a collection of independent C++ modules that can be seen as C++ "
"packages, just like the built-in ``modules/`` directory."
msgstr ""
"可於編譯時在指令列加入 ``custom_modules`` 選項。該選項接受以逗號分隔的多個路"
"徑，路徑內可包含自訂的獨立 C++ 模組（與內建 ``modules/`` 目錄類似）。"

msgid ""
"For instance, it's possible to provide both relative, absolute, and user "
"directory paths containing such modules:"
msgstr "例如，你可同時指定相對路徑、絕對路徑或家目錄的自訂模組路徑："

msgid ""
"If there's any custom module with the exact directory name as a built-in "
"module, the engine will only compile the custom one. This logic can be used "
"to override built-in module implementations."
msgstr ""
"若自訂模組資料夾名稱與內建模組相同，則編譯時只會包含自訂模組。可利用此機制覆"
"寫內建模組的實作。"

msgid ":ref:`doc_custom_modules_in_cpp`"
msgstr ":ref:`doc_custom_modules_in_cpp`"

msgid "Cleaning generated files"
msgstr "清理產生檔案"

msgid ""
"Sometimes, you may encounter an error due to generated files being present. "
"You can remove them by using ``scons --clean <options>``, where "
"``<options>`` is the list of build options you've used to build Godot "
"previously."
msgstr ""
"有時可能因先前產生的檔案造成錯誤。可用 ``scons --clean <選項>`` 指令（<選項>"
"需與之前建置 Godot 時使用的參數相同）來清除。"

msgid ""
"Alternatively, you can use ``git clean -fixd`` which will clean build "
"artifacts for all platforms and configurations. Beware, as this will remove "
"all untracked and ignored files in the repository. Don't run this command if "
"you have uncommitted work!"
msgstr ""
"你也可以使用 ``git clean -fixd``，這會清理所有平台與組態的建置產物。注意，此"
"指令會刪除版本庫中所有未追蹤及被忽略的檔案。若有未提交的變更，請勿執行！"

msgid "Other build options"
msgstr "其他建置選項"

msgid ""
"There are several other build options that you can use to configure the way "
"Godot should be built (compiler, debug options, etc.) as well as the "
"features to include/disable."
msgstr ""
"還有許多其他建置選項可用來調整 Godot 的建置方式（如指定編譯器、除錯選項等），"
"以及要啟用或禁用的功能。"

msgid ""
"Check the output of ``scons --help`` for details about each option for the "
"version you are willing to compile."
msgstr "欲瞭解每個版本支援的所有選項，請檢查 ``scons --help`` 的輸出說明。"

msgid "Overriding the build options"
msgstr "覆寫建置選項"

msgid "Using a file"
msgstr "使用設定檔"

msgid ""
"The default ``custom.py`` file can be created at the root of the Godot "
"Engine source to initialize any SCons build options passed via the command "
"line:"
msgstr ""
"你可以在 Godot Engine 原始碼根目錄建立 ``custom.py`` 檔案，以初始化任何 "
"SCons 建置選項（如同指令列設定）："

msgid "custom.py"
msgstr "custom.py"

msgid ""
"You can also disable some of the built-in modules before compiling, saving "
"some time it takes to build the engine. See :ref:`doc_optimizing_for_size` "
"page for more details."
msgstr ""
"你也可以在建置前停用部分內建模組，以縮短建置時間。詳"
"見 :ref:`doc_optimizing_for_size`。"

msgid ""
"You can use the online `Godot build options generator <https://godot-build-"
"options-generator.github.io/>`__ to generate a ``custom.py`` file containing "
"SCons options. You can then save this file and place it at the root of your "
"Godot source directory."
msgstr ""
"你可以使用線上工具 `Godot build options generator <https://godot-build-"
"options-generator.github.io/>`__ 來產生包含 SCons 選項的 ``custom.py`` 檔案，"
"並將其存放於 Godot 原始碼根目錄。"

msgid ""
"Another custom file can be specified explicitly with the ``profile`` command "
"line option, both overriding the default build configuration:"
msgstr ""
"也可以透過 ``profile`` 指令列選項，明確指定其他自訂設定檔，兩者皆會覆寫預設建"
"置組態："

msgid ""
"Build options set from the file can be overridden by the command line "
"options."
msgstr "透過設定檔指定的建置選項，可再用指令列選項進行覆寫。"

msgid "It's also possible to override the options conditionally:"
msgstr "亦可根據條件覆寫選項："

msgid "Using the SCONSFLAGS"
msgstr "使用 SCONSFLAGS 環境變數"

msgid ""
"``SCONSFLAGS`` is an environment variable which is used by the SCons to set "
"the options automatically without having to supply them via the command line."
msgstr ""
"``SCONSFLAGS`` 是 SCons 使用的環境變數，可以自動設定建置選項，無需每次在指令"
"列輸入。"

msgid ""
"For instance, you may want to force a number of CPU threads with the "
"aforementioned ``-j`` option for all future builds:"
msgstr ""
"舉例來說，你可以用上述 ``-j`` 選項強制所有建置都使用指定數目的 CPU 執行緒："

msgid "SCU (single compilation unit) build"
msgstr "SCU（單一編譯單元）建置"

msgid ""
"Regular builds tend to be bottlenecked by including large numbers of headers "
"in each compilation translation unit. Primarily to speed up development "
"(rather than for production builds), Godot offers a \"single compilation "
"unit\" build (aka \"Unity / Jumbo\" build)."
msgstr ""
"傳統建置方式因每個編譯單元需包含大量標頭檔，常造成瓶頸。為了加速開發流程（而"
"非發行建置），Godot 提供「單一編譯單元」建置（又稱 Unity/Jumbo build）。"

msgid ""
"For the folders accelerated by this option, multiple ``.cpp`` files are "
"compiled in each translation unit, so headers can be shared between multiple "
"files, which can dramatically decrease build times."
msgstr ""
"啟用此選項後，指定資料夾內多個 ``.cpp`` 檔案會合併為單一編譯單元，標頭檔可多"
"檔共用，大幅縮短建置時間。"

msgid "To perform an SCU build, use the ``scu_build=yes`` SCons option."
msgstr "要啟用 SCU 建置，請加上 ``scu_build=yes`` SCons 選項。"

msgid ""
"When developing a Pull Request using SCU builds, be sure to make a regular "
"build prior to submitting the PR. This is because SCU builds by nature "
"include headers from earlier ``.cpp`` files in the translation unit, "
"therefore won't catch all the includes you will need in a regular build. The "
"CI will catch these errors, but it will usually be faster to catch them on a "
"local build on your machine."
msgstr ""
"若在開發 Pull Request 時使用 SCU 建置，務必在提交 PR 前進行一次傳統建置。因"
"為 SCU 會共用先前 ``.cpp`` 檔的標頭，可能漏掉傳統建置會出錯的 include。雖然 "
"CI 會檢查這些錯誤，但在本地提前發現會更有效率。"

msgid "Export templates"
msgstr "匯出樣板"

msgid ""
"Official export templates are downloaded from the Godot Engine site: "
"`godotengine.org <https://godotengine.org/>`__. However, you might want to "
"build them yourself (in case you want newer ones, you are using custom "
"modules, or simply don't trust your own shadow)."
msgstr ""
"官方匯出樣板可以從 Godot Engine 網站進行下載: `godotengine.org <https://"
"godotengine.org/>`__ 。但你也可以自行進行建置 (例如當需要新版本、使用自定模"
"組、或是不信任其他人建置的版本時)。"

msgid ""
"If you download the official export templates package and unzip it, you will "
"notice that most files are optimized binaries or packages for each platform:"
msgstr ""
"若下載官方匯出模板套件並解壓縮後，可以注意到大多數檔案都是為各個平台最佳化過"
"的二進位檔或套件："

msgid ""
"To create those yourself, follow the instructions detailed for each platform "
"in this same tutorial section. Each platform explains how to create its own "
"template."
msgstr ""
"若要自己進行建置，請依照個別平台教學中的詳細說明來進行。各個平台的說明文件中"
"都解釋了如何建置樣板。"

msgid ""
"The ``version.txt`` file should contain the corresponding Godot version "
"identifier. This file is used to install export templates in a version-"
"specific directory to avoid conflicts. For instance, if you are building "
"export templates for Godot 3.1.1, ``version.txt`` should contain "
"``3.1.1.stable`` on the first line (and nothing else). This version "
"identifier is based on the ``major``, ``minor``, ``patch`` (if present) and "
"``status`` lines of the `version.py file in the Godot Git repository "
"<https://github.com/godotengine/godot/blob/master/version.py>`__."
msgstr ""
"``version.txt`` 檔案中應該要包含有對應的 Godot 版本識別項。這個檔案是用來將匯"
"出樣板安裝到版本特定的資料夾中，以避免衝突。舉例來說，如果為 Godot 3.1.1 建置"
"匯出樣板，則 ``version.txt`` 的第一行應包含 ``3.1.1.stable`` (且不得含有其他"
"內容)。這個版本識別項是基於 ``主板號 Major`` 、 ``次版號 Minor`` 、 ``修訂號 "
"Patch`` (若有的話)、以及 `Godot Git 儲存庫中的 version.py 檔案 <https://"
"github.com/godotengine/godot/blob/master/version.py>`__ ``狀態 Status`` 。"

msgid ""
"If you are developing for multiple platforms, macOS is definitely the most "
"convenient host platform for cross-compilation, since you can cross-compile "
"for every target. Linux and Windows come in second place, but Linux has the "
"advantage of being the easier platform to set this up."
msgstr ""
"如果您正在為多個平台開發，macOS 無疑是最方便的交叉編譯宿主平台，因為您可以為"
"每個目標進行交叉編譯。Linux 和 Windows 次之，但 Linux 的優勢在於其設定更為容"
"易。"
