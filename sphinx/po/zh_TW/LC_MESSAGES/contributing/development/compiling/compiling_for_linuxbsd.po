#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for Linux, \\*BSD"
msgstr "在 Linux、\\*BSD 上編譯"

msgid ""
"This page describes how to compile Linux editor and export template binaries "
"from source. If you're looking to export your project to Linux instead, "
"read :ref:`doc_exporting_for_linux`."
msgstr ""
"本頁說明如何從原始碼編譯 Linux 編輯器與匯出樣板二進位檔案。如果你想要的是將專"
"案匯出到 Linux，請參閱 :ref:`doc_exporting_for_linux`。"

msgid "Requirements"
msgstr "系統需求"

msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr "在 Linux 或其他 Unix 變種系統下編譯時，需具備下列條件："

msgid "GCC 9+ or Clang 6+."
msgstr "GCC 9+ 或 Clang 6+。"

msgid "`Python 3.8+ <https://www.python.org/downloads/>`_."
msgstr "`Python 3.8+ <https://www.python.org/downloads/>`_。"

msgid "`SCons 4.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr "`SCons 4.0+ <https://scons.org/pages/download.html>`_ 建置系統。"

msgid "pkg-config (used to detect the development libraries listed below)."
msgstr "pkg-config（用於偵測下方所列開發函式庫）。"

msgid "Development libraries:"
msgstr "開發函式庫："

msgid "X11, Xcursor, Xinerama, Xi and XRandR."
msgstr "X11、Xcursor、Xinerama、Xi 與 XRandR 開發函式庫。"

msgid "Wayland and wayland-scanner."
msgstr "Wayland 及 wayland-scanner。"

msgid "Mesa."
msgstr "Mesa。"

msgid "ALSA."
msgstr "ALSA。"

msgid "PulseAudio."
msgstr "PulseAudio。"

msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr "*可選* - libudev（以 ``udev=yes`` 編譯）。"

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr "如需取得 Godot 編譯所需的原始碼，請參閱 :ref:`doc_getting_source`。"

msgid ""
"For a general overview of SCons usage for Godot, "
"see :ref:`doc_introduction_to_the_buildsystem`."
msgstr ""
"關於 Godot 使用 SCons 的基本說明，請參"
"閱 :ref:`doc_introduction_to_the_buildsystem`。"

msgid "Distro-specific one-liners"
msgstr "各發行版安裝指令"

msgid "Alpine Linux"
msgstr "Alpine Linux"

msgid "Arch Linux"
msgstr "Arch Linux"

msgid "Debian/Ubuntu"
msgstr "Debian/Ubuntu"

msgid "Fedora"
msgstr "Fedora"

msgid "FreeBSD"
msgstr "FreeBSD"

msgid "Gentoo"
msgstr "Gentoo"

msgid "Mageia"
msgstr "Mageia"

msgid "NetBSD"
msgstr "NetBSD"

msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr "若要支援音訊，可額外安裝 ``pulseaudio``。"

msgid "OpenBSD"
msgstr "OpenBSD"

msgid "openKylin"
msgstr "openKylin"

msgid "openSUSE"
msgstr "openSUSE"

msgid "Solus"
msgstr "Solus"

msgid "Compiling"
msgstr "編譯"

msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr "開啟終端機，前往 Godot 原始碼根目錄並輸入："

msgid ""
"Prior to Godot 4.0, the Linux/\\*BSD target was called ``x11`` instead of "
"``linuxbsd``. If you are looking to compile Godot 3.x, make sure to use the "
"`3.x branch of this documentation <https://docs.godotengine.org/en/3.6/"
"development/compiling/compiling_for_x11.html>`__."
msgstr ""
"Godot 4.0 以前，Linux/\\*BSD 目標稱為 ``x11``，不是 ``linuxbsd``。若要編譯 "
"Godot 3.x，請參閱本說明文件的 `3.x 分支 <https://docs.godotengine.org/en/3.6/"
"development/compiling/compiling_for_x11.html>`__。"

msgid ""
"If you are compiling Godot to make changes or contribute to the engine, you "
"may want to use the SCons options ``dev_build=yes`` or ``dev_mode=yes``. "
"See :ref:`doc_introduction_to_the_buildsystem_development_and_production_aliases` "
"for more info."
msgstr ""
"若你自行編譯 Godot 以進行修改或貢獻開發，建議在 SCons 加上 ``dev_build=yes`` "
"或 ``dev_mode=yes`` 選項。詳情請參"
"閱 :ref:`doc_introduction_to_the_buildsystem_development_and_production_aliases`。"

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"\"bin\" subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the Project "
"Manager."
msgstr ""
"若一切順利，產生的二進位可執行檔會放在「bin」子目錄中，該檔案包含整個 Godot "
"引擎，可獨立執行。執行後會打開專案管理員。"

msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr "若想用 Clang 而不是 GCC 編譯，請使用下列指令："

msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build. For RISC-V architecture devices, use the Clang compiler instead "
"of the GCC compiler."
msgstr ""
"在 OpenBSD 上必須使用 Clang，否則字型無法正確建構。如需支援 RISC-V 架構，亦請"
"使用 Clang 編譯器替代 GCC。"

msgid ""
"If you are compiling Godot for production use, you can make the final "
"executable smaller and faster by adding the SCons option ``production=yes``. "
"This enables additional compiler optimizations and link-time optimization."
msgstr ""
"若要為正式發行版本編譯 Godot，可加上 SCons 選項 ``production=yes``，讓最終執"
"行檔更精簡且速度更快。此選項會啟用進階編譯器最佳化與連結時最佳化（LTO）。"

msgid ""
"LTO takes some time to run and requires about 7 GB of available RAM while "
"compiling. If you're running out of memory with the above option, use "
"``production=yes lto=none`` or ``production=yes lto=thin`` for a lightweight "
"but less effective form of LTO."
msgstr ""
"LTO （連結時最佳化）編譯需要較長時間並約 7 GB 記憶體。若遇到記憶體不足，可改"
"用 ``production=yes lto=none`` 或 ``production=yes lto=thin``，這樣雖然最佳化"
"效果較低但較節省資源。"

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""
"若希望自編譯 Godot 和官方版本使用不同編輯器設定，可在 ``bin/`` 資料夾內建立 "
"``._sc_`` 或 ``_sc_`` 檔案，以啟"
"用 :ref:`doc_data_paths_self_contained_mode`。"

msgid "Running a headless/server build"
msgstr "執行無介面／伺服器版本"

msgid "Building export templates"
msgstr "建構匯出樣板"

msgid ""
"Linux binaries usually won't run on distributions that are older than the "
"distribution they were built on. If you wish to distribute binaries that "
"work on most distributions, you should build them on an old distribution "
"such as Ubuntu 16.04. You can use a virtual machine or a container to set up "
"a suitable build environment."
msgstr ""
"Linux 二進位檔通常無法在比建構時所用發行版還舊的版本上執行。若要讓二進位檔可"
"於大多數發行版運作，建議使用較舊的發行版（如 Ubuntu 16.04）建構。你可以利用虛"
"擬機或容器建立合適的建構環境。"

msgid ""
"To build Linux or \\*BSD export templates, run the build system with the "
"following parameters:"
msgstr "要建構 Linux 或 \\*BSD 匯出樣板，請用下列參數執行建構系統："

msgid "(32 bits)"
msgstr "(32 位元)"

msgid "(64 bits)"
msgstr "(64 位元)"

msgid ""
"Note that cross-compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""
"請注意，為與宿主平台不同位元（64/32）進行交叉編譯時，有時並不簡單，可能需額外"
"建置 chroot 環境。"

msgid ""
"To create standard export templates, the resulting files in the ``bin/`` "
"folder must be copied to:"
msgstr "若要建立標準匯出樣板，必須將 ``bin/`` 資料夾下產生的檔案複製到："

msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux/X11\" by "
"Godot):"
msgstr "並必須使用下列命名（Godot 會將 \\*BSD 視為「Linux/X11」）："

msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin/`` directory of your Godot source folder, so the next time you "
"build, you automatically have the custom templates referenced."
msgstr ""
"其實你不必複製檔案，只需直接參照 Godot 原始碼資料夾下 ``bin/`` 內的檔案，下次"
"建構時就會自動套用這些自定樣板。"

msgid "Cross-compiling for RISC-V devices"
msgstr "為 RISC-V 裝置進行交叉編譯"

msgid ""
"To cross-compile Godot for RISC-V devices, we need to setup the following "
"items:"
msgstr "要為 RISC-V 裝置交叉編譯 Godot，需準備下列項目："

msgid ""
"`riscv-gnu-toolchain <https://github.com/riscv-collab/riscv-gnu-toolchain/"
"releases>`__. While we are not going to use this directly, it provides us "
"with a sysroot, as well as header and libraries files that we will need. "
"There are many versions to choose from, however, the older the toolchain, "
"the more compatible our final binaries will be. If in doubt, `use this "
"version <https://github.com/riscv-collab/riscv-gnu-toolchain/releases/tag/"
"2021.12.22>`__, and download ``riscv64-glibc-ubuntu-18.04-nightly-2021.12.22-"
"nightly.tar.gz``. Extract it somewhere and remember its path."
msgstr ""
"`riscv-gnu-toolchain <https://github.com/riscv-collab/riscv-gnu-toolchain/"
"releases>`__。雖然我們不會直接使用這個工具鏈，但它會提供需要的 sysroot、標頭"
"檔與函式庫檔案。可選擇多個版本，一般來說工具鏈越舊，產生的二進位檔相容性越"
"好。如不確定，建議 `使用這個版本 <https://github.com/riscv-collab/riscv-gnu-"
"toolchain/releases/tag/2021.12.22>`__，並下載 ``riscv64-glibc-ubuntu-18.04-"
"nightly-2021.12.22-nightly.tar.gz``，解壓後記住路徑。"

msgid ""
"`mold <https://github.com/rui314/mold/releases>`__. This fast linker, is the "
"only one that correctly links the resulting binary. Download it, extract it, "
"and make sure to add its ``bin`` folder to your PATH. Run ``mold --help | "
"grep support`` to check if your version of Mold supports RISC-V. If you "
"don't see RISC-V, your Mold may need to be updated."
msgstr ""
"`mold <https://github.com/rui314/mold/releases>`__。這是一個非常快速的連結"
"器，目前是唯一能正確連結 Godot RISC-V 執行檔的工具。下載並解壓後，將其 "
"``bin`` 資料夾加入 PATH。可執行 ``mold --help | grep support`` 檢查你的 mold "
"是否支援 RISC-V。若未出現 RISC-V，則需更新 mold 版本。"

msgid ""
"To make referencing our toolchain easier, we can set an environment variable "
"like this:"
msgstr "為方便參照工具鏈，可設定如下環境變數："

msgid ""
"This way, we won't have to manually set the directory location each time we "
"want to reference it."
msgstr "如此一來，每次要用到時就不用再手動設定路徑。"

msgid "With all the above setup, we are now ready to build Godot."
msgstr "完成上述設定後，即可開始建構 Godot。"

msgid ""
"Go to the root of the source code, and execute the following build command:"
msgstr "請進入原始碼根目錄，然後執行下列建構指令："

msgid ""
"RISC-V GCC has `bugs with its atomic operations <https://github.com/riscv-"
"collab/riscv-gcc/issues/15>`__ which prevent it from compiling Godot "
"correctly. That's why Clang is used instead. Make sure that it *can* compile "
"to RISC-V. You can verify by executing this command ``clang -print-"
"targets``, make sure you see ``riscv64`` on the list of targets."
msgstr ""
"RISC-V 的 GCC 在原子操作上有 `這些 bug <https://github.com/riscv-collab/"
"riscv-gcc/issues/15>`__，導致無法正確編譯 Godot，因此必須改用 Clang。請確保 "
"Clang 能夠編譯 RISC-V，可用 ``clang -print-targets`` 檢查，確認目標列表中有 "
"``riscv64``。"

msgid ""
"The code above includes adding ``$RISCV_TOOLCHAIN_PATH/bin`` to the PATH, "
"but only for the following ``scons`` command. Since riscv-gnu-toolchain uses "
"its own Clang located in the ``bin`` folder, adding ``$RISCV_TOOLCHAIN_PATH/"
"bin`` to your user's PATH environment variable may block you from accessing "
"another version of Clang if one is installed. For this reason it's not "
"recommended to make adding the bin folder permanent. You can also omit the "
"``PATH=\"$RISCV_TOOLCHAIN_PATH/bin:$PATH\"`` line if you want to use scons "
"with self-installed version of Clang, but it may have compatibility issues "
"with riscv-gnu-toolchain."
msgstr ""
"上方指令會將 ``$RISCV_TOOLCHAIN_PATH/bin`` 加入 PATH，但僅在執行 ``scons`` 時"
"適用。由於 riscv-gnu-toolchain 會用其自己的 Clang（在 bin 目錄內），如果將該 "
"bin 目錄永久加入 PATH，可能會影響你系統上的其他 Clang 版本。因此不建議永久修"
"改 PATH。若要用自行安裝的 Clang，也可以省略 ``PATH=\"$RISCV_TOOLCHAIN_PATH/"
"bin:$PATH\"`` 這行，但這麼做與 riscv-gnu-toolchain 的相容性可能會有問題。"

msgid ""
"The command is similar in nature, but with some key changes. ``ccflags`` and "
"``linkflags`` append additional flags to the build. ``--sysroot`` points to "
"a folder simulating a Linux system, it contains all the headers, libraries, "
"and ``.so`` files Clang will use. ``--gcc-toolchain`` tells Clang where the "
"complete toolchain is, and ``-target riscv64-unknown-linux-gnu`` indicates "
"to Clang the target architecture, and OS we want to build for."
msgstr ""
"這個建構指令與一般編譯類似，但有幾個重要差異。``ccflags`` 與 ``linkflags`` 是"
"額外的編譯與連結參數，``--sysroot`` 指向模擬 Linux 系統的資料夾，裡面包含所有"
"標頭檔、函式庫及 ``.so`` 檔案供 Clang 使用。``--gcc-toolchain`` 指定完整工具"
"鏈位置，``-target riscv64-unknown-linux-gnu`` 則告訴 Clang 目標為 RISC-V 架構"
"與 Linux 系統。"

msgid ""
"If all went well, you should now see a ``bin`` directory, and within it, a "
"binary similar to the following:"
msgstr "若一切順利，你會在 ``bin`` 目錄下看到類似下列的二進位檔："

msgid ""
"You can now copy this executable to your favorite RISC-V device, then launch "
"it there by double-clicking, which should bring up the project manager."
msgstr ""
"你可以將這個可執行檔複製到你的 RISC-V 裝置，並在裝置上雙擊啟動，應可正常開啟"
"專案管理員。"

msgid ""
"If you later decide to compile the export templates, copy the above build "
"command but change the value of ``target`` to ``template_debug`` for a debug "
"build, or ``template_release`` for a release build."
msgstr ""
"日後若需要編譯匯出樣板，只要複製相同的建構指令，將 ``target`` 參數改成 "
"``template_debug`` （除錯版）或 ``template_release`` （發行版）即可。"

msgid "Using Clang and LLD for faster development"
msgstr "以 Clang 與 LLD 加速開發流程"

msgid ""
"You can also use Clang and LLD to build Godot. This has two upsides compared "
"to the default GCC + GNU ld setup:"
msgstr ""
"你也可以用 Clang 搭配 LLD 建構 Godot。和預設的 GCC+GNU ld 相比有兩大優點："

msgid ""
"LLD links Godot significantly faster compared to GNU ld or gold. This leads "
"to faster iteration times."
msgstr "LLD 連結速度遠超過 GNU ld 或 gold，可大幅加快迭代流程。"

msgid "Clang tends to give more useful error messages compared to GCC."
msgstr "Clang 通常會提供比 GCC 更有幫助的錯誤訊息。"

msgid ""
"After the build is completed, a new binary with a ``.llvm`` suffix will be "
"created in the ``bin/`` folder."
msgstr ""
"建構完成後，會在 ``bin/`` 資料夾產生一個以 ``.llvm`` 為副檔名的新二進位檔案。"

msgid ""
"It's still recommended to use GCC for production builds as they can be "
"compiled using link-time optimization, making the resulting binaries smaller "
"and faster."
msgstr ""
"正式發行版還是建議用 GCC 建構，因為能支援連結時期最佳化，讓二進位檔更精簡且效"
"能更佳。"

msgid "There are two solutions:"
msgstr "有兩種解法："

msgid "In your SCons command, add the parameter ``use_static_cpp=no``."
msgstr "在 SCons 指令裡加入 ``use_static_cpp=no`` 參數。"

msgid ""
"Follow `these instructions <https://github.com/ivmai/"
"libatomic_ops#installation-and-usage>`__ to configure, build, and install "
"``libatomic_ops``. Then, copy ``/usr/lib/libatomic_ops.a`` to ``/usr/lib/"
"libatomic.a``, or create a soft link to ``libatomic_ops`` by command ``ln "
"-s /usr/lib/libatomic_ops.a /usr/lib/libatomic.a``. The soft link can ensure "
"the latest ``libatomic_ops`` will be used without the need to copy it every "
"time when it is updated."
msgstr ""
"請依照 `這份說明 <https://github.com/ivmai/libatomic_ops#installation-and-"
"usage>`__ 設定、建構並安裝 ``libatomic_ops``。然後將 ``/usr/lib/"
"libatomic_ops.a`` 複製到 ``/usr/lib/libatomic.a``，或用 ``ln -s /usr/lib/"
"libatomic_ops.a /usr/lib/libatomic.a`` 建立軟連結。這可確保每次更新後都會自動"
"指向最新版 ``libatomic_ops``，無需每次手動複製。"

msgid "Using mold for faster development"
msgstr "以 mold 加速開發流程"

msgid ""
"For even faster linking compared to LLD, you can use `mold <https://"
"github.com/rui314/mold>`__. mold can be used with either GCC or Clang."
msgstr ""
"若想要比 LLD 更快的連結速度，可以使用 `mold <https://github.com/rui314/"
"mold>`__。mold 可與 GCC 或 Clang 搭配使用。"

msgid ""
"As of January 2023, mold is not readily available in Linux distribution "
"repositories, so you will have to install its binaries manually."
msgstr ""
"截至 2023 年 1 月，mold 尚未收錄於大多數 Linux 發行版套件庫，需手動安裝其二進"
"位檔。"

msgid ""
"Download mold binaries from its `releases page <https://github.com/rui314/"
"mold/releases/latest>`__."
msgstr ""
"請從其 `發行頁面 <https://github.com/rui314/mold/releases/latest>`__ 下載 "
"mold 二進位檔。"

msgid ""
"Extract the ``.tar.gz`` file, then move the extracted folder to a location "
"such as ``.local/share/mold``."
msgstr "解壓縮 ``.tar.gz``，並將資料夾移至如 ``.local/share/mold`` 的位置。"

msgid ""
"Add ``$HOME/.local/share/mold/bin`` to your user's ``PATH`` environment "
"variable. For example, you can add the following line at the end of your "
"``$HOME/.bash_profile`` file:"
msgstr ""
"將 ``$HOME/.local/share/mold/bin`` 加入你的 ``PATH`` 環境變數。例如可在 "
"``$HOME/.bash_profile`` 檔末加上："

msgid "Using system libraries for faster development"
msgstr "以系統函式庫加速開發"

msgid ""
"`Godot bundles the source code of various third-party libraries. <https://"
"github.com/godotengine/godot/tree/master/thirdparty>`__ You can choose to "
"use system versions of third-party libraries instead. This makes the Godot "
"binary faster to link, as third-party libraries are dynamically linked. "
"Therefore, they don't need to be statically linked every time you build the "
"engine (even on small incremental changes)."
msgstr ""
"`Godot 內建多種第三方函式庫原始碼。 <https://github.com/godotengine/godot/"
"tree/master/thirdparty>`__ 你也可以選擇改用系統內提供的第三方函式庫。這樣 "
"Godot 二進位檔的連結速度會更快，因為第三方函式庫會用動態連結，每次建構引擎"
"（即使只是小幅變更）都不用重複靜態連結。"

msgid ""
"However, not all Linux distributions have packages for third-party libraries "
"available (or they may not be up-to-date)."
msgstr ""
"但不是所有 Linux 發行版都有這些第三方函式庫的套件（或可能不是最新版）。"

msgid ""
"Moving to system libraries can reduce linking times by several seconds on "
"slow CPUs, but it requires manual testing depending on your Linux "
"distribution. Also, you may not be able to use system libraries for "
"everything due to bugs in the system library packages (or in the build "
"system, as this feature is less tested)."
msgstr ""
"改用系統函式庫能讓連結時間在慢速 CPU 上減少數秒，但這需要依你的 Linux 發行版"
"手動測試。此外，某些情境下可能無法全部用系統函式庫，因為系統套件或建構系統本"
"身偶有 bug（這類用法測試較少）。"

msgid ""
"To compile Godot with system libraries, install these dependencies **on "
"top** of the ones listed in the :ref:`doc_compiling_for_linuxbsd_oneliners`:"
msgstr ""
"要用系統函式庫編譯 Godot，請在 :ref:`doc_compiling_for_linuxbsd_oneliners` 所"
"列相依套件基礎上，再安裝這些依賴項："

msgid ""
"After installing all required packages, use the following command to build "
"Godot:"
msgstr "安裝所有需要的套件後，請用下列指令建構 Godot："

msgid ""
"On Debian stable, you will need to remove `builtin_embree=no` as the system-"
"provided Embree version is too old to work with Godot's latest `master` "
"branch (which requires Embree 4)."
msgstr ""
"在 Debian 穩定版上，需移除 `builtin_embree=no`，因為系統提供的 Embree 版本太"
"舊，無法支援 Godot 最新 master 分支（需 Embree 4）。"

msgid ""
"You can view a list of all built-in libraries that have system alternatives "
"by running ``scons -h``, then looking for options starting with ``builtin_``."
msgstr ""
"你可以執行 ``scons -h``，查閱所有有系統替代方案的內建函式庫，搜尋開頭為 "
"``builtin_`` 的選項。"

msgid ""
"When using system libraries, the resulting binary is **not** portable across "
"Linux distributions anymore. Do not use this approach for creating binaries "
"you intend to distribute to others, unless you're creating a package for a "
"Linux distribution."
msgstr ""
"使用系統函式庫時，產生的二進位檔**無法**於不同 Linux 發行版之間移植。請勿用於"
"要分發給他人的可執行檔，除非你是要為特定 Linux 發行版打包。"
