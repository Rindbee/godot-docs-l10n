#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Large world coordinates"
msgstr "大世界座標"

msgid ""
"Large world coordinates are mainly useful in 3D projects; they are rarely "
"required in 2D projects. Also, unlike 3D rendering, 2D rendering currently "
"doesn't benefit from increased precision when large world coordinates are "
"enabled."
msgstr ""
"大世界座標主要用於 3D 專案；2D 專案較少需要。此外，與 3D 繪圖不同，啟用大世界"
"座標時，2D 繪圖目前無法從提升精度中獲益。"

msgid "Why use large world coordinates?"
msgstr "為什麼要使用大世界座標？"

msgid ""
"In Godot, physics simulation and rendering both rely on *floating-point* "
"numbers. However, in computing, floating-point numbers have **limited "
"precision and range**. This can be a problem for games with huge worlds, "
"such as space or planetary-scale simulation games."
msgstr ""
"在 Godot 中，物理模擬和繪圖都依賴於 *浮點數*。然而，電腦中的浮點數有 **有限的"
"精度與範圍**。這對於有著龐大世界的遊戲（如太空或行星規模的模擬遊戲）而言，會"
"是個問題。"

msgid ""
"Precision is the greatest when the value is close to ``0.0``. Precision "
"becomes gradually lower as the value increases or decreases away from "
"``0.0``. This occurs every time the floating-point number's *exponent* "
"increases, which happens when the floating-point number surpasses a power of "
"2 value (2, 4, 8, 16, …). Every time this occurs, the number's minimum step "
"will *increase*, resulting in a loss of precision."
msgstr ""
"當值接近 ``0.0`` 時，浮點數的精度最高。隨著值離 ``0.0`` 越遠，精度會逐漸降"
"低。每當浮點數的 *指數* 增加（例如數值超過 2、4、8、16 等 2 的冪次），最小步"
"進值就會 *變大*，導致精度損失。"

msgid ""
"In practice, this means that as the player moves away from the world origin "
"(``Vector2(0, 0)`` in 2D games or ``Vector3(0, 0, 0)`` in 3D games), "
"precision will decrease."
msgstr ""
"實際上，這表示玩家越遠離世界原點（2D 遊戲為 ``Vector2(0, 0)``，3D 遊戲為 "
"``Vector3(0, 0, 0)``），精度就會降低。"

msgid ""
"This loss of precision can result in objects appearing to \"vibrate\" when "
"far away from the world origin, as the model's position will snap to the "
"nearest value that can be represented in a floating-point number. This can "
"also result in physics glitches that only occur when the player is far from "
"the world origin."
msgstr ""
"這種精度損失可能導致遠離世界原點的物件出現「抖動」現象，因為模型的位置會對齊"
"到最接近的可表示浮點值。這同樣也會導致物理異常，只在玩家遠離世界原點時才會發"
"生。"

msgid ""
"The range determines the minimum and maximum values that can be stored in "
"the number. If the player tries to move past this range, they will simply "
"not be able to. However, in practice, floating-point precision almost always "
"becomes a problem before the range does."
msgstr ""
"範圍決定了數值能儲存的最小與最大值。如果玩家嘗試超出這個範圍，將無法移動。不"
"過，實際上通常會在達到極限範圍前，先遇到精度不足的問題。"

msgid ""
"The range and precision (minimum step between two exponent intervals) are "
"determined by the floating-point number type. The *theoretical* range allows "
"extremely high values to be stored in single-precision floats, but with very "
"low precision. In practice, a floating-point type that cannot represent all "
"integer values is not very useful. At extreme values, precision becomes so "
"low that the number cannot even distinguish two separate *integer* values "
"from each other."
msgstr ""
"範圍和精度（兩個指數區間間的最小步進）取決於浮點數型別。*理論上*，單精度浮點"
"數能儲存極大的值，但精度非常低。實際上，無法表示所有整數的浮點數型別並不實"
"用。在極端數值下，精度會低到連相鄰的兩個 *整數* 也無法區分。"

msgid ""
"This is the range where individual integer values can be represented in a "
"floating-point number:"
msgstr "以下是浮點數能夠精確表示所有整數值的範圍："

msgid ""
"**Single-precision float range (represent all integers):** Between "
"-16,777,216 and 16,777,216"
msgstr ""
"**單精度浮點數範圍（可表示所有整數）：** -16,777,216 到 16,777,216 之間"

msgid ""
"**Double-precision float range (represent all integers):** Between -9 "
"quadrillion and 9 quadrillion"
msgstr "**雙精度浮點數範圍（可表示所有整數）：** -9 千兆 到 9 千兆之間"

msgid "Range"
msgstr "範圍"

msgid "Single step"
msgstr "單精度步進"

msgid "Double step"
msgstr "雙精度步進"

msgid "Comment"
msgstr "註解"

msgid "[1; 2]"
msgstr "[1; 2]"

msgid "~0.0000001"
msgstr "~0.0000001"

msgid "~1e-15"
msgstr "~1e-15"

msgid "Precision becomes greater near 0.0 (this table is abbreviated)."
msgstr "靠近 0.0 時精度更高（本表已簡化）。"

msgid "[2; 4]"
msgstr "[2; 4]"

msgid "~0.0000002"
msgstr "~0.0000002"

msgid "[4; 8]"
msgstr "[4; 8]"

msgid "~0.0000005"
msgstr "~0.0000005"

msgid "[8; 16]"
msgstr "[8; 16]"

msgid "~0.000001"
msgstr "~0.000001"

msgid "~1e-14"
msgstr "~1e-14"

msgid "[16; 32]"
msgstr "[16; 32]"

msgid "~0.000002"
msgstr "~0.000002"

msgid "[32; 64]"
msgstr "[32; 64]"

msgid "~0.000004"
msgstr "~0.000004"

msgid "[64; 128]"
msgstr "[64; 128]"

msgid "~0.000008"
msgstr "~0.000008"

msgid "~1e-13"
msgstr "~1e-13"

msgid "[128; 256]"
msgstr "[128; 256]"

msgid "~0.000015"
msgstr "~0.000015"

msgid "[256; 512]"
msgstr "[256; 512]"

msgid "~0.00003"
msgstr "~0.00003"

msgid "[512; 1024]"
msgstr "[512; 1024]"

msgid "~0.00006"
msgstr "~0.00006"

msgid "~1e-12"
msgstr "~1e-12"

msgid "[1024; 2048]"
msgstr "[1024; 2048]"

msgid "~0.0001"
msgstr "~0.0001"

msgid "[2048; 4096]"
msgstr "[2048; 4096]"

msgid "~0.0002"
msgstr "~0.0002"

msgid ""
"Maximum *recommended* single-precision range for a first-person 3D game "
"without rendering artifacts or physics glitches."
msgstr "第一人稱 3D 遊戲無算繪瑕疵或物理問題時的最大*建議*單精度範圍。"

msgid "[4096; 8192]"
msgstr "[4096; 8192]"

msgid "~0.0005"
msgstr "~0.0005"

msgid ""
"Maximum *recommended* single-precision range for a third-person 3D game "
"without rendering artifacts or physics glitches."
msgstr "第三人稱 3D 遊戲無算繪瑕疵或物理問題時的最大*建議*單精度範圍。"

msgid "[8192; 16384]"
msgstr "[8192; 16384]"

msgid "~0.001"
msgstr "~0.001"

msgid "[16384; 32768]"
msgstr "[16384; 32768]"

msgid "~0.0019"
msgstr "~0.0019"

msgid "~1e-11"
msgstr "~1e-11"

msgid ""
"Maximum *recommended* single-precision range for a top-down 3D game without "
"rendering artifacts or physics glitches."
msgstr "俯視角 3D 遊戲無算繪瑕疵或物理問題時的最大*建議*單精度範圍。"

msgid "[32768; 65536]"
msgstr "[32768; 65536]"

msgid "~0.0039"
msgstr "~0.0039"

msgid ""
"Maximum *recommended* single-precision range for any 3D game. Double "
"precision (large world coordinates) is usually required past this point."
msgstr ""
"所有 3D 遊戲無算繪瑕疵或物理問題時的最大*建議*單精度範圍。超過此範圍時通常需"
"要使用雙精度（大世界座標）。"

msgid "[65536; 131072]"
msgstr "[65536; 131072]"

msgid "~0.0078"
msgstr "~0.0078"

msgid "[131072; 262144]"
msgstr "[131072; 262144]"

msgid "~0.0156"
msgstr "~0.0156"

msgid "~1e-10"
msgstr "~1e-10"

msgid "> 262144"
msgstr "> 262144"

msgid "> ~0.0313"
msgstr "> ~0.0313"

msgid "~1e-10 (0.0000000001)"
msgstr "~1e-10（0.0000000001）"

msgid ""
"Double-precision remains far more precise than single-precision past this "
"value."
msgstr "超過這個值後，雙精度仍然遠比單精度精確許多。"

msgid ""
"When using single-precision floats, it is possible to go past the suggested "
"ranges, but more visible artifacting will occur and physics glitches will be "
"more common (such as the player not walking straight in certain directions)."
msgstr ""
"使用單精度浮點數雖可超過建議範圍，但會出現更多可見的繪圖瑕疵，也更容易發生物"
"理異常（例如角色在某些方向無法直線行走）。"

msgid ""
"See the `Demystifying Floating Point Precision <https://blog.demofox.org/"
"2017/11/21/>`__ article for more information."
msgstr ""
"詳見 `Demystifying Floating Point Precision <https://blog.demofox.org/"
"2017/11/21/>`__ 文章以獲得更多資訊。"

msgid "How large world coordinates work"
msgstr "大世界座標的運作方式"

msgid ""
"Large world coordinates (also known as **double-precision physics**) "
"increase the precision level of all floating-point computations within the "
"engine."
msgstr "大世界座標（又稱 **雙精度物理**）會提升引擎內所有浮點計算的精度。"

msgid ""
"By default, :ref:`class_float` is 64-bit in GDScript, "
"but :ref:`class_Vector2`, :ref:`class_Vector3` and :ref:`class_Vector4` are "
"32-bit. This means that the precision of vector types is much more limited. "
"To resolve this, we can increase the number of bits used to represent a "
"floating-point number in a Vector type. This results in an *exponential* "
"increase in precision, which means the final value is not just twice as "
"precise, but potentially thousands of times more precise at high values. The "
"maximum value that can be represented is also greatly increased by going "
"from a single-precision float to a double-precision float."
msgstr ""
"預設情況下，GDScript 的 :ref:`class_float` 是 64 位元，"
"但 :ref:`class_Vector2`、:ref:`class_Vector3` 和 :ref:`class_Vector4` 僅為 "
"32 位元。這表示向量型別的精度受限。為了解決這問題，可以提升 Vector 型別中浮點"
"數的位元數。這會帶來 *指數級* 的精度提升，不只是兩倍，數值越大時提升幅度越"
"大。從單精度提升到雙精度，最大可表示的數值也大幅增加。"

msgid ""
"To avoid model snapping issues when far away from the world origin, Godot's "
"3D rendering engine will increase its precision for rendering operations "
"when large world coordinates are enabled. The shaders do not use double-"
"precision floats for performance reasons, but an `alternative solution "
"<https://github.com/godotengine/godot/pull/66178>`__ is used to emulate "
"double precision for rendering using single-precision floats."
msgstr ""
"為避免遠離世界原點時模型吸附問題，Godot 的 3D 繪圖引擎在啟用大世界座標時會提"
"升繪圖精度。著色器為了效能考量不會用雙精度浮點數，但會用 `替代方案 <https://"
"github.com/godotengine/godot/pull/66178>`__ 來用單精度浮點進行雙精度模擬。"

msgid ""
"Enabling large world coordinates comes with a performance and memory usage "
"penalty, especially on 32-bit CPUs. Only enable large world coordinates if "
"you actually need them."
msgstr ""
"啟用大世界座標會增加效能與記憶體使用，特別是在 32 位元 CPU 上。請僅在真正需要"
"時啟用。"

msgid ""
"This feature is tailored towards mid-range/high-end desktop platforms. Large "
"world coordinates may not perform well on low-end mobile devices, unless you "
"take steps to reduce CPU usage with other means (such as decreasing the "
"number of physics ticks per second)."
msgstr ""
"本功能主要針對中高階桌面平台設計。大世界座標在低階行動裝置表現可能不佳，除非"
"你另行降低 CPU 負載（如減少每秒物理更新次數）。"

msgid ""
"On low-end platforms, an *origin shifting* approach can be used instead to "
"allow for large worlds without using double-precision physics and rendering. "
"Origin shifting works with single-precision floats, but it introduces more "
"complexity to game logic, especially in multiplayer games. Therefore, origin "
"shifting is not detailed on this page."
msgstr ""
"在低階平台上，可改採 *原點平移（origin shifting）* 方法來支援大世界，無需用到"
"雙精度物理與繪圖。原點平移可用單精度浮點運作，但會帶來更多遊戲邏輯複雜度，特"
"別是在多人遊戲下。因此本頁不詳述原點平移技術。"

msgid "Who are large world coordinates for?"
msgstr "哪些情境需要用到大世界座標？"

msgid ""
"Large world coordinates are typically required for 3D space or planetary-"
"scale simulation games. This extends to games that require supporting *very* "
"fast movement speeds, but also very slow *and* precise movements at times."
msgstr ""
"3D 太空或行星規模模擬遊戲通常會需要大世界座標。這也適用於同時需要支援 *非常* "
"快速移動、又偶爾需要極慢且精細移動的遊戲。"

msgid ""
"On the other hand, it's important to only use large world coordinates when "
"actually required (for performance reasons). Large world coordinates are "
"usually **not** required for:"
msgstr ""
"另一方面，僅在確實需要時才應使用大世界座標（為了效能）。大世界座標通常**不需"
"要**以下情境："

msgid "2D games, as precision issues are usually less noticeable."
msgstr "2D 遊戲，因為精度問題通常不明顯。"

msgid "Games with small-scale or medium-scale worlds."
msgstr "小規模或中等規模世界的遊戲。"

msgid ""
"Games with large worlds, but split into different levels with loading "
"sequences in between. You can center each level portion around the world "
"origin to avoid precision issues without a performance penalty."
msgstr ""
"有大世界但分為多個關卡、各關卡間有載入流程的遊戲。你可以讓每個關卡都以世界原"
"點為中心，藉此避免精度問題且不會損失效能。"

msgid ""
"Open world games with a *playable on-foot area* not exceeding 8192×8192 "
"meters (centered around the world origin). As shown in the above table, the "
"level of precision remains acceptable within that range, even for a first-"
"person game."
msgstr ""
"開放世界遊戲的*可步行區域*未超過 8192×8192 公尺（以世界原點為中心）。如上表所"
"示，即使是第一人稱遊戲，在這範圍內精度都還可接受。"

msgid ""
"**If in doubt**, you probably don't need to use large world coordinates in "
"your project. For reference, most modern AAA open world titles don't use a "
"large world coordinates system and still rely on single-precision floats for "
"both rendering and physics."
msgstr ""
"**如果有疑慮**，你的專案多半不需要用到大世界座標。舉例來說，大多數現代 AAA 級"
"開放世界遊戲都沒有用大世界座標系統，仍然用單精度浮點數來做繪圖與物理。"

msgid "Enabling large world coordinates"
msgstr "啟用大世界座標"

msgid ""
"This process requires recompiling the editor and all export template "
"binaries you intend to use. If you only intend to export your project in "
"release mode, you can skip the compilation of debug export templates. In any "
"case, you'll need to compile an editor build so you can test your large "
"precision world without having to export the project every time."
msgstr ""
"你必須重新編譯編輯器與所有要用的匯出範本二進位檔。如果只打算用發行模式匯出專"
"案，可以跳過除錯範本的編譯。不論如何，你需要編譯一次支援大精度的編輯器，這樣"
"才能直接測試大世界座標，而不必每次都先匯出。"

msgid ""
"See the :ref:`Compiling <toc-devel-compiling>` section for compiling "
"instructions for each target platform. You will need to add the "
"``precision=double`` SCons option when compiling the editor and export "
"templates."
msgstr ""
"請參閱 :ref:`編譯 <toc-devel-compiling>` 章節以取得各平台的編譯說明。編譯編輯"
"器與匯出範本時，需加上 ``precision=double`` SCons 選項。"

msgid ""
"The resulting binaries will be named with a ``.double`` suffix to "
"distinguish them from single-precision binaries (which lack any precision "
"suffix). You can then specify the binaries as custom export templates in "
"your project's export presets in the Export dialog."
msgstr ""
"產生的二進位檔會以 ``.double`` 為副檔名，以便和無副檔名的單精度二進位檔作區"
"分。你可以在匯出對話框的專案匯出預設中指定這些二進位檔作為自訂匯出範本。"

msgid "Compatibility between single-precision and double-precision builds"
msgstr "單精度與雙精度版本的相容性"

msgid ""
"When saving a *binary* resource using the :ref:`class_ResourceSaver` "
"singleton, a special flag is stored in the file if the resource was saved "
"using a build that uses double-precision numbers. As a result, all binary "
"resources will change on disk when you switch to a double-precision build "
"and save over them."
msgstr ""
"使用 :ref:`class_ResourceSaver` 單例儲存 *二進位* 資源時，如果是用雙精度版本"
"儲存，檔案內會標記特殊旗標。因此當你切換到雙精度版本並覆蓋儲存時，磁碟上的所"
"有二進位資源都會被更新。"

msgid ""
"Both single-precision and double-precision builds support using "
"the :ref:`class_ResourceLoader` singleton on resources that use this special "
"flag. This means single-precision builds can load resources saved using "
"double-precision builds and vice versa. Text-based resources don't store a "
"double-precision flag, as they don't require such a flag for correct reading."
msgstr ""
"單精度與雙精度版本均可用 :ref:`class_ResourceLoader` 單例載入帶該旗標的資源。"
"換句話說，單精度版本可載入雙精度版本儲存的資源，反之亦然。文字型資源不會存放"
"雙精度旗標，因為它們不需要此旗標也能正確讀取。"

msgid "Known incompatibilities"
msgstr "已知不相容處"

msgid ""
"In a networked multiplayer game, the server and all clients should be using "
"the same build type to ensure precision remains consistent across clients. "
"Using different build types *may* work, but various issues can occur."
msgstr ""
"在網路多人遊戲中，伺服器與所有用戶端都應使用相同的版本，以確保精度一致。混用"
"不同版本 *可能* 可以運作，但會有各種問題風險。"

msgid ""
"The GDExtension API changes in an incompatible way in double-precision "
"builds. This means extensions **must** be rebuilt to work with double-"
"precision builds. On the extension developer's end, the ``REAL_T_IS_DOUBLE`` "
"define is enabled when building a GDExtension with ``precision=double``. "
"``real_t`` can be used as an alias for ``float`` in single-precision builds, "
"and ``double`` in double-precision builds."
msgstr ""
"在雙精度版本中，GDExtension API 存在不相容的變更，這代表擴充套件**必須**重新"
"編譯才能與雙精度版本相容。對擴充開發者而言，當用 ``precision=double`` 建置 "
"GDExtension 時，會啟用 ``REAL_T_IS_DOUBLE`` 定義。此時 ``real_t`` 會對應單精"
"度版的 ``float``，雙精度版則對應 ``double``。"

msgid "Limitations"
msgstr "限制"

msgid ""
"Since 3D rendering shaders don't actually use double-precision floats, there "
"are some limitations when it comes to 3D rendering precision:"
msgstr "由於 3D 繪圖著色器實際上未用雙精度浮點，因此 3D 繪圖精度仍有限制："

msgid ""
"Shaders using the ``skip_vertex_transform`` or ``world_vertex_coords`` don't "
"benefit from increased precision."
msgstr ""
"使用 ``skip_vertex_transform`` 或 ``world_vertex_coords`` 的著色器無法受益於"
"提升的精度。"

msgid ""
":ref:`Triplanar mapping <doc_standard_material_3d_triplanar_mapping>` "
"doesn't benefit from increased precision. Materials using triplanar mapping "
"will exhibit visible jittering when far away from the world origin."
msgstr ""
":ref:`三平面貼圖 <doc_standard_material_3d_triplanar_mapping>` 不會受益於精度"
"提升。遠離世界原點時，使用三平面貼圖的材質會有明顯抖動。"

msgid ""
"In double-precision builds, world space coordinates in a shader "
"``fragment()`` function can't be reconstructed from view space, for example:"
msgstr ""
"在雙精度版本中，著色器 ``fragment()`` 函式內的世界座標無法從視角空間重建，例"
"如："

msgid ""
"Instead, calculate the world space coordinates in the ``vertex()`` function "
"and pass them using a :ref:`varying<doc_shading_language_varyings>`, for "
"example:"
msgstr ""
"改為在 ``vertex()`` 函式內計算世界座標，並"
"用 :ref:`varying<doc_shading_language_varyings>` 傳遞，例如："

msgid ""
"2D rendering currently doesn't benefit from increased precision when large "
"world coordinates are enabled. This can cause visible model snapping to "
"occur when far away from the world origin (starting from a few million "
"pixels at typical zoom levels). 2D physics calculations will still benefit "
"from increased precision though."
msgstr ""
"目前 2D 繪圖在啟用大世界座標時無法受益於提升精度。這會導致遠離世界原點時（在"
"常見縮放下，大約數百萬像素距離）模型吸附現象明顯。不過，2D 物理計算仍會受益於"
"精度提升。"
