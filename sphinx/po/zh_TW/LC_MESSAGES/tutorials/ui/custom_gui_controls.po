#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom GUI controls"
msgstr "自訂 GUI 控制元件"

msgid "So many controls..."
msgstr "控制元件真多呀……"

msgid ""
"Yet there are never enough. Creating your own custom controls that act just "
"the way you want them to is an obsession of almost every GUI programmer. "
"Godot provides plenty of them, but they may not work exactly the way you "
"want. Before contacting the developers with a pull-request to support "
"diagonal scrollbars, at least it will be good to know how to create these "
"controls easily from script."
msgstr ""
"不過這永遠都不嫌多。幾乎每個 GUI 開發者都熱衷於建立完全符合自己需求的自訂控制"
"元件。Godot 提供了大量控制元件，但它們可能不完全如你所願。在向開發者提交支援"
"斜向捲軸的 Pull Request 之前，至少應該先學會如何用腳本輕鬆建立這些控制元件。"

msgid "Drawing"
msgstr "繪製"

msgid ""
"For drawing, it is recommended to check the :ref:`doc_custom_drawing_in_2d` "
"tutorial. The same applies. Some functions are worth mentioning due to their "
"usefulness when drawing, so they will be detailed next:"
msgstr ""
"繪製方面，建議先參考 :ref:`doc_custom_drawing_in_2d` 教學。這些原理同樣適用於"
"控制元件的繪製。有些函式對於繪製特別實用，接下來會詳細介紹："

msgid "Checking control size"
msgstr "檢查控制元件尺寸"

msgid ""
"Unlike 2D nodes, \"size\" is important with controls, as it helps to "
"organize them in proper layouts. For this, the :ref:`Control.size "
"<class_Control_property_size>` property is provided. Checking it during "
"``_draw()`` is vital to ensure everything is kept in-bounds."
msgstr ""
"與 2D 節點不同，「尺寸」對控制元件來說很重要，這有助於正確地在版面配置中排列"
"它們。為此，提供了 :ref:`Control.size <class_Control_property_size>` 屬性。"
"在 ``_draw()`` 期間檢查這個屬性，可以確保所有內容都維持在元件範圍內。"

msgid "Checking focus"
msgstr "檢查焦點"

msgid ""
"Some controls (such as buttons or text editors) might provide input focus "
"for keyboard or joypad input. Examples of this are entering text or pressing "
"a button. This is controlled with the :ref:`Control.focus_mode "
"<class_Control_property_focus_mode>` property. When drawing, and if the "
"control supports input focus, it is always desired to show some sort of "
"indicator (highlight, box, etc.) to indicate that this is the currently "
"focused control. To check for this status, the :ref:`Control.has_focus() "
"<class_Control_method_has_focus>` method exists. Example"
msgstr ""
"部分控制元件（如按鈕或文字編輯器）可以為鍵盤或手把輸入提供焦點。例如輸入文字"
"或按下按鈕。這是透過 :ref:`Control.focus_mode "
"<class_Control_property_focus_mode>` 屬性來控制。繪製時，若該控制元件支援焦"
"點，通常會顯示某種提示（高亮、框線等），表示目前該元件獲得焦點。要檢查此狀"
"態，可以使用 :ref:`Control.has_focus() <class_Control_method_has_focus>` 方"
"法。範例："

msgid "Sizing"
msgstr "調整尺寸"

msgid ""
"As mentioned before, size is important to controls. This allows them to lay "
"out properly, when set into grids, containers, or anchored. Controls, most "
"of the time, provide a *minimum size* to help properly lay them out. For "
"example, if controls are placed vertically on top of each other using "
"a :ref:`VBoxContainer <class_VBoxContainer>`, the minimum size will make "
"sure your custom control is not squished by the other controls in the "
"container."
msgstr ""
"如前所述，尺寸對控制元件來說非常重要，這能讓它們在網格、容器或錨點配置時正確"
"排列。大多數控制元件會提供 *最小尺寸* ，以協助正確地安排它們。例如，若控制元"
"件透過 :ref:`VBoxContainer <class_VBoxContainer>` 垂直堆疊，最小尺寸會確保你"
"的自訂元件不會被其他元件擠壓變形。"

msgid ""
"To provide this callback, just override :ref:`Control._get_minimum_size() "
"<class_Control_private_method__get_minimum_size>`, for example:"
msgstr ""
"要提供這個回呼，只需覆寫 :ref:`Control._get_minimum_size() "
"<class_Control_private_method__get_minimum_size>` ，例如："

msgid "Alternatively, set it using a function:"
msgstr "或者，直接用函式設定："

msgid "Input"
msgstr "輸入"

msgid ""
"Controls provide a few helpers to make managing input events much easier "
"than regular nodes."
msgstr "控制元件提供了一些輔助工具，讓輸入事件的處理比一般節點更方便。"

msgid "Input events"
msgstr "輸入事件"

msgid ""
"There are a few tutorials about input before this one, but it's worth "
"mentioning that controls have a special input method that only works when:"
msgstr ""
"雖然前面已經有幾個關於輸入的教學，不過值得一提的是，控制元件有一個特殊的輸入"
"處理方法，僅在以下情況下才會觸發："

msgid "The mouse pointer is over the control."
msgstr "滑鼠指標位於控制元件上方。"

msgid ""
"The button was pressed over this control (control always captures input "
"until button is released)"
msgstr "滑鼠鍵在此控制元件上被按下（控制元件會持續捕捉輸入，直到按鍵釋放為止）"

msgid ""
"Control provides keyboard/joypad focus via :ref:`Control.focus_mode "
"<class_Control_property_focus_mode>`."
msgstr ""
"控制元件可透過 :ref:`Control.focus_mode <class_Control_property_focus_mode>` "
"提供鍵盤或手把焦點。"

msgid ""
"This function is :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>`. To use it, override it in your "
"control. No processing needs to be set."
msgstr ""
"此函式為 :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>`。要使用它，只需在你的控制元件中覆"
"寫即可，無須額外設定處理流程。"

msgid ""
"For more information about events themselves, check "
"the :ref:`doc_inputevent` tutorial."
msgstr "有關事件本身的詳細資訊，請參閱 :ref:`doc_inputevent` 教學。"

msgid "Notifications"
msgstr "通知"

msgid ""
"Controls also have many useful notifications for which no dedicated callback "
"exists, but which can be checked with the _notification callback:"
msgstr ""
"控制元件也有許多實用的通知，雖然沒有專屬的回呼函式，但可以透過 _notification "
"回呼進行判斷："
