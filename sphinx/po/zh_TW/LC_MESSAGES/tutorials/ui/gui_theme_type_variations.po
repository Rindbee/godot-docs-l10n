#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Theme type variations"
msgstr "主題型別變種"

msgid ""
"When designing a user interface there may be times when a :ref:`Control "
"<class_Control>` node needs to have a different look than what is normally "
"defined by a :ref:`Theme <class_Theme>`. Every control node has theme "
"property overrides, which allow you to redefine the styling for each "
"individual UI element."
msgstr ""
"在設計使用者介面時，有時候你可能會希望某個 :ref:`Control <class_Control>` 節"
"點擁有與 :ref:`Theme <class_Theme>` 預設樣式不同的外觀。每個控制項節點都支援"
"主題屬性覆寫，讓你可以針對單獨的 UI 元素重新定義樣式。"

msgid ""
"This approach quickly becomes hard to manage, if you need to share the same "
"custom look between several controls. Imagine that you use gray, blue, and "
"red variants of :ref:`Button <class_Button>` throughout your project. "
"Setting it up every time you add a new button element to your interface is a "
"tedious task."
msgstr ""
"如果你需要多個控制項共用同一種自訂外觀，這種做法很快就會變得難以管理。想像一"
"下，假設你的專案中需要灰色、藍色和紅色的 :ref:`Button <class_Button>` 變體，"
"每次介面上新增按鈕時都要重複設定，會非常繁瑣。"

msgid ""
"To help with the organization and to better utilize the :ref:`power of "
"themes <doc_gui_skinning>` you can use theme type variations. These work "
"like normal theme types, but instead of being self-sufficient and standalone "
"they extend another, base type."
msgstr ""
"為了便於管理並發揮 :ref:`主題的強大功能 <doc_gui_skinning>`，你可以使用主題型"
"別變種。這些變種運作方式和一般主題型別類似，但它們不是獨立存在，而是擴充自其"
"他基礎型別。"

msgid ""
"Following the previous example, your theme can have some styles, colors, and "
"fonts defined for the ``Button`` type, customizing the looks of every button "
"element in your UI. To then have a gray, red, or blue button you would "
"create a new type, e.g. ``GrayButton``, and mark it as a variation of the "
"base ``Button`` type."
msgstr ""
"延續前述例子，你可以在主題中為 ``Button`` 型別定義樣式、顏色與字型，自訂所有"
"按鈕的外觀。如果要有灰色、紅色或藍色的按鈕，可以建立新型別（如 "
"``GrayButton``），並標記為基礎 ``Button`` 型別的變種。"

msgid ""
"Type variations can replace some aspects of the base type, but keep others. "
"They can also define properties that the base style hasn't defined. For "
"example, your ``GrayButton`` can override the ``normal`` style from the base "
"``Button`` and add ``font_color`` that ``Button`` has never defined. The "
"control will use a combination of both types giving priority to the type "
"variation."
msgstr ""
"型別變種可以覆蓋基礎型別的部分屬性，同時保留其他屬性，也能定義基礎型別未定義"
"的屬性。例如，你的 ``GrayButton`` 可以覆寫基礎 ``Button`` 的 ``normal`` 樣"
"式，並新增 ``Button`` 沒有定義的 ``font_color``。控制項會同時結合兩者，並優先"
"採用型別變種的設定。"

msgid ""
"The way controls resolve what theme items they use from each type and each "
"theme is better described in the :ref:`Customizing a project "
"<doc_gui_theme_in_project>` section of the \"Introduction to GUI skinning\" "
"article."
msgstr ""
"控制項如何決定使用哪個型別、哪個主題的項目，在《GUI 皮膚簡介》一文的 :ref:`自"
"訂專案 <doc_gui_theme_in_project>` 章節有詳細說明。"

msgid "Creating a type variation"
msgstr "建立型別變種"

msgid ""
"To create a type variation open the theme editor, then click the plus icon "
"next to the **Type** dropdown on the right side of the editor. Type in what "
"you want to name your theme type variation in the text box, then click **Add "
"Type**."
msgstr ""
"要建立型別變種，請打開主題編輯器，點擊編輯器右側 **型別** 下拉選單旁的加號圖"
"示。在文字框中輸入你要為主題型別變種取的名稱，然後點擊 **新增型別**。"

msgid ""
"Below the **Type** dropdown are the property tabs. Switch to the tab with a "
"wrench and screwdriver icon."
msgstr ""
"在 **型別** 下拉選單下方是屬性分頁。請切換到圖示為扳手與螺絲起子的分頁。"

msgid ""
"Click on the plus icon next to the **Base Type** field. You can select the "
"base type there, which would typically be the name of a control node class "
"(e.g., ``Button``, ``Label``, etc). Type variations can also chain and "
"extend other type variations. This works in the same way control nodes "
"inherit styling of their base class. For example, ``CheckButton`` inherits "
"styles from ``Button`` because corresponding node types extend each other."
msgstr ""
"點擊 **基礎型別** 欄位旁的加號圖示。這裡你可以選擇基礎型別，通常是控制項節點"
"的類別名稱（如 ``Button``、``Label`` 等）。型別變種也能巢狀擴充其他型別變種，"
"這與控制項節點繼承基底類別的風格相同。例如，``CheckButton`` 會繼承 "
"``Button`` 的風格，因為對應的節點型別是擴充關係。"

msgid ""
"After you select the base type, you should now be able to see its properties "
"on the other tabs in the theme editor. You can edit them as usual."
msgstr ""
"選擇好基礎型別後，你應該就能在主題編輯器的其他分頁中看到對應的屬性，並可照常"
"編輯。"

msgid "Using a type variation"
msgstr "使用型別變種"

msgid ""
"Now that a type variation has been created you can apply it to your nodes. "
"In the inspector dock, under the **Theme** property of a control node, you "
"can find the **Theme Type Variation** property. It is empty by default, "
"which means that only the base type has an effect on this node."
msgstr ""
"現在已經建立型別變種，你可以將它套用到節點上。在屬性檢視器中，控制項節點的 "
"**Theme** 屬性下會有 **Theme Type Variation** 屬性。預設為空，代表僅基礎型別"
"會影響此節點。"

msgid ""
"You can either select a type variation from a dropdown list, or input its "
"name manually. Variations appear on the list only if the type variation "
"belongs to the project-wide theme, which you can configure in the project "
"settings. For any other case you have to input the name of the variation "
"manually. Click on the pencil icon to the right. Then type in the name of "
"the type variation and click the check mark icon or press enter. If a type "
"variation with that name exists it will now be used by the node."
msgstr ""
"你可以從下拉選單中選擇型別變種，也可以手動輸入名稱。只有屬於專案主題的型別變"
"種才會顯示在清單中，專案主題可在專案設定裡設定。其他情況下，請點擊右側鉛筆圖"
"示手動輸入型別變種名稱，再點選勾選圖示或按下 Enter 鍵。若存在該名稱的型別變"
"種，節點就會開始使用它。"
