#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to GUI skinning"
msgstr "GUI 換膚入門"

msgid ""
"It is essential for a game to provide clear, informative, and yet visually "
"pleasing user interface to its players. While :ref:`Control <class_Control>` "
"nodes come with a decently functional look out of the box, there is always "
"room for uniqueness and case-specific tuning. For this purpose Godot engine "
"includes a system for GUI skinning (or theming), which allows you to "
"customize the look of every control in your user interface, including your "
"custom controls."
msgstr ""
"遊戲必須為玩家提供清晰、資訊豐富且視覺上令人愉悅的使用者介面。雖"
"然 :ref:`Control <class_Control>` 節點預設就有相當實用的外觀，但仍有不少空間"
"可以讓你打造獨特的風格或進行針對性的調整。為此，Godot 引擎內建了 GUI 換膚（或"
"主題）系統，讓你能自訂所有介面控制項的外觀，包括你自訂的控制項。"

msgid ""
"Here is an example of this system in action — a game with the GUI that is "
"radically different from the default UI theme of the engine:"
msgstr ""
"以下展示此系統的實際效果——一款遊戲的 GUI 與引擎預設的 UI 主題有著截然不同的風"
"格："

msgid "A \"Gear Up!\" screen in Tank Kings, courtesy of Winterpixel Games"
msgstr "《坦克王》中的「裝備起來！」介面，感謝 Winterpixel Games 授權提供"

msgid ""
"Beyond achieving a unique look for your game, this system also enables "
"developers to provide customization options to the end users, including "
"accessibility settings. UI themes are applied in a cascading manner (i.e. "
"they propagate from parent controls to their children), which means that "
"font settings or adjustments for colorblind users can be applied in a single "
"place and affect the entire UI tree. Of course this system can also be used "
"for gameplay purposes: your hero-based game can change its style for the "
"selected player character, or you can give different flavors to the sides in "
"your team-based project."
msgstr ""
"除了為遊戲打造獨特外觀外，這套系統也讓開發者能為終端使用者提供自訂選項，包括"
"無障礙設定。UI 主題是以階層方式套用（也就是會從父控制項向下傳遞到子控制項），"
"這代表像字型設定或色盲相關調整，都能在單一處設定並影響整個 UI 樹狀結構。當"
"然，這套系統也能用於遊戲性設計：像英雄類遊戲可以讓選定角色有不同風格，或團隊"
"遊戲可為不同勢力設計專屬樣式。"

msgid "Basics of themes"
msgstr "主題基礎"

msgid ""
"The skinning system is driven by the :ref:`Theme <class_Theme>` resource. "
"Every Godot project has an inherent default theme that contains the settings "
"used by the built-in control nodes. This is what gives the controls their "
"distinct look out of the box. A theme only describes the configuration, "
"however, and it is still the job of each individual control to use that "
"configuration in the way it requires to display itself. This is important to "
"remember when implementing :ref:`your own custom controls "
"<doc_custom_gui_controls>`."
msgstr ""
"換膚系統是由 :ref:`Theme <class_Theme>` 資源驅動。每個 Godot 專案都有一個內建"
"的預設主題，包含所有內建控制項預設的外觀設定。這就是控制項預設外觀的來源。不"
"過主題僅僅描述設定，實際如何運用這些設定來顯示，仍取決於各個控制項本身。這點"
"在你實作 :ref:`自訂控制項 <doc_custom_gui_controls>` 時一定要注意。"

msgid ""
"Even the Godot editor itself relies on the default theme. But it doesn't "
"look the same as a Godot project, because it applies its own heavily "
"customized theme on top of the default one. In principle, this works exactly "
"like it would in your game as explained :ref:`below "
"<doc_gui_theme_in_project>`."
msgstr ""
"連 Godot 編輯器本身也依賴預設主題。但編輯器看起來和一般 Godot 專案不同，因為"
"它在預設主題之上，疊加了高度自訂的主題。原則上這和你的遊戲專案的運作方式完全"
"一樣，詳見 :ref:`下方說明 <doc_gui_theme_in_project>`。"

msgid "Theme items"
msgstr "主題項目"

msgid ""
"The configuration that is stored in a theme consists of theme items. Each "
"item has a unique name and must be one of the following data types:"
msgstr ""
"儲存在主題中的設定由多個主題項目構成。每個項目都有唯一名稱，且必須屬於下列資"
"料型別之一："

msgid "**Color**"
msgstr "**顏色**"

msgid ""
"A :ref:`color <class_Color>` value, which is often used for fonts and "
"backgrounds. Colors can also be used for modulation of controls and icons."
msgstr ""
":ref:`color <class_Color>` 值，常用於字型和背景。顏色也可用於控制項和圖示的調"
"色或變色。"

msgid "**Constant**"
msgstr "**常數**"

msgid ""
"An integer value, which can be used either for numeric properties of "
"controls (such as the item separation in a :ref:`BoxContainer "
"<class_BoxContainer>`), or for boolean flags (such as the drawing of "
"relationship lines in a :ref:`Tree <class_Tree>`)."
msgstr ""
"整數值，可用於控制項的數值屬性（例如 :ref:`BoxContainer "
"<class_BoxContainer>` 的間距設定），或作為布林旗標（例如 :ref:`Tree "
"<class_Tree>` 是否繪製關聯線）。"

msgid "**Font**"
msgstr "**字型**"

msgid ""
"A :ref:`font <class_Font>` resource, which is used by controls that display "
"text. Fonts contain most text rendering settings, except for its size and "
"color. On top of that, alignment and text direction are controlled by "
"individual controls."
msgstr ""
":ref:`font <class_Font>` 資源，供顯示文字的控制項使用。字型資源本身包含大部分"
"文字算繪設定，但大小和顏色除外。對齊方式與文字方向則是由各控制項自訂。"

msgid "**Font size**"
msgstr "**字型大小**"

msgid ""
"An integer value, which is used alongside a font to determine the size at "
"which the text should be displayed."
msgstr "一個整數值，與字型一起決定文字顯示的大小。"

msgid "**Icon**"
msgstr "**圖示**"

msgid ""
"A :ref:`texture <class_Texture2D>` resource, which is normally used to "
"display an icon (on a :ref:`Button <class_Button>`, for example)."
msgstr ""
":ref:`texture <class_Texture2D>` 資源，通常用於顯示圖示（例如 :ref:`Button "
"<class_Button>` 上）。"

msgid "**StyleBox**"
msgstr "**StyleBox**"

msgid ""
"A :ref:`StyleBox <class_StyleBox>` resource, a collection of configuration "
"options which define the way a UI panel should be displayed. This is not "
"limited to the :ref:`Panel <class_Panel>` control, as styleboxes are used by "
"many controls for their backgrounds and overlays."
msgstr ""
":ref:`StyleBox <class_StyleBox>` 資源，是一組定義 UI 面板顯示方式的設定集合。"
"不只 :ref:`Panel <class_Panel>` 控制項使用 StyleBox，許多控制項也都會用於其背"
"景或覆蓋層。"

msgid ""
"Different controls will apply StyleBoxes in a different manner. Most "
"notably, ``focus`` styleboxes are drawn as an *overlay* to other styleboxes "
"(such as ``normal`` or ``pressed``) to allow the base stylebox to remain "
"visible. This means the focus stylebox should be designed as an outline or "
"translucent box, so that its background can remain visible."
msgstr ""
"不同控制項會以不同方式套用 StyleBox。特別的是，``focus`` StyleBox 會被繪製為"
"其他 StyleBox（例如 ``normal`` 或 ``pressed``）的*覆蓋層*，以便基礎 StyleBox "
"仍可見。因此，focus StyleBox 應設計為描邊或半透明樣式，讓底層背景能被保留。"

msgid "Theme types"
msgstr "主題型別"

msgid ""
"To help with the organization of its items each theme is separated into "
"types, and each item must belong to a single type. In other words, each "
"theme item is defined by its name, its data type and its theme type. This "
"combination must be unique within the theme. For example, there cannot be "
"two color items named ``font_color`` in a type called ``Label``, but there "
"can be another ``font_color`` item in a type ``LineEdit``."
msgstr ""
"為了方便組織管理，各主題會依型別區分，每個項目只能屬於一個型別。換句話說，每"
"個主題項目都由名稱、資料型別與主題型別三者共同決定，這組合在同個主題內必須唯"
"一。例如，``Label`` 型別下不能有兩個叫 ``font_color`` 的顏色項目，但 "
"``LineEdit`` 型別下則可有另一個 ``font_color`` 項目。"

msgid ""
"The default Godot theme comes with multiple theme types already defined, one "
"for every built-in control node that uses UI skinning. The example above "
"contains actual theme items present in the default theme. You can refer to "
"the **Theme Properties** section in the class reference for each control to "
"see which items are available to it and its child classes."
msgstr ""
"Godot 的預設主題已經定義了多種主題型別，對應所有支援 UI 換膚的內建控制項節"
"點。上面範例中提到的，就是預設主題實際存在的項目。你可以查閱各控制項的類別參"
"考文件中的「主題屬性」章節，了解哪些項目可用於該類別及其子類別。"

msgid ""
"Child classes can use theme items defined for their parent class (``Button`` "
"and its derivatives being a good example of that). In fact, every control "
"can use every theme item of any theme type, if it needs to (but for the "
"clarity and predictability we try to avoid that in the engine)."
msgstr ""
"子類別可以使用父類別定義的主題項目（例如 ``Button`` 及其衍生類別）。其實每個"
"控制項理論上都能使用任何型別下的主題項目（但為了清晰性與可預測性，引擎實作上"
"會盡量避免這樣做）。"

msgid ""
"It is important to remember that for child classes that process is "
"automated. Whenever a built-in control requests a theme item from the theme "
"it can omit the theme type, and its class name will be used instead. On top "
"of that, the class names of its parent classes will also be used in turn. "
"This allows changes to the parent class, such as ``Button``, to affect all "
"derived classes without the need to customize every one of them."
msgstr ""
"要注意，對子類別來說這個流程是自動化的。當內建控制項向主題請求主題項目時，可"
"以省略主題型別，會直接使用其類別名稱，接著也會依序查找其父類別名稱。這樣一"
"來，像修改 ``Button`` 父類別的主題項目，就能影響所有衍生類別，而無須一一調"
"整。"

msgid ""
"To give more customization opportunities types can also be linked together "
"as type variations. This is another use-case for custom theme types. For "
"example, a theme can contain a type ``Header`` which can be marked as a "
"variation of the base ``Label`` type. An individual ``Label`` control can "
"then be set to use the ``Header`` variation for its type, and every time a "
"theme item is requested from a theme this variation will be used before any "
"other type. This allows to store various presets of theme items for the same "
"class of the control node in the single ``Theme`` resource."
msgstr ""
"為了提供更多自訂彈性，型別之間也能設計成變種。這是自訂主題型別的另一個應用，"
"例如主題中可以有個 ``Header`` 型別，標記為 ``Label`` 基礎型別的變種。個別 "
"``Label`` 控制項就可以指定型別為 ``Header``，之後每次請求主題項目時，會優先使"
"用這個變種。這樣就能在同一個 ``Theme`` 資源中，為同一類型的控制項儲存不同的主"
"題項目預設值。"

msgid ""
"Only variations available from the default theme or defined in the custom "
"project theme are shown in the Inspector dock as options. You can still "
"input manually the name of a variation that is defined outside of those two "
"places, but it is recommended to keep all variations to the project theme."
msgstr ""
"只有預設主題或自訂專案主題中的變種，會在屬性檢視器裡顯示為可選項。你仍可手動"
"輸入其他地方定義的變種名稱，但建議所有變種都統一放在專案主題中。"

msgid ""
"You can learn more about creating and using theme type variations in "
"a :ref:`dedicated article <doc_gui_theme_type_variations>`."
msgstr ""
"你可以參考 :ref:`專門的文章 <doc_gui_theme_type_variations>`，進一步了解主題"
"型別變種的建立與應用。"

msgid "Customizing a control"
msgstr "自訂控制項"

msgid ""
"Each control node can be customized directly without the use of themes. This "
"is called local overrides. Every theme property from the control's class "
"reference can be overridden directly on the control itself, using either the "
"Inspector dock, or scripts. This allows to make granular changes to a "
"particular part of the UI, while not affecting anything else in the project, "
"including this control's children."
msgstr ""
"每個控制項節點都可以不透過主題而直接自訂，這稱為本地覆寫。你可以在屬性檢視器"
"或用腳本，直接覆寫控制項類別參考中列出的每一個主題屬性。這能讓你細緻調整介面"
"的某一部分，而不影響專案其他部分，包括這個控制項的子項。"

msgid ""
"Local overrides are less useful for the visual flair of your user interface, "
"especially if you aim for consistency. However, for layout nodes these are "
"essential. Nodes such as :ref:`BoxContainer <class_BoxContainer>` "
"and :ref:`GridContainer <class_GridContainer>` use theme constants for "
"defining separation between their children, and :ref:`MarginContainer "
"<class_MarginContainer>` stores its customizable margins in its theme items."
msgstr ""
"本地覆寫對於整體 UI 美觀幫助有限，尤其當你追求一致性時更是如此。不過，對於排"
"版用的節點來說則相當重要。像 :ref:`BoxContainer <class_BoxContainer>` "
"與 :ref:`GridContainer <class_GridContainer>` 這類節點會用主題常數來定義子項"
"間距；:ref:`MarginContainer <class_MarginContainer>` 則會將自訂邊界存於主題項"
"目中。"

msgid ""
"Whenever a control has a local theme item override, this is the value that "
"it uses. Values provided by the theme are ignored."
msgstr ""
"當控制項有本地主題項目覆寫時，會優先使用這個值，主題所提供的值則會被忽略。"

msgid "Customizing a project"
msgstr "自訂專案"

msgid ""
"Out of the box each project adopts the default project theme provided by "
"Godot. The default theme itself is constant and cannot be changed, but its "
"items can be overridden with a custom theme. Custom themes can be applied in "
"two ways: as a project setting, and as a node property throughout the tree "
"of control nodes."
msgstr ""
"每個新專案預設都會採用 Godot 提供的預設專案主題。預設主題本身是固定的、無法修"
"改，但你可以用自訂主題來覆寫它的項目。自訂主題有兩種套用方式：作為專案設定，"
"或設定在控制項樹狀結構中的節點屬性。"

msgid ""
"There are two project settings that can be adjusted to affect your entire "
"project: :ref:`GUI > Theme > Custom<class_ProjectSettings_property_gui/theme/"
"custom>` allows you to set a custom project-wide theme, and :ref:`GUI > "
"Theme > Custom Font<class_ProjectSettings_property_gui/theme/custom_font>` "
"does the same to the default fallback font. When a theme item is requested "
"by a control node the custom project theme, if present, is checked first. "
"Only if it doesn't have the item the default theme is checked."
msgstr ""
"有兩個專案設定可以影響整個專案：:ref:`GUI > Theme > Custom "
"<class_ProjectSettings_property_gui/theme/custom>` 可設定全專案自訂主"
"題，:ref:`GUI > Theme > Custom Font <class_ProjectSettings_property_gui/"
"theme/custom_font>` 則用於設定預設備援字型。當控制項節點請求主題項目時，會先"
"檢查自訂專案主題（若有設定），只有找不到時才會用預設主題。"

msgid ""
"This allows you to configure the default look of every Godot control with a "
"single theme resource, but you can go more granular than that. Every control "
"node also has a :ref:`theme <class_Control_property_theme>` property, which "
"allows you to set a custom theme for the branch of nodes starting with that "
"control. This means that the control and all of its children, and their "
"children in turn, would first check that custom theme resource before "
"falling back on the project and the default themes."
msgstr ""
"這讓你可以用單一主題資源設定所有 Godot 控制項的預設外觀，但你也能做更細膩的調"
"整。每個控制項節點也有 :ref:`theme <class_Control_property_theme>` 屬性，能針"
"對該節點及其所有子孫節點設定自訂主題。換句話說，這個控制項及其子孫節點會優先"
"檢查這份自訂主題，找不到時才回退到專案主題及預設主題。"

msgid ""
"Instead of changing the project setting you can set the custom theme "
"resource to the root-most control node of your entire UI branch to almost "
"the same effect. While in the running project it will behave as expected, "
"individual scenes will still display using the default theme when previewing "
"or running them directly. To fix that you can set the same theme resource to "
"the root control of each individual scene."
msgstr ""
"你可以選擇不更動專案設定，而是將自訂主題資源設定到 UI 架構中最上層的控制項節"
"點，效果幾乎相同。在專案執行時會如預期顯示，但如果你直接預覽或運行單一場景，"
"則仍會套用預設主題。要解決這問題，可將同一份主題資源，也設定到各個場景的根控"
"制項。"

msgid ""
"For example, you can have a certain style for buttons in your project theme, "
"but want a different look for buttons inside of a popup dialog. You can set "
"a custom theme resource to the root control of your popup and define a "
"different style for buttons within that resource. As long as the chain of "
"control nodes between the root of the popup and the buttons is "
"uninterrupted, those buttons will use the styles defined in the theme "
"resource that is closest to them. All other controls will still be styled "
"using the project-wide theme and the default theme styles."
msgstr ""
"舉例來說，你可以在專案主題設定所有按鈕的統一風格，但希望彈跳視窗裡的按鈕是不"
"同樣式。這時就可以將自訂主題資源設定到該快顯視窗的根控制項，並在主題中為按鈕"
"定義另一種樣式。只要從快顯視窗的根控制項到按鈕之間的節點結構不中斷，這些按鈕"
"就會使用最近的主題資源中定義的樣式。其餘控制項則仍然套用全專案主題與預設主題"
"樣式。"

msgid ""
"To sum it up, for an arbitrary control its theme item lookup would look "
"something like this:"
msgstr "總結來說，任一控制項查找主題項目的流程如下："

msgid "Check for local overrides of the same data type and name."
msgstr "檢查是否有相同名稱與資料型別的本地覆寫。"

msgid "Using control's type variation, class name and parent class names:"
msgstr "依據控制項的型別變種、類別名稱與父類別名稱："

msgid ""
"Check every control starting from itself and see if it has a theme property "
"set;"
msgstr "從自己開始，逐層往上檢查每個控制項是否有設定主題屬性;"

msgid ""
"If it does, check that theme for the matching item of the same name, data "
"and theme type;"
msgstr "如果有，則在該主題檢查有無同名、同型別、同主題型別的項目;"

msgid ""
"If there is no custom theme or it doesn't have the item, move to the parent "
"control;"
msgstr "如果沒有自訂主題，或主題中沒有該項目，就往上檢查父控制項;"

msgid ""
"Repeat steps a-c. until the root of the tree is reached, or a non-control "
"node is reached."
msgstr "重複 a-c 步驟，直到場景樹根節點或遇到非控制項節點為止。"

msgid ""
"Using control's type variation, class name and parent class names check the "
"project-wide theme, if it's present."
msgstr "若有專案範圍主題，則依型別變種、類別名稱、父類別名稱查找該主題。"

msgid ""
"Using control's type variation, class name and parent class names check the "
"default theme."
msgstr "依型別變種、類別名稱、父類別名稱查找預設主題。"

msgid ""
"Even if the item doesn't exist in any theme, a corresponding default value "
"for that data type will be returned."
msgstr "即使所有主題都找不到該項目，仍會回傳該資料型別的預設值。"

msgid "Beyond controls"
msgstr "控制項以外的應用"

msgid ""
"Naturally, themes are an ideal type of resource for storing configuration "
"for something visual. While the support for theming is built into control "
"nodes, other nodes can use them as well, just like any other resource."
msgstr ""
"主題本身就是用來儲存視覺化設定的理想資源。雖然只有控制項節點內建支援主題，但"
"其他節點也可以像使用其他資源一樣來引用主題。"

msgid ""
"An example of using themes for something beyond controls can be a modulation "
"of sprites for the same units on different teams in a strategy game. A theme "
"resource can define a collection of colors, and sprites (with a help from "
"scripts) can use those colors to draw the texture. The main benefit being "
"that you could make different themes using the same theme items for red, "
"blue, and green teams, and swap them with a single resource change."
msgstr ""
"主題也能應用在控制項以外的場景。例如策略遊戲中，相同單位在不同隊伍時需要不同"
"的顏色顯示，就能用主題資源來定義一組顏色，並透過腳本讓精靈（Sprite）根據主題"
"項目改變顏色繪製貼圖。這樣就能用同一組主題項目，製作紅隊、藍隊、綠隊等不同主"
"題，僅需替換主題資源即可輕鬆切換。"
