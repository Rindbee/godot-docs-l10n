#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Cross-language scripting"
msgstr "跨語言腳本撰寫"

msgid ""
"Godot allows you to mix and match scripting languages to suit your needs. "
"This means a single project can define nodes in both C# and GDScript. This "
"page will go through the possible interactions between two nodes written in "
"different languages."
msgstr ""
"Godot 允許你根據需求混用各種腳本語言。這代表單一專案內可以同時以 C# 與 "
"GDScript 定義節點。本頁將說明用不同語言撰寫的兩個節點間的各種互動方式。"

msgid ""
"The following two scripts will be used as references throughout this page."
msgstr "本頁將持續以以下兩個腳本作為範例參考。"

msgid "Instantiating nodes"
msgstr "實例化節點"

msgid ""
"If you're not using nodes from the scene tree, you'll probably want to "
"instantiate nodes directly from the code."
msgstr "如果沒有從場景樹取得節點，你大多會直接在程式碼中實例化節點。"

msgid "Instantiating C# nodes from GDScript"
msgstr "從 GDScript 實例化 C# 節點"

msgid ""
"Using C# from GDScript doesn't need much work. Once loaded "
"(see :ref:`doc_gdscript_classes_as_resources`), the script can be "
"instantiated with :ref:`new() <class_CSharpScript_method_new>`."
msgstr ""
"從 GDScript 使用 C# 並不麻煩。腳本載入後（參"
"見 :ref:`doc_gdscript_classes_as_resources`），即可直接用 :ref:`new() "
"<class_CSharpScript_method_new>` 來實例化。"

msgid ""
"When creating ``.cs`` scripts, you should always keep in mind that the class "
"Godot will use is the one named like the ``.cs`` file itself. If that class "
"does not exist in the file, you'll see the following error: ``Invalid call. "
"Nonexistent function `new` in base``."
msgstr ""
"建立 ``.cs`` 腳本時，請務必確認類別名稱與 ``.cs`` 檔案名稱一致。若檔案內沒有"
"同名類別，會出現這個錯誤：「Invalid call. Nonexistent function `new` in "
"base」。"

msgid "For example, MyCoolNode.cs should contain a class named MyCoolNode."
msgstr "例如，MyCoolNode.cs 應包含名為 MyCoolNode 的類別。"

msgid ""
"The C# class needs to derive a Godot class, for example ``GodotObject``. "
"Otherwise, the same error will occur."
msgstr ""
"C# 類別必須繼承自 Godot 的類別，例如 ``GodotObject``。否則也會發生相同的錯"
"誤。"

msgid ""
"You also need to check your ``.cs`` file is referenced in the project's "
"``.csproj`` file. Otherwise, the same error will occur."
msgstr ""
"你還要確認 ``.cs`` 檔案已經在專案的 ``.csproj`` 檔案中被正確引用。否則也會出"
"現相同的錯誤。"

msgid "Instantiating GDScript nodes from C#"
msgstr "從 C# 實例化 GDScript 節點"

msgid ""
"From the C# side, everything work the same way. Once loaded, the GDScript "
"can be instantiated with :ref:`GDScript.New() <class_GDScript_method_new>`."
msgstr ""
"在 C# 端，流程也是一樣。腳本載入後，可以用 :ref:`GDScript.New() "
"<class_GDScript_method_new>` 來實例化 GDScript。"

msgid ""
"Here we are using an :ref:`class_Object`, but you can use type conversion "
"like explained in :ref:`doc_c_sharp_features_type_conversion_and_casting`."
msgstr ""
"這裡我們用的是 :ref:`class_Object`，但你也可"
"依 :ref:`doc_c_sharp_features_type_conversion_and_casting` 所述進行型別轉換。"

msgid "Accessing fields"
msgstr "存取欄位"

msgid "Accessing C# fields from GDScript"
msgstr "從 GDScript 存取 C# 欄位"

msgid ""
"Accessing C# fields from GDScript is straightforward, you shouldn't have "
"anything to worry about."
msgstr "從 GDScript 存取 C# 欄位非常直接，無需額外注意事項。"

msgid "Accessing GDScript fields from C#"
msgstr "從 C# 存取 GDScript 欄位"

msgid ""
"As C# is statically typed, accessing GDScript from C# is a bit more "
"convoluted. You will have to use :ref:`GodotObject.Get() "
"<class_Object_method_get>` and :ref:`GodotObject.Set() "
"<class_Object_method_set>`. The first argument is the name of the field you "
"want to access."
msgstr ""
"由於 C# 為靜態型別語言，從 C# 存取 GDScript 欄位會稍微麻煩些。你需要使"
"用 :ref:`GodotObject.Get() <class_Object_method_get>` "
"及 :ref:`GodotObject.Set() <class_Object_method_set>`。第一個參數為欲存取的欄"
"位名稱。"

msgid "Calling methods"
msgstr "呼叫方法"

msgid "Calling C# methods from GDScript"
msgstr "從 GDScript 呼叫 C# 方法"

msgid ""
"Again, calling C# methods from GDScript should be straightforward. The "
"marshalling process will do its best to cast the arguments to match function "
"signatures. If that's impossible, you'll see the following error: ``Invalid "
"call. Nonexistent function `FunctionName```."
msgstr ""
"同樣地，從 GDScript 呼叫 C# 方法也很直覺。資料封送處理會盡力將參數轉換為正確"
"的類型以符合函式簽名。若無法轉換，會顯示錯誤：「Invalid call. Nonexistent "
"function `FunctionName`」。"

msgid "Calling GDScript methods from C#"
msgstr "從 C# 呼叫 GDScript 方法"

msgid ""
"To call GDScript methods from C# you'll need to use :ref:`GodotObject.Call() "
"<class_Object_method_call>`. The first argument is the name of the method "
"you want to call. The following arguments will be passed to said method."
msgstr ""
"要從 C# 呼叫 GDScript 方法，需使用 :ref:`GodotObject.Call() "
"<class_Object_method_call>`。第一個參數為方法名稱，其餘參數則依序傳入該方法。"

msgid "Connecting to signals"
msgstr "連接訊號"

msgid "Connecting to C# signals from GDScript"
msgstr "從 GDScript 連接到 C# 訊號"

msgid ""
"Connecting to a C# signal from GDScript is the same as connecting to a "
"signal defined in GDScript:"
msgstr ""
"從 GDScript 連接到 C# 訊號的方式，與連接至 GDScript 定義的訊號完全相同："

msgid "Connecting to GDScript signals from C#"
msgstr "從 C# 連接到 GDScript 訊號"

msgid ""
"Connecting to a GDScript signal from C# only works with the ``Connect`` "
"method because no C# static types exist for signals defined by GDScript:"
msgstr ""
"從 C# 連接到 GDScript 訊號時，只能用 ``Connect`` 方法，因為 GDScript 定義的訊"
"號沒有對應的 C# 靜態型別："

msgid "Inheritance"
msgstr "繼承"

msgid ""
"A GDScript file may not inherit from a C# script. Likewise, a C# script may "
"not inherit from a GDScript file. Due to how complex this would be to "
"implement, this limitation is unlikely to be lifted in the future. See `this "
"GitHub issue <https://github.com/godotengine/godot/issues/38352>`__ for more "
"information."
msgstr ""
"GDScript 檔案不能繼承自 C# 腳本，同樣地，C# 腳本也無法繼承 GDScript 檔案。由"
"於實作上過於複雜，這項限制未來也不太可能解除。詳情請參閱 `這個 GitHub issue "
"<https://github.com/godotengine/godot/issues/38352>`__。"
