#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Evaluating expressions"
msgstr "運算式求值"

msgid ""
"Godot provides an :ref:`class_Expression` class you can use to evaluate "
"expressions."
msgstr "Godot 提供 :ref:`class_Expression` 類別，可用來計算運算式。"

msgid "An expression can be:"
msgstr "運算式可以是："

msgid "A mathematical expression such as ``(2 + 4) * 16/4.0``."
msgstr "數學運算式，例如 ``(2 + 4) * 16/4.0``。"

msgid "A boolean expression such as ``true && false``."
msgstr "布林運算式，例如 ``true && false``。"

msgid "A built-in method call like ``deg_to_rad(90)``."
msgstr "內建函式呼叫，例如 ``deg_to_rad(90)``。"

msgid ""
"A method call on a user-provided script like ``update_health()``, if "
"``base_instance`` is set to a value other than ``null`` when "
"calling :ref:`Expression.execute() <class_Expression_method_execute>`."
msgstr ""
"如果於呼叫 :ref:`Expression.execute() <class_Expression_method_execute>` 時"
"將 ``base_instance`` 設為非 ``null``，則可以呼叫用戶自訂腳本的方法，如 "
"``update_health()``。"

msgid ""
"The Expression class is independent from GDScript. It's available even if "
"you compile Godot with the GDScript module disabled."
msgstr ""
"Expression 類別獨立於 GDScript，即使編譯 Godot 時未啟用 GDScript 模組也可使"
"用。"

msgid "Basic usage"
msgstr "基本用法"

msgid "To evaluate a mathematical expression, use::"
msgstr "要計算數學運算式，請使用："

msgid "The following operators are available:"
msgstr "可用的運算子如下："

msgid "Operator"
msgstr "運算子"

msgid "Notes"
msgstr "說明"

msgid "Addition ``+``"
msgstr "加法（``+``）"

msgid ""
"Can also be used to concatenate strings and arrays: - ``\"hello\" + \" "
"world\"`` = ``hello world`` - ``[1, 2] + [3, 4]`` = ``[1, 2, 3, 4]``"
msgstr ""
"亦可用於串接字串與陣列：- ``\"hello\" + \" world\"`` = ``hello world``- "
"``[1, 2] + [3, 4]`` = ``[1, 2, 3, 4]``"

msgid "Subtraction (``-``)"
msgstr "減法（``-``）"

msgid "Multiplication (``*``)"
msgstr "乘法（``*``）"

msgid "Division (``/``)"
msgstr "除法（``/``）"

msgid ""
"Performs and integer division if both operands are integers. If at least one "
"of them is a floating-point number, returns a floating-point value."
msgstr ""
"若兩個運算元皆為整數則執行整數除法；只要其中一個為浮點數則返回浮點數結果。"

msgid "Remainder (``%``)"
msgstr "餘數（``%``）"

msgid ""
"Returns the remainder of an integer division (modulo). The result will "
"always have the sign of the dividend."
msgstr "回傳整數除法的餘數（取模）。結果符號與被除數相同。"

msgid "Conjunction (``&&``)"
msgstr "邏輯 AND（``&&``）"

msgid "Returns the result of a boolean AND."
msgstr "回傳布林值 AND 的結果。"

msgid "Disjunction (``||``)"
msgstr "邏輯 OR（``||``）"

msgid "Returns the result of a boolean OR."
msgstr "回傳布林值 OR 的結果。"

msgid "Negation (``!``)"
msgstr "邏輯 NOT（``!``）"

msgid "Returns the result of a boolean NOT."
msgstr "回傳布林值 NOT 的結果。"

msgid ""
"Spaces around operators are optional. Also, keep in mind the usual `order of "
"operations <https://en.wikipedia.org/wiki/Order_of_operations>`__ applies. "
"Use parentheses to override the order of operations if needed."
msgstr ""
"運算子前後空格可加可不加。請注意一般的 `運算子優先順序 <https://"
"zh.wikipedia.org/zh-tw/%E9%81%8B%E7%AE%97%E6%AC%A1%E5%BA%8F>`__ 依然適用。有"
"需要時可用括號改變運算順序。"

msgid ""
"All the Variant types supported in Godot can be used: integers, floating-"
"point numbers, strings, arrays, dictionaries, colors, vectors, …"
msgstr ""
"Godot 支援的所有 Variant 型別皆可用於運算式，包括整數、浮點數、字串、陣列、字"
"典、顏色、向量等。…"

msgid "Arrays and dictionaries can be indexed like in GDScript::"
msgstr "陣列與字典可如 GDScript 一樣使用索引："

msgid "Passing variables to an expression"
msgstr "傳遞變數給運算式"

msgid ""
"You can pass variables to an expression. These variables will then become "
"available in the expression's \"context\" and will be substituted when used "
"in the expression::"
msgstr "可傳遞變數給運算式，變數會成為運算式的「上下文」並在使用時被取代："

msgid ""
"Both the variable names and variable values **must** be specified as an "
"array, even if you only define one variable. Also, variable names are **case-"
"sensitive**."
msgstr ""
"變數名稱與變數值**都必須**用陣列指定，即使只定義一個變數也一樣。此外，變數名"
"稱**區分大小寫**。"

msgid "Setting a base instance for the expression"
msgstr "設定運算式的基礎實例"

msgid ""
"By default, an expression has a base instance of ``null``. This means the "
"expression has no base instance associated to it."
msgstr "預設情況下，運算式的基礎實例為 ``null``，即沒有綁定任何基礎實例。"

msgid ""
"When calling :ref:`Expression.execute() <class_Expression_method_execute>`, "
"you can set the value of the ``base_instance`` parameter to a specific "
"object instance such as ``self``, another script instance or even a "
"singleton::"
msgstr ""
"呼叫 :ref:`Expression.execute() <class_Expression_method_execute>` 時，你可以"
"將 ``base_instance`` 參數設為特定物件實例，例如 ``self``、其他腳本實例，或全"
"域單例等："

msgid "Associating a base instance allows doing the following:"
msgstr "綁定基礎實例後可進行以下操作："

msgid "Reference the instance's constants (``const``) in the expression."
msgstr "在運算式中引用該實例的常數（``const``）。"

msgid "Reference the instance's member variables (``var``) in the expression."
msgstr "在運算式中引用該實例的成員變數（``var``）。"

msgid ""
"Call methods defined in the instance and use their return values in the "
"expression."
msgstr "於運算式中呼叫該實例所定義的方法，並使用其回傳值。"

msgid ""
"Setting a base instance to a value other than ``null`` allows referencing "
"constants, member variables, and calling all methods defined in the script "
"attached to the instance. Allowing users to enter expressions may allow "
"cheating in your game, or may even introduce security vulnerabilities if you "
"allow arbitrary clients to run expressions on other players' devices."
msgstr ""
"將基礎實例設為非 ``null`` 值後，可於運算式中引用其常數、成員變數，並呼叫該實"
"例所附加腳本內定義的所有方法。若允許玩家自行輸入運算式，可能導致遊戲作弊，若"
"允許任意客戶端在其他玩家裝置上執行運算式，更可能產生資安風險。"

msgid "Example script"
msgstr "範例腳本"

msgid "The script below demonstrates what the Expression class is capable of::"
msgstr "以下腳本展示 Expression 類別的多種用途："

msgid "The output from the script will be::"
msgstr "此腳本的輸出為： ::"

msgid "Built-in functions"
msgstr "內建函式"

msgid ""
"All methods in the :ref:`Global Scope<class_@GlobalScope>` are available in "
"the Expression class, even if no base instance is bound to the expression. "
"The same parameters and return types are available."
msgstr ""
":ref:`Global Scope<class_@GlobalScope>` 中的所有方法皆可於 Expression 類別中"
"直接使用，即使未綁定基礎實例亦可。方法參數與回傳型別相同。"

msgid ""
"However, unlike GDScript, parameters are **always required** even if they're "
"specified as being optional in the class reference. In contrast, this "
"restriction on arguments doesn't apply to user-made functions when you bind "
"a base instance to the expression."
msgstr ""
"但與 GDScript 不同，這些函式的所有參數**皆必填**，即使在類別文件中標記為可選"
"也一樣。若有綁定基礎實例，則自訂函式則不受此限制。"
