#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "The Profiler"
msgstr "效能分析器"

msgid ""
"You run your game from Godot and play around. It's fun, it's becoming "
"feature complete, and you feel it's getting close to release."
msgstr "你在 Godot 裡執行遊戲測試，內容越來越完整，感覺快可以發行了。"

msgid ""
"But then, you open the skill tree, and it grinds to a halt as something "
"snags in your code. Watching the skill tree scroll by like it's a slide show "
"is unacceptable. What went wrong? Is it positioning the skill tree elements, "
"the UI, or rendering?"
msgstr ""
"但突然你打開技能樹時，遊戲卡住了，像放投影片一樣慢。這種體驗不能接受。是技能"
"樹排版、UI 還是繪圖的問題？"

msgid ""
"You could try to optimize everything and run the game repeatedly, but you "
"can be smarter about this and narrow down the possibilities. Enter Godot's "
"profiler."
msgstr ""
"你可以盲目優化所有東西反覆測試，但更聰明的做法是用 Godot 的效能分析器來定位問"
"題。"

msgid "An overview of the profiler"
msgstr "效能分析器總覽"

msgid ""
"You can open the profiler by opening the **Debugger** panel and clicking on "
"the **Profiler** tab."
msgstr "在下方 **除錯器** 面板點選 **效能分析** 分頁可開啟分析器。"

msgid ""
"Godot's profiler does not automatically run because profiling is performance-"
"intensive. It has to continually measure everything happening in the game "
"and report back to the debugger, so it's off by default."
msgstr ""
"Godot 的效能分析器預設不會自動啟動，因為分析需即時監控所有遊戲活動並回報除錯"
"器，會影響效能。"

msgid ""
"To begin profiling, run your game then focus back on the editor. Click on "
"the **Start** button in the top-left corner of the **Profiler** tab. You can "
"also check **Autostart**, which will make the profiler automatically start "
"when the project is run the next time. Note that the **Autostart** "
"checkbox's state is not preserved across editor sessions."
msgstr ""
"要開始分析，先執行遊戲，再切回編輯器，在 **效能分析** 分頁左上角點選 **開始"
"**。你也可勾選 **自動開始**，讓下次執行專案自動啟動分析。注意：自動開始設定不"
"會跨編輯器啟動保存。"

msgid ""
"The profiler does not currently support C# scripts. C# scripts can be "
"profiled using JetBrains Rider and JetBrains dotTrace with the Godot support "
"plugin."
msgstr ""
"目前效能分析器不支援 C# 腳本。如需分析 C# 腳本，可使用 JetBrains Rider 與 "
"JetBrains dotTrace（需安裝 Godot 支援外掛）。"

msgid ""
"You can clear the data by clicking the **Clear** button anytime. Use the "
"**Measure** drop-down menu to change the type of data you measure. The "
"measurements panel and the graph will update accordingly."
msgstr ""
"隨時可點選 **清除** 按鈕重置分析資料。可用 **測量** 下拉選單切換分析項目，面"
"板與圖表也會隨之更新。"

msgid "The measured data"
msgstr "分析數據說明"

msgid ""
"The profiler's interface is split into two. There is a list of functions on "
"the left and the performance graph on the right."
msgstr "分析器介面左側為函式清單，右側為效能圖表。"

msgid ""
"The main measurements are frame time, physics frame, idle time, and physics "
"time."
msgstr "主要分析項目為：幀時間、物理幀、閒置時間、物理時間。"

msgid ""
"The **frame time** is the time it takes Godot to execute all the logic for "
"an entire image, from physics to rendering."
msgstr "**幀時間** 指 Godot 執行一幀所有邏輯（自物理至繪圖）所需時間。"

msgid ""
"**Physics frame** is the time Godot has allocated between physics updates. "
"In an ideal scenario, the frame time is whatever you chose: 16.66 "
"milliseconds by default, which corresponds to 60FPS. It's a frame of "
"reference you can use for everything else around it."
msgstr ""
"**物理幀** 是 Godot 每次物理更新間隔的時間。理想情況下，幀時間由你設定，預設"
"為 16.66 毫秒（對應 60FPS），可作為計算其他分析項目的基準。"

msgid ""
"**Idle time** is the time Godot took to update logic other than physics, "
"such as code that lives in `_process` or timers and cameras set to update on "
"**Idle**."
msgstr ""
"**閒置時間** 指 Godot 更新非物理邏輯（如 `_process` 內的程式碼、設為閒置更新"
"的計時器或相機）所花費的時間。"

msgid ""
"**Physics time** is the time Godot took to update physics tasks, like "
"`_physics_process` and built-in nodes set to **Physics** update."
msgstr ""
"**物理時間** 是 Godot 執行所有物理相關任務（如 `_physics_process` 或設為物理"
"更新的節點）所需時間。"

msgid ""
"**Frame Time** includes rendering time. Say you find a mysterious spike of "
"lag in your game, but your physics and scripts are all running fast. The "
"delay could be due to the appearance of particles or visual effects!"
msgstr ""
"**幀時間** 也包含繪圖耗時。若你發現遊戲不明原因卡頓，但物理與腳本都執行很快，"
"問題可能出在粒子或特效!"

msgid ""
"By default, Godot ticks on Frame Time and Physics Time. This gives you an "
"overview of how long each frame takes relative to the allocated desired "
"physics FPS. You can toggle functions on and off by clicking the checkboxes "
"on the left. Other facilities make appearances as you go down the list, like "
"Physics 2D, Physics, and Audio, before reaching Script functions, where your "
"code appears."
msgstr ""
"預設情況下，Godot 會監控幀時間與物理時間，讓你了解每幀相對於設定目標 FPS 的耗"
"時。你可用左側勾選框啟用/停用任意分析函式。清單下方還有 Physics 2D、Physics、"
"Audio 等系統監控，最下方則是你的腳本函式。"

msgid ""
"If you click on the graph, you change which frame's information appears on "
"the left. In the top right, there is also a frame counter where you can "
"manually adjust the frame you are looking at more granularly."
msgstr ""
"點擊圖表可切換左側顯示的幀資訊。右上角還有幀數計數器，可精細調整檢視的幀。"

msgid "Scope of measurement and measurement windows"
msgstr "分析範圍與視窗"

msgid ""
"You can change what measurement you are looking at using the **Measure** "
"drop-down menu. By default, it starts with Frame Time and lists the time it "
"takes to go through the frame in milliseconds. The average time is the "
"average time any given function took when called more than once. For "
"example, a function that took 0.05 milliseconds to run five times should "
"give you an average of 0.01 milliseconds."
msgstr ""
"可用 **測量** 下拉選單切換分析項目。預設為幀時間（毫秒），平均時間則為某函式"
"多次執行的平均耗時。例如某函式執行五次共 0.05 毫秒，平均為 0.01 毫秒。"

msgid ""
"If accurate milliseconds count is not important, and you want to see "
"proportions of time relative to the rest of the frame, use percentage "
"measurements. Frame % is relative to Frame Time, and Physics % is relative "
"to Physics Time."
msgstr ""
"若不需精確毫秒數，只重視佔用比例，可改用百分比模式。幀% 表示相對於整體幀時"
"間，物理% 則為物理時間佔比。"

msgid ""
"The last option is the scope of the time. **Inclusive** measures the time a "
"function took **with** any nested function calls. For example:"
msgstr ""
"**最後一項是分析範圍。** **Inclusive** （含巢狀）會將所有巢狀呼叫一併計算在"
"內，例如："

msgid ""
"`get_neighbors`, `find_nearest_neighbor` and `move_subject` all took a lot "
"of time. You could be fooled into thinking that this is because all three of "
"them are slow."
msgstr ""
"`get_neighbors`、`find_nearest_neighbor`、`move_subject` 都耗時較久，乍看之下"
"可能誤以為三者都很慢。"

msgid ""
"But when changed to **Self**, Godot measures the time spent in the function "
"body without considering function calls it made itself."
msgstr "但切換為 **Self** 模式後，只計算函式本身內容，不含呼叫他人函式的耗時。"

msgid ""
"You can see that `get_neighbors` and `move_subject` have lost a lot of their "
"importance. In effect, that means that `get_neighbors` and `move_subject` "
"have spent more time waiting for some other function call to finish than "
"not, and `find_nearest_neighbor` is **actually** slow."
msgstr ""
"此時 `get_neighbors` 與 `move_subject` 耗時大幅下降，代表它們大部分時間都在等"
"其它函式執行，真正耗時的是 `find_nearest_neighbor`。"

msgid "Debugging slow code with the profiler"
msgstr "用分析器找出慢速程式碼"

msgid ""
"Finding slow code with the profiler boils down to running your game and "
"watching the performance graph as it draws. When an unacceptable spike "
"occurs in the frame time, you can click on the graph to pause your game and "
"narrow the _Frame #_ to the spike's start. You may need to jump back and "
"forth between frames and functions to find the root cause."
msgstr ""
"分析慢速程式碼時，執行遊戲並觀察效能圖表。遇到幀耗時異常飆高時，可點擊圖表暫"
"停遊戲，並將 _Frame #_ 調至異常起點。可能需來回瀏覽不同幀與函式，才能找到根本"
"原因。"

msgid ""
"Under the Script functions, turn on the checkboxes for some functions to "
"find which take time. These are the functions you need to review and "
"optimize."
msgstr ""
"於腳本函式區域，勾選欲監控的函式，找出耗時者。這些即是你需審查與優化的重點。"

msgid "Measuring manually in microseconds"
msgstr "用微秒單位手動測量"

msgid ""
"If your function is complex, it could be challenging to figure out which "
"part needs optimization. Is it your math or the way you access other pieces "
"of data to do the math with? Is it the `for` loop? The `if` statements?"
msgstr ""
"若你的函式很複雜，可能很難直接判斷哪個區塊需優化。是數學運算慢，還是資料讀取"
"方式有問題？還是迴圈、條件判斷？"

msgid ""
"You can narrow down the measurement by manually counting ticks as the code "
"runs with some temporary functions. The two functions are part of the `Time` "
"class object. They are `get_ticks_msec` and `get_ticks_usec`. The first "
"measures in milliseconds (1,000 per second), and the second measures in "
"microseconds (1,000,000 per second)."
msgstr ""
"你可用暫時性測量法：用 `Time` 物件的 `get_ticks_msec` （毫秒）及 "
"`get_ticks_usec` （微秒），在程式區塊前後計算耗時。"

msgid ""
"Either one returns the amount of time since the game engine started in their "
"respective time frame."
msgstr "這兩個函式都會回傳自引擎啟動以來的累計時間（毫秒/微秒）。"

msgid ""
"If you wrap a piece of code with a start and end count of microseconds, the "
"difference between the two is the amount of time it took to run that piece "
"of code."
msgstr "將程式區塊前後分別記錄微秒數，相減即為該區塊的執行時間。"

msgid ""
"As you become a more experienced programmer, this technique becomes less "
"necessary. You begin to learn what parts of a running program are slow. "
"Knowing that loops and branches can be slow comes from experience, and you "
"gain experience by measuring and doing research."
msgstr ""
"當你成為有經驗的工程師後，這種測量法會越來越少用，你會直接知道哪些區塊容易"
"慢，哪些語法（如迴圈、分支）需注意。這些判斷力都來自實際測量與資料研究。"

msgid ""
"But between the profiler and the ticks functions, you should have enough to "
"get started finding which parts of your code need optimization."
msgstr "善用效能分析器與 tick 測量法，你就能有效找出需優化的程式碼區段。"
