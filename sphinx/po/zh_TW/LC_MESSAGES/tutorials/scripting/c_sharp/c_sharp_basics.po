#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# basics"
msgstr "C# 基礎"

msgid "Introduction"
msgstr "前言"

msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>`, and "
"(re)visit the :ref:`Scripting section <doc_scripting>` of the step-by-step "
"tutorial."
msgstr ""
"本頁簡要介紹 C# 以及如何在 Godot 中使用它。之後，建議你可以參考 :ref:`如何使"
"用特定功能 <doc_c_sharp_features>`、閱讀 :ref:`C# 與 GDScript API 的差異 "
"<doc_c_sharp_differences>`，或者（重新）瀏覽按部就班教學的 :ref:`腳本區段 "
"<doc_scripting>`。"

msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with .NET 8.0."
msgstr ""
"C# 是由 Microsoft 開發的高階程式語言。在 Godot 中則是以 .NET 8.0 為基礎實作。"

msgid ""
"Projects written in C# using Godot 4 currently cannot be exported to the web "
"platform. To use C# on the web platform, consider Godot 3 instead. Android "
"and iOS platform support is available as of Godot 4.2, but is experimental "
"and :ref:`some limitations apply <doc_c_sharp_platforms>`."
msgstr ""
"目前使用 Godot 4 撰寫的 C# 專案尚無法匯出到網頁平台。如果你需要在網頁平台用 "
"C#，請考慮改用 Godot 3。自 Godot 4.2 起已可匯出至 Android 與 iOS，但功能仍屬"
"實驗性，且 :ref:`有些限制 <doc_c_sharp_platforms>`。"

msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"本頁**不是**完整的 C# 語言教學。如果你還不熟悉 C# 的語法與功能，請參考 "
"`Microsoft C# 指南 <https://docs.microsoft.com/zh-tw/dotnet/csharp/index>`_ "
"或尋找其他合適的入門資源。"

msgid "Prerequisites"
msgstr "先決條件"

msgid ""
"Godot bundles the parts of .NET needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, and need to be installed separately."
msgstr ""
"Godot 已內建執行已編譯遊戲所需的 .NET 元件，但未內建建置與編譯專案所需的工具"
"（如 MSBuild 與 C# 編譯器）。這些工具包含在 .NET SDK 中，需另外安裝。"

msgid ""
"In summary, you must have installed the .NET SDK **and** the .NET-enabled "
"version of Godot."
msgstr "總結來說，你必須安裝 .NET SDK **以及** 支援 .NET 的 Godot 版本。"

msgid ""
"Download and install the latest stable version of the SDK from the `.NET "
"download page <https://dotnet.microsoft.com/download>`__."
msgstr ""
"請到 `.NET 下載頁面 <https://dotnet.microsoft.com/download>`__ 下載並安裝最新"
"版 SDK。"

msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr "如果你使用的是 64 位元版本的 Godot，請務必安裝 64 位元的 SDK。"

msgid ""
"If you are building Godot from source, make sure to follow the steps to "
"enable .NET support in your build as outlined in "
"the :ref:`doc_compiling_with_dotnet` page."
msgstr ""
"若你是從原始碼自行建置 Godot，請依照 :ref:`doc_compiling_with_dotnet` 文件中"
"的步驟啟用 .NET 支援。"

msgid "Configuring an external editor"
msgstr "設定外部編輯器"

msgid "Visual Studio 2022"
msgstr "Visual Studio 2022"

msgid "Visual Studio Code"
msgstr "Visual Studio Code"

msgid "MonoDevelop"
msgstr "MonoDevelop"

msgid "Visual Studio for Mac"
msgstr "Visual Studio for Mac"

msgid "JetBrains Rider"
msgstr "JetBrains Rider"

msgid "See the following sections for how to configure an external editor:"
msgstr "有關如何設定外部編輯器，請參考以下說明："

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""
"閱讀完「先決條件」後，即可下載並安裝 `JetBrains Rider <https://"
"www.jetbrains.com/rider/download>`__。"

msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr "在 Godot 的 **編輯器 → 編輯器設定** 選單："

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr "將 **Dotnet → Editor → External Editor** 設為 **JetBrains Rider**。"

msgid "In Rider:"
msgstr "於 Rider："

msgid "Set **MSBuild version** to **.NET Core**."
msgstr "將 **MSBuild version** 設為 **.NET Core**。"

msgid ""
"If you are using a Rider version below 2024.2, install the **Godot support** "
"plugin. This functionality is now built into Rider."
msgstr ""
"如果你使用 2024.2 之前版本的 Rider，請另外安裝 **Godot support** 擴充套件。新"
"版 Rider 已內建此功能。"

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""
"閱讀完「先決條件」後，即可下載並安裝 `Visual Studio Code <https://"
"code.visualstudio.com/download>`__ （又稱 VS Code）。"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio "
"Code**."
msgstr "將 **Dotnet → Editor → External Editor** 設為 **Visual Studio Code**。"

msgid "In Visual Studio Code:"
msgstr "於 Visual Studio Code："

msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""
"安裝 `C# 擴充套件 <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__。"

msgid ""
"To configure a project for debugging, you need a ``tasks.json`` and "
"``launch.json`` file in the ``.vscode`` folder with the necessary "
"configuration."
msgstr ""
"若要設定專案除錯，必須在 ``.vscode`` 資料夾內建立 ``tasks.json`` 與 "
"``launch.json``，並填入必要的設定。"

msgid "Here is an example ``launch.json``:"
msgstr "以下為一個 ``launch.json`` 範例："

msgid ""
"For this launch configuration to work, you need to either setup a GODOT4 "
"environment variable that points to the Godot executable, or replace "
"``program`` parameter with the path to the Godot executable."
msgstr ""
"若要使這個啟動組態生效，你需要設定一個名為 GODOT4 的環境變數指向 Godot 執行"
"檔，或直接將 ``program`` 欄位填入 Godot 執行檔的路徑。"

msgid "Here is an example ``tasks.json``:"
msgstr "以下為一個 ``tasks.json`` 範例："

msgid ""
"Now, when you start the debugger in Visual Studio Code, your Godot project "
"will run."
msgstr ""
"現在，當你在 Visual Studio Code 啟動除錯器時，你的 Godot 專案就會執行。"

msgid "Visual Studio (Windows only)"
msgstr "Visual Studio（僅限 Windows）"

msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""
"下載並安裝最新版 `Visual Studio <https://visualstudio.microsoft.com/"
"downloads/>`__。只要安裝時選對工作負載，Visual Studio 會自動包含所需 SDK，因"
"此不需要額外手動安裝「先決條件」中的內容。"

msgid "While installing Visual Studio, select this workload:"
msgstr "安裝 Visual Studio 時，請選擇以下工作負載："

msgid ".NET desktop development"
msgstr ".NET 桌面開發"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr "將 **Dotnet → Editor → External Editor** 設為 **Visual Studio**。"

msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""
"如果看到「Unable to find package Godot.NET.Sdk」這類錯誤，表示 NuGet 設定有"
"誤，需要修正。"

msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""
"解決 NuGet 設定檔的方法之一是重新產生它。在檔案總管中前往 ``%AppData%"
"\\NuGet``，將 ``NuGet.Config`` 檔案重新命名或刪除。重新建置 Godot 專案時，該"
"檔案會自動以預設值重建。"

msgid ""
"To debug your C# scripts using Visual Studio, open the .sln file that is "
"generated after opening the first C# script in the editor. In the **Debug** "
"menu, go to the **Debug Properties** menu item for your project. Click the "
"**Create a new profile** button and choose **Executable**. In the "
"**Executable** field, browse to the path of the C# version of the Godot "
"editor, or type ``%GODOT4%`` if you have created an environment variable for "
"the Godot executable path. It must be the path to the main Godot executable, "
"not the 'console' version. For the **Working Directory**, type a single "
"period, ``.``, meaning the current directory. Also check the **Enable native "
"code debugging** checkbox. You may now close this window, click downward "
"arrow on the debug profile dropdown, and select your new launch profile. Hit "
"the green start button, and your game will begin playing in debug mode."
msgstr ""
"若要用 Visual Studio 除錯 C# 腳本，請開啟第一個 C# 腳本後產生的 .sln 檔。於 "
"**偵錯** 選單中，進入專案的 **偵錯屬性** 。點擊 **建立新設定檔** 並選擇 **可"
"執行檔** 。在 **可執行檔** 欄位選擇 Godot 編輯器支援 C# 版本的執行檔路徑，若"
"已設好 GODOT4 環境變數，也可填 ``%GODOT4%`` 。此路徑必須是主 Godot 執行檔，不"
"能用 console 版本。 **工作目錄** 填入單一點號 ``.`` （表示目前目錄）。勾選 **"
"啟用原生程式碼偵錯** 。設定完成後即可關閉視窗，從偵錯設定檔下拉選單選擇剛建立"
"的設定檔，點擊綠色開始按鈕，遊戲就會以除錯模式啟動。"

msgid "Creating a C# script"
msgstr "建立 C# 腳本"

msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"當你成功設定好 Godot 的 C# 支援後，於場景節點的右鍵選單選擇 **附加腳本** 時應"
"會出現下列選項："

msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some documentation "
"pages still lack C# examples, most notions can be transferred from GDScript."
msgstr ""
"請注意，儘管細節略有不同，大部分腳本概念在 C# 與 GDScript 之間是一致的。如果"
"你剛接觸 Godot，建議先閱讀 :ref:`doc_scripting` 相關教學。雖然有些文件頁面缺"
"乏 C# 範例，大部分觀念都能直接從 GDScript 套用。"

msgid "Project setup and workflow"
msgstr "專案設定與工作流程"

msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.godot/mono``). All of these but ``.godot/mono`` are important and should "
"be committed to your version control system. Everything under ``.godot`` can "
"be safely added to the ignore list of your VCS. When troubleshooting, it can "
"sometimes help to delete the ``.godot/mono`` folder and let it regenerate."
msgstr ""
"當你建立第一個 C# 腳本時，Godot 會自動初始化整個專案的 C# 專案檔案，包括產生 "
"C# 解決方案（``.sln``）、專案檔（``.csproj``），以及一些工具相關檔案和資料夾"
"（如 ``.godot/mono``）。除了 ``.godot/mono`` 外，其餘都很重要，應納入版本控"
"制。``.godot`` 底下內容可安全加入版本控制忽略清單。有時排除問題時，刪除 "
"``.godot/mono`` 讓 Godot 重新產生會有幫助。"

msgid "Example"
msgstr "範例"

msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "以下是一個空白的 C# 腳本範例，並附有說明註解。"

msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` static class which is part of "
"the ``Godot`` namespace. For a full list of methods in the ``GD`` class, see "
"the class reference pages for :ref:`@GDScript <class_@gdscript>` "
"and :ref:`@GlobalScope <class_@globalscope>`."
msgstr ""
"如你所見，GDScript 中屬於全域作用域的函式（如 Godot 的 ``print`` 函式），在 "
"C# 中則位於 ``Godot`` 命名空間內的靜態類別 ``GD``。完整方法清單請參考類別參考"
"文件：:ref:`@GDScript <class_@gdscript>` 及 :ref:`@GlobalScope "
"<class_@globalscope>`。"

msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error:"
msgstr ""
"請注意，你要掛載到節點上的類別名稱必須與 ``.cs`` 檔案名稱相同，否則會出現下列"
"錯誤："

msgid "*\"Cannot find class XXX for script res://XXX.cs\"*"
msgstr "*\"Cannot find class XXX for script res://XXX.cs\"*"

msgid "General differences between C# and GDScript"
msgstr "C# 與 GDScript 的主要差異"

msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"C# API 採用 ``PascalCase`` （大駝峰式命名），而非 GDScript/C++ 的 "
"``snake_case`` （底線式命名）。大多數欄位與 getter/setter 都盡量轉換為屬性。"
"整體而言，C# 的 Godot API 盡可能遵循慣用 C# 風格。"

msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr "詳情請參閱 :ref:`doc_c_sharp_differences` 頁面。"

msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the **Build** button in the top right corner of the "
"editor."
msgstr ""
"每當你想在編輯器內看到新的匯出變數或訊號時，都必須重新建置專案組件。你可以點"
"擊編輯器右上角的 **建置** 按鈕手動觸發建置。"

msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr "若要套用「tool」腳本的變更，也必須重新建置專案組件。"

msgid "Current gotchas and known issues"
msgstr "目前注意事項與已知問題"

msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for .NET issues <https://github.com/"
"godotengine/godot/labels/topic%3Adotnet>`_."
msgstr ""
"由於 Godot 對 C# 的支援仍屬新穎，現階段仍有不少待完善之處。以下列出目前在 "
"Godot 使用 C# 時需特別留意的重點問題。若有疑問，也可參閱官方的 `.NET 問題追"
"蹤 <https://github.com/godotengine/godot/labels/topic%3Adotnet>`_。"

msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr "雖然可以用 C# 撰寫編輯器外掛，但目前流程較為繁瑣。"

msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr "熱重載時，目前只有匯出變數的狀態會被保存與還原。"

msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr "C# 腳本附加時，類別名稱必須與檔名相符。"

msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation. Prefer "
"using the exposed ``StringName`` in the ``PropertyName``, ``MethodName`` and "
"``SignalName`` to avoid extra ``StringName`` allocations and worrying about "
"snake_case naming."
msgstr ""
"有些方法（如 ``Get()``/``Set()``、``Call()``/``CallDeferred()`` 以及訊號連接"
"用的 ``Connect()``）仍依賴 Godot 的 ``snake_case`` 命名。例如 "
"``CallDeferred(\"AddChild\")`` 會失敗，因為 API 只接受原始的 ``add_child``。"
"但你可以自訂屬性或方法，不受此限。建議優先使用 ``PropertyName``、"
"``MethodName``、``SignalName`` 等已公開的 ``StringName``，這樣可避免多餘的 "
"``StringName`` 配置，也不用顧慮 snake_case。"

msgid ""
"As of Godot 4.0, exporting .NET projects is supported for desktop platforms "
"(Linux, Windows and macOS). Other platforms will gain support in future 4.x "
"releases."
msgstr ""
"自 Godot 4.0 起，.NET 專案可匯出至桌面平台（Linux、Windows、macOS）。其他平台"
"的支援會於 4.x 未來版本陸續加入。"

msgid "Common pitfalls"
msgstr "常見陷阱"

msgid ""
"You might encounter the following error when trying to modify some values in "
"Godot objects, e.g. when trying to change the X coordinate of a ``Node2D``:"
msgstr ""
"你在嘗試修改部份 Godot 物件的屬性時（如變更 ``Node2D`` 的 X 座標）可能會遇到"
"下列錯誤："

msgid ""
"This is perfectly normal. Structs (in this example, a ``Vector2``) in C# are "
"copied on assignment, meaning that when you retrieve such an object from a "
"property or an indexer, you get a copy of it, not the object itself. "
"Modifying said copy without reassigning it afterwards won't achieve anything."
msgstr ""
"這是正常現象。C# 的結構（如 ``Vector2``）在賦值時是複製，從屬性或索引子取得這"
"類物件時，得到的是副本而非原物件。單獨改變副本的內容並不會改變原屬性，必須重"
"新指定回去。"

msgid ""
"The workaround is simple: retrieve the entire struct, modify the value you "
"want to modify, and reassign the property."
msgstr "解法很簡單：先取出整個結構，修改所需值後，再把整個結構重新指定回屬性。"

msgid ""
"Since C# 10, it is also possible to use `with expressions <https://"
"learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-"
"expression>`_ on structs, allowing you to do the same thing in a single line."
msgstr ""
"自 C# 10 起，也可以在結構上使用 `with 運算式 <https://learn.microsoft.com/zh-"
"tw/dotnet/csharp/language-reference/operators/with-expression>`_，讓上述操作"
"一行完成。"

msgid ""
"You can read more about this error on the `C# language reference <https://"
"learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/"
"cs1612>`_."
msgstr ""
"你可在 `C# 語言參考 <https://learn.microsoft.com/zh-tw/dotnet/csharp/"
"language-reference/compiler-messages/cs1612>`_ 了解更多關於此錯誤的資訊。"

msgid "Performance of C# in Godot"
msgstr "Godot 的 C# 效能"

msgid ""
"For a performance comparison of the languages Godot supports, "
"see :ref:`doc_faq_which_programming_language_is_fastest`."
msgstr ""
"關於 Godot 支援語言的效能比較，請參"
"考 :ref:`doc_faq_which_programming_language_is_fastest`。"

msgid ""
"Most properties of Godot C# objects that are based on ``GodotObject`` (e.g. "
"any ``Node`` like ``Control`` or ``Node3D`` like ``Camera3D``) require "
"native (interop) calls as they talk to Godot's C++ core. Consider assigning "
"values of such properties into a local variable if you need to modify or "
"read them multiple times at a single code location:"
msgstr ""
"大多數繼承自 ``GodotObject`` 的 C# 物件屬性（如 ``Control``、``Camera3D`` 等"
"節點），在存取時都需與 Godot C++ 核心進行互操作（interop）呼叫。如果你需要重"
"複存取或修改同一屬性，建議先存到區域變數再操作："

msgid ""
"Passing raw arrays (such as ``byte[]``) or ``string`` to Godot's C# API "
"requires marshalling which is comparatively pricey."
msgstr ""
"將原生陣列（如 ``byte[]``）或 ``string`` 傳遞給 Godot 的 C# API 時，會經過封"
"送處理（marshalling），效能開銷較大。"

msgid ""
"The implicit conversion from ``string`` to ``NodePath`` or ``StringName`` "
"incur both the native interop and marshalling costs as the ``string`` has to "
"be marshalled and passed to the respective native constructor."
msgstr ""
"將 ``string`` 隱式轉換為 ``NodePath`` 或 ``StringName`` 時，會同時產生互操作"
"與資料封送的效能損耗，因為字串需封送並傳給原生建構函式。"

msgid "Using NuGet packages in Godot"
msgstr "在 Godot 使用 NuGet 套件"

msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the "
"``.csproj`` file located in the project root:"
msgstr ""
"你可以像一般 C# 專案一樣，在 Godot 中安裝並使用 `NuGet <https://"
"www.nuget.org/>`_ 套件。多數 IDE 支援直接加入套件，也可手動於專案根目錄的 "
"``.csproj`` 檔案中加入套件參考："

msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""
"自 Godot 3.2.3 起，Godot 會在下次建置專案時自動下載並設定新增的 NuGet 套件。"

msgid "Profiling your C# code"
msgstr "C# 程式碼效能剖析"

msgid ""
"The following tools may be used for performance and memory profiling of your "
"managed code:"
msgstr "你可使用下列工具分析受控（managed）程式碼的效能與記憶體："

msgid "JetBrains Rider with dotTrace/dotMemory plugin."
msgstr "JetBrains Rider，搭配 dotTrace/dotMemory 外掛。"

msgid "Standalone JetBrains dotTrace/dotMemory."
msgstr "獨立版 JetBrains dotTrace/dotMemory。"

msgid "Visual Studio."
msgstr "Visual Studio。"

msgid ""
"Profiling managed and unmanaged code at once is possible with both JetBrains "
"tools and Visual Studio, but limited to Windows."
msgstr ""
"JetBrains 工具與 Visual Studio 均可同時剖析受控與非受控程式碼，但僅支援 "
"Windows。"
