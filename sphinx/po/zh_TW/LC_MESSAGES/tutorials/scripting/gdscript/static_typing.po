#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "GDScript 中的靜態型別"

msgid "In this guide, you will learn:"
msgstr "在本指南中，我們將學到："

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr "靜態型別可以在變數、常數、函式、參數、與回傳型別上使用。"

msgid "A brief look at static typing"
msgstr "靜態型別簡介"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"整體上來說，加上型別能帶來更結構化的體驗，有助於避免錯誤以及讓腳本能自行說明"
"功能。對於在團隊中合作或長期專案來說特別實用：研究指出，開發者花費較多的時間"
"閱讀其他人或自己以前寫過但已經忘記的程式碼。程式碼越清楚、結構越明白，就越容"
"易能理解，並能讓開發者更快開始工作。"

msgid "How to use static typing"
msgstr "如何使用靜態型別"

msgid "Example::"
msgstr "範例："

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr "若試著轉換型別為內建型別而失敗的話，Godot 會拋出錯誤。"

msgid "Safe lines"
msgstr "安全行"

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Godot 無法推定型別的狀況通常發生在取得子節點時。以 Timer 為例，我們使用動態程"
"式碼來取得節點並保存在 ``$Timer`` 中。GDScript 支援 `鴨子型別 <https://"
"stackoverflow.com/a/4205163/8125343>`__ ，所以即使 Timer 是 ``Timer`` 型別，"
"Timer 同時也會是其繼承的 ``Node`` 與 ``Object`` 兩個類別。使用動態 GDScript "
"時，只要節點上有我們需要的方法，就不需要去在意節點是什麼型別。"

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as CharacterBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"我們可以使用型別轉換來告訴 Godot 在取得節點的時候預期取得什麼型別，如 "
"``($Timer as Timer)``, ``($Player as KinematicBody2D)`` …等。Godot 會確保該型"
"別是否有效，而有效的話則會將腳本編輯器左邊的行號變成綠色。"

msgid "Unsafe vs Safe Line"
msgstr "不安全 vs 安全的行"

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "非安全行 (第 7 行) vs 安全行 (第 6 行與第 8 行)"

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr "可以在編輯器設定中關閉安全行或更改安全行的色彩。"

msgid "Typed or dynamic: stick to one style"
msgstr "靜態或動態：只選擇一種風格"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"有型別的 GDScript 與動態 GDScript 可以在同一個專案中共存，但我們建議固定一種"
"風格來在程式碼中保持一貫性，團隊成員也應固定來保持一貫。若大家都遵守同一個方"
"針的話，也更容易一起工作並更快地閱讀理解他人的程式碼。"

msgid "Warning system"
msgstr "警告系統"

msgid "Summary"
msgstr "總結"

msgid "Translation status"
msgstr "翻譯狀態"
