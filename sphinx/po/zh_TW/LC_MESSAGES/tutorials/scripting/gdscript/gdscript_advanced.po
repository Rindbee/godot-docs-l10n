#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript：動態語言入門"

msgid "About"
msgstr "關於"

msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"本教學旨在成為更有效率使用 GDScript 的快速參考指南，聚焦於語言特有常見情境，"
"同時涵蓋許多關於動態型別語言的資訊。"

msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr "特別適合少有或沒有動態型別語言經驗的程式設計師參考。"

msgid "Dynamic nature"
msgstr "動態特性"

msgid "Pros & cons of dynamic typing"
msgstr "動態型別的優缺點"

msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr "GDScript 是動態型別的語言，因此具有以下幾個主要優點："

msgid "The language is easy to get started with."
msgstr "語言上手容易。"

msgid "Most code can be written and changed quickly and without hassle."
msgstr "可以快速且輕鬆地撰寫與修改大多數程式碼。"

msgid "The code is easy to read (little clutter)."
msgstr "程式碼易於閱讀（雜訊較少）。"

msgid "No compilation is required to test."
msgstr "不需編譯即可測試。"

msgid "Runtime is tiny."
msgstr "執行環境小巧。"

msgid "It has duck-typing and polymorphism by nature."
msgstr "天生支援鴨子型別與多型。"

msgid "While the main disadvantages are:"
msgstr "但主要缺點包括："

msgid "Less performance than statically typed languages."
msgstr "效能通常不及靜態型別語言。"

msgid "More difficult to refactor (symbols can't be traced)."
msgstr "重構較困難（符號無法追蹤）。"

msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"某些在靜態型別語言中可於編譯時發現的錯誤，只有在執行時才會出現（因為運算式解"
"析較嚴格）。"

msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"runtime)."
msgstr "程式碼補全的彈性較低（有些變數型別僅於執行時才能得知）。"

msgid ""
"This, translated to reality, means that Godot used with GDScript is a "
"combination designed to create games quickly and efficiently. For games that "
"are very computationally intensive and can't benefit from the engine built-"
"in tools (such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""
"實際上，這代表 Godot 搭配 GDScript 是為了讓你能快速且有效率地開發遊戲。如果你"
"的遊戲需要大量計算、且無法享受引擎內建工具（如 Vector 型別、物理引擎、數學庫"
"等）加速，也可以選擇使用 C++。如此一來，絕大多數遊戲內容仍能用 GDScript 完"
"成，只有在需要效能提升的地方才用 C++ 補強。"

msgid "Variables & assignment"
msgstr "變數與指派"

msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"動態型別語言中的所有變數都近似於「Variant」型態。這代表變數的型別是可變動的，"
"並且僅在指派時才會變更。舉例："

msgid "Static:"
msgstr "靜態語言："

msgid "Dynamic:"
msgstr "動態語言："

msgid "As function arguments:"
msgstr "作為函式參數："

msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr "函式本身也具有動態特性，因此可以用不同類型的參數呼叫，例如："

msgid "Pointers & referencing:"
msgstr "指標與參照："

msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""
"在靜態語言（如 C 或 C++，以及部分 Java、C#）中，變數與指標／參照之間有明顯區"
"分。指標或參照允許將物件的參照傳遞給其他函式，以便被修改。"

msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""
"在 C# 或 Java 中，除了內建型別（int、float、有時還有 String）之外，其餘物件皆"
"以指標或參照傳遞。參照同時會自動進行垃圾回收，也就是當不再被使用時自動釋放。"
"動態型別語言也多採用這種記憶體模式。例如："

msgid "C++:"
msgstr "C++："

msgid "Java:"
msgstr "Java："

msgid "GDScript:"
msgstr "GDScript："

msgid ""
"In GDScript, only base types (int, float, string and the vector types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"arrays, dictionaries, etc) is passed as reference. Classes that "
"inherit :ref:`class_RefCounted` (the default if nothing is specified) will "
"be freed when not used, but manual memory management is allowed too if "
"inheriting manually from :ref:`class_Object`."
msgstr ""
"在 GDScript 中，僅有基礎型別（int、float、string 及 vector 型別）會以值傳遞"
"（複製值）給函式。其他（如實體、陣列、字典等）則以參照傳遞。若類別繼"
"承 :ref:`class_RefCounted`（預設為此），在未被使用時會自動釋放，如果你手動繼"
"承 :ref:`class_Object`，也可自行管理記憶體。"

msgid "Arrays"
msgstr "陣列"

msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""
"動態型別語言中的陣列可同時混合多種資料型別，且始終為動態（可隨時調整大小）。"
"例如，與靜態型別語言的陣列比較："

msgid "And in GDScript:"
msgstr "而在 GDScript 中："

msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr "在動態型別語言中，陣列也可以作為其他資料結構（如列表）來使用："

msgid "Or unordered sets:"
msgstr "或作為無序集合："

msgid "Dictionaries"
msgstr "字典"

msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. In "
"GDScript, untyped dictionaries can be used for many cases where a statically "
"typed language would tend to use another data structure."
msgstr ""
"字典是動態型別語言中的強大工具。在 GDScript 中，沒有明確型別的字典可以應用於"
"許多靜態語言會使用其他資料結構的場合。"

msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"字典可以將任何值對應到任何其他值，無論鍵或值的型別為何。與一般想像不同，字典"
"其實很高效，因為它們是以雜湊表實作。甚至有些語言直接以字典實作陣列。"

msgid "Example of Dictionary:"
msgstr "字典範例："

msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr "字典同樣是動態的，可以隨時新增或移除鍵，幾乎沒有成本："

msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a battleship game example:"
msgstr "多數情境下，二維陣列常可用字典更簡單地實現。以下是一個戰艦遊戲的範例："

msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""
"字典也可作為資料標記或快速結構使用。GDScript 的字典類似 Python 的寫法，同時亦"
"支援 Lua 風格語法與索引，這讓它在撰寫初始狀態或臨時結構時相當方便："

msgid "For & while"
msgstr "For 與 While 迴圈"

msgid ""
"Iterating using the C-style for loop in C-derived languages can be quite "
"complex:"
msgstr "在 C 系語言中，使用傳統 for 迴圈進行迭代可能會較為複雜："

msgid ""
"Because of this, GDScript makes the opinionated decision to have a for-in "
"loop over iterables instead:"
msgstr "因此，GDScript 採用統一的 for-in 迴圈搭配可迭代物件："

msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr "容器型別（陣列與字典）都可迭代。字典可用於遍歷所有鍵："

msgid "Iterating with indices is also possible:"
msgstr "也可以用索引進行遍歷："

msgid "The range() function can take 3 arguments:"
msgstr "range() 函式可接受三個參數："

msgid "Some examples involving C-style for loops:"
msgstr "以下是一些 C 風格 for 迴圈的例子："

msgid "Translate to:"
msgstr "可改寫為："

msgid "And backwards looping done through a negative counter:"
msgstr "若需反向迴圈，可用遞減計數器："

msgid "Becomes:"
msgstr "則可寫為："

msgid "While"
msgstr "While 迴圈"

msgid "while() loops are the same everywhere:"
msgstr "while() 迴圈在所有語言下用法一致："

msgid "Custom iterators"
msgstr "自訂迭代器"

msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"若內建迭代器無法滿足需求，你可以在腳本中複寫 Variant 類別的 ``_iter_init``、"
"``_iter_next`` 與 ``_iter_get`` 方法來自訂迭代器。以下是正向迭代器的範例："

msgid "And it can be used like any other iterator:"
msgstr "其用法與其他迭代器相同："

msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"請務必在 ``_iter_init`` 中重設迭代器狀態，否則巢狀 for 迴圈搭配自訂迭代器時可"
"能無法如預期運作。"

msgid "Duck typing"
msgstr "鴨子型別"

msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"從靜態型別語言轉換到動態型別語言時，最難理解的概念之一是鴨子型別。鴨子型別能"
"讓整體程式設計更簡單明瞭，但其運作邏輯並不直觀。"

msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"舉例來說，想像有顆巨石從隧道中滾下，沿路把物體都壓碎。在靜態型別語言中，巨石"
"的程式碼可能會像這樣："

msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""
"這樣一來，所有能被石頭砸碎的物件都必須繼承 Smashable。如果角色、敵人、傢俱、"
"小石頭都能被砸碎，就都要繼承 Smashable，甚至可能需要多重繼承。若不想用多重繼"
"承，只能讓它們都繼承 Entity 這種共同基底類別。但如果只有少數物件會被砸碎，為"
"了這幾個去 Entity 裡加一個虛擬方法 ``smash()`` 其實不太優雅。"

msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""
"在動態型別語言裡，這壓根不是問題。鴨子型別讓你只需要在需要的物件裡定義 "
"``smash()`` 方法就好，完全不用考慮繼承、基底類別等設計。"

msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""
"就是這麼簡單。如果被大石頭撞到的物件有 smash() 方法，就會呼叫它。完全無需繼承"
"或多型。動態型別語言只在乎這個實體有沒有該方法或成員，不管它繼承自哪個類別。"
"鴨子型別的定義可以更清楚說明這一點："

msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr "*「如果我看到一隻鳥會像鴨子一樣走路、游泳和呱呱叫，我就叫牠鴨子。」*"

msgid "In this case, it translates to:"
msgstr "在這裡，可以這麼理解："

msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr "*「只要這個物件能被砸碎，不管它是什麼，把它砸碎就對了。」*"

msgid "Yes, we should call it Hulk typing instead."
msgstr "也許我們應該叫這種做法『浩克型別』才對。"

msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist, but GDScript is stricter, so checking if the function exists is "
"desirable:"
msgstr ""
"當然，也有可能被撞到的物件根本沒有 smash() 方法。有些動態型別語言（如 "
"Objective C）會自動忽略不存在的方法呼叫，但 GDScript 管得較嚴，建議先檢查該方"
"法是否存在："

msgid "Then, define that method and anything the rock touches can be smashed."
msgstr "然後，只要在你希望能被巨石砸碎的物件上定義這個方法即可。"
