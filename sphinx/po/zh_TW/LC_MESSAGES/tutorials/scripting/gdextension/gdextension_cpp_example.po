#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDExtension C++ example"
msgstr "GDExtension C++ 範例"

msgid "Introduction"
msgstr "前言"

msgid ""
"The C++ bindings for GDExtension are built on top of the C GDExtension API "
"and provide a nicer way to \"extend\" nodes and other built-in classes in "
"Godot using C++. This new system allows the extension of Godot to nearly the "
"same level as statically linked C++ modules."
msgstr ""
"GDExtension 的 C++ 綁定是建立在 C GDExtension API 之上，提供了一種更優雅的方"
"式，可以使用 C++ 來「擴充」 Godot 內建的節點與其他類別。這個新系統讓擴充 "
"Godot 幾乎能和靜態連結的 C++ 模組一樣強大。"

msgid ""
"You can download the included example in the test folder of the godot-cpp "
"repository `on GitHub <https://github.com/godotengine/godot-cpp>`__."
msgstr ""
"你可以在 GitHub 上的 `godot-cpp 倉庫 <https://github.com/godotengine/godot-"
"cpp>`__ 的 test 資料夾中下載這個範例。"

msgid "Setting up the project"
msgstr "設定專案"

msgid "There are a few prerequisites you'll need:"
msgstr "你需要先準備以下幾項："

msgid "a Godot 4 executable,"
msgstr "Godot 4 執行檔，"

msgid "a C++ compiler,"
msgstr "C++ 編譯器，"

msgid "SCons as a build tool,"
msgstr "SCons 做為建構工具，"

msgid ""
"a copy of the `godot-cpp repository <https://github.com/godotengine/godot-"
"cpp>`__."
msgstr ""
"一份 `godot-cpp 倉庫 <https://github.com/godotengine/godot-cpp>`__ 的複本。"

msgid ""
"See also :ref:`Configuring an IDE <toc-devel-configuring_an_ide>` "
"and :ref:`Compiling <toc-devel-compiling>` as the build tools are identical "
"to the ones you need to compile Godot from source."
msgstr ""
"另請參閱 :ref:`設定 IDE <toc-devel-configuring_an_ide>` 與 :ref:`編譯 <toc-"
"devel-compiling>`，因為這些建構工具與從原始碼編譯 Godot 使用的工具相同。"

msgid ""
"You can download the `godot-cpp repository <https://github.com/godotengine/"
"godot-cpp>`__ from GitHub or let Git do the work for you. Note that this "
"repository has different branches for different versions of Godot. "
"GDExtensions will not work in older versions of Godot (only Godot 4 and up) "
"and vice versa, so make sure you download the correct branch."
msgstr ""
"你可以從 GitHub 下載 `godot-cpp 倉庫 <https://github.com/godotengine/godot-"
"cpp>`__，或用 Git 指令自動抓取。請注意，這個倉庫針對不同的 Godot 版本有不同分"
"支。GDExtension 僅支援 Godot 4 及以上版本，且不同版本之間不相容，所以請務必下"
"載正確的分支。"

msgid ""
"To use `GDExtension <https://godotengine.org/article/introducing-gd-"
"extensions>`__ you need to use the godot-cpp branch that matches the version "
"of Godot that you are targeting. For example, if you're targeting Godot 4.1, "
"use the ``4.1`` branch. Throughout this tutorial we use ``4.x``, which will "
"need to be replaced with the version of Godot you are targeting."
msgstr ""
"要使用 `GDExtension <https://godotengine.org/article/introducing-gd-"
"extensions>`__，你必須使用與目標 Godot 版本相符的 godot-cpp 分支。例如，如果"
"你的目標是 Godot 4.1，請使用 ``4.1`` 分支。本教學以 ``4.x`` 為例，實際操作時"
"請依你的目標版本替換分支名稱。"

msgid ""
"The ``master`` branch is the development branch which is updated regularly "
"to work with Godot's ``master`` branch."
msgstr ""
"``master`` 分支是開發中的分支，會定期與 Godot 的 ``master`` 分支同步更新。"

msgid ""
"Our long-term goal is that GDExtensions targeting an earlier version of "
"Godot will work in later minor versions, but not vice-versa. For example, a "
"GDExtension targeting Godot 4.1 should work just fine in Godot 4.2, but one "
"targeting Godot 4.2 won't work in Godot 4.1."
msgstr ""
"我們的長期目標是，針對較舊 Godot 版本開發的 GDExtension 能在更新的小版本上正"
"常運作，反之則不行。例如，為 Godot 4.1 開發的 GDExtension 應可在 Godot 4.2 使"
"用，但為 Godot 4.2 開發的 GDExtension 不會在 4.1 運作。"

msgid ""
"However, GDExtension is currently *experimental*, which means that we may "
"break compatibility in order to fix major bugs or include critical features. "
"For example, GDExtensions created for Godot 4.0 aren't compatible with Godot "
"4.1 (see :ref:`updating_your_gdextension_for_godot_4_1`)."
msgstr ""
"不過，GDExtension 目前屬於*實驗性*功能，未來若需修正重大錯誤或加入關鍵功能，"
"仍有可能破壞相容性。例如，針對 Godot 4.0 製作的 GDExtension 無法在 Godot 4.1 "
"使用（詳情見 :ref:`updating_your_gdextension_for_godot_4_1`）。"

msgid ""
"If you are versioning your project using Git, it is recommended to add it as "
"a Git submodule:"
msgstr "如果你有用 Git 進行專案版本管理，建議將它加為 Git 子模組："

msgid "Alternatively, you can also clone it to the project folder:"
msgstr "你也可以直接將它 clone 到專案目錄下："

msgid ""
"If you decide to download the repository or clone it into your folder, make "
"sure to keep the folder layout the same as we've setup here. Much of the "
"code we'll be showcasing here assumes the project has this layout."
msgstr ""
"如果你選擇直接下載或 clone 倉庫到資料夾，請務必保持資料夾結構與本教學一致，因"
"為後續範例程式碼都假設你的專案有這樣的結構。"

msgid ""
"If you cloned the example from the link specified in the introduction, the "
"submodules are not automatically initialized. You will need to execute the "
"following commands:"
msgstr ""
"如果你是從前面介紹的連結 clone 範例，子模組預設並不會自動初始化，你需要手動執"
"行以下指令："

msgid "This will initialize the repository in your project folder."
msgstr "這會在你的專案資料夾中初始化所需的子模組。"

msgid "Building the C++ bindings"
msgstr "建構 C++ 綁定"

msgid ""
"Now that we've downloaded our prerequisites, it is time to build the C++ "
"bindings."
msgstr "先決條件都備齊後，接下來開始建構 C++ 綁定。"

msgid ""
"The repository contains a copy of the metadata for the current Godot "
"release, but if you need to build these bindings for a newer version of "
"Godot, call the Godot executable:"
msgstr ""
"倉庫裡包含了目前 Godot 版本的中繼資料副本，但如果你要針對較新版本建構綁定，請"
"用 Godot 執行檔產生："

msgid ""
"The resulting ``extension_api.json`` file will be created in the "
"executable's directory. Copy it to the project folder and add "
"``custom_api_file=<PATH_TO_FILE>`` to the scons command below."
msgstr ""
"產生的 ``extension_api.json`` 會出現在執行檔所在資料夾。請將它複製到專案資料"
"夾，並在下方 scons 指令中加上 ``custom_api_file=<檔案路徑>``。"

msgid ""
"To generate and compile the bindings, use this command (replacing "
"``<platform>`` with ``windows``, ``linux`` or ``macos`` depending on your "
"OS):"
msgstr ""
"要產生並編譯綁定，請使用下列指令（依你的作業系統將 ``<platform>`` 替換為 "
"``windows``、``linux`` 或 ``macos``）："

msgid ""
"The build process automatically detects the number of CPU threads to use for "
"parallel builds. To specify a number of CPU threads to use, add ``-jN`` at "
"the end of the SCons command line where ``N`` is the number of CPU threads "
"to use."
msgstr ""
"建構過程會自動偵測可用的 CPU 執行緒數量以進行平行建構。若要自訂執行緒數，可"
"在 SCons 指令結尾加上 ``-jN``，其中 N 是你想使用的執行緒數。"

msgid ""
"This step will take a while. When it is completed, you should have static "
"libraries that can be compiled into your project stored in ``godot-cpp/bin/"
"``."
msgstr ""
"這個步驟會花一點時間。完成後，你會在 ``godot-cpp/bin/`` 看到可供專案編譯連結"
"的靜態函式庫。"

msgid "You may need to add ``bits=64`` to the command on Windows or Linux."
msgstr "在 Windows 或 Linux 下可能要在指令後加上 ``bits=64``。"

msgid "Creating a simple plugin"
msgstr "建立簡單外掛"

msgid ""
"Now it's time to build an actual plugin. We'll start by creating an empty "
"Godot project in which we'll place a few files."
msgstr ""
"現在來實作一個真正的外掛。我們將先建立一個空的 Godot 專案，並在裡面放入一些檔"
"案。"

msgid ""
"Open Godot and create a new project. For this example, we will place it in a "
"folder called ``demo`` inside our GDExtension's folder structure."
msgstr ""
"開啟 Godot，建立一個新專案。這裡我們會將專案放在 GDExtension 資料夾結構下的 "
"``demo`` 資料夾中。"

msgid ""
"In our demo project, we'll create a scene containing a Node called \"Main\" "
"and we'll save it as ``main.tscn``. We'll come back to that later."
msgstr ""
"在 demo 專案裡，建立一個名為「Main」的節點並儲存為 ``main.tscn`` 場景。我們稍"
"後會再回來用到它。"

msgid ""
"Back in the top-level GDExtension module folder, we're also going to create "
"a subfolder called ``src`` in which we'll place our source files."
msgstr ""
"回到 GDExtension 模組的根目錄，再建立一個名為 ``src`` 的子資料夾，這之後會用"
"來放我們的原始碼檔案。"

msgid ""
"You should now have ``demo``, ``godot-cpp``, and ``src`` directories in your "
"GDExtension module."
msgstr ""
"你的 GDExtension 模組目錄下，現在應該有 ``demo``、``godot-cpp`` 和 ``src`` 三"
"個資料夾。"

msgid "Your folder structure should now look like this:"
msgstr "目前的資料夾結構應該長這樣："

msgid ""
"In the ``src`` folder, we'll start with creating our header file for the "
"GDExtension node we'll be creating. We will name it ``gdexample.h``:"
msgstr ""
"在 ``src`` 資料夾下，先建立我們要用來擴充的 GDExtension 節點的標頭檔，我們把"
"它命名為 ``gdexample.h``："

msgid "gdextension_cpp_example/src/gdexample.h"
msgstr "gdextension_cpp_example/src/gdexample.h"

msgid ""
"There are a few things of note to the above. We include ``sprite2d.hpp`` "
"which contains bindings to the Sprite2D class. We'll be extending this class "
"in our module."
msgstr ""
"上面程式碼有幾點要注意。我們引入了 ``sprite2d.hpp``，這個檔案包含對 Sprite2D "
"類的綁定。我們會以這個類別做為擴充的基礎。"

msgid ""
"We're using the namespace ``godot``, since everything in GDExtension is "
"defined within this namespace."
msgstr ""
"我們使用 ``godot`` 命名空間，因為 GDExtension 所有內容都定義在此命名空間中。"

msgid ""
"Then we have our class definition, which inherits from our Sprite2D through "
"a container class. We'll see a few side effects of this later on. The "
"``GDCLASS`` macro sets up a few internal things for us."
msgstr ""
"接下來是類別定義，這裡我們透過容器類別繼承自 Sprite2D。``GDCLASS`` 巨集會幫我"
"們處理一些必要的內部註冊。"

msgid "After that, we declare a single member variable called ``time_passed``."
msgstr "接著宣告了一個名為 ``time_passed`` 的成員變數。"

msgid ""
"In the next block we're defining our methods, we have our constructor and "
"destructor defined, but there are two other functions that will likely look "
"familiar to some, and one new method."
msgstr ""
"在接下來的方法區塊中，除了建構子和解構子，還有兩個你可能很熟悉的方法，另外還"
"有一個新方法。"

msgid ""
"The first is ``_bind_methods``, which is a static function that Godot will "
"call to find out which methods can be called and which properties it "
"exposes. The second is our ``_process`` function, which will work exactly "
"the same as the ``_process`` function you're used to in GDScript."
msgstr ""
"第一個是 ``_bind_methods``，Godot 會呼叫這個靜態方法來註冊可以被呼叫的方法和"
"屬性。第二個是 ``_process``，它的功能就跟你在 GDScript 使用的 ``_process`` 一"
"樣。"

msgid "Let's implement our functions by creating our ``gdexample.cpp`` file:"
msgstr "接下來，實作這些方法並建立 ``gdexample.cpp`` 檔案："

msgid "gdextension_cpp_example/src/gdexample.cpp"
msgstr "gdextension_cpp_example/src/gdexample.cpp"

msgid ""
"This one should be straightforward. We're implementing each method of our "
"class that we defined in our header file."
msgstr "這部分很直接，就是把我們在標頭檔定義的每個方法實作出來。"

msgid ""
"Note our ``_process`` function, which keeps track of how much time has "
"passed and calculates a new position for our sprite using a sine and cosine "
"function."
msgstr ""
"請注意 ``_process`` 方法，它會累計經過的時間，並用正弦、餘弦計算新的精靈位"
"置。"

msgid ""
"There is one more C++ file we need; we'll name it ``register_types.cpp``. "
"Our GDExtension plugin can contain multiple classes, each with their own "
"header and source file like we've implemented ``GDExample`` up above. What "
"we need now is a small bit of code that tells Godot about all the classes in "
"our GDExtension plugin."
msgstr ""
"我們還需要另外一個 C++ 檔案，命名為 ``register_types.cpp``。一個 GDExtension "
"外掛可以有多個類別，每個類別有自己的標頭和原始檔，像前面那樣實作 "
"``GDExample``。現在我們需要一小段程式碼告訴 Godot 外掛裡有哪些類別。"

msgid "gdextension_cpp_example/src/register_types.cpp"
msgstr "gdextension_cpp_example/src/register_types.cpp"

msgid ""
"The ``initialize_example_module`` and ``uninitialize_example_module`` "
"functions get called respectively when Godot loads our plugin and when it "
"unloads it. All we're doing here is parse through the functions in our "
"bindings module to initialize them, but you might have to set up more things "
"depending on your needs. We call the ``GDREGISTER_RUNTIME_CLASS`` macro for "
"each of our classes in our library. This will make them run only in game, "
"like the default for GDScript."
msgstr ""
"Godot 載入外掛時會呼叫 ``initialize_example_module``，解除安裝時則呼叫 "
"``uninitialize_example_module``。這邊我們只做初始化綁定模組，依需求你也可以設"
"定其他內容。對於每個類別都要呼叫 ``GDREGISTER_RUNTIME_CLASS`` 巨集，代表它們"
"只會在遊戲執行時註冊，這與 GDScript 預設行為相同。"

msgid ""
"The important function is the third function called "
"``example_library_init``. We first call a function in our bindings library "
"that creates an initialization object. This object registers the "
"initialization and termination functions of the GDExtension. Furthermore, it "
"sets the level of initialization (core, servers, scene, editor, level)."
msgstr ""
"第三個函式 ``example_library_init`` 很重要。我們會先呼叫綁定庫的初始化函式來"
"建立初始化物件，這個物件會註冊 GDExtension 的初始化與終結函式，也能設定初始化"
"階段（如 core、servers、scene、editor、level）。"

msgid ""
"At last, we need the header file for the ``register_types.cpp`` named "
"``register_types.h``."
msgstr ""
"最後，還需要為 ``register_types.cpp`` 建立標頭檔 ``register_types.h``。"

msgid "gdextension_cpp_example/src/register_types.h"
msgstr "gdextension_cpp_example/src/register_types.h"

msgid "Compiling the plugin"
msgstr "編譯外掛"

msgid ""
"To compile the project we need to define how SCons using should compile it "
"using a ``SConstruct`` file which references the one in ``godot-cpp``. "
"Writing it from scratch is outside the scope of this tutorial, but you "
"can :download:`the SConstruct file we prepared <files/cpp_example/"
"SConstruct>`. We'll cover a more customizable, detailed example on how to "
"use these build files in a subsequent tutorial."
msgstr ""
"要編譯這個專案，我們必須寫一個 ``SConstruct`` 檔案來指示 SCons 如何建構，並參"
"照 ``godot-cpp`` 內的 SConstruct。從頭撰寫超出本教學範圍，你可以直"
"接 :download:`下載我們準備好的 SConstruct <files/cpp_example/SConstruct>`。更"
"細節與自訂的建構方式，會在後續教學補充。"

msgid ""
"This ``SConstruct`` file was written to be used with the latest ``godot-"
"cpp`` master, you may need to make small changes using it with older "
"versions or refer to the ``SConstruct`` file in the Godot 4.x documentation."
msgstr ""
"這個 ``SConstruct`` 檔案是針對最新的 ``godot-cpp`` master 分支撰寫的，如要與"
"舊版搭配使用，可能需做些微調整或參考 Godot 4.x 文件的 SConstruct 範例。"

msgid ""
"Once you've downloaded the ``SConstruct`` file, place it in your GDExtension "
"folder structure alongside ``godot-cpp``, ``src`` and ``demo``, then run:"
msgstr ""
"下載好 ``SConstruct`` 檔案後，請將它放在 GDExtension 目錄下，跟 ``godot-"
"cpp``、``src`` 和 ``demo`` 目錄同一層，然後執行："

msgid "You should now be able to find the module in ``demo/bin/<platform>``."
msgstr "此時你應該可以在 ``demo/bin/<platform>`` 下找到編譯出來的模組。"

msgid ""
"When building for iOS, package the module as a static `.xcframework`, you "
"can use following commands to do so:"
msgstr ""
"若要為 iOS 編譯，需將模組包裝成靜態 `.xcframework`，可以用以下指令完成："

msgid ""
"Here, we've compiled both godot-cpp and our gdexample library as debug "
"builds. For optimized builds, you should compile them using the "
"``target=template_release`` switch."
msgstr ""
"此範例同時將 godot-cpp 和 gdexample 函式庫都編譯為 debug 版本。若要釋出版或最"
"佳化，請將指令加上 ``target=template_release`` 參數。"

msgid "Using the GDExtension module"
msgstr "使用 GDExtension 模組"

msgid ""
"Before we jump back into Godot, we need to create one more file in ``demo/"
"bin/``."
msgstr "回到 Godot 之前，還需在 ``demo/bin/`` 新增一個檔案。"

msgid ""
"This file lets Godot know what dynamic libraries should be loaded for each "
"platform and the entry function for the module. It is called "
"``gdexample.gdextension``."
msgstr ""
"這個檔案讓 Godot 知道要針對各平台載入哪些動態函式庫，以及模組的進入點。名稱"
"為 ``gdexample.gdextension``。"

msgid ""
"The ``libraries`` section is the important bit: it tells Godot the location "
"of the dynamic library in the project's filesystem for each supported "
"platform. It will also result in *just* that file being exported when you "
"export the project, which means the data pack won't contain libraries that "
"are incompatible with the target platform."
msgstr ""
"``libraries`` 區段很重要：它會告訴 Godot 每個支援平台下動態函式庫的路徑。這也"
"確保你匯出專案時只會包含目標平台需要的函式庫，不會把不相容的函式庫一併打包。"

msgid ""
"Finally, the ``dependencies`` section allows you to name additional dynamic "
"libraries that should be included as well. This is important when your "
"GDExtension plugin implements someone else's library and requires you to "
"supply a third-party dynamic library with your project."
msgstr ""
"最後，``dependencies`` 區段可讓你指定其他需要一併包含的動態函式庫。當你的 "
"GDExtension 外掛依賴第三方函式庫時，這部分就很重要。"

msgid "Here is another overview to check the correct file structure:"
msgstr "以下是正確檔案結構的總覽："

msgid ""
"Time to jump back into Godot. We load up the main scene we created way back "
"in the beginning and now add a newly available GDExample node to the scene:"
msgstr ""
"現在可以回到 Godot。請打開一開始建立的主場景，並新增一個 GDExample 節點到場景"
"中："

msgid ""
"We're going to assign the Godot logo to this node as our texture, disable "
"the ``centered`` property:"
msgstr "我們將 Godot 標誌指定為這個節點的紋理，並將 ``centered`` 屬性關閉："

msgid "We're finally ready to run the project:"
msgstr "現在一切就緒，可以執行專案了："

msgid "Adding properties"
msgstr "新增屬性"

msgid ""
"GDScript allows you to add properties to your script using the ``export`` "
"keyword. In GDExtension you have to register the properties with a getter "
"and setter function or directly implement the ``_get_property_list``, "
"``_get`` and ``_set`` methods of an object (but that goes far beyond the "
"scope of this tutorial)."
msgstr ""
"GDScript 可以用 ``export`` 關鍵字讓腳本有可編輯屬性。在 GDExtension 則需用 "
"getter 和 setter 方法註冊屬性，或直接實作物件的 ``_get_property_list``、"
"``_get``、``_set`` 方法（但這屬進階內容，不在本教學範圍）。"

msgid ""
"Lets add a property that allows us to control the amplitude of our wave."
msgstr "現在我們來新增一個屬性，讓我們可以調整波動的振幅。"

msgid ""
"In our ``gdexample.h`` file we need to add a member variable and getter and "
"setter functions:"
msgstr "在 ``gdexample.h`` 檔案中，新增一個成員變數及 getter/setter 方法："

msgid ""
"In our ``gdexample.cpp`` file we need to make a number of changes, we will "
"only show the methods we end up changing, don't remove the lines we're "
"omitting:"
msgstr ""
"在 ``gdexample.cpp`` 中也需做一些變動，以下只列出有異動的方法，未提及的行請勿"
"移除："

msgid ""
"Once you compile the module with these changes in place, you will see that a "
"property has been added to our interface. You can now change this property "
"and when you run your project, you will see that our Godot icon travels "
"along a larger figure."
msgstr ""
"將這些變動編譯完成後，就會看到介面多了一個屬性。你可以隨時調整它，執行專案時 "
"Godot 圖示就會隨之變動軌跡幅度。"

msgid ""
"Let's do the same but for the speed of our animation and use a setter and "
"getter function. Our ``gdexample.h`` header file again only needs a few more "
"lines of code:"
msgstr ""
"我們再來對動畫速度做同樣的處理，一樣用 getter 與 setter。在 ``gdexample.h`` "
"標頭檔只需再加幾行："

msgid ""
"This requires a few more changes to our ``gdexample.cpp`` file, again we're "
"only showing the methods that have changed so don't remove anything we're "
"omitting:"
msgstr ""
"``gdexample.cpp`` 檔案還要再做幾個小改動，以下只列出異動的部份，其餘請保留原"
"本內容："

msgid ""
"Now when the project is compiled, we'll see another property called speed. "
"Changing its value will make the animation go faster or slower. Furthermore, "
"we added a property range which describes in which range the value can be. "
"The first two arguments are the minimum and maximum value and the third is "
"the step size."
msgstr ""
"這樣編譯後你會看到介面多一個 speed 屬性。調整它就能改變動畫快慢。此外，我們還"
"加上了屬性範圍，前兩個參數為最小與最大值，第三個為步進值。"

msgid ""
"For simplicity, we've only used the hint_range of the property method. There "
"are a lot more options to choose from. These can be used to further "
"configure how properties are displayed and set on the Godot side."
msgstr ""
"這裡我們只用到 property 方法的 hint_range 屬性。事實上還有更多選項可以自訂屬"
"性在 Godot 裡的顯示與設定方式。"

msgid "Signals"
msgstr "訊號"

msgid ""
"Last but not least, signals fully work in GDExtension as well. Having your "
"extension react to a signal given out by another object requires you to call "
"``connect`` on that object. We can't think of a good example for our "
"wobbling Godot icon, we would need to showcase a far more complete example."
msgstr ""
"最後，GDExtension 也完整支援訊號。如果想讓你的擴充對其他物件發出的訊號有反"
"應，須先對該物件呼叫 ``connect``。我們的 Godot 圖示搖擺例子不太適合這種情境，"
"如果要示範需要更完整的範例。"

msgid "This is the required syntax:"
msgstr "語法如下："

msgid ""
"To connect our signal ``the_signal`` from some other node with our method "
"``my_method``, we need to provide the ``connect`` method with the name of "
"the signal and a ``Callable``. The ``Callable`` holds information about an "
"object on which a method can be called. In our case, it associates our "
"current object instance ``this`` with the method ``my_method`` of the "
"object. Then the ``connect`` method will add this to the observers of "
"``the_signal``. Whenever ``the_signal`` is now emitted, Godot knows which "
"method of which object it needs to call."
msgstr ""
"要將某個節點的 ``the_signal`` 訊號連結到我們的 ``my_method`` 方法，需在 "
"``connect`` 方法中指定訊號名稱與一個 ``Callable``。``Callable`` 持有待呼叫方"
"法的物件資訊。本例中，它把目前物件實例 ``this`` 與 ``my_method`` 方法綁定，之"
"後 ``connect`` 會將這個 Callable 加入 ``the_signal`` 的觀察者。每當 "
"``the_signal`` 發射時，Godot 就知道要呼叫對應物件的方法。"

msgid ""
"Note that you can only call ``my_method`` if you've previously registered it "
"in your ``_bind_methods`` method. Otherwise Godot will not know about the "
"existence of ``my_method``."
msgstr ""
"請注意，只有在你事先於 ``_bind_methods`` 註冊過 ``my_method``，Godot 才會知道"
"這個方法的存在，才能將訊號連結過來。"

msgid ""
"To learn more about ``Callable``, check out the class reference "
"here: :ref:`Callable <class_Callable>`."
msgstr ""
"如需更多 ``Callable`` 相關資訊，請參考類別文件：:ref:`Callable "
"<class_Callable>`。"

msgid ""
"Having your object sending out signals is more common. For our wobbling "
"Godot icon, we'll do something silly just to show how it works. We're going "
"to emit a signal every time a second has passed and pass the new location "
"along."
msgstr ""
"讓你的物件發出訊號也是很常見的需求。這裡我們用搖擺的 Godot 圖示作為例子，每過"
"一秒就發出一個訊號並傳送新的座標。"

msgid ""
"In our ``gdexample.h`` header file, we need to define a new member "
"``time_emit``:"
msgstr "在 ``gdexample.h`` 標頭檔加上新的成員變數 ``time_emit``："

msgid ""
"This time, the changes in ``gdexample.cpp`` are more elaborate. First, "
"you'll need to set ``time_emit = 0.0;`` in either our ``_init`` method or in "
"our constructor. We'll look at the other 2 needed changes one by one."
msgstr ""
"這次 ``gdexample.cpp`` 的變更較多。首先，要在 ``_init`` 方法或建構子裡設定 "
"``time_emit = 0.0`` 。剩下兩項修改我們分開說明。"

msgid ""
"In our ``_bind_methods`` method, we need to declare our signal. This is done "
"as follows:"
msgstr "在 ``_bind_methods`` 方法中要註冊我們的訊號，範例如下："

msgid ""
"Here, our ``ADD_SIGNAL`` macro can be a single call with a ``MethodInfo`` "
"argument. ``MethodInfo``'s first parameter will be the signal's name, and "
"its remaining parameters are ``PropertyInfo`` types which describe the "
"essentials of each of the method's parameters. ``PropertyInfo`` parameters "
"are defined with the data type of the parameter, and then the name that the "
"parameter will have by default."
msgstr ""
"``ADD_SIGNAL`` 巨集的參數是 ``MethodInfo``。第一個參數為訊號名稱，後續每個參"
"數都是 ``PropertyInfo``，描述訊號會帶入的資料型別與名稱。"

msgid ""
"So here, we add a signal, with a ``MethodInfo`` which names the signal "
"\"position_changed\". The ``PropertyInfo`` parameters describe two essential "
"arguments, one of type ``Object``, the other of type ``Vector2``, "
"respectively named \"node\" and \"new_pos\"."
msgstr ""
"這裡我們新增一個名為 \"position_changed\" 的訊號，有兩個參數：一個是 Object "
"型別叫做 \"node\"，另一個是 Vector2 型別叫做 \"new_pos\"。"

msgid "Next, we'll need to change our ``_process`` method:"
msgstr "接下來修改 ``_process`` 方法："

msgid ""
"After a second has passed, we emit our signal and reset our counter. We can "
"add our parameter values directly to ``emit_signal``."
msgstr ""
"每經過一秒，就發送訊號並重設計時器。我們可以直接把參數丟給 ``emit_signal``。"

msgid ""
"Once the GDExtension library is compiled, we can go into Godot and select "
"our sprite node. In the **Node** dock, we can find our new signal and link "
"it up by pressing the **Connect** button or double-clicking the signal. "
"We've added a script on our main node and implemented our signal like this:"
msgstr ""
"編譯好 GDExtension 後，回到 Godot 選取精靈節點，在 **節點** 面板就會看到剛剛"
"新增的訊號，可以按 **連接** 或直接點兩下連結。主節點加上一個腳本後，訊號可以"
"這樣處理："

msgid "Every second, we output our position to the console."
msgstr "每過一秒，我們就會將座標輸出到主控台。"

msgid "Next steps"
msgstr "下一步"

msgid ""
"We hope the above example showed you the basics. You can build upon this "
"example to create full-fledged scripts to control nodes in Godot using C++."
msgstr ""
"希望以上範例能讓你掌握基本運作流程。你可以在這基礎上開發完整的 C++ 腳本來控"
"制 Godot 的節點。"
