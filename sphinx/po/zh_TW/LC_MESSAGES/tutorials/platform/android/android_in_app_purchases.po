#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Android in-app purchases"
msgstr "Android 應用程式內購"

msgid ""
"Godot offers a first-party ``GodotGooglePlayBilling`` Android plugin "
"compatible with Godot 4 which uses the `Google Play Billing library <https://"
"developer.android.com/google/play/billing>`_."
msgstr ""
"Godot 提供官方的 ``GodotGooglePlayBilling`` Android 外掛程式，支援 Godot 4，"
"並使用 `Google Play Billing 函式庫 <https://developer.android.com/google/"
"play/billing>`_。"

msgid "Usage"
msgstr "用法"

msgid "Getting started"
msgstr "入門"

msgid ""
"Make sure you have enabled and successfully set up :ref:`Android Gradle "
"Builds <doc_android_gradle_build>`. Follow the compiling instructions on the "
"``GodotGooglePlayBilling`` `github page <https://github.com/godotengine/"
"godot-google-play-billing>`__."
msgstr ""
"請確保你已啟用並正確設定 :ref:`Android Gradle 建置 "
"<doc_android_gradle_build>`。接著請依照 ``GodotGooglePlayBilling`` 的 "
"`GitHub 頁面 <https://github.com/godotengine/godot-google-play-billing>`__ 上"
"的編譯說明操作。"

msgid ""
"Then put the files `./godot-google-play-billing/build/outputs/aar/"
"GodotGooglePlayBilling.***.release.aar` and `./GodotGooglePlayBilling.gdap` "
"into your project in the `res://android/plugins` folder."
msgstr ""
"然後，將 `./godot-google-play-billing/build/outputs/aar/"
"GodotGooglePlayBilling.***.release.aar` 與 `./GodotGooglePlayBilling.gdap` 兩"
"個檔案放入專案的 `res://android/plugins` 資料夾中。"

msgid ""
"The plugin should now show up in the Android export settings, where you can "
"enable it."
msgstr "此外掛程式現在應會顯示於 Android 匯出設定中，並可在此啟用。"

msgid "Initialize the plugin"
msgstr "初始化外掛程式"

msgid "To use the ``GodotGooglePlayBilling`` API:"
msgstr "要使用 ``GodotGooglePlayBilling`` API："

msgid "Obtain a reference to the ``GodotGooglePlayBilling`` singleton"
msgstr "取得 ``GodotGooglePlayBilling`` 單例的參考"

msgid "Connect handlers for the plugin signals"
msgstr "連接外掛的訊號處理器"

msgid "Call ``startConnection``"
msgstr "呼叫 ``startConnection``"

msgid "Initialization example:"
msgstr "初始化範例："

msgid ""
"The API must be in a connected state prior to use. The ``connected`` signal "
"is sent when the connection process succeeds. You can also use ``isReady()`` "
"to determine if the plugin is ready for use. The ``getConnectionState()`` "
"function returns the current connection state of the plugin."
msgstr ""
"API 必須在連線狀態下才能使用。當連線成功時，會發送 ``connected`` 訊號。你也可"
"以使用 ``isReady()`` 判斷外掛是否可用。``getConnectionState()`` 函式會回傳外"
"掛目前的連線狀態。"

msgid "Return values for ``getConnectionState()``:"
msgstr "``getConnectionState()`` 的回傳值："

msgid "Query available items"
msgstr "查詢可購買項目"

msgid ""
"Once the API has connected, query SKUs using ``querySkuDetails()``. You must "
"successfully complete an SKU query before calling the ``purchase()`` or "
"``queryPurchases()`` functions, or they will return an error. "
"``querySkuDetails()`` takes two parameters: an array of SKU name strings, "
"and a string specifying the type of SKU being queried. The SKU type string "
"should be ``\"inapp\"`` for normal in-app purchases or ``\"subs\"`` for "
"subscriptions. The name strings in the array should match the SKU product "
"ids defined in the Google Play Console entry for your app."
msgstr ""
"API 連線後，請使用 ``querySkuDetails()`` 查詢 SKU。在呼叫 ``purchase()`` 或 "
"``queryPurchases()`` 前，必須先成功查詢 SKU，否則會回傳錯誤。"
"``querySkuDetails()`` 有兩個參數：SKU 名稱字串陣列，以及 SKU 類型字串。SKU 類"
"型字串若為一般應用內購買請用 ``\"inapp\"``，若為訂閱請用 ``\"subs\"``。陣列中"
"的名稱必須與 Google Play Console 你 App 設定的 SKU 產品 ID 一致。"

msgid "Example use of ``querySkuDetails()``:"
msgstr "``querySkuDetails()`` 的使用範例："

msgid "Query user purchases"
msgstr "查詢用戶購買紀錄"

msgid ""
"To retrieve a user's purchases, call the ``queryPurchases()`` function "
"passing a string with the type of SKU to query. The SKU type string should "
"be ``\"inapp\"`` for normal in-app purchases or ``\"subs\"`` for "
"subscriptions. The ``query_purchases_response`` signal is sent with the "
"result. The signal has a single parameter: a :ref:`Dictionary "
"<class_Dictionary>` with a status code and either an array of purchases or "
"an error message. Only active subscriptions and non-consumed one-time "
"purchases are included in the purchase array."
msgstr ""
"要取得用戶的購買紀錄，請呼叫 ``queryPurchases()``，並傳入要查詢的 SKU 類型字"
"串。一般應用程式內購買請用 ``\"inapp\"``，訂閱請用 ``\"subs\"``。查詢結果會透"
"過 ``query_purchases_response`` 訊號傳回。該訊號僅有一個參數：一"
"個 :ref:`Dictionary <class_Dictionary>`，內含狀態碼與購買項目陣列或錯誤訊息。"
"僅包含有效訂閱與尚未消耗的一次性購買。"

msgid "Example use of ``queryPurchases()``:"
msgstr "``queryPurchases()`` 的使用範例："

msgid ""
"You should query purchases during startup after successfully retrieving SKU "
"details. Since the user may make a purchase or resolve a pending transaction "
"from outside your app, you should recheck for purchases when resuming from "
"the background. To accomplish this, you can use the ``billing_resume`` "
"signal."
msgstr ""
"在成功取得 SKU 詳細資訊後，建議於應用程式啟動時查詢購買紀錄。由於使用者可能會"
"在 App 以外的地方進行購買或處理待完成交易，因此應於從背景回到前景時再次查詢購"
"買。你可以利用 ``billing_resume`` 訊號來處理此情境。"

msgid "Example use of ``billing_resume``:"
msgstr "``billing_resume`` 的使用範例："

msgid ""
"For more information on processing the purchase items returned by "
"``queryPurchases()``, see `Processing a purchase item`_"
msgstr ""
"關於處理 ``queryPurchases()`` 回傳的購買項目，請參閱下方 `處理購買項目`_ 章節"

msgid "Purchase an item"
msgstr "購買項目"

msgid ""
"To initiate the purchase flow for an item, call ``purchase()`` passing the "
"product id string of the SKU you wish to purchase. Reminder: you **must** "
"query the SKU details for an item before you can pass it to ``purchase()``."
msgstr ""
"若要啟動購買流程，請呼叫 ``purchase()`` 並傳入要購買 SKU 的產品 ID。提醒： **"
"必須** 先查詢該 SKU 詳細資訊後，才能傳給 ``purchase()``。"

msgid "Example use of ``purchase()``:"
msgstr "``purchase()`` 的使用範例："

msgid ""
"The payment flow will send a ``purchases_updated`` signal on success or a "
"``purchase_error`` signal on failure."
msgstr ""
"購買流程完成時，成功會發送 ``purchases_updated`` 訊號，失敗則會發送 "
"``purchase_error`` 訊號。"

msgid "Processing a purchase item"
msgstr "處理購買項目"

msgid ""
"The ``query_purchases_response`` and ``purchases_updated`` signals provide "
"an array of purchases in :ref:`Dictionary <class_Dictionary>` format. The "
"purchase Dictionary includes keys that map to values of the Google Play "
"Billing `Purchase <https://developer.android.com/reference/com/android/"
"billingclient/api/Purchase>`_ class."
msgstr ""
"``query_purchases_response`` 與 ``purchases_updated`` 訊號會提供一個包含多筆"
"購買紀錄的 :ref:`Dictionary <class_Dictionary>` 陣列。該購買字典的鍵與 "
"Google Play Billing `Purchase <https://developer.android.com/reference/com/"
"android/billingclient/api/Purchase>`_ 類別的欄位對應。"

msgid "Purchase fields:"
msgstr "購買欄位："

msgid "Check purchase state"
msgstr "檢查購買狀態"

msgid ""
"Check the ``purchase_state`` value of a purchase to determine if a purchase "
"was completed or is still pending."
msgstr ""
"請檢查購買紀錄中的 ``purchase_state`` 欄位，以判斷該筆購買是否已完成或仍在處"
"理中。"

msgid "PurchaseState values:"
msgstr "PurchaseState 可能值："

msgid ""
"If a purchase is in a ``PENDING`` state, you should not award the contents "
"of the purchase or do any further processing of the purchase until it "
"reaches the ``PURCHASED`` state. If you have a store interface, you may wish "
"to display information about pending purchases needing to be completed in "
"the Google Play Store. For more details on pending purchases, see `Handling "
"pending transactions <https://developer.android.com/google/play/billing/"
"integrate#pending>`_ in the Google Play Billing Library documentation."
msgstr ""
"若購買處於 ``PENDING`` 狀態，請勿給予道具或進行任何後續處理，直到其進入 "
"``PURCHASED`` 狀態。如果你有商店介面，建議顯示提示告知用戶需至 Google Play 商"
"店完成待處理訂單。詳情請參考 Google Play Billing 文件中的 `處理待處理交易 "
"<https://developer.android.com/google/play/billing/integrate#pending>`_。"

msgid "Consumables"
msgstr "消耗品"

msgid ""
"If your in-app item is not a one-time purchase but a consumable item (e.g. "
"coins) which can be purchased multiple times, you can consume an item by "
"calling ``consumePurchase()`` passing the ``purchase_token`` value from the "
"purchase dictionary. Calling ``consumePurchase()`` automatically "
"acknowledges a purchase. Consuming a product allows the user to purchase it "
"again, it will no longer appear in subsequent ``queryPurchases()`` calls "
"unless it is repurchased."
msgstr ""
"若你的應用程式內項目為可重複購買的消耗品（例如金幣），可呼叫 "
"``consumePurchase()`` 並傳入購買字典中的 ``purchase_token`` 進行消耗。呼叫 "
"``consumePurchase()`` 會自動確認該筆購買。被消耗後，該項目不會再出現在後續的 "
"``queryPurchases()`` 查詢結果中，使用者就可以再次購買。"

msgid "Example use of ``consumePurchase()``:"
msgstr "``consumePurchase()`` 的使用範例："

msgid "Acknowledging purchases"
msgstr "確認購買"

msgid ""
"If your in-app item is a one-time purchase, you must acknowledge the "
"purchase by calling the ``acknowledgePurchase()`` function, passing the "
"``purchase_token`` value from the purchase dictionary. If you do not "
"acknowledge a purchase within three days, the user automatically receives a "
"refund, and Google Play revokes the purchase. If you are calling "
"``comsumePurchase()`` it automatically acknowledges the purchase and you do "
"not need to call ``acknowledgePurchase()``."
msgstr ""
"若你的應用程式內項目為一次性購買，必須呼叫 ``acknowledgePurchase()`` 並傳入購"
"買字典內的 ``purchase_token`` 來確認此筆交易。若三天內未確認，Google Play 會"
"自動退款並撤銷該筆購買。若已呼叫 ``consumePurchase()``，則會自動完成確認，不"
"需再次呼叫 ``acknowledgePurchase()``。"

msgid "Example use of ``acknowledgePurchase()``:"
msgstr "``acknowledgePurchase()`` 的使用範例："

msgid "Subscriptions"
msgstr "訂閱"

msgid ""
"Subscriptions work mostly like regular in-app items. Use ``\"subs\"`` as the "
"second argument to ``querySkuDetails()`` to get subscription details. Pass "
"``\"subs\"`` to ``queryPurchases()`` to get subscription purchase details."
msgstr ""
"訂閱與一般應用程式內項目操作方式相似。若要查詢訂閱 SKU 詳細資料，請於 "
"``querySkuDetails()`` 的第二個參數傳入 ``\"subs\"``。欲查詢訂閱購買紀錄，則"
"於 ``queryPurchases()`` 傳入 ``\"subs\"``。"

msgid ""
"You can check ``is_auto_renewing`` in the a subscription purchase returned "
"from ``queryPurchases()`` to see if a user has cancelled an auto-renewing "
"subscription."
msgstr ""
"你可以在 ``queryPurchases()`` 回傳的訂閱購買紀錄中，檢查 "
"``is_auto_renewing`` 欄位，以判斷使用者是否已取消自動續訂。"

msgid ""
"You need to acknowledge new subscription purchases, but not automatic "
"subscription renewals."
msgstr "新訂閱購買需進行確認，但自動續訂不需再次確認。"

msgid ""
"If you support upgrading or downgrading between different subscription "
"levels, you should use ``updateSubscription()`` to use the subscription "
"update flow to change an active subscription. Like ``purchase()``, results "
"are returned by the ``purchases_updated`` and ``purchase_error`` signals. "
"There are three parameters to ``updateSubscription()``:"
msgstr ""
"如果你的 App 支援不同訂閱等級的升級或降級，請使用 ``updateSubscription()`` 來"
"執行訂閱更新流程。其回傳結果與 ``purchase()`` 相同，皆透過 "
"``purchases_updated`` 與 ``purchase_error`` 訊號傳回。"
"``updateSubscription()`` 共需三個參數："

msgid "The purchase token of the currently active subscription"
msgstr "目前有效訂閱的購買憑證（purchase token）"

msgid "The product id string of the subscription SKU to change to"
msgstr "要更換為的新訂閱 SKU 產品 ID"

msgid "The proration mode to apply to the subscription."
msgstr "訂閱的比例分攤（proration）模式。"

msgid "The proration values are defined as:"
msgstr "比例分攤模式定義如下："

msgid "Default behavior is ``IMMEDIATE_WITH_TIME_PRORATION``."
msgstr "預設行為為 ``IMMEDIATE_WITH_TIME_PRORATION``。"

msgid "Example use of ``updateSubscription``:"
msgstr "``updateSubscription()`` 的使用範例："

msgid ""
"The ``confirmPriceChange()`` function can be used to launch price change "
"confirmation flow for a subscription. Pass the product id of the "
"subscription SKU subject to the price change. The result will be sent by the "
"``price_change_acknowledged`` signal."
msgstr ""
"``confirmPriceChange()`` 函式可用於啟動訂閱價格調整的確認流程。請傳入需調整價"
"格的訂閱 SKU 產品 ID。結果會透過 ``price_change_acknowledged`` 訊號傳回。"

msgid "Example use of ``confirmPriceChange()``:"
msgstr "``confirmPriceChange()`` 的使用範例："
