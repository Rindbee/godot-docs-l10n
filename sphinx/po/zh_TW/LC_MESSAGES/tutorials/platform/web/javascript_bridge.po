#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "The JavaScriptBridge singleton"
msgstr "JavaScriptBridge 單例物件"

msgid ""
"In web builds, the :ref:`JavaScriptBridge <class_JavaScriptBridge>` "
"singleton allows interaction with JavaScript and web browsers, and can be "
"used to implement some functionalities unique to the web platform."
msgstr ""
"在網頁專案建置時，:ref:`JavaScriptBridge <class_JavaScriptBridge>` 單例物件允"
"許與 JavaScript 及瀏覽器互動，能用於實作僅限網頁平台的特殊功能。"

msgid "Interacting with JavaScript"
msgstr "與 JavaScript 互動"

msgid ""
"Sometimes, when exporting Godot for the Web, it might be necessary to "
"interface with external JavaScript code like third-party SDKs, libraries, or "
"simply to access browser features that are not directly exposed by Godot."
msgstr ""
"有時將 Godot 匯出為網頁專案時，可能需要與外部 JavaScript 程式碼（如第三方 "
"SDK、函式庫）串接，或存取 Godot 未直接提供的瀏覽器功能。"

msgid ""
"The ``JavaScriptBridge`` singleton provides methods to wrap a native "
"JavaScript object into a Godot :ref:`JavaScriptObject "
"<class_JavaScriptObject>` that tries to feel natural in the context of Godot "
"scripting (e.g. GDScript and C#)."
msgstr ""
"``JavaScriptBridge`` 單例物件提供方法，可將原生 JavaScript 物件包裝成 Godot "
"的 :ref:`JavaScriptObject <class_JavaScriptObject>`，讓你在 GDScript 或 C# 中"
"能像操作 Godot 原生物件一樣操作它。"

msgid ""
"The :ref:`JavaScriptBridge.get_interface() "
"<class_JavaScriptBridge_method_get_interface>` method retrieves an object in "
"the global scope."
msgstr ""
":ref:`JavaScriptBridge.get_interface() "
"<class_JavaScriptBridge_method_get_interface>` 方法可取得全域作用域的物件。"

msgid ""
"The :ref:`JavaScriptBridge.create_object() "
"<class_JavaScriptBridge_method_create_object>` creates a new object via the "
"JavaScript ``new`` constructor."
msgstr ""
":ref:`JavaScriptBridge.create_object() "
"<class_JavaScriptBridge_method_create_object>` 方法會透過 JavaScript 的 "
"``new`` 建構式建立新物件。"

msgid ""
"As you can see, by wrapping JavaScript objects into ``JavaScriptObject`` you "
"can interact with them like they were native Godot objects, calling their "
"methods, and retrieving (or even setting) their properties."
msgstr ""
"如上所示，將 JavaScript 物件包裝成 ``JavaScriptObject`` 後，你就能像操作 "
"Godot 原生物件一樣呼叫其方法，存取或設定其屬性。"

msgid ""
"Base types (int, floats, strings, booleans) are automatically converted "
"(floats might lose precision when converted from Godot to JavaScript). "
"Anything else (i.e. objects, arrays, functions) are seen as "
"``JavaScriptObjects`` themselves."
msgstr ""
"基本型別（整數、浮點數、字串、布林值）會自動轉換（浮點數從 Godot 轉換到 "
"JavaScript 時可能會發生精度損失）。其他型別（如物件、陣列、函式）則會視為 "
"``JavaScriptObject``。"

msgid "Callbacks"
msgstr "回呼函式"

msgid ""
"Calling JavaScript code from Godot is nice, but sometimes you need to call a "
"Godot function from JavaScript instead."
msgstr ""
"從 Godot 呼叫 JavaScript 很方便，但有時你會需要反過來，從 JavaScript 呼叫 "
"Godot 的函式。"

msgid ""
"This case is a bit more complicated. JavaScript relies on garbage "
"collection, while Godot uses reference counting for memory management. This "
"means you have to explicitly create callbacks (which are returned as "
"``JavaScriptObjects`` themselves) and you have to keep their reference."
msgstr ""
"這種情境會較為複雜。JavaScript 使用垃圾回收（GC），而 Godot 使用參考計數來管"
"理記憶體。這代表你必須明確建立回呼函式（這些回呼會以 ``JavaScriptObject`` 回"
"傳），而且要保存其參考。"

msgid ""
"Arguments passed by JavaScript to the callback will be passed as a single "
"Godot ``Array``."
msgstr "由 JavaScript 傳遞給回呼函式的參數會以單一 Godot ``Array`` 傳入。"

msgid ""
"Callback methods created via :ref:`JavaScriptBridge.get_interface() "
"<class_JavaScriptBridge_method_get_interface>` (``_my_callback`` in the "
"above example) **must** take exactly one :ref:`Array<class_Array>` argument, "
"which is going to be the JavaScript `arguments object <https://"
"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/"
"arguments>`__ converted to an array. Otherwise, the callback method will not "
"be called."
msgstr ""
"透過 :ref:`JavaScriptBridge.get_interface() "
"<class_JavaScriptBridge_method_get_interface>` 建立的回呼方法（如上例的 "
"``_my_callback``）**必須**只接受一個 :ref:`Array<class_Array>` 參數，這個參數"
"會是 JavaScript 的 `arguments 物件 <https://developer.mozilla.org/en-US/docs/"
"Web/JavaScript/Reference/Functions/arguments>`__ 轉換成的陣列。否則該回呼方法"
"將不會被呼叫。"

msgid ""
"Here is another example that asks the user for the `Notification permission "
"<https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API>`__ and "
"waits asynchronously to deliver a notification if the permission is granted:"
msgstr ""
"以下是另一個範例，會請求使用者 `通知權限 <https://developer.mozilla.org/en-"
"US/docs/Web/API/Notifications_API>`__，若允許則會非同步送出通知："

msgid "Can I use my favorite library?"
msgstr "我可以在 Godot 使用我喜歡的 JavaScript 函式庫嗎？"

msgid ""
"You most likely can. First, you have to include your library in the page. "
"You can customize the :ref:`Head Include <doc_javascript_export_options>` "
"during export (see below), or even :ref:`write your own template "
"<doc_customizing_html5_shell>`."
msgstr ""
"通常可以。首先，你必須將函式庫加入網頁。你可以在匯出時自訂 :ref:`Head "
"Include <doc_javascript_export_options>`，或是 :ref:`撰寫自己的 HTML 範本 "
"<doc_customizing_html5_shell>`。"

msgid ""
"In the example below, we customize the ``Head Include`` to add an external "
"library (`axios <https://axios-http.com/>`__) from a content delivery "
"network, and a second ``<script>`` tag to define our own custom function:"
msgstr ""
"在下方範例中，我們自訂 ``Head Include``，從 CDN 加入外部函式庫（如 `axios "
"<https://axios-http.com/>`__），並加上一段 ``<script>`` 標籤來定義自訂函式："

msgid ""
"We can then access both the library and the function from Godot, like we did "
"in previous examples:"
msgstr "接著我們就能如同先前範例，在 Godot 內直接存取該函式庫及自訂函式："

msgid "The eval interface"
msgstr "eval 介面"

msgid ""
"The ``eval`` method works similarly to the JavaScript function of the same "
"name. It takes a string as an argument and executes it as JavaScript code. "
"This allows interacting with the browser in ways not possible with script "
"languages integrated into Godot."
msgstr ""
"``eval`` 方法的功能與 JavaScript 同名函式類似。它接受一個字串作為參數並將其作"
"為 JavaScript 程式碼執行。這讓你可以以 Godot 腳本實現 Godot 內建腳本語言無法"
"做到的瀏覽器互動。"

msgid ""
"The value of the last JavaScript statement is converted to a GDScript value "
"and returned by ``eval()`` under certain circumstances:"
msgstr ""
"特定情況下，最後一個 JavaScript 陳述式的值會轉換為 GDScript 值並由 "
"``eval()`` 回傳："

msgid "JavaScript ``number`` is returned as :ref:`class_float`"
msgstr "JavaScript ``number`` 型會以 GDScript :ref:`class_float` 回傳"

msgid "JavaScript ``boolean`` is returned as :ref:`class_bool`"
msgstr "JavaScript ``boolean`` 型會以 GDScript :ref:`class_bool` 回傳"

msgid "JavaScript ``string`` is returned as :ref:`class_String`"
msgstr "JavaScript ``string`` 型會以 GDScript :ref:`class_String` 回傳"

msgid ""
"JavaScript ``ArrayBuffer``, ``TypedArray``, and ``DataView`` are returned "
"as :ref:`PackedByteArray<class_PackedByteArray>`"
msgstr ""
"JavaScript ``ArrayBuffer``、``TypedArray`` 以及 ``DataView`` 型會"
"以 :ref:`PackedByteArray<class_PackedByteArray>` 回傳"

msgid "Any other JavaScript value is returned as ``null``."
msgstr "其他 JavaScript 值會回傳為 ``null``。"

msgid ""
"HTML5 export templates may be :ref:`built <doc_compiling_for_web>` without "
"support for the singleton to improve security. With such templates, and on "
"platforms other than HTML5, calling ``JavaScriptBridge.eval`` will also "
"return ``null``. The availability of the singleton can be checked with the "
"``web`` :ref:`feature tag <doc_feature_tags>`:"
msgstr ""
"HTML5 匯出範本可 :ref:`建置 <doc_compiling_for_web>` 為不支援該單例的版本以提"
"升安全性。若使用這類範本，或是在非 HTML5 平台，呼叫 "
"``JavaScriptBridge.eval`` 也會回傳 ``null``。可以透過 ``web`` :ref:`feature "
"tag <doc_feature_tags>` 來檢查單例是否可用："

msgid ""
"GDScript's multi-line strings, surrounded by 3 quotes ``\"\"\"`` as in "
"``my_func3()`` above, are useful to keep JavaScript code readable."
msgstr ""
"GDScript 的多行字串由三個引號 ``\"\"\"`` 包圍，如上方 ``my_func3()`` 範例所"
"示，可讓 JavaScript 程式碼更易閱讀。"

msgid ""
"The ``eval`` method also accepts a second, optional Boolean argument, which "
"specifies whether to execute the code in the global execution context, "
"defaulting to ``false`` to prevent polluting the global namespace:"
msgstr ""
"``eval`` 方法也接受第二個可選的布林參數，用於指定是否要在全域執行環境中執行程"
"式碼。預設為 ``false``，以避免污染全域命名空間："

msgid "Downloading files"
msgstr "下載檔案"

msgid ""
"Downloading files (e.g. a save game) from the Godot Web export to the user's "
"computer can be done by directly interacting with JavaScript, but given it "
"is a very common use case, Godot exposes this functionality to scripting via "
"a dedicated :ref:`JavaScriptBridge.download_buffer() "
"<class_JavaScriptBridge_method_download_buffer>` function which lets you "
"download any generated buffer."
msgstr ""
"從 Godot 網頁版下載檔案（例如存檔）到使用者電腦雖然可以直接透過 JavaScript 實"
"作，但由於這是非常常見的需求，Godot 也提供了專用"
"的 :ref:`JavaScriptBridge.download_buffer() "
"<class_JavaScriptBridge_method_download_buffer>` 方法，讓你可以直接從腳本下載"
"任何產生的緩衝區資料。"

msgid "Here is a minimal example on how to use it:"
msgstr "以下是最簡單的使用範例："

msgid "extends Node"
msgstr "extends Node"

msgid ""
"And here is a more complete example on how to download a previously saved "
"file:"
msgstr "以下則是更完整的範例，說明如何下載先前儲存的檔案："
