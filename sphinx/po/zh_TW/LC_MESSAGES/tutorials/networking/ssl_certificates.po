#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "TLS/SSL certificates"
msgstr "TLS/SSL 憑證"

msgid "Introduction"
msgstr "前言"

msgid ""
"It is often desired to use :abbr:`TLS (Transport Layer Security)` "
"connections (also known as :abbr:`SSL (Secure Sockets Layer)` connections) "
"for communications to avoid \"man in the middle\" attacks. Godot has a "
"connection wrapper, :ref:`StreamPeerTLS <class_StreamPeerTLS>`, which can "
"take a regular connection and add security around it. The :ref:`HTTPClient "
"<class_HTTPClient>` and :ref:`HTTPRequest <class_HTTPRequest>` classes also "
"support HTTPS using this same wrapper."
msgstr ""
"通常會希望使用 :abbr:`TLS (傳輸層安全)` 連線 (也稱為 :abbr:`SSL (安全通訊端"
"層)` 連線) 以避免「中間人」攻擊。Godot 有一個連線封裝器 :ref:`StreamPeerTLS "
"<class_StreamPeerTLS>`，它可以接受一個常規連線並為其增加安全"
"層。:ref:`HTTPClient <class_HTTPClient>` 和 :ref:`HTTPRequest "
"<class_HTTPRequest>` 類別也支援使用同一個封裝器的 HTTPS。"

msgid ""
"Godot will try to use the TLS certificate bundle provided by the operating "
"system, but also includes the `TLS certificate bundle from Mozilla <https://"
"github.com/godotengine/godot/blob/master/thirdparty/certs/ca-"
"certificates.crt>`__ as a fallback."
msgstr ""
"Godot 會優先使用作業系統提供的 TLS 憑證包，若無則會使用內建的 Mozilla TLS 憑"
"證（<https://github.com/godotengine/godot/blob/master/thirdparty/certs/ca-"
"certificates.crt>）。"

msgid ""
"You can alternatively force your own certificate bundle in the Project "
"Settings:"
msgstr "你也可以在專案設定裡強制指定自己的憑證包："

msgid "Setting the TLS certificate bundle override project setting"
msgstr "設定 TLS 憑證包覆蓋專案選項"

msgid ""
"When set, this file *overrides* the operating system provided bundle by "
"default. This file should contain any number of public certificates in `PEM "
"format <https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail>`__."
msgstr ""
"設定此選項時，會*覆蓋*作業系統的預設憑證包。此檔案需包含任意數量的公開憑證，"
"格式為 `PEM <https://en.wikipedia.org/wiki/Privacy-"
"enhanced_Electronic_Mail>`__。"

msgid "There are two ways to obtain certificates:"
msgstr "獲取憑證有兩種方式："

msgid "Obtain a certificate from a certificate authority"
msgstr "向憑證授權機構（CA）申請憑證"

msgid ""
"The main approach to getting a certificate is to use a certificate authority "
"(CA) such as `Let's Encrypt <https://letsencrypt.org/>`__. This is a more "
"cumbersome process than a self-signed certificate, but it's more "
"\"official\" and ensures your identity is clearly represented. The resulting "
"certificate is also trusted by applications such as web browsers, unlike a "
"self-signed certificate which requires additional configuration on the "
"client side before it's considered trusted."
msgstr ""
"最常見的做法是透過憑證授權機構（CA），如 `Let's Encrypt <https://"
"letsencrypt.org/>`__ 申請憑證。這比自簽憑證麻煩，但更「正式」，可清楚證明身"
"份。這類憑證會被主流瀏覽器等應用信任，而自簽憑證則需額外設定才會被接受。"

msgid ""
"These certificates do not require any configuration on the client to work, "
"since Godot already bundles the Mozilla certificate bundle in the editor and "
"exported projects."
msgstr ""
"這類憑證在 Godot 及其匯出專案中無需用戶端設定，因為 Godot 已內建 Mozilla 憑證"
"包。"

msgid "Generate a self-signed certificate"
msgstr "產生自簽名憑證"

msgid ""
"For most use cases, it's recommended to go through certificate authority as "
"the process is free with certificate authorities such as Let's Encrypt. "
"However, if using a certificate authority is not an option, then you can "
"generate a self-signed certificate and tell the client to consider your self-"
"signed certificate as trusted."
msgstr ""
"大多數情境建議直接用 CA（如 Let's Encrypt），因為免費又簡單。但若無法用 CA，"
"可自行產生自簽名憑證，並在用戶端信任該憑證。"

msgid ""
"To create a self-signed certificate, generate a private and public key pair "
"and add the public key (in PEM format) to the CRT file specified in the "
"Project Settings."
msgstr ""
"建立自簽名憑證時，請產生一組私鑰/公鑰，將公鑰（PEM 格式）加入專案設定中的 "
"CRT 檔。"

msgid ""
"The private key should **only** go to your server. The client must not have "
"access to it: otherwise, the security of the certificate will be compromised."
msgstr "私鑰必須**僅存放於伺服器**，切勿放入用戶端，否則憑證安全性會被破壞。"

msgid ""
"When specifying a self-signed certificate as TLS bundle in the project "
"settings, normal domain name validation is enforced via the "
"certificate :abbr:`CN (common name)` and alternative names. "
"See :ref:`TLSOptions <class_TLSOptions>` to customize domain name validation."
msgstr ""
"當你把自簽名憑證指定為 TLS 憑證包後，Godot 仍會檢查憑證的 :abbr:`CN（通用名"
"稱）` 與替代名稱以驗證網域。詳見 :ref:`TLSOptions <class_TLSOptions>` 可自訂"
"驗證規則。"

msgid ""
"For development purposes Godot can generate self-signed certificates "
"via :ref:`Crypto.generate_self_signed_certificate "
"<class_Crypto_method_generate_self_signed_certificate>`."
msgstr ""
"開發階段可用 :ref:`Crypto.generate_self_signed_certificate "
"<class_Crypto_method_generate_self_signed_certificate>` 讓 Godot 直接產生自簽"
"名憑證。"

msgid ""
"Alternatively, OpenSSL has some documentation about `generating keys "
"<https://raw.githubusercontent.com/openssl/openssl/master/doc/HOWTO/"
"keys.txt>`__ and `certificates <https://raw.githubusercontent.com/openssl/"
"openssl/master/doc/HOWTO/certificates.txt>`__."
msgstr ""
"另外也可以參考 OpenSSL 的官方文件，如 `產生金鑰 <https://"
"raw.githubusercontent.com/openssl/openssl/master/doc/HOWTO/keys.txt>`__ 和 `"
"產生憑證 <https://raw.githubusercontent.com/openssl/openssl/master/doc/HOWTO/"
"certificates.txt>`__。"
