#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making HTTP requests"
msgstr "發送 HTTP 請求"

msgid "Why use HTTP?"
msgstr "為什麼要用 HTTP？"

msgid ""
"`HTTP requests <https://developer.mozilla.org/en-US/docs/Web/HTTP>`_ are "
"useful to communicate with web servers and other non-Godot programs."
msgstr ""
"`HTTP 請求 <https://developer.mozilla.org/en-US/docs/Web/HTTP>`_ 常用於與 "
"Web 伺服器及其他非 Godot 程式溝通。"

msgid ""
"Compared to Godot's other networking features (like :ref:`High-level "
"multiplayer <doc_high_level_multiplayer>`), HTTP requests have more overhead "
"and take more time to get going, so they aren't suited for real-time "
"communication, and aren't great to send lots of small updates as is common "
"for multiplayer gameplay."
msgstr ""
"相較於 Godot 其他網路功能（如 :ref:`高階多人連線 "
"<doc_high_level_multiplayer>`），HTTP 請求有較多額外負擔、啟動較慢，因此不適"
"合即時溝通，也不適合像多人遊戲那樣頻繁傳送小量資料。"

msgid ""
"HTTP, however, offers interoperability with external web resources and is "
"great at sending and receiving large amounts of data, for example to "
"transfer files like game assets. These assets can then be loaded "
"using :ref:`runtime file loading and saving "
"<doc_runtime_loading_and_saving>`."
msgstr ""
"不過，HTTP 適合與外部 Web 資源互動，也很適合大量資料傳輸，例如交換遊戲素材"
"檔。這些檔案可以再透過 :ref:`執行時檔案讀寫 "
"<doc_runtime_loading_and_saving>` 載入。"

msgid ""
"So HTTP may be useful for your game's login system, lobby browser, to "
"retrieve some information from the web or to download game assets."
msgstr ""
"因此，HTTP 特別適合用於遊戲的登入系統、大廳清單、獲取網路資料或下載遊戲素材。"

msgid "HTTP requests in Godot"
msgstr "Godot 裡的 HTTP 請求"

msgid ""
"The :ref:`HTTPRequest <class_HTTPRequest>` node is the easiest way to make "
"HTTP requests in Godot. It is backed by the more low-level :ref:`HTTPClient "
"<class_HTTPClient>`, for which a tutorial is available :ref:`here "
"<doc_http_client_class>`."
msgstr ""
"Godot 最簡單的 HTTP 請求方式是使用 :ref:`HTTPRequest <class_HTTPRequest>` 節"
"點。底層則有 :ref:`HTTPClient <class_HTTPClient>` 類可用，相關教學可參"
"考 :ref:`這裡 <doc_http_client_class>`。"

msgid ""
"For this example, we will make an HTTP request to GitHub to retrieve the "
"name of the latest Godot release."
msgstr "以下範例將向 GitHub 發送 HTTP 請求，取得最新 Godot 版本名稱。"

msgid ""
"When exporting to **Android**, make sure to enable the **Internet** "
"permission in the Android export preset before exporting the project or "
"using one-click deploy. Otherwise, network communication of any kind will be "
"blocked by the Android OS."
msgstr ""
"匯出至 **Android** 時，請在專案匯出設定裡啟用 **Internet** 權限，否則任何網路"
"傳輸都會被 Android 系統阻擋。"

msgid "Preparing the scene"
msgstr "場景準備"

msgid ""
"Create a new empty scene, add a root :ref:`Node <class_Node>` and add a "
"script to it. Then add an :ref:`HTTPRequest <class_HTTPRequest>` node as a "
"child."
msgstr ""
"建立新空場景，新增一個 :ref:`Node <class_Node>` 當根節點並掛上腳本，再加一"
"個 :ref:`HTTPRequest <class_HTTPRequest>` 節點作為子節點。"

msgid "Scripting the request"
msgstr "撰寫請求腳本"

msgid ""
"When the project is started (so in ``_ready()``), we're going to send an "
"HTTP request to Github using our :ref:`HTTPRequest <class_HTTPRequest>` "
"node, and once the request completes, we're going to parse the returned JSON "
"data, look for the ``name`` field and print that to console."
msgstr ""
"啟動專案時（即 ``_ready()`` 階段），將透過 :ref:`HTTPRequest "
"<class_HTTPRequest>` 節點向 Github 發送 HTTP 請求。完成後會解析回傳的 JSON 資"
"料，尋找 ``name`` 欄位並印出至主控台。"

msgid ""
"Save the script and the scene, and run the project. The name of the most "
"recent Godot release on Github should be printed to the output log. For more "
"information on parsing JSON, see the class references for :ref:`JSON "
"<class_JSON>`."
msgstr ""
"儲存腳本與場景，執行專案後，Github 上最新的 Godot 發行名稱會輸出至訊息紀錄。"
"如需解析 JSON 請參考 :ref:`JSON <class_JSON>` 的說明文件。"

msgid ""
"Note that you may want to check whether the ``result`` equals "
"``RESULT_SUCCESS`` and whether a JSON parsing error occurred, see the JSON "
"class reference and :ref:`HTTPRequest <class_HTTPRequest>` for more."
msgstr ""
"請注意，建議檢查 ``result`` 是否等於 ``RESULT_SUCCESS`` 以及 JSON 是否有解析"
"錯誤。更多細節請參閱 JSON class reference 和 :ref:`HTTPRequest "
"<class_HTTPRequest>` 文件。"

msgid ""
"You have to wait for a request to finish before sending another one. Making "
"multiple request at once requires you to have one node per request. A common "
"strategy is to create and delete HTTPRequest nodes at runtime as necessary."
msgstr ""
"你必須等一個請求處理完才能發送下一個。若要同時送多個請求，每個請求都需一個 "
"HTTPRequest 節點。一般做法是根據需求在執行時動態建立與刪除 HTTPRequest 節點。"

msgid "Sending data to the server"
msgstr "傳送資料到伺服器"

msgid ""
"Until now, we have limited ourselves to requesting data from a server. But "
"what if you need to send data to the server? Here is a common way of doing "
"it:"
msgstr "前面只介紹了從伺服器取得資料。若要傳資料到伺服器，可以這樣做："

msgid "Setting custom HTTP headers"
msgstr "自訂 HTTP 標頭"

msgid ""
"Of course, you can also set custom HTTP headers. These are given as a string "
"array, with each string containing a header in the format ``\"header: "
"value\"``. For example, to set a custom user agent (the HTTP ``User-Agent`` "
"header) you could use the following:"
msgstr ""
"你也可以設定自訂 HTTP 標頭，只要傳入字串陣列，每個字串格式為 ``\"header: "
"value\"``。例如，要自訂 User-Agent（HTTP 的 ``User-Agent`` 標頭），可以這樣："

msgid ""
"Be aware that someone might analyse and decompile your released application "
"and thus may gain access to any embedded authorization information like "
"tokens, usernames or passwords. That means it is usually not a good idea to "
"embed things such as database access credentials inside your game. Avoid "
"providing information useful to an attacker whenever possible."
msgstr ""
"請注意，任何人都可能分析、反編譯你的遊戲，取得嵌入的授權資訊（如 token、帳"
"號、密碼等）。所以千萬不要將資料庫等敏感憑證放進遊戲中，也盡量避免提供任何對"
"攻擊者有用的資訊。"
