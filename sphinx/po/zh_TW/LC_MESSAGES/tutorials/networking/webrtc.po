#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "WebRTC"
msgstr "WebRTC"

msgid "HTML5, WebSocket, WebRTC"
msgstr "HTML5、WebSocket、WebRTC"

msgid ""
"One of Godot's great features is its ability to export to the HTML5/"
"WebAssembly platform, allowing your game to run directly in the browser when "
"a user visit your webpage."
msgstr ""
"Godot 最大特色之一是可匯出 HTML5/WebAssembly 平台，讓你的遊戲直接在瀏覽器上執"
"行。"

msgid ""
"This is a great opportunity for both demos and full games, but used to come "
"with some limitations. In the area of networking, browsers used to support "
"only HTTPRequests until recently, when first WebSocket and then WebRTC were "
"proposed as standards."
msgstr ""
"這對於展示版與正式遊戲都是好機會，但過去網路功能有限。瀏覽器以前只支援 "
"HTTPRequests，直到 WebSocket、WebRTC 先後成為標準。"

msgid "WebSocket"
msgstr "WebSocket"

msgid ""
"When the WebSocket protocol was standardized in December 2011, it allowed "
"browsers to create stable and bidirectional connections to a WebSocket "
"server. The protocol is a very powerful tool to send push notifications to "
"browsers, and has been used to implement chats, turn-based games, etc."
msgstr ""
"WebSocket 協定於 2011 年 12 月標準化，讓瀏覽器能穩定雙向連線伺服器。這個協定"
"很適合推播通知，也常用於聊天、回合遊戲等。"

msgid ""
"WebSockets, though, still use a TCP connection, which is good for "
"reliability but not for latency, so not good for real-time applications like "
"VoIP and fast-paced games."
msgstr ""
"不過 WebSocket 仍然基於 TCP，傳輸可靠但延遲高，不適合 VoIP 或即時遊戲。"

msgid ""
"For this reason, since 2010, Google started working on a new technology "
"called WebRTC, which later on, in 2017, became a W3C candidate "
"recommendation. WebRTC is a much more complex set of specifications, and "
"relies on many other technologies behind the scenes (ICE, DTLS, SDP) to "
"provide fast, real-time, and secure communication between two peers."
msgstr ""
"因此，Google 從 2010 年開始開發 WebRTC，並於 2017 年成為 W3C 候選標準。"
"WebRTC 相當複雜，需結合多種技術（如 ICE、DTLS、SDP），可讓兩個節點間高速、即"
"時又安全地通訊。"

msgid ""
"The idea is to find the fastest route between the two peers and establish "
"whenever possible a direct communication (i.e. try to avoid a relaying "
"server)."
msgstr "核心理念是找出兩個節點間最快的通路，盡量直接連線，避免經過中繼伺服器。"

msgid ""
"However, this comes at a price, which is that some media information must be "
"exchanged between the two peers before the communication can start (in the "
"form of Session Description Protocol - SDP strings). This usually takes the "
"form of a so-called WebRTC Signaling Server."
msgstr ""
"但這也有交換條件：通訊前必須先交換媒體資訊（SDP 格式），這通常透過所謂的 "
"WebRTC 訊號伺服器來完成。"

msgid ""
"Peers connect to a signaling server (for example a WebSocket server) and "
"send their media information. The server then relays this information to "
"other peers, allowing them to establish the desired direct communication. "
"Once this step is done, peers can disconnect from the signaling server and "
"keep the direct Peer-to-Peer (P2P) connection open."
msgstr ""
"節點會先連到訊號伺服器（如 WebSocket 伺服器）交換媒體資訊，伺服器將這些資訊轉"
"發給其他節點，讓彼此建立直接連線。交換完成後即可斷開訊號伺服器，維持 P2P 連"
"線。"

msgid "Using WebRTC in Godot"
msgstr "在 Godot 中使用 WebRTC"

msgid ""
"WebRTC is implemented in Godot via two main "
"classes :ref:`WebRTCPeerConnection <class_WebRTCPeerConnection>` "
"and :ref:`WebRTCDataChannel <class_WebRTCDataChannel>`, plus the multiplayer "
"API implementation :ref:`WebRTCMultiplayerPeer "
"<class_WebRTCMultiplayerPeer>`. See section on :ref:`high-level multiplayer "
"<doc_high_level_multiplayer>` for more details."
msgstr ""
"Godot 的 WebRTC 由兩個主要類別 :ref:`WebRTCPeerConnection "
"<class_WebRTCPeerConnection>`、:ref:`WebRTCDataChannel "
"<class_WebRTCDataChannel>` 和多人 API :ref:`WebRTCMultiplayerPeer "
"<class_WebRTCMultiplayerPeer>` 組成。更多細節請見 :ref:`高階多人連線 "
"<doc_high_level_multiplayer>`。"

msgid ""
"These classes are available automatically in HTML5, but **require an "
"external GDExtension plugin on native (non-HTML5) platforms**. Check out the "
"`webrtc-native plugin repository <https://github.com/godotengine/webrtc-"
"native>`__ for instructions and to get the latest `release <https://"
"github.com/godotengine/webrtc-native/releases>`__."
msgstr ""
"這些類別在 HTML5 平台自動可用，但**原生（非 HTML5）平台需安裝額外 "
"GDExtension 外掛**。詳情與最新版下載請見 <https://github.com/godotengine/"
"webrtc-native>。"

msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""
"匯出到 Android 時，請在匯出專案或一鍵部署前，於 Android 匯出設定啟用 "
"``INTERNET`` 權限，否則所有網路連線都會被 Android 阻擋。"

msgid "Minimal connection example"
msgstr "基本連線範例"

msgid ""
"This example will show you how to create a WebRTC connection between two "
"peers in the same application. This is not very useful in real life, but "
"will give you a good overview of how a WebRTC connection is set up."
msgstr ""
"下例示範如何在同一應用程式內建立兩個 peer 的 WebRTC 連線。雖非實務應用，但能"
"幫助你了解 WebRTC 連線的設定流程。"

msgid "This will print:"
msgstr "這將印出："

msgid "Local signaling example"
msgstr "本地訊號範例"

msgid ""
"This example expands on the previous one, separating the peers in two "
"different scenes, and using a :ref:`singleton <doc_singletons_autoload>` as "
"a signaling server."
msgstr ""
"本例擴充前述範例，將兩個 peer 拆到不同場景，並用 :ref:`singleton "
"<doc_singletons_autoload>` 做訊號伺服器。"

msgid "And now for the local signaling server:"
msgstr "本地訊號伺服器如下："

msgid ""
"This local signaling server is supposed to be used as a :ref:`singleton "
"<doc_singletons_autoload>` to connect two peers in the same scene."
msgstr ""
"這個本地訊號伺服器設計為 :ref:`singleton <doc_singletons_autoload>`，用來連結"
"同場景下的兩個 peer。"

msgid "Then you can use it like this:"
msgstr "接著可以這樣使用："

msgid "This will print something similar to this:"
msgstr "這將印出類似以下內容："

msgid "Remote signaling with WebSocket"
msgstr "用 WebSocket 遠端訊號傳遞"

msgid ""
"A more advanced demo using WebSocket for signaling peers "
"and :ref:`WebRTCMultiplayerPeer <class_WebRTCMultiplayerPeer>` is available "
"in the `godot demo projects <https://github.com/godotengine/godot-demo-"
"projects>`_ under `networking/webrtc_signaling`."
msgstr ""
"一個使用 WebSocket 訊號通知對等端及 :ref:`WebRTC 多人遊戲對等端 "
"<class_WebRTCMultiplayerPeer>` 的更進階展示專案，可在 `godot 展示專案 "
"<https://github.com/godotengine/godot-demo-projects>`_ 中的 networking/"
"webrtc_signaling 下取得。"
