#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Converting GLSL to Godot shaders"
msgstr "GLSL 轉換為 Godot 著色器"

msgid ""
"This document explains the differences between Godot's shading language and "
"GLSL and gives practical advice on how to migrate shaders from other "
"sources, such as Shadertoy and The Book of Shaders, into Godot shaders."
msgstr ""
"本文件說明 Godot 著色器語言與 GLSL 之間的差異，並提供實用建議，協助你將來自其"
"他來源（如 Shadertoy、The Book of Shaders）的著色器移植到 Godot。"

msgid ""
"For detailed information on Godot's shading language, please refer to "
"the :ref:`Shading Language <doc_shading_language>` reference."
msgstr ""
"如需 Godot 著色器語言的詳細資訊，請參考 :ref:`著色器語言 "
"<doc_shading_language>` 參考資料。"

msgid "GLSL"
msgstr "GLSL"

msgid ""
"Godot uses a shading language based on GLSL with the addition of a few "
"quality-of-life features. Accordingly, most features available in GLSL are "
"available in Godot's shading language."
msgstr ""
"Godot 採用以 GLSL 為基礎的著色器語言，並加入了一些便利性功能。因此，GLSL 中大"
"多數功能都能在 Godot 著色器語言中使用。"

msgid "Shader programs"
msgstr "著色器程式"

msgid ""
"In GLSL, each shader uses a separate program. You have one program for the "
"vertex shader and one for the fragment shader. In Godot, you have a single "
"shader that contains a ``vertex`` and/or a ``fragment`` function. If you "
"only choose to write one, Godot will supply the other."
msgstr ""
"在 GLSL 中，每個著色器都是一個獨立的程式：一個用於頂點著色器，一個用於片段著"
"色器。而在 Godot 中，你只需要寫一個著色器檔案，裡面可以包含 ``vertex`` 和/或 "
"``fragment`` 函式。如果你只撰寫其中一個，Godot 會自動補足另一個。"

msgid ""
"Godot allows uniform variables and functions to be shared by defining the "
"fragment and vertex shaders in one file. In GLSL, the vertex and fragment "
"programs cannot share variables except when varyings are used."
msgstr ""
"Godot 允許你在同一個著色器檔案中定義頂點與片段著色器，因此 uniform 變數與函式"
"可以共用。在 GLSL 中，頂點與片段程式無法共用變數，除非透過 varying 傳遞。"

msgid "Vertex attributes"
msgstr "頂點屬性"

msgid ""
"In GLSL, you can pass in per-vertex information using attributes and have "
"the flexibility to pass in as much or as little as you want. In Godot, you "
"have a set number of input attributes, including ``VERTEX`` (position), "
"``COLOR``, ``UV``, ``UV2``, ``NORMAL``. Each shaders' page in the shader "
"reference section of the documentation comes with a complete list of its "
"vertex attributes."
msgstr ""
"在 GLSL 中，你可以使用 attribute 傳遞每個頂點的資訊，並且彈性決定提供的內容。"
"在 Godot 中，則有一套固定的輸入屬性，包括 ``VERTEX``（位置）、``COLOR``、"
"``UV``、``UV2``、``NORMAL``。各種著色器所支援的頂點屬性，請參考文件的著色器語"
"言參考章節。"

msgid "gl_Position"
msgstr "gl_Position"

msgid ""
"``gl_Position`` receives the final position of a vertex specified in the "
"vertex shader. It is specified by the user in clip space. Typically, in "
"GLSL, the model space vertex position is passed in using a vertex attribute "
"called ``position`` and you handle the conversion from model space to clip "
"space manually."
msgstr ""
"``gl_Position`` 由頂點著色器指定，代表頂點在裁剪空間的最終位置。通常在 GLSL "
"中，模型空間的頂點位置會透過 ``position`` attribute 傳入，並由你自行負責將其"
"從模型空間轉換至裁剪空間。"

msgid ""
"In Godot, ``VERTEX`` specifies the vertex position in model space at the "
"beginning of the ``vertex`` function. Godot also handles the final "
"conversion to clip space after the user-defined ``vertex`` function is run. "
"If you want to skip the conversion from model to view space, you can set the "
"``render_mode`` to ``skip_vertex_transform``. If you want to skip all "
"transforms, set ``render_mode`` to ``skip_vertex_transform`` and set the "
"``PROJECTION_MATRIX`` to ``mat4(1.0)`` in order to nullify the final "
"transform from view space to clip space."
msgstr ""
"在 Godot 中，``VERTEX`` 代表 ``vertex`` 函式開頭時的模型空間座標。你執行自訂"
"的 ``vertex`` 函式後，Godot 會自動將結果轉換到裁剪空間。如果你想跳過從模型到"
"視圖空間的轉換，可以將 ``render_mode`` 設為 ``skip_vertex_transform``。若要完"
"全跳過所有變換，則除了設定 ``render_mode`` 為 ``skip_vertex_transform`` 外，"
"還需將 ``PROJECTION_MATRIX`` 設為 ``mat4(1.0)``，使從視圖到裁剪空間的最終變換"
"失效。"

msgid "Varyings"
msgstr "Varying（變量）"

msgid ""
"Varyings are a type of variable that can be passed from the vertex shader to "
"the fragment shader. In modern GLSL (3.0 and up), varyings are defined with "
"the ``in`` and ``out`` keywords. A variable going out of the vertex shader "
"is defined with ``out`` in the vertex shader and ``in`` inside the fragment "
"shader."
msgstr ""
"Varying 是一種可以從頂點著色器傳遞到片段著色器的變數。在現代 GLSL（3.0 以上）"
"中，varying 以 ``in`` 和 ``out`` 關鍵字定義。從頂點著色器輸出的變數以 "
"``out`` 宣告，在片段著色器中以 ``in`` 接收。"

msgid "Main"
msgstr "主函式"

msgid ""
"In GLSL, each shader program looks like a self-contained C-style program. "
"Accordingly, the main entry point is ``main``. If you are copying a vertex "
"shader, rename ``main`` to ``vertex`` and if you are copying a fragment "
"shader, rename ``main`` to ``fragment``."
msgstr ""
"在 GLSL 中，每個著色器程式都像是一個獨立的 C 語言程式，主入口為 ``main``。若"
"你要複製頂點著色器，請將 ``main`` 改名為 ``vertex``；如果是片段著色器，則改名"
"為 ``fragment``。"

msgid "Macros"
msgstr "巨集"

msgid ""
"The :ref:`Godot shader preprocessor<doc_shader_preprocessor>` supports the "
"following macros:"
msgstr ":ref:`Godot 著色器前處理器 <doc_shader_preprocessor>` 支援以下巨集："

msgid "``#define`` / ``#undef``"
msgstr "``#define`` / ``#undef``"

msgid ""
"``#if``, ``#elif``, ``#else``, ``#endif``, ``defined()``, ``#ifdef``, "
"``#ifndef``"
msgstr ""
"``#if``、``#elif``、``#else``、``#endif``、``defined()``、``#ifdef``、"
"``#ifndef``"

msgid ""
"``#include`` (only ``.gdshaderinc`` files and with a maximum depth of 25)"
msgstr "``#include``（只允許 ``.gdshaderinc`` 檔案，最多遞迴 25 層）"

msgid ""
"``#pragma disable_preprocessor``, which disables preprocessing for the rest "
"of the file"
msgstr "``#pragma disable_preprocessor`` ，停用本檔案剩餘部分的前處理"

msgid "Variables"
msgstr "變數"

msgid ""
"GLSL has many built-in variables that are hard-coded. These variables are "
"not uniforms, so they are not editable from the main program."
msgstr ""
"GLSL 有許多內建的硬編碼變數。這些變數不是 uniform，因此無法從主程式端編輯。"

msgid "Variable"
msgstr "變數"

msgid "Type"
msgstr "型別"

msgid "Equivalent"
msgstr "對應"

msgid "Description"
msgstr "說明"

msgid "gl_FragColor"
msgstr "gl_FragColor"

msgid "out vec4"
msgstr "out vec4"

msgid "COLOR"
msgstr "COLOR"

msgid "Output color for each pixel."
msgstr "每個像素的輸出顏色。"

msgid "gl_FragCoord"
msgstr "gl_FragCoord"

msgid "vec4"
msgstr "vec4"

msgid "FRAGCOORD"
msgstr "FRAGCOORD"

msgid "For full screen quads. For smaller quads, use UV."
msgstr "用於全螢幕四邊形。若為較小的四邊形，請改用 UV。"

msgid "VERTEX"
msgstr "VERTEX"

msgid "Position of Vertex, output from Vertex Shader."
msgstr "頂點的位置，由頂點著色器輸出。"

msgid "gl_PointSize"
msgstr "gl_PointSize"

msgid "float"
msgstr "浮點數"

msgid "POINT_SIZE"
msgstr "POINT_SIZE"

msgid "Size of Point primitive."
msgstr "點基元的大小。"

msgid "gl_PointCoord"
msgstr "gl_PointCoord"

msgid "vec2"
msgstr "vec2"

msgid "POINT_COORD"
msgstr "POINT_COORD"

msgid "Position on point when drawing Point primitives."
msgstr "繪製點基元時在點上的位置。"

msgid "gl_FrontFacing"
msgstr "gl_FrontFacing"

msgid "bool"
msgstr "bool"

msgid "FRONT_FACING"
msgstr "FRONT_FACING"

msgid "True if front face of primitive."
msgstr "若為基元正面則為 true。"

msgid "Coordinates"
msgstr "座標"

msgid ""
"``gl_FragCoord`` in GLSL and ``FRAGCOORD`` in the Godot shading language use "
"the same coordinate system. If using UV in Godot, the y-coordinate will be "
"flipped upside down."
msgstr ""
"GLSL 的 ``gl_FragCoord`` 與 Godot 著色器語言的 ``FRAGCOORD`` 使用相同的座標系"
"統。若在 Godot 中使用 UV，y 座標會上下顛倒。"

msgid "Precision"
msgstr "精度"

msgid ""
"In GLSL, you can define the precision of a given type (float or int) at the "
"top of the shader with the ``precision`` keyword. In Godot, you can set the "
"precision of individual variables as you need by placing precision "
"qualifiers ``lowp``, ``mediump``, and ``highp`` before the type when "
"defining the variable. For more information, see the :ref:`Shading Language "
"<doc_shading_language>` reference."
msgstr ""
"在 GLSL 中，你可用 ``precision`` 關鍵字於著色器頂端設定型別（如 float 或 "
"int）的精度。Godot 則允許你在變數型別前加上 ``lowp``、``mediump``、"
"``highp``，針對個別變數指定精度。詳情請見 :ref:`著色器語言 "
"<doc_shading_language>` 參考資料。"

msgid "Shadertoy"
msgstr "Shadertoy"

msgid ""
"`Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ is a website that makes it easy to "
"write fragment shaders and create `pure magic <https://www.shadertoy.com/"
"view/4tjGRh>`_."
msgstr ""
"`Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ 是一個讓你輕鬆撰寫片段著色器並創作各種酷"
"炫視覺效果的網站，像是這個 `pure magic <https://www.shadertoy.com/view/"
"4tjGRh>`_。"

msgid ""
"Shadertoy does not give the user full control over the shader. It handles "
"all the input and uniforms and only lets the user write the fragment shader."
msgstr ""
"Shadertoy 並未讓使用者完全控制著色器。它會處理所有輸入和 uniform，只允許你編"
"寫片段著色器。"

msgid "Types"
msgstr "型別"

msgid ""
"Shadertoy uses the webgl spec, so it runs a slightly different version of "
"GLSL. However, it still has the regular types, including constants and "
"macros."
msgstr ""
"Shadertoy 採用 WebGL 規範，因此 GLSL 版本略有不同。不過它仍支援一般型別、常數"
"及巨集。"

msgid "mainImage"
msgstr "mainImage"

msgid ""
"The main point of entry to a Shadertoy shader is the ``mainImage`` function. "
"``mainImage`` has two parameters, ``fragColor`` and ``fragCoord``, which "
"correspond to ``COLOR`` and ``FRAGCOORD`` in Godot, respectively. These "
"parameters are handled automatically in Godot, so you do not need to include "
"them as parameters yourself. Anything in the ``mainImage`` function should "
"be copied into the ``fragment`` function when porting to Godot."
msgstr ""
"Shadertoy 著色器的主要進入點是 ``mainImage`` 函式。此函式有兩個參數 "
"``fragColor`` 和 ``fragCoord``，分別對應 Godot 的 ``COLOR`` 與 "
"``FRAGCOORD``。這些參數在 Godot 會自動處理，因此移植時只需將 ``mainImage`` 內"
"的內容複製到 ``fragment`` 函式即可。"

msgid ""
"In order to make writing fragment shaders straightforward and easy, "
"Shadertoy handles passing a lot of helpful information from the main program "
"into the fragment shader for you. A few of these have no equivalents in "
"Godot because Godot has chosen not to make them available by default. This "
"is okay because Godot gives you the ability to make your own uniforms. For "
"variables whose equivalents are listed as \"Provide with Uniform\", users "
"are responsible for creating that uniform themselves. The description gives "
"the reader a hint about what they can pass in as a substitute."
msgstr ""
"為了讓編寫片段著色器更加簡單，Shadertoy 會自動將許多有用的主程式資訊傳遞進片"
"段著色器。有些變數在 Godot 沒有對應，因為 Godot 預設不提供這些內容。但這沒問"
"題，Godot 允許你自訂 uniform。對於表格中標註為「提供 Uniform」的變數，請自行"
"新增 uniform。說明欄位會提示你可以用哪些內容作為替代。"

msgid "fragColor"
msgstr "fragColor"

msgid "fragCoord"
msgstr "fragCoord"

msgid "FRAGCOORD.xy"
msgstr "FRAGCOORD.xy"

msgid "iResolution"
msgstr "iResolution"

msgid "vec3"
msgstr "vec3"

msgid "1.0 / SCREEN_PIXEL_SIZE"
msgstr "1.0 / SCREEN_PIXEL_SIZE"

msgid "Can also pass in manually."
msgstr "也可以手動傳入。"

msgid "iTime"
msgstr "iTime"

msgid "TIME"
msgstr "TIME"

msgid "Time since shader started."
msgstr "著色器開始執行後經過的時間。"

msgid "iTimeDelta"
msgstr "iTimeDelta"

msgid "Provide with Uniform"
msgstr "提供Uniform"

msgid "Time to render previous frame."
msgstr "上一影格的渲染時間。"

msgid "iFrame"
msgstr "iFrame"

msgid "Frame number."
msgstr "影格編號。"

msgid "iChannelTime[4]"
msgstr "iChannelTime[4]"

msgid "Time since that particular texture started."
msgstr "該紋理啟動以來經過的時間。"

msgid "iMouse"
msgstr "iMouse"

msgid "Mouse position in pixel coordinates."
msgstr "滑鼠的像素座標位置。"

msgid "iDate"
msgstr "iDate"

msgid "Current date, expressed in seconds."
msgstr "目前日期，單位為秒。"

msgid "iChannelResolution[4]"
msgstr "iChannelResolution[4]"

msgid "1.0 / TEXTURE_PIXEL_SIZE"
msgstr "1.0 / TEXTURE_PIXEL_SIZE"

msgid "Resolution of particular texture."
msgstr "特定紋理的解析度。"

msgid "iChanneli"
msgstr "iChanneli"

msgid "Sampler2D"
msgstr "Sampler2D"

msgid "TEXTURE"
msgstr "TEXTURE"

msgid "Godot provides only one built-in; user can make more."
msgstr "Godot 只提供一個內建；你可以自行新增更多。"

msgid ""
"``fragCoord`` behaves the same as ``gl_FragCoord`` in :ref:`GLSL "
"<glsl_coordinates>` and ``FRAGCOORD`` in Godot."
msgstr ""
"``fragCoord`` 的行為與 :ref:`GLSL <glsl_coordinates>` 的 ``gl_FragCoord`` 及 "
"Godot 的 ``FRAGCOORD`` 相同。"

msgid "The Book of Shaders"
msgstr "The Book of Shaders（著色之書）"

msgid ""
"Similar to Shadertoy, `The Book of Shaders <https://thebookofshaders.com>`_ "
"provides access to a fragment shader in the web browser, with which the user "
"may interact. The user is restricted to writing fragment shader code with a "
"set list of uniforms passed in and with no ability to add additional "
"uniforms."
msgstr ""
"與 Shadertoy 類似，`The Book of Shaders <https://thebookofshaders.com>`_ 讓你"
"可以在瀏覽器中互動式編輯片段著色器，但只能使用預設的 uniform 無法新增自訂 "
"uniform。"

msgid ""
"For further help on porting shaders to various frameworks generally, The "
"Book of Shaders provides a `page <https://thebookofshaders.com/04>`_ on "
"running shaders in various frameworks."
msgstr ""
"若需進一步瞭解如何將著色器移植到不同框架，The Book of Shaders 在 `這一頁 "
"<https://thebookofshaders.com/04>`_ 有相關說明。"

msgid ""
"The Book of Shaders uses the webgl spec, so it runs a slightly different "
"version of GLSL. However, it still has the regular types, including "
"constants and macros."
msgstr ""
"The Book of Shaders 採用 WebGL 規範，因此使用的 GLSL 版本略有不同。不過一般型"
"別、常數與巨集皆有支援。"

msgid ""
"The entry point for a Book of Shaders fragment shader is ``main``, just like "
"in GLSL. Everything written in a Book of Shaders ``main`` function should be "
"copied into Godot's ``fragment`` function."
msgstr ""
"Book of Shaders 的片段著色器入口點為 ``main``，與 GLSL 相同。請將 ``main`` 函"
"式內容完整複製到 Godot 的 ``fragment`` 函式中。"

msgid ""
"The Book of Shaders sticks closer to plain GLSL than Shadertoy does. It also "
"implements fewer uniforms than Shadertoy."
msgstr ""
"The Book of Shaders 比 Shadertoy 更貼近標準 GLSL，且預設提供的 uniform 也較"
"少。"

msgid "u_resolution"
msgstr "u_resolution"

msgid "u_time"
msgstr "u_time"

msgid "u_mouse"
msgstr "u_mouse"

msgid ""
"The Book of Shaders uses the same coordinate system as :ref:`GLSL "
"<glsl_coordinates>`."
msgstr ""
"The Book of Shaders 使用與 :ref:`GLSL <glsl_coordinates>` 相同的座標系統。"
