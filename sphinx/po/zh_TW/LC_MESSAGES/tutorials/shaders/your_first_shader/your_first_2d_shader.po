#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Your first 2D shader"
msgstr "你的第一個 2D 著色器"

msgid "Introduction"
msgstr "前言"

msgid ""
"Shaders are special programs that execute on the GPU and are used for "
"rendering graphics. All modern rendering is done with shaders. For a more "
"detailed description of what shaders are please see :ref:`What are shaders "
"<doc_introduction_to_shaders>`."
msgstr ""
"著色器是一種運行於 GPU 上的特殊程式，用來算繪圖像。現今的圖形算繪幾乎都仰賴著"
"色器完成。若想更深入瞭解著色器，請參閱 :ref:`著色器是什麼 "
"<doc_introduction_to_shaders>`。"

msgid ""
"This tutorial will focus on the practical aspects of writing shader programs "
"by walking you through the process of writing a shader with both vertex and "
"fragment functions. This tutorial targets absolute beginners to shaders."
msgstr ""
"本教學將專注於著色器實作，帶你一步步寫出同時包含頂點與片段函式的著色器。本篇"
"適合從未寫過著色器的新手。"

msgid ""
"If you have experience writing shaders and are just looking for an overview "
"of how shaders work in Godot, see the :ref:`Shading Reference <toc-shading-"
"reference>`."
msgstr ""
"如果你已有著色器經驗，只是想快速了解 Godot 著色器的架構，請參考 :ref:`著色器"
"參考 <toc-shading-reference>`。"

msgid "Setup"
msgstr "設定"

msgid ""
":ref:`CanvasItem shaders <doc_canvas_item_shader>` are used to draw all 2D "
"objects in Godot, while :ref:`Spatial <doc_spatial_shader>` shaders are used "
"to draw all 3D objects."
msgstr ""
":ref:`CanvasItem 著色器 <doc_canvas_item_shader>` 用於繪製 Godot 中所有 2D 物"
"件，而 :ref:`Spatial 著色器 <doc_spatial_shader>` 則用於繪製所有 3D 物件。"

msgid ""
"In order to use a shader it must be attached inside a :ref:`Material "
"<class_Material>` which must be attached to an object. Materials are a type "
"of :ref:`Resource <doc_resources>`. To draw multiple objects with the same "
"material, the material must be attached to each object."
msgstr ""
"要使用著色器，必須將其附加在 :ref:`Material <class_Material>`（材質）中，而該"
"材質又需再附加到物件上。材質是一種 :ref:`Resource <doc_resources>`。若要讓多"
"個物件共用同一材質，必須各自加上該材質。"

msgid ""
"All objects derived from a :ref:`CanvasItem <class_CanvasItem>` have a "
"material property. This includes all :ref:`GUI elements "
"<class_Control>`, :ref:`Sprite2Ds <class_Sprite2D>`, :ref:`TileMapLayers "
"<class_TileMapLayer>`, :ref:`MeshInstance2Ds <class_MeshInstance2D>` etc. "
"They also have an option to inherit their parent's material. This can be "
"useful if you have a large number of nodes that you want to use the same "
"material."
msgstr ""
"所有繼承自 :ref:`CanvasItem <class_CanvasItem>` 的物件都有材質屬性。這包括所"
"有 :ref:`GUI 元件 <class_Control>`、:ref:`Sprite2D "
"<class_Sprite2D>`、:ref:`TileMapLayer "
"<class_TileMapLayer>`、:ref:`MeshInstance2D <class_MeshInstance2D>` 等等。它"
"們也可以選擇繼承父節點的材質。如果你有大量節點要共用同一材質，這個功能會很方"
"便。"

msgid ""
"To begin, create a Sprite2D node. :ref:`You can use any CanvasItem "
"<doc_custom_drawing_in_2d>`, so long as it is drawing to the canvas, so for "
"this tutorial we will use a Sprite2D, as it is the easiest CanvasItem to "
"start drawing with."
msgstr ""
"首先，建立一個 Sprite2D 節點。:ref:`你可以用任何 CanvasItem "
"<doc_custom_drawing_in_2d>`，只要它能在畫布上繪圖即可。這裡我們選用 "
"Sprite2D，因為它是最容易上手的 CanvasItem。"

msgid ""
"In the Inspector, click beside \"Texture\" where it says \"[empty]\" and "
"select \"Load\", then select \"icon.svg\". For new projects, this is the "
"Godot icon. You should now see the icon in the viewport."
msgstr ""
"在屬性檢視器中，點擊「貼圖」旁「[空白]」的地方並選擇「載入」，接著選擇"
"「icon.svg」。新專案預設會有這個 Godot 圖示。現在你應該會在視埠看到這個圖示。"

msgid ""
"Next, look down in the Inspector, under the CanvasItem section, click beside "
"\"Material\" and select \"New ShaderMaterial\". This creates a new Material "
"resource. Click on the sphere that appears. Godot currently doesn't know "
"whether you are writing a CanvasItem Shader or a Spatial Shader and it "
"previews the output of spatial shaders. So what you are seeing is the output "
"of the default Spatial Shader."
msgstr ""
"接著，在屬性檢視器 CanvasItem 區塊，點擊「材質」旁邊並選擇「新建 "
"ShaderMaterial」。這會建立一個新的材質資源。再點擊出現的球體。Godot 目前還無"
"法分辨你要寫的是 CanvasItem 著色器還是 Spatial 著色器，因此預覽時會顯示 "
"Spatial 著色器的結果。所以你目前看到的是預設的 Spatial 著色器輸出。"

msgid ""
"Materials that inherit from the :ref:`class_Material` resource, such "
"as :ref:`class_StandardMaterial3D` and :ref:`class_ParticleProcessMaterial`, "
"can be converted to a :ref:`class_ShaderMaterial` and their existing "
"properties will be converted to an accompanying text shader. To do so, right-"
"click on the material in the FileSystem dock and choose **Convert to "
"ShaderMaterial**. You can also do so by right-clicking on any property "
"holding a reference to the material in the inspector."
msgstr ""
"所有繼承自 :ref:`class_Material` 的材質資源（例"
"如 :ref:`class_StandardMaterial3D`、:ref:`class_ParticleProcessMaterial`），"
"都可以轉換為 :ref:`class_ShaderMaterial`，現有的屬性會轉為對應的文字著色器。"
"要進行轉換，只需在檔案系統面板中右鍵點選該材質並選擇 **轉換成 "
"ShaderMaterial**。你也可以在屬性檢視器中，對任何指向材質的屬性右鍵進行同樣操"
"作。"

msgid ""
"Click beside \"Shader\" and select \"New Shader\". Finally, click on the "
"shader you just created and the shader editor will open. You are now ready "
"to begin writing your first shader."
msgstr ""
"然後點擊「著色器」旁邊並選擇「新建 Shader」。最後再點擊剛剛建立的著色器資源，"
"著色器編輯器就會開啟。你現在已經可以開始撰寫你的第一個著色器了。"

msgid "Your first CanvasItem shader"
msgstr "你的第一個 CanvasItem 著色器"

msgid ""
"In Godot, all shaders start with a line specifying what type of shader they "
"are. It uses the following format:"
msgstr "在 Godot 中，所有著色器的第一行都要標明型別，格式如下："

msgid ""
"Because we are writing a CanvasItem shader, we specify ``canvas_item`` in "
"the first line. All our code will go beneath this declaration."
msgstr ""
"由於本例要寫的是 CanvasItem 著色器，所以第一行要指定 ``canvas_item``，所有程"
"式碼都寫在這行下面。"

msgid ""
"This line tells the engine which built-in variables and functionality to "
"supply you with."
msgstr "這一行會告訴引擎該提供哪些內建變數及功能。"

msgid ""
"In Godot you can override three functions to control how the shader "
"operates; ``vertex``, ``fragment``, and ``light``. This tutorial will walk "
"you through writing a shader with both vertex and fragment functions. Light "
"functions are significantly more complex than vertex and fragment functions "
"and so will not be covered here."
msgstr ""
"在 Godot 中，你可以重寫三個函式來控制著色器行為，分別是 ``vertex`` （頂"
"點）、 ``fragment`` （片段）和 ``light`` （光照）。本教學主要帶你寫出同時包含"
"頂點和片段函式的著色器。光照函式比前兩者複雜許多，這裡不會討論。"

msgid "Your first fragment function"
msgstr "你的第一個片段函式"

msgid ""
"The fragment function runs for every pixel in a Sprite2D and determines what "
"color that pixel should be."
msgstr "片段函式會針對 Sprite2D 的每一個像素運行，用來決定每個像素的顏色。"

msgid ""
"They are restricted to the pixels covered by the Sprite2D, that means you "
"cannot use one to, for example, create an outline around a Sprite2D."
msgstr ""
"片段函式只會影響 Sprite2D 覆蓋到的像素，也就是說，你無法用它來在精靈周圍畫出"
"外框等效果。"

msgid ""
"The most basic fragment function does nothing except assign a single color "
"to every pixel."
msgstr "最簡單的片段函式就是讓每個像素都呈現同一個顏色。"

msgid ""
"We do so by writing a ``vec4`` to the built-in variable ``COLOR``. ``vec4`` "
"is shorthand for constructing a vector with 4 numbers. For more information "
"about vectors see the :ref:`Vector math tutorial <doc_vector_math>`. "
"``COLOR`` is both an input variable to the fragment function and the final "
"output from it."
msgstr ""
"我們只需將一個 ``vec4`` 寫入內建變數 ``COLOR`` 即可。``vec4`` 是由四個數字組"
"成的向量。想瞭解更多向量知識，請參閱 :ref:`向量數學教學 <doc_vector_math>`。"
"``COLOR`` 同時是片段函式的輸入和最終輸出。"

msgid ""
"Congratulations! You're done. You have successfully written your first "
"shader in Godot."
msgstr "恭喜你！你已經在 Godot 完成了你的第一個著色器。"

msgid "Now let's make things more complex."
msgstr "接下來我們來增加一些進階內容。"

msgid ""
"There are many inputs to the fragment function that you can use for "
"calculating ``COLOR``. ``UV`` is one of them. UV coordinates are specified "
"in your Sprite2D (without you knowing it!) and they tell the shader where to "
"read from textures for each part of the mesh."
msgstr ""
"片段函式有許多可用的輸入變數來計算 ``COLOR``，其中之一是 ``UV``。UV 座標會自"
"動設定在 Sprite2D 上（即使你沒特別指定！），它們會告訴著色器該從貼圖的哪個位"
"置取樣。"

msgid ""
"In the fragment function you can only read from ``UV``, but you can use it "
"in other functions or to assign values to ``COLOR`` directly."
msgstr ""
"在片段函式中你只能讀取 ``UV``，但你可以在其他函式裡使用，或直接用來設定 "
"``COLOR``。"

msgid "``UV`` varies between 0-1 from left-right and from top-bottom."
msgstr "``UV`` 的取值範圍是 0 到 1，分別對應左右與上下。"

msgid "Using ``TEXTURE`` built-in"
msgstr "使用 ``TEXTURE`` 內建變數"

msgid ""
"The default fragment function reads from the set Sprite2D texture and "
"displays it."
msgstr "預設情況下，片段函式會自動從 Sprite2D 的貼圖取樣並顯示出來。"

msgid ""
"When you want to adjust a color in a Sprite2D you can adjust the color from "
"the texture manually like in the code below."
msgstr ""
"當你想調整 Sprite2D 的顏色時，可以像下例程式碼那樣手動從貼圖讀取顏色再進行調"
"整。"

msgid ""
"Certain nodes, like Sprite2Ds, have a dedicated texture variable that can be "
"accessed in the shader using ``TEXTURE``. If you want to use the Sprite2D "
"texture to combine with other colors, you can use the ``UV`` with the "
"``texture`` function to access this variable. Use them to redraw the "
"Sprite2D with the texture."
msgstr ""
"某些節點（如 Sprite2D）有專屬的貼圖變數，可在著色器中用 ``TEXTURE`` 存取。如"
"果你想將 Sprite2D 的貼圖與其他顏色混合，可以用 ``UV`` 搭配 ``texture`` 函式取"
"得貼圖顏色，再進行處理。這樣可以在著色器內重繪 Sprite2D。"

msgid "Uniform input"
msgstr "Uniform 輸入"

msgid ""
"Uniform input is used to pass data into a shader that will be the same "
"across the entire shader."
msgstr ""
"Uniform 輸入可用來將外部資料傳入著色器，而且整個著色器運作時都保持一致。"

msgid ""
"You can use uniforms by defining them at the top of your shader like so:"
msgstr "你可以這樣在著色器頂部定義 uniform 變數來使用："

msgid ""
"For more information about usage see the :ref:`Shading Language doc "
"<doc_shading_language>`."
msgstr "更多 uniform 用法請參考 :ref:`著色語言文件 <doc_shading_language>`。"

msgid "Add a uniform to change the amount of blue in our Sprite2D."
msgstr "加入一個 uniform 來調整我們 Sprite2D 的藍色量。"

msgid ""
"Now you can change the amount of blue in the Sprite2D from the editor. Look "
"back at the Inspector under where you created your shader. You should see a "
"section called \"Shader Param\". Unfold that section and you will see the "
"uniform you just declared. If you change the value in the editor, it will "
"overwrite the default value you provided in the shader."
msgstr ""
"現在你可以直接在編輯器調整 Sprite2D 的藍色量了。回到屬性檢視器，你會在"
"「Shader Param」區塊看到剛剛宣告的 uniform。只要在編輯器改動這個值，就會覆蓋"
"著色器裡的預設值。"

msgid "Interacting with shaders from code"
msgstr "從程式碼與著色器互動"

msgid ""
"You can change uniforms from code using the function "
"``set_shader_parameter()`` which is called on the node's material resource. "
"With a Sprite2D node, the following code can be used to set the ``blue`` "
"uniform."
msgstr ""
"你可以透過節點的材質資源呼叫 ``set_shader_parameter()`` 來從程式碼設定 "
"uniform。以 Sprite2D 為例，下面的程式碼會設定 ``blue`` 這個 uniform。"

msgid ""
"Note that the name of the uniform is a string. The string must match exactly "
"with how it is written in the shader, including spelling and case."
msgstr ""
"請注意 uniform 名稱是字串，必須與著色器內變數名稱完全一致（包含大小寫）。"

msgid "Your first vertex function"
msgstr "你的第一個頂點函式"

msgid "Now that we have a fragment function, let's write a vertex function."
msgstr "現在我們已經有了片段函式，接下來來寫一個頂點函式。"

msgid ""
"Use the vertex function to calculate where on the screen each vertex should "
"end up."
msgstr "頂點函式可用來決定每個頂點在螢幕上的最終位置。"

msgid ""
"The most important variable in the vertex function is ``VERTEX``. Initially, "
"it specifies the vertex coordinates in your model, but you also write to it "
"to determine where to actually draw those vertices. ``VERTEX`` is a ``vec2`` "
"that is initially presented in local-space (i.e. not relative to the camera, "
"viewport, or parent nodes)."
msgstr ""
"頂點函式裡最重要的變數是 ``VERTEX``。一開始它代表模型裡的頂點座標，你也可以給"
"它賦值來決定頂點實際被繪製的位置。``VERTEX`` 是一個 ``vec2``，預設是節點本地"
"空間（不會參考相機、視埠或父節點）。"

msgid "You can offset the vertices by directly adding to ``VERTEX``."
msgstr "你可以直接對 ``VERTEX`` 加值來偏移頂點。"

msgid ""
"Combined with the ``TIME`` built-in variable, this can be used for basic "
"animation."
msgstr "搭配內建的 ``TIME`` 變數，這可以實現簡單動畫效果。"

msgid "Conclusion"
msgstr "結論"

msgid ""
"At their core, shaders do what you have seen so far, they compute ``VERTEX`` "
"and ``COLOR``. It is up to you to dream up more complex mathematical "
"strategies for assigning values to those variables."
msgstr ""
"本質上，著色器就是如你所見，計算 ``VERTEX`` 和 ``COLOR``。進階用法則取決於你"
"能設計出多複雜的數學策略來指定這些變數。"

msgid ""
"For inspiration, take a look at some of the more advanced shader tutorials, "
"and look at other sites like `Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ and `The Book of Shaders <https://"
"thebookofshaders.com>`_."
msgstr ""
"如需靈感，不妨參考一些進階著色器教學，也可參考 `Shadertoy <https://"
"www.shadertoy.com/results?query=&sort=popular&from=10&num=4>`_ 與 `The Book "
"of Shaders <https://thebookofshaders.com>`_ 這類網站。"
