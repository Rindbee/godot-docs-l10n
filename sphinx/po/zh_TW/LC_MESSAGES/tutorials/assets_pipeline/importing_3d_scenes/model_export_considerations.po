#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Model export considerations"
msgstr "模型匯出注意事項"

msgid ""
"Before exporting a 3D model from a 3D modeling application, such as Blender, "
"there are some considerations that should be taken into account to ensure "
"that the model follows the conventions and best practices for Godot."
msgstr ""
"從 3D 建模軟體（如 Blender）匯出 3D 模型前，請務必先檢查模型結構與內容是否符"
"合 Godot 的最佳實踐與命名慣例，以避免匯入問題。"

msgid "3D asset direction conventions"
msgstr "3D 素材坐標朝向慣例"

msgid ""
"Godot uses a right-handed, Y-is-up coordinate system, with the -Z axis as "
"the camera's forward direction. This is the same as OpenGL. This implies "
"that +Z is back, +X is right, and -X is left for a camera."
msgstr ""
"Godot 採用右手坐標系，Y 軸朝上，-Z 為鏡頭正前方（同 OpenGL）。等於 +Z 為後、"
"+X 為右、-X 為左。"

msgid ""
"The convention for 3D assets is to face the opposite direction as the "
"camera, so that characters and other assets are facing the camera by "
"default. This convention is extremely common in 3D modeling applications, "
"and is `codified in glTF as part of the glTF 2.0 specification <https://"
"registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#coordinate-system-and-"
"units>`__. This means that for oriented 3D assets (such as characters), the "
"+Z axis is the direction of the front, so -Z is the rear, +X is the left "
"side, and -X is the right side for a 3D asset. In Blender, this means that "
"+Y is rear and -Y is front for an asset."
msgstr ""
"3D 素材習慣上會讓模型的正面朝向 -Z（也就是鏡頭預設的前方），這樣匯入 Godot 時"
"角色正面才會朝向玩家。這點在 glTF 2.0 標準中也有明文規定（<https://"
"registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#coordinate-system-and-"
"units>）。換句話說，角色正面應該是 +Z，背面 -Z、左側 +X、右側 -X。Blender 裡"
"則是 +Y 為背面、-Y 為正面。"

msgid ""
"When rotating an oriented 3D asset in Godot, use the ``use_model_front`` "
"option on the ``look_at`` functions, and use the ``Vector3.MODEL_*`` "
"constants to perform calculations in the oriented asset's local space."
msgstr ""
"在 Godot 中旋轉 3D 素材時，請為 ``look_at`` 函式指定 ``use_model_front`` 選"
"項，使用 ``Vector3.MODEL_*`` 常數在素材的局部空間中進行計算。"

msgid ""
"For assets without an intrinsic front side or forward direction, such as a "
"game map or terrain, take note of the cardinal directions instead. The "
"convention in Godot and the vast majority of other applications is that +X "
"is east and -X is west. Due to Godot's right-handed Y-is-up coordinate "
"system, this implies that +Z is south and -Z is north. In Blender, this "
"means that +Y is north and -Y is south."
msgstr ""
"對於地圖、地形等沒有正反、前後概念的素材，請改用東南西北等基本方向。Godot 和"
"大多數其他程式都約定 +X 為東、-X 為西。由於 Godot 使用的是 Y 朝上的右手坐標"
"系，所以 +Z 為南、-Z 為北。在 Blender 中，這意味著 +Y 為北、-Y 為南。"

msgid "Exporting textures separately"
msgstr "分開匯出紋理"

msgid ""
"While textures can be exported with a model in certain file formats, such as "
"glTF 2.0, you can also export them separately. Godot uses PBR (physically "
"based rendering) for its materials, so if a texturing program can export PBR "
"textures, they can work in Godot. This includes the `Substance suite "
"<https://www.adobe.com/creativecloud/3d-ar.html>`__, `ArmorPaint (open "
"source) <https://armorpaint.org/>`__, and `Material Maker (open source) "
"<https://github.com/RodZill4/material-maker>`__."
msgstr ""
"部分格式如 glTF 2.0 支援將紋理直接內嵌到模型，也可以選擇分開匯出。Godot 材質"
"採用 PBR（物理式算繪），只要你的紋理工具能匯出 PBR 材質貼圖，就可直接用於 "
"Godot，例如 Substance（Adobe）、ArmorPaint、Material Maker 等。"

msgid ""
"For more information on Godot's materials, "
"see :ref:`doc_standard_material_3d`."
msgstr "有關 Godot 的材質的更多資訊，請參閱 :ref:`doc_standard_material_3d`。"

msgid "Exporting considerations"
msgstr "其他建議"

msgid ""
"Since GPUs can only render triangles, meshes that contain quads or N-gons "
"have to be *triangulated* before they can be rendered. Godot can triangulate "
"meshes on import, but results may be unpredictable or incorrect, especially "
"with N-gons. Regardless of the target application, triangulating *before* "
"exporting the scene will lead to more consistent results and should be done "
"whenever possible."
msgstr ""
"GPU 只能算繪三角形，所以四邊形或多邊形網格必須先三角化。Godot 匯入時會自動三"
"角化，但結果不一定理想，尤其是多邊形（n-gon）。建議在 DCC 軟體中就先三角化"
"（Triangulate），這樣匯入結果最穩定。"

msgid ""
"To avoid issues with incorrect triangulation after importing in Godot, it is "
"recommended to make the 3D modeling software triangulate objects on its own. "
"In Blender, this can be done by adding a Triangulate modifier to your "
"objects and making sure **Apply Modifiers** is checked in the export dialog. "
"Alternatively, depending on the exporter, you may be able to find and enable "
"a **Triangulate Faces** option in the export dialog."
msgstr ""
"為了避免在Godot中匯入後出現三角剖分不正確的問題, 建議讓3D DCC自行對物件進行三"
"角剖分. 在Blender中, 可以通過向物件新增三角剖分修改器, 並確保在匯出對話方塊中"
"勾選 **應用修改器** 來實作. 另外, 根據匯出工具的不同, 您可以在匯出對話方塊中"
"找到並啟用 **Triangulate Faces** 選項."

msgid ""
"To avoid issues with 3D selection in the editor, it is recommended to apply "
"the object transform in the 3D modeling software before exporting the scene."
msgstr ""
"為了避免在編輯器中出現3D選擇的問題, 建議在匯出場景前在3D DCC中應用物件變換."

msgid ""
"It is important that the mesh is not deformed by bones when exporting. Make "
"sure that the skeleton is reset to its T-pose or default rest pose before "
"exporting with your favorite 3D editor."
msgstr ""
"匯出時請確保骨架未對模型產生變形，骨架應重設為 T 姿勢或預設靜止姿勢再匯出。"

msgid "Lighting considerations"
msgstr "其他建議"

msgid ""
"While it's possible to import lights from a 3D scene using the glTF, "
"``.blend`` or Collada formats, it's generally advised to design the scene's "
"lighting in the Godot editor after importing the scene."
msgstr ""
"雖然 glTF、.blend 或 Collada 格式可以帶入場景中的燈光，但建議匯入後再於 "
"Godot 編輯器內重建或調整燈光。"

msgid ""
"This allows you to get a more accurate feel for the final result, as "
"different engines will render lights in a different manner. This also avoids "
"any issues with lights appearing excessively strong or faint as a result of "
"the import process."
msgstr ""
"這可以讓您對最終結果有更準確的感覺，因為不同的引擎將以不同的方式算繪燈光。這"
"也可以避免因匯入過程而導致燈光顯得過強或過弱的任何問題。"
