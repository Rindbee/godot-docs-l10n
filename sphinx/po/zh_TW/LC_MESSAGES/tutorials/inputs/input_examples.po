#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Input examples"
msgstr "輸入範例"

msgid "Introduction"
msgstr "前言"

msgid ""
"In this tutorial, you'll learn how to use Godot's :ref:`InputEvent "
"<class_InputEvent>` system to capture player input. There are many different "
"types of input your game may use - keyboard, gamepad, mouse, etc. - and many "
"different ways to turn those inputs into actions in your game. This document "
"will show you some of the most common scenarios, which you can use as "
"starting points for your own projects."
msgstr ""
"本教學將帶你學習如何使用 Godot 的 :ref:`InputEvent <class_InputEvent>` 系統來"
"捕捉玩家輸入。你的遊戲可能會用到多種不同的輸入類型——例如鍵盤、手把、滑鼠等等"
"——以及各種將這些輸入轉換為遊戲行動的方法。本文將介紹一些最常見的情境，幫助你"
"作為自己專案的起點。"

msgid ""
"For a detailed overview of how Godot's input event system works, "
"see :ref:`doc_inputevent`."
msgstr ""
"若想進一步了解 Godot 輸入事件系統的運作方式，請參閱 :ref:`doc_inputevent`。"

msgid "Events versus polling"
msgstr "事件與輪詢"

msgid ""
"Sometimes you want your game to respond to a certain input event - pressing "
"the \"jump\" button, for example. For other situations, you might want "
"something to happen as long as a key is pressed, such as movement. In the "
"first case, you can use the ``_input()`` function, which will be called "
"whenever an input event occurs. In the second case, Godot provides "
"the :ref:`Input <class_Input>` singleton, which you can use to query the "
"state of an input."
msgstr ""
"有時你會希望遊戲對特定輸入事件有反應——像是按下「跳躍」鍵。其他時候，你可能希"
"望只要某個按鍵有被按住（例如移動），就持續發生某些動作。第一種情況可以使用 "
"``_input()`` 方法，當有輸入事件發生時會自動呼叫；第二種情況則可利"
"用 :ref:`Input <class_Input>` 單例來查詢輸入狀態。"

msgid "Examples:"
msgstr "範例："

msgid ""
"This gives you the flexibility to mix-and-match the type of input processing "
"you do."
msgstr "這讓你可以更加彈性地混合處理不同類型的輸入方式。"

msgid ""
"For the remainder of this tutorial, we'll focus on capturing individual "
"events in ``_input()``."
msgstr "接下來的教學將著重於用 ``_input()`` 捕捉單一事件。"

msgid "Input events"
msgstr "輸入事件"

msgid ""
"Input events are objects that inherit from :ref:`InputEvent "
"<class_InputEvent>`. Depending on the event type, the object will contain "
"specific properties related to that event. To see what events actually look "
"like, add a Node and attach the following script:"
msgstr ""
"輸入事件是繼承自 :ref:`InputEvent <class_InputEvent>` 的物件。根據事件型別，"
"物件會包含該事件專屬的屬性。若要觀察事件本體，請新增一個節點並掛上以下腳本："

msgid ""
"As you press keys, move the mouse, and perform other inputs, you'll see each "
"event scroll by in the output window. Here's an example of the output:"
msgstr ""
"當你按下按鍵、移動滑鼠或進行其他輸入時，所有事件都會在輸出視窗中依序顯示。以"
"下是範例輸出："

msgid ""
"As you can see, the results are very different for the different types of "
"input. Key events are even printed as their key symbols. For example, let's "
"consider :ref:`InputEventMouseButton <class_InputEventMouseButton>`. It "
"inherits from the following classes:"
msgstr ""
"如你所見，不同類型的輸入有著完全不同的事件內容。鍵盤事件甚至會直接列印對應的"
"按鍵符號。例如，:ref:`InputEventMouseButton <class_InputEventMouseButton>` 就"
"繼承自以下類別："

msgid ""
":ref:`InputEvent <class_InputEvent>` - the base class for all input events"
msgstr ":ref:`InputEvent <class_InputEvent>` —— 所有輸入事件的基底類別"

msgid ""
":ref:`InputEventWithModifiers <class_InputEventWithModifiers>` - adds the "
"ability to check if modifiers are pressed, such as :kbd:`Shift` "
"or :kbd:`Alt`."
msgstr ""
":ref:`InputEventWithModifiers <class_InputEventWithModifiers>` —— 增加檢查修"
"飾鍵（如 :kbd:`Shift` 或 :kbd:`Alt`）是否按下的能力。"

msgid ""
":ref:`InputEventMouse <class_InputEventMouse>` - adds mouse event "
"properties, such as ``position``"
msgstr ""
":ref:`InputEventMouse <class_InputEventMouse>` —— 提供滑鼠事件屬性，如 "
"``position``"

msgid ""
":ref:`InputEventMouseButton <class_InputEventMouseButton>` - contains the "
"index of the button that was pressed, whether it was a double-click, etc."
msgstr ""
":ref:`InputEventMouseButton <class_InputEventMouseButton>` —— 包含被按下的按"
"鈕索引值，以及是否為雙擊等資訊。"

msgid ""
"It's a good idea to keep the class reference open while you're working with "
"events so you can check the event type's available properties and methods."
msgstr ""
"建議在處理事件時隨時參考官方類別說明，方便查詢各型別事件可用的屬性與方法。"

msgid ""
"You can encounter errors if you try to access a property on an input type "
"that doesn't contain it - calling ``position`` on ``InputEventKey`` for "
"example. To avoid this, make sure to test the event type first:"
msgstr ""
"如果你嘗試存取某個輸入型別沒有的屬性（例如在 ``InputEventKey`` 上取用 "
"``position``），會發生錯誤。為避免這種情況，請務必先檢查事件型別："

msgid "InputMap"
msgstr "輸入映射表"

msgid ""
"The :ref:`InputMap <class_InputMap>` is the most flexible way to handle a "
"variety of inputs. You use this by creating named input *actions*, to which "
"you can assign any number of input events, such as keypresses or mouse "
"clicks. To see them, and to add your own, open Project -> Project Settings "
"and select the InputMap tab:"
msgstr ""
":ref:`InputMap <class_InputMap>` 是處理多元輸入的最彈性方式。你可以建立具名的"
"輸入「*動作*」，並將多組輸入事件（如按鍵、滑鼠點擊等）對應到這些動作。要查看"
"和新增自訂動作，請進入「專案」→「專案設定」，點選「InputMap」分頁："

msgid ""
"A new Godot project includes a number of default actions already defined. To "
"see them, turn on ``Show Built-in Actions`` in the InputMap dialog."
msgstr ""
"新的 Godot 專案會預先定義許多內建動作。若要檢視這些動作，請在 InputMap 對話視"
"窗中啟用「Show Built-in Actions」（顯示內建動作）。"

msgid "Capturing actions"
msgstr "處理動作"

msgid ""
"Once you've defined your actions, you can process them in your scripts using "
"``is_action_pressed()`` and ``is_action_released()`` by passing the name of "
"the action you're looking for:"
msgstr ""
"定義好動作後，你可以在腳本中用 ``is_action_pressed()`` 和 "
"``is_action_released()`` 這兩個方法，傳入動作名稱來判斷動作是否觸發："

msgid "Keyboard events"
msgstr "鍵盤事件"

msgid ""
"Keyboard events are captured in :ref:`InputEventKey <class_InputEventKey>`. "
"While it's recommended to use input actions instead, there may be cases "
"where you want to specifically look at key events. For this example, let's "
"check for the :kbd:`T`:"
msgstr ""
"鍵盤事件會以 :ref:`InputEventKey <class_InputEventKey>` 型別捕捉。雖然建議盡"
"量改用輸入動作，但有時你可能需要直接判斷個別按鍵。以下為偵測 :kbd:`T` 按鍵的"
"範例："

msgid ""
"See :ref:`@GlobalScope_Key <enum_@GlobalScope_Key>` for a list of keycode "
"constants."
msgstr ""
"請參考 :ref:`@GlobalScope_Key <enum_@GlobalScope_Key>` 取得按鍵常數列表。"

msgid ""
"Due to *keyboard ghosting*, not all key inputs may be registered at a given "
"time if you press too many keys at once. Due to their location on the "
"keyboard, certain keys are more prone to ghosting than others. Some "
"keyboards feature antighosting at a hardware level, but this feature is "
"generally not present on low-end keyboards and laptop keyboards."
msgstr ""
"由於 *鍵盤鬼影現象（ghosting）*，如果同時按下太多按鍵，部分按鍵輸入可能不會被"
"正確偵測。根據按鍵在鍵盤上的位置，有些按鍵更容易發生鬼影現象。有些鍵盤具備硬"
"體層級的抗鬼影（anti-ghosting）功能，但低價鍵盤和筆電鍵盤通常沒有這項設計。"

msgid ""
"As a result, it's recommended to use a default keyboard layout that is "
"designed to work well on a keyboard without antighosting. See `this Gamedev "
"Stack Exchange question <https://gamedev.stackexchange.com/a/109002>`__ for "
"more information."
msgstr ""
"因此，建議設計預設鍵位配置時，需考慮到一般鍵盤（無抗鬼影功能）也能正常使用。"
"詳情可參考 `這則 Gamedev Stack Exchange 問題 <https://"
"gamedev.stackexchange.com/a/109002>`__。"

msgid "Keyboard modifiers"
msgstr "鍵盤修飾鍵"

msgid ""
"Modifier properties are inherited from :ref:`InputEventWithModifiers "
"<class_InputEventWithModifiers>`. This allows you to check for modifier "
"combinations using boolean properties. Let's imagine you want one thing to "
"happen when the :kbd:`T` is pressed, but something different when "
"it's :kbd:`Shift + T`:"
msgstr ""
"修飾鍵屬性繼承自 :ref:`InputEventWithModifiers "
"<class_InputEventWithModifiers>`，你可以用布林值檢查修飾鍵組合。假如你希望單"
"獨按下 :kbd:`T` 和按下 :kbd:`Shift + T` 會有不同反應，可以這樣寫："

msgid "Mouse events"
msgstr "滑鼠事件"

msgid ""
"Mouse events stem from the :ref:`InputEventMouse <class_InputEventMouse>` "
"class, and are separated into two types: :ref:`InputEventMouseButton "
"<class_InputEventMouseButton>` and :ref:`InputEventMouseMotion "
"<class_InputEventMouseMotion>`. Note that this means that all mouse events "
"will contain a ``position`` property."
msgstr ""
"滑鼠事件繼承自 :ref:`InputEventMouse <class_InputEventMouse>`，並細分"
"為 :ref:`InputEventMouseButton <class_InputEventMouseButton>` "
"和 :ref:`InputEventMouseMotion <class_InputEventMouseMotion>` 兩種型別。也就"
"是說，所有滑鼠事件都會帶有 ``position`` 屬性。"

msgid "Mouse buttons"
msgstr "滑鼠按鈕"

msgid ""
"Capturing mouse buttons is very similar to handling key "
"events. :ref:`@GlobalScope_MouseButton <enum_@GlobalScope_MouseButton>` "
"contains a list of ``MOUSE_BUTTON_*`` constants for each possible button, "
"which will be reported in the event's ``button_index`` property. Note that "
"the scrollwheel also counts as a button - two buttons, to be precise, with "
"both ``MOUSE_BUTTON_WHEEL_UP`` and ``MOUSE_BUTTON_WHEEL_DOWN`` being "
"separate events."
msgstr ""
"滑鼠按鈕的捕捉方式與鍵盤事件非常類似。:ref:`@GlobalScope_MouseButton "
"<enum_@GlobalScope_MouseButton>` 內含所有可用滑鼠按鈕的 ``MOUSE_BUTTON_*`` 常"
"數，對應到事件的 ``button_index`` 屬性。注意，滑鼠滾輪也算按鈕（嚴格來說是二"
"個），分別為 ``MOUSE_BUTTON_WHEEL_UP`` 及 ``MOUSE_BUTTON_WHEEL_DOWN``，會分成"
"不同事件。"

msgid "Mouse motion"
msgstr "滑鼠移動"

msgid ""
":ref:`InputEventMouseMotion <class_InputEventMouseMotion>` events occur "
"whenever the mouse moves. You can find the move's distance with the "
"``relative`` property."
msgstr ""
"每當滑鼠移動時，都會產生 :ref:`InputEventMouseMotion "
"<class_InputEventMouseMotion>` 事件。可以透過 ``relative`` 屬性取得移動的距"
"離。"

msgid ""
"Here's an example using mouse events to drag-and-drop a :ref:`Sprite2D "
"<class_Sprite2D>` node:"
msgstr "以下為使用滑鼠事件拖曳 :ref:`Sprite2D <class_Sprite2D>` 節點的範例："

msgid "Touch events"
msgstr "觸控事件"

msgid ""
"If you are using a touchscreen device, you can generate touch "
"events. :ref:`InputEventScreenTouch <class_InputEventScreenTouch>` is "
"equivalent to a mouse click event, and :ref:`InputEventScreenDrag "
"<class_InputEventScreenDrag>` works much the same as mouse motion."
msgstr ""
"如果你使用觸控螢幕裝置，會產生觸控事件。:ref:`InputEventScreenTouch "
"<class_InputEventScreenTouch>` 相當於滑鼠點擊事件，"
"而 :ref:`InputEventScreenDrag <class_InputEventScreenDrag>` 則與滑鼠移動事件"
"相似。"

msgid ""
"To test your touch events on a non-touchscreen device, open Project Settings "
"and go to the \"Input Devices/Pointing\" section. Enable \"Emulate Touch "
"From Mouse\" and your project will interpret mouse clicks and motion as "
"touch events."
msgstr ""
"若想在非觸控螢幕裝置上測試觸控事件，請於專案設定 > Input Devices/Pointing 區"
"段中，啟用「Emulate Touch From Mouse」（滑鼠模擬觸控）。這樣專案就會將滑鼠點"
"選與移動視為觸控事件。"
