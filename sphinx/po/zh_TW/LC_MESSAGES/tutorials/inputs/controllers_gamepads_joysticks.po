#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Controllers, gamepads, and joysticks"
msgstr "控制器、遊戲手把與搖桿"

msgid ""
"Godot supports hundreds of controller models out of the box. Controllers are "
"supported on Windows, macOS, Linux, Android, iOS, and HTML5."
msgstr ""
"Godot 內建支援數百種控制器型號。控制器在 Windows、macOS、Linux、Android、iOS "
"和 HTML5 上皆可使用。"

msgid ""
"Note that more specialized devices such as steering wheels, rudder pedals "
"and `HOTAS <https://en.wikipedia.org/wiki/HOTAS>`__ are less tested and may "
"not always work as expected. Overriding force feedback for those devices is "
"also not implemented yet. If you have access to one of those devices, don't "
"hesitate to `report bugs on GitHub <https://github.com/godotengine/godot/"
"blob/master/CONTRIBUTING.md#reporting-bugs>`__."
msgstr ""
"請注意，像方向盤、方向舵踏板及 `HOTAS <https://en.wikipedia.org/wiki/"
"HOTAS>`__ 這類更專業的裝置測試較少，可能無法完全依預期運作。這些裝置的力回饋"
"覆寫功能也尚未實作。如果你有這類裝置，歡迎直接 `在 GitHub 上回報問題 "
"<https://github.com/godotengine/godot/blob/master/CONTRIBUTING.md#reporting-"
"bugs>`__ 。"

msgid "In this guide, you will learn:"
msgstr "在本指南中，你將學到："

msgid ""
"**How to write your input logic to support both keyboard and controller "
"inputs.**"
msgstr "**如何設計你的輸入邏輯以同時支援鍵盤與控制器輸入。**"

msgid "**How controllers can behave differently from keyboard/mouse input.**"
msgstr "**控制器與鍵盤／滑鼠輸入行為上的差異。**"

msgid "**Troubleshooting issues with controllers in Godot.**"
msgstr "**如何在 Godot 中排查控制器相關問題。**"

msgid "Supporting universal input"
msgstr "支援通用輸入"

msgid ""
"Thanks to Godot's input action system, Godot makes it possible to support "
"both keyboard and controller input without having to write separate code "
"paths. Instead of hardcoding keys or controller buttons in your scripts, you "
"should create *input actions* in the Project Settings which will then refer "
"to specified key and controller inputs."
msgstr ""
"由於 Godot 的輸入動作系統，你可以同時支援鍵盤與控制器輸入，無需撰寫額外的分支"
"程式碼。你應在「專案設定」中建立 *輸入動作* ，這些動作可同時對應指定的鍵盤與"
"控制器按鈕，避免在腳本中硬編碼按鍵或控制器按鈕。"

msgid ""
"Input actions are explained in detail on the :ref:`doc_inputevent` page."
msgstr "詳細說明請參見 :ref:`doc_inputevent` 頁面。"

msgid ""
"Unlike keyboard input, supporting both mouse and controller input for an "
"action (such as looking around in a first-person game) will require "
"different code paths since these have to be handled separately."
msgstr ""
"與鍵盤輸入不同，若要支援滑鼠與控制器對同一動作（如第一人稱視角的環顧四周），"
"這兩者必須分開處理，因此需要不同的程式邏輯。"

msgid "Which Input singleton method should I use?"
msgstr "我該用哪個 Input 單例的方法？"

msgid "There are 3 ways to get input in an analog-aware way:"
msgstr "有三種取得類比輸入的方法："

msgid ""
"When you have two axes (such as joystick or WASD movement) and want both "
"axes to behave as a single input, use ``Input.get_vector()``:"
msgstr ""
"當有兩個軸（如搖桿或 WASD 移動）且希望兩軸合為一個輸入時，請用 "
"``Input.get_vector()``："

msgid ""
"When you have one axis that can go both ways (such as a throttle on a flight "
"stick), or when you want to handle separate axes individually, use "
"``Input.get_axis()``:"
msgstr ""
"當你有單一軸可雙向移動（如飛行搖桿的油門），或要個別處理不同軸時，請用 "
"``Input.get_axis()``："

msgid ""
"For other types of analog input, such as handling a trigger or handling one "
"direction at a time, use ``Input.get_action_strength()``:"
msgstr ""
"對於其他類型的類比輸入，如扳機鍵或僅單方向輸入，請用 "
"``Input.get_action_strength()``："

msgid ""
"For non-analog digital/boolean input (only \"pressed\" or \"not pressed\" "
"values), such as controller buttons, mouse buttons or keyboard keys, use "
"``Input.is_action_pressed()``:"
msgstr ""
"對於非類比的數位／布林輸入（僅有「按下」或「未按」），例如控制器按鈕、滑鼠按"
"鍵或鍵盤鍵，請用 ``Input.is_action_pressed()``："

msgid ""
"If you need to know whether an input was *just* pressed in the previous "
"frame, use ``Input.is_action_just_pressed()`` instead of "
"``Input.is_action_pressed()``. Unlike ``Input.is_action_pressed()`` which "
"returns ``true`` as long as the input is held, "
"``Input.is_action_just_pressed()`` will only return ``true`` for one frame "
"after the button has been pressed."
msgstr ""
"若你想判斷某輸入是否在上一個影格中『剛剛』被按下，請用 "
"``Input.is_action_just_pressed()`` 取代 ``Input.is_action_pressed()``。後者在"
"持續按下時會一直回傳 ``true``，而 ``Input.is_action_just_pressed()`` 僅會在按"
"下後的單一影格回傳 ``true``。"

msgid "Vibration"
msgstr "振動"

msgid ""
"Vibration (also called *haptic feedback*) can be used to enhance the feel of "
"a game. For instance, in a racing game, you can convey the surface the car "
"is currently driving on through vibration, or create a sudden vibration on a "
"crash."
msgstr ""
"振動（也稱為*觸覺回饋*）能增強遊戲體驗。例如，在賽車遊戲中，可以用振動表現車"
"輛行駛路面的不同，或在撞擊時產生強烈震動。"

msgid ""
"Use the Input "
"singleton's :ref:`start_joy_vibration<class_Input_method_start_joy_vibration>` "
"method to start vibrating a gamepad. "
"Use :ref:`stop_joy_vibration<class_Input_method_stop_joy_vibration>` to stop "
"vibration early (useful if no duration was specified when starting)."
msgstr ""
"使用 Input 單例"
"的 :ref:`start_joy_vibration<class_Input_method_start_joy_vibration>` 方法可"
"啟動手把振動。要提前停止（若啟動時未設定時長），則"
"用 :ref:`stop_joy_vibration<class_Input_method_stop_joy_vibration>`。"

msgid ""
"On mobile devices, you can also "
"use :ref:`vibrate_handheld<class_Input_method_vibrate_handheld>` to vibrate "
"the device itself (independently from the gamepad). On Android, this "
"requires the ``VIBRATE`` permission to be enabled in the Android export "
"preset before exporting the project."
msgstr ""
"在行動裝置上，可"
"用 :ref:`vibrate_handheld<class_Input_method_vibrate_handheld>` 讓整台裝置振"
"動（獨立於手把）。Android 匯出前需於預設設定中勾選 ``VIBRATE`` 權限。"

msgid ""
"Vibration can be uncomfortable for certain players. Make sure to provide an "
"in-game slider to disable vibration or reduce its intensity."
msgstr "部分玩家可能會排斥振動。請務必在遊戲中提供調整強度或關閉振動的選項。"

msgid "Differences between keyboard/mouse and controller input"
msgstr "鍵盤／滑鼠與控制器輸入的差異"

msgid ""
"If you're used to handling keyboard and mouse input, you may be surprised by "
"how controllers handle specific situations."
msgstr ""
"如果你習慣只處理鍵盤與滑鼠輸入，控制器在某些情境下的行為可能會讓你感到驚訝。"

msgid "Dead zone"
msgstr "死區"

msgid ""
"Unlike keyboards and mice, controllers offer axes with *analog* inputs. The "
"upside of analog inputs is that they offer additional flexibility for "
"actions. Unlike digital inputs which can only provide strengths of ``0.0`` "
"and ``1.0``, an analog input can provide *any* strength between ``0.0`` and "
"``1.0``. The downside is that without a deadzone system, an analog axis' "
"strength will never be equal to ``0.0`` due to how the controller is "
"physically built. Instead, it will linger at a low value such as ``0.062``. "
"This phenomenon is known as *drifting* and can be more noticeable on old or "
"faulty controllers."
msgstr ""
"與鍵盤和滑鼠不同，控制器的軸是*類比*輸入。類比輸入的好處是能提供 ``0.0`` 到 "
"``1.0`` 的任意強度，數位輸入則只能有 ``0.0`` 或 ``1.0``。但缺點是，若沒有死區"
"設計，類比軸的值永遠不會精確等於 ``0.0``，而會維持在如 ``0.062`` 這樣的低值，"
"這種現象稱為*漂移*，在老舊或有缺陷的手把上更明顯。"

msgid ""
"Let's take a racing game as a real-world example. Thanks to analog inputs, "
"we can steer the car slowly in one direction or another. However, without a "
"deadzone system, the car would slowly steer by itself even if the player "
"isn't touching the joystick. This is because the directional axis strength "
"won't be equal to ``0.0`` when we expect it to. Since we don't want our car "
"to steer by itself in this case, we define a \"dead zone\" value of ``0.2`` "
"which will ignore all input whose strength is lower than ``0.2``. An ideal "
"dead zone value is high enough to ignore the input caused by joystick "
"drifting, but is low enough to not ignore actual input from the player."
msgstr ""
"以賽車遊戲為例：有了類比輸入，我們能讓車輛緩慢轉向。但若無死區，車輛即使玩家"
"沒碰搖桿，也會自己慢慢轉彎，因為軸向強度不會真的歸零。因此我們通常設定死區"
"（如 ``0.2``），忽略小於此強度的輸入。理想的死區要高到能排除漂移影響，但又不"
"會太高而誤判玩家的真實操作。"

msgid ""
"Godot features a built-in deadzone system to tackle this problem. The "
"default value is ``0.5``, but you can adjust it on a per-action basis in the "
"Project Settings' Input Map tab. For ``Input.get_vector()``, the deadzone "
"can be specified as an optional 5th parameter. If not specified, it will "
"calculate the average deadzone value from all of the actions in the vector."
msgstr ""
"Godot 內建死區系統來解決這個問題。預設值為 ``0.5``，但你可以在「專案設定」的"
"「輸入對應」分頁中，針對每個動作調整死區。對於 ``Input.get_vector()``，可指定"
"第 5 個參數為死區值，若未指定則會取所有動作的平均死區值。"

msgid "\"Echo\" events"
msgstr "「重複」事件"

msgid ""
"Unlike keyboard input, holding down a controller button such as a D-pad "
"direction will **not** generate repeated input events at fixed intervals "
"(also known as \"echo\" events). This is because the operating system never "
"sends \"echo\" events for controller input in the first place."
msgstr ""
"與鍵盤不同，長按手把的按鈕（如方向鍵）**不會**產生固定間隔的重複輸入事件（即"
"「重複」事件），因為作業系統對控制器輸入本就不會傳送這類事件。"

msgid ""
"If you want controller buttons to send echo events, you will have to "
"generate :ref:`class_InputEvent` objects by code and parse them "
"using :ref:`Input.parse_input_event() "
"<class_Input_method_parse_input_event>` at regular intervals. This can be "
"accomplished with the help of a :ref:`class_Timer` node."
msgstr ""
"若你要讓控制器按鈕也產生重複事件，需用程式自行產生 :ref:`class_InputEvent` 物"
"件，並定時用 :ref:`Input.parse_input_event() "
"<class_Input_method_parse_input_event>` 解析。你可以配合 :ref:`class_Timer` "
"節點達成此效果。"

msgid "Window focus"
msgstr "視窗焦點"

msgid ""
"Unlike keyboard input, controller inputs can be seen by **all** windows on "
"the operating system, including unfocused windows."
msgstr ""
"與鍵盤不同，控制器輸入會被作業系統上**所有**視窗接收到，即使該視窗未獲得焦"
"點。"

msgid ""
"While this is useful for `third-party split screen functionality <https://"
"nucleus-coop.github.io/>`__, it can also have adverse effects. Players may "
"accidentally send controller inputs to the running project while interacting "
"with another window."
msgstr ""
"這對於 `第三方分割畫面功能 <https://nucleus-coop.github.io/>`__ 很有幫助，但"
"也可能有負面影響：玩家在操作其他視窗時，仍可能誤觸並將控制器輸入傳送到正在執"
"行的專案。"

msgid ""
"If you wish to ignore events when the project window isn't focused, you will "
"need to create an :ref:`autoload <doc_singletons_autoload>` called ``Focus`` "
"with the following script and use it to check all your inputs:"
msgstr ""
"若希望在專案視窗未獲焦點時忽略控制器事件，請建立一個名為 ``Focus`` 的 :ref:`"
"自動載入 <doc_singletons_autoload>`，並用以下腳本來檢查所有輸入："

msgid ""
"Then, instead of using ``Input.is_action_pressed(action)``, use "
"``Focus.input_is_action_pressed(action)`` where ``action`` is the name of "
"the input action. Also, instead of using "
"``event.is_action_pressed(action)``, use "
"``Focus.event_is_action_pressed(event, action)`` where ``event`` is an "
"InputEvent reference and ``action`` is the name of the input action."
msgstr ""
"然後，請用 ``Focus.input_is_action_pressed(action)``（其中 ``action`` 為輸入"
"動作名稱）取代 ``Input.is_action_pressed(action)``。同理，請用 "
"``Focus.event_is_action_pressed(event, action)``（其中 ``event`` 是 "
"InputEvent 參照，``action`` 是動作名稱）取代 "
"``event.is_action_pressed(action)``。"

msgid "Power saving prevention"
msgstr "防止省電"

msgid ""
"Unlike keyboard and mouse input, controller inputs do **not** inhibit sleep "
"and power saving measures (such as turning off the screen after a certain "
"amount of time has passed)."
msgstr ""
"與鍵盤與滑鼠不同，控制器輸入**不會**阻止作業系統進入睡眠或省電（如螢幕逾時自"
"動關閉）。"

msgid ""
"To combat this, Godot enables power saving prevention by default when a "
"project is running. If you notice the system is turning off its display when "
"playing with a gamepad, check the value of **Display > Window > Energy "
"Saving > Keep Screen On** in the Project Settings."
msgstr ""
"因此 Godot 在專案執行時會自動啟用防止省電。如果你發現用手把遊玩時螢幕還是被關"
"閉，請檢查「專案設定」裡 **顯示 > 視窗 > 節能 > 保持螢幕開啟** 是否已啟用。"

msgid ""
"On Linux, power saving prevention requires the engine to be able to use D-"
"Bus. Check whether D-Bus is installed and reachable if running the project "
"within a Flatpak, as sandboxing restrictions may make this impossible by "
"default."
msgstr ""
"在 Linux 上，防止省電機制需引擎能存取 D-Bus。若你在 Flatpak 沙盒下執行專案，"
"請確認 D-Bus 已安裝且可用，因為沙盒限制預設會阻擋其存取。"

msgid "Troubleshooting"
msgstr "疑難排解"

msgid ""
"You can view a list of `known issues with controller support <https://"
"github.com/godotengine/godot/issues?"
"q=is%3Aopen+is%3Aissue+label%3Atopic%3Ainput+gamepad>`__ on GitHub."
msgstr ""
"你可以在 GitHub 上查看 `控制器支援相關已知問題列表 <https://github.com/"
"godotengine/godot/issues?"
"q=is%3Aopen+is%3Aissue+label%3Atopic%3Ainput+gamepad>`__。"

msgid "My controller isn't recognized by Godot."
msgstr "Godot 無法辨識我的控制器。"

msgid ""
"First, check that your controller is recognized by other applications. You "
"can use the `Gamepad Tester <https://gamepad-tester.com/>`__ website to "
"confirm that your controller is recognized."
msgstr ""
"首先，請確認你的控制器能被其他應用程式辨識。你可以用 `Gamepad Tester "
"<https://gamepad-tester.com/>`__ 網站測試控制器有無被正確辨識。"

msgid ""
"On Windows Godot only supports up to 4 controllers at a time. This is "
"because Godot uses the XInput API, which is limited to supporting 4 "
"controllers at once. Additional controllers above this limit are ignored by "
"Godot."
msgstr ""
"在 Windows 上，Godot 一次僅支援最多 4 支控制器。這是因為 Godot 採用 XInput "
"API，而此 API 最多只支援 4 支控制器。超過此數量的控制器將會被忽略。"

msgid "My controller has incorrectly mapped buttons or axes."
msgstr "我的控制器按鈕或軸對應錯誤。"

msgid ""
"First, if your controller provides some kind of firmware update utility, "
"make sure to run it to get the latest fixes from the manufacturer. For "
"instance, Xbox One and Xbox Series controllers can have their firmware "
"updated using the `Xbox Accessories app <https://www.microsoft.com/en-us/p/"
"xbox-accessories/9nblggh30xj3>`__. (This application only runs on Windows, "
"so you have to use a Windows machine or a Windows virtual machine with USB "
"support to update the controller's firmware.) After updating the "
"controller's firmware, unpair the controller and pair it again with your PC "
"if you are using the controller in wireless mode."
msgstr ""
"首先，若你的控制器有韌體更新工具，請務必更新到最新版本。例如 Xbox One 和 "
"Xbox Series 可用「Xbox 配件」App <https://www.microsoft.com/en-us/p/xbox-"
"accessories/9nblggh30xj3> 進行韌體更新（僅支援 Windows，需有實體或虛擬機器加 "
"USB 支援）。更新完後若以無線連線，請重新配對。"

msgid ""
"If buttons are incorrectly mapped, this may be due to an erroneous mapping "
"from the SDL game controller database used by Godot or the `Godot game "
"controller database <https://github.com/godotengine/godot/blob/master/core/"
"input/godotcontrollerdb.txt>`__. In this case, you will need to create a "
"custom mapping for your controller."
msgstr ""
"若仍有按鈕對應錯誤，可能是 Godot 所用 SDL 控制器資料庫（或 `Godot 控制器資料"
"庫 <https://github.com/godotengine/godot/blob/master/core/input/"
"godotcontrollerdb.txt>`__ ）的對應檔有誤。此時你需要為你的控制器製作自訂對"
"應。"

msgid ""
"There are many ways to create mappings. One option is to use the mapping "
"wizard in the `official Joypads demo <https://godotengine.org/asset-library/"
"asset/2785>`__. Once you have a working mapping for your controller, you can "
"test it by defining the ``SDL_GAMECONTROLLERCONFIG`` environment variable "
"before running Godot:"
msgstr ""
"建立對應有多種方式，其中之一是使用 `官方 Joypads 範例 <https://"
"godotengine.org/asset-library/asset/2785>`__ 的對應精靈。完成對應後，可在啟"
"動 Godot 前設定 ``SDL_GAMECONTROLLERCONFIG`` 環境變數來測試："

msgid ""
"To test mappings on non-desktop platforms or to distribute your project with "
"additional controller mappings, you can add them by "
"calling :ref:`Input.add_joy_mapping() <class_Input_method_add_joy_mapping>` "
"as early as possible in a script's ``_ready()`` function."
msgstr ""
"若要在非桌面平台測試對應，或欲隨專案附加額外控制器對應，請在腳本 "
"``_ready()`` 階段儘早呼叫 :ref:`Input.add_joy_mapping() "
"<class_Input_method_add_joy_mapping>` 以載入自訂對應。"

msgid ""
"Once you are satisfied with the custom mapping, you can contribute it for "
"the next Godot version by opening a pull request on the `Godot game "
"controller database <https://github.com/godotengine/godot/blob/master/core/"
"input/godotcontrollerdb.txt>`__."
msgstr ""
"確認自訂對應運作正常後，歡迎到 `Godot 控制器資料庫 <https://github.com/"
"godotengine/godot/blob/master/core/input/godotcontrollerdb.txt>`__ 提交 Pull "
"Request，讓下個 Godot 版本支援你的控制器。"

msgid "My controller works on a given platform, but not on another platform."
msgstr "我的控制器在某些平台可用，但在其他平台卻不可用。"

msgid "Linux"
msgstr "Linux"

msgid ""
"If you're using a self-compiled engine binary, make sure it was compiled "
"with udev support. This is enabled by default, but it is possible to disable "
"udev support by specifying ``udev=no`` on the SCons command line. If you're "
"using an engine binary supplied by a Linux distribution, double-check "
"whether it was compiled with udev support."
msgstr ""
"若你用自行編譯的引擎執行檔，請確認已啟用 udev 支援（預設為開啟），不然在 "
"SCons 編譯時加入 ``udev=no`` 會導致關閉。若用的是 Linux 發行版自帶的執行檔，"
"也請確認其是否有啟用 udev。"

msgid ""
"Controllers can still work without udev support, but it is less reliable as "
"regular polling must be used to check for controllers being connected or "
"disconnected during gameplay (hotplugging)."
msgstr ""
"控制器即使沒 udev 支援仍有機會運作，但穩定性較差，因為無法即時偵測熱插拔，只"
"能定時輪詢檢查連接變化。"

msgid "HTML5"
msgstr "HTML5"

msgid ""
"HTML5 controller support is often less reliable compared to \"native\" "
"platforms. The quality of controller support tends to vary wildly across "
"browsers. As a result, you may have to instruct your players to use a "
"different browser if they can't get their controller to work."
msgstr ""
"HTML5 平台的控制器支援通常不如「原生」平台穩定，不同瀏覽器的相容性有很大差"
"異。如果玩家的控制器無法使用，可能需要請他們嘗試更換瀏覽器。"
