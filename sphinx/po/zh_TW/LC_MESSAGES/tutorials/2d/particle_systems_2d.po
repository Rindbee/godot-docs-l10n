#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "2D particle systems"
msgstr "2D 粒子系統"

msgid "Intro"
msgstr "簡介"

msgid ""
"Particle systems are used to simulate complex physical effects, such as "
"sparks, fire, magic particles, smoke, mist, etc."
msgstr ""
"粒子系統可用於模擬複雜的物理效果，例如火花、火焰、魔法粒子、煙霧、霧氣等。"

msgid ""
"The idea is that a \"particle\" is emitted at a fixed interval and with a "
"fixed lifetime. During its lifetime, every particle will have the same base "
"behavior. What makes each particle different from the rest and provides a "
"more organic look is the \"randomness\" associated with each parameter. In "
"essence, creating a particle system means setting base physics parameters "
"and then adding randomness to them."
msgstr ""
"基本概念是以固定間隔發射具有固定壽命的「粒子」。在存活期間，每個粒子的基本行"
"為相同，但每顆粒子因為參數中的「隨機性」而呈現出不同與更自然的效果。簡單來"
"說，建立粒子系統就是設定物理參數，再為每個參數加入隨機性。"

msgid "Particle nodes"
msgstr "粒子節點"

msgid ""
"Godot provides two different nodes for 2D "
"particles, :ref:`class_GPUParticles2D` and :ref:`class_CPUParticles2D`. "
"GPUParticles2D is more advanced and uses the GPU to process particle "
"effects. CPUParticles2D is a CPU-driven option with near-feature parity with "
"GPUParticles2D, but lower performance when using large amounts of particles. "
"On the other hand, CPUParticles2D may perform better on low-end systems or "
"in GPU-bottlenecked situations."
msgstr ""
"Godot 提供兩種 2D 粒子節點：:ref:`class_GPUParticles2D` "
"和 :ref:`class_CPUParticles2D`。GPUParticles2D 較為先進，使用 GPU 處理粒子特"
"效；CPUParticles2D 則由 CPU 處理，功能大致相同，但在大量粒子時效能較差。不過"
"在低階設備或 GPU 效能受限時，CPUParticles2D 可能會有較佳表現。"

msgid ""
"While GPUParticles2D is configured via "
"a :ref:`class_ParticleProcessMaterial` (and optionally with a custom "
"shader), the matching options are provided via node properties in "
"CPUParticles2D (with the exception of the trail settings)."
msgstr ""
"GPUParticles2D 主要透過 :ref:`class_ParticleProcessMaterial` （也可使用自訂 "
"Shader）來設定，而 CPUParticles2D 則是直接由節點屬性進行設定（軌跡設定除"
"外）。"

msgid ""
"You can convert a CPUParticles2D node into a GPUParticles2D node by clicking "
"on the node in the scene tree, selecting the 2D workspace, and selecting "
"**CPUParticles2D > Convert to GPUParticles2D** in the toolbar."
msgstr ""
"你可以在場景樹中點擊 CPUParticles2D 節點，切換到 2D 工作區，然後在工具列選擇 "
"**CPUParticles2D > 轉換為 GPUParticles2D** 進行轉換。"

msgid ""
"It is also possible to convert a GPUParticles2D node to a CPUParticles2D "
"node, however there may be issues if you use GPU-only features."
msgstr ""
"同樣也可以將 GPUParticles2D 節點轉換回 CPUParticles2D，但如果專案使用到僅限 "
"GPU 的功能，轉換後可能會有問題。"

msgid ""
"The rest of this tutorial is going to use the GPUParticles2D node. First, "
"add a GPUParticles2D node to your scene. After creating that node you will "
"notice that only a white dot was created, and that there is a warning icon "
"next to your GPUParticles2D node in the scene dock. This is because the node "
"needs a ParticleProcessMaterial to function."
msgstr ""
"本教學接下來將以 GPUParticles2D 節點為例。首先，將 GPUParticles2D 節點加入場"
"景。你會發現只會出現一個白點，而且場景樹上的 GPUParticles2D 節點旁會出現警告"
"圖示，這是因為該節點尚未設定 ParticleProcessMaterial。"

msgid "ParticleProcessMaterial"
msgstr "ParticleProcessMaterial"

msgid ""
"To add a process material to your particles node, go to ``Process Material`` "
"in your inspector panel. Click on the box next to ``Material``, and from the "
"dropdown menu select ``New ParticleProcessMaterial``."
msgstr ""
"要為粒子節點新增運算材質，請在屬性面板中找到 ``Process Material``，點選 "
"``Material`` 右側的方框，並從下拉選單選擇 ``新建 ParticleProcessMaterial``。"

msgid "Your GPUParticles2D node should now be emitting white points downward."
msgstr "現在 GPUParticles2D 節點應該會朝下噴射出白色粒子。"

msgid "Texture"
msgstr "貼圖"

msgid ""
"A particle system can use a single texture or an animation *flipbook*. A "
"flipbook is a texture that contains several frames of animation that can be "
"played back, or chosen at random during emission. This is equivalent to a "
"spritesheet for particles."
msgstr ""
"粒子系統可以使用單一貼圖或動畫翻頁（flipbook）。翻頁貼圖是一種包含多張動畫影"
"格的圖像，可於粒子發射時依序播放或隨機選取，相當於粒子專用的精靈貼圖集"
"（spritesheet）。"

msgid "The texture is set via the **Texture** property:"
msgstr "可以透過 **Texture** 屬性來設定貼圖："

msgid "Using an animation flipbook"
msgstr "使用動畫翻頁貼圖"

msgid ""
"Particle flipbooks are suited to reproduce complex effects such as smoke, "
"fire, explosions. They can also be used to introduce random texture "
"variation, by making every particle use a different texture. You can find "
"existing particle flipbook images online, or pre-render them using external "
"tools such as `Blender <https://www.blender.org/>`__ or `EmberGen <https://"
"jangafx.com/software/embergen/>`__."
msgstr ""
"粒子翻頁貼圖（flipbook）特別適合重現如煙霧、火焰、爆炸等複雜效果，也可用來讓"
"每一顆粒子顯示不同貼圖，製造隨機變化。你可以在網路上找到現成的粒子翻頁貼圖，"
"或用像 Blender、EmberGen 這類外部工具預先產生。"

msgid "Example of a particle system that uses a flipbook texture"
msgstr "使用翻頁貼圖的粒子系統範例"

msgid ""
"Using an animation flipbook requires additional configuration compared to a "
"single texture. For demonstration purposes, we'll use this texture with 5 "
"columns and 7 rows (right-click and choose **Save as…**):"
msgstr ""
"使用動畫翻頁貼圖時，需要額外設定。以下以 5 欄 7 列的貼圖作為範例（可右鍵另存"
"圖片）："

msgid "Particle flipbook texture example"
msgstr "粒子翻頁貼圖範例"

msgid ""
"Credit: `JoesAlotofthings <https://opengameart.org/content/alot-of-particles-"
"indispersal-special-effect-alotofparticles30>`__ (CC BY 4.0)"
msgstr "素材來源：JoesAlotofthings（CC BY 4.0）"

msgid ""
"To use an animation flipbook, you must create a new CanvasItemMaterial in "
"the Material section of the GPUParticles2D (or CPUParticles2D) node:"
msgstr ""
"要使用動畫翻頁貼圖，必須在 GPUParticles2D（或 CPUParticles2D）節點的 "
"Material 欄位新增一個 CanvasItemMaterial："

msgid ""
"Creating a CanvasItemMaterial at the bottom of the particles node inspector"
msgstr "在粒子節點屬性面板最下方建立一個 CanvasItemMaterial"

msgid ""
"In this CanvasItemMaterial, enable **Particle Animation** and set **H "
"Frames** and **V Frames** to the number of columns and rows present in your "
"flipbook texture:"
msgstr ""
"在這個 CanvasItemMaterial 裡，請啟用 **Particle Animation**，並將 **H "
"Frames** 與 **V Frames** 設定為貼圖的欄數與列數："

msgid "Configuring the CanvasItemMaterial for the example flipbook texture"
msgstr "設定 CanvasItemMaterial 以配合範例翻頁貼圖"

msgid ""
"Once this is done, the :ref:`Animation section "
"<doc_particle_systems_2d_animation>` in ParticleProcessMaterial (for "
"GPUParticles2D) or in the CPUParticles2D inspector will be effective."
msgstr ""
"完成上述設定後，ParticleProcessMaterial（於 GPUParticles2D）或 "
"CPUParticles2D 檢查器的 :ref:`動畫區段 <doc_particle_systems_2d_animation>` "
"就會生效。"

msgid ""
"If your flipbook texture has a black background instead of a transparent "
"background, you will also need to set the blend mode to **Add** instead of "
"**Mix** for correct display. Alternatively, you can modify the texture to "
"have a transparent background in an image editor. In `GIMP <https://"
"gimp.org>`__, this can be done using the **Color > Color to Alpha** menu."
msgstr ""
"如果你的翻頁貼圖背景是黑色而非透明，請將混合模式（Blend Mode）設為 **Add**"
"（加法），而不是預設的 **Mix**，才能正確顯示。你也可以用圖像編輯器（例如 "
"GIMP 的「顏色→顏色轉透明」功能）將黑色背景改為透明。"

msgid "Time parameters"
msgstr "Time (時間)參數"

msgid "Lifetime"
msgstr "生命期"

msgid ""
"The time in seconds that every particle will stay alive. When lifetime ends, "
"a new particle is created to replace it."
msgstr ""
"每個粒子存活的時間(以秒為單位). 生命週期結束時, 會建立一個新粒子來替換它."

msgid "Lifetime: 0.5"
msgstr "壽命:0.5"

msgid "Lifetime: 4.0"
msgstr "壽命:4.0"

msgid "One Shot"
msgstr "一次性"

msgid ""
"When enabled, a GPUParticles2D node will emit all of its particles once and "
"then never again."
msgstr "啟用後,Particles2D節點將一次性發出所有粒子, 然後再也不發射."

msgid "Preprocess"
msgstr "預處理"

msgid ""
"Particle systems begin with zero particles emitted, then start emitting. "
"This can be an inconvenience when loading a scene and systems like a torch, "
"mist, etc. begin emitting the moment you enter. Preprocess is used to let "
"the system process a given number of seconds before it is actually drawn the "
"first time."
msgstr ""
"粒子系統從沒有粒子被發射開始, 然後開始發射. 當載入場景如火炬, 霧等系統時可能"
"會帶來不便, 因為它會在進入場景的那一刻開始發射. 預處理用於讓系統在第一次實際"
"繪製之前處理給定的秒數."

msgid "Speed Scale"
msgstr "速度縮放"

msgid ""
"The speed scale has a default value of ``1`` and is used to adjust the speed "
"of a particle system. Lowering the value will make the particles slower "
"while increasing the value will make the particles much faster."
msgstr ""
"速度比例具有預設值 ``1`` , 用於調整粒子系統的速度. 降低值會使粒子變慢, 而增加"
"值會使粒子更快."

msgid "Explosiveness"
msgstr "爆炸性"

msgid ""
"If lifetime is ``1`` and there are 10 particles, it means a particle will be "
"emitted every 0.1 seconds. The explosiveness parameter changes this, and "
"forces particles to be emitted all together. Ranges are:"
msgstr ""
"如果有10個壽命為 ``1`` 的粒子, 則意味著粒子將每0.1秒發射一次. 爆炸性參數改變"
"了這一點, 並迫使粒子一起發射. 範圍是:"

msgid "0: Emit particles at regular intervals (default value)."
msgstr "0: 定期發射粒子(預設值)."

msgid "1: Emit all particles simultaneously."
msgstr "1: 同時發射所有粒子."

msgid ""
"Values in the middle are also allowed. This feature is useful for creating "
"explosions or sudden bursts of particles:"
msgstr "中間的值也是允許的. 此功能對於建立爆炸或突然爆發的粒子非常有用:"

msgid "Randomness"
msgstr "隨機性"

msgid ""
"All physics parameters can be randomized. Random values range from ``0`` to "
"``1``. The formula to randomize a parameter is:"
msgstr ""
"所有物理參數都可以隨機化. 隨機值範圍從 ``0`` 到 ``1`` . 隨機化參數的公式為:"

msgid "Fixed FPS"
msgstr "固定 FPS"

msgid ""
"This setting can be used to set the particle system to render at a fixed "
"FPS. For instance, changing the value to ``2`` will make the particles "
"render at 2 frames per second. Note this does not slow down the particle "
"system itself."
msgstr ""
"此設定可用於將粒子系統設定為以固定的影格率算繪. 例如, 將值更改為 ``2`` 將使粒"
"子以每秒2影格的速度算繪. 請注意, 這不會減慢粒子系統本身的速度."

msgid ""
"Godot 4.3 does not currently support physics interpolation for 2D particles. "
"As a workaround, disable physics interpolation for the particles node by "
"setting **Node > Physics Interpolation > Mode** at the bottom of the "
"inspector."
msgstr ""
"Godot 4.3 目前尚未支援 2D 粒子的物理插值。可暫時將檢查器底部 **節點 > "
"Physics Interpolation > Mode** 設為關閉，來避免相關影響。"

msgid "Fract Delta"
msgstr "分數誤差補償（Fract Delta）"

msgid ""
"Setting Fract Delta to ``true`` results in fractional delta calculation, "
"which has a smoother particles display effect. This increased smoothness "
"stems from higher accuracy. The difference is more noticeable in systems "
"with high randomness or fast-moving particles. It helps maintain the visual "
"consistency of the particle system, making sure that each particle's motion "
"aligns with its actual lifespan. Without it, particles might appear to jump "
"or move more than they should in a single frame if they are emitted at a "
"point within the frame. The greater accuracy has a performance tradeoff, "
"particularly in systems with a higher amount of particles."
msgstr ""
"將 Fract Delta 設為 ``true`` （啟用分數誤差補償）可以讓粒子的顯示效果更加平"
"滑，特別是在隨機性高或高速粒子系統中更明顯。這項功能可讓每顆粒子的運動更精確"
"地對應其壽命，避免出現粒子跳動或突然位移。需注意，開啟此功能可能會略為降低效"
"能，特別是在粒子數量龐大時。"

msgid "Drawing parameters"
msgstr "繪製參數"

msgid "Visibility Rect"
msgstr "可見矩形"

msgid ""
"The visibility rectangle controls the visibility of the particles on screen. "
"If this rectangle is outside of the viewport, the engine will not render the "
"particles on screen."
msgstr ""
"可見性矩形控制粒子在螢幕上的可見性. 如果此矩形位於視口之外, 則引擎將不會在螢"
"幕上算繪粒子."

msgid ""
"The rectangle's ``W`` and ``H`` properties respectively control its Width "
"and its Height. The ``X`` and ``Y`` properties control the position of the "
"upper-left corner of the rectangle, relative to the particle emitter."
msgstr ""
"矩形的 ``W`` 和 ``H`` 屬性分別控制其寬度和高度. ``X`` 和 ``Y`` 屬性控制矩形左"
"上角相對於粒子發射器的位置."

msgid ""
"You can have Godot generate a Visibility Rect automatically using the "
"toolbar above the 2d view. To do so, select the GPUParticles2D node and "
"Click ``Particles > Generate Visibility Rect``. Godot will simulate the "
"Particles2D node emitting particles for a few seconds and set the rectangle "
"to fit the surface the particles take."
msgstr ""
"可以使用2D視圖上方的工具列自動生成可見性區域. 為此, 請選擇Particles2D節點, 然"
"後按一下 ``粒子 > 生成視覺化區域`` . Godot將模擬Particles2D節點發射粒子幾秒"
"鐘, 並將矩形區域設定為適合粒子的大小."

msgid ""
"You can control the emit duration with the ``Generation Time (sec)`` option. "
"The maximum value is 25 seconds. If you need more time for your particles to "
"move around, you can temporarily change the ``preprocess`` duration on the "
"Particles2D node."
msgstr ""
"你可以使用 ``Generation Time (sec)`` 選項控制發射持續時間. 最大值為25秒. 如果"
"您需要更多時間讓粒子移動, 您可以暫時更改Particles2D節點上的 ``preprocess`` 時"
"間."

msgid "Local Coords"
msgstr "本地座標"

msgid ""
"By default this option is on, and it means that the space that particles are "
"emitted to is relative to the node. If the node is moved, all particles are "
"moved with it:"
msgstr ""
"預設情況下, 此選項處於啟用狀態, 這意味著粒子發射的空間是相對於節點來算的. 如"
"果移動節點, 則所有粒子會隨之移動:"

msgid ""
"If disabled, particles will emit to global space, meaning that if the node "
"is moved, already emitted particles are not affected:"
msgstr ""
"如果禁用, 粒子將發射到全域空間, 這意味著如果移動節點, 則已發射的粒子不會受到"
"影響:"

msgid "Draw Order"
msgstr "繪製順序"

msgid ""
"This controls the order in which individual particles are drawn. ``Index`` "
"means particles are drawn according to their emission order (default). "
"``Lifetime`` means they are drawn in order of remaining lifetime."
msgstr ""
"這可以控制繪製單個粒子的順序. ``Index`` 表示粒子根據它們的發射順序被繪製(預"
"設). ``Lifetime`` 表示它們按照剩餘壽命的順序被繪製."

msgid "Particle Process Material Settings"
msgstr "粒子處理材質設定"

msgid ""
"For information on the settings in the ParticleProcessMaterial "
"see :ref:`this page<doc_particle_process_material_2d>`."
msgstr ""
"關於 ParticleProcessMaterial 的設定，請參考 :ref:`本頁 "
"<doc_particle_process_material_2d>`。"
