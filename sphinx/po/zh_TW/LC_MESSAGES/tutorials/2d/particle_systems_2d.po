#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "2D particle systems"
msgstr "粒子"

msgid "Intro"
msgstr "簡介"

msgid ""
"Particle systems are used to simulate complex physical effects, such as "
"sparks, fire, magic particles, smoke, mist, etc."
msgstr ""
"Godot提供了一種簡單(但對於大多數用途而言足夠靈活)的粒子系統. 粒子系統用於類比"
"複雜的物理效應, 如火花, 火焰, 魔法粒子, 煙霧, 霧氣, 等."

msgid ""
"The idea is that a \"particle\" is emitted at a fixed interval and with a "
"fixed lifetime. During its lifetime, every particle will have the same base "
"behavior. What makes each particle different from the rest and provides a "
"more organic look is the \"randomness\" associated with each parameter. In "
"essence, creating a particle system means setting base physics parameters "
"and then adding randomness to them."
msgstr ""
"這個想法是以固定的間隔發射具有固定的壽命的 \"粒子\". 在其生命週期中, 每個粒子"
"都具有相同的基本行為. 讓每個粒子變得不同並提供整體更加 \"有機\" 外觀的是與各"
"個參數相關的 \"隨機性\". 實質上, 建立粒子系統意味著設定基本物理參數, 然後為它"
"們新增隨機性."

msgid "Particle nodes"
msgstr "粒子"

msgid ""
"Godot provides two different nodes for 2D particles, :ref:"
"`class_GPUParticles2D` and :ref:`class_CPUParticles2D`. GPUParticles2D is "
"more advanced and uses the GPU to process particle effects. CPUParticles2D "
"is a CPU-driven option with near-feature parity with GPUParticles2D, but "
"lower performance when using large amounts of particles. On the other hand, "
"CPUParticles2D may perform better on low-end systems or in GPU-bottlenecked "
"situations."
msgstr ""
"Godot 為 2D 粒子提供了兩個不同的節點：:ref:`class_Particles2D` 和 :ref:"
"`class_CPUParticles2D`。Particles2D 更為先進，使用 GPU 處理粒子效果，但這將其"
"限制於相對高端的圖形 API 中，在我們的情況下僅限於 GLES3 算繪器。對於使用 "
"GLES2 後端的專案，CPUParticles2D 是一個 CPU 驅動的選項。其功能與 Particles2D "
"接近，但性能較低。Particles2D 是通過 :ref:`class_ParticlesMaterial`（以及可選"
"的自訂 Shader）來配置的，但相應的選項在 CPUParticles2D 中是通過節點屬性提供的"
"（軌跡設定除外）。您可以通過按一下場景中的節點，然後在工具列的“粒子”功能表中"
"選擇“轉換為 CPU 粒子”，將 Particles2D 節點轉換為 CPUParticles2D 節點。"

msgid ""
"While GPUParticles2D is configured via a :ref:"
"`class_ParticleProcessMaterial` (and optionally with a custom shader), the "
"matching options are provided via node properties in CPUParticles2D (with "
"the exception of the trail settings)."
msgstr ""
"雖然 GPUParticles2D 是通過 :ref:`class_ParticleProcessMaterial`（還可以使用自"
"訂著色器）進行配置的，不過配對的選項是通過 CPUParticles2D 中的節點屬性提供的"
"（除了軌跡設定）。"

msgid ""
"The rest of this tutorial is going to use the GPUParticles2D node. First, "
"add a GPUParticles2D node to your scene. After creating that node you will "
"notice that only a white dot was created, and that there is a warning icon "
"next to your GPUParticles2D node in the scene dock. This is because the node "
"needs a ParticleProcessMaterial to function."
msgstr ""
"這個教學後續將使用 Particles2D 節點。首先，新增一個 Particles2D 節點到場景"
"中。在建立該節點後，您會注意到只建立了一個白點，並且在場景面板的 Particles2D "
"節點旁邊有一個警告圖示。這是因為節點需要 ParticlesMaterial 才能工作。"

msgid "ParticleProcessMaterial"
msgstr "ParticleProcessMaterial"

msgid ""
"To add a process material to your particles node, go to ``Process Material`` "
"in your inspector panel. Click on the box next to ``Material``, and from the "
"dropdown menu select ``New ParticleProcessMaterial``."
msgstr ""
"要將運作材質新增到粒子節點，請轉到屬性面板面板中的 ``Process Material``。按一"
"下 ``Material`` 旁邊的框，然後從下拉式功能表中選擇 ``新建 "
"ParticlesMaterial``。"

msgid "Your GPUParticles2D node should now be emitting white points downward."
msgstr "您的 Particles2D 節點現在應該可以向下發射白點了。"

msgid "Texture"
msgstr "紋理貼圖"

msgid "Time parameters"
msgstr "Time (時間)參數"

msgid "Lifetime"
msgstr "生命期"

msgid ""
"The time in seconds that every particle will stay alive. When lifetime ends, "
"a new particle is created to replace it."
msgstr ""
"每個粒子存活的時間(以秒為單位). 生命週期結束時, 會建立一個新粒子來替換它."

msgid "Lifetime: 0.5"
msgstr "壽命:0.5"

msgid "Lifetime: 4.0"
msgstr "壽命:4.0"

msgid "One Shot"
msgstr "一次性"

msgid ""
"When enabled, a GPUParticles2D node will emit all of its particles once and "
"then never again."
msgstr "啟用後,Particles2D節點將一次性發出所有粒子, 然後再也不發射."

msgid "Preprocess"
msgstr "預處理"

msgid ""
"Particle systems begin with zero particles emitted, then start emitting. "
"This can be an inconvenience when loading a scene and systems like a torch, "
"mist, etc. begin emitting the moment you enter. Preprocess is used to let "
"the system process a given number of seconds before it is actually drawn the "
"first time."
msgstr ""
"粒子系統從沒有粒子被發射開始, 然後開始發射. 當載入場景如火炬, 霧等系統時可能"
"會帶來不便, 因為它會在進入場景的那一刻開始發射. 預處理用於讓系統在第一次實際"
"繪製之前處理給定的秒數."

msgid "Speed Scale"
msgstr "速度縮放"

msgid ""
"The speed scale has a default value of ``1`` and is used to adjust the speed "
"of a particle system. Lowering the value will make the particles slower "
"while increasing the value will make the particles much faster."
msgstr ""
"速度比例具有預設值 ``1`` , 用於調整粒子系統的速度. 降低值會使粒子變慢, 而增加"
"值會使粒子更快."

msgid "Explosiveness"
msgstr "爆炸性"

msgid ""
"If lifetime is ``1`` and there are 10 particles, it means a particle will be "
"emitted every 0.1 seconds. The explosiveness parameter changes this, and "
"forces particles to be emitted all together. Ranges are:"
msgstr ""
"如果有10個壽命為 ``1`` 的粒子, 則意味著粒子將每0.1秒發射一次. 爆炸性參數改變"
"了這一點, 並迫使粒子一起發射. 範圍是:"

msgid "0: Emit particles at regular intervals (default value)."
msgstr "0: 定期發射粒子(預設值)."

msgid "1: Emit all particles simultaneously."
msgstr "1: 同時發射所有粒子."

msgid ""
"Values in the middle are also allowed. This feature is useful for creating "
"explosions or sudden bursts of particles:"
msgstr "中間的值也是允許的. 此功能對於建立爆炸或突然爆發的粒子非常有用:"

msgid "Randomness"
msgstr "隨機性"

msgid ""
"All physics parameters can be randomized. Random values range from ``0`` to "
"``1``. The formula to randomize a parameter is:"
msgstr ""
"所有物理參數都可以隨機化. 隨機值範圍從 ``0`` 到 ``1`` . 隨機化參數的公式為:"

msgid "Fixed FPS"
msgstr "固定 FPS"

msgid ""
"This setting can be used to set the particle system to render at a fixed "
"FPS. For instance, changing the value to ``2`` will make the particles "
"render at 2 frames per second. Note this does not slow down the particle "
"system itself."
msgstr ""
"此設定可用於將粒子系統設定為以固定的影格率算繪. 例如, 將值更改為 ``2`` 將使粒"
"子以每秒2影格的速度算繪. 請注意, 這不會減慢粒子系統本身的速度."

msgid "Fract Delta"
msgstr "分數差異量"

msgid "Drawing parameters"
msgstr "Drawing parameters (繪圖參數)"

msgid "Visibility Rect"
msgstr "可見矩形"

msgid ""
"The visibility rectangle controls the visibility of the particles on screen. "
"If this rectangle is outside of the viewport, the engine will not render the "
"particles on screen."
msgstr ""
"可見性矩形控制粒子在螢幕上的可見性. 如果此矩形位於視口之外, 則引擎將不會在螢"
"幕上算繪粒子."

msgid ""
"The rectangle's ``W`` and ``H`` properties respectively control its Width "
"and its Height. The ``X`` and ``Y`` properties control the position of the "
"upper-left corner of the rectangle, relative to the particle emitter."
msgstr ""
"矩形的 ``W`` 和 ``H`` 屬性分別控制其寬度和高度. ``X`` 和 ``Y`` 屬性控制矩形左"
"上角相對於粒子發射器的位置."

msgid ""
"You can have Godot generate a Visibility Rect automatically using the "
"toolbar above the 2d view. To do so, select the GPUParticles2D node and "
"Click ``Particles > Generate Visibility Rect``. Godot will simulate the "
"Particles2D node emitting particles for a few seconds and set the rectangle "
"to fit the surface the particles take."
msgstr ""
"可以使用2D視圖上方的工具列自動生成可見性區域. 為此, 請選擇Particles2D節點, 然"
"後按一下 ``粒子 > 生成視覺化區域`` . Godot將模擬Particles2D節點發射粒子幾秒"
"鐘, 並將矩形區域設定為適合粒子的大小."

msgid ""
"You can control the emit duration with the ``Generation Time (sec)`` option. "
"The maximum value is 25 seconds. If you need more time for your particles to "
"move around, you can temporarily change the ``preprocess`` duration on the "
"Particles2D node."
msgstr ""
"你可以使用 ``Generation Time (sec)`` 選項控制發射持續時間. 最大值為25秒. 如果"
"您需要更多時間讓粒子移動, 您可以暫時更改Particles2D節點上的 ``preprocess`` 時"
"間."

msgid "Local Coords"
msgstr "本地座標"

msgid ""
"By default this option is on, and it means that the space that particles are "
"emitted to is relative to the node. If the node is moved, all particles are "
"moved with it:"
msgstr ""
"預設情況下, 此選項處於啟用狀態, 這意味著粒子發射的空間是相對於節點來算的. 如"
"果移動節點, 則所有粒子會隨之移動:"

msgid ""
"If disabled, particles will emit to global space, meaning that if the node "
"is moved, already emitted particles are not affected:"
msgstr ""
"如果禁用, 粒子將發射到全域空間, 這意味著如果移動節點, 則已發射的粒子不會受到"
"影響:"

msgid "Draw Order"
msgstr "繪製順序"

msgid ""
"This controls the order in which individual particles are drawn. ``Index`` "
"means particles are drawn according to their emission order (default). "
"``Lifetime`` means they are drawn in order of remaining lifetime."
msgstr ""
"這可以控制繪製單個粒子的順序. ``Index`` 表示粒子根據它們的發射順序被繪製(預"
"設). ``Lifetime`` 表示它們按照剩餘壽命的順序被繪製."
