#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Godot 通知"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_private_method__notification>` method. Its purpose is to allow "
"the Object to respond to a variety of engine-level callbacks that may relate "
"to it. For example, if the engine tells a :ref:`CanvasItem "
"<class_CanvasItem>` to \"draw\", it will call "
"``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Godot 中的每個 :ref:`_notification "
"<class_Object_private_method__notification>` 方法都是由 Object 實作的。其目的"
"是讓 Object 能夠回應各種可能與其相關的引擎層級回呼。例如，如果引擎告知一"
"個 :ref:`CanvasItem <class_CanvasItem>`「繪製」，它將會呼叫 "
"``_notification(NOTIFICATION_DRAW)`` 。"

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"這些通知中，如 draw 之類的通知，很適合在腳本中覆寫。這些適合覆寫的通知多到 "
"Godot 特地將這些通知暴露成專屬函式："

msgid "``_ready()``: ``NOTIFICATION_READY``"
msgstr "``_ready()`` : NOTIFICATION_READY"

msgid "``_enter_tree()``: ``NOTIFICATION_ENTER_TREE``"
msgstr "``_enter_tree()`` : NOTIFICATION_ENTER_TREE"

msgid "``_exit_tree()``: ``NOTIFICATION_EXIT_TREE``"
msgstr "``_exit_tree()`` : NOTIFICATION_EXIT_TREE"

msgid "``_process(delta)``: ``NOTIFICATION_PROCESS``"
msgstr "``_process(delta)`` : NOTIFICATION_PROCESS"

msgid "``_physics_process(delta)``: ``NOTIFICATION_PHYSICS_PROCESS``"
msgstr "``_physics_process(delta)`` : NOTIFICATION_PHYSICS_PROCESS"

msgid "``_draw()``: ``NOTIFICATION_DRAW``"
msgstr "``_draw()`` : NOTIFICATION_DRAW"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone, for example:"
msgstr "使用者可能 **沒注意到** ，除了 Node 之外其他型別的節點也有通知："

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>` ：會在物件初始化時觸發的"
"回呼。腳本無法存取。"

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a \"destructor\"."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>` ：會在引擎刪除 Object 時觸發"
"的回呼，即「解構函式」。"

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"而且，Node 節點中許多 **真實存在** 的回呼都沒有專屬的方法，但這些回呼還是很實"
"用。"

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>` ：會在每次將子節點加入另一個節點"
"時觸發的回呼。"

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>` ：會在每次子節點從另一個節點中"
"移除時觸發的回呼。"

msgid ""
"One can access all these custom notifications from the universal "
"``_notification()`` method."
msgstr "我們可以通過通用的 ``_notification`` 方法來存取這些自定通知。"

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr "在說明文件中標記為「虛擬」的方法都是為了讓腳本覆寫而存在的。"

msgid ""
"A classic example is the :ref:`_init <class_Object_private_method__init>` "
"method in Object. While it has no ``NOTIFICATION_*`` equivalent, the engine "
"still calls the method. Most languages (except C#) rely on it as a "
"constructor."
msgstr ""
"一個經典的範例是 Object 中的 :ref:`_init "
"<class_Object_private_method__init>` 方法。雖然它沒有對應的 "
"``NOTIFICATION_*`` ，引擎仍然會呼叫這個方法。大多數程式語言（除了 C#）都依賴"
"它作為建構子。"

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr "那麼，各種通知與虛擬函式都應該分別在什麼狀況下使用呢？"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "\\ _process vs. _physics_process vs. \\*_input"

msgid ""
"Use ``_process()`` when one needs a framerate-dependent delta time between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-timeout loop is another option."
msgstr ""
"當我們需要處理各影格之間與 FPS 有關的 delta 時，就用 ``_process`` 。若更新物"
"件資料的程式碼需要儘可能頻繁更新，就適合在 ``_process`` 中處理。我們也通常會"
"把重複性的邏輯檢查以及資料快取放在這裡執行，但還是得取決於是否有需要頻繁地計"
"算。若不需要每一影格都執行的化，則可以實作一個 Timer-Yield-Timeout 循環來代"
"替。"

msgid ""
"Use ``_physics_process()`` when one needs a framerate-independent delta time "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"當需要的操作跟每影格之間的 delta 時間無關時，就可以用 ``_physics_process`` 。"
"如果程式碼需要不管時間快還是慢，都隨著時間持續更新的話，就適合用 "
"``_physics_process``。重複的動力學與物件變換操作應該在這個函式內執行。"

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process()`` and "
"``_physics_process()`` will trigger at every opportunity (they do not "
"\"rest\" by default). In contrast, ``*_input()`` callbacks will trigger only "
"on frames in which the engine has actually detected the input."
msgstr ""
"雖然可以在這些回呼中檢查輸入，但為了獲得最佳效能，應該避免這麼做。 "
"``_process`` 與 ``_physics_process`` 一有機會機會觸發 (預設情況下這些回呼都不"
"「休息」)。相反地， ``*_input`` 回呼則只會在引擎實際偵測到輸入的影格上才會呼"
"叫。"

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related delta time "
"methods as needed."
msgstr ""
"我們也可以在輸入回呼裡做一樣的輸入操作檢查。如果需要使用 delta 時間的話，則可"
"以從相關的 delta 時間方法中取得。"

msgid "_init vs. initialization vs. export"
msgstr "_init vs. 初始化 vs. 匯出"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute in ``_init()``. Other property or SceneTree-independent "
"initializations should also run here."
msgstr ""
"如果腳本初始化自己的節點子樹（沒有場景），該程式碼應該在 ``_init()`` 中執行。"
"其他屬性或獨立於 SceneTree 的初始化也應該在這裡執行。"

msgid "The C# equivalent to GDScript's ``_init()`` method is the constructor."
msgstr "C# 中對應 GDScript 的 ``_init()`` 方法是建構子。"

msgid ""
"``_init()`` triggers before ``_enter_tree()`` or ``_ready()``, but after a "
"script creates and initializes its properties. When instantiating a scene, "
"property values will set up according to the following sequence:"
msgstr ""
"``_init()`` 會在 ``_enter_tree()`` 或 ``_ready()`` 之前觸發，但在腳本建立並初"
"始化其屬性之後。當實例化場景時，屬性值會依照下列順序設定："

msgid ""
"**Initial value assignment:** the property is assigned its initialization "
"value, or its default value if one is not specified. If a setter exists, it "
"is not used."
msgstr ""
"**初始值賦予：** 屬性會被賦予其初始化時的值，如果沒有指定初始化值，則會使用預"
"設值。如果存在 setter 函式，則不會被調用。"

msgid ""
"``_init()`` **assignment:** the property's value is replaced by any "
"assignments made in ``_init()``, triggering the setter."
msgstr ""
"``_init()`` **賦值：** 屬性的值會被 ``_init()`` 中進行的任何賦值取代，並觸發 "
"setter。"

msgid ""
"**Exported value assignment:** an exported property's value is again "
"replaced by any value set in the Inspector, triggering the setter."
msgstr ""
"**匯出值賦予：** 匯出屬性的值會再次被屬性檢視器中設定的任何值取代，並觸發 "
"setter。"

msgid ""
"As a result, instantiating a script versus a scene may affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"因此，實例化腳本與實例化場景可能會影響初始化 *以及* 引擎呼叫 setter 的次數。"

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init()`` calls) and build the "
"tree going downwards from the root. This causes ``_enter_tree()`` calls to "
"cascade down the tree. Once the tree is complete, leaf nodes call "
"``_ready``. A node will call this method once all child nodes have finished "
"calling theirs. This then causes a reverse cascade going up back to the "
"tree's root."
msgstr ""
"當實體化一個連接到首次執行場景的場景時，Godot 會在場景樹中向下實體化 (呼叫 "
"``_init`` ) 並一直從根節點往深層建置。因為這樣，所以 ``_enter_tree`` 就是在場"
"景樹中由頂層往深層級呼叫的。建置完整棵樹後，葉上的節點就會呼叫 ``_ready`` 。"
"節點會在所有自節點都呼叫完 ``_ready`` 後才呼叫自己的 ``_ready`` ，因此在呼叫"
"的時候就是反過來從樹最深層往回呼叫到根節點。"

msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree()`` callbacks trigger. "
"Instead, only the ``_init()`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree()`` and ``_ready()`` calls occur."
msgstr ""
"當實體化腳本或獨立的場景時，節點並不會在建立時被加到 SceneTree 上，所以不會觸"
"發 ``_enter_tree`` 回呼，而只會有 ``_init`` 以及之後的 ``_ready`` 呼叫。"

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"如果有需要觸發作為另一個節點的母節點來發生的行為，而不管是否是作為母節點／有"
"效場景的一部分發生，可以使用 :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>` 通知。舉例來說，下列是一段能確保"
"能在不失敗的情況下將節點的方法連接至母節點中自定訊號的程式碼片段。適合用於在"
"執行階段建立且以資料為中心的節點上。"
