#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "3D rendering limitations"
msgstr "3D 算繪的局限性"

msgid "Introduction"
msgstr "前言"

msgid ""
"Due to their focus on performance, real-time rendering engines have many "
"limitations. Godot's renderer is no exception. To work effectively with "
"those limitations, you need to understand them."
msgstr ""
"出於對性能的要求, 即時算繪引擎有很多局限性.Godot的算繪器也不例外. 為了更有效"
"地工作, 你需要瞭解這些局限性."

msgid "Texture size limits"
msgstr "紋理尺寸限制"

msgid ""
"On desktops and laptops, textures larger than 8192×8192 may not be supported "
"on older devices. You can check your target GPU's limitations on `GPUinfo."
"org <https://www.gpuinfo.org/>`__."
msgstr ""
"在桌上型電腦和筆記型電腦上，舊裝置可能不支援大於 8192×8192 的紋理。你可以在 "
"`GPUinfo.org <https://www.gpuinfo.org/>`__ 上檢查你的目標 GPU 的限制。"

msgid ""
"Mobile GPUs are typically limited to 4096×4096 textures. Also, some mobile "
"GPUs don't support repeating non-power-of-two-sized textures. Therefore, if "
"you want your texture to display correctly on all platforms, you should "
"avoid using textures larger than 4096×4096 and use a power of two size if "
"the texture needs to repeat."
msgstr ""
"移動端GPU通常僅支援小於4096×4096的紋理. 此外, 一些移動端GPU不支援對非二的冪次"
"大小的紋理進行重複(repeat)操作. 因此, 如果你想讓你的紋理在所有平臺上正確顯"
"示, 你應該避免使用比4096×4096大的紋理, 如果紋理需要重複, 應該使用兩倍的大小."

msgid ""
"To limit the size of a specific texture that may be too large to render, you "
"can set the **Process > Size Limit** import option to a value greater than "
"``0``. This will reduce the texture's dimensions on import (preserving "
"aspect ratio) without affecting the source file."
msgstr ""
"若要限制可能太大而無法算繪的特定紋理的大小，您可以將 **Process > Size "
"Limit** 匯入選項設定為大於「0」的值。這將減少匯入時紋理的尺寸（保留縱橫比），"
"而不影響原始檔。"

msgid "Color banding"
msgstr "帶狀顏色"

msgid ""
"When using the Compatibility rendering method, HDR is not used and the color "
"precision is the lowest of all rendering methods. This also applies to 2D "
"rendering, where banding may be visible when using smooth gradient textures."
msgstr ""
"使用相容性算繪方法時，不使用 HDR，顏色精確度是所有算繪方法中最低的。這也適用"
"於 2D 算繪，其中使用平滑漸層紋理時可能會看到條帶。"

msgid "There are two main ways to alleviate banding:"
msgstr "Godot 沒有使用限制"

msgid ""
"Alternatively, bake some noise into your textures. This is mainly effective "
"in 2D, e.g. for vignetting effects. In 3D, you can also use a `custom "
"debanding shader <https://github.com/fractilegames/godot-gles2-debanding-"
"material>`__ to be applied on your *materials*. This technique works even if "
"your project is rendered with low color precision, which means it will work "
"when using the Mobile and Compatibility rendering methods."
msgstr ""
"或者，在你的紋理中烘焙一些雜訊。這主要在2D中是有效的，例如用於虛化效果。在3D"
"中，你也可以使用一個 `自訂去噪著色器 <https://github.com/fractilegames/godot-"
"gles2-debanding-material>`__ 來應用於你的 *材質* 。即使你的專案是用LDR算繪"
"的，這種技術也是有效的，這意味著它在使用GLES2算繪器時也能發揮作用。"

msgid "Color banding comparison (contrast increased for more visibility)"
msgstr "色帶比較（增加對比度以提高可視性）"

msgid ""
"See `Banding in Games: A Noisy Rant (PDF) <https://loopit.dk/"
"banding_in_games.pdf>`__ for more details about banding and ways to combat "
"it."
msgstr ""
"參見 `Banding in Games: A Noisy Rant <http://loopit.dk/banding_in_games."
"pdf>`__ 獲取更多有關條帶效應的細節和解決方案."

msgid "Depth buffer precision"
msgstr "深度緩衝精度"

msgid ""
"To sort objects in 3D space, rendering engines rely on a *depth buffer* "
"(also called *Z-buffer*). This buffer has a finite precision: 24-bit on "
"desktop platforms, sometimes 16-bit on mobile platforms (for performance "
"reasons). If two different objects end up on the same buffer value, then Z-"
"fighting will occur. This will materialize as textures flickering back and "
"forth as the camera moves or rotates."
msgstr ""
"為了在 3D 空間中排序物件，算繪引擎使用了*深度緩衝區*（也稱為 *Z 緩衝區*）。這"
"個緩衝區具有有限的精度：在桌面平臺上是 24 位，在移動平臺上有時是 16 位元（出"
"於性能原因）。如果兩個不同的物件最終具有相同的緩衝值，那麼就會發生 Z 衝突（Z-"
"fighting），此時移動或旋轉相機，將觀察到紋理來回閃爍。"

msgid ""
"To make the depth buffer more precise over the rendered area, you should "
"*increase* the Camera node's **Near** property. However, be careful: if you "
"set it too high, players will be able to see through nearby geometry. You "
"should also *decrease* the Camera node's **Far** property to the lowest "
"permissible value for your use case, though keep in mind it won't impact "
"precision as much as the **Near** property."
msgstr ""
"為了使深度緩衝在算繪區域上更精確，你應該*增加*相機節點的 **Near** 屬性。但是"
"要小心，如果你設定得太高，玩家就會看穿附近的幾何體。同時，還應該*減少*相機節"
"點的 **Far** 屬性到你用例允許的最低值，儘管它不會像 **Near** 屬性那樣影響精"
"度。"

msgid ""
"If you only need high precision when the player can see far away, you could "
"change it dynamically based on the game conditions. For instance, if the "
"player enters an airplane, the **Near** property can be temporarily "
"increased to avoid Z-fighting in the distance. It can then be decreased once "
"the player leaves the airplane."
msgstr ""
"如果你只需要當玩家能夠看到很遠的地方時才提供高精度, 你可以根據遊戲條件動態改"
"變它. 例如, 如果玩家進入飛機, **Near** 屬性可以暫時增加, 以避免遠處的z衝突現"
"象(z-fighting). 當玩家離開飛機時, 它便會被減少."

msgid ""
"Depending on the scene and viewing conditions, you may also be able to move "
"the Z-fighting objects further apart without the difference being visible to "
"the player."
msgstr ""
"根據場景和玩家視野條件, 你還可以在玩家不會看出差異的情況下將產生z衝突的物件移"
"得更遠."

msgid ""
"Z-fighting comparison (before and after tweaking the scene by offsetting the "
"Label3D away from the floor)"
msgstr "Z-fighting 比較（透過將 Label3D 偏離地板來調整場景前後）"

msgid "Transparency sorting"
msgstr "透明度排序"

msgid ""
"In Godot, transparent materials are drawn after opaque materials. "
"Transparent objects are sorted back to front before being drawn based on the "
"Node3D's position, not the vertex position in world space. Due to this, "
"overlapping objects may often be sorted out of order. To fix improperly "
"sorted objects, tweak the material's :ref:`Render Priority "
"<class_Material_property_render_priority>` property or the node's :ref:"
"`Sorting Offset <class_VisualInstance3D_property_sorting_offset>`. Render "
"Priority will force specific materials to appear in front of or behind other "
"transparent materials, while Sorting Offset will move the object forward or "
"backward for the purpose of sorting. Even then, these may not always be "
"sufficient."
msgstr ""
"在 Godot 中，透明材質是在不透明材質之後繪製的。透明對象在繪製之前會從後向前排"
"序，排序依據是該 Spatial 的位置，而不是世界空間中頂點的位置。因此, 互相有重疊"
"的物件可能會出現排序錯誤的情況。要修復排序不當的物件，可以調整材質的 :ref:"
"`Render Priority <class_Material_property_render_priority>` 屬性。這將迫使特"
"定的材質出現在其他透明材質的前面或後面。即便如此，這可能也並不總是能解決問"
"題。"

msgid ""
"Some rendering engines feature *order-independent transparency* techniques "
"to alleviate this, but this is costly on the GPU. Godot currently doesn't "
"provide this feature. There are still several ways to avoid this problem:"
msgstr ""
"一些算繪引擎會使用*順序無關的透明*技術來緩解這個問題，但這類技術對於 GPU 而言"
"開銷很大。Godot 目前沒有提供這個功能，但仍然有幾種方法可以避免這個問題："

msgid ""
"Only make materials transparent if you actually need it. If a material only "
"has a small transparent part, consider splitting it into a separate "
"material. This will allow the opaque part to cast shadows and will also "
"improve performance."
msgstr ""
"只有在你真正需要的時候才讓材質透明。如果一種材質只有一個很小的透明部分，考慮"
"將它分割成一個單獨的材質。這將允許不透明部分投射陰影，也可能提高性能。"

msgid ""
"If your texture mostly has fully opaque and fully transparent areas, you can "
"use alpha testing instead of alpha blending. This transparency mode is "
"faster to render and doesn't suffer from transparency issues. Enable "
"**Transparency > Transparency** to **Alpha Scissor** in StandardMaterial3D, "
"and adjust **Transparency > Alpha Scissor Threshold** accordingly if needed. "
"Note that MSAA will not antialias the texture's edges unless alpha "
"antialiasing is enabled in the material's properties. However, FXAA, TAA and "
"supersampling will be able to antialias the texture's edges regardless of "
"whether alpha antialiasing is enabled on the material."
msgstr ""
"如果你的紋理上大部分都是完全不透明或完全透明的區域，可以使用 Alpha 測試而不"
"是 Alpha 混合。這個透明模式算繪起來比較快，沒有透明度問題。可以在 "
"SpatialMaterial 中啟用**參數 > 使用 Alpha 裁剪**，需要時還可以相應地對 "
"**Alpha 裁剪閾值**進行調整。請注意，MSAA 不會對該紋理的邊緣進行抗鋸齒，但 "
"FXAA 會。"

msgid ""
"If you need to render semi-transparent areas of the texture, alpha scissor "
"isn't suitable. Instead, setting the StandardMaterial3D's **Transparency > "
"Transparency** property to **Depth Pre-Pass** can sometimes work (at a "
"performance cost). You can also try the **Alpha Hash** mode."
msgstr ""
"如果你需要算繪紋理上的半透明區域，Alpha 裁剪就不適用了。將 SpatialMaterial 的"
"**參數 > 深度繪製模式**屬性設為 **Opaque Pre-Pass**（不透明預處理）有時候會有"
"用（但會影響性能）。"

msgid ""
"Transparency sorting comparison (alpha-blended materials on the left, alpha "
"scissor materials on the right)"
msgstr "透明度排序比較（左邊是alpha混合材質，右邊是alpha剪刀材質）"
