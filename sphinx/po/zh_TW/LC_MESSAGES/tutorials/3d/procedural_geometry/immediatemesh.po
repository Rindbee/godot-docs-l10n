#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using ImmediateMesh"
msgstr "使用 ImmediateMesh"

msgid ""
"The :ref:`ImmediateMesh <class_ImmediateMesh>` is a convenient tool to "
"create dynamic geometry using an OpenGL 1.x-style API. Which makes it both "
"approachable to use and efficient for meshes which need to be updated every "
"frame."
msgstr ""
":ref:`ImmediateMesh <class_ImmediateMesh>` 是一個方便的工具，可以用 OpenGL "
"1.x 風格的 API 建立動態幾何體。這讓它適合用於需要每影格即時更新的網格，且易於"
"使用。"

msgid ""
"Generating complex geometry (several thousand vertices) with this tool is "
"inefficient, even if it's done only once. Instead, it is designed to "
"generate simple geometry that changes every frame."
msgstr ""
"使用這個工具產生複雜幾何體（數千個頂點）效率不高，即使只產生一次也是如此。"
"ImmediateMesh 的設計目標是用來生成每影格變化的簡單幾何體。"

msgid ""
"First, you need to create a :ref:`MeshInstance3D <class_meshinstance3d>` and "
"add an :ref:`ImmediateMesh <class_ImmediateMesh>` to it in the Inspector."
msgstr ""
"首先，你需要在編輯器中建立一個 :ref:`MeshInstance3D <class_meshinstance3d>`，"
"並在屬性檢視器中將 :ref:`ImmediateMesh <class_ImmediateMesh>` 指派給它。"

msgid ""
"Next, add a script to the MeshInstance3D. The code for the ImmediateMesh "
"should go in the ``_process()`` function if you want it to update each "
"frame, or in the ``_ready()`` function if you want to create the mesh once "
"and not update it. If you only generate a surface once, the ImmediateMesh is "
"just as efficient as any other kind of mesh as the generated mesh is cached "
"and reused."
msgstr ""
"接著，將腳本掛到 MeshInstance3D 上。如果要每影格即時更新，請將 ImmediateMesh "
"的程式碼寫在 ``_process()``。若只需建立一次網格且不會更新，則可寫在 "
"``_ready()``。若只產生一次表面，ImmediateMesh 的效能與其他網格類型相同，因為"
"生成後會快取重複利用。"

msgid ""
"To begin generating geometry you must call ``surface_begin()``. "
"``surface_begin()`` takes a ``PrimitiveType`` as an argument. "
"``PrimitiveType`` instructs the GPU how to arrange the primitive based on "
"the vertices given whether it is triangles, lines, points, etc. A complete "
"list can be found under the :ref:`Mesh <class_mesh>` class reference page."
msgstr ""
"要開始生成幾何體，必須先呼叫 ``surface_begin()``。``surface_begin()`` 需要一"
"個 ``PrimitiveType`` 參數，這是用來指示 GPU 如何根據給定頂點組合出三角形、線"
"段、點等。所有可用的型別都可以在 :ref:`Mesh <class_mesh>` 類別參考頁找到。"

msgid ""
"Once you have called ``surface_begin()`` you are ready to start adding "
"vertices. You add vertices one at a time. First you add vertex specific "
"attributes such as normals or UVs using ``surface_set_****()`` (e.g. "
"``surface_set_normal()``). Then you call ``surface_add_vertex()`` to add a "
"vertex with those attributes. For example:"
msgstr ""
"呼叫 ``surface_begin()`` 之後，就可以開始逐一新增頂點。首先，透過 "
"``surface_set_****()``（如 ``surface_set_normal()``）指定頂點的屬性（如法線"
"或 UV），然後用 ``surface_add_vertex()`` 將該頂點加入網格。範例如下："

msgid ""
"Only attributes added before the call to ``surface_add_vertex()`` will be "
"included in that vertex. If you add an attribute twice before calling "
"``surface_add_vertex()``, only the second call will be used."
msgstr ""
"只有在呼叫 ``surface_add_vertex()`` 之前設定的屬性，才會包含在該頂點中。若重"
"複設定同一屬性，僅最後一次設定會生效。"

msgid ""
"Finally, once you have added all your vertices call ``surface_end()`` to "
"signal that you have finished generating the surface. You can call "
"``surface_begin()`` and ``surface_end()`` multiple times to generate "
"multiple surfaces for the mesh."
msgstr ""
"最後，當加入所有頂點後，請呼叫 ``surface_end()``，通知 Godot 你已完成該表面。"
"你也可以多次呼叫 ``surface_begin()`` 和 ``surface_end()``，以建立多個表面。"

msgid ""
"The example code below draws a single triangle in the ``_ready()`` function."
msgstr "以下範例會在 ``_ready()`` 函式中繪製一個三角形。"

msgid ""
"The ImmediateMesh can also be used across frames. Each time you call "
"``surface_begin()`` and ``surface_end()``, you are adding a new surface to "
"the ImmediateMesh. If you want to recreate the mesh from scratch each frame, "
"call ``clear_surfaces()`` before calling ``surface_begin()``."
msgstr ""
"ImmediateMesh 也可以跨影格使用。每次呼叫 ``surface_begin()`` 和 "
"``surface_end()``，都會新增一個新表面到 ImmediateMesh。如果你想每影格都從零重"
"新建立網格，請在呼叫 ``surface_begin()`` 之前先呼叫 ``clear_surfaces()``。"

msgid ""
"The above code will dynamically create and draw a single surface each frame."
msgstr "上述程式碼會在每個影格動態建立並繪製一個表面。"
