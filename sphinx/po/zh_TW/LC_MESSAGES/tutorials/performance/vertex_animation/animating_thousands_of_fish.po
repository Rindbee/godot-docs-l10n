#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Animating thousands of fish with MultiMeshInstance3D"
msgstr "用 MultiMeshInstance3D 動畫化數千條魚"

msgid ""
"This tutorial explores a technique used in the game `ABZU <https://"
"www.gdcvault.com/play/1024409/Creating-the-Art-of-ABZ>`_ for rendering and "
"animating thousands of fish using vertex animation and static mesh "
"instancing."
msgstr ""
"本教學將介紹遊戲 `ABZU <https://www.gdcvault.com/play/1024409/Creating-the-"
"Art-of-ABZ>`_ 所採用的技術，透過頂點動畫與靜態網格實例化，來繪製並動畫化成千"
"上萬條魚。"

msgid ""
"In Godot, this can be accomplished with a custom :ref:`Shader "
"<class_Shader>` and a :ref:`MultiMeshInstance3D "
"<class_MultiMeshInstance3D>`. Using the following technique you can render "
"thousands of animated objects, even on low-end hardware."
msgstr ""
"在 Godot 中，可以透過自訂 :ref:`Shader <class_Shader>` "
"及 :ref:`MultiMeshInstance3D <class_MultiMeshInstance3D>` 來實現。應用下述技"
"術，即使在較低階硬體上也能渲染數以千計的動畫物件。"

msgid ""
"We will start by animating one fish. Then, we will see how to extend that "
"animation to thousands of fish."
msgstr "我們將先從動畫一條魚開始，接著說明如何將動畫擴展到數千條魚。"

msgid "Animating one Fish"
msgstr "動畫化一條魚"

msgid ""
"We will start with a single fish. Load your fish model into "
"a :ref:`MeshInstance3D <class_MeshInstance3D>` and add a "
"new :ref:`ShaderMaterial <class_ShaderMaterial>`."
msgstr ""
"我們先從一條魚開始。將你的魚模型載入 :ref:`MeshInstance3D "
"<class_MeshInstance3D>`，然後新增一個 :ref:`ShaderMaterial "
"<class_ShaderMaterial>`。"

msgid ""
"Here is the fish we will be using for the example images, you can use any "
"fish model you like."
msgstr "以下是本教程範例使用的魚模型圖片，你也可以選用任何你喜歡的魚模型。"

msgid ""
"The fish model in this tutorial is made by `QuaterniusDev <https://"
"quaternius.com>`_ and is shared with a creative commons license. CC0 1.0 "
"Universal (CC0 1.0) Public Domain Dedication https://creativecommons.org/"
"publicdomain/zero/1.0/"
msgstr ""
"本教學所用魚模型由 `QuaterniusDev <https://quaternius.com>`_ 製作，並以 CC0 "
"1.0 Universal (CC0 1.0) 公共領域貢獻協議釋出：https://creativecommons.org/"
"publicdomain/zero/1.0/"

msgid ""
"Typically, you would use bones and a :ref:`Skeleton3D <class_Skeleton3D>` to "
"animate objects. However, bones are animated on the CPU and so you end "
"having to calculate thousands of operations every frame and it becomes "
"impossible to have thousands of objects. Using vertex animation in a vertex "
"shader, you avoid using bones and can instead calculate the full animation "
"in a few lines of code and completely on the GPU."
msgstr ""
"一般來說，你會用骨骼與 :ref:`Skeleton3D <class_Skeleton3D>` 進行物件動畫。不"
"過，骨骼動畫運算是在 CPU 上執行，每一影格都需計算大量操作，因此難以同時處理大"
"量物件。若改用頂點著色器進行頂點動畫，則可完全不依賴骨骼，只需幾行程式碼就能"
"在 GPU 上完成整個動畫運算。"

msgid "The animation will be made of four key motions:"
msgstr "動畫主要由四個關鍵動作組成："

msgid "A side to side motion"
msgstr "左右擺動"

msgid "A pivot motion around the center of the fish"
msgstr "以魚中心為軸的旋轉"

msgid "A panning wave motion"
msgstr "平移波浪運動"

msgid "A panning twist motion"
msgstr "平移扭轉運動"

msgid ""
"All the code for the animation will be in the vertex shader with uniforms "
"controlling the amount of motion. We use uniforms to control the strength of "
"the motion so that you can tweak the animation in editor and see the results "
"in real time, without the shader having to recompile."
msgstr ""
"所有動畫程式碼都寫在頂點著色器中，透過 uniform 變數來控制動作幅度。這讓你可以"
"在編輯器中調整動畫強度，並即時預覽結果，而不用重新編譯著色器。"

msgid ""
"All the motions will be made using cosine waves applied to ``VERTEX`` in "
"model space. We want the vertices to be in model space so that the motion is "
"always relative to the orientation of the fish. For example, side-to-side "
"will always move the fish back and forth in its left to right direction, "
"instead of on the ``x`` axis in the world orientation."
msgstr ""
"所有動作會利用餘弦波來變動模型空間的 ``VERTEX``。我們使用模型空間，是為了讓動"
"作總是依據魚的自身方向。例如，左右擺動時會隨魚的左右方向移動，不會跟著世界座"
"標的 ``x`` 軸動。"

msgid ""
"In order to control the speed of the animation, we will start by defining "
"our own time variable using ``TIME``."
msgstr "為了控制動畫速度，我們會先用 ``TIME`` 定義自己的時間變數。"

msgid ""
"The first motion we will implement is the side to side motion. It can be "
"made by offsetting ``VERTEX.x`` by ``cos`` of ``TIME``. Each time the mesh "
"is rendered, all the vertices will move to the side by the amount of "
"``cos(time)``."
msgstr ""
"我們首先實作的是左右擺動。只要用 ``cos(TIME)`` 去偏移 ``VERTEX.x``，每次網格"
"渲染時，所有頂點就會根據 ``cos(time)`` 的數值左右擺動。"

msgid "The resulting animation should look something like this:"
msgstr "這個動畫效果大致如下："

msgid ""
"Next, we add the pivot. Because the fish is centered at (0, 0), all we have "
"to do is multiply ``VERTEX`` by a rotation matrix for it to rotate around "
"the center of the fish."
msgstr ""
"接著，我們加入旋轉軸。由於魚的中心點在 (0, 0)，只要將 ``VERTEX`` 乘以旋轉矩"
"陣，就能讓魚繞自身中心旋轉。"

msgid "We construct a rotation matrix like so:"
msgstr "旋轉矩陣的建構方式如下："

msgid ""
"And then we apply it in the ``x`` and ``z`` axes by multiplying it by "
"``VERTEX.xz``."
msgstr ""
"然後將旋轉作用於 ``x`` 與 ``z`` 軸，只要把旋轉矩陣乘上 ``VERTEX.xz`` 即可。"

msgid "With only the pivot applied you should see something like this:"
msgstr "僅套用旋轉軸後，你會看到如下效果："

msgid ""
"The next two motions need to pan down the spine of the fish. For that, we "
"need a new variable, ``body``. ``body`` is a float that is ``0`` at the tail "
"of the fish and ``1`` at its head."
msgstr ""
"接下來的兩個動作需要沿著魚的脊椎方向平移。為此，我們要用一個新變數 ``body``。"
"``body`` 是一個浮點值，尾巴端為 ``0``，魚頭端為 ``1``。"

msgid ""
"The next motion is a cosine wave that moves down the length of the fish. To "
"make it move along the spine of the fish, we offset the input to ``cos`` by "
"the position along the spine, which is the variable we defined above, "
"``body``."
msgstr ""
"下一個動畫是沿著魚身長度滑動的餘弦波。為了讓波浪沿魚脊椎推移，我們用 "
"``body`` 這個變數來偏移 ``cos`` 的輸入值。"

msgid ""
"This looks very similar to the side to side motion we defined above, but in "
"this one, by using ``body`` to offset ``cos`` each vertex along the spine "
"has a different position in the wave making it look like a wave is moving "
"along the fish."
msgstr ""
"這個動作看起來跟前面的左右擺動很像，但這裡每個頂點因為 ``body`` 偏移而處在波"
"浪曲線的不同位置，所以效果像是一個波浪順著魚身流動。"

msgid ""
"The last motion is the twist, which is a panning roll along the spine. "
"Similarly to the pivot, we first construct a rotation matrix."
msgstr ""
"最後一個動作是扭轉，也就是沿脊椎方向的滾動。我們同樣先建立一個旋轉矩陣。"

msgid ""
"We apply the rotation in the ``xy`` axes so that the fish appears to roll "
"around its spine. For this to work, the fish's spine needs to be centered on "
"the ``z`` axis."
msgstr ""
"我們將旋轉套用在 ``xy`` 軸，使魚看起來繞著脊椎滾動。要達到這個效果，魚的脊椎"
"必須對齊 ``z`` 軸中心。"

msgid "Here is the fish with twist applied:"
msgstr "這是加上扭轉後的魚："

msgid ""
"If we apply all these motions one after another, we get a fluid jelly-like "
"motion."
msgstr "若將上述所有動作依序套用，就會得到類似果凍般流暢的運動感。"

msgid ""
"Normal fish swim mostly with the back half of their body. Accordingly, we "
"need to limit the panning motions to the back half of the fish. To do this, "
"we create a new variable, ``mask``."
msgstr ""
"一般魚類主要用身體後半部游泳。因此，我們需要將波浪和平移的動作限制在魚的後半"
"部。為此，我們會新增一個變數 ``mask``。"

msgid ""
"``mask`` is a float that goes from ``0`` at the front of the fish to ``1`` "
"at the end using ``smoothstep`` to control the point at which the transition "
"from ``0`` to ``1`` happens."
msgstr ""
"``mask`` 是個浮點值，利用 ``smoothstep`` 讓它從魚頭（0）平滑過渡到魚尾（1），"
"用來控制動作作用區域。"

msgid "Below is an image of the fish with ``mask`` used as ``COLOR``:"
msgstr "下圖為將 ``mask`` 直接用於 ``COLOR`` 時魚的樣子："

msgid ""
"For the wave, we multiply the motion by ``mask`` which will limit it to the "
"back half."
msgstr "對於波浪動作，只要將其乘以 ``mask``，即可將影響範圍限制在後半部。"

msgid ""
"In order to apply the mask to the twist, we use ``mix``. ``mix`` allows us "
"to mix the vertex position between a fully rotated vertex and one that is "
"not rotated. We need to use ``mix`` instead of multiplying ``mask`` by the "
"rotated ``VERTEX`` because we are not adding the motion to the ``VERTEX`` we "
"are replacing the ``VERTEX`` with the rotated version. If we multiplied that "
"by ``mask``, we would shrink the fish."
msgstr ""
"要將遮罩應用在扭轉動作上，我們會用 ``mix``。``mix`` 可以在未旋轉和完全旋轉之"
"間混合頂點位置。這裡不能直接用 ``mask`` 乘旋轉後的 ``VERTEX``，否則會導致魚縮"
"小，所以必須用 ``mix`` 進行混和。"

msgid "Putting the four motions together gives us the final animation."
msgstr "將這四個動作結合，就能得到最終的魚動畫效果。"

msgid ""
"Go ahead and play with the uniforms in order to alter the swim cycle of the "
"fish. You will find that you can create a wide variety of swim styles using "
"these four motions."
msgstr ""
"你可以多調整不同 uniform 參數，改變魚的游泳週期。只靠這四種動作組合，就能創造"
"各種不同的游泳風格。"

msgid "Making a school of fish"
msgstr "製作魚群"

msgid ""
"Godot makes it easy to render thousands of the same object using a "
"MultiMeshInstance3D node."
msgstr "Godot 利用 MultiMeshInstance3D 節點，能輕鬆渲染數以千計的同類物件。"

msgid ""
"A MultiMeshInstance3D node is created and used the same way you would make a "
"MeshInstance3D node. For this tutorial, we will name the MultiMeshInstance3D "
"node ``School``, because it will contain a school of fish."
msgstr ""
"MultiMeshInstance3D 的建立與使用方式和 MeshInstance3D 節點類似。在本教學中，"
"我們將 MultiMeshInstance3D 節點命名為 ``School``，因為這裡會放一整群魚。"

msgid ""
"Once you have a MultiMeshInstance3D add a :ref:`MultiMesh "
"<class_MultiMesh>`, and to that MultiMesh add your :ref:`Mesh <class_Mesh>` "
"with the shader from above."
msgstr ""
"建立 MultiMeshInstance3D 後，請新增一個 :ref:`MultiMesh <class_MultiMesh>` ，"
"並將上面用到的 :ref:`Mesh <class_Mesh>` （含著色器）加入 MultiMesh。"

msgid ""
"MultiMeshes draw your Mesh with three additional per-instance properties: "
"Transform (rotation, translation, scale), Color, and Custom. Custom is used "
"to pass in 4 multi-use variables using a :ref:`Color <class_Color>`."
msgstr ""
"MultiMesh 除了一般網格外，還能為每個實例設定三種屬性：變換（旋轉、平移、縮"
"放）、顏色與自訂資料。自訂屬性可用 :ref:`Color <class_Color>` 傳遞 4 個浮點數"
"作各種用途。"

msgid ""
"``instance_count`` specifies how many instances of the mesh you want to "
"draw. For now, leave ``instance_count`` at ``0`` because you cannot change "
"any of the other parameters while ``instance_count`` is larger than ``0``. "
"We will set ``instance count`` in GDScript later."
msgstr ""
"``instance_count`` 決定要實例化幾個網格。現在可以先設成 ``0``，因為只要大於 "
"0，其他參數就無法修改。我們稍後會用 GDScript 設定 ``instance_count``。"

msgid ""
"``transform_format`` specifies whether the transforms used are 3D or 2D. For "
"this tutorial, select 3D."
msgstr "``transform_format`` 用來指定要用 3D 還是 2D 變換。本教學請選擇 3D。"

msgid ""
"For both ``color_format`` and ``custom_data_format`` you can choose between "
"``None``, ``Byte``, and ``Float``. ``None`` means you won't be passing in "
"that data (either a per-instance ``COLOR`` variable, or ``INSTANCE_CUSTOM``) "
"to the shader. ``Byte`` means each number making up the color you pass in "
"will be stored with 8 bits while ``Float`` means each number will be stored "
"in a floating-point number (32 bits). ``Float`` is slower but more precise, "
"``Byte`` will take less memory and be faster, but you may see some visual "
"artifacts."
msgstr ""
"``color_format`` 和 ``custom_data_format`` 都可選擇 ``None``、``Byte`` 或 "
"``Float``。``None`` 代表不傳送這些資料（無論是 ``COLOR`` 或 "
"``INSTANCE_CUSTOM``）給著色器。``Byte`` 會用 8 位元儲存每個數值，``Float`` 則"
"用 32 位元浮點數。``Float`` 精度高但較慢，``Byte`` 記憶體用量少且速度快，但可"
"能出現畫面誤差。"

msgid "Now, set ``instance_count`` to the number of fish you want to have."
msgstr "現在請將 ``instance_count`` 設為你想要的魚的數量。"

msgid "Next we need to set the per-instance transforms."
msgstr "接著要設定每個實例的變換資訊。"

msgid ""
"There are two ways to set per-instance transforms for MultiMeshes. The first "
"is entirely in editor and is described in the :ref:`MultiMeshInstance3D "
"tutorial <doc_using_multi_mesh_instance>`."
msgstr ""
"MultiMesh 的每個實例變換可以有兩種設定方式：一種完全在編輯器中完成，詳"
"見 :ref:`MultiMeshInstance3D 教學 <doc_using_multi_mesh_instance>`。"

msgid ""
"The second is to loop over all the instances and set their transforms in "
"code. Below, we use GDScript to loop over all the instances and set their "
"transform to a random position."
msgstr ""
"另一種做法是用程式逐一設定每個實例的變換。以下例子用 GDScript 走訪所有實例，"
"並將它們放到隨機位置。"

msgid ""
"Running this script will place the fish in random positions in a box around "
"the position of the MultiMeshInstance3D."
msgstr ""
"執行此腳本會將所有魚隨機分布在 MultiMeshInstance3D 節點附近的方形區域中。"

msgid ""
"If performance is an issue for you, try running the scene with fewer fish."
msgstr "如果效能不佳，請嘗試減少魚的數量來執行場景。"

msgid ""
"Notice how all the fish are all in the same position in their swim cycle? It "
"makes them look very robotic. The next step is to give each fish a different "
"position in the swim cycle so the entire school looks more organic."
msgstr ""
"你會發現所有魚的游泳動作都同步，看起來很機械化。接下來我們要讓每條魚在週期中"
"處於不同的位置，讓整個魚群更自然。"

msgid "Animating a school of fish"
msgstr "動畫化魚群"

msgid ""
"One of the benefits of animating the fish using ``cos`` functions is that "
"they are animated with one parameter, ``time``. In order to give each fish a "
"unique position in the swim cycle, we only need to offset ``time``."
msgstr ""
"利用 ``cos`` 函式為魚做動畫的一大優點是，只需一個 ``time`` 參數。只要給每條魚"
"一個不同的時間偏移，就能讓牠們的動作週期錯開。"

msgid ""
"We do that by adding the per-instance custom value ``INSTANCE_CUSTOM`` to "
"``time``."
msgstr ""
"我們只需要將每個實例的自訂值 ``INSTANCE_CUSTOM`` 加到 ``time`` 上即可。"

msgid ""
"Next, we need to pass a value into ``INSTANCE_CUSTOM``. We do that by adding "
"one line into the ``for`` loop from above. In the ``for`` loop we assign "
"each instance a set of four random floats to use."
msgstr ""
"接下來要將值傳入 ``INSTANCE_CUSTOM``。只要在前述 ``for`` 迴圈中多加一行，給每"
"個實例隨機分配四個浮點數。"

msgid ""
"Now the fish all have unique positions in the swim cycle. You can give them "
"a little more individuality by using ``INSTANCE_CUSTOM`` to make them swim "
"faster or slower by multiplying by ``TIME``."
msgstr ""
"這樣每條魚在週期裡的位置都不同。你也可以透過 ``INSTANCE_CUSTOM`` 讓每條魚的速"
"度不同，只要乘以 ``TIME`` 就行。"

msgid ""
"You can even experiment with changing the per-instance color the same way "
"you changed the per-instance custom value."
msgstr "你也可以像設定自訂值那樣，隨機指定每個實例的顏色。"

msgid ""
"One problem that you will run into at this point is that the fish are "
"animated, but they are not moving. You can move them by updating the per-"
"instance transform for each fish every frame. Although doing so will be "
"faster than moving thousands of MeshInstance3Ds per frame, it'll still "
"likely be slow."
msgstr ""
"這時你會發現雖然魚有動畫，但它們其實沒移動。你可以每一影格去更新每條魚的實例"
"變換，雖然這比動態更新上千個 MeshInstance3D 要快，但仍然可能不夠流暢。"

msgid ""
"In the next tutorial we will cover how to use :ref:`GPUParticles3D "
"<class_GPUParticles3D>` to take advantage of the GPU and move each fish "
"around individually while still receiving the benefits of instancing."
msgstr ""
"在下一個教學中，我們會介紹如何用 :ref:`GPUParticles3D "
"<class_GPUParticles3D>` 來善用 GPU，不僅能獨立移動每條魚，也能維持實例化的效"
"能優勢。"
