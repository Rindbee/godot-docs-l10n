#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "General optimization tips"
msgstr "一般最佳化技巧"

msgid "Introduction"
msgstr "前言"

msgid ""
"In an ideal world, computers would run at infinite speed. The only limit to "
"what we could achieve would be our imagination. However, in the real world, "
"it's all too easy to produce software that will bring even the fastest "
"computer to its knees."
msgstr ""
"在理想世界中，電腦能以無限的速度運作，唯一的限制就是我們的想像力。然而在現實"
"中，要寫出讓即使是最快電腦也跑不動的軟體，其實非常容易。"

msgid ""
"Thus, designing games and other software is a compromise between what we "
"would like to be possible, and what we can realistically achieve while "
"maintaining good performance."
msgstr ""
"因此，設計遊戲或其他軟體時，我們必須在「想做的事情」和「在維持良好效能下實際"
"能做到的事情」之間取得平衡。"

msgid "To achieve the best results, we have two approaches:"
msgstr "要達到最佳結果，我們有兩種方法："

msgid "Work faster."
msgstr "讓運作更快。"

msgid "Work smarter."
msgstr "讓方法更聰明。"

msgid "And preferably, we will use a blend of the two."
msgstr "理想上，兩者應該兼顧。"

msgid "Smoke and mirrors"
msgstr "障眼法與假象"

msgid ""
"Part of working smarter is recognizing that, in games, we can often get the "
"player to believe they're in a world that is far more complex, interactive, "
"and graphically exciting than it really is. A good programmer is a magician, "
"and should strive to learn the tricks of the trade while trying to invent "
"new ones."
msgstr ""
"聰明地開發的一環，就是知道在遊戲裡，我們經常能讓玩家相信他們正處在一個比實際"
"更複雜、更互動、畫面更華麗的世界。一個好的程式設計師就像魔術師，應該不斷學習"
"業界的技巧，並試著發明新手法。"

msgid "The nature of slowness"
msgstr "效能瓶頸的本質"

msgid ""
"To the outside observer, performance problems are often lumped together. But "
"in reality, there are several different kinds of performance problems:"
msgstr "對外行人來說，所有效能問題看起來都一樣，但其實效能問題有不同類型："

msgid ""
"A slow process that occurs every frame, leading to a continuously low frame "
"rate."
msgstr "每一幀都會發生的慢處理，導致持續低幀率。"

msgid ""
"An intermittent process that causes \"spikes\" of slowness, leading to "
"stalls."
msgstr "間歇性發生、造成效能「尖峰」導致遊戲卡頓的處理。"

msgid ""
"A slow process that occurs outside of normal gameplay, for instance, when "
"loading a level."
msgstr "在一般遊戲流程外才出現的慢處理，比如載入關卡時。"

msgid "Each of these are annoying to the user, but in different ways."
msgstr "這些問題都會讓玩家感到困擾，只是方式不同。"

msgid "Measuring performance"
msgstr "效能量測"

msgid ""
"Probably the most important tool for optimization is the ability to measure "
"performance - to identify where bottlenecks are, and to measure the success "
"of our attempts to speed them up."
msgstr ""
"進行效能優化時，最重要的工具就是能夠量測效能：也就是能夠找出瓶頸在哪裡，並評"
"估我們的優化措施是否有效。"

msgid "There are several methods of measuring performance, including:"
msgstr "量測效能有幾種常見方法，包括："

msgid "Putting a start/stop timer around code of interest."
msgstr "針對想觀察的程式碼區塊加上啟動／停止計時器。"

msgid "Using the :ref:`Godot profiler <doc_the_profiler>`."
msgstr "使用 :ref:`Godot 分析器 <doc_the_profiler>`。"

msgid "Using :ref:`external CPU profilers <doc_using_cpp_profilers>`."
msgstr "使用 :ref:`外部 CPU 分析工具 <doc_using_cpp_profilers>`。"

msgid ""
"Using external GPU profilers/debuggers such as `NVIDIA Nsight Graphics "
"<https://developer.nvidia.com/nsight-graphics>`__, `Radeon GPU Profiler "
"<https://gpuopen.com/rgp/>`__, `Intel Graphics Performance Analyzers "
"<https://www.intel.com/content/www/us/en/developer/tools/graphics-"
"performance-analyzers/overview.html>`__, or `Arm Performance Studio <https://"
"developer.arm.com/Tools%20and%20Software/Arm%20Performance%20Studio>`__."
msgstr ""
"使用外部 GPU 分析工具或偵錯器，例如 `NVIDIA Nsight Graphics <https://"
"developer.nvidia.com/nsight-graphics>`__、`Radeon GPU Profiler <https://"
"gpuopen.com/rgp/>`__、`Intel Graphics Performance Analyzers <https://"
"www.intel.com/content/www/us/en/developer/tools/graphics-performance-"
"analyzers/overview.html>`__，或 `Arm Performance Studio <https://"
"developer.arm.com/Tools%20and%20Software/Arm%20Performance%20Studio>`__。"

msgid ""
"Checking the frame rate (with V-Sync disabled). Third-party utilities such "
"as `RivaTuner Statistics Server <https://www.guru3d.com/files-details/rtss-"
"rivatuner-statistics-server-download.html>`__ (Windows) or `MangoHud "
"<https://github.com/flightlessmango/MangoHud>`__ (Linux) can also be useful "
"here."
msgstr ""
"檢查幀率（建議關閉 V-Sync ），也可以使用第三方工具，例如 Windows 上的 "
"`RivaTuner Statistics Server <https://www.guru3d.com/files-details/rtss-"
"rivatuner-statistics-server-download.html>`__，或 Linux 上的 `MangoHud "
"<https://github.com/flightlessmango/MangoHud>`__。"

msgid ""
"Using an unofficial `debug menu add-on <https://github.com/godot-extended-"
"libraries/godot-debug-menu>`__."
msgstr ""
"使用非官方的 `除錯選單擴充外掛 <https://github.com/godot-extended-libraries/"
"godot-debug-menu>`__。"

msgid ""
"Be very aware that the relative performance of different areas can vary on "
"different hardware. It's often a good idea to measure timings on more than "
"one device. This is especially the case if you're targeting mobile devices."
msgstr ""
"要特別注意，不同的硬體設備上，不同區塊的效能表現可能差異很大。建議在多個裝置"
"上量測效能，若目標平台包含行動裝置尤其要注意這點。"

msgid "Limitations"
msgstr "限制"

msgid ""
"CPU profilers are often the go-to method for measuring performance. However, "
"they don't always tell the whole story."
msgstr "CPU 分析器通常是效能分析的首選工具，但它們不一定能呈現全部事實。"

msgid ""
"Bottlenecks are often on the GPU, \"as a result\" of instructions given by "
"the CPU."
msgstr "瓶頸也常常會在 GPU，那是 CPU 發出指令後的「結果」。"

msgid ""
"Spikes can occur in the operating system processes (outside of Godot) \"as a "
"result\" of instructions used in Godot (for example, dynamic memory "
"allocation)."
msgstr ""
"有些效能尖峰，其實是在作業系統層級（Godot 之外）發生，是 Godot 執行某些操作"
"（例如動態記憶體配置）後的「結果」。"

msgid ""
"You may not always be able to profile specific devices like a mobile phone "
"due to the initial setup required."
msgstr "由於初始設定繁複，你不一定能隨時在特定裝置（例如手機）做效能分析。"

msgid ""
"You may have to solve performance problems that occur on hardware you don't "
"have access to."
msgstr "有時你甚至得解決那些你手邊沒有的硬體上發生的效能問題。"

msgid ""
"As a result of these limitations, you often need to use detective work to "
"find out where bottlenecks are."
msgstr "因此，你往往需要靠「偵探式」的排查手法來找出瓶頸所在。"

msgid "Detective work"
msgstr "偵探式排查"

msgid ""
"Detective work is a crucial skill for developers (both in terms of "
"performance, and also in terms of bug fixing). This can include hypothesis "
"testing, and binary search."
msgstr ""
"偵探式排查對開發者而言非常重要，不只用在效能問題，也常用於除錯。這包括假設驗"
"證和二分搜尋法。"

msgid "Hypothesis testing"
msgstr "假設驗證"

msgid ""
"Say, for example, that you believe sprites are slowing down your game. You "
"can test this hypothesis by:"
msgstr "假設你懷疑遊戲慢是因為精靈（Sprite）太多，可以這麼驗證："

msgid "Measuring the performance when you add more sprites, or take some away."
msgstr "嘗試增加或減少精靈數量，觀察效能變化。"

msgid ""
"This may lead to a further hypothesis: does the size of the sprite determine "
"the performance drop?"
msgstr "這又引發新假設：是否精靈圖片尺寸越大，效能掉越多？"

msgid ""
"You can test this by keeping everything the same, but changing the sprite "
"size, and measuring performance."
msgstr "那就只改變精靈尺寸，保持其他條件不變，然後量測效能來驗證。"

msgid "Binary search"
msgstr "二分搜尋法"

msgid ""
"If you know that frames are taking much longer than they should, but you're "
"not sure where the bottleneck lies. You could begin by commenting out "
"approximately half the routines that occur on a normal frame. Has the "
"performance improved more or less than expected?"
msgstr ""
"如果你知道每幀花的時間明顯超過預期，但不確定是哪裡出問題，可以先把一半的主要"
"處理程式碼註解掉，然後觀察效能提升幅度是否如預期?"

msgid ""
"Once you know which of the two halves contains the bottleneck, you can "
"repeat this process until you've pinned down the problematic area."
msgstr ""
"一旦知道是哪一半有瓶頸，再繼續對該部分重複此步驟，直到確定是哪裡出了問題。"

msgid "Profilers"
msgstr "效能分析工具"

msgid ""
"Profilers allow you to time your program while running it. Profilers then "
"provide results telling you what percentage of time was spent in different "
"functions and areas, and how often functions were called."
msgstr ""
"效能分析工具（Profiler）可以在程式執行時記錄各區塊的耗時，並統計每個函式或模"
"組佔用的時間百分比，以及函式被呼叫的次數。"

msgid ""
"This can be very useful both to identify bottlenecks and to measure the "
"results of your improvements. Sometimes, attempts to improve performance can "
"backfire and lead to slower performance. **Always use profiling and timing "
"to guide your efforts.**"
msgstr ""
"這對找出瓶頸、量測改善效果都很有幫助。有時候優化反而讓效能變差，**所以務必要"
"用效能分析和計時來指引你的優化方向。**"

msgid ""
"For more info about using Godot's built-in profiler, "
"see :ref:`doc_the_profiler`."
msgstr "有關使用 Godot 內建分析器的更多資訊，請參考 :ref:`doc_the_profiler`。"

msgid "Principles"
msgstr "原則"

msgid "`Donald Knuth <https://en.wikipedia.org/wiki/Donald_Knuth>`__ said:"
msgstr ""
"`Donald Knuth <https://zh.wikipedia.org/wiki/%E9%AB%98%E5%BE%B7%E7%BA%B3>`__ "
"說："

msgid ""
"*Programmers waste enormous amounts of time thinking about, or worrying "
"about, the speed of noncritical parts of their programs, and these attempts "
"at efficiency actually have a strong negative impact when debugging and "
"maintenance are considered. We should forget about small efficiencies, say "
"about 97% of the time: premature optimization is the root of all evil. Yet "
"we should not pass up our opportunities in that critical 3%.*"
msgstr ""
"*程式設計師花了大量時間去思考或擔心程式中非關鍵部分的效能，但這些效率上的嘗"
"試，事實上在除錯和維護時反而帶來負面影響。我們應該忘掉那些微小的效能提升，也"
"就是約 97% 的情況：過早的最佳化是萬惡之源。但對於那關鍵的 3%，我們不能錯過機"
"會。*"

msgid "The messages are very important:"
msgstr "這些訊息非常重要："

msgid ""
"Developer time is limited. Instead of blindly trying to speed up all aspects "
"of a program, we should concentrate our efforts on the aspects that really "
"matter."
msgstr "開發時間有限，與其盲目優化所有環節，不如將心力集中在真正重要的部分。"

msgid ""
"Efforts at optimization often end up with code that is harder to read and "
"debug than non-optimized code. It is in our interests to limit this to areas "
"that will really benefit."
msgstr ""
"許多優化反而讓程式碼難以閱讀和除錯。我們應該只在真正有顯著效益的地方進行這些"
"犧牲。"

msgid ""
"Just because we *can* optimize a particular bit of code, it doesn't "
"necessarily mean that we *should*. Knowing when and when not to optimize is "
"a great skill to develop."
msgstr ""
"不是因為我們 *能* 優化某段程式碼，就一定 *應該* 去優化。知道什麼時候該優化、"
"什麼時候不該動，這是一項很重要的能力。"

msgid ""
"One misleading aspect of the quote is that people tend to focus on the "
"subquote *\"premature optimization is the root of all evil\"*. While "
"*premature* optimization is (by definition) undesirable, performant software "
"is the result of performant design."
msgstr ""
"這段話常被誤解，人們容易只記得「過早的最佳化是萬惡之源」這句。雖然 *過早* 的"
"最佳化確實不可取，但高效能軟體其實來自於一開始就有高效能的設計。"

msgid "Performant design"
msgstr "高效能設計"

msgid ""
"The danger with encouraging people to ignore optimization until necessary, "
"is that it conveniently ignores that the most important time to consider "
"performance is at the design stage, before a key has even hit a keyboard. If "
"the design or algorithms of a program are inefficient, then no amount of "
"polishing the details later will make it run fast. It may run *faster*, but "
"it will never run as fast as a program designed for performance."
msgstr ""
"如果一直到很後面才考慮效能，最大風險就是錯過了設計階段。實際上，最重要的效能"
"決定早在還沒寫第一行程式碼前就已經發生。如果設計和演算法本身就低效，後面再怎"
"麼調整細節，頂多只能「變快一點」，永遠追不上原本設計就為效能考量的程式。"

msgid ""
"This tends to be far more important in game or graphics programming than in "
"general programming. A performant design, even without low-level "
"optimization, will often run many times faster than a mediocre design with "
"low-level optimization."
msgstr ""
"這點在遊戲或圖形程式設計中特別重要。一個設計得當的系統，即使沒做底層最佳化，"
"也常常比設計平庸但拼命微調底層的系統快上好幾倍。"

msgid "Incremental design"
msgstr "漸進式設計"

msgid ""
"Of course, in practice, unless you have prior knowledge, you are unlikely to "
"come up with the best design the first time. Instead, you'll often make a "
"series of versions of a particular area of code, each taking a different "
"approach to the problem, until you come to a satisfactory solution. It's "
"important not to spend too much time on the details at this stage until you "
"have finalized the overall design. Otherwise, much of your work will be "
"thrown out."
msgstr ""
"當然，實務上除非你本來就很有經驗，很難第一次就設計出最理想的架構。通常都會針"
"對某個問題嘗試許多不同方法，做出多個版本，最後才找到滿意的解決方案。在這個階"
"段，別太早花太多時間雕琢細節，等整體設計底定後再來優化細節，不然前面做的多半"
"都會被捨棄。"

msgid ""
"It's difficult to give general guidelines for performant design because this "
"is so dependent on the problem. One point worth mentioning though, on the "
"CPU side, is that modern CPUs are nearly always limited by memory bandwidth. "
"This has led to a resurgence in data-oriented design, which involves "
"designing data structures and algorithms for *cache locality* of data and "
"linear access, rather than jumping around in memory."
msgstr ""
"高效能設計沒有放諸四海皆準的準則，因為每個問題本質不同。不過有個 CPU 方面的原"
"則很值得注意：現代 CPU 幾乎都被記憶體頻寬限制住。因此，資料導向（Data-"
"Oriented）的設計重新受到重視，設計資料結構與演算法時要盡量讓資料存取具有 *快"
"取區域性* （cache locality）和線性存取，而非隨機跳躍於記憶體。"

msgid "The optimization process"
msgstr "最佳化流程"

msgid ""
"Assuming we have a reasonable design, and taking our lessons from Knuth, our "
"first step in optimization should be to identify the biggest bottlenecks - "
"the slowest functions, the low-hanging fruit."
msgstr ""
"假設我們已經有合理的設計，並記住 Knuth 的建議，最佳化的第一步就是找出最大的瓶"
"頸：那些最慢的函式，也就是「低垂的果實」。"

msgid ""
"Once we've successfully improved the speed of the slowest area, it may no "
"longer be the bottleneck. So we should test/profile again and find the next "
"bottleneck on which to focus."
msgstr ""
"當我們成功改善了最慢的部分後，它可能就不再是瓶頸，這時就要再重新測試／分析，"
"找出下個最值得優化的區塊。"

msgid "The process is thus:"
msgstr "流程如下："

msgid "Profile / Identify bottleneck."
msgstr "分析／找出瓶頸。"

msgid "Optimize bottleneck."
msgstr "優化瓶頸。"

msgid "Return to step 1."
msgstr "回到步驟 1。"

msgid "Optimizing bottlenecks"
msgstr "瓶頸最佳化"

msgid ""
"Some profilers will even tell you which part of a function (which data "
"accesses, calculations) are slowing things down."
msgstr ""
"有些分析工具甚至能指出是哪個函式的哪個部分（哪個資料存取、哪個運算）拖慢速"
"度。"

msgid ""
"As with design, you should concentrate your efforts first on making sure the "
"algorithms and data structures are the best they can be. Data access should "
"be local (to make best use of CPU cache), and it can often be better to use "
"compact storage of data (again, always profile to test results). Often, you "
"precalculate heavy computations ahead of time. This can be done by "
"performing the computation when loading a level, by loading a file "
"containing precalculated data, or by storing the results of complex "
"calculations into a script constant and reading its value."
msgstr ""
"和設計階段一樣，優化時首先要確保演算法和資料結構已是最佳選擇。資料存取應盡量"
"區域化（善用 CPU 快取），且資料儲存應盡量精簡（同樣記得用分析工具驗證）。許多"
"複雜運算可以事先預先計算好，例如在載入關卡時處理、或直接載入已經預先算好資料"
"的檔案，又或者把運算結果寫成腳本常數直接讀取。"

msgid ""
"Once algorithms and data are good, you can often make small changes in "
"routines which improve performance. For instance, you can move some "
"calculations outside of loops or transform nested ``for`` loops into non-"
"nested loops. (This should be feasible if you know a 2D array's width or "
"height in advance.)"
msgstr ""
"當演算法和資料結構最佳化後，還可以針對細部流程做些小調整來提升效能，例如把某"
"些計算移到迴圈外，或將巢狀 ``for`` 迴圈改寫為非巢狀（前提是你已知 2D 陣列的寬"
"高）"

msgid ""
"Always retest your timing/bottlenecks after making each change. Some changes "
"will increase speed, others may have a negative effect. Sometimes, a small "
"positive effect will be outweighed by the negatives of more complex code, "
"and you may choose to leave out that optimization."
msgstr ""
"每做一項更動，記得都要重新測試瓶頸和耗時。有些改動會讓速度變快，有些則讓效能"
"變差。有時效能提升很小，但程式碼變得很難維護，這種情況下也可以選擇不做這類優"
"化。"

msgid "Appendix"
msgstr "附錄"

msgid "Bottleneck math"
msgstr "瓶頸數學"

msgid ""
"The proverb *\"a chain is only as strong as its weakest link\"* applies "
"directly to performance optimization. If your project is spending 90% of the "
"time in function ``A``, then optimizing ``A`` can have a massive effect on "
"performance."
msgstr ""
"俗話說：*「一條鍊子的強度取決於最薄弱的環節」*，這句話用在效能優化再貼切不"
"過。如果你的專案有 90% 的執行時間都花在函式 ``A``，那麼只要優化 ``A``，就能有"
"極大效益。"

msgid ""
"In this example, improving this bottleneck ``A`` by a factor of 9× decreases "
"overall frame time by 5× while increasing frames per second by 5×."
msgstr ""
"在這個例子中，若將瓶頸 ``A`` 提升 9 倍效能，總體幀時間會縮短 5 倍，每秒幀數也"
"會提升 5 倍。"

msgid ""
"However, if something else is running slowly and also bottlenecking your "
"project, then the same improvement can lead to less dramatic gains:"
msgstr ""
"不過，如果還有其他地方也很慢、同樣成為瓶頸時，相同的優化幅度就無法帶來這麼明"
"顯的提升："

msgid ""
"In this example, even though we have hugely optimized function ``A``, the "
"actual gain in terms of frame rate is quite small."
msgstr "在這個例子中，雖然我們大幅優化了函式 ``A``，但實際上幀率提升卻很有限。"

msgid ""
"In games, things become even more complicated because the CPU and GPU run "
"independently of one another. Your total frame time is determined by the "
"slower of the two."
msgstr ""
"在遊戲開發中，情況更複雜，因為 CPU 和 GPU 是獨立運作的。你的總幀時間取決於兩"
"者裡面較慢的那一方。"

msgid ""
"In this example, we optimized the CPU hugely again, but the frame time "
"didn't improve because we are GPU-bottlenecked."
msgstr ""
"在這個例子裡，我們大幅優化了 CPU，但幀時間卻沒變快，因為這次的瓶頸是在 GPU。"
