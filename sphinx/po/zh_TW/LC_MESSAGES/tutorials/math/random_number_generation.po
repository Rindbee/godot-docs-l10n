#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Random number generation"
msgstr "亂數產生"

msgid ""
"Many games rely on randomness to implement core game mechanics. This page "
"guides you through common types of randomness and how to implement them in "
"Godot."
msgstr ""
"許多遊戲仰賴隨機性來實作核心遊戲機制。本頁將帶你了解常見的亂數類型，以及如何"
"在 Godot 中實作它們。"

msgid ""
"After giving you a brief overview of useful functions that generate random "
"numbers, you will learn how to get random elements from arrays, "
"dictionaries, and how to use a noise generator in GDScript. Lastly, we'll "
"take a look at cryptographically secure random number generation and how it "
"differs from typical random number generation."
msgstr ""
"在簡要介紹產生亂數的實用函式後，你會學到如何從陣列、字典中取得隨機元素，並學"
"會在 GDScript 裡使用雜訊產生器。最後，我們也會看看密碼學安全的亂數產生，以及"
"它與一般亂數產生的差異。"

msgid ""
"Computers cannot generate \"true\" random numbers. Instead, they rely on "
"`pseudorandom number generators <https://en.wikipedia.org/wiki/"
"Pseudorandom_number_generator>`__ (PRNGs)."
msgstr ""
"電腦無法產生「真正」的亂數，而是依賴於 `偽亂數產生器 <https://"
"en.wikipedia.org/wiki/Pseudorandom_number_generator>`__ （PRNGs）。"

msgid ""
"Godot internally uses the `PCG Family <https://www.pcg-random.org/>`__ of "
"pseudorandom number generators."
msgstr ""
"Godot 在內部使用 `PCG 家族 <https://www.pcg-random.org/>`__ 的偽亂數產生器。"

msgid "Global scope versus RandomNumberGenerator class"
msgstr "全域作用域與 RandomNumberGenerator 類別"

msgid ""
"Godot exposes two ways to generate random numbers: via *global scope* "
"methods or using the :ref:`class_RandomNumberGenerator` class."
msgstr ""
"Godot 提供兩種產生亂數的方式：透過*全域作用域*的方法，或是使"
"用 :ref:`class_RandomNumberGenerator` 類別。"

msgid ""
"Global scope methods are easier to set up, but they don't offer as much "
"control."
msgstr "全域作用域的方法較易設置，但控制性較低。"

msgid ""
"RandomNumberGenerator requires more code to use, but allows creating "
"multiple instances, each with their own seed and state."
msgstr ""
"RandomNumberGenerator 雖需更多程式碼，但能建立多個實例，各自擁有獨立種子與狀"
"態。"

msgid ""
"This tutorial uses global scope methods, except when the method only exists "
"in the RandomNumberGenerator class."
msgstr ""
"本教學主要使用全域作用域的方法，除非該方法只存在於 RandomNumberGenerator 類別"
"中。"

msgid "The randomize() method"
msgstr "randomize() 方法"

msgid ""
"Since Godot 4.0, the random seed is automatically set to a random value when "
"the project starts. This means you don't need to call ``randomize()`` in "
"``_ready()`` anymore to ensure that results are random across project runs. "
"However, you can still use ``randomize()`` if you want to use a specific "
"seed number, or generate it using a different method."
msgstr ""
"自 Godot 4.0 起，專案啟動時會自動將亂數種子設為隨機值。這表示你不必再於 "
"``_ready()`` 裡呼叫 ``randomize()`` 來確保每次執行專案時結果都不同。不過，如"
"果你想用特定種子，或用其他方式產生種子，仍可自行呼叫 ``randomize()``。"

msgid ""
"In global scope, you can find a :ref:`randomize() "
"<class_@GlobalScope_method_randomize>` method. **This method should be "
"called only once when your project starts to initialize the random seed.** "
"Calling it multiple times is unnecessary and may impact performance "
"negatively."
msgstr ""
"在全域作用域中，你會找到 :ref:`randomize() "
"<class_@GlobalScope_method_randomize>` 方法。**這個方法只需要在專案啟動時呼叫"
"一次，以初始化亂數種子。** 多次呼叫並無必要，甚至可能影響效能。"

msgid ""
"Putting it in your main scene script's ``_ready()`` method is a good choice:"
msgstr "將其放在主場景腳本的 ``_ready()`` 方法中是個不錯的做法："

msgid ""
"You can also set a fixed random seed instead using :ref:`seed() "
"<class_@GlobalScope_method_seed>`. Doing so will give you *deterministic* "
"results across runs:"
msgstr ""
"你也可以用 :ref:`seed() <class_@GlobalScope_method_seed>` 來設定固定的亂數種"
"子。這樣每次執行專案時都會得到*確定性*的結果："

msgid ""
"When using the RandomNumberGenerator class, you should call ``randomize()`` "
"on the instance since it has its own seed:"
msgstr ""
"如果你使用 RandomNumberGenerator 類別，要對該實例呼叫 ``randomize()``，因為每"
"個實例都有自己獨立的種子："

msgid "Getting a random number"
msgstr "取得亂數"

msgid ""
"Let's look at some of the most commonly used functions and methods to "
"generate random numbers in Godot."
msgstr "讓我們看看 Godot 裡常用的亂數產生函式和方法。"

msgid ""
"The function :ref:`randi() <class_@GlobalScope_method_randi>` returns a "
"random number between ``0`` and ``2^32 - 1``. Since the maximum value is "
"huge, you most likely want to use the modulo operator (``%``) to bound the "
"result between 0 and the denominator:"
msgstr ""
"函式 :ref:`randi() <class_@GlobalScope_method_randi>` 會回傳一個介於 0 到 "
"2^32-1 的亂數。由於最大值很大，你通常會想用取餘數運算子 (``%``) 限制結果在 0 "
"到你指定的上限之間："

msgid ""
":ref:`randf() <class_@GlobalScope_method_randf>` returns a random floating-"
"point number between 0 and 1. This is useful to implement "
"a :ref:`doc_random_number_generation_weighted_random_probability` system, "
"among other things."
msgstr ""
":ref:`randf() <class_@GlobalScope_method_randf>` 會回傳一個 0 到 1 之間的亂數"
"浮點數。這對於實"
"作 :ref:`doc_random_number_generation_weighted_random_probability` 等加權隨機"
"系統很有用。"

msgid ""
":ref:`randfn() <class_@GlobalScope_method_randfn>` returns a random floating-"
"point number following a `normal distribution <https://en.wikipedia.org/wiki/"
"Normal_distribution>`__. This means the returned value is more likely to be "
"around the mean (0.0 by default), varying by the deviation (1.0 by default):"
msgstr ""
":ref:`randfn() <class_@GlobalScope_method_randfn>` 會回傳符合 `常態分佈 "
"<https://en.wikipedia.org/wiki/Normal_distribution>`__ 的亂數浮點數。這代表回"
"傳值通常會落在平均值（預設 0.0）附近，並依標準差（預設 1.0）變動："

msgid ""
":ref:`randf_range() <class_@GlobalScope_method_randf_range>` takes two "
"arguments ``from`` and ``to``, and returns a random floating-point number "
"between ``from`` and ``to``:"
msgstr ""
":ref:`randf_range() <class_@GlobalScope_method_randf_range>` 接受兩個參數 "
"``from`` 和 ``to``，會回傳一個介於 ``from`` 與 ``to`` 之間的亂數浮點數："

msgid ""
":ref:`randi_range() <class_@GlobalScope_method_randi_range>` takes two "
"arguments ``from`` and ``to``, and returns a random integer between ``from`` "
"and ``to``:"
msgstr ""
":ref:`randi_range() <class_@GlobalScope_method_randi_range>` 接受兩個參數 "
"``from`` 和 ``to``，會回傳一個介於 ``from`` 與 ``to`` 之間的亂數整數："

msgid "Get a random array element"
msgstr "取得隨機陣列元素"

msgid ""
"We can use random integer generation to get a random element from an array, "
"or use the :ref:`Array.pick_random<class_Array_method_pick_random>` method "
"to do it for us:"
msgstr ""
"我們可以使用亂數整數來從陣列中取得隨機元素，或直接"
"用 :ref:`Array.pick_random<class_Array_method_pick_random>` 方法來實現："

msgid ""
"To prevent the same fruit from being picked more than once in a row, we can "
"add more logic to the above method. In this case, we can't "
"use :ref:`Array.pick_random<class_Array_method_pick_random>` since it lacks "
"a way to prevent repetition:"
msgstr ""
"為了避免連續多次抽到同一個水果，我們可以在上述方法中再加入一些邏輯。這時就不"
"能用 :ref:`Array.pick_random<class_Array_method_pick_random>`，因為它無法防止"
"重複："

msgid ""
"This approach can be useful to make random number generation feel less "
"repetitive. Still, it doesn't prevent results from \"ping-ponging\" between "
"a limited set of values. To prevent this, use the :ref:`shuffle bag "
"<doc_random_number_generation_shuffle_bags>` pattern instead."
msgstr ""
"這種方式能讓亂數產生的結果沒那麼容易重複。不過，它仍無法防止結果在某些值間來"
"回重複。若要避免這種情況，建議改用 :ref:`shuffle bag "
"<doc_random_number_generation_shuffle_bags>` 模式。"

msgid "Get a random dictionary value"
msgstr "取得隨機字典值"

msgid "We can apply similar logic from arrays to dictionaries as well:"
msgstr "我們也可以將類似陣列的邏輯應用到字典："

msgid "Weighted random probability"
msgstr "加權隨機機率"

msgid ""
"The :ref:`randf() <class_@GlobalScope_method_randf>` method returns a "
"floating-point number between 0.0 and 1.0. We can use this to create a "
"\"weighted\" probability where different outcomes have different likelihoods:"
msgstr ""
":ref:`randf() <class_@GlobalScope_method_randf>` 方法會回傳介於 0.0 到 1.0 的"
"浮點數。你可以用來實作「加權」機率，讓不同結果有不同出現機率："

msgid ""
"You can also get a weighted random *index* using the :ref:`rand_weighted() "
"<class_RandomNumberGenerator_method_rand_weighted>` method on a "
"RandomNumberGenerator instance. This returns a random integer between 0 and "
"the size of the array that is passed as a parameter. Each value in the array "
"is a floating-point number that represents the *relative* likelihood that it "
"will be returned as an index. A higher value means the value is more likely "
"to be returned as an index, while a value of ``0`` means it will never be "
"returned as an index."
msgstr ""
"你也可以在 RandomNumberGenerator 實例上使用 :ref:`rand_weighted() "
"<class_RandomNumberGenerator_method_rand_weighted>` 方法來取得加權亂數*索引"
"*。這個方法會回傳一個介於 0 到你傳入陣列長度的亂數整數。陣列中的每個浮點數值"
"代表該索引被選中的*相對*機率。值越大，被選中機率越高；如果為 ``0`` 則永遠不會"
"被選中。"

msgid ""
"For example, if ``[0.5, 1, 1, 2]`` is passed as a parameter, then the method "
"is twice as likely to return ``3`` (the index of the value ``2``) and twice "
"as unlikely to return ``0`` (the index of the value ``0.5``) compared to the "
"indices ``1`` and ``2``."
msgstr ""
"例如，若你傳入 ``[0.5, 1, 1, 2]``，該方法選到索引 ``3``（數值為 2）的機率會是"
"索引 ``1``、``2``（數值為 1）的兩倍，選到索引 ``0``（數值為 0.5）的機率則是索"
"引 ``1``、``2`` 的一半。"

msgid ""
"Since the returned value matches the array's size, it can be used as an "
"index to get a value from another array as follows:"
msgstr "由於回傳值就是陣列的索引，你可以用它來從另一個陣列中取值，例如："

msgid "\"Better\" randomness using shuffle bags"
msgstr "運用 Shuffle Bag 提升亂數品質"

msgid ""
"Taking the same example as above, we would like to pick fruits at random. "
"However, relying on random number generation every time a fruit is selected "
"can lead to a less *uniform* distribution. If the player is lucky (or "
"unlucky), they could get the same fruit three or more times in a row."
msgstr ""
"以剛剛的例子來說，我們希望隨機選取水果。不過，每次都直接用亂數選可能造成分布"
"不均勻，玩家有可能連續三次（或更多）抽到同一種水果。"

msgid ""
"You can accomplish this using the *shuffle bag* pattern. It works by "
"removing an element from the array after choosing it. After multiple "
"selections, the array ends up empty. When that happens, you reinitialize it "
"to its default value:"
msgstr ""
"這時可以用 *shuffle bag* 模式來解決。每次選完從陣列移除該元素，直到陣列為空時"
"再初始化回原本的內容："

msgid ""
"When running the above code, there is a chance to get the same fruit twice "
"in a row. Once we picked a fruit, it will no longer be a possible return "
"value unless the array is now empty. When the array is empty, we reset it "
"back to its default value, making it possible to have the same fruit again, "
"but only once."
msgstr ""
"執行上述程式碼時，仍有機會連續兩次抽到同一個水果。當某水果被選到後，除非陣列"
"已清空，否則不會再被選到。當陣列清空時才會重設，這時相同水果才可能再次被抽"
"到，但只會出現一次。"

msgid "Random noise"
msgstr "隨機雜訊"

msgid ""
"The random number generation shown above can show its limits when you need a "
"value that *slowly* changes depending on the input. The input can be a "
"position, time, or anything else."
msgstr ""
"如果你需要一個會*隨著輸入逐步改變*的亂數，上述方法就有其侷限。輸入可以是位"
"置、時間或其他資料。"

msgid ""
"To achieve this, you can use random *noise* functions. Noise functions are "
"especially popular in procedural generation to generate realistic-looking "
"terrain. Godot provides :ref:`class_fastnoiselite` for this, which supports "
"1D, 2D and 3D noise. Here's an example with 1D noise:"
msgstr ""
"這時可以用隨機*雜訊*函式。雜訊函式在程式化生成時很受歡迎，常用來產生擬真的地"
"形。Godot 提供 :ref:`class_fastnoiselite`，支援 1D、2D、3D 雜訊。以下是 1D 雜"
"訊的範例："

msgid "Cryptographically secure pseudorandom number generation"
msgstr "密碼學安全的偽亂數產生"

msgid ""
"So far, the approaches mentioned above are **not** suitable for "
"*cryptographically secure* pseudorandom number generation (CSPRNG). This is "
"fine for games, but this is not sufficient for scenarios where encryption, "
"authentication or signing is involved."
msgstr ""
"前述方法都**不適合**用於*密碼學安全*的偽亂數產生（CSPRNG）。遊戲用途沒問題，"
"但如果涉及加密、驗證或簽章時，這樣還不夠安全。"

msgid ""
"Godot offers a :ref:`class_Crypto` class for this. This class can perform "
"asymmetric key encryption/decryption, signing/verification, while also "
"generating cryptographically secure random bytes, RSA keys, HMAC digests, "
"and self-signed :ref:`class_X509Certificate`\\ s."
msgstr ""
"Godot 提供 :ref:`class_Crypto` 類別來處理這類需求。該類別支援非對稱金鑰加解"
"密、簽章/驗證，也能產生密碼學安全的隨機位元組、RSA 金鑰、HMAC 摘要與自"
"簽 :ref:`class_X509Certificate` 等。"

msgid ""
"The downside of :abbr:`CSPRNG (Cryptographically secure pseudorandom number "
"generation)` is that it's much slower than standard pseudorandom number "
"generation. Its API is also less convenient to use. As a "
"result, :abbr:`CSPRNG (Cryptographically secure pseudorandom number "
"generation)` should be avoided for gameplay elements."
msgstr ""
":abbr:`CSPRNG (密碼學安全偽亂數產生器)` 的缺點是效能明顯慢於一般偽亂數產生"
"器，API 也較不直覺。因此， :abbr:`CSPRNG (Cryptographically secure "
"pseudorandom number generation)` 不建議用於遊戲玩法相關的亂數。"

msgid ""
"Example of using the Crypto class to generate 2 random integers between "
"``0`` and ``2^32 - 1`` (inclusive):"
msgstr ""
"以下範例演示如何用 Crypto 類別產生兩個介於 ``0`` 與 ``2^32 - 1`` （含）的隨機"
"整數："

msgid ""
"See :ref:`class_PackedByteArray`'s documentation for other methods you can "
"use to decode the generated bytes into various types of data, such as "
"integers or floats."
msgstr ""
"更多如何將產生的位元組解碼為各種資料型態（如整數或浮點數）的方法，請參"
"閱 :ref:`class_PackedByteArray` 的說明文件。"
