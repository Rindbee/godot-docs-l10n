#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Interpolation"
msgstr "插值"

msgid ""
"Interpolation is a common operation in graphics programming, which is used "
"to blend or transition between two values. Interpolation can also be used to "
"smooth movement, rotation, etc. It's good to become familiar with it in "
"order to expand your horizons as a game developer."
msgstr ""
"插值是圖形程式設計中常見的操作，用於在兩個數值之間進行混合或過渡。插值也常用"
"來平滑移動、旋轉等效果。作為遊戲開發者，熟悉插值能拓展你的開發視野。"

msgid ""
"The basic idea is that you want to transition from A to B. A value ``t``, "
"represents the states in-between."
msgstr "基本概念是要從 A 過渡到 B。``t`` 值代表介於兩者之間的狀態。"

msgid ""
"For example, if ``t`` is 0, then the state is A. If ``t`` is 1, then the "
"state is B. Anything in-between is an *interpolation*."
msgstr ""
"例如，當 ``t`` 為 0 時，狀態為 A；當 ``t`` 為 1 時，狀態為 B。介於兩者之間的"
"任何數值都是 *插值*。"

msgid ""
"Between two real (floating-point) numbers, an interpolation can be described "
"as:"
msgstr "在兩個實數（浮點數）之間，插值可以描述為："

msgid "And often simplified to:"
msgstr "通常簡化為："

msgid ""
"The name of this type of interpolation, which transforms a value into "
"another at *constant speed* is *\"linear\"*. So, when you hear about *Linear "
"Interpolation*, you know they are referring to this formula."
msgstr ""
"這種以 *固定速度* 將一個值轉換為另一個值的插值方式稱為 *線性插值* （Linear "
"Interpolation）。當你聽到線性插值時，就是指這個公式。"

msgid ""
"There are other types of interpolations, which will not be covered here. A "
"recommended read afterwards is the :ref:`Bezier <doc_beziers_and_curves>` "
"page."
msgstr ""
"還有其他類型的插值，這裡不做討論。建議之後參考 :ref:`Bezier "
"<doc_beziers_and_curves>` 頁面。"

msgid "Vector interpolation"
msgstr "向量插值"

msgid ""
"Vector types (:ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>`) can also be interpolated, they come with handy functions "
"to do it :ref:`Vector2.lerp() <class_Vector2_method_lerp>` "
"and :ref:`Vector3.lerp() <class_Vector3_method_lerp>`."
msgstr ""
"向量型別（:ref:`Vector2 <class_Vector2>` 和 :ref:`Vector3 <class_Vector3>`）"
"也可以進行插值，並且提供了方便的函式：:ref:`Vector2.lerp() "
"<class_Vector2_method_lerp>` 與 :ref:`Vector3.lerp() "
"<class_Vector3_method_lerp>`。"

msgid ""
"For cubic interpolation, there are also :ref:`Vector2.cubic_interpolate() "
"<class_Vector2_method_cubic_interpolate>` "
"and :ref:`Vector3.cubic_interpolate() "
"<class_Vector3_method_cubic_interpolate>`, which do a :ref:`Bezier "
"<doc_beziers_and_curves>` style interpolation."
msgstr ""
"若是三次插值，也有 :ref:`Vector2.cubic_interpolate() "
"<class_Vector2_method_cubic_interpolate>` "
"和 :ref:`Vector3.cubic_interpolate() "
"<class_Vector3_method_cubic_interpolate>` ，它們執行類似 :ref:`Bezier "
"<doc_beziers_and_curves>` 的插值。"

msgid ""
"Here is example pseudo-code for going from point A to B using interpolation:"
msgstr "這是一個使用插值從 A 點移動到 B 點的偽程式碼範例："

msgid "It will produce the following motion:"
msgstr "會產生以下的運動："

msgid "Transform interpolation"
msgstr "變換插值"

msgid ""
"It is also possible to interpolate whole transforms (make sure they have "
"either uniform scale or, at least, the same non-uniform scale). For this, "
"the function :ref:`Transform3D.interpolate_with() "
"<class_Transform3D_method_interpolate_with>` can be used."
msgstr ""
"也可以對整個變換進行插值（請確保它們有一致的縮放，或至少擁有相同的非均勻縮"
"放）。可以使用 :ref:`Transform3D.interpolate_with() "
"<class_Transform3D_method_interpolate_with>` 這個函式來達成。"

msgid ""
"Here is an example of transforming a monkey from Position1 to Position2:"
msgstr "這是一個將猴子從位置1移動到位置2的例子："

msgid "Using the following pseudocode:"
msgstr "使用以下偽程式碼："

msgid "And again, it will produce the following motion:"
msgstr "同樣會產生以下動作："

msgid "Smoothing motion"
msgstr "平滑運動"

msgid ""
"Interpolation can be used to smoothly follow a moving target value, such as "
"a position or a rotation. Each frame, ``lerp()`` moves the current value "
"towards the target value by a fixed percentage of the remaining difference "
"between the values. The current value will smoothly move towards the target, "
"slowing down as it gets closer. Here is an example of a circle following the "
"mouse using interpolation smoothing:"
msgstr ""
"插值也可以用來讓物件平滑地追蹤移動中的目標值，例如位置或旋轉。在每一個畫面更"
"新時，``lerp()`` 會將目前的數值往目標值推進，推進的量是目前與目標之間差距的固"
"定百分比。這樣目前的數值會逐漸靠近目標，並在接近時自動減速。以下是一個圓形使"
"用插值平滑跟隨滑鼠的範例："

msgid "Here is how it looks:"
msgstr "效果如下："

msgid ""
"This is useful for smoothing camera movement, for allies following the "
"player (ensuring they stay within a certain range), and for many other "
"common game patterns."
msgstr ""
"這種方法對於平滑攝影機移動、讓隊友跟隨玩家（確保他們保留在一定距離內），以及"
"其他許多常見的遊戲設計都非常實用。"

msgid ""
"Despite using ``delta``, the formula used above is framerate-dependent, "
"because the ``weight`` parameter of ``lerp()`` represents a *percentage* of "
"the remaining difference in values, not an *absolute amount to change*. In "
"``_physics_process()``, this is usually fine because physics is expected to "
"maintain a constant framerate, and therefore ``delta`` is expected to remain "
"constant."
msgstr ""
"雖然上述公式有用到 ``delta``，但這種寫法仍然會受到幀率影響，因為 ``lerp()`` "
"的 ``weight`` 參數代表的是「剩餘差距的百分比」，而不是「絕對變化量」。在 "
"``_physics_process()`` 裡通常沒問題，因為物理更新預期會保持固定的更新率，因"
"此 ``delta`` 會保持一致。"

msgid ""
"For a framerate-independent version of interpolation smoothing that can also "
"be used in ``process()``, use the following formula instead:"
msgstr ""
"如果你需要一個不受幀率影響的插值平滑（可用於 ``process()``），請改用以下公"
"式："

msgid ""
"Deriving this formula is beyond the scope of this page. For an explanation, "
"see `Improved Lerp Smoothing <https://www.gamedeveloper.com/programming/"
"improved-lerp-smoothing->`__ or watch `Lerp smoothing is broken <https://"
"www.youtube.com/watch?v=LSNQuFEDOyQ>`__."
msgstr ""
"此公式的推導超出本頁範圍。詳細解說請參見：`Improved Lerp Smoothing <https://"
"www.gamedeveloper.com/programming/improved-lerp-smoothing->`__ 或觀看 `Lerp "
"smoothing is broken <https://www.youtube.com/watch?v=LSNQuFEDOyQ>`__。"
