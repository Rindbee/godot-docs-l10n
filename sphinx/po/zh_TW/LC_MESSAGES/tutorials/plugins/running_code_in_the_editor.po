#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Running code in the editor"
msgstr "在編輯器中執行程式碼"

msgid "What is ``@tool``?"
msgstr "什麼是 ``@tool``？"

msgid ""
"``@tool`` is a powerful line of code that, when added at the top of your "
"script, makes it execute in the editor. You can also decide which parts of "
"the script execute in the editor, which in game, and which in both."
msgstr ""
"``@tool`` 是一個強大的註記，只要加在腳本最上方，腳本就能在編輯器中執行。你也"
"可以決定腳本的哪些部分在編輯器中執行、哪些部分在遊戲中執行，或哪些會在兩者皆"
"執行。"

msgid ""
"You can use it for doing many things, but it is mostly useful in level "
"design for visually presenting things that are hard to predict ourselves. "
"Here are some use cases:"
msgstr ""
"你可以用它做很多事，最常用於關卡設計，能讓難以預測的內容在視覺上即時呈現。以"
"下是一些使用情境："

msgid ""
"If you have a cannon that shoots cannonballs affected by physics (gravity), "
"you can draw the cannonball's trajectory in the editor, making level design "
"a lot easier."
msgstr ""
"如果你有一門發射受物理（重力）影響的砲彈的大砲，你可以直接在編輯器裡繪製砲彈"
"軌跡，讓關卡設計更直觀簡單。"

msgid ""
"If you have jumppads with varying jump heights, you can draw the maximum "
"jump height a player would reach if it jumped on one, also making level "
"design easier."
msgstr ""
"如果你有多種跳躍高度的跳板，可以在編輯器裡標示玩家能跳到的最大高度，讓關卡設"
"計更方便。"

msgid ""
"If your player doesn't use a sprite, but draws itself using code, you can "
"make that drawing code execute in the editor to see your player."
msgstr ""
"如果你的遊戲角色不是用貼圖顯示，而是用程式碼繪製，你也可以讓這段繪圖程式在編"
"輯器即時執行，直接看到角色外觀。"

msgid ""
"``@tool`` scripts run inside the editor, and let you access the scene tree "
"of the currently edited scene. This is a powerful feature which also comes "
"with caveats, as the editor does not include protections for potential "
"misuse of ``@tool`` scripts. Be **extremely** cautious when manipulating the "
"scene tree, especially "
"via :ref:`Node.queue_free<class_Node_method_queue_free>`, as it can cause "
"crashes if you free a node while the editor runs logic involving it."
msgstr ""
"``@tool`` 腳本會在編輯器內執行，讓你能存取目前編輯中的場景樹。這是很強大的功"
"能，但也有風險，因為編輯器並不會防止 ``@tool`` 腳本的濫用。操作場景樹時要 **"
"特別** 小心，尤其是使用 :ref:`Node.queue_free<class_Node_method_queue_free>` "
"等方法時，如果在編輯器運作相關邏輯時釋放了節點，可能會導致當機。"

msgid "How to use ``@tool``"
msgstr "如何使用 ``@tool``"

msgid ""
"To turn a script into a tool, add the ``@tool`` annotation at the top of "
"your code."
msgstr "要讓腳本成為工具腳本，只要在程式碼最上方加上 ``@tool`` 註記即可。"

msgid ""
"To check if you are currently in the editor, use: "
"``Engine.is_editor_hint()``."
msgstr "要判斷當前是在編輯器中，可使用 ``Engine.is_editor_hint()``。"

msgid "For example, if you want to execute some code only in the editor, use:"
msgstr "例如，如果你只想在編輯器中執行某段程式，可以這樣寫："

msgid ""
"On the other hand, if you want to execute code only in game, simply negate "
"the same statement:"
msgstr "另一方面，如果你只想在遊戲執行時執行程式碼，只要把條件取反即可："

msgid ""
"Pieces of code that do not have either of the 2 conditions above will run "
"both in-editor and in-game."
msgstr "沒有上述兩個條件的程式碼片段會同時在編輯器和遊戲中執行。"

msgid "Here is how a ``_process()`` function might look for you:"
msgstr "以下是 ``_process()`` 函式可能的寫法範例："

msgid "Important information"
msgstr "重要資訊"

msgid ""
"Any other GDScript that your tool script uses must *also* be a tool. Any "
"GDScript without ``@tool`` used by the editor will act like an empty file!"
msgstr ""
"你的工具腳本所引用的其他 GDScript，也必須加上 ``@tool``，否則在編輯器中這些沒"
"有 ``@tool`` 的腳本會被當作空檔案處理！"

msgid ""
"Extending a ``@tool`` script does not automatically make the extending "
"script a ``@tool``. Omitting ``@tool`` from the extending script will "
"disable tool behavior from the super class. Therefore the extending script "
"should also specify the ``@tool`` annotation."
msgstr ""
"繼承自 ``@tool`` 腳本的子類別，並不會自動成為工具腳本。如果子類別沒有加上 "
"``@tool``，那麼父類別的工具行為會被停用。因此，繼承的腳本同樣需要加上 "
"``@tool`` 註記。"

msgid ""
"Modifications in the editor are permanent. For example, in the next section "
"when we remove the script, the node will keep its rotation. Be careful to "
"avoid making unwanted modifications."
msgstr ""
"在編輯器中做的修改是永久的。例如，下一節我們即使刪除了腳本，節點還是會保留旋"
"轉。請小心，避免不小心做了不想要的修改。"

msgid "Try ``@tool`` out"
msgstr "試用 ``@tool``"

msgid ""
"Add a ``Sprite2D`` node to your scene and set the texture to Godot icon. "
"Attach and open a script, and change it to this:"
msgstr ""
"在場景新增一個 ``Sprite2D`` 節點，將貼圖設為 Godot 圖示。掛載並打開腳本，改成"
"以下內容："

msgid ""
"Save the script and return to the editor. You should now see your object "
"rotate. If you run the game, it will also rotate."
msgstr "儲存腳本並回到編輯器，你會看到物件旋轉。執行遊戲時，物件也會旋轉。"

msgid ""
"You may need to restart the editor. This is a known bug found in all Godot 4 "
"versions: `GH-66381 <https://github.com/godotengine/godot/issues/66381>`_."
msgstr ""
"你可能需要重新啟動編輯器。這是 Godot 4 版本已知的問題：`GH-66381 <https://"
"github.com/godotengine/godot/issues/66381>`_。"

msgid ""
"If you don't see the changes, reload the scene (close it and open it again)."
msgstr "如果看不到變化，請重新載入場景（關閉後再打開）。"

msgid ""
"Now let's choose which code runs when. Modify your ``_process()`` function "
"to look like this:"
msgstr ""
"現在來決定要在什麼時機執行哪段程式。請將你的 ``_process()`` 函式改成這樣："

msgid ""
"Save the script. Now the object will spin clockwise in the editor, but if "
"you run the game, it will spin counter-clockwise."
msgstr "儲存腳本。現在物件會在編輯器中順時針旋轉，而遊戲執行時則會逆時針旋轉。"

msgid "Editing variables"
msgstr "編輯變數"

msgid ""
"Add and export a variable speed to the script. To update the speed and also "
"reset the rotation angle add a setter ``set(new_speed)`` which is executed "
"with the input from the inspector. Modify ``_process()`` to include the "
"rotation speed."
msgstr ""
"在腳本中加入並匯出一個 speed 變數。你可以加一個 setter ``set(new_speed)``，這"
"樣從屬性面板調整時會呼叫它來同步速度與重設旋轉。別忘了在 ``_process()`` 中套"
"用旋轉速度。"

msgid ""
"Code from other nodes doesn't run in the editor. Your access to other nodes "
"is limited. You can access the tree and nodes, and their default properties, "
"but you can't access user variables. If you want to do so, other nodes have "
"to run in the editor too. Autoload nodes cannot be accessed in the editor at "
"all."
msgstr ""
"其他節點的程式碼不會在編輯器運作，你對其他節點的存取也有限。你可以存取場景"
"樹、節點及預設屬性，但不能直接存取自訂變數。如果要這麼做，其他節點也必須在編"
"輯器運作。Autoload（自動載入）節點在編輯器中是無法存取的。"

msgid "Getting notified when resources change"
msgstr "資源變動時取得通知"

msgid ""
"Sometimes you want your tool to use a resource. However, when you change a "
"property of that resource in the editor, the ``set()`` method of your tool "
"will not be called."
msgstr ""
"有時候你會希望工具腳本使用某個資源，但當你在編輯器中修改該資源的屬性時，工具"
"腳本的 ``set()`` 方法並不會被呼叫。"

msgid ""
"To get around this problem you first have to make your resource a tool and "
"make it emit the ``changed`` signal whenever a property is set:"
msgstr ""
"要解決這個問題，首先必須把你的資源設為工具資源，並在屬性變動時發送 "
"``changed`` 訊號："

msgid "You then want to connect the signal when a new resource is set:"
msgstr "然後，當設定新資源時，要連接這個訊號："

msgid ""
"Lastly, remember to disconnect the signal as the old resource being used and "
"changed somewhere else would cause unneeded updates."
msgstr ""
"最後，記得在換資源時要斷開訊號，否則之前的資源如果在其他地方被變更，會導致不"
"必要的更新。"

msgid "Reporting node configuration warnings"
msgstr "顯示節點設定警告"

msgid ""
"Godot uses a *node configuration warning* system to warn users about "
"incorrectly configured nodes. When a node isn't configured correctly, a "
"yellow warning sign appears next to the node's name in the Scene dock. When "
"you hover or click on the icon, a warning message pops up. You can use this "
"feature in your scripts to help you and your team avoid mistakes when "
"setting up scenes."
msgstr ""
"Godot 會以*節點設定警告*系統提醒使用者節點設定錯誤。當節點設定不正確時，場景"
"面板上的節點名稱旁會出現黃色警告標誌。當你滑鼠移過或點擊圖示時，會跳出警告訊"
"息。你可以在腳本中利用這功能，幫助自己和團隊避免設定場景時出錯。"

msgid ""
"When using node configuration warnings, when any value that should affect or "
"remove the warning changes, you need to "
"call :ref:`update_configuration_warnings<class_Node_method_update_configuration_warnings>` . "
"By default, the warning only updates when closing and reopening the scene."
msgstr ""
"使用節點設定警告時，凡是會影響警告的屬性變動，你都要呼"
"叫 :ref:`update_configuration_warnings<class_Node_method_update_configuration_warnings>`。"
"預設只會在關閉再打開場景時自動更新警告。"

msgid "Running one-off scripts using EditorScript"
msgstr "使用 EditorScript 執行一次性腳本"

msgid ""
"Sometimes, you need to run code just one time to automate a certain task "
"that is not available in the editor out of the box. Some examples might be:"
msgstr "有時候你會需要只執行一次的腳本來自動化某些編輯器內沒內建的任務，例如："

msgid ""
"Use as a playground for GDScript or C# scripting without having to run a "
"project. ``print()`` output is displayed in the editor Output panel."
msgstr ""
"用來當作 GDScript 或 C# 腳本的練習區，不用執行專案也可以測試。``print()`` 的"
"輸出會顯示在編輯器的輸出面板。"

msgid ""
"Scale all light nodes in the currently edited scene, as you noticed your "
"level ends up looking too dark or too bright after placing lights where "
"desired."
msgstr ""
"調整目前編輯場景中所有光源節點的強度，例如發現場景太暗或太亮時，可快速修正。"

msgid ""
"Replace nodes that were copy-pasted with scene instances to make them easier "
"to modify later."
msgstr "把複製貼上的節點批次換成場景實例，讓後續維護更方便。"

msgid ""
"This is available in Godot by extending :ref:`class_EditorScript` in a "
"script. This provides a way to run individual scripts in the editor without "
"having to create an editor plugin."
msgstr ""
"這可以透過繼承 :ref:`class_EditorScript` 實作。這種方式讓你不用寫外掛也能直接"
"在編輯器裡執行單一腳本。"

msgid ""
"To create an EditorScript, right-click a folder or empty space in the "
"FileSystem dock then choose **New > Script...**. In the script creation "
"dialog, click the tree icon to choose an object to extend from (or enter "
"``EditorScript`` directly in the field on the left, though note this is case-"
"sensitive):"
msgstr ""
"要建立 EditorScript，請在檔案總管的資料夾或空白處點右鍵選擇「**新增 > 腳"
"本...**」。在腳本建立對話框中，點樹狀圖示選擇要繼承的物件（或直接在左側欄位輸"
"入 ``EditorScript``，注意大小寫）："

msgid "Creating an editor script in the script editor creation dialog"
msgstr "於腳本建立對話框中建立編輯器腳本"

msgid ""
"This will automatically select a script template that is suited for "
"EditorScripts, with a ``_run()`` method already inserted:"
msgstr "這會自動選用適合 EditorScript 的腳本範本，並內建一個 ``_run()`` 方法："

msgid ""
"This ``_run()`` method is executed when you use **File > Run** or the "
"keyboard shortcut :kbd:`Ctrl + Shift + X` while the EditorScript is the "
"currently open script in the script editor. This keyboard shortcut is only "
"effective when currently focused on the script editor."
msgstr ""
"這個 ``_run()`` 方法會在你用 **檔案 > 執行** 或快捷鍵 :kbd:`Ctrl + Shift + "
"X` （腳本編輯器有焦點時）時執行。"

msgid "Scripts that extend EditorScript must be ``@tool`` scripts to function."
msgstr "繼承 EditorScript 的腳本必須加上 ``@tool`` 才會運作。"

msgid ""
"EditorScripts have no undo/redo functionality, so **make sure to save your "
"scene before running one** if the script is designed to modify any data."
msgstr ""
"EditorScript 沒有復原/重做功能，如果腳本會修改資料，**執行前請一定要先儲存場"
"景**。"

msgid ""
"To access nodes in the currently edited scene, use "
"the :ref:`EditorScript.get_scene <class_EditorScript_method_get_scene>` "
"method which returns the root Node of the currently edited scene. Here's an "
"example that recursively gets all nodes in the currently edited scene and "
"doubles the range of all OmniLight3D nodes:"
msgstr ""
"要取得目前編輯場景的節點，可使用 :ref:`EditorScript.get_scene "
"<class_EditorScript_method_get_scene>` 方法，這會回傳目前場景的根節點。以下是"
"一個範例，會遞迴取得所有節點並把所有 OmniLight3D 節點的 range 乘以二："

msgid ""
"You can change the currently edited scene at the top of the editor even "
"while the Script view is open. This will affect the return value "
"of :ref:`EditorScript.get_scene <class_EditorScript_method_get_scene>`, so "
"make sure you've selected the scene you intend to iterate upon before "
"running the script."
msgstr ""
"即使腳本檢視開啟時，你仍可在編輯器頂部切換當前編輯的場景。這會影"
"響 :ref:`EditorScript.get_scene <class_EditorScript_method_get_scene>` 的回傳"
"值，所以執行腳本前要確認選對了要操作的場景。"

msgid "Instancing scenes"
msgstr "場景實體化"

msgid ""
"You can instantiate packed scenes normally and add them to the scene "
"currently opened in the editor. By default, nodes or scenes added "
"with :ref:`Node.add_child(node) <class_Node_method_add_child>` are **not** "
"visible in the Scene tree dock and are **not** persisted to disk. If you "
"wish the node or scene to be visible in the scene tree dock and persisted to "
"disk when saving the scene, you need to set the child node's :ref:`owner "
"<class_Node_property_owner>` property to the currently edited scene root."
msgstr ""
"你可以像平常一樣實例化打包場景並加入目前編輯器打開的場景。預設"
"用 :ref:`Node.add_child(node) <class_Node_method_add_child>` 加進來的節點或場"
"景，在場景樹面板是不會顯示、也不會儲存到磁碟的。如果要讓它在場景樹面板可見並"
"能隨場景存檔，就要把子節點的 :ref:`owner <class_Node_property_owner>` 屬性設"
"成目前編輯場景的根節點。"

msgid "If you are using ``@tool``:"
msgstr "如果你是用 ``@tool``："

msgid "If you are using :ref:`EditorScript<class_EditorScript>`:"
msgstr "如果你用 :ref:`EditorScript<class_EditorScript>`："

msgid ""
"Using ``@tool`` improperly can yield many errors. It is advised to first "
"write the code how you want it, and only then add the ``@tool`` annotation "
"to the top. Also, make sure to separate code that runs in-editor from code "
"that runs in-game. This way, you can find bugs more easily."
msgstr ""
"不當使用 ``@tool`` 會導致許多錯誤。建議你先寫好程式碼，最後再加上 ``@tool`` "
"註記。也要記得把編輯器用的程式碼和遊戲執行的程式碼區分清楚，如此更容易找出錯"
"誤。"
