#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making plugins"
msgstr "製作外掛程式"

msgid "About plugins"
msgstr "關於外掛程式"

msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be "
"made entirely with GDScript and standard scenes, without even reloading the "
"editor. Unlike modules, you don't need to create C++ code nor recompile the "
"engine. While this makes plugins less powerful, there are still many things "
"you can do with them. Note that a plugin is similar to any scene you can "
"already make, except it is created using a script to add editor "
"functionality."
msgstr ""
"外掛程式是一種擴充編輯器功能、加入實用工具的好方法。它可以完全以 GDScript 與"
"標準場景製作，甚至無須重新載入編輯器。與模組不同，外掛程式不需要撰寫 C++ 程式"
"碼或重新編譯引擎。雖然功能上不及模組強大，但你仍然可以用外掛程式做到許多事。"
"請注意，外掛程式性質上就像你平常建立的場景，只是它是透過腳本強化編輯器功能。"

msgid ""
"This tutorial will guide you through the creation of two plugins so you can "
"understand how they work and be able to develop your own. The first is a "
"custom node that you can add to any scene in the project, and the other is a "
"custom dock added to the editor."
msgstr ""
"本教學將帶你實作兩個外掛程式，幫助你理解其運作方式，並能自行開發。第一個是可"
"加到任何場景中的自訂節點，第二個是加到編輯器內的自訂面板（Dock）。"

msgid "Creating a plugin"
msgstr "建立外掛程式"

msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as a base to develop and test the plugins."
msgstr ""
"在開始前，請先於任意位置建立一個空專案。這個專案將作為開發與測試外掛程式的基"
"礎。"

msgid ""
"The first thing you need for the editor to identify a new plugin is to "
"create two files: a ``plugin.cfg`` for configuration and a tool script with "
"the functionality. Plugins have a standard path like ``addons/plugin_name`` "
"inside the project folder. Godot provides a dialog for generating those "
"files and placing them where they need to be."
msgstr ""
"編輯器要識別新外掛程式，必須先建立兩個檔案：一個 ``plugin.cfg`` 設定檔，以及"
"一個包含功能的工具腳本。外掛程式應放在專案資料夾下的標準路徑，如 ``addons/"
"plugin_name``。Godot 提供對話方塊來產生這些檔案，並自動放置到正確的位置。"

msgid ""
"In the main toolbar, click the ``Project`` dropdown. Then click ``Project "
"Settings...``. Go to the ``Plugins`` tab and then click on the ``Create New "
"Plugin`` button in the top-right."
msgstr ""
"於主工具列中，點擊 ``專案`` 下拉選單，再點選 ``專案設定...``。切換到 ``外掛程"
"式`` 分頁，然後點擊右上角的 ``建立新外掛程式`` 按鈕。"

msgid "You will see the dialog appear, like so:"
msgstr "你會看到出現如下的對話方塊："

msgid ""
"The placeholder text in each field describes how it affects the plugin's "
"creation of the files and the config file's values."
msgstr "每個欄位的預設提示文字會說明它如何影響外掛程式檔案的產生與設定值。"

msgid "To continue with the example, use the following values:"
msgstr "請依下列範例值繼續操作："

msgid ""
"Unchecking the ``Activate now?`` option in C# is always required because, "
"like every other C# script, the EditorPlugin script needs to be compiled "
"which requires building the project. After building the project the plugin "
"can be enabled in the ``Plugins`` tab of ``Project Settings``."
msgstr ""
"在 C# 中，必須取消勾選 ``立即啟用？``，因為 EditorPlugin 腳本就像其他 C# 腳本"
"一樣需要編譯，這意味著必須先建置專案。建置完成後，便可於 ``專案設定`` 的 ``外"
"掛程式`` 分頁啟用外掛程式。"

msgid "You should end up with a directory structure like this:"
msgstr "你最後應該會看到類似如下的目錄結構："

msgid ""
"``plugin.cfg`` is an INI file with metadata about your plugin. The name and "
"description help people understand what it does. Your name helps you get "
"properly credited for your work. The version number helps others know if "
"they have an outdated version; if you are unsure on how to come up with the "
"version number, check out `Semantic Versioning <https://semver.org/>`_. The "
"main script file will instruct Godot what your plugin does in the editor "
"once it is active."
msgstr ""
"``plugin.cfg`` 是一個 INI 格式檔，存放外掛程式的中繼資料。名稱與描述讓其他人"
"明白它的用途，作者欄則確保你獲得正確署名。版本號可讓他人分辨是否為舊版本；若"
"不知如何編寫版本號，請參考 `Semantic Versioning <https://semver.org/>`_。主腳"
"本檔則會在外掛程式啟用時告訴 Godot 如何運作你的外掛程式。"

msgid "The script file"
msgstr "腳本檔案"

msgid ""
"Upon creation of the plugin, the dialog will automatically open the "
"EditorPlugin script for you. The script has two requirements that you cannot "
"change: it must be a ``@tool`` script, or else it will not load properly in "
"the editor, and it must inherit from :ref:`class_EditorPlugin`."
msgstr ""
"建立外掛程式後，對話方塊會自動幫你打開 EditorPlugin 腳本。此腳本有兩項必要條"
"件：必須標記為 ``@tool``，否則無法在編輯器正確載入；且必須繼"
"承 :ref:`class_EditorPlugin`。"

msgid ""
"In addition to the EditorPlugin script, any other GDScript that your plugin "
"uses must *also* be a tool. Any GDScript without ``@tool`` used by the "
"editor will act like an empty file!"
msgstr ""
"除了 EditorPlugin 腳本外，你的外掛程式所用的其他 GDScript 也*必須*是工具腳"
"本。若沒有 ``@tool`` 標記，該 GDScript 在編輯器中將形同空檔！"

msgid ""
"It's important to deal with initialization and clean-up of resources. A good "
"practice is to use the virtual function :ref:`_enter_tree() "
"<class_Node_private_method__enter_tree>` to initialize your plugin "
"and :ref:`_exit_tree() <class_Node_private_method__exit_tree>` to clean it "
"up. Thankfully, the dialog generates these callbacks for you. Your script "
"should look something like this:"
msgstr ""
"妥善處理資源的初始化與清理很重要。建議在 :ref:`_enter_tree() "
"<class_Node_private_method__enter_tree>` 虛擬函式中初始化外掛程式，並"
"於 :ref:`_exit_tree() <class_Node_private_method__exit_tree>` 負責清理。幸好 "
"Godot 會自動為你產生這些回呼函式。你的腳本大致如下所示："

msgid "This is a good template to use when creating new plugins."
msgstr "這是建立新外掛程式時的良好範本。"

msgid "A custom node"
msgstr "自訂節點"

msgid ""
"Sometimes you want a certain behavior in many nodes, such as a custom scene "
"or control that can be reused. Instancing is helpful in a lot of cases, but "
"sometimes it can be cumbersome, especially if you're using it in many "
"projects. A good solution to this is to make a plugin that adds a node with "
"a custom behavior."
msgstr ""
"有時你會希望多個節點具有某種共通行為，例如可重用的自訂場景或控制元件。實體化"
"（Instancing）很實用，但若在多個專案反覆使用會顯得繁複。一個好方法是製作一個"
"能自動加入自訂行為節點的外掛程式。"

msgid ""
"Nodes added via an EditorPlugin are \"CustomType\" nodes. While they work "
"with any scripting language, they have fewer features than :ref:`the Script "
"Class system <doc_gdscript_basics_class_name>`. If you are writing GDScript "
"or NativeScript, we recommend using Script Classes instead."
msgstr ""
"透過 EditorPlugin 加入的節點屬於「CustomType（自訂型別）」節點。雖然這適用於"
"所有腳本語言，但功能不如 :ref:`腳本類別系統 "
"<doc_gdscript_basics_class_name>`。如果你用 GDScript 或 NativeScript，建議優"
"先使用腳本類別（Script Class）功能。"

msgid ""
"To create a new node type, you can use the function :ref:`add_custom_type() "
"<class_EditorPlugin_method_add_custom_type>` from "
"the :ref:`class_EditorPlugin` class. This function can add new types to the "
"editor (nodes or resources). However, before you can create the type, you "
"need a script that will act as the logic for the type. While that script "
"doesn't have to use the ``@tool`` annotation, it can be added so the script "
"runs in the editor."
msgstr ""
"若要建立新的節點型別，可使用 :ref:`class_EditorPlugin` 類別"
"的 :ref:`add_custom_type() <class_EditorPlugin_method_add_custom_type>` 方"
"法。這個方法可讓你在編輯器新增自訂型別（節點或資源）。但在建立型別前，需要有"
"一支作為該型別邏輯的腳本。這支腳本不一定要加 ``@tool``，但加上後便可於編輯器"
"內即時運作。"

msgid ""
"For this tutorial, we'll create a button that prints a message when clicked. "
"For that, we'll need a script that extends from :ref:`class_Button`. It "
"could also extend :ref:`class_BaseButton` if you prefer:"
msgstr ""
"本教學將製作一個按下時會顯示訊息的按鈕。你需要寫一支繼承"
"自 :ref:`class_Button` 的腳本，或若偏好也可繼承 :ref:`class_BaseButton`："

msgid ""
"That's it for our basic button. You can save this as ``my_button.gd`` inside "
"the plugin folder. You'll also need a 16×16 icon to show in the scene tree. "
"If you don't have one, you can grab the default one from the engine and save "
"it in your `addons/my_custom_node` folder as `icon.png`, or use the default "
"Godot logo (`preload(\"res://icon.svg\")`)."
msgstr ""
"這樣就完成了基本的按鈕。請將此腳本儲存為外掛程式資料夾內的 ``my_button.gd``。"
"你還需要一張 16×16 的圖示用於場景樹顯示。若沒有現成圖示，可從引擎抓取預設圖"
"示，存到 `addons/my_custom_node` 資料夾並命名為 `icon.png`，或直接使用 Godot "
"預設標誌圖示（`preload(\"res://icon.svg\")`）。"

msgid ""
"SVG images that are used as custom node icons should have the **Editor > "
"Scale With Editor Scale** and **Editor > Convert Colors With Editor "
"Theme** :ref:`import options <doc_importing_images_editor_import_options>` "
"enabled. This allows icons to follow the editor's scale and theming settings "
"if the icons are designed with the same color palette as Godot's own icons."
msgstr ""
"作為自訂節點圖示的 SVG 圖片，建議在 :ref:`匯入選項 "
"<doc_importing_images_editor_import_options>` 中啟用 **Editor > Scale With "
"Editor Scale**（編輯器縮放同步）及 **Editor > Convert Colors With Editor "
"Theme** （隨編輯器主題色彩轉換）。只要圖示顏色與 Godot 編輯器一致，這兩個選項"
"就能讓圖示隨編輯器縮放與主題變換自動調整。"

msgid ""
"Now, we need to add it as a custom type so it shows on the **Create New "
"Node** dialog. For that, change the ``custom_node.gd`` script to the "
"following:"
msgstr ""
"接下來要將它註冊為自訂型別，才能在 **新增節點** 對話框中看到。請將 "
"``custom_node.gd`` 腳本改寫如下："

msgid ""
"With that done, the plugin should already be available in the plugin list in "
"the **Project Settings**, so activate it as explained in `Checking the "
"results`_."
msgstr ""
"完成以上步驟後，外掛程式就會出現在 **專案設定** 的外掛程式清單中，可依 `檢查"
"結果`_ 章節說明啟用它。"

msgid "Then try it out by adding your new node:"
msgstr "然後試著加入你剛剛創建的新節點："

msgid ""
"When you add the node, you can see that it already has the script you "
"created attached to it. Set a text to the button, save and run the scene. "
"When you click the button, you can see some text in the console:"
msgstr ""
"當你新增該節點時，會發現已自動掛上你寫的腳本。請為按鈕設定文字，然後儲存並執"
"行場景。按下按鈕後，你會在終端機（Console）看到訊息："

msgid "A custom dock"
msgstr "自訂面板"

msgid ""
"Sometimes, you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks "
"are just scenes based on Control, so they are created in a way similar to "
"usual GUI scenes."
msgstr ""
"有時你會想讓編輯器內隨時有特定工具。最簡單的方法就是做一個外掛程式，新增一個"
"面板（Dock）。面板其實就是以 Control 為基礎的場景，建立方式和一般 GUI 場景相"
"同。"

msgid ""
"Creating a custom dock is done just like a custom node. Create a new "
"``plugin.cfg`` file in the ``addons/my_custom_dock`` folder, then add the "
"following content to it:"
msgstr ""
"建立自訂面板的步驟和自訂節點一樣。請在 ``addons/my_custom_dock`` 資料夾中建立"
"新的 ``plugin.cfg``，並加入以下內容："

msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill it with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` to "
"get a good start."
msgstr ""
"接著在同一資料夾下建立 ``custom_dock.gd`` 腳本，內容可參考前述的 :ref:`標準範"
"本 <doc_making_plugins_template_code>`。"

msgid ""
"Since we're trying to add a new custom dock, we need to create the contents "
"of the dock. This is nothing more than a standard Godot scene: just create a "
"new scene in the editor then edit it."
msgstr ""
"既然要新增自訂面板，就需要設計面板內容。這其實就是一個標準 Godot 場景：直接在"
"編輯器裡新建場景再編輯即可。"

msgid ""
"For an editor dock, the root node **must** be a :ref:`Control "
"<class_Control>` or one of its child classes. For this tutorial, you can "
"create a single button. The name of the root node will also be the name that "
"appears on the dock tab, so be sure to give it a short and descriptive name. "
"Also, don't forget to add some text to your button."
msgstr ""
"編輯器面板的根節點**必須**是 :ref:`Control <class_Control>` 或其子類別。本教"
"學建議只放一個按鈕。根節點的名稱會顯示在面板標籤上，請取簡明易懂的名字，並記"
"得為按鈕設置顯示文字。"

msgid ""
"Save this scene as ``my_dock.tscn``. Now, we need to grab the scene we "
"created then add it as a dock in the editor. For this, you can rely on the "
"function :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` from the :ref:`EditorPlugin "
"<class_EditorPlugin>` class."
msgstr ""
"將場景儲存為 ``my_dock.tscn``。接著，我們要將這個場景作為面板加入編輯器。請"
"用 :ref:`EditorPlugin <class_EditorPlugin>` 類別"
"的 :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` 方法。"

msgid ""
"You need to select a dock position and define the control to add (which is "
"the scene you just created). Don't forget to **remove the dock** when the "
"plugin is deactivated. The script could look like this:"
msgstr ""
"你需要選擇面板停靠的位置，並指定要加入的控制元件（就是你剛建立的場景）。外掛"
"停用時，記得要**移除該面板**。腳本範例如下："

msgid ""
"Note that, while the dock will initially appear at its specified position, "
"the user can freely change its position and save the resulting layout."
msgstr "請注意，雖然面板初始會出現在指定位置，但使用者可隨意拖曳並儲存佈局。"

msgid "Checking the results"
msgstr "檢查結果"

msgid ""
"It's now time to check the results of your work. Open the **Project "
"Settings** and click on the **Plugins** tab. Your plugin should be the only "
"one on the list."
msgstr ""
"現在可以檢查你的成果了。打開 **專案設定**，切到 **外掛程式** 分頁。你的外掛程"
"式應該會出現在清單中。"

msgid ""
"You can see the plugin is not enabled. Click the **Enable** checkbox to "
"activate the plugin. The dock should become visible before you even close "
"the settings window. You should now have a custom dock:"
msgstr ""
"你會發現外掛程式預設為未啟用狀態。勾選 **啟用** 後，面板會立即出現在編輯器主"
"畫面上，無需關閉設定視窗。現在你就擁有一個自訂面板了："

msgid "Registering autoloads/singletons in plugins"
msgstr "於外掛程式中註冊自動載入/單例"

msgid ""
"It is possible for editor plugins to automatically register :ref:`autoloads "
"<doc_singletons_autoload>` when the plugin is enabled. This also includes "
"unregistering the autoload when the plugin is disabled."
msgstr ""
"編輯器外掛程式可以在啟用時自動註冊 :ref:`自動載入 "
"<doc_singletons_autoload>`，且會在外掛程式停用時自動解除註冊。"

msgid ""
"This makes setting up plugins faster for users, as they no longer have to "
"manually add autoloads to their project settings if your editor plugin "
"requires the use of an autoload."
msgstr ""
"這樣一來，若你的外掛程式需要用到自動載入，使用者就不必再手動於專案設定中新"
"增，能更快完成外掛程式設定。"

msgid "Use the following code to register a singleton from an editor plugin:"
msgstr "你可用以下程式碼於編輯器外掛程式註冊單例（Singleton）："

msgid "Using sub-plugins"
msgstr "使用子外掛程式"

msgid ""
"Often a plugin adds multiple things, for example a custom node and a panel. "
"In those cases it might be easier to have a separate plugin script for each "
"of those features. Sub-plugins can be used for this."
msgstr ""
"有時一個外掛程式會新增多種功能，例如同時包含自訂節點與自訂面板。這時將各功能"
"拆分成不同的外掛腳本會更有彈性。子外掛程式（sub-plugins）正是為此設計。"

msgid "First create all plugins and sub plugins as normal plugins:"
msgstr "首先，先將主要外掛與子外掛都建立成一般外掛："

msgid "Then move the sub plugins into the main plugin folder:"
msgstr "然後將子外掛（sub-plugins）移到主外掛資料夾下："

msgid ""
"Godot will hide sub-plugins from the plugin list, so that a user can't "
"enable or disable them. Instead the main plugin script should enable and "
"disable sub-plugins like this:"
msgstr ""
"Godot 會自動將子外掛從外掛程式列表中隱藏起來，使用者無法直接啟用或停用。主外"
"掛腳本需透過程式碼，像這樣啟用或停用子外掛："

msgid "Going beyond"
msgstr "進階應用"

msgid ""
"Now that you've learned how to make basic plugins, you can extend the editor "
"in several ways. Lots of functionality can be added to the editor with "
"GDScript; it is a powerful way to create specialized editors without having "
"to delve into C++ modules."
msgstr ""
"現在你已學會製作基本外掛程式，便能用多種方式擴充編輯器功能。透過 GDScript 就"
"能實現大量編輯器功能，這是打造專業化編輯器又無須深入 C++ 模組的強大方式。"

msgid ""
"You can make your own plugins to help yourself and share them in the `Asset "
"Library <https://godotengine.org/asset-library/>`_ so that people can "
"benefit from your work."
msgstr ""
"你可以開發自用或分享用的外掛程式，並上傳到 `素材庫 <https://godotengine.org/"
"asset-library/>`_，讓其他人也能受惠於你的成果。"
