#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Inspector plugins"
msgstr "屬性檢查器外掛"

msgid ""
"The inspector dock allows you to create custom widgets to edit properties "
"through plugins. This can be beneficial when working with custom datatypes "
"and resources, although you can use the feature to change the inspector "
"widgets for built-in types. You can design custom controls for specific "
"properties, entire objects, and even separate controls associated with "
"particular datatypes."
msgstr ""
"屬性檢查器面板允許你透過外掛建立自訂小工具來編輯屬性。這在處理自訂資料型別與"
"資源時特別有用，但你也可以利用這個功能修改內建型別的屬性檢查器小工具。你可以"
"為特定屬性、整個物件，甚至特定資料型別設計專屬的自訂控制項。"

msgid ""
"This guide explains how to use the :ref:`class_EditorInspectorPlugin` "
"and :ref:`class_EditorProperty` classes to create a custom interface for "
"integers, replacing the default behavior with a button that generates random "
"values between 0 and 99."
msgstr ""
"本指南說明如何使用 :ref:`class_EditorInspectorPlugin` "
"與 :ref:`class_EditorProperty` 類別，為整數型別建立自訂介面，將預設的編輯行為"
"替換為一個能產生 0 到 99 隨機值的按鈕。"

msgid "The default behavior on the left and the end result on the right."
msgstr "左側為預設行為，右側為最終效果。"

msgid "Setting up your plugin"
msgstr "設定你的外掛"

msgid "Create a new empty plugin to get started."
msgstr "先建立一個全新的空白外掛。"

msgid "See :ref:`doc_making_plugins` guide to set up your new plugin."
msgstr "請參閱 :ref:`doc_making_plugins` 指南，來設定你的新外掛。"

msgid ""
"Let's assume you've called your plugin folder ``my_inspector_plugin``. If "
"so, you should end up with a new ``addons/my_inspector_plugin`` folder that "
"contains two files: ``plugin.cfg`` and ``plugin.gd``."
msgstr ""
"假設你的外掛資料夾命名為 ``my_inspector_plugin``，你應該會有一個 ``addons/"
"my_inspector_plugin`` 資料夾，裡面包含兩個檔案：``plugin.cfg`` 及 "
"``plugin.gd``。"

msgid ""
"As before, ``plugin.gd`` is a script extending :ref:`class_EditorPlugin` and "
"you need to introduce new code for its ``_enter_tree`` and ``_exit_tree`` "
"methods. To set up your inspector plugin, you must load its script, then "
"create and add the instance by calling ``add_inspector_plugin()``. If the "
"plugin is disabled, you should remove the instance you have added by calling "
"``remove_inspector_plugin()``."
msgstr ""
"和以往一樣，``plugin.gd`` 是一個繼承自 :ref:`class_EditorPlugin` 的腳本，你需"
"要在 ``_enter_tree`` 與 ``_exit_tree`` 方法中新增程式碼。若要註冊你的屬性檢查"
"器外掛，必須載入其腳本，然後使用 ``add_inspector_plugin()`` 來建立並新增實"
"例。若外掛被停用時，應以 ``remove_inspector_plugin()`` 移除你新增的實例。"

msgid ""
"Here, you are loading a script and not a packed scene. Therefore you should "
"use ``new()`` instead of ``instantiate()``."
msgstr ""
"這裡你載入的是腳本而非已封裝場景，因此應使用 ``new()``，而不是 "
"``instantiate()``。"

msgid "Interacting with the inspector"
msgstr "與屬性檢查器互動"

msgid ""
"To interact with the inspector dock, your ``my_inspector_plugin.gd`` script "
"must extend the :ref:`class_EditorInspectorPlugin` class. This class "
"provides several virtual methods that affect how the inspector handles "
"properties."
msgstr ""
"要與屬性檢查器面板互動，你的 ``my_inspector_plugin.gd`` 腳本必須繼"
"承 :ref:`class_EditorInspectorPlugin` 類別。這個類別提供多個虛擬方法，能影響"
"屬性檢查器如何處理屬性。"

msgid ""
"To have any effect at all, the script must implement the ``_can_handle()`` "
"method. This function is called for each edited :ref:`class_Object` and must "
"return ``true`` if this plugin should handle the object or its properties."
msgstr ""
"要讓腳本生效，必須實作 ``_can_handle()`` 方法。這個方法會針對每個被編輯"
"的 :ref:`class_Object` 進行呼叫，若此外掛應處理該物件或其屬性，則需回傳 "
"``true``。"

msgid "This includes any :ref:`class_Resource` attached to the object."
msgstr "這也包含附加在物件上的任何 :ref:`class_Resource`。"

msgid ""
"You can implement four other methods to add controls to the inspector at "
"specific positions. The ``_parse_begin()`` and ``_parse_end()`` methods are "
"called only once at the beginning and the end of parsing for each object, "
"respectively. They can add controls at the top or bottom of the inspector "
"layout by calling ``add_custom_control()``."
msgstr ""
"你可以另外實作四個方法，在屬性檢查器的特定位置新增控制項。``_parse_begin()`` "
"和 ``_parse_end()`` 會分別在解析每個物件的開頭和結尾時僅呼叫一次。這兩個方法"
"可透過 ``add_custom_control()`` 在屬性檢查器的上方或下方新增控制項。"

msgid ""
"As the editor parses the object, it calls the ``_parse_category()`` and "
"``_parse_property()`` methods. There, in addition to "
"``add_custom_control()``, you can call both ``add_property_editor()`` and "
"``add_property_editor_for_multiple_properties()``. Use these last two "
"methods to specifically add :ref:`class_EditorProperty`-based controls."
msgstr ""
"編輯器解析物件時，會呼叫 ``_parse_category()`` 和 ``_parse_property()`` 方"
"法。在這兩個方法中，除了 ``add_custom_control()``，你還可以呼叫 "
"``add_property_editor()`` 及 "
"``add_property_editor_for_multiple_properties()``。這兩個方法是專門用來新增基"
"於 :ref:`class_EditorProperty` 的控制項。"

msgid "Adding an interface to edit properties"
msgstr "新增屬性編輯介面"

msgid ""
"The :ref:`class_EditorProperty` class is a special type "
"of :ref:`class_Control` that can interact with the inspector dock's edited "
"objects. It doesn't display anything but can house any other control nodes, "
"including complex scenes."
msgstr ""
":ref:`class_EditorProperty` 類別是一種特殊的 :ref:`class_Control`，可與屬性檢"
"查器面板所編輯的物件互動。它本身不會顯示任何內容，但可以容納其他控制項節點，"
"甚至是複雜的場景。"

msgid ""
"There are three essential parts to the script "
"extending :ref:`class_EditorProperty`:"
msgstr "擴充 :ref:`class_EditorProperty` 的腳本有三個主要部分："

msgid ""
"You must define the ``_init()`` method to set up the control nodes' "
"structure."
msgstr "你必須定義 ``_init()`` 方法，來設定控制項節點結構。"

msgid ""
"You should implement the ``_update_property()`` to handle changes to the "
"data from the outside."
msgstr "你應該實作 ``_update_property()`` 來處理外部對資料的更動。"

msgid ""
"A signal must be emitted at some point to inform the inspector that the "
"control has changed the property using ``emit_changed``."
msgstr ""
"必須在某個時機以 ``emit_changed`` 發出訊號，通知屬性檢查器該控制項已變更屬"
"性。"

msgid ""
"You can display your custom widget in two ways. Use just the default "
"``add_child()`` method to display it to the right of the property name, and "
"use ``add_child()`` followed by ``set_bottom_editor()`` to position it below "
"the name."
msgstr ""
"你可以用兩種方式顯示你的自訂小工具。只用預設的 ``add_child()`` 方法，會將它顯"
"示在屬性名稱右側；若在 ``add_child()`` 後呼叫 ``set_bottom_editor()``，則會將"
"它顯示在名稱下方。"

msgid ""
"Using the example code above you should be able to make a custom widget that "
"replaces the default :ref:`class_SpinBox` control for integers with "
"a :ref:`class_Button` that generates random values."
msgstr ""
"使用上述範例程式碼，你應該可以製作一個自訂小工具，將整數屬性預設"
"的 :ref:`class_SpinBox` 控制項替換為一個能產生隨機值的 :ref:`class_Button`。"
