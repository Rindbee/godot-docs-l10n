#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Player scene and input actions"
msgstr "Player 場景與輸入事件"

msgid ""
"In the next two lessons, we will design the player scene, register custom "
"input actions, and code player movement. By the end, you'll have a playable "
"character that moves in eight directions."
msgstr ""
"在接下來的兩節課程中，我們將會設計玩家場景、註冊自訂輸入動作、編寫玩家移動程"
"式碼。在最後，你將會得到一個可以八方向移動的可遊玩角色。"

msgid ""
"To learn more about the different physics node types, see "
"the :ref:`doc_physics_introduction`."
msgstr ""
"要學習更多關於不同物理節點型別的內容，請參"
"閱 :ref:`doc_physics_introduction`。"

msgid ""
"For now, we're going to create a basic rig for our character's 3D model. "
"This will allow us to rotate the model later via code while it plays an "
"animation."
msgstr ""
"現在，我們將為角色的 3D 模型建立一個基本的裝備。稍後我們將在播放動畫時通過程"
"式碼旋轉模型。"

msgid ""
"Then, in the FileSystem dock, expand the ``art/`` folder by double-clicking "
"it and drag and drop ``player.glb`` onto ``Pivot``."
msgstr ""
"然後在檔案系統面板中，按兩下展開 ``art/`` 資料夾，將 ``player.glb`` 拖放到 "
"``Pivot`` 節點上。"

msgid ""
"This should instantiate the model as a child of ``Pivot``. You can rename it "
"to ``Character``."
msgstr ""
"這樣應該就會把這個模型產生實體為 ``Pivot`` 的子項。你可以將其重命名為 "
"``Character`` 。"

msgid ""
"The ``.glb`` files contain 3D scene data based on the open source glTF 2.0 "
"specification. They're a modern and powerful alternative to a proprietary "
"format like FBX, which Godot also supports. To produce these files, we "
"designed the model in `Blender 3D <https://www.blender.org/>`__ and exported "
"it to glTF."
msgstr ""
"``.glb`` 檔案包含基於開放原始碼 glTF 2.0 規格的 3D 場景資料。它們是現代且強大"
"的替代方案，可取代像 FBX 這樣的專有格式，而 Godot 也支援 FBX。為了產生這些檔"
"案，我們在 `Blender 3D <https://www.blender.org/>`__ 中設計模型，並將其匯出"
"為 glTF。"

msgid "The sphere's wireframe appears below the character."
msgstr "球體的線框出現在角色的下面。"

msgid ""
"It will be the shape the physics engine uses to collide with the "
"environment, so we want it to better fit the 3D model. Make it a bit larger "
"by dragging the orange dot in the viewport. My sphere has a radius of about "
"``0.8`` meters."
msgstr ""
"這將會是物理引擎用來與環境碰撞的形狀，所以我們希望它能更貼合 3D 模型。在視埠"
"中拖曳橘色圓點，將它稍微放大一點。我的球體的半徑大約是 ``0.8`` 公尺。"

msgid ""
"Then, move the collision shape up so its bottom roughly aligns with the "
"grid's plane."
msgstr "然後，將碰撞形狀向上移動，使其底部大致對齊格線平面。"

msgid ""
"With the nodes ready, we can almost get coding. But first, we need to define "
"some input actions."
msgstr "節點準備就緒後，我們開始編寫程式。但首先，我們需要定義一些輸入動作。"

msgid "Creating input actions"
msgstr "建立圖示"

msgid ""
"To move the character, we will listen to the player's input, like pressing "
"the arrow keys. In Godot, while we could write all the key bindings in code, "
"there's a powerful system that allows you to assign a label to a set of keys "
"and buttons. This simplifies our scripts and makes them more readable."
msgstr ""
"要移動角色，我們就要監聽玩家的輸入，比如按下方向鍵。在 Godot 中，我們能夠使用"
"程式碼來綁定按鍵，但還有一個非常強大的系統，可以讓你為一系列按鍵和按鈕設定標"
"籤。這樣可以簡化我們的腳本，讓它們更易讀。"

msgid ""
"We're going to name our actions ``move_left``, ``move_right``, "
"``move_forward``, ``move_back``, and ``jump``."
msgstr ""
"我們將把我們的動作命名為 ``move_left``、``move_right``、``move_forward``、"
"``move_back`` 和 ``jump``。"

msgid "Create the following five actions:"
msgstr "有下列事項需注意："

msgid "Bind also the :kbd:`A` key, onto the action ``move_left``."
msgstr "將 :kbd:`A` 鍵也綁定在動作 ``move_left`` 上面。"

msgid ""
"If you want controllers to have different input actions, you should use the "
"Devices option in Additional Options. Device 0 corresponds to the first "
"plugged gamepad, Device 1 corresponds to the second plugged gamepad, and so "
"on."
msgstr ""
"如果你想讓多個手柄有不同的輸入動作，你需要在額外選項中使用裝置選項。裝置 0 對"
"應的是第一個插入的手柄，裝置 1 對應的是第二個插入的手柄，以此類推。"

msgid ""
"Do the same for the other input actions. For example, bind the right arrow, "
"D, and the left joystick's positive axis to ``move_right``. After binding "
"all keys, your interface should look like this."
msgstr ""
"為其他輸入動作也執行同樣的操作。比如將右方向鍵、D、左搖桿的正軸綁定給 "
"``move_right``。全部綁定完後，你的介面應該類似這樣。"

msgid "Your jump input action should look like this."
msgstr "你的跳躍輸入動作應該會像這樣。"

msgid ""
"That's all the actions we need for this game. You can use this menu to label "
"any groups of keys and buttons in your projects."
msgstr ""
"這些就是這個遊戲所需的所有動作了。你可以使用這個功能表來對專案中的任意按鍵和"
"按鈕組進行標記。"

msgid "In the next part, we'll code and test the player's movement."
msgstr "在下一部分，我們將為玩家的移動進行程式設計和測試。"
