#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "建立內容"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr "專案設定到位後，我們可以開始處理玩家控制的角色。"

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"第一個場景，我們要來定義 ``Player`` 物件。把玩家做成獨立一個 Player 場景的好"
"處是：就算遊戲其他部分還沒做好，也可以獨立測試單一場景。"

msgid "Node structure"
msgstr "節點結構"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. In the upper-left corner, in the \"Scene\" tab, "
"click the \"Other Node\" button and add an :ref:`Area2D <class_Area2D>` node "
"to the scene."
msgstr ""
"首先，我們需要為玩家物件選擇一個根節點。一般來說，場景的根節點應該反映物件期"
"望的功能——也就是這個物件 *是什麼* 。在左上角的「場景」頁籤中，點擊「其他節"
"點」按鈕，並新增一個 :ref:`Area2D <class_Area2D>` 節點到場景中。"

msgid ""
"When you add the ``Area2D`` node, Godot will display the following **warning "
"icon** next to it in the scene tree:"
msgstr ""
"當您加入 ``Area2D`` 節點後，Godot 會在場景樹中其旁邊顯示下列 **警告圖示** ："

msgid ""
"This warning tells us that the ``Area2D`` node requires a shape to detect "
"collisions or overlaps. We can **ignore the warning temporarily** because we "
"will first set up the player's visuals (using an animated sprite). Once the "
"visuals are ready, we will add a collision shape as a child node. This will "
"allow us to accurately size and position the shape based on the sprite's "
"appearance."
msgstr ""
"這個警告訊息告訴我們， ``Area2D`` 節點需要一個形狀才能偵測碰撞或重疊。我們可"
"以 **暫時忽略這個警告** ，因為我們將先設定玩家的視覺效果（使用動畫精靈）。一"
"旦視覺效果準備就緒，我們將新增一個碰撞形狀作為子節點。這樣可以讓我們根據精靈"
"的外觀精確地調整形狀的大小和位置。"

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"有了 ``Area2D`` 節點，我們就能偵測跑到了玩家範圍內物件。我們先點兩下節點，把"
"節點名稱改成 ``Player`` 。現在，場景根節點已經設定好了，接著來設定更多節點，"
"新增更多功能。"

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock. Its tooltip says \"Groups the "
"selected node with its children. This causes the parent to be selected when "
"any child node is clicked in 2D and 3D view.\""
msgstr ""
"在將任何子節點加入 ``Player`` 節點之前，我們要確保不會因為點擊到子節點而意外"
"移動或調整它們的大小。選取該節點，然後點擊鎖頭右邊的圖示。它的工具提示說明："
"「將選取的節點及其子節點群組化。這樣一來，當在 2D 和 3D 視圖中點擊任何子節點"
"時，都會改為選取父節點。」"

msgid ""
"Save the scene as ``player.tscn``. Click **Scene > Save**, or "
"press :kbd:`Ctrl + S` on Windows/Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"將場景儲存為 ``player.tscn`` 。點擊 **場景 > 儲存** ，或按下在 Windows/Linux "
"上是 :kbd:`Ctrl + S`，在 macOS 上是 :kbd:`Cmd + S`。"

msgid "For this project, we will be following the Godot naming conventions."
msgstr "在這個專案中，我們會遵守 Godot 的命名慣例。"

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript** ：類別 (節點) 使用大駝峰法 (PascalCase)，變數與函式名稱使用蛇形"
"法 (snake_case)，常數則使用全大寫 (ALL_CAPS) (詳細請參"
"考 :ref:`doc_gdscript_styleguide`)。"

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase "
"(See :ref:`doc_c_sharp_styleguide`). Be careful to type the method names "
"precisely when connecting signals."
msgstr ""
"**C#** ：類別與匯出的變數與方法使用大駝峰法 (PascalCase)，Private 欄位使用底"
"線加小駝峰 (_camelCase)，區域變數與參數使用小駝峰法 (camelCase) (請參"
"考 :ref:`doc_c_sharp_styleguide` )。在連接訊號的時候請特別注意不要打錯方法名"
"稱。"

msgid "Sprite animation"
msgstr "Sprite 動畫"

msgid ""
"Click on the ``Player`` node and add (:kbd:`Ctrl + A` on Windows/Linux "
"or :kbd:`Cmd + A` on macOS) a child node :ref:`AnimatedSprite2D "
"<class_AnimatedSprite2D>`. The ``AnimatedSprite2D`` will handle the "
"appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite2D`` requires "
"a :ref:`SpriteFrames <class_SpriteFrames>` resource, which is a list of the "
"animations it can display. Make sure ``AnimatedSprite2D`` is selected and "
"then find the ``Sprite Frames`` property under the ``Animation`` section in "
"the Inspector and click \"[empty]\" -> \"New SpriteFrames\":"
msgstr ""
"點擊 ``Player`` 節點，然後新增一個子節點 AnimatedSprite2D (在 Windows/Linux "
"上按 :kbd:`Ctrl + A`，macOS 上按 :kbd:`Cmd + A`)。 :ref:`AnimatedSprite2D "
"<class_AnimatedSprite2D>` 將負責我們玩家的外觀和動畫。請注意節點旁邊有一個警"
"告符號。 ``AnimatedSprite2D`` 需要一個 SpriteFrames 資源，其中包含它可以顯示"
"的動畫列表。請確保已選取 ``AnimatedSprite2D`` ，然後在 Inspector（屬性檢視"
"器）的 ``Animation`` （動畫）區塊下找到 :ref:`SpriteFrames "
"<class_SpriteFrames>` （Sprite 影格）屬性，點擊 \"[empty]\" -> \"New "
"SpriteFrames\"（新增 Sprite 影格）："

msgid ""
"Click on the ``SpriteFrames`` you just created to open the \"SpriteFrames\" "
"panel:"
msgstr "點擊您剛建立的 ``SpriteFrames`` 以開啟「SpriteFrames」面板："

msgid ""
"On the left is a list of animations. Click the ``default`` one and rename it "
"to ``walk``. Then click the **Add Animation** button to create a second "
"animation named ``up``."
msgstr ""
"左邊是動畫列表。點擊 ``default`` 這個動畫，然後將它 **重新命名** 為 "
"``walk`` 。接著點擊 **新增動畫** 按鈕來建立第二個名為 ``up`` 的動畫。"

msgid ""
"Find the player images in the FileSystem dock - they're in the ``art`` "
"folder you unzipped earlier. Drag the two images for each animation, into "
"the **Animation Frames** side of the panel for the corresponding animation:"
msgstr ""
"在檔案系統停靠視窗中找到玩家圖片 – 它們位於您先前解壓縮的 ``art`` 資料夾中。"
"將每個動畫的兩個圖片拖曳到對應動畫面板的 **動畫影格** 側邊："

msgid ""
"``playerGrey_walk1`` and ``playerGrey_walk2`` for the ``walk`` animation"
msgstr "``playerGrey_walk1`` 和 ``playerGrey_walk2`` 用於 ``walk`` 動畫"

msgid "``playerGrey_up1`` and ``playerGrey_up2`` for the ``up`` animation"
msgstr "``playerGrey_up1`` 和 ``playerGrey_up2`` 用於 ``up`` 動畫"

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite2D`` node and set the "
"``Scale`` property to ``(0.5, 0.5)``. You can find it in the Inspector under "
"the ``Node2D`` heading."
msgstr ""
"對於遊戲視窗來說，這些玩家圖片看起來有點大，所以我們需要把圖片縮小。點擊 "
"``AnimatedSprite`` 節點，然後把 ``Scale`` (縮放) 屬性設為 ``(0.5, 0.5)`` 。這"
"個屬性位在屬性檢視器中 ``Node2D`` 標題底下。"

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\" -> \"New "
"CapsuleShape2D\". Using the two size handles, resize the shape to cover the "
"sprite:"
msgstr ""
"最後，在 ``Player`` 節點下新增一個 :ref:`CollisionShape2D "
"<class_CollisionShape2D>` 子節點。這個節點是用來判斷玩家的「碰撞區域 (Hitbox "
"或 Collision Area)」。在這個角色上很適合使用 ``CapsuleShape2D`` 節點，所以我"
"們可以到屬性檢視器中的 [Shape] (形狀)，點擊 [空] -> [新增 CapsuleShape2D]。使"
"用兩個控制尺寸的圓點來把大小調整至覆蓋 Sprite："

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "完成之後， ``Player`` 看起來應該會像這樣："

msgid ""
"Once this is done, the warning on the ``Area2D`` node will disappear, as it "
"now has a shape assigned and can interact with other objects."
msgstr ""
"完成後， ``Area2D`` 節點上的警告就會消失，因為它現在已指定了形狀，可以與其他"
"物件互動了。"

msgid "Make sure to save the scene again after these changes."
msgstr "修改完畢後記得保存場景。"

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"在下一部分中，我們將向玩家節點新增一個腳本，以移動它並為其新增動畫效果。然"
"後，我們將設定碰撞偵測，以瞭解玩家何時被某些東西擊中。"
