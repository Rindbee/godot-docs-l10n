#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "建立內容"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr "專案設定到位後，我們可以開始處理玩家控制的角色。"

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"第一個場景，我們要來定義 ``Player`` 物件。把玩家做成獨立一個 Player 場景的好"
"處是：就算遊戲其他部分還沒做好，也可以獨立測試單一場景。"

msgid "Node structure"
msgstr "節點結構"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"首先，我們需要選擇玩家物件的根節點。一般來說，場景的根節點通常對應了物件所需"
"要的功能——也就是物件 **是什麼**。點擊 [其他節點] 按鈕，並新增 :ref:`Area2D "
"<class_Area2D>` 節點至場景中。"

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"有了 ``Area2D`` 節點，我們就能偵測跑到了玩家範圍內物件。我們先點兩下節點，把"
"節點名稱改成 ``Player`` 。現在，場景根節點已經設定好了，接著來設定更多節點，"
"新增更多功能。"

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"接著保存場景。選擇 [場景] -> [保存]，或是在 Windows/Linux 上按鍵盤 :kbd:"
"`Ctrl + S` ，在 macOS 上則是 :kbd:`Cmd + S` 。"

msgid "For this project, we will be following the Godot naming conventions."
msgstr "在這個專案中，我們會遵守 Godot 的命名慣例。"

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript** ：類別 (節點) 使用大駝峰法 (PascalCase)，變數與函式名稱使用蛇形"
"法 (snake_case)，常數則使用全大寫 (ALL_CAPS) (詳細請參考 :ref:"
"`doc_gdscript_styleguide`)。"

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#** ：類別與匯出的變數與方法使用大駝峰法 (PascalCase)，Private 欄位使用底"
"線加小駝峰 (_camelCase)，區域變數與參數使用小駝峰法 (camelCase) (請參考 :ref:"
"`doc_c_sharp_styleguide` )。在連接訊號的時候請特別注意不要打錯方法名稱。"

msgid "Sprite animation"
msgstr "Sprite 動畫"

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite2D`` node and set the "
"``Scale`` property to ``(0.5, 0.5)``. You can find it in the Inspector under "
"the ``Node2D`` heading."
msgstr ""
"對於遊戲視窗來說，這些玩家圖片看起來有點大，所以我們需要把圖片縮小。點擊 "
"``AnimatedSprite`` 節點，然後把 ``Scale`` (縮放) 屬性設為 ``(0.5, 0.5)`` 。這"
"個屬性位在屬性面板中 ``Node2D`` 標題底下。"

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\" -> \"New "
"CapsuleShape2D\". Using the two size handles, resize the shape to cover the "
"sprite:"
msgstr ""
"最後，在 ``Player`` 節點下新增一個 :ref:`CollisionShape2D "
"<class_CollisionShape2D>` 子節點。這個節點是用來判斷玩家的「碰撞區域 (Hitbox "
"或 Collision Area)」。在這個角色上很適合使用 ``CapsuleShape2D`` 節點，所以我"
"們可以到屬性面板中的 [Shape] (形狀)，點擊 [空] -> [新增 CapsuleShape2D]。使用"
"兩個控制尺寸的圓點來把大小調整至覆蓋 Sprite："

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "完成之後， ``Player`` 看起來應該會像這樣："

msgid "Make sure to save the scene again after these changes."
msgstr "修改完畢後記得保存場景。"

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"在下一部分中，我們將向玩家節點新增一個腳本，以移動它並為其新增動畫效果。然"
"後，我們將設定碰撞偵測，以瞭解玩家何時被某些東西擊中。"
