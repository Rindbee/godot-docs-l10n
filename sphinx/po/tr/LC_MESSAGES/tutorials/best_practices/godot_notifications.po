#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Godot bildirimleri"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_private_method__notification>` method. Its purpose is to allow "
"the Object to respond to a variety of engine-level callbacks that may relate "
"to it. For example, if the engine tells a :ref:`CanvasItem "
"<class_CanvasItem>` to \"draw\", it will call "
"``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Godot'daki her Nesne bir :ref:`_notification "
"<class_Object_private_method__notification>` yöntemi uyarlar. Bunun amacı, "
"Nesnenin kendisiyle ilgili olabilecek çeşitli motor düzeyindeki "
"geriçağrılara yanıt vermesini sağlamaktır. Örneğin, motor "
"bir :ref:`CanvasItem <class_CanvasItem>` ögesine \"çiz\" (draw) derse, "
"``_notification(NOTIFICATION_DRAW)`` ögesini çağıracaktır."

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"Bu bildirimlerden bazıları, örneğin draw gibi, betik içi üzerine yazmalar "
"için kullanışlıdır. Öyle ki Godot bunların birçoğunu buna adanmış "
"fonksiyonlarla sunar:"

msgid "``_ready()``: ``NOTIFICATION_READY``"
msgstr "``_ready()``: ``NOTIFICATION_READY``"

msgid "``_enter_tree()``: ``NOTIFICATION_ENTER_TREE``"
msgstr "``_enter_tree()``: ``NOTIFICATION_ENTER_TREE``"

msgid "``_exit_tree()``: ``NOTIFICATION_EXIT_TREE``"
msgstr "``_exit_tree()``: ``NOTIFICATION_EXIT_TREE``"

msgid "``_process(delta)``: ``NOTIFICATION_PROCESS``"
msgstr "``_process(delta)``: ``NOTIFICATION_PROCESS``"

msgid "``_physics_process(delta)``: ``NOTIFICATION_PHYSICS_PROCESS``"
msgstr "``_physics_process(delta)``: ``NOTIFICATION_PHYSICS_PROCESS``"

msgid "``_draw()``: ``NOTIFICATION_DRAW``"
msgstr "``_draw()``: ``NOTIFICATION_DRAW``"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone, for example:"
msgstr ""
"Kullanıcıların hemen *fark edemeyeceği* şey, Node dışındaki başka türler "
"için de bildirimlerin mevcut olduğudur, örneğin:"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: nesne ilk değerleme "
"sırasında tetiklenen bir geriçağırma. Betikler tarafından erişilemez."

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a \"destructor\"."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: motor bir Nesneyi silmeden "
"önce tetiklenen bir geriçağırma, yani bir \"yıkıcı\"."

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"Ve Düğümlerde *var olan* geriçağırmaların pek çoğunun özel bir yöntemi "
"yoktur, ancak yine de oldukça kullanışlıdır."

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: başka bir düğüme bir alt-düğüm "
"eklendiğinde tetiklenen bir geriçağırma."

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: başka bir düğümden bir alt-"
"düğüm kaldırıldığında tetiklenen bir geriçağırma."

msgid ""
"One can access all these custom notifications from the universal "
"``_notification()`` method."
msgstr ""
"Tüm bu özel bildirimlere evrensel ``_notification()`` yönteminden "
"erişilebilir."

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"Belgelerde \"sanal\" olarak etiketlenen yöntemlerin de betikler tarafından "
"üzerine yazılması amaçlanmıştır."

msgid ""
"A classic example is the :ref:`_init <class_Object_private_method__init>` "
"method in Object. While it has no ``NOTIFICATION_*`` equivalent, the engine "
"still calls the method. Most languages (except C#) rely on it as a "
"constructor."
msgstr ""
"Klasik bir örnek Object içindeki :ref:`_init "
"<class_Object_private_method__init>` yöntemidir. Her ne kadar "
"``NOTIFICATION_*`` eşdeğeri olmasa da, motor yine de bu yöntemi çağırır. "
"Çoğu dil (C# hariç) bunu bir kurucu olarak kullanır."

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"Peki, bu bildirimlerin veya sanal işlevlerin her biri hangi durumda "
"kullanılmalıdır?"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process ve _physics_process ve \\*_input karşılaştırması"

msgid ""
"Use ``_process()`` when one needs a framerate-dependent delta time between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-timeout loop is another option."
msgstr ""
"Kareler arasında kare-hızına-bağlı bir delta süresine ihtiyaç duyulduğunda "
"``_process()`` işlevini kullanın. Nesne verilerini güncelleyen kodun mümkün "
"olduğunca sık güncellenmesi gerekiyorsa, burası doğru yerdir. Yinelenen "
"mantık kontrolleri ve veri önbellekleme genellikle burada yürütülür, ancak "
"değerlendirmelerin hangi sıklıkta güncellenmesi gerektiğine bağlıdır. Her "
"karede çalıştırılmaları gerekmiyorsa, bir Timer-timeout (zaman aşımı) "
"döngüsü uygulamak başka bir seçenektir."

msgid ""
"Use ``_physics_process()`` when one needs a framerate-independent delta time "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"Kareler arasında kare-hızından-bağımsız bir delta süresine ihtiyaç "
"duyulduğunda ``_physics_process()`` işlevini kullanın. Eğer zamanın ne kadar "
"hızlı veya yavaş ilerlediğine bakılmaksızın kodun zaman içinde tutarlı "
"güncellemelere ihtiyacı varsa, burası doğru yerdir. Yinelenen kinematik ve "
"nesne dönüştürme işlemleri burada yürütülmelidir."

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process()`` and "
"``_physics_process()`` will trigger at every opportunity (they do not "
"\"rest\" by default). In contrast, ``*_input()`` callbacks will trigger only "
"on frames in which the engine has actually detected the input."
msgstr ""
"Mümkün olsa da, en iyi performansı elde etmek için, bu geriçağırmalar "
"sırasında girdi kontrolleri yapmaktan kaçınılmalıdır. ``_process()`` ve "
"``_physics_process()`` mümkün olan her fırsatta tetiklenecektir (varsayılan "
"olarak \"hiç dinlenmeden\"). Buna karşılık, ``*_input()`` geri çağrıları "
"yalnızca motorun girdiyi gerçekten algıladığı karelerde tetiklenecektir."

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related delta time "
"methods as needed."
msgstr ""
"Girdi geriçağrıları içindeki girdi eylemleri de aynı şekilde kontrol "
"edilebilir. Delta zamanı kullanılmak istenirse, gerektiğinde ilgili delta "
"zamanı yöntemlerinden alınabilir."

msgid "_init vs. initialization vs. export"
msgstr "_init ve initialization ve export karşılaştırması"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute in ``_init()``. Other property or SceneTree-independent "
"initializations should also run here."
msgstr ""
"Eğer betik, bir sahne olmadan kendi düğüm alt ağacını başlatıyorsa, bu kod "
"``_init()`` içinde yürütülmelidir. Diğer özellik veya sahne-ağacından-"
"bağımsız başlatmalar da burada çalıştırılmalıdır."

msgid "The C# equivalent to GDScript's ``_init()`` method is the constructor."
msgstr "GDScript'in ``_init()`` yönteminin C#'taki karşılığı yapıcı yöntemdir."

msgid ""
"``_init()`` triggers before ``_enter_tree()`` or ``_ready()``, but after a "
"script creates and initializes its properties. When instantiating a scene, "
"property values will set up according to the following sequence:"
msgstr ""
"``_init()`` işlevi ``_enter_tree()`` veya ``_ready()`` işlevlerinden önce, "
"ancak bir betikten özellikleri oluşturduktan ve başlattıktan sonra "
"tetiklenir. Bir sahne başlatılırken, özelliklerin değerleri aşağıdaki sıraya "
"göre ayarlanacaktır:"

msgid ""
"**Initial value assignment:** the property is assigned its initialization "
"value, or its default value if one is not specified. If a setter exists, it "
"is not used."
msgstr ""
"**İlk değer ataması:** özelliğe ilk değeri, veya belirtilmemişse varsayılan "
"değeri, atanır. Bu, bir ayarlayıcı yöntem varsa kullanılmaz."

msgid ""
"**Exported value assignment:** an exported property's value is again "
"replaced by any value set in the Inspector, triggering the setter."
msgstr ""
"**Dışa aktarılan değer ataması:** dışa aktarılan bir özelliğin değeri yine "
"Denetleyici'de ayarlanan herhangi bir değerle değiştirilir ve ayarlayıcı "
"yöntemler tetiklenir."

msgid ""
"As a result, instantiating a script versus a scene may affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"Sonuç olarak, bir betiğin örneklendirilmesine kıyasla bir sahnenin "
"örneklendirilmesi *hem* başlatmayı *hem de* motorun ayarlayıcı yöntemleri "
"çağırma sayısını etkileyebilir."

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready ve _enter_tree ve NOTIFICATION_PARENTED karşılaştırması"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init()`` calls) and build the "
"tree going downwards from the root. This causes ``_enter_tree()`` calls to "
"cascade down the tree. Once the tree is complete, leaf nodes call "
"``_ready``. A node will call this method once all child nodes have finished "
"calling theirs. This then causes a reverse cascade going up back to the "
"tree's root."
msgstr ""
"İlk çalıştırılan sahneye bağlı bir sahne oluşturulurken, Godot ağaçın "
"altındaki düğümleri oluşturacak (``_init()`` çağrıları yaparak) ve ağacı "
"kökten başlayıp aşağıya doğru yapılandıracaktır. Bu, ``_enter_tree()`` "
"çağrılarının ağaçta aşağı doğru şelale gibi akmasına neden olur. Ağaç "
"tamamlandığında, yaprak düğümler ``_ready`` yöntemini çağırır. Bir düğüm, "
"tüm alt-düğümleri onların kendi alt-düğümlerini çağırmayı bitirdiğinde bu "
"yöntemi çağıracaktır. Bu daha sonra yukarıda ağacın köküne kadar geri giden "
"bir ters şelaleye neden olur."

msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree()`` callbacks trigger. "
"Instead, only the ``_init()`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree()`` and ``_ready()`` calls occur."
msgstr ""
"Bir betik veya bağımsız bir sahne başlatılırken, düğümler oluşturulduktan "
"sonra sahne ağacına hemen eklenmez, bu nedenle ``_enter_tree()`` geri "
"çağrıları tetiklenmez. Bunun yerine, yalnızca ``_init()`` çağrısı "
"gerçekleşir. Sahne sahne ağacına eklendiğinde, ``_enter_tree()`` ve "
"``_ready()`` çağrıları gerçekleşir."

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"Ana/aktif sahnenin bir parçası olarak gerçekleşip gerçekleşmediğine "
"bakılmaksızın, bir düğümün başka bir düğümü üst öge olarak sahiplendiğinde "
"gerçekleşen bir davranışın tetiklenmesi gerekiyorsa, :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>` bildirimi kullanılabilir. "
"Örneğin, burada bir düğümün yöntemini üst öge düğümdeki özel bir sinyale "
"başarısız olmadan bağlayan bir kod parçacığı bulunmaktadır. Çalışma "
"zamanında oluşturulabilecek veri-merkezli düğümlerde kullanışlıdır."
