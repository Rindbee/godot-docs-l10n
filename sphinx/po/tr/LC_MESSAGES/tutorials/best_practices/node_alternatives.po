#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When and how to avoid using nodes for everything"
msgstr "Her şey için düğüm kullanmaktan ne zaman ve nasıl kaçınılmalıdır"

msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"Düğümleri üretmek ucuzdur, ancak onların bile sınırları vardır. Bir projede "
"her biri bir şeyler yapan on binlerce düğüm olabilir. Davranışları ne kadar "
"karmaşık olursa, her birinin projenin performansına eklediği yük de o kadar "
"büyük olur."

msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"Godot, düğümlerin kullandığı API'leri oluşturmak için daha hafif nesneler "
"sağlar. Projenizin özelliklerini nasıl oluşturmak istediğinizi tasarlarken "
"bunları seçenek olarak aklınızda bulundurduğunuzdan emin olun."

msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
":ref:`Object <class_Object>`: Nihai hafif nesne olan orijinal Object, elden "
"bellek yönetimi kullanmalıdır. Bununla birlikte, :ref:`Node <class_Node>` "
"sınıfından daha hafif olan kendi özel veri yapılarını, hatta düğüm "
"yapılarını, oluşturmak çok zor değildir."

msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"**Örnek:** :ref:`Tree <class_Tree>` düğümüne bakın. İsteğe bağlı sayıda "
"satır ve sütuna sahip bir içerik tablosu için yüksek düzeyde özelleştirmeyi "
"destekler. Görselleştirmesini oluşturmak için kullandığı veriler aslında :"
"ref:`TreeItem <class_TreeItem>` Nesnelerinden oluşan bir ağaçtır."

msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"**Avantajları:** Bir API'nin daha küçük kapsamlı nesnelere "
"basitleştirilmesi, erişilebilirliğini artırmaya ve yineleme süresini "
"iyileştirmeye yardımcı olur. Node kütüphanesinin tümü ile çalışmak yerine, "
"bir düğümün uygun alt-düğümleri oluşturabileceği ve yönetebileceği "
"kısaltılmış bir Object'ler kümesi oluşturulur."

msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"Bunları kullanırken dikkatli olunmalıdır. Bir Object bir değişkende "
"saklanabilir, ancak bu başvurular hiçbir uyarı olmadan geçersiz hale "
"gelebilir. Örneğin, nesnenin yaratıcısı onu durup dururken silmeye karar "
"verirse, bu bir sonraki erişimde bir hata durumunu tetikleyecektir."

msgid ""
":ref:`RefCounted <class_RefCounted>`: Only a little more complex than "
"Object. They track references to themselves, only deleting loaded memory "
"when no further references to themselves exist. These are useful in the "
"majority of cases where one needs data in a custom class."
msgstr ""
":ref:`RefCounted <class_RefCounted>`: Object'ten biraz daha karmaşıktır. "
"Kendilerine yapılan başvuruları takip ederler, sadece kendilerine başka "
"başvuru kalmadığında yüklü belleği silerler. Bunlar, özel bir sınıfta veriye "
"ihtiyaç duyulan çoğu durumda kullanışlıdır."

msgid ""
"**Example:** See the :ref:`FileAccess <class_FileAccess>` object. It "
"functions just like a regular Object except that one need not delete it "
"themselves."
msgstr ""
"**Örnek:** :ref:`FileAccess <class_FileAccess>` nesnesine bakın. Birinin "
"bunu kendisinin silmesine gerek olmaması dışında normal bir Object gibi "
"çalışır."

msgid "**Advantages:** same as the Object."
msgstr "**Avantajlar:** Object ile aynı."

msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than "
"RefCounted. They have the innate ability to serialize/deserialize (i.e. save "
"and load) their object properties to/from Godot resource files."
msgstr ""
":ref:`Resource <class_Resource>`: RefCounted'dan sadece biraz daha "
"karmaşıktır. Nesne özelliklerini Godot kaynak dosyalarına serileştirme/ters-"
"serileştirme (yani kaydetme ve yükleme) yeteneğine doğuştan sahiptirler."

msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be saved and loaded, therefore they extend from Resource."
msgstr ""
"**Örnek:** Betikler, PackedScene (sahne dosyaları için) ve :ref:`AudioEffect "
"<class_AudioEffect>` sınıflarının her biri gibi diğer türler. Bunların her "
"biri kaydedilebilir ve yüklenebilir, bu nedenle Resource'tan genişletilirler."

msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/RefCounted, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
"**Avantajları:** :ref:`Resource <class_Resource>`un geleneksel veri depolama "
"yöntemlerine göre avantajları hakkında :ref:`zaten çok şey söylendi "
"<doc_resources>`. Ancak Node'lar yerine Resource'ların kullanılması "
"bağlamında, ana avantajları Denetleyici-uyumluluğudur. Neredeyse Object/"
"RefCounted kadar hafif olmalarına rağmen, Denetleyici'de özellikleri "
"görüntüleyebilir ve dışa aktarabilirler. Bu, kullanılabilirlik cephesinde "
"alt-Düğümler gibi bir amacı yerine getirmelerini sağlar, ancak aynı zamanda "
"sahnelerde çok sayıda Kaynak/Düğüm olması planlanıyorsa performansı da "
"artırır."
