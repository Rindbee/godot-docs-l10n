#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Canvas layers"
msgstr "Kanvas katmanları"

msgid "Viewport and Canvas items"
msgstr "Çerçeve ve Kanvas ögeleri"

msgid ""
":ref:`CanvasItem <class_CanvasItem>` is the base for all 2D nodes, be it "
"regular 2D nodes, such as :ref:`Node2D <class_Node2D>`, or :ref:`Control "
"<class_Control>`. Both inherit from :ref:`CanvasItem <class_CanvasItem>`. "
"You can arrange canvas items in trees. Each item will inherit its parent's "
"transform: when the parent moves, its children move too."
msgstr ""
":ref:`CanvasItem <class_CanvasItem>`, :ref:`Node2D <class_Node2D>` gibi "
"normal 2B düğümler veya :ref:`Control <class_Control>` gibi diğer düğümler "
"olsun, tüm 2B düğümlerin temelidir. Bunların her ikisi de :ref:`CanvasItem "
"<class_CanvasItem>` ögesinden miras alır. Kanvas ögelerini ağaçlar halinde "
"düzenleyebilirsiniz. Her öge üst ögesinin dönüşümünü devralacaktır: üst öge "
"hareket ettiğinde, alt ögeleri de hareket eder."

msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, that displays them."
msgstr ""
"\"CanvasItem\" düğümleri ve bunlardan miras alan düğümler, bunları "
"görüntüleyen bir :ref:`Viewport <class_Viewport>` (çerçeve, görüntü alanı) "
"ögesinin doğrudan veya dolaylı alt ögeleridir."

msgid ""
"The Viewport's property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, allows to apply a "
"custom :ref:`Transform2D <class_Transform2D>` transform to the CanvasItem "
"hierarchy it contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work "
"by changing that transform."
msgstr ""
"\"Viewport\"un :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>` özelliği, içerdiği CanvasItem "
"sıradüzenine özel bir :ref:`Transform2D <class_Transform2D>` dönüşümü "
"uygulanmayı sağlar. :ref:`Camera2D <class_Camera2D>` gibi düğümler bu "
"dönüşümü değiştirerek çalışır."

msgid ""
"To achieve effects like scrolling, manipulating the canvas transform "
"property is more efficient than moving the root canvas item and the entire "
"scene with it."
msgstr ""
"Kaydırma gibi efektler elde etmek için kanvasın dönüştürme özelliğini "
"değiştirmek, kök kanvas ögesini ve onunla birlikte tüm sahneyi taşımaktan "
"daha etkilidir."

msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. For example:"
msgstr ""
"Ancak genellikle oyundaki ya da uygulamadaki *her şeyin* kanvas dönüşümüne "
"tabi olmasını istemeyiz. Örneğin:"

msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr ""
"**Iraklık açısı (paralaks) Arka Planları**: Sahnenin geri kalanından daha "
"yavaş hareket eden arka planlar."

msgid ""
"**UI**: Think of a user interface (UI) or head-up display (HUD) superimposed "
"on our view of the game world. We want a life counter, score display and "
"other elements to retain their screen positions even when our view of the "
"game world changes."
msgstr ""
"**Arayüz (UI)**: Oyun dünyası görüşümüzün üzerine yerleştirilmiş bir "
"kullanıcı arayüzü (UI) veya baş üstü ekranı (HUD) düşünün. Can sayacının, "
"puan göstergesinin ve diğer ögelerin oyun dünyasına bakışımız değişse bile "
"ekrandaki konumlarını korumalarını isteriz."

msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""
"**Geçişler**: Geçişler için kullanılan görsel etkilerin (solmalar, "
"karışmalar) sabit bir ekran konumunda kalmasını isteyebiliriz."

msgid "How to solve these problems in a single scene tree?"
msgstr "Tüm bu sorunlar tek bir sahne ağacında nasıl çözülür?"

msgid "CanvasLayers"
msgstr "Kanvas Katmanları - CanvasLayer'lar"

msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""
"Cevap Kanvas Katmanı, :ref:`CanvasLayer <class_CanvasLayer>`, yani tüm alt "
"ögeleri ve onların da alt ögeleri için ayrı bir 2B işleme katmanı ekleyen "
"bir düğümdür. \"Viewport\" alt ögeleri varsayılan olarak \"0\" katmanında "
"çizilirken, bir \"CanvasLayer\" herhangi bir sayısal katmanda çizilir. Büyük "
"bir sayıya sahip katmanlar daha küçük bir sayıya sahip olanların üzerinde "
"çizilecektir. Kanvas katmanları ayrıca kendi dönüşümlerine sahiptir ve diğer "
"katmanların dönüşümüne bağlı değildir. Bu, oyun dünyasındaki görüşümüz "
"değişirken kullanıcı arayüzünün ekran alanında sabit kalmasını sağlar."

msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""
"Bunun bir örneği ırak açılı arka plan oluşturmaktır. Bu, \"-1\" katmanında "
"bir CanvasLayer ile yapılabilir. Puanların, yaşam sayacının ve duraklatma "
"düğmesinin bulunduğu ekran da \"1\" katmanında oluşturulabilir."

msgid "Here's a diagram of how it looks:"
msgstr "İşte nasıl göründüğüne dair bir şema:"

msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"CanvasLayer'lar ağaç sırasından bağımsız ve yalnızca katman numaralarına "
"bağlıdır, bu nedenle gerektiğinde örneklenebilirler."

msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2D nodes also have "
"the :ref:`CanvasItem.z_index <class_CanvasItem_property_z_index>` property "
"for controlling their drawing order."
msgstr ""
"Düğümlerin çizim sırasını kontrol etmek için CanvasLayer'lar gerekli "
"değildir. Bir düğümün diğerlerinin 'önünde' veya 'arkasında' doğru şekilde "
"çizilmesini sağlamanın standart yolu, düğümlerin sahne panelindeki sırasını "
"değiştirmektir. Belki de sezgilerinize ters olarak, sahne panelinde en üstte "
"yer alan düğümler çerçevede daha alttakilerin *arkasına* çizilir. 2B "
"düğümler ayrıca çizim sıralarını kontrol etmek için :ref:`CanvasItem.z_index "
"<class_CanvasItem_property_z_index>` özelliğine sahiptir."
