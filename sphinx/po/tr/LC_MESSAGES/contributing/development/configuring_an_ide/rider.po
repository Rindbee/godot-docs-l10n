#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "JetBrains Rider"
msgstr "JetBrains Rider"

msgid "Importing the project"
msgstr "Projenin içe aktarılması"

msgid ""
"If you already use Visual Studio as your main IDE, you can use the same "
"solution file in Rider. Rider and Visual Studio use the same solution "
"format, so you can switch between the two IDEs without rebuilding the "
"solution file. Debug configurations need to be changed when going from one "
"IDE to another."
msgstr ""
"Ana IDE'niz olarak zaten Visual Studio kullanıyorsanız, aynı çözüm dosyasını "
"Rider'da kullanabilirsiniz. Rider ve Visual Studio aynı çözüm biçimini "
"kullanır, böylece çözüm dosyasını yeniden oluşturmadan iki IDE arasında "
"geçiş yapabilirsiniz. Ancak bir IDE'den diğerine geçerken hata ayıklama "
"yapılandırmalarının değiştirilmesi gerekir."

msgid ""
"Navigate to the Godot root folder and open a Command Prompt or PowerShell "
"window."
msgstr ""
"Godot kök klasörüne gidin ve bir Komut İstemi veya PowerShell penceresi açın."

msgid "Copy, paste and run the next command to generate the solution."
msgstr ""
"Çözümü oluşturmak için aşağıdaki komutu kopyalayın, yapıştırın ve çalıştırın."

msgid ""
"The ``vsproj`` parameter signals that you want Visual Studio solution "
"generated. The ``dev_build`` parameter makes sure the debug symbols are "
"included, allowing to e.g. step through code using breakpoints."
msgstr ""
"``vsproj`` parametresi Visual Studio çözümünün oluşturulmasını istediğinizi "
"belirtir. ``dev_build`` parametresi, hata ayıklama sembollerinin dahil "
"edildiğinden emin olur ve örneğin kesme noktaları kullanarak kodda adım "
"atarak ilerlemeye izin verir."

msgid ""
"If you have Rider setup as your main IDE for .sln, you can now open the "
"project by double-clicking on the ``godot.sln`` in the project root or by "
"using the **Open** option inside of Rider."
msgstr ""
"Rider'ı \".sln\" uzantısı için ana IDE'niz olarak ayarladıysanız, artık "
"proje kökündeki ``godot.sln`` dosyasına çift tıklayarak veya Rider'ın "
"içindeki **Open** seçeneğini kullanarak projeyi açabilirsiniz."

msgid "Compiling and debugging the project"
msgstr "Projenin derlenmesi ve hata ayıklanması"

msgid ""
"Rider comes with a built-in debugger that can be used to debug the Godot "
"project. You can launch the debugger by pressing the **Debug** icon at the "
"top of the screen, this only works for the Project manager, if you want to "
"debug the editor, you need to configure the debugger first."
msgstr ""
"Rider, Godot projesinde hata ayıklamak için kullanılabilecek yerleşik bir "
"hata ayıklayıcı ile birlikte gelir. Hata ayıklayıcıyı ekranın üst kısmındaki "
"**Debug** simgesine basarak başlatabilirsiniz, ama bu yalnızca Proje "
"yöneticisi için çalışır, düzenleyici için hata ayıklamak istiyorsanız önce "
"hata ayıklayıcıyı yapılandırmanız gerekir."

msgid ""
"Click on the **Godot > Edit Configurations** option at the top of the screen."
msgstr ""
"Ekranın üst kısmındaki **Godot > Edit Configurations** seçeneğine tıklayın."

msgid ""
"This will tell the executable to debug the specified project without using "
"the project manager. Use the root path to the project folder, not ``project."
"godot`` file path."
msgstr ""
"Bu, yürütülebilir dosyaya proje yöneticisini kullanmadan belirtilen projede "
"hata ayıklama yapmasını söyleyecektir. ``project.godot`` dosya yolunu değil, "
"proje klasörünün kök yolunu kullanın."

msgid ""
"Alternatively you can use **Run > Attach to Process** to attach the debugger "
"to a running Godot instance."
msgstr ""
"Alternatif olarak, hata ayıklayıcıyı çalışan bir Godot örneğine iliştirmek "
"için **Run > Attach to Process** seçeneğini kullanabilirsiniz."
