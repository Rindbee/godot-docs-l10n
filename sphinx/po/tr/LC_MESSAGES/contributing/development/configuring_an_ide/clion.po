#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "CLion"
msgstr "CLion"

msgid ""
"`CLion <https://www.jetbrains.com/clion/>`_ is a commercial `JetBrains "
"<https://www.jetbrains.com/>`_ IDE for C++."
msgstr ""
"`CLion <https://www.jetbrains.com/clion/>`_, `JetBrains <https://"
"www.jetbrains.com/>`_ tarafından yapılan C++ için ticari bir IDE`dir."

msgid "Importing the project"
msgstr "Projenin içe aktarılması"

msgid ""
"CLion can import a project's `compilation database file <https://"
"clang.llvm.org/docs/JSONCompilationDatabase.html>`_, commonly named "
"``compile_commands.json``. To generate the compilation database file, open "
"the terminal, change to the Godot root directory, and run:"
msgstr ""
"CLion bir projenin ``compile_commands.json`` olarak adlandırılan `derleme "
"veritabanı dosyasını <https://clang.llvm.org/docs/"
"JSONCompilationDatabase.html`_ içe aktarabilir. Derleme veritabanı dosyasını "
"oluşturmak için terminali açın, Godot kök dizinine geçin ve şu komutu "
"çalıştırın:"

msgid ""
"Then, open the Godot root directory with CLion. CLion will import the "
"compilation database, index the codebase, and provide autocompletion and "
"other advanced code navigation and refactoring functionality."
msgstr ""
"Ardından, Godot kök dizinini CLion ile açın. CLion derleme veritabanını içe "
"aktaracak, kod tabanını dizinleyecek ve otomatik tamamlama ve diğer gelişmiş "
"kod gezinme ve yeniden şekillendirme işlevlerini sağlayacaktır."

msgid "Compiling and debugging the project"
msgstr "Projenin derlenmesi ve hata ayıklanması"

msgid ""
"CLion does not support compiling and debugging Godot via SCons out of the "
"box. This can be achieved by creating a custom build target and run "
"configuration in CLion. Before creating a custom build target, you "
"must :ref:`compile Godot <toc-devel-compiling>` once on the command line, to "
"generate the Godot executable. Open the terminal, change into the Godot root "
"directory, and execute:"
msgstr ""
"CLion, Godot'un SCons aracılığıyla derlenmesini ve hata ayıklanmasını kendi "
"başına desteklemez. Bu, CLion'da özel bir derleme hedefi oluşturarak ve "
"yapılandırmayı çalıştırarak elde edilebilir. Özel bir derleme hedefi "
"oluşturmadan önce, Godot çalıştırılabilir dosyasını oluşturmak için komut "
"satırından bir kez :ref:`Godot'yu derlemek <toc-devel-compiling>` "
"gereklidir. Terminali açın, Godot kök dizinine geçin ve şunu çalıştırın:"

msgid "To add a custom build target that invokes SCons for compilation:"
msgstr "Derleme için SCons'u çağıran özel bir derleme hedefi eklemek için:"

msgid ""
"Open CLion and navigate to **Preferences > Build, Execution, Deployment > "
"Custom Build Targets**"
msgstr ""
"CLion'u açın ve **Preferences > Build, Execution, Deployment > Custom Build "
"Targets** bölümüne gidin"

msgid "Click **Add target** and give the target a name, e.g. ``Godot debug``."
msgstr ""
"**Add target** ögesine tıklayın ve hedefe bir isim verin, örneğin ``Godot "
"debug``."

msgid ""
"Click **...** next to the **Build:** selectbox, then click the **+** button "
"in the **External Tools** dialog to add a new external tool."
msgstr ""
"Yeni bir harici araç eklemek için **Build:** seçim kutusunun yanındaki "
"**...** ögesine tıklayın, ardından **External Tools** iletişim kutusundaki "
"**+** düğmesine tıklayın."

msgid ""
"Give the tool a name, e.g. ``Build Godot debug``, set **Program** to "
"``scons``, set **Arguments** to the compilation settings you want "
"(see :ref:`compiling Godot <toc-devel-compiling>`), and set the **Working "
"directory** to ``$ProjectFileDir$``, which equals the Godot root directory. "
"Click **OK** to create the tool."
msgstr ""
"Araca bir ad verin, örneğin ``Build Godot debug``, **Program** ögesini "
"``scons`` olarak ayarlayın, **Arguments** ögesini istediğiniz derleme "
"ayarlarına ayarlayın (bkz. :ref:`Godot'yu derlemek <toc-devel-compiling>`) "
"ve **Working directory** ögesini Godot kök dizinine eşit olan "
"``$ProjectFileDir$`` olarak ayarlayın. Aracı oluşturmak için **Tamam** "
"düğmesine tıklayın."

msgid ""
"CLion does not expand shell commands like ``scons -j$(nproc)``. Use concrete "
"values instead, e.g. ``scons -j8``."
msgstr ""
"CLion ``scons -j$(nproc)`` gibi kabuk komutlarını genişletmez. Bunun yerine "
"somut değerler kullanın, örneğin ``scons -j8``."

msgid ""
"Back in the **External Tools** dialog, click the **+** again to add a second "
"external tool for cleaning the Godot build via SCons. Give the tool a name, "
"e.g. ``Clean Godot debug``, set **Program** to ``scons``, set **Arguments** "
"to ``-c`` (which will clean the build), and set the **Working directory** to "
"``$ProjectFileDir$``. Click **OK** to create the tool."
msgstr ""
"**External Tools** iletişim kutusuna geri dönün, Godot derlemesini SCons "
"aracılığıyla temizlemek için ikinci bir harici araç eklemek üzere **+** "
"işaretine tekrar tıklayın. Araca bir ad verin, örneğin ``Clean Godot "
"debug``, **Program** ögesini ``scons`` olarak ayarlayın, **Arguments** "
"ögesini ``-c`` olarak ayarlayın (derlemeyi temizleyecektir, clean) ve "
"**Working directory** ögesini ``$ProjectFileDir$`` olarak ayarlayın. Aracı "
"oluşturmak için **Tamam** düğmesine tıklayın."

msgid ""
"Close the **External Tools** dialog. In the **Custom Build Target** dialog "
"for the custom ``Godot debug`` build target, select the **Build Godot "
"debug** tool from the **Build** select box, and select the **Clean Godot "
"debug** tool from the **Clean** select box. Click **OK** to create the "
"custom build target."
msgstr ""
"**External Tools** iletişim kutusunu kapatın. Özel ``Godot debug`` derleme "
"hedefi için **Custom Build Target** iletişim kutusunda, **Build** seçim "
"kutusundan **Build Godot debug** aracını seçin ve **Clean** seçim kutusundan "
"**Clean Godot debug** aracını seçin. Özel derleme hedefini oluşturmak için "
"**Tamam** ögesine tıklayın."

msgid "In the main IDE window, click **Add Configuration**."
msgstr "Ana IDE penceresinde **Add Configuration** ögesine tıklayın."

msgid ""
"In the **Run/Debug Configuration** dialog, click **Add new...**, then select "
"**Custom Build Application** to create a new custom run/debug configuration."
msgstr ""
"Yeni bir özel çalıştırma/hata ayıklama yapılandırması oluşturmak için **Run/"
"Debug Configuration** iletişim kutusunda **Add new...** ögesine tıklayın ve "
"ardından **Custom Build Application** ögesini seçin."

msgid ""
"Give the run/debug configuration a name, e.g. ``Godot debug``, select the "
"``Godot debug`` custom build target as the **Target**. Select the Godot "
"executable in the ``bin/`` folder as the **Executable**, and set the "
"**Program arguments** to ``--editor --path path-to-your-project/``, where "
"``path-to-your-project/`` should be a path pointing to an existing Godot "
"project. If you omit the ``--path`` argument, you will only be able to debug "
"the Godot Project Manager window. Click **OK** to create the run/debug "
"configuration."
msgstr ""
"Çalıştırma/hata ayıklama yapılandırmasına bir isim verin, örneğin ``Godot "
"debug``, ``Godot debug`` özel derleme hedefini **Target** olarak seçin. "
"**Executable** olarak ``bin/`` klasöründeki Godot çalıştırılabilir dosyasını "
"seçin ve **Program arguments** değerini ``--editor --path path-to-your-"
"project/`` olarak ayarlayın; burada ``path-to-your-project/`` mevcut bir "
"Godot projesine işaret eden bir yol olmalıdır. Eğer ``--path`` argümanını "
"atlarsanız, sadece Godot Proje Yöneticisi penceresinin hata ayıklamasını "
"yapabilirsiniz. Çalıştırma/hata ayıklama yapılandırmasını oluşturmak için "
"**OK** seçeneğine tıklayın."

msgid ""
"You can now build, run, debug, profile, and Valgrind check the Godot editor "
"via the run configuration."
msgstr ""
"Artık çalıştırma yapılandırması aracılığıyla Godot düzenleyicisini "
"derleyebilir, çalıştırabilir, hata ayıklayabilir, profil oluşturabilir ve "
"Valgrind denetimi yapabilirsiniz."

msgid ""
"When playing a scene, the Godot editor will spawn a separate process. You "
"can debug this process in CLion by going to **Run > Attach to process...**, "
"typing ``godot``, and selecting the Godot process with the highest **pid** "
"(process ID), which will usually be the running project."
msgstr ""
"Bir sahne oynatılırken, Godot düzenleyici bunu ayrı bir işlemde "
"oluşturacaktır. CLion'da **Run > Attach to process...** seçeneğine gidip "
"``godot`` yazarak ve en yüksek **pid** (işlem kimliği) olan Godot işlemini "
"seçerek bu işlemde hata ayıklayabilirsiniz, bu genellikle çalışan proje "
"olacaktır."
