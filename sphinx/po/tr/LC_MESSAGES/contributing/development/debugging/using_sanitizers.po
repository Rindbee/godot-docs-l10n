#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using sanitizers"
msgstr "Temizleyicilerin kullanımı"

msgid "What are sanitizers?"
msgstr "Temizleyiciler (sanitizer) nedir?"

msgid ""
"Sanitizers are static instrumentation tools that help find bugs that "
"traditional debuggers usually cannot catch. This is particularly useful when "
"combined with :ref:`doc_unit_testing` in continuous integration."
msgstr ""
"Temizleyiciler, geleneksel hata ayıklayıcıların genellikle yakalayamadığı "
"hataları bulmaya yardımcı olan statik enstrümantasyon araçlarıdır. Bu "
"özellikle sürekli entegrasyonda :ref:`doc_unit_testing` ile "
"birleştirildiğinde kullanışlıdır."

msgid ""
"Sanitizers can be used on Windows, macOS and Linux by using the Clang "
"(LLVM), GCC or Visual Studio compilers. :ref:`Certain platforms "
"<doc_using_sanitizers_platform_specific_sanitizers>` may also have their own "
"sanitizers available. In situations where a single sanitizer is provided by "
"several different compilers, remember that their output and behavior will "
"differ slightly."
msgstr ""
"Temizleyiciler Windows, macOS ve Linux'ta Clang (LLVM), GCC veya Visual "
"Studio derleyicileri kullanılarak kullanılabilir. :ref:`Belirli "
"platformların <doc_using_sanitizers_platform_specific_sanitizers>` kendi "
"temizleyicileri de mevcut olabilir. Tek bir temizleyicinin birkaç farklı "
"derleyici tarafından sağlandığı durumlarda, çıktılarının ve davranışlarının "
"biraz farklı olacağını unutmayın."

msgid "Using sanitizers on Godot"
msgstr "Godot üzerinde temizleyici kullanımı"

msgid ""
"Sanitizers **require** recompiling the binary. This means you cannot use "
"official Godot binaries to run sanitizers."
msgstr ""
"Temizleyiciler ikili dosyanın yeniden derlenmesini **gerektirir**. Bu, "
"temizleyicileri çalıştırmak için resmi Godot ikililerini kullanamayacağınız "
"anlamına gelir."

msgid ""
"When :ref:`compiling <toc-devel-compiling>` with any of the sanitizers "
"enabled, the resulting binary will have the ``.san`` suffix added to its "
"name to distinguish it from a binary without sanitizers."
msgstr ""
"Herhangi bir temizleyici etkinleştirildiğinde :ref:`derleme <toc-devel-"
"compiling>` yapılırken, ortaya çıkan ikili dosyanın adına, temizleyici "
"içermeyen bir ikili dosyadan ayırt etmek için ``.san`` soneki eklenecektir."

msgid ""
"There is a performance impact as many additional runtime checks need to be "
"performed. Memory utilization will also increase. It is possible to enable "
"certain combinations of multiple sanitizers in a single build. Beware of the "
"performance impact when using multiple sanitizers at once though, as the "
"resulting binary may be excessively slow."
msgstr ""
"Birçok ek çalışma zamanı kontrolünün gerçekleştirilmesi gerektiğinden "
"performansa etkisi vardır. Bellek kullanımı da artacaktır. Tek bir derlemede "
"birden fazla temizleyicinin belirli kombinasyonlarını etkinleştirmek "
"mümkündür. Ancak aynı anda birden fazla temizleyici kullanırken performans "
"etkisine dikkat edin, çünkü ortaya çıkan ikili sürüm aşırı yavaş olabilir."

msgid ""
"Certain options can be passed to sanitizers without having to recompile the "
"binary using environment variables."
msgstr ""
"Belirli seçenekler, temizleyicilere ortam değişkenleri kullanılarak ikili "
"dosyayı yeniden derlemek zorunda kalmadan aktarılabilir."

msgid "Address sanitizer (ASAN)"
msgstr "Adres temizleyici (ASAN)"

msgid "Available in Clang and GCC."
msgstr "Clang ve GCC'de mevcuttur."

msgid "**Supported platforms:** Linux, macOS, Windows (Visual Studio), Web"
msgstr ""
"**Desteklenen platformlar:** Linux, macOS, Windows (Visual Studio), Web"

msgid ""
"`Clang ASAN documentation <https://clang.llvm.org/docs/AddressSanitizer."
"html>`__"
msgstr ""
"`Clang ASAN belgeleri <https://clang.llvm.org/docs/AddressSanitizer.html>`__"

msgid ""
"The address sanitizer is generally the most frequently used sanitizer. It "
"can diagnose issues such as buffer overruns and out-of-bounds access. If the "
"engine crashes with a message such as ``free(): invalid pointer``, this is "
"typically the result of a buffer overrun. (This message is printed by the C "
"runtime, not Godot.)"
msgstr ""
"Adres temizleyici genellikle en sık kullanılan temizleyicidir. Arabellek "
"taşmaları ve sınır-dışı erişim gibi sorunları teşhis edebilir. Eğer motor "
"``free(): invalid pointer`` gibi bir mesajla çökerse, bu tipik olarak bir "
"arabellek aşımının sonucudur. (Bu mesaj Godot tarafından değil, C çalışma "
"zamanı tarafından yazdırılır.)"

msgid ""
"In certain situations (such as detecting uninitialized memory reads), the "
"address sanitizer doesn't suffice. The :ref:"
"`doc_using_sanitizers_memory_sanitizer` should be used instead."
msgstr ""
"Bazı durumlarda (ilk-değerlenmemiş bellek okumalarını tespit etmek gibi), "
"adres temizleyici yeterli değildir. Bunun yerine :ref:"
"`doc_using_sanitizers_memory_sanitizer` kullanılmalıdır."

msgid ""
"It is also possible to detect use-after-return situations by specifying the "
"``ASAN_OPTIONS=detect_stack_use_after_return=1`` environment variable before "
"*running* Godot (not when compiling it). This increases the address "
"sanitizer's runtime overhead, so only enable this feature when you actually "
"need it."
msgstr ""
"Godot'u *çalıştırmadan* önce (derlerken değil) "
"``ASAN_OPTIONS=detect_stack_use_after_return=1`` ortam değişkenini "
"belirterek use-after-return durumlarını tespit etmek de mümkündür. Bu, adres "
"temizleyicinin çalışma zamanı ek yükünü artırır, bu nedenle bu özelliği "
"yalnızca gerçekten ihtiyacınız olduğunda etkinleştirin."

msgid ""
"To enable the address sanitizer in a Godot build, pass the ``use_asan=yes`` "
"SCons option when compiling. Enabling ASAN generally makes the resulting "
"binary about 2× slower."
msgstr ""
"Bir Godot derlemesinde adres temizleyiciyi etkinleştirmek için, derleme "
"sırasında ``use_asan=yes`` SCons seçeneğini geçirin. ASAN'ı etkinleştirmek "
"genellikle elde edilen ikiliyi yaklaşık 2 kat daha yavaş hale getirir."

msgid ""
"Due to a `design decision <https://stackoverflow.com/questions/36971902/why-"
"cant-clang-enable-all-sanitizers/>`__, the address, memory and thread "
"sanitizers are mutually exclusive. This means you can only use one of those "
"sanitizers in a given binary."
msgstr ""
"Bir `tasarım kararı <https://stackoverflow.com/questions/36971902/why-cant-"
"clang-enable-all-sanitizers/>`__ nedeniyle, adres, bellek ve iş parçacığı "
"temizleyicileri karşılıklı birbirlerini dışlayandır. Bu, belirli bir ikili "
"dosyada bu temizleyicilerden yalnızca birini kullanabileceğiniz anlamına "
"gelir."

msgid "Leak sanitizer (LSAN)"
msgstr "Sızıntı temizleyici (LSAN)"

msgid "**Supported platforms:** Linux, Web"
msgstr "**Desteklenen platformlar:** Linux, Web"

msgid ""
"`Clang LSAN documentation <https://clang.llvm.org/docs/LeakSanitizer.html>`__"
msgstr ""
"`Clang LSAN belgeleri <https://clang.llvm.org/docs/LeakSanitizer.html>`__"

msgid ""
"The leak sanitizer can detect memory leaks, which are situations where "
"memory that is no longer in use is never freed by the running program. This "
"can potentially lead to out-of-memory situations if the program runs for "
"long enough. Since Godot may run on :ref:`dedicated servers "
"<doc_exporting_for_dedicated_servers>` for months or even years without a "
"restart, it's important to fix memory leaks when they occur."
msgstr ""
"Sızıntı temizleyici, artık kullanılmayan belleğin çalışan program tarafından "
"asla serbest bırakılmadığı durumlar olan bellek sızıntılarını tespit "
"edebilir. Bu durum, programın yeterince uzun süre çalışması halinde "
"potansiyel olarak yetersiz-bellek durumlarına yol açabilir. Godot, :ref:"
"`adanmış sunucular <doc_exporting_for_dedicated_servers>` üzerinde yeniden "
"başlatılmadan aylarca hatta yıllarca çalışabileceğinden, bellek sızıntıları "
"oluştuğunda bunları düzeltmek önemlidir."

msgid ""
"To enable the leak sanitizer in a Godot build, pass the ``use_lsan=yes`` "
"SCons option when compiling. Enabling LSAN only has a small performance "
"overhead, but the program will be much slower to exit as leak detection "
"occurs when the program exits."
msgstr ""
"Bir Godot derlemesinde sızıntı temizleyiciyi etkinleştirmek için derleme "
"sırasında ``use_lsan=yes`` SCons seçeneğini geçirin. LSAN'ı etkinleştirmenin "
"yalnızca küçük bir performans ek yükü vardır, ancak sızıntı tespiti "
"programdan çıkarken gerçekleştiğinden programdan çıkış çok daha yavaş "
"olacaktır."

msgid "Memory sanitizer (MSAN)"
msgstr "Bellek temizleyici (MSAN)"

msgid "Available in Clang only, not GCC."
msgstr "Yalnızca Clang'da kullanılabilir, GCC'de yoktur."

msgid "**Supported platforms:** Linux"
msgstr "**Desteklenen platformlar:** Linux"

msgid ""
"`Clang MSAN documentation <https://clang.llvm.org/docs/MemorySanitizer."
"html>`__"
msgstr ""
"`Clang MSAN belgeleri <https://clang.llvm.org/docs/MemorySanitizer.html>`__"

msgid ""
"The memory sanitizer complements the :ref:"
"`doc_using_sanitizers_address_sanitizer`. Unlike the address sanitizer, the "
"memory sanitizer can detect uninitialized memory reads."
msgstr ""
"Bellek temizleyici :ref:`doc_using_sanitizers_address_sanitizer`ı tamamlar. "
"Adres temizleyicinin aksine, bellek temizleyici ilk-değerlenmemiş bellek "
"okumalarını tespit edebilir."

msgid ""
"To enable the memory sanitizer in a Godot build, pass the ``use_msan=yes`` "
"SCons option when compiling. Enabling MSAN generally makes the resulting "
"binary about 3× slower."
msgstr ""
"Godot derlemesinde bellek temizleyiciyi etkinleştirmek için, derleme "
"sırasında ``use_msan=yes`` SCons seçeneğini geçirin. MSAN'ı etkinleştirmek "
"genellikle elde edilen ikiliyi yaklaşık 3 kat daha yavaş hale getirir."

msgid "Thread sanitizer (TSAN)"
msgstr "İş parçacıkları temizleyici (TSAN)"

msgid "**Supported platforms:** Linux, macOS"
msgstr "**Desteklenen platformlar:** Linux, macOS"

msgid ""
"`Clang TSAN documentation <https://clang.llvm.org/docs/ThreadSanitizer."
"html>`__"
msgstr ""
"`Clang TSAN belgeleri <https://clang.llvm.org/docs/ThreadSanitizer.html>`__"

msgid ""
"The thread sanitizer is used to track down race conditions related to "
"multithreading. A race condition is when multiple threads try to modify the "
"same data at the same time. Since thread scheduling can be ordered in any "
"fashion by the operating system, this leads to incorrect behavior that only "
"occurs occasionally (and can be difficult to track as a result). To prevent "
"a race condition, you need to add a lock to ensure only one thread can "
"access the shared data at a given time."
msgstr ""
"İş parçacığı temizleyici, çoklu iş parçacığı ile ilgili yarış koşullarını "
"izlemek için kullanılır. Bir yarış koşulu, birden fazla iş parçacığının aynı "
"anda aynı verileri değiştirmeye çalışmasıdır. İş parçacığı zamanlaması "
"işletim sistemi tarafından herhangi bir şekilde sıralanabildiğinden, bu "
"sadece ara sıra meydana gelen (ve sonuç olarak izlenmesi zor olabilen) "
"hatalı davranışlara yol açar. Bir yarış koşulunu önlemek için, belirli bir "
"zamanda yalnızca bir iş parçacığının paylaşılan verilere erişebilmesini "
"sağlamak üzere bir kilit eklemeniz gerekir."

msgid ""
"To enable the thread sanitizer in a Godot build, pass the ``use_tsan=yes`` "
"SCons option when compiling. Enabling TSAN generally makes the resulting "
"binary 10× slower, while also multiplying memory usage by an approximately "
"8× factor."
msgstr ""
"Godot derlemesinde iş parçacığı temizleyiciyi etkinleştirmek için, derleme "
"sırasında ``use_tsan=yes`` SCons seçeneğini geçirin. TSAN'ı etkinleştirmek "
"genellikle elde edilen ikiliyi 10 kat daha yavaş hale getirirken, bellek "
"kullanımını da yaklaşık 8 kat artırır."

msgid "Undefined behavior sanitizer (UBSAN)"
msgstr "Tanımlanmamış davranış temizleyici (UBSAN)"

msgid "**Supported platforms:** Linux, macOS, Web"
msgstr "**Desteklenen platformlar:** Linux, macOS, Web"

msgid ""
"`Clang UBSAN documentation <https://clang.llvm.org/docs/"
"UndefinedBehaviorSanitizer.html>`__"
msgstr ""
"`Clang UBSAN belgeleri <https://clang.llvm.org/docs/"
"UndefinedBehaviorSanitizer.html>`__"

msgid ""
"The undefined behavior sanitizer is used to track down situations where the "
"program exhibits random and unpredictable behavior. This is due to C/C++ "
"code that is accepted by the compiler, but is not *correct*. Compiling with "
"a different set of optimizations can also change the observed results of "
"undefined behavior."
msgstr ""
"Tanımlanmamış davranış temizleyici, programın rastgele ve öngörülemeyen "
"davranış sergilediği durumları izlemek için kullanılır. Bunun nedeni, "
"derleyici tarafından kabul edilen ancak *doğru* olmayan C/C++ kodudur. "
"Farklı bir optimizasyon seti ile derlemek de tanımlanmamış davranışın "
"gözlemlenen sonuçlarını değiştirebilir."

msgid ""
"To enable the undefined behavior sanitizer in a Godot build, pass the "
"``use_ubsan=yes`` SCons option when compiling. Enabling UBSAN only has a "
"small performance overhead."
msgstr ""
"Godot derlemesinde tanımlanmamış davranış temizleyicisini etkinleştirmek "
"için, derleme sırasında ``use_ubsan=yes`` SCons seçeneğini geçirin. UBSAN'ı "
"etkinleştirmenin yalnızca küçük bir performans ek yükü vardır."

msgid "Platform-specific sanitizers"
msgstr "Platforma özel temizleyiciler"

msgid "Web"
msgstr "Web"

msgid ""
"When :ref:`compiling for the Web <doc_compiling_for_web>`, there are 2 "
"additional sanitizer SCons options available:"
msgstr ""
":ref:`Web için derleme <doc_compiling_for_web>` yaparken, 2 ek temizleyici "
"SCons seçeneği mevcuttur:"

msgid ""
"``use_assertions=yes`` enables runtime Emscripten assertions, which can "
"catch various issues."
msgstr ""
"``use_assertions=yes``, çeşitli sorunları yakalayabilen çalışma zamanı "
"Emscripten onaylamalarını etkinleştirir."

msgid ""
"``use_safe_heap=yes`` enables `Emscripten's SAFE_HEAP sanitizer <https://"
"emscripten.org/docs/debugging/Sanitizers.html>`__. It provides similar "
"functionality to ASAN, but it focuses on issues that are specific to "
"WebAssembly. ``SAFE_HEAP`` is not guaranteed to be compatible with ASAN and "
"UBSAN in the same binary, so you may have to build it separately."
msgstr ""
"``use_safe_heap=yes``, `Emscripten'ın SAFE_HEAP temizleyicisi <https://"
"emscripten.org/docs/debugging/Sanitizers.html>`__ özelliğini etkinleştirir. "
"ASAN'a benzer işlevsellik sağlar, ancak WebAssembly'ye özgü sorunlara "
"odaklanır. ''SAFE_HEAP''in aynı ikili dosyada ASAN ve UBSAN ile uyumlu "
"olması garanti edilmez, bu nedenle ayrı olarak oluşturmanız gerekebilir."
