#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Bisecting regressions"
msgstr "Gerilemeleri bölerek ayıklamak"

msgid ""
"Bisecting is a way to find regressions in software. After reporting a bug on "
"the `Godot repository on GitHub <https://github.com/godotengine/godot>`__, "
"you may be asked by a contributor to *bisect* the issue. Bisecting makes it "
"possible for contributors to fix bugs faster, as they can know in advance "
"which commit caused the regression. Your effort will be widely appreciated :)"
msgstr ""
"İkiye bölme (bisect), yazılımdaki gerilemeleri bulmanın bir yoludur. "
"GitHub`daki `Godot deposunda <https://github.com/godotengine/godot>`__ bir "
"hata bildirdikten sonra, bir katılımcı tarafından sorunu *bisect* etmeniz "
"istenebilir. İkiye bölmek, hangi işlemenin gerilemeye neden olduğunu "
"bilmelerine yardım ettiği için katkıda bulunanların hataları daha hızlı "
"düzeltmesini mümkün kılar. Çabanız büyük takdir görecektir :)"

msgid "The guide below explains how to find a regression by bisecting."
msgstr ""
"Aşağıdaki kılavuz, ikiye bölerek bir gerilemenin nasıl bulunacağını "
"açıklamaktadır."

msgid "What is bisecting?"
msgstr "İkiye ayırma nedir?"

msgid ""
"Godot developers use the `Git <https://git-scm.com/>`__ version control "
"system. In the context of Git, bisecting is the process of performing a "
"manual `binary search <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__ to determine when a regression appeared. While "
"it's typically used for bugs, it can also be used to find other kinds of "
"unexpected changes such as performance regressions."
msgstr ""
"Godot geliştiricileri `Git <https://git-scm.com/>`__ sürüm kontrol sistemini "
"kullanmaktadır. Git bağlamında ikiye bölme, bir gerilemenin ne zaman ortaya "
"çıktığını belirlemek için elden yapılan bir `ikili arama <https://en."
"wikipedia.org/wiki/Binary_search_algorithm>`__ gerçekleştirme işlemidir. "
"Genellikle hatalar için kullanılsa da, performans gerilemeleri gibi diğer "
"beklenmedik değişiklik türlerini bulmak için de kullanılabilir."

msgid "Using official builds to speed up bisecting"
msgstr "İkiye bölmeyi hızlandırmak için resmi yapıları kullanma"

msgid ""
"Before using Git's ``bisect`` command, we strongly recommend trying to "
"reproduce the bug with an older (or newer) official release. This greatly "
"reduces the range of commits that potentially need to be built from source "
"and tested. You can find binaries of official releases, as well as alphas, "
"betas, and release candidates `here <https://downloads.tuxfamily.org/"
"godotengine/>`__."
msgstr ""
"Git'in ``bisect`` komutunu kullanmadan önce, hatayı daha eski (veya daha "
"yeni) bir resmi sürümle yeniden üretmeyi denemenizi şiddetle tavsiye ederiz. "
"Bu, potansiyel olarak kaynaktan derlenmesi ve test edilmesi gereken işleme "
"aralığını büyük ölçüde azaltır. Resmi sürümlerin yanı sıra alfalar, betalar "
"ve sürüm adaylarının ikili dosyalarını `burada <https://downloads.tuxfamily."
"org/godotengine/>`__ bulabilirsiniz."

msgid ""
"If you have experience with Godot 3.x and can reproduce an issue with Godot "
"4.0, we recommend trying to reproduce the issue in the latest Godot 3.x "
"version (if the feature exhibiting the bug is present in 3.x). This can be "
"used to check whether the issue is a regression in 4.0 or not."
msgstr ""
"Godot 3.x ile deneyiminiz varsa ve Godot 4.0 ile bir sorunu yeniden "
"üretebiliyorsanız, sorunu en son Godot 3.x sürümünde yeniden üretmeyi "
"denemenizi öneririz (hatayı sergileyen özellik 3.x'te mevcutsa). Bu, sorunun "
"4.0'da bir gerileme olup olmadığını kontrol etmek için kullanılabilir."

msgid ""
"If the issue **is present** in 3.x, then you'll need to check whether the "
"issue occurs in older 3.x versions as well."
msgstr ""
"Sorun 3.x'te **mevcutsa**, sorunun daha eski 3.x sürümlerinde de olup "
"olmadığını kontrol etmeniz gerekir."

msgid ""
"If the issue is **not present** in 3.x, then you can try older 4.0 alphas "
"and betas to determine when the regression started."
msgstr ""
"Sorun 3.x'te **mevcut değilse**, gerilemenin ne zaman başladığını belirlemek "
"için daha eski 4.0 alfa ve betalarını deneyebilirsiniz."

msgid ""
"Project files may be incompatible between Godot versions. **Make a backup of "
"your project** before starting the bisection process."
msgstr ""
"Proje dosyaları Godot sürümleri arasında uyumsuz olabilir. İkiye bölme "
"işlemine başlamadan önce **projenizin bir yedeğini alın**."

msgid ""
"Going from the oldest to the newest build generally reduces the risk of the "
"project not being able to successfully open in the editor, thanks to "
"backwards compatibility. Try to reduce your project to the smallest "
"repeatable example too. The more minimal the project is, the more likely "
"you'll be able to open it without compatibility issues in newer engine "
"versions."
msgstr ""
"En eski yapıdan en yeni yapıya geçmek, geriye dönük uyumluluk sayesinde "
"projenin düzenleyicide başarılı bir şekilde açılamaması riskini genellikle "
"azaltır. Projenizi tekrarlanabilir en küçük örneğe indirgemeye çalışın. "
"Proje ne kadar küçük olursa, daha yeni motor sürümlerinde uyumluluk "
"sorunları olmadan açma olasılığınız o kadar artar."

msgid "The Git bisect command"
msgstr "Git bisect komutu"

msgid ""
"If you've found a build that didn't exhibit the bug in the above testing "
"process, you can now start bisecting the regression. The Git version control "
"system offers a built-in command for this: ``git bisect``. This makes the "
"process semi-automated as you only have to build the engine, run it and try "
"to reproduce the bug."
msgstr ""
"Yukarıdaki test sürecinde hatanın görünmediği bir derleme bulduysanız, artık "
"gerilemeyi ikiye bölmeye başlayabilirsiniz. Git sürüm kontrol sistemi bunun "
"için yerleşik bir komut sunar: ``git bisect``. Bu süreci yarı otomatik hale "
"getirir, çünkü geriye yalnızca motoru oluşturmanız, çalıştırmanız ve hatayı "
"yeniden üretmeye çalışmanız kalır."

msgid ""
"Before bisecting a regression, you need to set up a build environment to "
"compile Godot from source. To do so, read the :ref:`Compiling <toc-devel-"
"compiling>` page for your target platform. (Compiling Godot from source "
"doesn't require C++ programming knowledge.)"
msgstr ""
"Bir gerilemeyi ikiye bölmeden önce, Godot'yu kaynaktan derlemek için bir "
"derleme ortamı kurmanız gerekir. Bunu yapmak için, hedef platformunuz için :"
"ref:`Derleme <toc-devel-compiling>` sayfasını okuyun. (Godot'yu kaynaktan "
"derlemek C++ programlama bilgisi gerektirmez.)"

msgid ""
"Note that compiling Godot can take a while on slow hardware (up an hour for "
"each full rebuild on a slow dual-core CPU). This means the full process can "
"take up to several hours. If your hardware is too slow, you may want to stop "
"there and report the results of your \"pre-bisecting\" on the GitHub issue "
"so another contributor can continue bisecting from there."
msgstr ""
"Godot'yu derlemenin yavaş donanımlarda biraz zaman alabileceğini unutmayın "
"(yavaş bir çift çekirdekli CPU'da her tam yeniden oluşturma için bir saate "
"kadar). Bu, tüm sürecin birkaç saate kadar sürebileceği anlamına gelir. "
"Donanımınız çok yavaşsa, burada durmak ve \"ön ikiye bölme\" sonuçlarınızı "
"GitHub sorununda bildirmek isteyebilirsiniz, böylece başka bir katılımcı "
"oradan ikiye bölmeye devam edebilir."

msgid "Determine the commit hashes"
msgstr "İşleme sağlamalarını belirleme"

msgid ""
"To start bisecting, you must first determine the commit hashes (identifiers) "
"of the \"bad\" and \"good\" build. \"bad\" refers to the build that exhibits "
"the bug, whereas \"good\" refers to the version that doesn't exhibit the "
"bug. If you're using a pre-release build as the \"good\" or \"bad\" build, "
"browse the `download mirror <https://downloads.tuxfamily.org/godotengine/"
">`__, go to the folder that contains the pre-release you downloaded and look "
"for the ``README.txt`` file. The commit hash is written inside that file."
msgstr ""
"İkiye ayırmaya başlamak için öncelikle \"kötü\" ve \"iyi\" derlemenin işleme "
"sağlamalarını (commit hash, tanımlayıcıları) belirlemeniz gerekir. \"Kötü\", "
"hatayı gösteren yapıyı ifade ederken \"iyi\", hatayı göstermeyen sürümü "
"ifade eder. \"İyi\" veya \"kötü\" sürüm olarak bir ön sürüm kullanıyorsanız, "
"`yükleme ayna sitesi <https://downloads.tuxfamily.org/godotengine/>`__'ne "
"göz atın, indirdiğiniz ön sürümü içeren klasöre gidin ve ``README.txt`` "
"dosyasını arayın. İşleme sağlaması bu dosyanın içinde yazılıdır."

msgid ""
"If you're using a stable release as the \"good\" or \"bad\" build, use one "
"of the following commit hashes depending on the version:"
msgstr ""
"\"İyi\" veya \"kötü\" derleme olarak kararlı bir sürüm kullanıyorsanız, "
"sürüme bağlı olarak aşağıdaki işleme sağlamalarından birini kullanın:"

msgid ""
"You can also use this Bash function to retrieve the Git commit hash of a pre-"
"release build (add it to your ``$HOME/.bashrc`` or similar):"
msgstr ""
"Ayrıca, yayın öncesi bir derlemenin Git işleme sağlamasını almak için bu "
"Bash işlevini de kullanabilirsiniz (``$HOME/.bashrc`` veya benzer bir yere "
"ekleyin):"

msgid "Example usage:"
msgstr "Örnek kullanım:"

msgid ""
"To refer to the latest state of the master branch, you can use ``master`` "
"instead of a commit hash. Note that unlike tagged releases or snapshot "
"commit hashes, ``master`` is a perpetually moving target."
msgstr ""
"Ana dalın (master) en son durumuna bakmak için, bir işleme sağlaması yerine "
"``master`` kullanabilirsiniz. Etiketli sürümlerin veya anlık görüntü işleme "
"sağlamalarının aksine, ``master``ın sürekli hareket eden bir hedef olduğunu "
"unutmayın."

msgid "Build the engine"
msgstr "Motoru inşa edin"

msgid ""
":ref:`Get Godot's source code using Git <doc_getting_source>`. Once this is "
"done, in the terminal window, use ``cd`` to reach the Godot repository "
"folder and enter the following command:"
msgstr ""
":ref:`Git kullanarak Godot'nun kaynak kodunu edinin <doc_getting_source>`. "
"Bu yapıldıktan sonra, terminal penceresinde Godot depo klasörüne ulaşmak "
"için ``cd`` kullanın ve aşağıdaki komutu girin:"

msgid "Compile Godot. This assumes you've set up a build environment:"
msgstr "Godot'u derleyin. Bu, bir derleme ortamı kurduğunuzu varsayar:"

msgid "Run the engine"
msgstr "Motoru çalıştırın"

msgid ""
"Run the binary located in the ``bin/`` folder and try to reproduce the bug."
msgstr ""
"``bin/`` klasöründe bulunan ikili dosyayı çalıştırın ve hatayı yeniden "
"oluşturmayı deneyin."

msgid ""
":ref:`Double-check the output file name "
"<doc_introduction_to_the_buildsystem_resulting_binary>` in ``bin/`` to make "
"sure you're actually running the binary you've just compiled. Different "
"Godot versions will output binaries with different names."
msgstr ""
"Gerçekten de az önce derlediğiniz çalıştırma dosyasını çalıştırdığınızdan "
"emin olmak için ``bin/`` klasöründeki :ref:`çıktı dosyası adını iki kez "
"kontrol edin <doc_introduction_to_the_buildsystem_resulting_binary>`. Farklı "
"Godot sürümleri farklı isimlere sahip ikili çalıştırma dosyaları üretecektir."

msgid "If the build **still** exhibits the bug, run the following command:"
msgstr "Derleme **hala** hatayı gösteriyorsa, aşağıdaki komutu çalıştırın:"

msgid "If the build **does not** exhibit the bug, run the following command:"
msgstr "Derleme **hatayı göstermezse**, aşağıdaki komutu çalıştırın:"

msgid ""
"After entering one of the commands above, Git will switch to a different "
"commit. You should now build Godot again, try to reproduce the bug, then "
"enter ``git bisect good`` or ``git bisect bad`` depending on the result. "
"You'll have to repeat this several times. The longer the commit range, the "
"more steps will be required. 5 to 10 steps are usually sufficient to find "
"most regressions; Git will remind you of the number of steps remaining (in "
"the worst case scenario)."
msgstr ""
"Yukarıdaki komutlardan birini girdikten sonra Git farklı bir işlemeye "
"geçecektir. Şimdi Godot'yu tekrar derlemeli, hatayı yeniden oluşturmaya "
"çalışmalı ve sonuca bağlı olarak ``git bisect good`` veya ``git bisect bad`` "
"komutlarını girmelisiniz. Bunu birçok kez tekrarlamanız gerekecektir. İşleme "
"aralığı ne kadar büyük olursa, o kadar fazla adım gerekecektir. Çoğu "
"gerilemeyi bulmak için genellikle 5 ila 10 adım yeterlidir; Git size kalan "
"adım sayısını hatırlatacaktır (en kötü durum senaryosunda)."

msgid ""
"Once you've completed enough steps, Git will display the commit hash where "
"the regression appeared. Write this commit hash as a comment to the GitHub "
"issue you've bisected. This will help in solving the issue. Thanks again for "
"contributing to Godot :)"
msgstr ""
"Yeterli sayıda adımı tamamladığınızda Git, gerilemenin ortaya çıktığı işleme "
"sağlamasını görüntüleyecektir. İkiye ayırma ile bulduğunuz bu işleme "
"sağlamasını bir GitHub sorununa yorum olarak yazın. Bu, sorunun çözülmesine "
"yardımcı olacaktır. Godot'ya katkıda bulunduğunuz için tekrar teşekkürler :)"

msgid ""
"You can read the full documentation on ``git bisect`` `here <https://git-scm."
"com/docs/git-bisect>`__."
msgstr ""
"``git bisect`` ile ilgili tüm belgeleri `buradan <https://git-scm.com/docs/"
"git-bisect>`__ okuyabilirsiniz."
