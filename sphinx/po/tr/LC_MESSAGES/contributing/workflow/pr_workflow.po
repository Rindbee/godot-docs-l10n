#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Pull request workflow"
msgstr "Çekme isteği iş akışı"

msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""
"Godot tarafından kullanılan bilinen adıyla \"PR iş akışı\" Git kullanan "
"birçok projede yaygındır ve deneyimli özgür yazılım katılımcılarına tanıdık "
"gelmelidir. Buradaki fikir, yalnızca küçük bir kesimin (eğer varsa) doğrudan "
"*master* dalına işlemede bulunmasıdır. Bunun yerine, katkıda bulunanlar "
"projeyi *çatal*'lar (yani istedikleri gibi değiştirebilecekleri bir "
"kopyasını oluştururlar) ve daha sonra çatallarının dallarından birinden "
"GitHub arayüzünü kullanarak orijinal deponun (genellikle *upstream* olarak "
"adlandırılır) bir dalına *çekme* talebinde bulunurlar."

msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""
"Ortaya çıkan *çekme isteği* (pull request - PR) daha sonra, bunları "
"onaylayabilen, reddedebilen veya çoğunlukla değişikliklerin yapılmasını "
"talep edebilen diğer katkıda bulunanlar tarafından incelenebilir. PR "
"onaylandıktan sonra çekirdek geliştiricilerden biri tarafından "
"birleştirilebilir ve işleme(ler) hedef dalın (genellikle *master* dalı) bir "
"parçası haline gelir."

msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organization of Godot's Git repository."
msgstr ""
"Tipik iş akışını ve ilgili Git komutlarını göstermek için bir örnek "
"üzerinden birlikte gideceğiz. Ama önce, Godot'nun Git deposunun yapısına "
"hızlıca bir göz atalım."

msgid "Git source repository"
msgstr "Git kaynak deposu"

msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""
"`GitHub'daki depo <https://github.com/godotengine/godot>`_, gömülü bir sorun "
"izleyici ve PR sistemi bulunan bir `Git <https://git-scm.com>`_ kod "
"deposudur."

msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"Belgelere katkıda bulunuyorsanız, deposuna `buradan <https://github.com/"
"godotengine/godot-docs>`_ erişilebilir."

msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""
"Git sürüm kontrol sistemi, kaynak kodda yapılan ardışık düzenlemeleri takip "
"etmek için kullanılan bir araçtır - Godot'a verimli bir şekilde katkıda "
"bulunmak için Git komut satırının temellerini öğrenmek *şiddetle* tavsiye "
"edilir. Git için bazı görsel arayüzler mevcuttur, ancak bunlar genellikle "
"kullanıcıları Git ve PR iş akışı ile ilgili kötü alışkanlıklar edinmeye "
"teşvik eder ve bu nedenle bunları kullanmamanızı öneririz. Özellikle, "
"GitHub'ın çevrimiçi düzenleyicisini kod katkıları için kullanmamanızı "
"tavsiye ederiz (küçük düzeltmeler veya begelerdeki değişiklikler için tolere "
"edilse de), çünkü dosya başına ve her değişiklik için bir işleme yapılmasını "
"zorunlu kılar ve bu da, hızlı bir şekilde, okunması güçleşen Git geçmişine "
"sahip PR'lara yol açar (özellikle gözetmen incelemesinden sonra)."

msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website. You can also try out `GitHub's interactive guide <https://"
"try.github.io/>`__."
msgstr ""
"Git'in \"Kitabı\"nın ilk bölümleri, aracın felsefesine ve günlük iş "
"akışınızda ustalaşmanız gereken çeşitli komutlara iyi bir giriş "
"niteliğindedir. Bunları `Git SCM <https://git-scm.com/book/en/v2>`_ web "
"sitesinde çevrimiçi olarak okuyabilirsiniz. Ayrıca `GitHub'ın interaktif "
"kılavuzu <https://try.github.io/>`__ 'nu da deneyebilirsiniz."

msgid "The branches on the Git repository are organized as follows:"
msgstr "Git deposundaki dallar aşağıdaki gibi yapılandırılmıştır:"

msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""
"Ana dal olan ``master``, bir sonraki büyük sürümün geliştirilmesinin "
"gerçekleştiği yerdir. Bir geliştirme dalı olarak, kararsız olabilir ve "
"üretimde kullanılmak üzere tasarlanmamıştır. PR'lerin öncelikli olarak "
"yapılması gereken yer burasıdır."

msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next minor "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, please "
"check first if your changes are also relevant for the ``master`` branch, and "
"if so make the PR for the ``master`` branch in priority. Release managers "
"can then cherry-pick the fix to a stable branch if relevant."
msgstr ""
"Kararlı dallar sürümlerine göre adlandırılır, örneğin ``3.1`` ve ``2.1``. "
"Bunlar, ``master`` dalındaki hata düzeltmelerini ve geliştirmeleri şu anda "
"sürdürülen kararlı sürüme (örneğin 3.1.2 veya 2.1.6) geri aktarmak için "
"kullanılır. Genel bir kural olarak, son kararlı dal bir sonraki küçük sürüme "
"kadar korunur (örneğin ``3.0`` dalı Godot 3.1 sürümüne kadar korunmuştur). "
"Korunan bir kararlı dal için PR yapmak istiyorsanız, lütfen önce "
"değişikliklerin ``master`` dalı için de geçerli olup olmadığını kontrol edin "
"ve eğer öyleyse öncelikli olarak ``master`` dalı için PR yapın. Yayın "
"yöneticileri uygunsa düzeltmeyi daha sonra kararlı bir dal için özel olarak "
"seçebilir."

msgid ""
"There might occasionally be feature branches, usually meant to be merged "
"into the ``master`` branch at some time."
msgstr ""
"Zaman zaman, genellikle bir süre sonra ``master`` dalıyla birleştirilmesi "
"amaçlanan, özellik dalları bulunabilir."

msgid "Forking and cloning"
msgstr "Çatallama ve klonlama"

msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""
"İlk adım GitHub üzerindeki `godotengine/godot <https://github.com/"
"godotengine/godot>`_ deposundan *çatal/fork* oluşturmaktır. Bunu yapmak için "
"bir GitHub hesabınızın olması ve oturum açmış olmanız gerekir (ücretsiz "
"hesap oluşturulabilir). Deponun GitHub sayfasının sağ üst köşesinde, aşağıda "
"gösterildiği gibi \"Fork\" düğmesini görmelisiniz:"

msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""
"Tıklayın ve bir süre sonra Godot deposunun isim alanı olarak sizin GitHub "
"kullanıcı adınızı kullanan kendi çatal deponuza yönlendirilmeniz gerekir:"

msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""
"Daha sonra çatalınızı *klon*'layabilirsiniz, yani bu çevrimiçi deponun "
"bilgisayarınızda yerel bir kopyasını oluşturabilirsiniz (Git dilinde *origin "
"remote*). Henüz yapmadıysanız, Windows veya macOS kullanıyorsanız Git'i "
"kendi `web sitesinden <https://git-scm.com>`_ indirip kurun veya Linux "
"kullanıyorsanız paket yöneticiniz aracılığıyla yükleyin."

msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""
"Windows kullanıyorsanız, komutları yazmak için 'Git Bash'i açın. macOS ve "
"Linux kullanıcıları kendi terminal programlarını kullanabilirler."

msgid "To clone your fork from GitHub, use the following command:"
msgstr "Çatalınızı GitHub'dan klonlamak için aşağıdaki komutu kullanın:"

msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""
"Kısa bir süre sonra, mevcut çalışma dizininizde yeni bir ``godot`` dizini "
"olmalıdır. Bu dizine ``cd`` komutunu kullanarak geçin:"

msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr "Çatalladığımız orijinal depoya bir başvuru oluşturarak başlayacağız:"

msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"``godotengine/godot`` repository. This will be useful when you want to pull "
"new commits from its ``master`` branch to update your fork. You have another "
"remote reference named ``origin``, which points to your fork (``USERNAME/"
"godot``)."
msgstr ""
"Bu, orijinal ``godotengine/godot`` deposuna işaret eden ``upstream`` adlı "
"bir başvuru oluşturacaktır. Bu, kendi çatalınızı güncellemek için ``master`` "
"dalından yeni işlemeler çekmek istediğinizde yararlı olacaktır. Ayrıca "
"çatalınıza (``USERNAME/godot``) işaret eden ``origin`` adlı başka bir uzak "
"başvurunuz daha var."

msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""
"Bu yerel ``godot`` klasörünü sakladığınız sürece yukarıdaki adımları "
"yalnızca bir kez yapmanız gerekir (isterseniz başka yere taşıyabilirsiniz, "
"ilgili üst veriler içinde gizli olan ``.git`` alt klasöründe tutulur)."

msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr ""
"*Dallandır, çek, kodla, sahnele, işle, yolla, temellendir... teknoloji.*"

msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""
"Daft Punk'ın *Technologic* şarkısının bu kötü yorumu, Git'e yeni "
"başlayanların iş akışıyla ilgili genel anlayışını göstermektedir: beklendiği "
"gibi çalışacağını umarak, kopyala ve yapıştır yoluyla öğrenilecek çok sayıda "
"garip komut. Meraklı olduğunuz ve kaybolduğunuzda arama motorunuzu "
"sorgulamaktan çekinmediğiniz sürece, bu aslında öğrenmek için kötü bir yol "
"değildir, bu yüzden size Git ile çalışırken bilmeniz gereken temel komutları "
"vereceğiz."

msgid ""
"In the following, we will assume as an example that you want to implement a "
"feature in Godot's Project Manager, which is coded in the ``editor/"
"project_manager.cpp`` file."
msgstr ""
"Aşağıda, örnek olarak ``editor/project_manager.cpp`` dosyasında kodlanan "
"Godot'un Proje Yöneticisi için bir özellik uyarlamayı istediğinizi "
"varsayacağız."

msgid "Branching"
msgstr "Dallanma"

msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""
"Varsayılan olarak, ``git clone`` sizi kendi çatalınızın (``origin``) "
"``master`` dalına yerleştirmiş olmalıdır. Kendi özellik geliştirmenize "
"başlamak için, bir özellik dalı oluşturacağız:"

msgid "This command is equivalent:"
msgstr "Bu komut şuna eşdeğerdir:"

msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr "Eğer ``master`` dalına geri dönmek istiyorsanız, şunu kullanırsınız:"

msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr ""
"Şu anda hangi dalda olduğunuzu ``git branch`` komutu ile görebilirsiniz:"

msgid ""
"Be sure to always go back to the ``master`` branch before creating a new "
"branch, as your current branch will be used as the base for the new one. "
"Alternatively, you can specify a custom base branch after the new branch's "
"name:"
msgstr ""
"Yeni bir dal oluşturmadan önce her zaman ``master`` dalına geri "
"döndüğünüzden emin olun, çünkü yenisi için temel olarak şu an bulunduğunuz "
"dal kullanılacaktır. Alternatif olarak, yeni dalın isminden sonra özel bir "
"temel dal belirtebilirsiniz:"

msgid "Updating your branch"
msgstr "Dalınızı güncelleme"

msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""
"Bu ilk seferde gerekli olmayacaktır (yukarı akış deposunu çatalladıktan "
"hemen sonra). Ancak, bir dahaki sefere bir şey üzerinde çalışmak "
"istediğinizde, çatalınızın ``master`` dalının yukarı akış ``master`` "
"dalından birkaç işleme geride olduğunu fark edeceksiniz: bu sırada diğer "
"katkıda bulunanların çekme istekleri birleştirilmiş olacaktır."

msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""
"Geliştirdiğiniz özellik ile mevcut yukarı akış ``master`` dalı arasında "
"çakışma olmayacağından emin olmak için, yukarı akış dalını *çekerek* "
"dalınızı güncellemeniz gerekecektir."

msgid ""
"The ``--rebase`` argument will ensure that any local changes that you "
"committed will be re-applied *on top* of the pulled branch, which is usually "
"what we want in our PR workflow. This way, when you open a pull request, "
"your own commits will be the only difference with the upstream ``master`` "
"branch."
msgstr ""
"``--rebase`` argümanı, işlediğiniz tüm yerel değişikliklerin çekilen dalın "
"*üstüne* yeniden uygulanmasını sağlayacaktır, ki bu genellikle PR iş "
"akışımızda istediğimiz şeydir. Bu şekilde, bir çekme isteği açtığınızda, "
"yukarı akış ``master`` dalı ile tek fark kendi işlemeleriniz olacaktır."

msgid ""
"While rebasing, conflicts may arise if your commits modified code that has "
"been changed in the upstream branch in the meantime. If that happens, Git "
"will stop at the conflicting commit and will ask you to resolve the "
"conflicts. You can do so with any text editor, then stage the changes (more "
"on that later), and proceed with ``git rebase --continue``. Repeat the "
"operation if later commits have conflicts too, until the rebase operation "
"completes."
msgstr ""
"Yeniden temellendirme sırasında, işlemeleriniz bu sürede yukarı akış dalında "
"değiştirilmiş olan kodu değiştiriyorsa çakışmalar ortaya çıkabilir. Böyle "
"bir durumda Git, çakışan işlemede duracak ve sizden çakışmaları çözmenizi "
"isteyecektir. Bunu herhangi bir metin düzenleyici ile yapabilir, ardından "
"değişiklikleri sahneleyebilir (buna daha sonra bakacağız) ve ``git rebase --"
"continue`` ile devam edebilirsiniz. Daha sonra yapılan işlemelerde de "
"çakışma olursa, yeniden temellendirme işlemi tamamlanıncaya kadar bu işlemi "
"tekrarlayın."

msgid ""
"If you're unsure about what is going on during a rebase and you panic (no "
"worry, we all do the first few times), you can abort the rebase with ``git "
"rebase --abort``. You will then be back to the original state of your branch "
"before calling ``git pull --rebase``."
msgstr ""
"Yeniden temellendirme sırasında neler olup bittiğinden emin değilseniz ve "
"paniğe kapılırsanız (endişelenmeyin, ilk birkaç seferde hepimize olur), "
"``git rebase --abort`` ile rebase işlemini iptal edebilirsiniz. Böylece "
"dalınızın ``git pull --rebase`` komutunu çağırmadan önceki orijinal durumuna "
"geri dönmüş olursunuz."

msgid ""
"If you omit the ``--rebase`` argument, you will instead create a merge "
"commit which tells Git what to make of the two distinct branches. If any "
"conflicts arise, they would be resolved all at once via this merge commit."
msgstr ""
"Eğer ``--rebase`` argümanını atlarsanız, bunun yerine Git'e iki farklı dalı "
"ne yapacağını söyleyen bir birleştirme işlemesi (merge commit) "
"oluşturursunuz. Herhangi bir çakışma ortaya çıkarsa, bu birleştirme işleme "
"aracılığıyla hepsi bir kerede çözülecektir."

msgid ""
"While this is a valid workflow and the default behavior of ``git pull``, "
"merge commits within PRs are frowned upon in our PR workflow. We only use "
"them when merging PRs into the upstream branch."
msgstr ""
"Ancak bu geçerli bir iş akışı ve ``git pull`` un varsayılan davranışı olsa "
"da, PR iş akışımızda PR'lerdeki birleştirme işlemeleri hoş karşılanmaz. "
"Bunları yalnızca PR'leri yukarı akış dalıyla birleştirirken kullanırız."

msgid ""
"The philosophy is that a PR should represent the final stage of the changes "
"made to the codebase, and we are not interested in mistakes and fixes that "
"would have been done in intermediate stages before merging. Git gives us "
"great tools to \"rewrite the history\" and make it as if we got things right "
"the first time, and we're happy to use it to ensure that changes are easy to "
"review and understand long after they have been merged."
msgstr ""
"Felsefemiz, bir PR'nin kod tabanında yapılan değişikliklerin son aşamasını "
"temsil etmesi gerektiğidir ve birleştirme öncesinde ara aşamalarda yapılmış "
"olabilecek hatalar ve düzeltmelerle ilgilenmiyoruz. Git bize \"geçmişi "
"yeniden yazmak\" ve işleri ilk seferinde doğru yapmışız gibi göstermek için "
"harika araçlar sunuyor ve değişikliklerin birleştirildikten çok uzun süre "
"sonra bile gözden geçirilmesinin ve anlaşılmasının kolay olmasını sağlamak "
"için bunu kullanmaktan mutluluk duyuyoruz."

msgid ""
"If you have already created a merge commit without using ``rebase``, or have "
"made any other changes that have resulted in undesired history, the best "
"option is to use an *interactive rebase* on the upstream branch. See "
"the :ref:`dedicated section <doc_pr_workflow_rebase>` for instructions."
msgstr ""
"Eğer ``rebase`` kullanmadan bir merge commit oluşturduysanız veya istenmeyen "
"bir geçmişe neden olan başka değişiklikler yaptıysanız, en iyi seçenek "
"yukarı akış dalı üzerinde *etkileşimli yeniden temellendirme* kullanmaktır. "
"Talimatlar için :ref:`buna adanmış <doc_pr_workflow_rebase>` bölümüne bakın."

msgid ""
"If at any time you want to *reset* a local branch to a given commit or "
"branch, you can do so with ``git reset --hard <commit ID>`` or ``git reset --"
"hard <remote>/<branch>`` (e.g. ``git reset --hard upstream/master``)."
msgstr ""
"Herhangi bir zamanda yerel bir dalı belirli bir işleme veya dala "
"*sıfırlamak* isterseniz, bunu ``git reset --hard <işleme kimliği>`` veya "
"``git reset --hard <uzak>/<dal>`` ile yapabilirsiniz (örneğin ``git reset --"
"hard upstream/master``)."

msgid ""
"Be warned that this will remove any changes that you might have committed in "
"this branch. If you ever lose commits by mistake, use the ``git reflog`` "
"command to find the commit ID of the previous state that you would like to "
"restore, and use it as argument of ``git reset --hard`` to go back to that "
"state."
msgstr ""
"Bu işlemin bu dalda yapmış olabileceğiniz tüm değişiklikleri kaldıracağı "
"konusunda uyaralım. Eğer yanlışlıkla işlemeleri kaybederseniz, geri yüklemek "
"istediğiniz önceki durumun işleme kimliğini bulmak için ``git reflog`` "
"komutunu kullanın ve bunu o duruma geri dönmek için ``git reset --hard`` "
"argümanı olarak kullanın."

msgid "Making changes"
msgstr "Değişiklik yapma"

msgid ""
"You would then do your changes to our example's ``editor/"
"project_manager.cpp`` file with your usual development environment (text "
"editor, IDE, etc.)."
msgstr ""
"Daha sonra, her zamanki geliştirme ortamınızla (metin düzenleyici, IDE, vb.) "
"örneğimizin ``editor/project_manager.cpp`` dosyasında değişikliklerinizi "
"yaparsınız."

msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local Git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""
"Varsayılan olarak, bu değişiklikler *sahnelenmemiş* durumdadır. Sahneleme "
"alanı, çalışma dizininiz (değişiklikleri yaptığınız yer) ile yerel Git "
"deposu (işlemeler ve ``.git`` klasöründeki tüm meta veriler) arasında bir "
"katmandır. Değişiklikleri çalışma dizininden Git deposuna geçirmek için, "
"bunları ``git add`` komutuyla *sahne* 'ye almanız ve ardından ``git commit`` "
"komutuyla işlemeniz gerekir."

msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr ""
"Mevcut çalışmanızı sahnelemeden önce, sahnelenmişken ve işlendikten sonra "
"gözden geçirmek için bilmeniz gereken çeşitli komutlar vardır."

msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr ""
"``git diff`` size şu anki sahnelenmemiş değişiklikleri, yani çalışma "
"dizininiz ile sahneleme alanı arasındaki farkları gösterecektir."

msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr ""
"``git checkout -- <dosyalar>`` verilen dosyalardaki sahnelenmemiş "
"değişiklikleri geri alacaktır."

msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr ""
"``git add <dosyalar>`` listelenen dosyalar üzerindeki değişiklikleri "
"*sahneleyecektir*."

msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""
"``git diff --staged`` mevcut sahneye alınmış değişiklikleri, yani sahne "
"alanı ile son işleme arasındaki farkları gösterecektir."

msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr ""
"``git reset HEAD <files>`` listelenen dosyalardaki değişiklikleri *sahneden "
"kaldıracaktır*."

msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr ""
"``git status`` size şu anda sahneye alınan ve sahneye alınmamış "
"değişikliklerin neler olduğunu gösterecektir."

msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""
"``git commit`` sahnelenmiş dosyaların işlemesini yapacaktır. Bir metin "
"düzenleyici açacak (kullanmak istediğiniz düzenleyiciyi ``GIT_EDITOR`` çevre "
"değişkeni veya Git yapılandırmanızdaki ``core.editor`` ayarı ile "
"tanımlayabilirsiniz) ve bir işleme günlüğü yazmanıza izin verecektir. "
"Günlüğü doğrudan yazmak için ``git commit -m \"Havalı işleme günlüğü\"`` "
"şeklinde kullanabilirsiniz. (Varsayılan düzenleyici *vi/vim* olarak "
"açılabilir, kullanmayı bilmiyorsanız internetten bir göz atın)."

msgid ""
"``git commit --amend`` lets you amend the last commit with your currently "
"staged changes (added with ``git add``). This is the best option if you want "
"to fix a mistake in the last commit (bug, typo, style issue, etc.)."
msgstr ""
"``git commit --amend`` yapılan son işlemeyi şu anki değişikliklerinizle "
"(``git add`` ile eklenmiş) değiştirmenizi sağlar. Son işlemedeki (basit) bir "
"hatayı (hata, yazım hatası, tarz sorunu, vb.) düzeltmek istiyorsanız bu en "
"iyi seçenektir."

msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""
"``git log`` size şu anki dalınızın son işlemelerini gösterecektir. Eğer "
"yerel işlemeler yaptıysanız, bunlar en üstte gösterilmelidir."

msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""
"``git show`` size son işlemenin değişikliklerini gösterecektir. Ayrıca bir "
"işleme sağlaması belirterek o işlemeye ait değişiklikleri de görebilirsiniz."

msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""
"Ezberlenecek çok şey var! Endişelenmeyin, değişiklik yapmanız gerektiğinde "
"bu kopya kağıdını kontrol edin ve yaparak öğrenin."

msgid "Here's how the shell history could look like on our example:"
msgstr "Örneğimizle işiniz bittiğinde kabuk geçmişi şu şekilde görünebilir:"

msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""
"Bunu bitirince ``better-project-manager`` dalımızda, ``master`` dalında "
"olmayan iki yeni işleme olmalıdır. Yine de bunlar hala sadece yereldir, ve "
"ne uzak çatalın ne de yukarı akış deposunun bunlardan haberi yoktur."

msgid "Pushing changes to a remote"
msgstr "Değişiklikleri uzak depoya gönderme"

msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""
"Şimdi bu noktada ``git push`` devreye girecektir. Git'te bir işleme her "
"zaman yerel depoda yapılır (bir işlemenin doğrudan uzak depoyu değiştireceği "
"Subversion'dan farklıdır). Yeni işlemeleri dünya ile paylaşmak için uzak bir "
"dala *itmeniz* gerekir. Bunun için sözdizimi şöyledir:"

msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""
"Uzak dal (remote branch) ile ilgili kısım, yerel dal ile aynı isime sahip "
"olmasını istiyorsanız atlanabilir; bu örnekte bizim durumumuz budur, bu "
"yüzden şöyle yapacağız:"

msgid ""
"Git will ask you for your username and password. For your password, enter "
"your GitHub Personal Access Token (PAT). If you do not have a GitHub "
"Personal Access Token, or do not have one with the correct permissions for "
"your newly forked repository, you will need to create one. Follow this link "
"to create your Personal Access Token: `Creating a personal access token "
"<https://docs.github.com/en/authentication/keeping-your-account-and-data-"
"secure/creating-a-personal-access-token>`_."
msgstr ""
"Git sizden kullanıcı adınızı ve parolanızı isteyecektir. Parolanız için "
"GitHub Kişisel Erişim Belirtecinizi (PAT - Personal Access Token) girin. "
"GitHub Kişisel Erişim Belirteciniz yoksa veya yeni çatallanmış deponuz için "
"doğru izinlere sahip bir belirteciniz yoksa, bir tane oluşturmanız "
"gerekecektir. Kişisel Erişim Belirteçinizi oluşturmak için şu bağlantıyı "
"izleyin: `Kişisel erişim belirteci oluşturma <https://docs.github.com/en/"
"authentication/keeping-your-account-and-data-secure/creating-a-personal-"
"access-token>`_."

msgid ""
"After you have successfully verified your account using your PAT, the "
"changes will be sent to your remote repository. If you check the fork's page "
"on GitHub, you should see a new branch with your added commits."
msgstr ""
"PAT'ınızı kullanarak hesabınızı başarıyla doğruladıktan sonra, değişiklikler "
"uzak deponuza gönderilecektir. GitHub'da çatalın sayfasını kontrol "
"ederseniz, eklediğiniz işlemeleri içeren yeni bir dal görmeniz gerekir."

msgid "Issuing a pull request"
msgstr "Çekme isteği gönderme"

msgid ""
"When you load your fork's branch on GitHub, you should see a line saying "
"*\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch)."
msgstr ""
"Çatal dalınızı GitHub'a yüklediğinizde, *\"This branch is 2 commits ahead of "
"godotengine:master.\" (Bu dal godotengine:master'dan 2 işleme ileridedir. )* "
"şeklinde bir satır görmelisiniz (ve eğer deponuzun ``master`` dalı yukarı "
"akışın ``master`` dalı ile eşlenik değilse, potansiyel olarak birkaç işleme "
"de geride olduğunu)."

msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the ``godotengine/godot`` upstream "
"repository. It should show you your two commits, and state \"Able to "
"merge\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR yet, something went wrong. Go to our `Godot "
"Contributors Chat <https://chat.godotengine.org/>`_ and ask for support :)"
msgstr ""
"Aynı satırda bir \"Pull request/Çekme isteği\" bağlantısı vardır. Buna "
"tıkladığınızda ``godotengine/godot`` yukarı akış deposunda bir çekme isteği "
"yayınlamanızı sağlayacak bir form açılacaktır. Size yaptığınız iki "
"işlemenizi göstermeli ve \"Able to merge/Birleştirilebilir\" demelidir. Eğer "
"göstermiyorsa (örneğin çok daha fazla işleme varsa veya birleştirme "
"çakışmaları olduğunu söylüyorsa), PR'yi henüz oluşturmayın, çünkü bir şeyler "
"ters gitmiştir. `Godot Contributors Chat <https://chat.godotengine.org/>`_ "
"bölümümüze gidin ve destek isteyin :)"

msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""
"Eğer sorun görünmüyorsa, PR için açık bir başlık kullanın ve gerekli "
"ayrıntıları yorum alanına yazın. Çalışmanızın ne işe yaradığını göstermek "
"için ekran görüntülerini, GIF'leri veya sıkıştırılmış projeleri sürükleyip "
"bırakabilirsiniz. \"Create a pull request/Çekme isteği oluştur\" a tıklayın "
"ve tadaa!"

msgid "Modifying a pull request"
msgstr "Bir çekme isteğini değiştirme"

msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""
"Diğer katkıda bulunanlar tarafından gözden geçirilirken henüz-"
"birleştirilmemiş PR'nizde sık sık değişiklikler yapmanız gerekebilecektir, "
"çünkü diğer katkıda bulunanlar değişiklik talep edebilir veya test ederken "
"kendiniz bazı sorunlar bulabilirsiniz."

msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""
"İyi haber şu ki, bir çekme talebini basitçe çekme talebini yaptığınız dal "
"üzerinde işlem yaparak değiştirebilirsiniz. Örneğin, bu dalda yeni bir "
"işleme yapabilir, bunu çatalınıza gönderebilirsiniz ve PR otomatik olarak "
"güncellenecektir:"

msgid ""
"However, be aware that in our PR workflow, we favor commits that bring the "
"codebase from one functional state to another functional state, without "
"having intermediate commits fixing up bugs in your own code or style issues. "
"Most of the time, we will prefer a single commit in a given PR (unless "
"there's a good reason to keep the changes separate). Instead of authoring a "
"new commit, consider using ``git commit --amend`` to amend the previous "
"commit with your fixes. The above example would then become:"
msgstr ""
"Bununla birlikte, PR iş akışımızda, kendi kodunuzdaki hataları veya stil "
"sorunlarını düzelten ara işlemeler olmadan kod tabanını bir işlevsel "
"durumdan başka bir işlevsel duruma getiren işlemeleri tercih ettiğimizi "
"unutmayın. Çoğu zaman, verilen bir PR içinde tek bir işleme olmasını tercih "
"ederiz (değişiklikleri ayrı tutmak için iyi bir neden olmadığı sürece). Yeni "
"bir işleme göndermek yerine, önceki işlemeyi yeni düzeltmelerinizle "
"değiştirmek için ``git commit --amend`` kullanmayı tercih edin. Bu durumda "
"yukarıdaki örnek şöyle değişecektir:"

msgid "The interactive rebase"
msgstr "Etkileşimli yeniden temellendirme"

msgid ""
"If you didn't follow the above steps closely to *amend* changes into a "
"commit instead of creating fixup commits, or if you authored your changes "
"without being aware of our workflow and Git usage tips, reviewers might "
"request you to *rebase* your branch to *squash* some or all of the commits "
"into one."
msgstr ""
"Düzeltme işlemeleri oluşturmak yerine değişiklikleri *düzelten* (amend) bir "
"işleme haline getirmek için yukarıdaki adımları yakından takip etmediyseniz "
"veya değişikliklerinizi iş akışımızın ve Git kullanım ipuçlarımızın farkında "
"olmadan yazdıysanız, gözden geçirenler, işlemelerin bir kısmını veya "
"tamamını tek bir işleme haline getirmek için dalınızı *yeniden "
"temellendirmenizi (rebase)* isteyebilirler."

msgid ""
"Indeed, if some commits have been made following reviews to fix bugs, typos, "
"etc. in the original commit, they are not relevant to a future changelog "
"reader who would want to know what happened in the Godot codebase, or when "
"and how a given file was last modified."
msgstr ""
"Gerçekten de, gözden geçirmelerin sonrasında orijinal işlemedeki hataları, "
"yazım hatalarını vb. düzeltmek için bazı yeni işlemeler yapılmışsa, bunlar "
"Godot kod tabanında neler olduğunu veya belirli bir dosyanın en son ne zaman "
"ve nasıl değiştirildiğini bilmek isteyen gelecekteki bir değişiklik günlüğü "
"okuyucusu açısından alakalı değillerdir."

msgid ""
"To squash those extraneous commits into the main one, we will have to "
"*rewrite history*. Right, we have that power. You may read that it's a bad "
"practice, and it's true when it comes to branches of the upstream repo. But "
"in your fork, you can do whatever you want, and everything is allowed to get "
"neat PRs :)"
msgstr ""
"Bu gereksiz işlemeleri ana işlemelerin içine sıkıştırmak için *tarihi "
"yeniden yazmamız* gerekecek. Doğru okudunuz, bu güce sahibiz. Bunun kötü bir "
"uygulama olduğunu okuyabilirsiniz ve yukarı akış deposunun dalları söz "
"konusu olduğunda bu doğrudur. Ancak siz kendi çatalınızda istediğinizi "
"yapabilirsiniz ve düzgün PR'ler elde etmek için her şeye izin verilir :)"

msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit ID or a branch name as argument, and will let you "
"modify all commits between that commit/branch and the last one in your "
"working branch, the so-called ``HEAD``."
msgstr ""
"Bunu yapmak için *etkileşimli yeniden temellendirme* yani ``git rebase -i`` "
"komutunu kullanacağız. Bu komut, argüman olarak bir işleme kimliği veya bir "
"dal adı alır ve bu işleme/dal ile ``HEAD`` olarak adlandırılan çalışma "
"dalınızdaki sonuncusu arasındaki tüm işlemeleri değiştirmenize izin verir."

msgid ""
"While you can give any commit ID to ``git rebase -i`` and review everything "
"in between, the most common and convenient workflow involves rebasing on the "
"upstream ``master`` branch, which you can do with:"
msgstr ""
"``git rebase -i`` 'e herhangi bir işleme kimliğini verebiliyor ve aradaki "
"her şeyi gözden geçirebiliyor olsanız da, en yaygın ve kullanışlı iş akışı, "
"yukarı akış ``master`` dalında yeniden temellendirmeyi içerir, ve şununla "
"yapılabilir:"

msgid ""
"Referencing branches in Git is a bit tricky due to the distinction between "
"remote and local branches. Here, ``upstream/master`` (with a `/`) is a local "
"branch which has been pulled from the ``upstream`` remote's ``master`` "
"branch."
msgstr ""
"Git'te dallara referans vermek, uzak ve yerel dallar arasındaki ayrım "
"nedeniyle, biraz zahmetlidir. Burada, ``upstream/master`` (bir `/` ile), "
"``upstream`` uzak deponun ``master`` dalından çekilen yerel bir daldır."

msgid ""
"Interactive rebases can only be done on local branches, so the `/` is "
"important here. As the upstream remote changes frequently, your local "
"``upstream/master`` branch may become outdated, so you can update it with "
"``git fetch upstream master``. Contrarily to ``git pull --rebase upstream "
"master`` which would update your currently checked out branch, ``fetch`` "
"will only update the ``upstream/master`` reference (which is distinct from "
"your local ``master`` branch... yes it's confusing, but you'll become "
"familiar with this little by little)."
msgstr ""
"Etkileşimli yeniden temellendirmeler yalnızca yerel dallarda yapılabilir, bu "
"nedenle bu aradaki `/` önemlidir. Yukarı akış uzak deposu sık sık "
"değiştiğinden, yerel ``upstream/master`` dalınız güncelliğini yitirebilir, "
"bu nedenle bunu ``git fetch upstream master`` ile güncelleyebilirsiniz. Şu "
"anda seçili aktif dalı güncelleyecek olan ``git pull --rebase upstream "
"master`` 'ın aksine, ``fetch`` yalnızca ``upstream/master`` başvurusunu "
"güncelleyecektir (ve bu yerel ``master`` dalınızdan farklıdır... evet kafa "
"karıştırıcı, ancak buna yavaş yavaş aşina olacaksınız)."

msgid ""
"This will open a text editor (``vi`` by default, see `Git docs <https://git-"
"scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ to "
"configure your favorite one) with something which may look like this:"
msgstr ""
"Bu, aşağıdaki gibi görünebilecek bir metin düzenleyicisi açacaktır "
"(varsayılan olarak ``vi``, ama en sevdiğinizi yapılandırmak için `Git "
"belgeleri<https://git-scm.com/book/en/v2/Customizing-Git-Git-"
"Configuration#_core_editor>`_'ne bakın):"

msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""
"Düzenleyici ayrıca bu işlemeler üzerinde nasıl hareket edebileceğinize "
"ilişkin talimatları da gösterecektir. Özellikle, size \"pick\" 'in o "
"işlemeyi kullanmak (hiçbir şey yapmamak) anlamına geldiğini ve \"squash\" ve "
"\"fixup\" 'ın (ezme ve onarma) işlemeyi bir üst işleme ile *birleştirmek* "
"için kullanılabileceğini söylemelidir. \"Squash\" ve \"fixup\" arasındaki "
"fark, \"fixup \"ın ezilen işlemenin işleme günlüğünü atacak olmasıdır. "
"Örneğimizde, \"Fix a typo (Yazım hatasını düzelt)\" işlemesinin günlüğünü "
"tutmakla ilgilenmiyoruz, bu yüzden şunu kullanıyoruz:"

msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""
"Yeniden temellendirme, içeriği kaydettikten ve düzenleyiciden çıktıktan "
"sonra gerçekleşecektir. İkinci işleme birinciyle birleştirilecek ve ``git "
"log`` ve ``git show`` artık önceki her iki önceki işlemedeki değişiklikleri "
"içeren tek bir işlemeniz olduğunu doğrulayacaktır."

msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""
"Ama! Geçmişi yeniden yazdınız ve şimdi yerel ve uzak dallarınız birbirinden "
"uzaklaştı. Gerçekten de, yukarıdaki örnekte 1b4aad7 numaralı işleme "
"değişecek ve bu nedenle yeni bir işleme sağlaması almış olacaktır. Eğer "
"şimdi uzak dalınıza itmeye çalışırsanız, bir hata verecektir:"

msgid ""
"This is reasonable behavior, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""
"Bu kabul edilebilir bir davranıştır, Git uzak içeriğin üzerine yazacak "
"değişiklikleri göndermenize izin vermeyecektir. Ancak burada yapmak "
"istediğimiz şey aslında tam da budur, bu yüzden bunu *zorlamamız* (force) "
"gerekecek:"

msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""
"Ve tadaa! Git, uzaktaki dalınızı yerel olarak sahip olduğunuz dalla mutlu "
"bir şekilde *değiştirecektir* (bu nedenle ``git log`` kullanarak "
"istediğinizin bu olduğundan emin olun). Bu aynı zamanda PR'yi de buna göre "
"güncelleyecektir."

msgid "Rebasing onto another branch"
msgstr "Başka bir dal üzerine yeniden temellendirme"

msgid ""
"If you have accidentally opened your PR on the wrong branch, or need to "
"target another branch for some reason, you might need to filter out a lot of "
"commits that differ between the old branch (for example ``4.2``) and the new "
"branch (for example ``master``). This can make rebasing difficult and "
"tedious. Fortunately ``git`` has a command just for this situation, ``git "
"rebase --onto``."
msgstr ""
"PR'nizi yanlışlıkla yanlış dal üzerinden açtıysanız veya herhangi bir "
"nedenle başka bir dalı hedeflemeniz gerekiyorsa, eski dal ile (örneğin "
"``4.2``) yeni dal (örneğin ``master``) arasında farklılık gösteren çok "
"sayıda işlemenizi filtrelemeniz gerekebilir. Bu, yeniden temellendirmeyi zor "
"ve uğraştırıcı hale getirebilir. Neyse ki ``git`` tam da bu durum için bir "
"komuta sahiptir: ``git rebase --onto``."

msgid ""
"If your PR was created from the ``4.2`` branch and you want to update it to "
"instead start at ``master`` the following steps *should* fix this in one "
"step:"
msgstr ""
"Eğer PR'niz ``4.2`` dalından oluşturulmuşsa ve bunun yerine ``master`` "
"dalından başlayacak şekilde güncellemek istiyorsanız, aşağıdaki adımlar bunu "
"tek adımda *düzeltmelidir*:"

msgid ""
"This will take all the commits on your branch *after* the ``4.2`` branch, "
"and then splice them on top of ``master``, ignoring any commits from the "
"``4.2`` branch not on the ``master`` branch. You may still need to do some "
"fixing, but this command should save you a lot of tedious work removing "
"commits."
msgstr ""
"Bu, dalınızdaki ``4.2`` dalından *sonra* gelen tüm işlemeleri alacak ve "
"ardından, ``4.2`` dalının ``master`` dalında olmayan tüm işlemelerini yok "
"sayarak, ``master`` dalının üzerine ekleyecektir. Yine de hala bazı "
"düzeltmeler yapmanız gerekebilir, ancak bu komut sizi çok sayıda işlemeyi "
"kaldırmayı gerektiren zahmetli bir işten kurtaracaktır."

msgid ""
"Just like above for the interactive rebase you need to force push your "
"branch to handle the different changes:"
msgstr ""
"Tıpkı yukarıda interaktif yeniden temellendirme için olduğu gibi, farklı "
"değişiklikleri işlemek için dalınızı itmeye zorlamanız gerekir:"

msgid "Deleting a Git branch"
msgstr "Bir Git dalını silme"

msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""
"Çekme isteğiniz birleştirildikten sonra yapmanız gereken son bir şey daha "
"var: PR için açtığınız Git dalını silmek. Dalınızı silmezseniz hiçbir sorun "
"çıkmayacaktır, ancak bunu yapmak iyi bir uygulamadır. Bunu iki kez yapmanız "
"gerekecek, bir kez bilgisayarınızdaki yerel dal için ve bir kez de "
"GitHub'daki uzak dal için."

msgid "To delete our better Project Manager branch locally, use this command:"
msgstr ""
"\"better Project Manager\" dalımızı yerel olarak silmek için bu komutu "
"kullanın:"

msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""
"Alternatif olarak, dal henüz birleştirilmemiş ama biz yine de silmek "
"istiyorsak, ``-d`` yerine ``-D`` kullanırsınız (silinmemişse Github "
"üzerinden geri çekilebilir)."

msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr "Ardından, GitHub'daki uzak dalı da silmek için bu komutu kullanın:"

msgid ""
"You can also delete the remote branch from the GitHub PR itself, a button "
"should appear once it has been merged or closed."
msgstr ""
"Uzak dalı GitHub PR'ın kendisinden de silebilirsiniz, birleştirildikten veya "
"kapatıldıktan sonra bir düğme görünmelidir."
