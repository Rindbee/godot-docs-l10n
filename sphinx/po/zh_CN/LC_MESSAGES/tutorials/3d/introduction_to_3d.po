#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to 3D"
msgstr "3D 简介"

msgid ""
"Creating a 3D game can be challenging. That extra Z coordinate makes many of "
"the common techniques that helped to make 2D games simpler no longer work. "
"To aid in this transition, it is worth mentioning that Godot uses similar "
"APIs for 2D and 3D. Most nodes are the same and are present in both 2D and "
"3D versions. In fact, it is worth checking the 3D platformer tutorial, or "
"the 3D kinematic character tutorials, which are almost identical to their 2D "
"counterparts."
msgstr ""
"创造一个 3D 游戏很有挑战性。那个多出来的的 Z 轴使许多有助于使 2D 游戏变得简单"
"的常用技术不再起作用。为了帮助习惯这种转变，值得一提的是，Godot在2D和3D上使用"
"了类似的API。大多数节点是相同的，并且存在 2D 和 3D 版本。事实上，可以看看 3D "
"平台游戏教程或 3D 运动学角色教程，它们大部分与2D对应教程相同。"

msgid "Coordinate system"
msgstr "坐标系"

msgid ""
"Godot uses the `metric <https://en.wikipedia.org/wiki/Metric_system>`__ "
"system for everything in 3D, with 1 unit being equal to 1 meter. Physics and "
"other areas are tuned for this scale. Therefore, attempting to use a "
"different scale is usually a bad idea (unless you know what you are doing)."
msgstr ""
"Godot 在 3D 中使用的都是\\ `公制 <https://zh.wikipedia.org/zh-cn/"
"%E7%B1%B3%E5%88%B6>`__\\ ，1 个单位等于 1 米。物理和其他区域都为此而调整过。"
"因此，试图使用不同的比例通常是一个坏主意（除非你知道你在做什么）。"

msgid ""
"When working with 3D assets, it's always best to work in the correct scale "
"(set the unit to metric in your 3D modeling software). Godot allows scaling "
"post-import and, while this works in most cases, in rare situations it may "
"introduce floating-point precision issues (and thus, glitches or artifacts) "
"in delicate areas such as rendering or physics. Make sure your artists "
"always work in the right scale!"
msgstr ""
"使用 3D 资产时，最好始终使用正确的比例（在 3D 建模软件中将单位设置为公制）。"
"Godot 允许在导入后缩放，尽管在大多数时都没问题，但在极少数情况下，会在渲染或"
"物理等敏感区域带来浮点精度问题（从而导致故障或伪影）。所以，确保你的艺术家始"
"终在正确的比例下进行创作！"

msgid ""
"The Y coordinate is used for \"up\". As for the horizontal X/Z axes, Godot "
"uses a **right-handed** coordinate system. This means that for most objects "
"that need alignment (such as lights or cameras), the Z axis is used as a "
"\"pointing towards\" direction. This convention roughly means that:"
msgstr ""
"Y 坐标用于“向上”。至于水平 X/Z 轴，Godot 使用 **右手** 坐标系。这意味着对于大"
"多数需要对齐的对象（例如灯光或相机），Z 轴被用作“指向”方向。这个约定的大致意"
"思是："

msgid "**X** is sides"
msgstr "**X** 是两边"

msgid "**Y** is up/down"
msgstr "**Y** 是上/下"

msgid "**Z** is front/back"
msgstr "**Z** 是前/后"

msgid "See this chart for comparison with other 3D software:"
msgstr "有关与其他 3D 软件的比较，请参阅此图表："

msgid "3D coordinate systems comparison chart"
msgstr "3D坐标系比较图表"

msgid "Image by `Freya Holmér <https://twitter.com/FreyaHolmer>`__"
msgstr "图像来自 `Freya Holmér <https://twitter.com/FreyaHolmer>`__"

msgid "Space and manipulation gizmos"
msgstr "空间与操纵小工具"

msgid "Some useful keybindings:"
msgstr "一些有用的键盘绑定:"

msgid "To center the view on the selected object, press :kbd:`F`."
msgstr "要将视图居中到所选对象上，请按 :kbd:`F`。"

msgid "Using Blender-style transform shortcuts"
msgstr "使用 Blender 风格的变换快捷键"

msgid ""
"Since Godot 4.2, you can enable Blender-style shortcuts for translating, "
"rotating and scaling nodes. In Blender, these shortcuts are:"
msgstr ""
"从 Godot 4.2 开始，可以启用 Blender 风格的快捷键来平移、旋转和缩放节点。在 "
"Blender 中，这些快捷键分别是："

msgid ":kbd:`G` for translating"
msgstr ":kbd:`G` 用于平移"

msgid ":kbd:`R` for rotating"
msgstr ":kbd:`R` 用于旋转"

msgid ":kbd:`S` for scaling"
msgstr ":kbd:`S` 用于缩放"

msgid ""
"After pressing a shortcut key while focusing on the 3D editor viewport, move "
"the mouse or enter a number to move the selected node(s) by the specified "
"amount in 3D units. You can constrain movement to a specific axis by "
"specifying the axis as a letter, then the distance (if entering a value with "
"the keyboard)."
msgstr ""
"在聚焦于 3D 编辑器视口的同时，按下快捷键，可以移动鼠标或输入数字以将选定节点"
"移动指定的 3D 单位量。你可以通过用字母指定特定的轴，然后指定距离（如果使用键"
"盘来输入值），以此来将选中节点的平移限制到特定的轴上。"

msgid ""
"For instance, to move the selection upwards by 2.5 units, enter the "
"following sequence in order (Y+ is upwards in Godot):"
msgstr ""
"例如，要将选中物体向上移动 2.5 个单位，请按顺序输入以下序列（Y+ 在 Godot 中是"
"向上，也就是延 Y 轴正方向）："

msgid ":kbd:`G`-:kbd:`Y`-:kbd:`2`-:kbd:`.`-:kbd:`5`-:kbd:`Enter`"
msgstr ":kbd:`G`-:kbd:`Y`-:kbd:`2`-:kbd:`.`-:kbd:`5`-:kbd:`Enter`"

msgid ""
"To use Blender-style transform shortcuts in Godot, go to the Editor "
"Settings' **Shortcuts** tab, then in the Spatial Editor section:"
msgstr ""
"如果要在 Godot 中使用 Blender 风格的变换快捷键，请转到编辑器设置的 **快捷键"
"** 选项卡，然后在 Spatial Editor 部分中进行以下调整："

msgid "Bind **Begin Translate Transformation** to :kbd:`G`."
msgstr "将\\ **开始平移变换**\\ 绑定到 :kbd:`G`。"

msgid "Bind **Begin Rotate Transformation** to :kbd:`R`."
msgstr "将\\ **开始旋转变换**\\ 绑定到 :kbd:`R`。"

msgid "Bind **Begin Scale Transformation** to :kbd:`S`."
msgstr "将\\ **开始缩放变换**\\ 绑定到 :kbd:`S`。"

msgid ""
"Finally, unbind **Scale Mode** so that its shortcut won't conflict with "
"**Begin Rotate Transformation**."
msgstr ""
"最后，取消 **缩放模式** 快捷键的绑定，使其快捷键不会与 **开始旋转变换** 冲"
"突。"

msgid "Node3D node"
msgstr "Node3D 节点"

msgid ""
":ref:`Node2D <class_Node2D>` is the base node for 2D. :ref:`Control "
"<class_Control>` is the base node for everything GUI. Following this "
"reasoning, the 3D engine uses the :ref:`Node3D <class_Node3D>` node for "
"everything 3D."
msgstr ""
":ref:`Node2D <class_Node2D>` 是 2D 的基础节点。\\ :ref:`Control "
"<class_Control>` 是所有 GUI 的基础节点。同理，3D 引擎中的所有 3D 物体都使用 :"
"ref:`Node3D <class_Node3D>` \\ 节点。"

msgid ""
"Node3Ds have a local transform, which is relative to the parent node (as "
"long as the parent node is also of **or inherits from** the type Node3D). "
"This transform can be accessed as a 3×4 :ref:`Transform3D "
"<class_Transform3D>`, or as 3 :ref:`Vector3 <class_Vector3>` members "
"representing location, Euler rotation (X, Y and Z angles) and scale."
msgstr ""
"Node3D 有一个局部变换，它是相对于父节点而言的（只要父节点也是\\ **或继承自** "
"Node3D 类型）。这个变换可以以 3×4 的 :ref:`Transform3D <class_Transform3D>` "
"形式访问，也可以以 3 个 :ref:`Vector3 <class_Vector3>` 成员的形式访问，分别代"
"表位置、欧拉旋转（X、Y、Z 角度）和缩放。"

msgid "3D content"
msgstr "3D 内容"

msgid ""
"Unlike 2D, where loading image content and drawing is straightforward, 3D is "
"a little more difficult. The content needs to be created with special 3D "
"tools (also called Digital Content Creation tools, or DCCs) and exported to "
"an exchange file format to be imported in Godot. This is required since 3D "
"formats are not as standardized as images."
msgstr ""
"与 2D 中加载图像内容和绘图都非常直观相比，3D 就有所不同，会稍微难一些。3D 内"
"容需要使用特殊的 3D 工具（通常称为数字内容创建工具，Digital Content Creation "
"工具，简称 DCC）来创建，然后导出到某种交换文件格式，才能被 Godot 导入。这是因"
"为 3D 格式的标准化不及图像。"

msgid "Manually authored models (using 3D modeling software)"
msgstr "手动制作的模型（使用 3D 建模软件）"

msgid "Generated geometry"
msgstr "生成的几何体"

msgid ""
"It is possible to create custom geometry by using the :ref:`ArrayMesh "
"<class_ArrayMesh>` resource directly. Simply create your arrays and use the :"
"ref:`ArrayMesh.add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` function. A helper class "
"is also available, :ref:`SurfaceTool <class_SurfaceTool>`, which provides a "
"more straightforward API and helpers for indexing, generating normals, "
"tangents, etc."
msgstr ""
"可以直接使用 :ref:`ArrayMesh <class_ArrayMesh>` 资源创建自定义几何体。只需创"
"建数组并使用 :ref:`ArrayMesh.add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` 函数即可。也可以使用辅助"
"类 :ref:`SurfaceTool <class_SurfaceTool>`，它提供了更直接的 API 和辅助工具，"
"用于索引、生成法线、切线等。"

msgid ""
"In any case, this method is meant for generating static geometry (models "
"that will not be updated often), as creating vertex arrays and submitting "
"them to the 3D API has a significant performance cost."
msgstr ""
"在任何情况下，这种方法都是为了用于生成静态几何体(不会经常更新的模型)，因为创"
"建顶点数组并将它们提交给3D API具有显著的性能开销。"

msgid "Immediate geometry"
msgstr "即时几何体"

msgid ""
"If, instead, you need to generate simple geometry that will be updated "
"often, Godot provides a special :ref:`ImmediateMesh <class_ImmediateMesh>` "
"resource that can be used in a :ref:`MeshInstance3D <class_MeshInstance3D>` "
"node. This provides an OpenGL 1.x-style immediate-mode API to create points, "
"lines, triangles, etc."
msgstr ""
"相反，如果你需要生成经常更新的简单几何体，Godot 提供了一种特殊的 :ref:"
"`ImmediateMesh <class_ImmediateMesh>` 资源，它可以在 :ref:`MeshInstance3D "
"<class_MeshInstance3D>` 节点中使用。这提供了 OpenGL 1.x 风格的即时模式 API 来"
"创建点、线、三角形等。"

msgid "2D in 3D"
msgstr "3D 中的 2D"

msgid ""
"While Godot packs a powerful 2D engine, many types of games use 2D in a 3D "
"environment. By using a fixed camera (either orthogonal or perspective) that "
"does not rotate, nodes such as :ref:`Sprite3D <class_Sprite3D>` and :ref:"
"`AnimatedSprite3D <class_AnimatedSprite3D>` can be used to create 2D games "
"that take advantage of mixing with 3D backgrounds, more realistic parallax, "
"lighting/shadow effects, etc."
msgstr ""
"虽然Godot包装了强大的2D引擎，但许多类型的游戏会使用在3D环境中的2D效果。 通过"
"使用不旋转的固定相机(正交或透视)，可以使用诸如 :ref:`Sprite3D "
"<class_Sprite3D>` 和 :ref:`AnimatedSprite3D <class_AnimatedSprite3D>` 等节点"
"来创建混合了具有3D背景，更逼真的视差，灯光/阴影效果等的2D游戏。"

msgid ""
"The disadvantage is, of course, that added complexity and reduced "
"performance in comparison to plain 2D, as well as the lack of reference of "
"working in pixels."
msgstr ""
"当然，缺点在于与普通2D相比增加了复杂性并降低了与普通2D 相比的性能，以及缺乏进"
"行像素工作时的参考。"

msgid "Environment"
msgstr "环境"

msgid ""
"Besides editing a scene, it is often common to edit the environment. Godot "
"provides a :ref:`WorldEnvironment <class_WorldEnvironment>` node that allows "
"changing the background color, mode (as in, put a skybox), and applying "
"several types of built-in post-processing effects. Environments can also be "
"overridden in the Camera."
msgstr ""
"除了编辑场景之外，编辑环境通常也很常见。 Godot提供了一个 :ref:"
"`WorldEnvironment <class_WorldEnvironment>` 节点，该节点允许更改背景颜色，模"
"式(就像放一个天空盒时那样)以及应用多种内置处理后效果。 环境可以在Camera中被覆"
"写。"

msgid ""
"By default, any 3D scene that doesn't have a :ref:`WorldEnvironment "
"<class_WorldEnvironment>` node, or a :ref:`DirectionalLight3D "
"<class_DirectionalLight3D>`, will have a preview turned on for what it's "
"missing to light the scene."
msgstr ""
"默认情况下，如果 3D 场景中没有 :ref:`WorldEnvironment "
"<class_WorldEnvironment>` 或者 :ref:`DirectionalLight3D "
"<class_DirectionalLight3D>` 节点，就会打开对应的预览项，为该场景布光。"

msgid ""
"The preview light and environment will only be visible in the scene while in "
"the editor. If you run the scene or export the project they will not affect "
"the scene."
msgstr ""
"预览灯光和预览环境只会在编辑器的场景中显示。运行场景或导出后的项目时不会对场"
"景产生影响。"

msgid ""
"The same preview sun and environment is used for every scene in the same "
"project, So only make adjustments that would apply to all of the scenes you "
"will need a preview light and environment for."
msgstr ""
"同一个项目中，不同的场景使用的是相同的预览太阳和预览环境。因此，在这里作出的"
"调整应该适合所有需要预览灯光和预览环境的场景。"

msgid "Cameras"
msgstr "相机"

msgid ""
"No matter how many objects are placed in the 3D space, nothing will be "
"displayed unless a :ref:`Camera3D <class_Camera3D>` is also added to the "
"scene. Cameras can work in either orthogonal or perspective projections:"
msgstr ""
"无论在 3D 空间中放置多少物体，除非在场景中添加了 :ref:`Camera3D "
"<class_Camera3D>`\\ ，否则不会显示任何内容。相机可以在正交或透视投影中工作："

msgid ""
"Cameras are associated with (and only display to) a parent or grandparent "
"viewport. Since the root of the scene tree is a viewport, cameras will "
"display on it by default, but if sub-viewports (either as render target or "
"picture-in-picture) are desired, they need their own children cameras to "
"display."
msgstr ""
"摄像机与父视口或其祖先视口相关联，且仅显示到他们上面。 由于场景树的根是一个视"
"口，默认情况下会在其上显示摄像机，但如果需要子视口(作为渲染目标或画中画)，则"
"需要自己的子摄像头才能显示。"

msgid ""
"When dealing with multiple cameras, the following rules are enforced for "
"each viewport:"
msgstr "处理多台摄像机时，每个视口都遵循以下规则:"

msgid ""
"If no cameras are present in the scene tree, the first one that enters it "
"will become the active camera. Further cameras entering the scene will be "
"ignored (unless they are set as *current*)."
msgstr ""
"如果场景树中没有摄像机，则第一个进入的摄像机将成为活跃摄像机。进入场景的其他"
"摄像机将被忽略（除非它们被设置为 *current*\\ ）。"

msgid ""
"If a camera has the \"*current*\" property set, it will be used regardless "
"of any other camera in the scene. If the property is set, it will become "
"active, replacing the previous camera."
msgstr ""
"如果相机设置了“\\ *current*\\ ”属性，则无论场景中是否有其他相机，都会使用它。"
"如果该属性已设置，它将变为活动状态，取代之前的摄像机。"

msgid ""
"If an active camera leaves the scene tree, the first camera in tree-order "
"will take its place."
msgstr "如果活动摄像机离开了场景树，则按树形顺序排列的第一台摄像机将取代它。"

msgid "Lights"
msgstr "灯光"

msgid ""
"The background environment emits some ambient light which appears on "
"surfaces. Still, without any light sources placed in the scene, the scene "
"will appear quite dark unless the background environment is very bright."
msgstr ""
"背景环境发出一些出现在表面上的环境光。然而，如果场景中没有任何光源，除非背景"
"环境非常明亮，否则场景会显得很暗。"

msgid ""
"Most outdoor scenes have a directional light (the sun or moon), while indoor "
"scenes typically have several positional lights (lamps, torches, …). See :"
"ref:`doc_lights_and_shadows` for more information on setting up lights in "
"Godot."
msgstr ""
"大多数室外场景都有平行光（太阳或月亮），而室内场景通常有多个位置光（灯、火把"
"等）。有关在 Godot 中设置灯光的更多信息，请参阅 :ref:"
"`doc_lights_and_shadows`。"
