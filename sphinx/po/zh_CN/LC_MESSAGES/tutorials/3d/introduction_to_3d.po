#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to 3D"
msgstr "3D 简介"

msgid ""
"Creating a 3D game can be challenging. That extra Z coordinate makes many of "
"the common techniques that helped to make 2D games simpler no longer work. "
"To aid in this transition, it is worth mentioning that Godot uses similar "
"APIs for 2D and 3D. Most nodes are the same and are present in both 2D and "
"3D versions. In fact, it is worth checking the 3D platformer tutorial, or "
"the 3D kinematic character tutorials, which are almost identical to their 2D "
"counterparts."
msgstr ""
"创造一个 3D 游戏很有挑战性。那个多出来的的 Z 轴使许多有助于使 2D 游戏变得简单"
"的常用技术不再起作用。为了帮助习惯这种转变，值得一提的是，Godot在2D和3D上使用"
"了类似的API。大多数节点是相同的，并且存在 2D 和 3D 版本。事实上，可以看看 3D "
"平台游戏教程或 3D 运动学角色教程，它们大部分与2D对应教程相同。"

msgid "An example 3D game demo created using Godot"
msgstr "使用 Godot 创建的 3D 游戏演示示例"

msgid ""
"Godot Third Person Shooter (TPS) Demo, available on the `Github repository "
"<https://github.com/godotengine/tps-demo>`__ or the :ref:`Asset Library "
"<doc_project_manager_downloading_demos>`."
msgstr ""
"Godot 第三人称射击游戏 (TPS) 演示，可在 `Github 仓库 <https://github.com/"
"godotengine/tps-demo>`__ 或 :ref:`资产库 "
"<doc_project_manager_downloading_demos>` 中获取。"

msgid ""
"In 3D, math is a little more complex than in 2D. For an introduction to the "
"relevant math written for game developers, not mathemeticians or engineers, "
"check out :ref:`doc_vector_math` and :ref:`doc_using_transforms`."
msgstr ""
"在3D中，数学比在2D中更复杂一些。想了解为游戏开发者（而非数学家或工程师）编写"
"的相关数学介绍，请查看 :ref:`doc_vector_math` "
"和 :ref:`doc_using_transforms` 。"

msgid "3D workspace"
msgstr "3D 工作区"

msgid ""
"Editing 3D scenes is done in the 3D workspace. This workspace can be "
"selected manually, but it will be automatically selected when a Node3D node "
"is selected."
msgstr ""
"编辑 3D 场景在 3D 工作区中完成。该工作区可以手动选择，但在选择 Node3D 节点时"
"将自动启用。"

msgid ""
"Similar to 2D, the tabs below the workspace selector are used to change "
"between currently opened scenes or create a new one using the plus (+) "
"button. The left and right docks should be familiar from :ref:`editor "
"introduction <doc_editor_introduction>`."
msgstr ""
"与 2D 类似，工作区选择器下方的选项卡用于在当前打开的场景之间切换，或使用加号"
"（+）按钮创建新场景。左右两侧的面板应该从 :ref:`编辑器简介 "
"<doc_editor_introduction>` 中熟悉了。"

msgid ""
"Below the scene selector, the main toolbar is visible, and beneath the main "
"toolbar is the 3D viewport."
msgstr "在场景选择器下方，能看到主工具栏，而主工具栏下面是 3D 视口。"

msgid "Main toolbar"
msgstr "主工具栏"

msgid ""
"Some buttons in the main toolbar are the same as those in the 2D workspace. "
"A brief explanation is given with the shortcut if the mouse cursor is "
"hovered over a button for one second. Some buttons may have additional "
"functionality if another keypress is performed. A recap of main "
"functionality of each button with its default shortcut is provided below "
"from left to right:"
msgstr ""
"主工具栏中的某些按钮与 2D 工作区中的按钮相同。如果鼠标光标悬停在按钮上一秒"
"钟，会给出简要说明和快捷键。某些按钮在执行另一个按键操作时可能具有附加功能。"
"下面从左到右概述了每个按钮的主要功能及其默认快捷键："

msgid ""
"**Select Mode** (:kbd:`Q`): Allows selection of nodes in the viewport. Left "
"clicking on a node to select one. Left clicking and dragging a rectangle "
"selects all nodes within the rectangle's boundaries, once released. "
"Holding :kbd:`Shift` while selecting adds more nodes to the selection. "
"Clicking on a selected node while holding :kbd:`Shift` deselects the node. "
"In this mode, you can use the gizmos to perform movement or rotation."
msgstr ""
"**选择模式** (:kbd:`Q`): 允许在视口中选择节点。左键单击节点即可选择。左键单击"
"并拖动矩形框，松开后即可选择矩形边界内的所有节点。按住 :kbd:`Shift` 键的同时"
"选择可将更多节点添加到当前选择中。按住 :kbd:`Shift` 键的同时单击已选中的节点"
"可取消选择。在此模式下，你可以使用操纵器来执行移动或旋转操作。"

msgid ""
"**Move Mode** (:kbd:`W`): Enables move (or translate) mode for the selected "
"nodes. See :ref:`doc_introduction_to_3d_space_and_manipulation` for more "
"details."
msgstr ""
"**移动模式** (:kbd:`W`)：为已选节点启用移动（或平移）模式。查"
"看 :ref:`doc_introduction_to_3d_space_and_manipulation` 了解更多细节。"

msgid ""
"**Rotate Mode** (:kbd:`E`): Enables rotation mode for the selected nodes. "
"See :ref:`doc_introduction_to_3d_space_and_manipulation` for more details."
msgstr ""
"**旋转模式**（:kbd:`E`）：为已选节点启用旋转模式。查"
"看 :ref:`doc_introduction_to_3d_space_and_manipulation` 了解更多细节。"

msgid ""
"**Scale Mode** (:kbd:`R`): Enables scaling and displays scaling gizmos in "
"different axes for the selected nodes. "
"See :ref:`doc_introduction_to_3d_space_and_manipulation` for more details."
msgstr ""
"**缩放模式** (:kbd:`R`)：为已选节点启用缩放功能并显示各轴的缩放操作控件。查"
"看 :ref:`doc_introduction_to_3d_space_and_manipulation` 了解更多细节。"

msgid ""
"**Lock** (:kbd:`Ctrl + L`) the selected nodes, preventing selection and "
"movement in the viewport. Clicking the button again (or using :kbd:`Ctrl + "
"Shift + L`) unlocks the selected nodes. Locked nodes can only be selected in "
"the scene tree. They can easily be identified with a padlock next to their "
"node names in the scene tree. Clicking on this padlock also unlocks the "
"nodes."
msgstr ""
"**锁定**（ :kbd:`Ctrl + L` ）已选节点，防止它们在视口中被选中或移动。再次点击"
"该按钮（或使用 :kbd:`Ctrl + Shift + L` ）可解锁已选节点。已锁节点只能在场景树"
"中被选中。在场景树中，它们可以用节点名称旁边的锁形图标轻易识别。点击该锁也可"
"以解锁节点。"

msgid ""
"**Group selected nodes** (:kbd:`Ctrl + G`). This allows selection of the "
"root node if any of the children are selected. Using :kbd:`Ctrl + G` "
"ungroups them. Additionally, clicking the ungroup button in the scene tree "
"performs the same action."
msgstr ""
"**编组所选节点**\\（:kbd:`Ctrl + G`）。如果已经选择了任何子节点，该操作将允许"
"选择根节点。使用 :kbd:`Ctrl + G` 可以取消编组。此外，点击场景树中的取消编组按"
"钮也会执行相同的操作。"

msgid ""
"**Ruler Mode** (:kbd:`M`): When enabled you can click and drag to measure "
"distance in the scene in meters."
msgstr ""
"**标尺模式**（:kbd:`M`）：启用后，可通过点击拖动操作以米为单位测量场景中的距"
"离。"

msgid ""
"**Use Local Space** (:kbd:`T`): If enabled, gizmos of a node are drawn using "
"the current node's rotation angle instead of the :ref:`global viewport axes "
"<doc_introduction_to_3d_coordinate_system>`."
msgstr ""
"**使用局部空间**（:kbd:`T`）：如果启用，节点的操控器将使用当前节点的旋转角度"
"绘制，而非 :ref:`全局视口坐标系 <doc_introduction_to_3d_coordinate_system>`。"

msgid ""
"**Use Snap** (:kbd:`Y`): If enabled, movement, and rotation snap to grid. "
"Snapping can also temporarily be activated using :kbd:`Ctrl` while "
"performing the action. The settings for changing snap options are explained "
"below."
msgstr ""
"**使用吸附** (:kbd:`Y`)：如果启用，移动和旋转将吸附到网格。执行操作时按"
"住 :kbd:`Ctrl` 也可以临时激活吸附功能。下方会说明更改吸附选项的设置。"

msgid "**Transform menu**: It has three options:"
msgstr "**变换菜单**\\ ：包含三个选项："

msgid "*Snap Object to Floor*: Snaps an object to a solid floor."
msgstr "*吸附物体到地面*：将物体吸附到实体地面。"

msgid ""
"*Transform Dialog*: Opens a dialog to adjust transform parameters "
"(translate, rotate, scale, and transform) manually."
msgstr ""
"*变换对话框*：打开一个对话框来手动调整变换参数（平移、旋转、缩放和变换）。"

msgid ""
"**View menu**: Controls the view options and enables additional viewports:"
msgstr "**视图菜单**：控制视图选项并启用额外的视口："

msgid ""
"In this menu, you can also show/hide grids, which are set to 1x1 meter by "
"default, and the origin, where the blue, green, and red axis lines "
"intersect. Moreover, specific types of gizmos can be toggled in this menu."
msgstr ""
"在此菜单中，你还可以显示/隐藏网格（默认设置为 1x1 米）和原点（蓝色、绿色和红"
"色轴线的交点）。此外，在此菜单中还可以切换特定类型的小工具。"

msgid ""
"An open eye means that the gizmo is visible, a closed eye means it is "
"hidden. A half-open eye means that it is also visible through opaque "
"surfaces."
msgstr ""
"睁开的眼睛表示小工具可见，闭上的眼睛表示它被隐藏。半睁的眼睛表示它穿过不透明"
"表面也可见。"

msgid ""
"Clicking on *Settings* in this view menu opens a window to change the "
"*Vertical Field of View (VFOV)* parameter (in degrees), *Z-Near*, and *Z-"
"Far* values."
msgstr ""
"点击视图菜单中的 *设置* 会打开一个窗口，用于更改 *垂直视野 (VFOV)* 参数（角"
"度）、*近平面Z* 和 *远平面Z* 值。"

msgid ""
"Next to the View menu, additional buttons may be visible. In the toolbar "
"image at the beginning of this chapter, an additional *Mesh* button appears "
"because a MeshInstance3D is selected. This menu provides some quick actions "
"or tools to work on a specific node or selection."
msgstr ""
"在视图菜单旁边，可能会显示额外的按钮。在本章开头的工具栏图片中，由于选中了 "
"MeshInstance3D，显示了一个额外的 *Mesh* 按钮。该菜单提供了一些快速操作或工"
"具，用于处理特定节点或选中内容。"

msgid "View menu of viewport"
msgstr "视口的视图菜单"

msgid ""
"This menu also displays the current view type and enables quick adjustment "
"of the viewport's viewing angle. Additionally, it offers options to modify "
"the appearance of nodes within the viewport."
msgstr ""
"此菜单还显示当前视图类型，并支持快速调整视口的视角。此外，它还提供了一些选项"
"来修改视口中节点的外观。"

msgid "Coordinate system"
msgstr "坐标系"

msgid ""
"Godot uses the `metric <https://en.wikipedia.org/wiki/Metric_system>`__ "
"system for everything in 3D, with 1 unit being equal to 1 meter. Physics and "
"other areas are tuned for this scale. Therefore, attempting to use a "
"different scale is usually a bad idea (unless you know what you are doing)."
msgstr ""
"Godot 在 3D 中使用的都是\\ `公制 <https://zh.wikipedia.org/zh-cn/"
"%E7%B1%B3%E5%88%B6>`__\\ ，1 个单位等于 1 米。物理和其他区域都为此而调整过。"
"因此，试图使用不同的比例通常是一个坏主意（除非你知道你在做什么）。"

msgid ""
"When working with 3D assets, it's always best to work in the correct scale "
"(set the unit to metric in your 3D modeling software). Godot allows scaling "
"post-import and, while this works in most cases, in rare situations it may "
"introduce floating-point precision issues (and thus, glitches or artifacts) "
"in delicate areas such as rendering or physics. Make sure your artists "
"always work in the right scale!"
msgstr ""
"使用 3D 资产时，最好始终使用正确的比例（在 3D 建模软件中将单位设置为公制）。"
"Godot 允许在导入后缩放，尽管在大多数时都没问题，但在极少数情况下，会在渲染或"
"物理等敏感区域带来浮点精度问题（从而导致故障或伪影）。所以，确保你的艺术家始"
"终在正确的比例下进行创作！"

msgid ""
"The Y coordinate is used for \"up\". As for the horizontal X/Z axes, Godot "
"uses a **right-handed** coordinate system. This means that for most objects "
"that need alignment (such as lights or cameras), the Z axis is used as a "
"\"pointing towards\" direction. This convention roughly means that:"
msgstr ""
"Y 坐标用于“向上”。至于水平 X/Z 轴，Godot 使用 **右手** 坐标系。这意味着对于大"
"多数需要对齐的对象（例如灯光或相机），Z 轴被用作“指向”方向。这个约定的大致意"
"思是："

msgid "**X** is sides"
msgstr "**X** 是两边"

msgid "**Y** is up/down"
msgstr "**Y** 是上/下"

msgid "**Z** is front/back"
msgstr "**Z** 是前/后"

msgid "See this chart for comparison with other 3D software:"
msgstr "有关与其他 3D 软件的比较，请参阅此图表："

msgid "3D coordinate systems comparison chart"
msgstr "3D坐标系比较图表"

msgid "Image by `Freya Holmér <https://twitter.com/FreyaHolmer>`__"
msgstr "图像来自 `Freya Holmér <https://twitter.com/FreyaHolmer>`__"

msgid "Space and manipulation gizmos"
msgstr "空间与操纵小工具"

msgid ""
"Moving, rotating, and scaling objects in the 3D view is done through the "
"manipulator gizmos. Each axis is represented by a color: Red, Green, Blue "
"represent X, Y, Z respectively. This convention applies to the grid and "
"other gizmos too (and also to the shader language, ordering of components "
"for Vector3, Color, etc.)."
msgstr ""
"在 3D 视图中移动、旋转和缩放物体是通过操纵器小工具完成的。每个轴用一种颜色表"
"示：红、绿、蓝分别代表 X、Y、Z。这种惯例也适用于网格和其他小工具（也适用于着"
"色器语言，Vector3、Color 等组件的排序）。"

msgid "Some useful keybindings:"
msgstr "一些有用的键盘绑定:"

msgid ""
"To snap placement or rotation, press :kbd:`Ctrl` while moving, scaling, or "
"rotating."
msgstr "要吸附放置或旋转，在移动、缩放或旋转时按 :kbd:`Ctrl` 键。"

msgid "To center the view on the selected object, press :kbd:`F`."
msgstr "要将视图居中到所选对象上，请按 :kbd:`F`。"

msgid ""
"In the viewport, the arrows can be clicked and held to move the object on an "
"axis. The arcs can be clicked and held to rotate the object. To lock one "
"axis and move the object freely in the other two axes, the colored "
"rectangles can be clicked, held, and dragged."
msgstr ""
"在视口中，点击并按住箭头可以沿轴移动物体。点击并按住弧线可以旋转物体。要锁定"
"一个轴并在另外两个轴上自由移动物体，可点击、按住并拖动彩色矩形。"

msgid ""
"If the transform mode is changed from *Select Mode* to *Scale Mode*, the "
"arrows will be replaced by cubes, which can be dragged to scale an object as "
"if the object is being moved."
msgstr ""
"如果变换模式从*选择模式*更改为*缩放模式*，箭头将被立方体取代，拖动可以缩放物"
"体，类似移动物体。"

msgid "Navigating the 3D environment"
msgstr "在 3D 环境中导航"

msgid ""
"In 3D environments, it is often important to adjust the viewpoint or angle "
"from which you are viewing the scene. In Godot, navigating the 3D "
"environment in the viewport (or spatial editor) can be done in multiple ways."
msgstr ""
"在 3D 环境中，调整视角或观察场景的角度通常很重要。在 Godot 里，在视口（或空间"
"编辑器）中，可以通过多种方式实现 3D 环境导航。"

msgid ""
"The default 3D scene navigation controls are similar to Blender (aiming to "
"have some sort of consistency in the free software pipeline), but options "
"are included to customize mouse buttons and behavior to be similar to other "
"tools in the Editor Settings. To change the controls to Maya or Modo "
"controls, you can navigate to **Editor Settings > Editors > 3D**. Then, "
"under *Navigation*, search for *Navigation Scheme*."
msgstr ""
"默认的3D场景导航控制类似于 Blender（旨在使免费软件开发流程中具有某种一致"
"性），但在编辑器设置中也包含了自定义鼠标按钮和行为的选项，就仿佛使用其他工具"
"那样。比如想修改成 Maya 或者 Modo 的控制逻辑，你可以打开 **编辑器设置>各编辑"
"器>3D** 。然后在 *导航* 下，找到 *导航方案* 。"

msgid ""
"Using the default settings, the following shortcuts control how one can "
"navigate in the viewport:"
msgstr "使用默认设置时，以下快捷键控制如何在视口中导航："

msgid ""
"Pressing the middle mouse button and dragging the mouse allows you to orbit "
"around the center of what is on the screen."
msgstr "按下鼠标中键并拖动鼠标，可以让你围绕屏幕中心进行环绕观察。"

msgid ""
"It is also possible to left-click and hold the manipulator gizmo located on "
"the top right of the viewport to orbit around the center:"
msgstr "你也可以左键点击并按住位于视口右上角的操纵器小工具来围绕中心进行环绕："

msgid ""
"Left-clicking on one of the colored circles will set the view to the chosen "
"orthogonal and the viewport's view menu will be updated accordingly."
msgstr ""
"左键单击其中一个彩色圆圈会将视图设置为选定的正交视图，并且视口的视图菜单将相"
"应更新。"

msgid ""
"If the *Perspective* view is enabled on the viewport (can be seen on the "
"viewport's View menu, not the View menu on the main toolbar), holding down "
"the right mouse button on the viewport or pressing :kbd:`Shift + F` switches "
"to \"free-look\" mode. In this mode you can move the mouse to look around, "
"use the :kbd:`W` :kbd:`A` :kbd:`S` :kbd:`D` keys to fly around the "
"view, :kbd:`E` to go up, and :kbd:`Q` to go down. To disable this mode, "
"release the right mouse button or press :kbd:`Shift + F` again."
msgstr ""
"如果视口中启用了*透视*视图（可在视口的视图菜单中看到，而非主工具栏的视图菜"
"单），在视口中按住鼠标右键或按下 :kbd:`Shift + F` 可切换到\"自由视角\"模式。"
"在此模式下，你可以通过移动鼠标来环视四周，使"
"用 :kbd:`W` :kbd:`A` :kbd:`S` :kbd:`D` 键在视图中飞行，按 :kbd:`E` 上升，"
"按 :kbd:`Q` 下降。要退出此模式，松开鼠标右键或再次按下 :kbd:`Shift + F`。"

msgid ""
"In the free-look mode, you can temporarily increase the flying speed "
"using :kbd:`Shift` or decrease it using :kbd:`Alt`. To change and keep the "
"speed modifier use :kbd:`mouse wheel up` or :kbd:`mouse wheel down`, to "
"increase or decrease it, respectively."
msgstr ""
"在自由视角模式下，你可以使用 :kbd:`Shift` 临时提高飞行速度，或使"
"用 :kbd:`Alt` 降低速度。要更改并保持速度调节器，可以使用 :kbd:`鼠标滚轮向上` "
"或 :kbd:`鼠标滚轮向下` 来分别增加或减少速度。"

msgid ""
"In orthogonal mode, holding the right mouse button will pan the view "
"instead. Use :kbd:`Keypad 5` to toggle between perspective and orthogonal "
"view."
msgstr ""
"在正交模式下，按住鼠标右键会平移视图。使用 :kbd:`小键盘 5` 在透视视图和正交视"
"图之间切换。"

msgid "Using Blender-style transform shortcuts"
msgstr "使用 Blender 风格的变换快捷键"

msgid ""
"Since Godot 4.2, you can enable Blender-style shortcuts for translating, "
"rotating and scaling nodes. In Blender, these shortcuts are:"
msgstr ""
"从 Godot 4.2 开始，可以启用 Blender 风格的快捷键来平移、旋转和缩放节点。在 "
"Blender 中，这些快捷键分别是："

msgid ":kbd:`G` for translating"
msgstr ":kbd:`G` 用于平移"

msgid ":kbd:`R` for rotating"
msgstr ":kbd:`R` 用于旋转"

msgid ":kbd:`S` for scaling"
msgstr ":kbd:`S` 用于缩放"

msgid ""
"After pressing a shortcut key while focusing on the 3D editor viewport, move "
"the mouse or enter a number to move the selected node(s) by the specified "
"amount in 3D units. You can constrain movement to a specific axis by "
"specifying the axis as a letter, then the distance (if entering a value with "
"the keyboard)."
msgstr ""
"在聚焦于 3D 编辑器视口的同时，按下快捷键，可以移动鼠标或输入数字以将选定节点"
"移动指定的 3D 单位量。你可以通过用字母指定特定的轴，然后指定距离（如果使用键"
"盘来输入值），以此来将选中节点的平移限制到特定的轴上。"

msgid ""
"For instance, to move the selection upwards by 2.5 units, enter the "
"following sequence in order (Y+ is upwards in Godot):"
msgstr ""
"例如，要将选中物体向上移动 2.5 个单位，请按顺序输入以下序列（Y+ 在 Godot 中是"
"向上，也就是延 Y 轴正方向）："

msgid ":kbd:`G`-:kbd:`Y`-:kbd:`2`-:kbd:`.`-:kbd:`5`-:kbd:`Enter`"
msgstr ":kbd:`G`-:kbd:`Y`-:kbd:`2`-:kbd:`.`-:kbd:`5`-:kbd:`Enter`"

msgid ""
"To use Blender-style transform shortcuts in Godot, go to the Editor "
"Settings' **Shortcuts** tab, then in the Spatial Editor section:"
msgstr ""
"如果要在 Godot 中使用 Blender 风格的变换快捷键，请转到编辑器设置的 **快捷键"
"** 选项卡，然后在 Spatial Editor 部分中进行以下调整："

msgid "Bind **Begin Translate Transformation** to :kbd:`G`."
msgstr "将\\ **开始平移变换**\\ 绑定到 :kbd:`G`。"

msgid "Bind **Begin Rotate Transformation** to :kbd:`R`."
msgstr "将\\ **开始旋转变换**\\ 绑定到 :kbd:`R`。"

msgid "Bind **Begin Scale Transformation** to :kbd:`S`."
msgstr "将\\ **开始缩放变换**\\ 绑定到 :kbd:`S`。"

msgid ""
"Finally, unbind **Scale Mode** so that its shortcut won't conflict with "
"**Begin Rotate Transformation**."
msgstr ""
"最后，取消 **缩放模式** 快捷键的绑定，使其快捷键不会与 **开始旋转变换** 冲"
"突。"

msgid ""
"More shortcuts can be found on "
"the :ref:`doc_default_key_mapping_shortcuts_spatial_editor` page."
msgstr ""
"更多快捷键可以在 :ref:`doc_default_key_mapping_shortcuts_spatial_editor` 页面"
"找到。"

msgid "Node3D node"
msgstr "Node3D 节点"

msgid ""
":ref:`Node2D <class_Node2D>` is the base node for 2D. :ref:`Control "
"<class_Control>` is the base node for everything GUI. Following this "
"reasoning, the 3D engine uses the :ref:`Node3D <class_Node3D>` node for "
"everything 3D."
msgstr ""
":ref:`Node2D <class_Node2D>` 是 2D 的基础节点。\\ :ref:`Control "
"<class_Control>` 是所有 GUI 的基础节点。同理，3D 引擎中的所有 3D 物体都使"
"用 :ref:`Node3D <class_Node3D>` \\ 节点。"

msgid ""
"Node3Ds have a local transform, which is relative to the parent node (as "
"long as the parent node is also of **or inherits from** the type Node3D). "
"This transform can be accessed as a 3×4 :ref:`Transform3D "
"<class_Transform3D>`, or as 3 :ref:`Vector3 <class_Vector3>` members "
"representing location, Euler rotation (X, Y and Z angles) and scale."
msgstr ""
"Node3D 有一个局部变换，它是相对于父节点而言的（只要父节点也是\\ **或继承自** "
"Node3D 类型）。这个变换可以以 3×4 的 :ref:`Transform3D <class_Transform3D>` "
"形式访问，也可以以 3 个 :ref:`Vector3 <class_Vector3>` 成员的形式访问，分别代"
"表位置、欧拉旋转（X、Y、Z 角度）和缩放。"

msgid "3D content"
msgstr "3D 内容"

msgid ""
"Unlike 2D, where loading image content and drawing is straightforward, 3D is "
"a little more difficult. The content needs to be created with special 3D "
"tools (also called Digital Content Creation tools, or DCCs) and exported to "
"an exchange file format to be imported in Godot. This is required since 3D "
"formats are not as standardized as images."
msgstr ""
"与 2D 中加载图像内容和绘图都非常直观相比，3D 就有所不同，会稍微难一些。3D 内"
"容需要使用特殊的 3D 工具（通常称为数字内容创建工具，Digital Content Creation "
"工具，简称 DCC）来创建，然后导出到某种交换文件格式，才能被 Godot 导入。这是因"
"为 3D 格式的标准化不及图像。"

msgid "Manually authored models (using 3D modeling software)"
msgstr "手动制作的模型（使用 3D 建模软件）"

msgid ""
"It is possible to import 3D models in Godot created in external tools. "
"Depending on the format, you can import entire scenes (exactly as they look "
"in the 3D modeling software), including animation, skeletal rigs, blend "
"shapes, or as simple resources."
msgstr ""
"在Godot中可以导入外部工具创建的3D模型。具体取决于格式，你可以导入整个场景（与"
"在3D建模软件中呈现的完全一致），包括其中的动画、骨骼绑定、混合形状，也可以简"
"单地作为资源使用。"

msgid "See :ref:`doc_importing_3d_scenes` for more on importing."
msgstr "关于导入的更多信息见 :ref:`doc_importing_3d_scenes`\\ 。"

msgid "Generated geometry"
msgstr "生成的几何体"

msgid ""
"It is possible to create custom geometry by using the :ref:`ArrayMesh "
"<class_ArrayMesh>` resource directly. Simply create your arrays and use "
"the :ref:`ArrayMesh.add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` function. A helper class "
"is also available, :ref:`SurfaceTool <class_SurfaceTool>`, which provides a "
"more straightforward API and helpers for indexing, generating normals, "
"tangents, etc."
msgstr ""
"可以直接使用 :ref:`ArrayMesh <class_ArrayMesh>` 资源创建自定义几何体。只需创"
"建数组并使用 :ref:`ArrayMesh.add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` 函数即可。也可以使用辅助"
"类 :ref:`SurfaceTool <class_SurfaceTool>`，它提供了更直接的 API 和辅助工具，"
"用于索引、生成法线、切线等。"

msgid ""
"In any case, this method is meant for generating static geometry (models "
"that will not be updated often), as creating vertex arrays and submitting "
"them to the 3D API has a significant performance cost."
msgstr ""
"在任何情况下，这种方法都是为了用于生成静态几何体(不会经常更新的模型)，因为创"
"建顶点数组并将它们提交给3D API具有显著的性能开销。"

msgid ""
"To learn about prototyping inside Godot or using external tools, "
"see :ref:`doc_csg_tools`."
msgstr ""
"要了解在 Godot 中进行原型设计或使用外部工具，请参阅 :ref:`doc_csg_tools`。"

msgid "Immediate geometry"
msgstr "即时几何体"

msgid ""
"If, instead, you need to generate simple geometry that will be updated "
"often, Godot provides a special :ref:`ImmediateMesh <class_ImmediateMesh>` "
"resource that can be used in a :ref:`MeshInstance3D <class_MeshInstance3D>` "
"node. This provides an OpenGL 1.x-style immediate-mode API to create points, "
"lines, triangles, etc."
msgstr ""
"相反，如果你需要生成经常更新的简单几何体，Godot 提供了一种特殊"
"的 :ref:`ImmediateMesh <class_ImmediateMesh>` 资源，它可以"
"在 :ref:`MeshInstance3D <class_MeshInstance3D>` 节点中使用。这提供了 OpenGL "
"1.x 风格的即时模式 API 来创建点、线、三角形等。"

msgid "2D in 3D"
msgstr "3D 中的 2D"

msgid ""
"While Godot packs a powerful 2D engine, many types of games use 2D in a 3D "
"environment. By using a fixed camera (either orthogonal or perspective) that "
"does not rotate, nodes such as :ref:`Sprite3D <class_Sprite3D>` "
"and :ref:`AnimatedSprite3D <class_AnimatedSprite3D>` can be used to create "
"2D games that take advantage of mixing with 3D backgrounds, more realistic "
"parallax, lighting/shadow effects, etc."
msgstr ""
"虽然Godot包装了强大的2D引擎，但许多类型的游戏会使用在3D环境中的2D效果。 通过"
"使用不旋转的固定相机(正交或透视)，可以使用诸如 :ref:`Sprite3D "
"<class_Sprite3D>` 和 :ref:`AnimatedSprite3D <class_AnimatedSprite3D>` 等节点"
"来创建混合了具有3D背景，更逼真的视差，灯光/阴影效果等的2D游戏。"

msgid ""
"The disadvantage is, of course, that added complexity and reduced "
"performance in comparison to plain 2D, as well as the lack of reference of "
"working in pixels."
msgstr ""
"当然，缺点在于与普通2D相比增加了复杂性并降低了与普通2D 相比的性能，以及缺乏进"
"行像素工作时的参考。"

msgid "Environment"
msgstr "环境"

msgid ""
"Besides editing a scene, it is often common to edit the environment. Godot "
"provides a :ref:`WorldEnvironment <class_WorldEnvironment>` node that allows "
"changing the background color, mode (as in, put a skybox), and applying "
"several types of built-in post-processing effects. Environments can also be "
"overridden in the Camera."
msgstr ""
"除了编辑场景之外，编辑环境通常也很常见。 Godot提供了一"
"个 :ref:`WorldEnvironment <class_WorldEnvironment>` 节点，该节点允许更改背景"
"颜色，模式(就像放一个天空盒时那样)以及应用多种内置处理后效果。 环境可以在"
"Camera中被覆写。"

msgid "Preview environment and light"
msgstr "预览环境和灯光"

msgid ""
"By default, any 3D scene that doesn't have a :ref:`WorldEnvironment "
"<class_WorldEnvironment>` node, or a :ref:`DirectionalLight3D "
"<class_DirectionalLight3D>`, will have a preview turned on for what it's "
"missing to light the scene."
msgstr ""
"默认情况下，如果 3D 场景中没有 :ref:`WorldEnvironment "
"<class_WorldEnvironment>` 或者 :ref:`DirectionalLight3D "
"<class_DirectionalLight3D>` 节点，就会打开对应的预览项，为该场景布光。"

msgid ""
"The preview light and environment will only be visible in the scene while in "
"the editor. If you run the scene or export the project they will not affect "
"the scene."
msgstr ""
"预览灯光和预览环境只会在编辑器的场景中显示。运行场景或导出后的项目时不会对场"
"景产生影响。"

msgid ""
"The preview light and environment can be turned on or off from the top menu "
"by clicking on their respective icon."
msgstr ""
"预览灯光和预览环境可以通过点击顶部菜单中的对应图标来开关。图标右侧画着三个点"
"的下拉菜单中可以调整预览灯光和预览环境的属性。"

msgid ""
"The three dots dropdown menu next to those icons can be used to adjust the "
"properties of the preview environment and light if they are enabled."
msgstr ""
"预览灯光和预览环境可以通过点击顶部菜单中的对应图标来开关。图标右侧画着三个点"
"的下拉菜单中可以调整预览灯光和预览环境的属性。"

msgid ""
"The same preview sun and environment is used for every scene in the same "
"project, So only make adjustments that would apply to all of the scenes you "
"will need a preview light and environment for."
msgstr ""
"同一个项目中，不同的场景使用的是相同的预览太阳和预览环境。因此，在这里作出的"
"调整应该适合所有需要预览灯光和预览环境的场景。"

msgid "Cameras"
msgstr "相机"

msgid ""
"No matter how many objects are placed in the 3D space, nothing will be "
"displayed unless a :ref:`Camera3D <class_Camera3D>` is also added to the "
"scene. Cameras can work in either orthogonal or perspective projections:"
msgstr ""
"无论在 3D 空间中放置多少物体，除非在场景中添加了 :ref:`Camera3D "
"<class_Camera3D>`\\ ，否则不会显示任何内容。相机可以在正交或透视投影中工作："

msgid ""
"Cameras are associated with (and only display to) a parent or grandparent "
"viewport. Since the root of the scene tree is a viewport, cameras will "
"display on it by default, but if sub-viewports (either as render target or "
"picture-in-picture) are desired, they need their own children cameras to "
"display."
msgstr ""
"摄像机与父视口或其祖先视口相关联，且仅显示到他们上面。 由于场景树的根是一个视"
"口，默认情况下会在其上显示摄像机，但如果需要子视口(作为渲染目标或画中画)，则"
"需要自己的子摄像头才能显示。"

msgid ""
"When dealing with multiple cameras, the following rules are enforced for "
"each viewport:"
msgstr "处理多台摄像机时，每个视口都遵循以下规则:"

msgid ""
"If no cameras are present in the scene tree, the first one that enters it "
"will become the active camera. Further cameras entering the scene will be "
"ignored (unless they are set as *current*)."
msgstr ""
"如果场景树中没有摄像机，则第一个进入的摄像机将成为活跃摄像机。进入场景的其他"
"摄像机将被忽略（除非它们被设置为 *current*\\ ）。"

msgid ""
"If a camera has the \"*current*\" property set, it will be used regardless "
"of any other camera in the scene. If the property is set, it will become "
"active, replacing the previous camera."
msgstr ""
"如果相机设置了“\\ *current*\\ ”属性，则无论场景中是否有其他相机，都会使用它。"
"如果该属性已设置，它将变为活动状态，取代之前的摄像机。"

msgid ""
"If an active camera leaves the scene tree, the first camera in tree-order "
"will take its place."
msgstr "如果活动摄像机离开了场景树，则按树形顺序排列的第一台摄像机将取代它。"

msgid "Lights"
msgstr "灯光"

msgid ""
"The background environment emits some ambient light which appears on "
"surfaces. Still, without any light sources placed in the scene, the scene "
"will appear quite dark unless the background environment is very bright."
msgstr ""
"背景环境发出一些出现在表面上的环境光。然而，如果场景中没有任何光源，除非背景"
"环境非常明亮，否则场景会显得很暗。"

msgid ""
"Most outdoor scenes have a directional light (the sun or moon), while indoor "
"scenes typically have several positional lights (lamps, torches, …). "
"See :ref:`doc_lights_and_shadows` for more information on setting up lights "
"in Godot."
msgstr ""
"大多数室外场景都有平行光（太阳或月亮），而室内场景通常有多个位置光（灯、火把"
"等）。有关在 Godot 中设置灯光的更多信息，请参"
"阅 :ref:`doc_lights_and_shadows`。"
