#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Import configuration"
msgstr "导入配置"

msgid ""
"Godot provides several ways to customize the imported data, such as the "
"import dock, the advanced import setting dialog, and inherited scenes. This "
"can be used to make further changes to the imported scene, such as adjusting "
"meshes, adding physics information, and adding new nodes. You can also write "
"a script that runs code at the end of the import process to perform "
"arbitrary customization."
msgstr ""
"Godot提供了多种自定义导入数据的方法，比如导入停靠面板、高级导入设置对话框和继"
"承场景。这可以用来对导入的场景进行进一步的更改，比如调整网格、添加物理信息和"
"添加新节点。你还可以编写一个脚本，在导入过程结束时运行代码，以执行任意的自定"
"义操作。"

msgid ""
"Note that, when applicable, modifying the original data should be preferred "
"to configuring the scene after import. This helps minimize the differences "
"between the 3D modeling application and the imported scene. See "
"the :ref:`doc_importing_3d_scenes_model_export_considerations` "
"and :ref:`doc_importing_3d_scenes_node_type_customization` articles for more "
"information."
msgstr ""
"请尽可能在导入前修改初始数据，而不是导入后再配置场景。这有助于最大程度降低场"
"景在 3D 建模软件中与实际导入场景之间的差异。可参"
"考 :ref:`doc_importing_3d_scenes_model_export_considerations` "
"及 :ref:`doc_importing_3d_scenes_node_type_customization` 来获取更多信息。"

msgid "Import workflows"
msgstr "导入工作流程"

msgid ""
"Since Godot can only save its own scene format (``.tscn``/``.scn``), Godot "
"cannot save over the original 3D scene file (which uses a different format). "
"This is also a safer approach as it avoids making accidental changes to the "
"source file."
msgstr ""
"由于 Godot 只能保存自己的场景格式（\\ ``.tscn``/``.scn``\\ ），Godot 无法保存"
"原始 3D 场景文件（使用不同的格式）。由于可以避免对源文件进行意外更改，这也是"
"一种更安全的做法。"

msgid ""
"To allow customizing the scene and its materials, Godot's scene importer "
"allows for different workflows regarding how data is imported."
msgstr ""
"为了允许自定义场景及其材质，Godot 的场景导入器允许不同的工作流程，视数据的导"
"入方式而定。"

msgid "Import dock after selecting a 3D scene in the FileSystem dock"
msgstr "在文件系统面板中选择 3D 场景后的导入面板"

msgid ""
"This import process is customizable using 3 separate interfaces, depending "
"on your needs:"
msgstr "这个导入过程可以通过3个不同的界面进行自定义，具体取决于你的需求："

msgid ""
"The **Import** dock, after selecting the 3D scene by clicking it once in the "
"FileSystem dock."
msgstr ""
"在“文件系统”面板中单击一次 3D 场景后，可以在\\ **导入**\\ 面板进行操作。"

msgid ""
":ref:`Import hints <doc_importing_3d_scenes_node_type_customization>`, which "
"are special suffixes added to object names in the 3D modeling software. This "
"allows you to customize per-object options in the 3D modeling software."
msgstr ""
":ref:`导入提示 <doc_importing_3d_scenes_node_type_customization>`\\ 是添加到 "
"3D 建模软件中的对象名称的特殊后缀，它可以允许你在 3D 建模软件中自定义每个对象"
"的选项。"

msgid ""
"For basic customization, using the Import dock suffices. However, for more "
"complex operations such as defining material overrides on a per-material "
"basis, you'll need to use the Advanced Import Settings dialog, import hints, "
"or possibly both."
msgstr ""
"对于基本自定义，使用导入面板的配置就足够了。但是对于更复杂的操作（例如基于每"
"种材质定义材质覆盖），你需要使用“高级导入设置”对话框或导入提示，亦或者同时使"
"用两者。"

msgid "Using the Import dock"
msgstr "使用导入面板"

msgid ""
"The following options can be adjusted in the Import dock after selecting a "
"3D scene in the FileSystem dock:"
msgstr "在文件系统面板选中一个 3D 场景之后，可以在导入面板中调整以下选项："

msgid ""
"**Root Type:** The node type to use as a root node. Using node types that "
"inherit from Node3D is recommended. Otherwise, you'll lose the ability to "
"position the node directly in the 3D editor."
msgstr ""
"**根类型：** 被用作为根节点的节点类型。建议使用一个继承自 Node3D 的节点。否则"
"你可能会无法直接在 3D 编辑器里面设置节点的位置。"

msgid ""
"**Root Name:** The name of the root node in the imported scene. This is "
"generally not noticeable when instancing the scene in the editor (or drag-"
"and-dropping from the FileSystem dock), as the root node is renamed to match "
"the filename in this case."
msgstr ""
"**根名称：** （Root Name）导入场景中根节点的名称。在编辑器中实例化场景（或从"
"文件系统面板拖放）时，这通常不太明显，因为在这种情况下，根节点会被重命名以匹"
"配文件名。"

msgid ""
"**Apply Root Scale:** If enabled, **Root Scale** will be *applied* on the "
"meshes and animations directly, while keeping the root node's scale to the "
"default `(1, 1, 1)`. This means that if you add a child node later on within "
"the imported scene, it won't be scaled. If disabled, **Root Scale** will "
"multiply the scale of the root node instead."
msgstr ""
"**应用根缩放：** （Apply Root Scale）如果启用， **根缩放** 将直接 *应用* 于网"
"格和动画，同时保持根节点的缩放为默认值 `(1, 1, 1)` 。这意味着如果你稍后在导入"
"的场景中添加一个子节点，它不会被缩放。如果禁用， **根缩放** 将乘以根节点的缩"
"放。"

msgid "**Meshes**"
msgstr "**网格**"

msgid ""
"**Ensure Tangents:** If checked, generate vertex tangents using `Mikktspace "
"<http://www.mikktspace.com/>`__ if the input meshes don't have tangent data. "
"When possible, it's recommended to let the 3D modeling software generate "
"tangents on export instead on relying on this option. Tangents are required "
"for correct display of normal and height maps, along with any material/"
"shader features that require tangents. If you don't need material features "
"that require tangents, disabling this can reduce output file size and speed "
"up importing if the source 3D file doesn't contain tangents."
msgstr ""
"**确保切线：** （Ensure Tangents）如果勾选，在导入的网格没有提供切线数据时，"
"将会使用 `Mikktspace <http://www.mikktspace.com/>`__ 生成顶点的切线。但更推荐"
"使用 3D 建模软件在导出的时候生成切线图像，而不是依赖这个选项。正确显示法线和"
"高度贴图以及需要切线的任何材质/着色器功能都需要切线。如果你不使用需要切线的材"
"质特性，关闭这个选项可以减少导出文件的大小，并且能更快地导入没有存储切线的 "
"3D 文件。"

msgid ""
"**Generate LODs:** If checked, generates lower detail variants of the mesh "
"which will be displayed in the distance to improve rendering performance. "
"Not all meshes benefit from LOD, especially if they are never rendered from "
"far away. Disabling this can reduce output file size and speed up importing. "
"See :ref:`doc_mesh_lod` for more information."
msgstr ""
"**生成 LOD：** 如果勾选，则会生成网格的低细节的变体，这些变体将显示在远处以提"
"高渲染性能。并非所有网格体都会受益于 LOD，特别是如果它们从未从远处渲染。禁用"
"此功能可以减少输出文件大小并加快导入速度。请参阅 :ref:`doc_mesh_lod` 了解更多"
"信息。"

msgid ""
"**Create Shadow Meshes:** If checked, enables the generation of shadow "
"meshes on import. This optimizes shadow rendering without reducing quality "
"by welding vertices together when possible. This in turn reduces the memory "
"bandwidth required to render shadows. Shadow mesh generation currently "
"doesn't support using a lower detail level than the source mesh (but shadow "
"rendering will make use of LODs when relevant)."
msgstr ""
"**创建阴影网格：** 如果勾选，则可以在导入时生成阴影网格。这可以通过在可能的情"
"况下将顶点接在一起来优化阴影渲染，而不会降低质量。这反过来又减少了渲染阴影所"
"需的内存带宽。阴影网格生成当前不支持使用比源网格更低的细节级别（但阴影渲染将"
"在相关时使用 LOD）。"

msgid ""
"**Light Baking:** Configures the meshes' :ref:`global illumination mode "
"<class_GeometryInstance3D_property_gi_mode>` in the 3D scene. If set to "
"**Static Lightmaps**, sets the meshes' GI mode to **Static** and generates "
"UV2 on import for :ref:`lightmap baking <doc_using_lightmap_gi>`."
msgstr ""
"**Light Baking：**\\ 光照烘焙，在 3D 场景中配置网格的\\ :ref:`全局光照模式 "
"<class_GeometryInstance3D_property_gi_mode>`\\ 。如果设置为 **Static "
"Lightmaps**\\ （静态光照贴图），则将网格的 GI 模式设置为 **Static**\\ （静"
"态）并在导入时生成 UV2，用于\\ :ref:`烘焙光照贴图 <doc_using_lightmap_gi>`。"

msgid ""
"**Lightmap Texel Size:** Only visible if **Light Baking** is set to **Static "
"Lightmaps**. Controls the size of each texel on the baked lightmap. A "
"smaller value results in more precise lightmaps, at the cost of larger "
"lightmap sizes and longer bake times."
msgstr ""
"**光照贴图纹素大小：** （Lightmap Texel Size）仅当 **光照烘焙** 设置为 "
"**Static Lightmaps** 时可见。用来控制烘焙光照贴图上每个纹素的大小。较小的值会"
"产生更精确的光照贴图，但代价是更大的光照贴图大小和更长的烘焙时间。"

msgid "**Skins**"
msgstr "**蒙皮**"

msgid ""
"**Use Named Skins:** If checked, use named :ref:`Skins <class_Skin>` for "
"animation. The :ref:`class_MeshInstance3D` node contains 3 properties of "
"relevance here: a skeleton NodePath pointing to the Skeleton3D node (usually "
"``..``), a mesh, and a skin:"
msgstr ""
"**使用具名蒙皮：** 如果勾选，则为动画使用命名的 :ref:`Skins "
"<class_Skin>`。:ref:`class_MeshInstance3D` 节点包含 3 个相关属性：指向 "
"Skeleton3D 节点的骨架 NodePath（通常为 ``..`` ）、一个网格和一个蒙皮："

msgid ""
"The :ref:`class_Skeleton3D` node contains a list of bones with names, their "
"pose and rest, a name and a parent bone."
msgstr ""
":ref:`class_Skeleton3D` 节点包含一个骨骼列表，其中包括骨骼的名称、它们的姿势"
"和休息状态、一个名称和一个父骨骼。"

msgid ""
"The mesh is all of the raw vertex data needed to display a mesh. In terms of "
"the mesh, it knows how vertices are weight-painted and uses some internal "
"numbering often imported from 3D modeling software."
msgstr ""
"网格是显示网格所需的所有原始顶点数据。就网格而言，它知道如何对顶点进行加权绘"
"制，并使用一些通常从 3D 建模软件导入的内部编号。"

msgid ""
"The skin contains the information necessary to bind this mesh onto this "
"Skeleton3D. For every one of the internal bone IDs chosen by the 3D modeling "
"software, it contains two things. Firstly, a Matrix known as the Bind Pose "
"Matrix, Inverse Bind Matrix, or IBM for short. Secondly, the Skin contains "
"each bone's name (if **Use Named Skins** is enabled), or the bone's index "
"within the Skeleton3D list (if **Use Named Skins** is disabled)."
msgstr ""
"蒙皮包含将此网格物体绑定到此 Skeleton3D 上所需的信息。对于 3D 建模软件选择的"
"每一个内部骨骼 ID，它都包含两个内容。首先，一个矩阵，称为绑定姿势矩阵（Bind "
"Pose Matrix）、逆绑定矩阵（ Inverse Bind Matrix），或者简称 IBM。其次，蒙皮包"
"含每个骨骼的名称（如果启用 **使用具名蒙皮** 选项），或者骨骼在 Skeleton3D 列"
"表中的索引（如果禁用了 **使用具名蒙皮** 选项）。"

msgid ""
"Together, this information is enough to tell Godot how to use the bone poses "
"in the Skeleton3D node to render the mesh from each MeshInstance3D. Note "
"that each MeshInstance3D may share binds, as is common in models exported "
"from Blender, or each MeshInstance3D may use a separate Skin object, as is "
"common in models exported from other tools such as Maya."
msgstr ""
"这些信息加在一起，足以告诉 Godot 如何使用骨骼 3D 节点中的骨骼姿势来渲染每个 "
"MeshInstance3D 中的网格。请注意，每个 MeshInstance3D 都可以共享绑定，这在从 "
"Blender 导出的模型中很常见；或者每个 MeshInstance3D 都可以使用单独的蒙皮对"
"象，这在从其他工具（如 Maya）导出的模型中很常见。"

msgid "**Animation**"
msgstr "**动画**"

msgid "**Import:** If checked, import animations from the 3D scene."
msgstr "**导入：** 如果选中，则从 3D 场景导入动画。"

msgid ""
"**FPS:** The number of frames per second to use for baking animation curves "
"to a series of points with linear interpolation. It's recommended to "
"configure this value to match the value you're using as a baseline in your "
"3D modeling software. Higher values result in more precise animation with "
"fast movement changes, at the cost of higher file sizes and memory usage. "
"Thanks to interpolation, there is usually not much benefit in going above 30 "
"FPS (as the animation will still appear smooth at higher rendering "
"framerates)."
msgstr ""
"**FPS：** 用线性插值将动画曲线烘焙为一系列点时使用的每秒帧数。建议将此值设置"
"为与 3D 建模软件中的基准值相匹配。数值越大，动画越精确，动作变化越快，但文件"
"大小和内存使用量也越大。由于采用了插值技术，超过 30 FPS 通常不会有太大的好处"
"（因为动画在更高的渲染帧频下仍会显得流畅）。"

msgid ""
"**Trimming:** Trim the beginning and end of animations if there are no "
"keyframe changes. This can reduce output file size and memory usage with "
"certain 3D scenes, depending on the contents of their animation tracks."
msgstr ""
"**修剪：** 如果没有关键帧变化，则修剪动画的开头和结尾。这可以减少某些 3D 场景"
"的输出文件大小和内存使用量，具体取决于其动画轨道的内容。"

msgid ""
"**Remove Immutable Tracks:** Remove animation tracks that only contain "
"default values. This can reduce output file size and memory usage with "
"certain 3D scenes, depending on the contents of their animation tracks."
msgstr ""
"**移除不可修改的轨道：** 移除只包含默认值的动画轨道。这可以减少某些 3D 场景的"
"输出文件大小和内存使用量，具体取决于其动画轨道的内容。"

msgid "**Import Script**"
msgstr "**导入脚本**"

msgid ""
"**Path:** Path to an import script, which can run code *after* the import "
"process has completed for custom processing. "
"See :ref:`doc_importing_3d_scenes_import_script` for more information."
msgstr ""
"**Path：**\\ 路径，导入脚本的路径，该脚本可在导入过程完成后运行代码，以进行自"
"定义处理。更多信息请参阅 :ref:`doc_importing_3d_scenes_import_script`。"

msgid "**glTF**"
msgstr "**glTF**"

msgid ""
"**Embedded Texture Handling:** Controls how textures embedded within glTF "
"scenes should be handled. **Discard All Textures** will not import any "
"textures, which is useful if you wish to manually set up materials in Godot "
"instead. **Extract Textures** extracts textures to external images, "
"resulting in smaller file sizes and more control over import options. "
"**Embed as Basis Universal** and **Embed as Uncompressed** keeps the "
"textures embedded in the imported scene, with and without VRAM compression "
"respectively."
msgstr ""
"**嵌入图像处理：** 控制如何处理嵌入 glTF 场景中的纹理。 **Discard All "
"Textures** （忽略所有纹理）不会导入任何纹理，如果你想在 Godot 中手动设置材"
"质，该选项将非常有用。 **Extract Textures** （提取纹理）将纹理提取到外部图像"
"中，从而减小文件大小，并对导入选项进行更多控制。 **Embed as Basis "
"Universal** （嵌入为基础通用）和 **Embed as Uncompressed** （嵌入为未压缩）分"
"别将纹理嵌入已导入的场景中，并对 VRAM 进行压缩和不压缩。"

msgid "**FBX**"
msgstr "**FBX**"

msgid ""
"**Allow Geometry Helper Nodes** enables or disables geometry helper nodes"
msgstr "**Allow Geometry Helper Nodes** 启用或禁用几何辅助节点"

msgid ""
"**Embedded Texture Handling:** Controls how textures embedded within fbx "
"scenes should be handled. **Discard All Textures** will not import any "
"textures, which is useful if you wish to manually set up materials in Godot "
"instead. **Extract Textures** extracts textures to external images, "
"resulting in smaller file sizes and more control over import options. "
"**Embed as Basis Universal** and **Embed as Uncompressed** keeps the "
"textures embedded in the imported scene, with and without VRAM compression "
"respectively."
msgstr ""
"**嵌入图像处理：** 控制如何处理嵌入 glTF 场景中的纹理。 **Discard All "
"Textures** （忽略所有纹理）不会导入任何纹理，如果你想在 Godot 中手动设置材"
"质，该选项将非常有用。 **Extract Textures** （提取纹理）将纹理提取到外部图像"
"中，从而减小文件大小，并对导入选项进行更多控制。 **Embed as Basis "
"Universal** （嵌入为基础通用）和 **Embed as Uncompressed** （嵌入为未压缩）分"
"别将纹理嵌入已导入的场景中，并对 VRAM 进行压缩和不压缩。"

msgid "Using import scripts for automation"
msgstr "使用导入脚本实现自动化"

msgid ""
"A special script to process the whole scene after import can be provided. "
"This is great for post-processing, changing materials, doing funny stuff "
"with the geometry, and more."
msgstr ""
"可以提供一个特殊脚本来处理导入后的整个场景。这非常适合后期处理、更换材质和用"
"几何图形做有趣的事情等等。"

msgid ""
"Create a script that is not attached to any node by right-clicking in the "
"FileSystem dock and choosing **New > Script…**. In the script editor, write "
"the following:"
msgstr ""
"通过右键单击文件系统面板并选择 **新建脚本…** ，创建一个不附加到任何节点的脚"
"本。在脚本编辑器中，编写以下内容："

msgid ""
"The ``_post_import(scene: Node)`` function takes the imported scene as "
"argument (the parameter is actually the root node of the scene). The scene "
"that will finally be used **must** be returned (even if the scene can be "
"entirely different)."
msgstr ""
"``_post_import(scene: Node)`` 函数以导入的场景为参数（参数实际上是场景的根节"
"点）。最终使用的场景\\ **必须**\\ 被返回，即使该场景可以完全不同。"

msgid ""
"To use your script, locate the script in the import tab's \"Path\" option "
"under the \"Import Script\" category."
msgstr ""
"要使用你的脚本，请在导入选项卡的“导入脚本”类别下的“路径”选项中找到该脚本。"

msgid "Using animation libraries"
msgstr "使用动画库"

msgid ""
"As of Godot 4.0, you can choose to import **only** animations from a glTF "
"file and nothing else. This is used in some asset pipelines to distribute "
"animations separately from models. For example, this allows you to use one "
"set of animations for several characters, without having to duplicate "
"animation data in every character."
msgstr ""
"从 Godot 4.0 开始，可以选择从 glTF 文件导入 **仅** 动画，而不导入其他信息。这"
"在某些资产管线中用于将动画与模型分开分发。比如，给多个角色使用一套动画，而每"
"个角色不必有重复的动画数据。"

msgid ""
"To do so, select the glTF file in the FileSystem dock, then change the "
"import mode to Animation Library in the Import dock:"
msgstr ""
"那么，请在文件系统栏目中选择 glTF 文件，然后在导入栏中更改导入模式为动画库："

msgid "Changing the import type to Animation Library in the Import dock"
msgstr "在导入栏目中将导入类型更改为动画库"

msgid ""
"Click **Reimport** and restart the editor when prompted. After restarting, "
"the glTF file will be imported as an :ref:`class_AnimationLibrary` instead "
"of a :ref:`class_PackedScene`. This animation library can then be referenced "
"in an :ref:`class_AnimationPlayer` node."
msgstr ""
"单击 **重新导入** ，并根据提示重启编辑器。重启后， glTF 文件将作"
"为 :ref:`class_AnimationLibrary` 导入，而不是 :ref:`class_PackedScene` 。然"
"后，可以使用 :ref:`class_AnimationPlayer` 节点引用此动画库。"

msgid ""
"The import options that are visible after changing the import mode to "
"Animation Library act the same as when using the Scene import mode. "
"See :ref:`doc_importing_3d_scenes_using_the_import_dock` for more "
"information."
msgstr ""
"更改导入模式为动画库后，可见的导入选项与使用场景导入模式时相同。有关更多信"
"息，请参阅 :ref:`doc_importing_3d_scenes_using_the_import_dock` 。"

msgid "Filter script"
msgstr "过滤脚本"

msgid ""
"It is possible to specify a filter script in a special syntax to decide "
"which tracks from which animations should be kept."
msgstr "可以使用特殊语法指定过滤器脚本, 以决定应保留哪些动画的哪些轨道."

msgid ""
"The filter script is executed against each imported animation. The syntax "
"consists of two types of statements, the first for choosing which animations "
"to filter, and the second for filtering individual tracks within the matched "
"animation. All name patterns are performed using a case-insensitive "
"expression match, with support for ``?`` and ``*`` wildcards "
"(using :ref:`String.matchn() <class_String_method_matchn>` under the hood)."
msgstr ""
"过滤脚本对每个导入的动画执行。语法由两种类型的语句组成，第一种用于选择要过滤"
"的动画，第二种用于过滤匹配动画中的单个轨道。所有名称模式都使用不区分大小写的"
"表达式匹配，并支持 ``?`` 和 ``*`` 通配符（底层使用 :ref:`String.matchn() "
"<class_String_method_matchn>` ）。"

msgid ""
"Following the animation selection filter statement, we add track filtering "
"patterns to indicate which animation tracks should be kept or discarded. If "
"no track filter patterns are specified, then all tracks within the matched "
"animations will be discarded!"
msgstr ""
"在动画选择过滤器语句之后, 我们添加轨道过滤模式来指示保留或丢弃哪些动画轨道. "
"如果未指定轨道过滤器模式, 则匹配动画中的所有轨道都会被丢弃！"

msgid ""
"It's important to note that track filter statements are applied in order for "
"each track within the animation, this means that one line may include a "
"track, a later rule can still discard it. Similarly, a track excluded by an "
"early rule may then be re-included once again by a filter rule further down "
"in the filter script."
msgstr ""
"需要注意的是, 轨道过滤器表达式是按顺序作用于动画中的每条轨道, 这意味着, 一行"
"表达式可能包含某个轨道, 但后续的规则仍然可以忽略它. 同样, 一个被之前规则排除"
"的轨道, 可能被过滤器脚本后续的规则重新包含进来."

msgid ""
"In the above example, tracks like ``\"Skeleton:Leg_Control\"`` would be "
"discarded, while tracks such as ``\"Skeleton:Head\"`` or "
"``\"Skeleton:Arm_Left_Control\"`` would be retained."
msgstr ""
"在上面的示例中，像 ``\"Skeleton:Leg_Control\"`` 这样的轨道会被丢弃，而像 "
"``\"Skeleton:Head\"`` 或 ``\"Skeleton:Arm_Left_Control\"`` 这样的轨道会被保"
"留。"

msgid ""
"Any track filter lines that do not begin with a ``+`` or ``-`` are ignored."
msgstr "任何不是以 ``+`` 或 ``-`` 开头的轨道过滤器行将会被忽略."

msgid "Scene inheritance"
msgstr "场景继承"

msgid ""
"In many cases, it may be desired to make manual modifications to the "
"imported scene. By default, this is not possible because if the source 3D "
"asset changes, Godot will re-import the *whole* scene."
msgstr ""
"在许多情况下，可能需要对导入的场景进行手动修改。默认情况下，这是不可能的，因"
"为如果源 3D 资产发生变化，Godot 将重新导入整个场景。"

msgid ""
"However, it is possible to make local modifications by using *scene "
"inheritance*. If you try to open the imported scene using **Scene > Open "
"Scene…** or **Scene > Quick Open Scene…**, the following dialog will appear:"
msgstr ""
"然而，可以使用\\ *场景继承*\\ 来创建本地修改。如果你尝试使用\\ **场景 > 打开"
"场景...** 或\\ **场景 > 快速打开场景...** 来打开已导入的场景，以下对话框将会"
"出现："

msgid "Dialog when opening an imported 3D scene in the editor"
msgstr "在编辑器中打开导入的 3D 场景时的对话框"

msgid "In inherited scenes, the only limitations for modification are:"
msgstr "在继承场景中，修改的唯一限制是："

msgid ""
"Nodes from the base scene can't be removed, but additional nodes can be "
"added anywhere."
msgstr "无法删除基础场景中的节点，但可以在任何地方添加其他节点。"

msgid ""
"Subresources can't be edited. Instead, you need to save them externally as "
"described above."
msgstr "子资源无法被编辑（如上所述它们将保存在外部）。"

msgid "Other than that, everything is allowed."
msgstr "除此之外，一切都是允许的。"
