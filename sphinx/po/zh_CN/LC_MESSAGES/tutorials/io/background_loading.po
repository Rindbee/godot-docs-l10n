#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Background loading"
msgstr "后台加载"

msgid ""
"Commonly, games need to load resources asynchronously. When switching the "
"main scene of your game (e.g. going to a new level), you might want to show "
"a loading screen with some indication that progress is being made, or you "
"may want to load additional resources during gameplay."
msgstr ""
"通常，游戏需要异步加载资源。当切换游戏的主场景时（例如，进入新的关卡），你可"
"能想要显示一个加载画面，其中包含一些正在进行的指示，或者你可能希望在游戏过程"
"中加载其他资源。"

msgid ""
"The standard load method (:ref:`ResourceLoader.load "
"<class_ResourceLoader_method_load>` or GDScript's simpler :ref:`load "
"<class_@GDScript_method_load>`) blocks your thread, making your game appear "
"unresponsive while the resource is being loaded."
msgstr ""
"标准加载方法（\\ :ref:`ResourceLoader.load "
"<class_ResourceLoader_method_load>` 或 GDScript 中更简单的 :ref:`load "
"<class_@GDScript_method_load>`\\ ）会阻塞线程，让你的游戏在加载资源时显得无响"
"应。"

msgid ""
"One way around this is using ``ResourceLoader`` to load resources "
"asynchronously in background threads."
msgstr ""
"解决这个问题的一种方法是使用 ``ResourceLoader`` 在后台线程中异步加载资源。"

msgid "Using ResourceLoader"
msgstr "使用 ResourceLoader"

msgid ""
"Generally, you queue requests to load resources for a path using :ref:"
"`ResourceLoader.load_threaded_request "
"<class_ResourceLoader_method_load_threaded_request>`, which will then be "
"loaded in threads in the background."
msgstr ""
"通常使用 :ref:`ResourceLoader.load_threaded_request "
"<class_ResourceLoader_method_load_threaded_request>` 将资源加载请求加入队列，"
"其他线程会在后台进行加载。"

msgid ""
"You can check the status with :ref:`ResourceLoader.load_threaded_get_status "
"<class_ResourceLoader_method_load_threaded_get_status>`. Progress can be "
"obtained by passing an array variable via progress which will return a one "
"element array containing the percentage."
msgstr ""
"你可以使用 :ref:`ResourceLoader.load_threaded_get_status "
"<class_ResourceLoader_method_load_threaded_get_status>` 检查状态。给 "
"progress 传一个数组变量就可以获取进度，返回时该数组中包含一个元素，表示百分"
"比。"

msgid ""
"Finally, you retrieve loaded resources by calling :ref:`ResourceLoader."
"load_threaded_get <class_ResourceLoader_method_load_threaded_get>`."
msgstr ""
"最后调用 :ref:`ResourceLoader.load_threaded_get "
"<class_ResourceLoader_method_load_threaded_get>` 即可获取加载到的资源。"

msgid ""
"Once you call ``load_threaded_get()``, either the resource finished loading "
"in the background and will be returned instantly or the load will block at "
"this point like ``load()`` would. If you want to guarantee this does not "
"block, you either need to ensure there is enough time between requesting the "
"load and retrieving the resource or you need to check the status manually."
msgstr ""
"调用 ``load_threaded_get()`` 有两种结果：要么资源已经完成了后台加载，此时就会"
"立即返回；要么加载尚未完成，此时就会和 ``load()`` 一样发生阻塞。如果你希望保"
"证调用时不发生阻塞，就需要确保请求加载和获取资源之间留够时间，或者也可以先手"
"动进行状态检查。"

msgid "Example"
msgstr "示例"

msgid ""
"This example demonstrates how to load a scene in the background. We will "
"have a button spawn an enemy when pressed. The enemy will be ``Enemy.tscn`` "
"which we will load on ``_ready`` and instantiate when pressed. The path will "
"be ``\"Enemy.tscn\"`` which is located at ``res://Enemy.tscn``."
msgstr ""
"下面这个例子演示的是如何进行场景的后台加载。按下按钮后就会生成一个敌人。敌人"
"使用的是 ``_onready`` 时加载的 ``Enemy.tscn``\\ ，按下按钮时进行实例化。该场"
"景的路径为 ``\"Enemy.tscn\"``\\ ，位于 ``res://Enemy.tscn``\\ 。"

msgid ""
"First, we will start a request to load the resource and connect the button:"
msgstr "首先，我们将启动一个请求来加载资源并连接按钮："

msgid ""
"Now ``_on_button_pressed`` will be called when the button is pressed. This "
"method will be used to spawn an enemy."
msgstr ""
"现在按下按钮就会调用 ``_on_button_pressed``\\ 。该方法的作用是生成敌人。"
