#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Runtime file loading and saving"
msgstr "运行时文件加载和保存"

msgid ""
"See :ref:`doc_saving_games` for information on saving and loading game "
"progression."
msgstr ""
"更多关于游戏进度的保存和读取的信息见《\\ :ref:`doc_saving_games`\\ 》。"

msgid ""
"Sometimes, :ref:`exporting packs, patches, and mods <doc_exporting_pcks>` is "
"not ideal when you want players to be able to load user-generated content in "
"your project. It requires users to generate a PCK or ZIP file through the "
"Godot editor, which contains resources imported by Godot."
msgstr ""
"有时，当你希望玩家能够在项目中加载用户生成的内容时，\\ :ref:`导出包、补丁和模"
"组 <doc_exporting_pcks>`\\ 并不理想。它要求用户通过 Godot 编辑器生成 PCK 或 "
"ZIP 文件，其中包含由 Godot 导入的资源。"

msgid "Example use cases for runtime file loading and saving include:"
msgstr "运行时文件加载和保存的示例用例包括："

msgid "Loading texture packs designed for the game."
msgstr "加载为游戏设计的纹理包。"

msgid ""
"Loading user-provided audio tracks and playing them back in an in-game radio "
"station."
msgstr "加载用户提供的音轨，在游戏内的电台中播放。"

msgid "Using user-provided fonts for menus and HUD."
msgstr "为菜单和 HUD 使用用户提供的字体。"

msgid ""
"Saving/loading a file format that can contain multiple files but can still "
"easily be read by other applications (ZIP)."
msgstr ""
"保存/加载一种可以包含多个文件但仍可被其他应用程序轻松读取的文件格式（ZIP）。"

msgid ""
"Loading files created by another game or program, or even game data files "
"from another game not made with Godot."
msgstr "加载由其他游戏或程序创建的文件，甚至是非 Godot 游戏的游戏数据文件。"

msgid ""
"Runtime file loading can be combined with :ref:`HTTP requests "
"<doc_http_request_class>` to load resources from the Internet directly."
msgstr ""
"运行时文件加载可以和 :ref:`HTTP 请求 <doc_http_request_class>`\\ 结合起来，直"
"接加载互联网上的资源。"

msgid ""
"Do **not** use this runtime loading approach to load resources that are part "
"of the project, as it's less efficient and doesn't allow benefiting from "
"Godot's resource handling functionality (such as translation remaps). "
"See :ref:`doc_import_process` for details."
msgstr ""
"**请勿**\\ 用这种运行时加载的方法来加载属于项目本身的资源，因为它效率较低，且"
"无法利用 Godot 的资源处理功能（例如翻译重定向）。详见"
"《\\ :ref:`doc_import_process`\\ 》。"

msgid ""
"You can see how saving and loading works in action using the `Run-time File "
"Saving and Loading (Serialization) demo project <https://github.com/"
"godotengine/godot-demo-projects/blob/master/loading/runtime_save_load>`__."
msgstr ""
"你可以使用\\ `运行时文件保存和加载（序列化）演示项目 <https://github.com/"
"godotengine/godot-demo-projects/blob/master/loading/runtime_save_load>`__\\ "
"来查看保存和加载的实际工作方式。"

msgid "Plain text and binary files"
msgstr "纯文本文件和二进制文件"

msgid ""
"Godot's :ref:`class_FileAccess` class provides methods to access files on "
"the filesystem for reading and writing:"
msgstr "Godot 的 :ref:`class_FileAccess` 类提供了读写文件系统中文件的方法："

msgid ""
"To handle custom binary formats (such as loading file formats not supported "
"by Godot), :ref:`class_FileAccess` provides several methods to read/write "
"integers, floats, strings and more. These FileAccess methods have names that "
"start with ``get_`` and ``store_``."
msgstr ""
"为了处理自定义二进制格式（例如加载 Godot 不支持的文件格式），"
"\\ :ref:`class_FileAccess` 提供了几种方法来读取/写入整数、浮点数、字符串等。"
"这些 FileAccess 方法的名称以 ``get_`` 和 ``store_``\\ 。"

msgid ""
"If you need more control over reading binary files or need to read binary "
"streams that are not part of a file, :ref:`class_PackedByteArray` provides "
"several helper methods to decode/encode series of bytes to integers, floats, "
"strings and more. These PackedByteArray methods have names that start with "
"``decode_`` and ``encode_``. See also :ref:`doc_binary_serialization_api`."
msgstr ""
"如果你需要对读取二进制文件进行更多控制，或者需要读取不属于文件的二进制流，"
"\\ :ref:`class_PackedByteArray` 提供了几种辅助方法，可以将一系列字节解码/编码"
"为整数、浮点、字符串等数据类型。这些 PackedByteArray 方法的名称以 "
"``decode_`` 和 ``encode_`` 开头。另请参阅"
"《\\ :ref:`doc_binary_serialization_api`\\ 》。"

msgid "Images"
msgstr "图像"

msgid ""
"Image's :ref:`Image.load_from_file <class_Image_method_load_from_file>` "
"static method handles everything, from format detection based on file "
"extension to reading the file from disk."
msgstr ""
"Image 的 :ref:`Image.load_from_file <class_Image_method_load_from_file>` 静态"
"方法处理各种事物，包括从基于文件扩展名的格式检测到从磁盘读取文件。"

msgid ""
"If you need error handling or more control (such as changing the scale an "
"SVG is loaded at), use one of the following methods depending on the file "
"format:"
msgstr ""
"如果你需要错误处理或者更多的控制（例如更改加载 SVG 时的缩放），请根据文件格式"
"使用以下方法："

msgid ""
":ref:`Image.load_jpg_from_buffer <class_Image_method_load_jpg_from_buffer>`"
msgstr ""
":ref:`Image.load_jpg_from_buffer <class_Image_method_load_jpg_from_buffer>`"

msgid ""
":ref:`Image.load_ktx_from_buffer <class_Image_method_load_ktx_from_buffer>`"
msgstr ""
":ref:`Image.load_ktx_from_buffer <class_Image_method_load_ktx_from_buffer>`"

msgid ""
":ref:`Image.load_png_from_buffer <class_Image_method_load_png_from_buffer>`"
msgstr ""
":ref:`Image.load_png_from_buffer <class_Image_method_load_png_from_buffer>`"

msgid ""
":ref:`Image.load_svg_from_buffer <class_Image_method_load_svg_from_buffer>` "
"or :ref:`Image.load_svg_from_string "
"<class_Image_method_load_svg_from_string>`"
msgstr ""
":ref:`Image.load_svg_from_buffer <class_Image_method_load_svg_from_buffer>` "
"或 :ref:`Image.load_svg_from_string "
"<class_Image_method_load_svg_from_string>`"

msgid ""
":ref:`Image.load_tga_from_buffer <class_Image_method_load_tga_from_buffer>`"
msgstr ""
":ref:`Image.load_tga_from_buffer <class_Image_method_load_tga_from_buffer>`"

msgid ""
":ref:`Image.load_webp_from_buffer <class_Image_method_load_webp_from_buffer>`"
msgstr ""
":ref:`Image.load_webp_from_buffer <class_Image_method_load_webp_from_buffer>`"

msgid ""
"Several image formats can also be saved by Godot at runtime using the "
"following methods:"
msgstr "Godot 还可以在运行时使用以下方法保存几种图像格式："

msgid ""
":ref:`Image.save_png <class_Image_method_save_png>` "
"or :ref:`Image.save_png_to_buffer <class_Image_method_save_png_to_buffer>`"
msgstr ""
":ref:`Image.save_png <class_Image_method_save_png>` "
"或 :ref:`Image.save_png_to_buffer <class_Image_method_save_png_to_buffer>`"

msgid ""
":ref:`Image.save_webp <class_Image_method_save_webp>` "
"or :ref:`Image.save_webp_to_buffer <class_Image_method_save_webp_to_buffer>`"
msgstr ""
":ref:`Image.save_webp <class_Image_method_save_webp>` "
"或 :ref:`Image.save_webp_to_buffer <class_Image_method_save_webp_to_buffer>`"

msgid ""
":ref:`Image.save_jpg <class_Image_method_save_jpg>` "
"or :ref:`Image.save_jpg_to_buffer <class_Image_method_save_jpg_to_buffer>`"
msgstr ""
":ref:`Image.save_jpg <class_Image_method_save_jpg>` "
"或 :ref:`Image.save_jpg_to_buffer <class_Image_method_save_jpg_to_buffer>`"

msgid ""
":ref:`Image.save_exr <class_Image_method_save_exr>` "
"or :ref:`Image.save_exr_to_buffer <class_Image_method_save_exr_to_buffer>` "
"*(only available in editor builds, cannot be used in exported projects)*"
msgstr ""
":ref:`Image.save_exr <class_Image_method_save_exr>` "
"或 :ref:`Image.save_exr_to_buffer <class_Image_method_save_exr_to_buffer>` *"
"（仅在编辑器版本中可用，无法在导出后的项目中使用）*"

msgid ""
"The methods with the ``to_buffer`` suffix save the image to a "
"PackedByteArray instead of the filesystem. This is useful to send the image "
"over the network or into a ZIP archive without having to write it on the "
"filesystem. This can increase performance by reducing I/O utilization."
msgstr ""
"带有 ``to_buffer`` 后缀的方法会将图像保存到 PackedByteArray 而不是文件系统。"
"这有利于通过网络发送图像或将图像发生到 ZIP 存档，无需将其写入到文件系统。这可"
"以通过降低 I/O 利用率来提高性能。"

msgid ""
"If displaying the loaded image on a 3D surface, make sure to "
"call :ref:`Image.generate_mipmaps <class_Image_method_generate_mipmaps>` so "
"that the texture doesn't look grainy when viewed at a distance. This is also "
"useful in 2D when following instructions on :ref:`reducing aliasing when "
"downsampling <doc_multiple_resolutions_reducing_aliasing_on_downsampling>`."
msgstr ""
"如果在 3D 曲面上显示加载的图像，请确保调用 :ref:`Image.generate_mipmaps "
"<class_Image_method_generate_mipmaps>`\\ ，以便在远处观察时纹理看起来不会有颗"
"粒感。在 2D 中，当遵循关于《\\ :ref:`减少降采样时的锯齿 "
"<doc_multiple_resolutions_reducing_aliasing_on_downsampling>`\\ 》的说明时也"
"很有用。"

msgid ""
"Example of loading an image and displaying it in a :ref:`class_TextureRect` "
"node (which requires conversion to :ref:`class_ImageTexture`):"
msgstr ""
"加载图像并将其显示在 :ref:`class_TextureRect` 节点（需要转换"
"为 :ref:`class_ImageTexture`）中的示例："

msgid "Audio/video files"
msgstr "音视频文件"

msgid ""
"Example of loading an Ogg Vorbis audio file in "
"an :ref:`class_AudioStreamPlayer` node:"
msgstr ""
"通过 :ref:`class_AudioStreamPlayer` 节点加载 Ogg Vorbis 音频文件的示例："

msgid ""
"Example of loading an Ogg Theora video file in "
"a :ref:`class_VideoStreamPlayer` node:"
msgstr ""
"通过 :ref:`class_VideoStreamPlayer` 节点加载 Ogg Theora 视频文件的示例："

msgid "3D scenes"
msgstr "3D 场景"

msgid ""
"Godot has first-class support for glTF 2.0, both in the editor and exported "
"projects. Using :ref:`class_gltfdocument` and :ref:`class_gltfstate` "
"together, Godot can load and save glTF files in exported projects, in both "
"text (``.gltf``) and binary (``.glb``) formats. The binary format should be "
"preferred as it's faster to write and smaller, but the text format is easier "
"to debug."
msgstr ""
"Godot 在编辑器和导出项目中都对 glTF 2.0 提供了一流的支持。结合使"
"用 :ref:`class_gltfdocument` 和 :ref:`class_gltfstate`\\ ，Godot 可以在导出的"
"项目中加载和保存 glTF 文件，包括文本格式（\\ ``.gltf``\\ ）和二进制格式（\\ "
"``.glb``\\ ）。二进制格式应该优先考虑，因为它写入速度更快且体积更小，但文本格"
"式更易于调试。"

msgid ""
"Example of loading a glTF scene and appending its root node to the scene:"
msgstr "加载 glTF 场景并将其根节点附加到场景的示例："

msgid ""
"When loading a glTF scene, a *base path* must be set so that external "
"resources like textures can be loaded correctly. When loading from a file, "
"the base path is automatically set to the folder containing the file. When "
"loading from a buffer, this base path must be manually set as there is no "
"way for Godot to infer this path."
msgstr ""
"加载 glTF 场景时，必须设置\\ *基础路径*\\ ，以便可以正确加载纹理等外部资源。"
"从文件加载时，基础路径会自动设置为包含该文件的文件夹。从缓冲区加载时，必须手"
"动设置该基础路径，因为 Godot 无法推断该路径。"

msgid ""
"To set the base path, set :ref:`GLTFState.base_path "
"<class_GLTFState_property_base_path>` on your GLTFState instance *before* "
"calling :ref:`GLTFDocument.append_from_buffer "
"<class_GLTFDocument_method_append_from_buffer>` "
"or :ref:`GLTFDocument.append_from_file "
"<class_GLTFDocument_method_append_from_file>`."
msgstr ""
"要设置基础路径，请在调用 :ref:`GLTFDocument.append_from_buffer "
"<class_GLTFDocument_method_append_from_buffer>` "
"或 :ref:`GLTFDocument.append_from_file "
"<class_GLTFDocument_method_append_from_file>` *之前*\\ ，在 GLTFState 实例上"
"设置 :ref:`GLTFState.base_path <class_GLTFState_property_base_path>`\\ 。"

msgid "Fonts"
msgstr "字体"

msgid ""
":ref:`FontFile.load_dynamic_font <class_FontFile_method_load_bitmap_font>` "
"supports the following font file formats: TTF, OTF, WOFF, WOFF2, PFB, PFM"
msgstr ""
":ref:`FontFile.load_dynamic_font <class_FontFile_method_load_bitmap_font>` 支"
"持以下字体文件格式：TTF、OTF、WOFF、WOFF2、PFB、PFM"

msgid ""
"On the other hand, :ref:`FontFile.load_bitmap_font "
"<class_FontFile_method_load_bitmap_font>` supports the `BMFont <https://"
"www.angelcode.com/products/bmfont/>`__ format (``.fnt`` or ``.font``)."
msgstr ""
"另一方面，\\ :ref:`FontFile.load_bitmap_font "
"<class_FontFile_method_load_bitmap_font>`\\ 支持 `BMFont <https://"
"www.angelcode.com/products/bmfont/>`__ 格式（\\ ``.fnt`` 或 ``.font``\\ ）。"

msgid ""
"Additionally, it is possible to load any font that is installed on the "
"system using Godot's support for :ref:`doc_using_fonts_system_fonts`."
msgstr ""
"此外，可以使用 Godot 对《\\ :ref:`doc_using_fonts_system_fonts`\\ 》的支持来"
"加载系统上安装的任何字体。"

msgid ""
"Example of loading a font file automatically according to its file "
"extension, then adding it as a theme override to a :ref:`class_Label` node:"
msgstr ""
"根据文件扩展名自动加载字体文件，然后将其作为主题覆盖添加"
"到 :ref:`class_Label` 节点的示例："

msgid "ZIP archives"
msgstr "ZIP 压缩包"

msgid ""
"Godot supports reading and writing ZIP archives using "
"the :ref:`class_zipreader` and :ref:`class_zippacker` classes. This supports "
"any ZIP file, including files generated by Godot's \"Export PCK/ZIP\" "
"functionality (although these will contain imported Godot resources rather "
"than the original project files)."
msgstr ""
"Godot 支持使用 :ref:`class_zipreader` 和 :ref:`class_zippacker` 类读取和写入 "
"ZIP 档案。这支持任何 ZIP 文件，包括由 Godot 的“导出 PCK/ZIP”功能生成的文件"
"（尽管这些文件将包含导入的 Godot 资源而不是原始项目文件）。"

msgid ""
"Use :ref:`ProjectSettings.load_resource_pack "
"<class_ProjectSettings_method_load_resource_pack>` to load PCK or ZIP files "
"exported by Godot as :ref:`additional data packs <doc_exporting_pcks>`. That "
"approach is preferred for DLCs, as it makes interacting with additional data "
"packs seamless (virtual filesystem)."
msgstr ""
"使用 :ref:`ProjectSettings.load_resource_pack "
"<class_ProjectSettings_method_load_resource_pack>` 将 Godot 导出的 PCK 或 "
"ZIP 文件加载为 :ref:`附加数据包 <doc_exporting_pcks>`\\ 。这种方法是 DLC 的首"
"选，因为它可以无缝地与附加数据包（虚拟文件系统）进行交互。"

msgid ""
"This ZIP archive support can be combined with runtime image, 3D scene and "
"audio loading to provide a seamless modding experience without requiring "
"users to go through the Godot editor to generate PCK/ZIP files."
msgstr ""
"这种 ZIP 存档支持可与运行时图像、3D 场景和音频加载相结合，提供无缝的模组化体"
"验，而无需用户通过 Godot 编辑器生成 PCK/ZIP 文件。"

msgid ""
"Example that lists files in a ZIP archive in an :ref:`class_ItemList` node, "
"then writes contents read from it to a new ZIP archive (essentially "
"duplicating the archive):"
msgstr ""
"示例在 :ref:`class_ItemList` 节点中列出 ZIP 存档中的文件，然后将从中读取的内"
"容写入新的 ZIP 存档（本质上是复制该存档）："
