#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Runtime file loading and saving"
msgstr "运行时文件加载和保存"

msgid ""
"See :ref:`doc_saving_games` for information on saving and loading game "
"progression."
msgstr "更多关于游戏进度的保存和读取的信息见 :ref:`doc_saving_games`\\ 。"

msgid ""
"Sometimes, :ref:`exporting packs, patches, and mods <doc_exporting_pcks>` is "
"not ideal when you want players to be able to load user-generated content in "
"your project. It requires users to generate a PCK or ZIP file through the "
"Godot editor, which contains resources imported by Godot."
msgstr ""
"有时，当你希望玩家能够在项目中加载用户生成的内容时，：ref:`exporting packs, "
"patches, and mods <doc_exporting_pcks>` 并不理想。它要求用户通过Godot编辑器生"
"成PCK或ZIP文件，其中包含Godot导入的资源。"

msgid "Example use cases for runtime file loading and saving include:"
msgstr "运行时文件加载和保存的示例用例包括："

msgid "Loading texture packs designed for the game."
msgstr "加载为游戏设计的纹理包。"

msgid ""
"Loading user-provided audio tracks and playing them back in an in-game radio "
"station."
msgstr "加载用户提供的音轨，在游戏内的电台中播放。"

msgid ""
"Loading custom levels or 3D models that can be designed with any 3D DCC that "
"can export to glTF (including glTF scenes saved by Godot at runtime)."
msgstr ""
"加载自定义关卡和 3D 模型，可以使用能够导出 glTF 的任意 3D DCC 设计（包括 "
"Godot 在运行时保存的 glTF 场景）。"

msgid "Using user-provided fonts for menus and HUD."
msgstr "为菜单和 HUD 使用用户提供的字体。"

msgid ""
"Saving/loading a file format that can contain multiple files but can still "
"easily be read by other applications (ZIP)."
msgstr ""
"Saving/loading 一种文件格式，该文件格式可以包含多个文件，但仍然可以被其他应用"
"程序轻松读取(ZIP)。"

msgid ""
"Loading files created by another game or program, or even game data files "
"from another game not made with Godot."
msgstr ""
"Loading 由另一个游戏或程序创建的文件，甚至是来自另一个非Godot游戏的游戏数据文"
"件。"

msgid ""
"Runtime file loading can be combined with :ref:`HTTP requests "
"<doc_http_request_class>` to load resources from the Internet directly."
msgstr ""
"运行时文件加载可以和 :ref:`HTTP 请求 <doc_http_request_class>`\\ 结合起来，直"
"接加载互联网上的资源。"

msgid ""
"Do **not** use this runtime loading approach to load resources that are part "
"of the project, as it's less efficient and doesn't allow benefiting from "
"Godot's resource handling functionality (such as translation remaps). See :"
"ref:`doc_import_process` for details."
msgstr ""
"**请勿**\\ 用这种运行时加载的方法来加载属于项目本身的资源，这种做法的效率较"
"低，无法利用 Godot 的资源处理功能（例如翻译重定向）。详见 :ref:"
"`doc_import_process`\\ 。"

msgid "Plain text and binary files"
msgstr "纯文本文件和二进制文件"

msgid ""
"Godot's :ref:`class_FileAccess` class provides methods to access files on "
"the filesystem for reading and writing:"
msgstr "Godot 的 :ref:`class_FileAccess` 类提供了读写文件系统中文件的方法："

msgid ""
"To handle custom binary formats (such as loading file formats not supported "
"by Godot), :ref:`class_FileAccess` provides several methods to read/write "
"integers, floats, strings and more. These FileAccess methods have names that "
"start with ``get_`` and ``store_``."
msgstr ""
"为了处理自定义二进制格式（例如加载 Godot 不支持的文件格式），:ref:"
"`class_FileAccess`提供了几种读写整数、浮点值、字符串等数据类型的方法。这些 "
"FileAccess 方法的名称以 ``get_`` 和 ``store_`` 开头。"

msgid "Images"
msgstr "图像"

msgid ""
":ref:`Image.load_jpg_from_buffer <class_Image_method_load_jpg_from_buffer>`"
msgstr ""
":ref:`Image.load_jpg_from_buffer <class_Image_method_load_jpg_from_buffer>`"

msgid ""
":ref:`Image.load_ktx_from_buffer <class_Image_method_load_ktx_from_buffer>`"
msgstr ""
":ref:`Image.load_ktx_from_buffer <class_Image_method_load_ktx_from_buffer>`"

msgid ""
":ref:`Image.load_png_from_buffer <class_Image_method_load_png_from_buffer>`"
msgstr ""
":ref:`Image.load_png_from_buffer <class_Image_method_load_png_from_buffer>`"

msgid ""
":ref:`Image.load_svg_from_buffer <class_Image_method_load_svg_from_buffer>` "
"or :ref:`Image.load_svg_from_string "
"<class_Image_method_load_svg_from_string>`"
msgstr ""
":ref:`Image.load_svg_from_buffer <class_Image_method_load_svg_from_buffer>` "
"或 :ref:`Image.load_svg_from_string "
"<class_Image_method_load_svg_from_string>`"

msgid ""
":ref:`Image.load_tga_from_buffer <class_Image_method_load_tga_from_buffer>`"
msgstr ""
":ref:`Image.load_tga_from_buffer <class_Image_method_load_tga_from_buffer>`"

msgid ""
":ref:`Image.load_webp_from_buffer <class_Image_method_load_webp_from_buffer>`"
msgstr ""
":ref:`Image.load_webp_from_buffer <class_Image_method_load_webp_from_buffer>`"

msgid ""
"Several image formats can also be saved by Godot at runtime using the "
"following methods:"
msgstr "Godot 还可以在运行时使用以下方法保存几种图像格式："

msgid ""
":ref:`Image.save_png <class_Image_method_save_png>` or :ref:`Image."
"save_png_to_buffer <class_Image_method_save_png_to_buffer>`"
msgstr ""
":ref:`Image.save_png <class_Image_method_save_png>` 或 :ref:`Image."
"save_png_to_buffer <class_Image_method_save_png_to_buffer>`"

msgid ""
":ref:`Image.save_webp <class_Image_method_save_webp>` or :ref:`Image."
"save_webp_to_buffer <class_Image_method_save_webp_to_buffer>`"
msgstr ""
":ref:`Image.save_webp <class_Image_method_save_webp>` 或 :ref:`Image."
"save_webp_to_buffer <class_Image_method_save_webp_to_buffer>`"

msgid ""
":ref:`Image.save_jpg <class_Image_method_save_jpg>` or :ref:`Image."
"save_jpg_to_buffer <class_Image_method_save_jpg_to_buffer>`"
msgstr ""
":ref:`Image.save_jpg <class_Image_method_save_jpg>` 或 :ref:`Image."
"save_jpg_to_buffer <class_Image_method_save_jpg_to_buffer>`"

msgid ""
":ref:`Image.save_exr <class_Image_method_save_exr>` or :ref:`Image."
"save_exr_to_buffer <class_Image_method_save_exr_to_buffer>` *(only available "
"in editor builds, cannot be used in exported projects)*"
msgstr ""
":ref:`Image.save_exr <class_Image_method_save_exr>` 或 :ref:`Image."
"save_exr_to_buffer <class_Image_method_save_exr_to_buffer>` *（仅在编辑器版本"
"中可用，无法在导出后的项目中使用）*"

msgid ""
"The methods with the ``to_buffer`` suffix save the image to a "
"PackedByteArray instead of the filesystem. This is useful to send the image "
"over the network or into a ZIP archive without having to write it on the "
"filesystem. This can increase performance by reducing I/O utilization."
msgstr ""
"那些有着 ``to_buffer`` 前缀的方法将图片保存至 PackedByteArray 中，而不是文件"
"系统。这对于通过网络发送图像或将图像发送到 ZIP 压缩包 中非常有用，而无需将其"
"写入文件系统。它可以通过降低 I/O 利用率来提高性能。"

msgid ""
"If displaying the loaded image on a 3D surface, make sure to call :ref:"
"`Image.generate_mipmaps <class_Image_method_generate_mipmaps>` so that the "
"texture doesn't look grainy when viewed at a distance. This is also useful "
"in 2D when following instructions on :ref:`reducing aliasing when "
"downsampling <doc_multiple_resolutions_reducing_aliasing_on_downsampling>`."
msgstr ""
"如果在3D曲面上显示加载的图像，请确保调用：ref:`image."
"generate_mipmaps<class_image_method_generate_mip maps>` ，以便在远处观察时纹"
"理看起来不会有颗粒感。在2D中，当遵循以下说明时，这也很有用：ref:`reducing "
"aliasing when downsampling "
"<doc_multiple_resolutions_reducing_aliasing_on_downsampling>` 。"

msgid ""
"Example of loading an image and displaying it in a :ref:`class_TextureRect` "
"node (which requires conversion to :ref:`class_ImageTexture`):"
msgstr ""
"加载图像并将其显示在:ref:`class_TextureRect` 节点中的示例(需要转换为:ref:"
"`class_ImageTexture`):"

msgid "Audio/video files"
msgstr "音视频文件"

msgid ""
"Godot supports loading Ogg Vorbis audio at runtime. Note that not *all* "
"files with an ``.ogg`` extension may be Ogg Vorbis files. Some may be Ogg "
"Theora videos, or contain Opus audio within an Ogg container. These files "
"will **not** load correctly as audio files in Godot."
msgstr ""
"Godot支持在运行时加载Ogg Vorbis音频。请注意，并非*all* 扩展名为 ``.ogg`` 的文"
"件都可以是ogg-Vorbis文件。有些可能是Ogg Theora视频，或者在Ogg容器中包含Opus音"
"频。这些文件在Godot中将 **not** 作为音频文件正确加载。"

msgid ""
"Example of loading an Ogg Vorbis audio file in an :ref:"
"`class_AudioStreamPlayer` node:"
msgstr ""
"通过 :ref:`class_AudioStreamPlayer` 节点加载 Ogg Vorbis 音频文件的示例："

msgid ""
"Example of loading an Ogg Theora video file in a :ref:"
"`class_VideoStreamPlayer` node:"
msgstr ""
"通过 :ref:`class_VideoStreamPlayer` 节点加载 Ogg Theora 视频文件的示例："

msgid ""
"Godot doesn't support runtime loading of MP3 or WAV files yet. Until this is "
"implemented, it's feasible to implement runtime WAV loading using a script "
"since :ref:`class_AudioStreamWAV`'s ``data`` property is exposed to "
"scripting."
msgstr ""
"Godot还不支持MP3或WAV文件的运行时加载。在实现之前，使用脚本实现运行时WAV加载"
"是可行的，因为：ref:`class_AudioStreamWAV` 的`data`属性风险脚本。"

msgid ""
"It's still possible to *save* WAV files using :ref:`AudioStreamWAV."
"save_to_wav <class_AudioStreamWAV_method_save_to_wav>`, which is useful for "
"procedurally generated audio or microphone recordings."
msgstr ""
"仍然可以使用: ref:`AudioStreamWAV.save_to_wav "
"<class_AudioStreamWAV_method_save_to_wav>` ，这对于按程序生成的音频或麦克风录"
"音非常有用。"

msgid "3D scenes"
msgstr "3D 场景"

msgid ""
"Godot has first-class support for glTF 2.0, both in the editor and exported "
"projects. Using :ref:`class_gltfdocument` and :ref:`class_gltfstate` "
"together, Godot can load and save glTF files in exported projects, in both "
"text (``.gltf``) and binary (``.glb``) formats. The binary format should be "
"preferred as it's faster to write and smaller, but the text format is easier "
"to debug."
msgstr ""
"Godot在编辑器和导出项目中都对glTF 2.0提供了一流的支持。同时使用：ref:"
"`class_gltfdocument` 和ref:`class_gltfstate` ，Godot可以以文本 (``.gltf``) 和"
"二进制 (``.glb``)格式加载和保存导出项目中的glTF文件。二进制格式应该是首选，因"
"为它写得更快、更小，但文本格式更容易调试。"

msgid ""
"Example of loading a glTF scene and appending its root node to the scene:"
msgstr "加载glTF场景并将其根节点附加到场景的示例："

msgid ""
"When loading a glTF scene, a *base path* must be set so that external "
"resources like textures can be loaded correctly. When loading from a file, "
"the base path is automatically set to the folder containing the file. When "
"loading from a buffer, this base path must be manually set as there is no "
"way for Godot to infer this path."
msgstr ""
"加载glTF场景时，必须设置*基本路径*，以便可以正确加载纹理等外部资源。从文件加"
"载时，基本路径会自动设置为包含该文件的文件夹。从缓冲区加载时，必须手动设置此"
"基本路径，因为Godot无法推断此路径。"

msgid ""
"To set the base path, set :ref:`GLTFState.base_path "
"<class_GLTFState_property_base_path>` on your GLTFState instance *before* "
"calling :ref:`GLTFDocument.append_from_buffer "
"<class_GLTFDocument_method_append_from_buffer>` or :ref:`GLTFDocument."
"append_from_file <class_GLTFDocument_method_append_from_file>`."
msgstr ""
"若要设置基本路径，请在你的GLTFState实例上设置:ref:`GLTFState.base_path "
"<class_GLTFState_property_base_path>` ，然后*调用* :ref:` GLTFDocument."
"append_from_buffer<class_GLTCDocument_method_append_from _buffer>` 或 :ref:"
"`GLTFDocument.append_from_file "
"<class_GLTFDocument_method_append_from_file>`。"

msgid "Fonts"
msgstr "字体"

msgid ""
":ref:`FontFile.load_dynamic_font <class_FontFile_method_load_bitmap_font>` "
"supports the following font file formats: TTF, OTF, WOFF, WOFF2, PFB, PFM"
msgstr ""
":ref:`FontFile.load_dynamic_font <class_FontFile_method_load_bitmap_font>` 支"
"持以下字体文件格式：TTF、OTF、WOFF、WOFF2、PFB、PFM"

msgid ""
"On the other hand, :ref:`FontFile.load_bitmap_font "
"<class_FontFile_method_load_bitmap_font>` supports the `BMFont <https://www."
"angelcode.com/products/bmfont/>`__ format (``.fnt`` or ``.font``)."
msgstr ""
"另一方面，:ref:`FontFile.load_bitmap_font "
"<class_FontFile_method_load_bitmap_font>` 支持`BMFont<https://www.angelcode."
"com/products/bmfont/>`__ format (``.fnt`` or ``.font``)。"

msgid ""
"Additionally, it is possible to load any font that is installed on the "
"system using Godot's support for :ref:`doc_using_fonts_system_fonts`."
msgstr ""
"此外，可以使用Godot对 :ref:`doc_using_fonts_system_fonts` 的支持加载系统上安"
"装的任何字体。"

msgid ""
"Example of loading a font file automatically according to its file "
"extension, then adding it as a theme override to a :ref:`class_Label` node:"
msgstr ""
"根据文件扩展名自动加载字体文件，然后将其作为主题覆盖添加到 :ref:"
"`class_Label` 节点的示例："

msgid "ZIP archives"
msgstr "ZIP 压缩包"

msgid ""
"Godot supports reading and writing ZIP archives using the :ref:"
"`class_zipreader` and :ref:`class_zippacker` classes. This supports any ZIP "
"file, including files generated by Godot's \"Export PCK/ZIP\" functionality "
"(although these will contain imported Godot resources rather than the "
"original project files)."
msgstr ""
"Godot支持使用 :ref:`class_zipreader` 和 :ref:`class_zippacker` 类读取和写入"
"ZIP档案。这支持任何ZIP文件，包括Godot的 \"Export PCK/ZIP\"功能生成的文件（尽"
"管这些文件将包含导入的Godot资源，而不是原始项目文件）。"

msgid ""
"Use :ref:`ProjectSettings.load_resource_pack "
"<class_ProjectSettings_method_load_resource_pack>` to load PCK or ZIP files "
"exported by Godot as :ref:`additional data packs <doc_exporting_pcks>`. That "
"approach is preferred for DLCs, as it makes interacting with additional data "
"packs seamless (virtual filesystem)."
msgstr ""
"使用 :ref:`ProjectSettings.load_resource_pack "
"<class_ProjectSettings_method_load_resource_pack>` 将Godot导出的PCK或ZIP文件"
"加载为 :ref:`additional data packs <doc_exporting_pcks>`。DLC更喜欢这种方法，"
"因为它可以无缝地与其他数据包（虚拟文件系统）交互。"

msgid ""
"This ZIP archive support can be combined with runtime image, 3D scene and "
"audio loading to provide a seamless modding experience without requiring "
"users to go through the Godot editor to generate PCK/ZIP files."
msgstr ""
"这种ZIP档案支持可以与运行时图像、3D场景和音频加载相结合，提供无缝的改装体验，"
"而无需用户通过Godot编辑器生成PCK/ZIP文件。"

msgid ""
"Example that lists files in a ZIP archive in an :ref:`class_ItemList` node, "
"then writes contents read from it to a new ZIP archive (essentially "
"duplicating the archive):"
msgstr ""
"示例列出 :ref:`class_ItemList` 节点中ZIP存档中的文件，然后将从中读取的内容写"
"入新的ZIP存档（本质上是复制存档）："

msgid "Translation status"
msgstr "翻译状态"
