#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Android in-app purchases"
msgstr "Android 应用内购买"

msgid ""
"Godot offers a first-party ``GodotGooglePlayBilling`` Android plugin "
"compatible with Godot 4 which uses the `Google Play Billing library <https://"
"developer.android.com/google/play/billing>`_."
msgstr ""
"Godot 提供与 Godot 4 兼容的第一方 ``GodotGooglePlayBilling`` Android 插件，该"
"插件使用 `Google Play 结算系统库 <https://developer.android.com/google/play/"
"billing>`_\\ 。"

msgid "Usage"
msgstr "用法"

msgid "Getting started"
msgstr "入门"

msgid ""
"Make sure you have enabled and successfully set up :ref:`Android Gradle "
"Builds <doc_android_gradle_build>`. Follow the compiling instructions on the "
"``GodotGooglePlayBilling`` `github page <https://github.com/godotengine/"
"godot-google-play-billing>`__."
msgstr ""
"确保你已启用并成功设置 :ref:`Android Gradle 构建 "
"<doc_android_gradle_build>`。按照 ``GodotGooglePlayBilling`` `github 页面 "
"<https://github.com/godotengine/godot-google-play-billing>`__\\ 上的编译说明"
"进行操作。"

msgid ""
"Then put the files `./godot-google-play-billing/build/outputs/aar/"
"GodotGooglePlayBilling.***.release.aar` and `./GodotGooglePlayBilling.gdap` "
"into your project in the `res://android/plugins` folder."
msgstr ""
"然后将文件 `./godot-google-play-billing/build/outputs/aar/"
"GodotGooglePlayBilling.***.release.aar` 和 `./GodotGooglePlayBilling.gdap` 放"
"入项目中的 `res://android/plugins` 文件夹中。"

msgid ""
"The plugin should now show up in the Android export settings, where you can "
"enable it."
msgstr "现在 Android 导出设置中就会显示该插件，你可以在那里启用该插件。"

msgid "Initialize the plugin"
msgstr "初始化插件"

msgid "To use the ``GodotGooglePlayBilling`` API:"
msgstr "要使用 ``GodotGooglePlayBilling`` API："

msgid "Obtain a reference to the ``GodotGooglePlayBilling`` singleton"
msgstr "获取对 ``GodotGooglePlayBilling`` 单例的引用"

msgid "Connect handlers for the plugin signals"
msgstr "为该插件的信号连接处理函数"

msgid "Call ``startConnection``"
msgstr "调用 ``startConnection``"

msgid "Initialization example:"
msgstr "初始化示例："

msgid ""
"The API must be in a connected state prior to use. The ``connected`` signal "
"is sent when the connection process succeeds. You can also use ``isReady()`` "
"to determine if the plugin is ready for use. The ``getConnectionState()`` "
"function returns the current connection state of the plugin."
msgstr ""
"API 在使用前必须处于连接状态。连接处理成功时，会发送 ``connected`` 信号。你还"
"可以使用 ``isReady()`` 来确定插件是否已准备好使用。\\ "
"``getConnectionState()`` 函数返回插件的当前连接状态。"

msgid "Return values for ``getConnectionState()``:"
msgstr "``getConnectionState()`` 的返回值："

msgid "Query available items"
msgstr "查询可用项"

msgid ""
"Once the API has connected, query SKUs using ``querySkuDetails()``. You must "
"successfully complete an SKU query before calling the ``purchase()`` or "
"``queryPurchases()`` functions, or they will return an error. "
"``querySkuDetails()`` takes two parameters: an array of SKU name strings, "
"and a string specifying the type of SKU being queried. The SKU type string "
"should be ``\"inapp\"`` for normal in-app purchases or ``\"subs\"`` for "
"subscriptions. The name strings in the array should match the SKU product "
"ids defined in the Google Play Console entry for your app."
msgstr ""
"API 连接后，使用 ``querySkuDetails()`` 查询 SKU。你必须在调用 ``purchase()`` "
"或 ``queryPurchases()`` 函数之前成功完成 SKU 查询，否则它们将返回错误。\\ "
"``querySkuDetails()`` 接受两个参数：SKU 名称字符串数组，以及指定要查询的 SKU "
"类型的字符串。对于普通应用内购买，SKU 类型字符串应为 ``\"inapp\"``\\ ；对于订"
"阅，则应为 ``\"subs\"``\\ 。数组中的名称字符串应与应用的 Google Play 控制台条"
"目中定义的 SKU 产品 ID 相匹配。"

msgid "Example use of ``querySkuDetails()``:"
msgstr "``querySkuDetails()`` 的示例用法："

msgid "Query user purchases"
msgstr "查询用户购买记录"

msgid "Example use of ``queryPurchases()``:"
msgstr "``queryPurchases()`` 的示例用法："

msgid ""
"You should query purchases during startup after successfully retrieving SKU "
"details. Since the user may make a purchase or resolve a pending transaction "
"from outside your app, you should recheck for purchases when resuming from "
"the background. To accomplish this, you can use the ``billing_resume`` "
"signal."
msgstr ""
"成功检索 SKU 详细信息后，你应在启动期间查询购买记录。由于用户可能会从应用外部"
"进行购买或解决待处理交易，因此你应在从后台恢复时重新检查购买记录。为此，你可"
"以使用 ``billing_resume`` 信号。"

msgid "Example use of ``billing_resume``:"
msgstr "``billing_resume`` 的示例用法："

msgid ""
"For more information on processing the purchase items returned by "
"``queryPurchases()``, see `Processing a purchase item`_"
msgstr ""
"有关处理 ``queryPurchases()`` 返回的购买项目的更多信息，请参阅\\ `处理购买项"
"目`_"

msgid "Purchase an item"
msgstr "购买项目"

msgid ""
"To initiate the purchase flow for an item, call ``purchase()`` passing the "
"product id string of the SKU you wish to purchase. Reminder: you **must** "
"query the SKU details for an item before you can pass it to ``purchase()``."
msgstr ""
"要启动一个项目的购买流程，请调用 ``purchase()`` 并传递要购买的 SKU 的产品 ID "
"字符串。提醒：你\\ **必须**\\ 先查询项目的 SKU 详细信息，然后才能将其传递给 "
"``purchase()``\\ 。"

msgid "Example use of ``purchase()``:"
msgstr "``purchase()`` 的示例用法："

msgid ""
"The payment flow will send a ``purchases_updated`` signal on success or a "
"``purchase_error`` signal on failure."
msgstr ""
"支付流程在成功时将发送 ``purchases_updated`` 信号；在失败时发送 "
"``purchase_error`` 信号。"

msgid "Processing a purchase item"
msgstr "处理购买项目"

msgid ""
"The ``query_purchases_response`` and ``purchases_updated`` signals provide "
"an array of purchases in :ref:`Dictionary <class_Dictionary>` format. The "
"purchase Dictionary includes keys that map to values of the Google Play "
"Billing `Purchase <https://developer.android.com/reference/com/android/"
"billingclient/api/Purchase>`_ class."
msgstr ""
"``query_purchases_response`` 和 ``purchases_updated`` 信号以 :ref:"
"`Dictionary <class_Dictionary>` 格式提供购买数组。购买字典中包含映射到 "
"Google Play 支付系统 `Purchase <https://developer.android.com/reference/com/"
"android/billingclient/api/Purchase>`_ 类的值的键。"

msgid "Purchase fields:"
msgstr "购买项目："

msgid "Check purchase state"
msgstr "检查购买状态"

msgid ""
"Check the ``purchase_state`` value of a purchase to determine if a purchase "
"was completed or is still pending."
msgstr "检查购买的 ``purchase_state`` 值以确定购买已完成还是仍处于待处理状态。"

msgid "PurchaseState values:"
msgstr "PurchaseState 取值："

msgid ""
"If a purchase is in a ``PENDING`` state, you should not award the contents "
"of the purchase or do any further processing of the purchase until it "
"reaches the ``PURCHASED`` state. If you have a store interface, you may wish "
"to display information about pending purchases needing to be completed in "
"the Google Play Store. For more details on pending purchases, see `Handling "
"pending transactions <https://developer.android.com/google/play/billing/"
"integrate#pending>`_ in the Google Play Billing Library documentation."
msgstr ""
"如果购买处于 ``PENDING`` 状态，则在其达到 ``PURCHASED`` 状态之前，你不应授予"
"购买的内容或对购买进行任何进一步处理。如果你有商店界面，你可能希望显示有关需"
"要在 Google Play 商店中完成的待处理购买的信息。有关待处理购买的更多详细信息，"
"请参阅 Google Play 结算库文档中的\\ `处理待处理交易 <https://developer."
"android.com/google/play/billing/integrate#pending>`_\\ 。"

msgid "Consumables"
msgstr "消耗品"

msgid ""
"If your in-app item is not a one-time purchase but a consumable item (e.g. "
"coins) which can be purchased multiple times, you can consume an item by "
"calling ``consumePurchase()`` passing the ``purchase_token`` value from the "
"purchase dictionary. Calling ``consumePurchase()`` automatically "
"acknowledges a purchase. Consuming a product allows the user to purchase it "
"again, it will no longer appear in subsequent ``queryPurchases()`` calls "
"unless it is repurchased."
msgstr ""
"如果你的应用内物品不是一次性购买，而是可以多次购买的消耗品（如硬币），你可以"
"通过调用 ``consumePurchase()`` 并传递购买字典中的 ``purchase_token`` 值来消费"
"物品。调用 ``consumePurchase()`` 会自动确认购买。消费商品允许用户再次购买，除"
"非重新购买，否则它将不再出现在后续的 ``queryPurchases()`` 调用中。"

msgid "Example use of ``consumePurchase()``:"
msgstr "``consumePurchase()`` 的示例用法："

msgid "Acknowledging purchases"
msgstr "确认购买"

msgid ""
"If your in-app item is a one-time purchase, you must acknowledge the "
"purchase by calling the ``acknowledgePurchase()`` function, passing the "
"``purchase_token`` value from the purchase dictionary. If you do not "
"acknowledge a purchase within three days, the user automatically receives a "
"refund, and Google Play revokes the purchase. If you are calling "
"``comsumePurchase()`` it automatically acknowledges the purchase and you do "
"not need to call ``acknowledgePurchase()``."
msgstr ""
"如果你的应用内商品是一次性购买，则必须通过调用 ``acknowledgePurchase()`` 函数"
"来确认购买，并传递购买字典中的 ``purchase_token`` 值。如果你在三天内未确认购"
"买，则用户会自动收到退款，并且 Google Play 会撤销购买。如果你调用 "
"``comsumePurchase()``\\ ，它会自动确认购买，且无需调用 "
"``acknowledgePurchase()``\\ 。"

msgid "Example use of ``acknowledgePurchase()``:"
msgstr "``acknowledgePurchase()`` 的示例用法："

msgid "Subscriptions"
msgstr "订阅"

msgid ""
"Subscriptions work mostly like regular in-app items. Use ``\"subs\"`` as the "
"second argument to ``querySkuDetails()`` to get subscription details. Pass "
"``\"subs\"`` to ``queryPurchases()`` to get subscription purchase details."
msgstr ""
"订阅的工作原理和普通的应用内项目没有太大区别. 只要使用 ``\"subs\"`` 作为 "
"``querySkuDetails()`` 的第二个参数, 就可以得到订阅的详细信息. 在 "
"``queryPurchases()`` 的结果中检查 ``is_auto_renewing`` 来查看用户是否取消了自"
"动更新的订阅。"

msgid ""
"You can check ``is_auto_renewing`` in the a subscription purchase returned "
"from ``queryPurchases()`` to see if a user has cancelled an auto-renewing "
"subscription."
msgstr ""
"你可以在 ``queryPurchases()`` 返回的订阅购买中检查 ``is_auto_renewing``\\ ，"
"以查看用户是否取消了自动续订订阅。"

msgid ""
"You need to acknowledge new subscription purchases, but not automatic "
"subscription renewals."
msgstr "你需要确认新的订阅购买，但不需要确认自动订阅续订。"

msgid ""
"If you support upgrading or downgrading between different subscription "
"levels, you should use ``updateSubscription()`` to use the subscription "
"update flow to change an active subscription. Like ``purchase()``, results "
"are returned by the ``purchases_updated`` and ``purchase_error`` signals. "
"There are three parameters to ``updateSubscription()``:"
msgstr ""
"如果你支持在不同订阅级别之间升级或降级，则应使用 ``updateSubscription()`` 来"
"使用订阅更新流程，以更改有效订阅。与 ``purchase()`` 一样，结果由 "
"``purchases_updated`` 和 ``purchase_error`` 信号返回。\\ "
"``updateSubscription()`` 有三个参数："

msgid "The purchase token of the currently active subscription"
msgstr "当前有效订阅的购买令牌"

msgid "The product id string of the subscription SKU to change to"
msgstr "要更改到的订阅 SKU 的产品 ID 字符串"

msgid "The proration mode to apply to the subscription."
msgstr "适用于该订阅的比例分摊模式。"

msgid "The proration values are defined as:"
msgstr "比例分摊的值定义为："

msgid "Default behavior is ``IMMEDIATE_WITH_TIME_PRORATION``."
msgstr "默认行为是 ``IMMEDIATE_WITH_TIME_PRORATION``\\ 。"

msgid "Example use of ``updateSubscription``:"
msgstr "``updateSubscription`` 的示例用法："

msgid ""
"The ``confirmPriceChange()`` function can be used to launch price change "
"confirmation flow for a subscription. Pass the product id of the "
"subscription SKU subject to the price change. The result will be sent by the "
"``price_change_acknowledged`` signal."
msgstr ""
"``confirmPriceChange()`` 函数可用于启动订阅的价格变动确认流程。传递受价格变动"
"影响的订阅 SKU 的产品 ID。结果将通过 ``price_change_acknowledged`` 信号发送。"

msgid "Example use of ``confirmPriceChange()``:"
msgstr "``confirmPriceChange()`` 的示例用法："
