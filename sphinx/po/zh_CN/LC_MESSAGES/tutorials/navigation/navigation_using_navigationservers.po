#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using NavigationServer"
msgstr "使用 NavigationServer"

msgid ""
"2D and 3D version of the NavigationServer are available as :ref:"
"`NavigationServer2D<class_NavigationServer2D>` and :ref:"
"`NavigationServer3D<class_NavigationServer3D>` respectively."
msgstr ""
"NavigationServer 即导航服务器。2D 和 3D 版本的 NavigationServer 分别为 :ref:"
"`NavigationServer2D<class_NavigationServer2D>` 和 :ref:"
"`NavigationServer3D<class_NavigationServer3D>`\\ 。"

msgid ""
"Both 2D and 3D use the same NavigationServer with NavigationServer3D being "
"the primary server. The NavigationServer2D is a frontend that converts 2D "
"positions into 3D positions and back. Hence it is entirely possible (if not "
"a little cumbersome) to exclusively use the NavigationServer3D API for 2D "
"navigation."
msgstr ""
"2D 和 3D 使用的 NavigationServer 是一样的，NavigationServer3D 是主要服务器。"
"NavigationServer2D 只是一个前端，会进行 2D 位置和 3D 位置的相互转换。因此，完"
"全可以只用 NavigationServer3D 的 API 来实现 2D 导航（就是会有点繁琐）。"

msgid "Communicating with the NavigationServer"
msgstr "与 NavigationServer 通信"

msgid ""
"To work with the NavigationServer means to prepare parameters for a "
"**query** that can be sent to the NavigationServer for updates or requesting "
"data."
msgstr ""
"要使用 NavigationServer 首先就需要为\\ **请求**\\ 准备参数，这个请求会被发送"
"给 NavigationServer，用来进行更新和数据的请求。"

msgid ""
"To reference the internal NavigationServer objects like maps, regions and "
"agents RIDs are used as identification numbers. Every navigation related "
"node in the scene tree has a function that returns the RID for this node."
msgstr ""
"地图、区块、代理等 NavigationServer 内部的对象使用 RID 来进行引用，这是一种用"
"作标识符的数字。场景树中每个导航相关的节点都提供了返回该节点 RID 的函数。"

msgid "Threading and Synchronization"
msgstr "线程与同步"

msgid ""
"The NavigationServer does not update every change immediately but waits "
"until the end of the **physics frame** to synchronize all the changes "
"together."
msgstr ""
"NavigationServer 不会立即为所有更改执行更新，而是会等到\\ **物理帧**\\ 的结尾"
"再同步所有更改。"

msgid ""
"Waiting for synchronization is required to apply changes to all maps, "
"regions and agents. Synchronization is done because some updates like a "
"recalculation of the entire navigation map are very expensive and require "
"updated data from all other objects. Also the NavigationServer uses a "
"**threadpool** by default for some functionality like avoidance calculation "
"between agents."
msgstr ""
"对地图、区块、代理进行更改都需要等待同步。之所以要进行同步，是因为部分更新的"
"开销非常大，并且需要所有其他对象更新后的数据，例如重新计算整个导航地图。另外 "
"NavigationServer 的部分功能默认会使用\\ **线程池**\\ ，例如代理之间的避障计"
"算。"

msgid ""
"Waiting is not required for most ``get()`` functions that only request data "
"from the NavigationServer without making changes. Note that not all data "
"will account for changes made in the same frame. E.g. if an avoidance agent "
"changed the navigation map this frame the ``agent_get_map()`` function will "
"still return the old map before the synchronization. The exception to this "
"are nodes that store their values internally before sending the update to "
"the NavigationServer. When a getter on a node is used for a value that was "
"updated in the same frame it will return the already updated value stored on "
"the node."
msgstr ""
"大多数 ``get()`` 函数都不需要等待，因为这些函数只会从 NavigationServer 请求数"
"据，不会进行修改。请注意，并不是所有数据都会考虑到同一帧里做出的更改。比如避"
"障代理在当前帧更改了导航地图的话，那么 ``agent_get_map()`` 函数在同步之前就仍"
"然会返回旧的地图。部分节点会在向 NavigationServer 发送更新前在内部存储对应的"
"值，所以这些节点属于例外。在这种节点上使用某个值的 getter 时，如果同一帧存在"
"更新，那么返回的就是存储在该节点上的更新后的值。"

msgid ""
"The NavigationServer is **thread-safe** as it places all API calls that want "
"to make changes in a queue to be executed in the synchronization phase. "
"Synchronization for the NavigationServer happens in the middle of the "
"physics frame after scene input from scripts and nodes are all done."
msgstr ""
"NavigationServer 是\\ **线程安全**\\ 的，因为它会把所有需要执行更改的 API 调"
"用放在队列中，在同步阶段再执行。NavigationServer 的同步发生在物理帧，在脚本以"
"及节点的场景输入之后。"

msgid ""
"The important takeaway is that most NavigationServer changes take effect "
"after the next physics frame and not immediately. This includes all changes "
"made by navigation related nodes in the scene tree or through scripts."
msgstr ""
"划重点：大多数对 NavigationServer 的更改都会在下一个物理帧之后生效，不会立即"
"生效。包括场景树中导航相关节点做出的更改，以及脚本做出的更改。"

msgid "All setters and delete functions require synchronization."
msgstr "Setter 和删除函数都需要同步。"

msgid "2D and 3D NavigationServer differences"
msgstr "2D 和 3D NavigationServer 的区别"

msgid ""
"NavigationServer2D and NavigationServer3D are equivalent in functionality "
"for their dimension and both use the same NavigationServer behind the scene."
msgstr ""
"NavigationServer2D 和 NavigationServer3D 在各自维度中的功能是等价的，底层使用"
"的相同的 NavigationServer。"

msgid ""
"Strictly technical a NavigationServer2D is a myth. The NavigationServer2D is "
"a frontend to facilitate conversions of ``Vector2(x, y)`` to ``Vector3(x, "
"0.0, z)`` and back for the NavigationServer3D API. 2D uses a flat 3D mesh "
"pathfinding and the NavigationServer2D facilitates the conversions. When a "
"guide uses just NavigationServer without the 2D or 3D suffix it usually "
"works for both servers by exchange ``Vector2(x, y)`` with ``Vector3(x, 0.0, "
"z)`` or reverse."
msgstr ""
"严格来说，NavigationServer2D在技术上是一个神话。NavigationServer2D是一个前"
"端，用于帮助NavigationServer3D API将``Vector2(x, y)`` 转换为 ``Vector3(x, "
"0.0, z)``并返回。2D使用平面三维网格路径查找，NavigationServer2D便于转换。当指"
"南只使用NavigationServer而不使用2D或3D后缀时，它通常通过将 ``Vector2(x, y)`` "
"与 ``Vector3(x, 0.0, z)`` 交换或反向来对两个服务器都有效。"

msgid ""
"Technically it is possible to use the tools for creating navigation meshes "
"in one dimension for the other dimension, e.g. baking a 2D navigation mesh "
"with the 3D NavigationMesh when using flat 3D source geometry or creating 3D "
"flat navigation meshes with the polygon outline draw tools of "
"NavigationRegion2D and NavigationPolygons."
msgstr ""
"从技术上讲，可以使用工具在一个维度上为另一个维度创建导航网格，例如，当使用平"
"面三维源几何体时，使用3D NavigationMesh烘焙二维导航网格，或者使用"
"NavigationRegion2D和NavigationPolygons的多边形轮廓绘制工具创建三维平面导航网"
"格。"

msgid ""
"Any RID created with the NavigationServer2D API works on the "
"NavigationServer3D API as well and both 2D and 3D avoidance agents can exist "
"on the same map."
msgstr ""
"使用NavigationServer2D API创建的任何RID也适用于NavigationServer3D API，2D和3D"
"回避代理都可以存在于同一地图上。"

msgid ""
"Regions created in 2D and 3D will merge their navigation meshes when placed "
"on the same map and merge conditions apply. The NavigationServer does not "
"discriminate between NavigationRegion2D and NavigationRegion3D nodes as both "
"are regions on the server. By default those nodes register on different "
"navigation maps so this merge can only happen when maps are changed manually "
"e.g. with scripts."
msgstr ""
"在二维和三维中创建的区域将在放置在同一地图上时合并其导航网格，并应用合并条"
"件。NavigationServer不会区分NavigationRegion2D和NavigationRegion3D节点，因为"
"这两个节点都是服务器上的区域。默认情况下，这些节点注册在不同的导航地图上，因"
"此只有在手动更改地图（例如使用脚本）时才能进行合并。"

msgid ""
"Actors with avoidance enabled will avoid both 2D and 3D avoidance agents "
"when placed on the same map."
msgstr "启用回避的Actor在放置在同一张地图上时将同时回避2D和3D回避代理。"

msgid ""
"It is not possible to use NavigationServer2D while disabling 3D on a Godot "
"custom build."
msgstr "自定义的 Godot 构建如果禁用了 3D，则无法使用 NavigationServer2D。"

msgid "Waiting for synchronization"
msgstr "等待同步"

msgid ""
"At the start of the game, a new scene or procedural navigation changes any "
"path query to a NavigationServer will return empty or wrong."
msgstr ""
"在游戏开始时，新场景或程序导览发生变化，对导览服务器的任何路径查询都将传回空"
"或错误。"

msgid ""
"The navigation map is still empty or not updated at this point. All nodes "
"from the scene tree need to first upload their navigation related data to "
"the NavigationServer. Each added or changed map, region or agent need to be "
"registered with the NavigationServer. Afterward the NavigationServer "
"requires a **physics frame** for synchronization to update the maps, regions "
"and agents."
msgstr ""
"此时导航地图仍然为空或未更新。场景树中的所有节点都需要首先将其导航相关数据上"
"传到NavigationServer。每个添加或更改的地图、区域或代理都需要在"
"NavigationServer中注册。之后，NavigationServer需要**物理帧**进行同步，以更新"
"地图、区域和代理。"

msgid ""
"One workaround is to make a deferred call to a custom setup function (so all "
"nodes are ready). The setup function makes all the navigation changes, e.g. "
"adding procedural stuff. Afterwards the function waits for the next physics "
"frame before continuing with path queries."
msgstr ""
"一种解决方法是延迟调用自定义设置函数（这样所有节点都准备好了）。设置功能进行"
"所有导航更改，例如添加程序性内容。之后，函数在继续路径查询之前等待下一个物理"
"帧。"

msgid "Server Avoidance Callbacks"
msgstr "服务器避障回调"

msgid ""
"If RVO avoidance agents are registered for avoidance callbacks the "
"NavigationServer dispatches their ``velocity_computed`` signals just before "
"the PhysicsServer synchronization."
msgstr ""
"如果 RVO 避障代理注册了避障回调，NavigationServer 会在 PhysicsServer 同步前发"
"送对应的 ``velocity_computed`` 信号。"

msgid ""
"To learn more about NavigationAgents see :ref:"
"`doc_navigation_using_navigationagents`."
msgstr ""
"更多 NavigationAgent 相关的信息见 :ref:"
"`doc_navigation_using_navigationagents`\\ 。"

msgid ""
"The simplified order of execution for NavigationAgents that use avoidance:"
msgstr "使用避障的 NavigationAgent 的简化执行顺序如下："

msgid "physics frame starts."
msgstr "物理帧开始。"

msgid "``_physics_process(delta)``."
msgstr "``_physics_process(delta)``\\ 。"

msgid "``velocity`` property is set on NavigationAgent Node."
msgstr "设置 NavigationAgent 节点的 ``velocity`` 属性。"

msgid "Agent sends velocity and position to NavigationServer."
msgstr "代理向 NavigationServer 发送速度和位置。"

msgid "NavigationServer waits for synchronization."
msgstr "NavigationServer 等待同步。"

msgid ""
"NavigationServer synchronizes and computes avoidance velocities for all "
"registered avoidance agents."
msgstr "NavigationServer 同步并为所有注册的避障代理计算避障速度。"

msgid ""
"NavigationServer sends safe velocity vector with signals for each registered "
"avoidance agents."
msgstr "NavigationServer 通过信号为每个注册的避障代理发送安全速度向量。"

msgid ""
"Agents receive the signal and move their parent e.g. with ``move_and_slide`` "
"or ``linear_velocity``."
msgstr ""
"代理收到信号并移动父节点，例如通过 ``move_and_slide`` 或 ``linear_velocity`` "
"移动。"

msgid "PhysicsServer synchronizes."
msgstr "PhysicsServer 同步。"

msgid "physics frame ends."
msgstr "物理帧结束。"

msgid ""
"Therefore moving a physicsbody actor in the callback function with the safe "
"velocity is perfectly thread- and physics-safe as all happens inside the "
"same physics frame before the PhysicsServer commits to changes and does its "
"own calculations."
msgstr ""
"因此，在回调函数中使用安全速度来移动角色物理体无论从线程还是物理的角度看都是"
"安全的，因为相关的操作都在同一个物理帧中进行，之后 PhysicsServer 才会提交更改"
"并进行计算。"

msgid "Translation status"
msgstr "翻译状态"
