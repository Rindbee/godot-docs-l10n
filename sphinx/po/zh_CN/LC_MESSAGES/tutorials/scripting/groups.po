#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Groups"
msgstr "分组"

msgid ""
"Groups in Godot work like tags in other software. You can add a node to as "
"many groups as you want. Then, in code, you can use the SceneTree to:"
msgstr ""
"Godot 中的分组与其他软件中的标签类似。你可以将节点加入若干个分组之中，然后在"
"代码中通过 SceneTree 来："

msgid "Get a list of nodes in a group."
msgstr "获取某个分组中的节点列表。"

msgid "Call a method on all nodes in a group."
msgstr "对分组中的所有节点调用方法。"

msgid "Send a notification to all nodes in a group."
msgstr "向分组中的所有节点发送通知。"

msgid "This is a useful feature to organize large scenes and decouple code."
msgstr "这个功能可以用来组织大型场景、解耦代码。"

msgid "Managing groups"
msgstr "管理分组"

msgid ""
"Groups are created by adding a node to a new group name, and likewise they "
"are removed by removing all nodes from a given group."
msgstr ""
"将节点添加到一个新的分组名称中即可创建分组，同样，将所有节点移出某个给定的分"
"组即可移除分组。"

msgid "There are two ways to add/remove nodes to groups:"
msgstr "为分组添加/移除节点有两种方法："

msgid ""
"During execution, by calling :ref:`Node.add_to_group() "
"<class_Node_method_add_to_group>` or :ref:`Node.remove_from_group() "
"<class_Node_method_remove_from_group>`."
msgstr ""
"运行模式下，调用 :ref:`Node.add_to_group() <class_Node_method_add_to_group>` "
"或 :ref:`Node.remove_from_group() <class_Node_method_remove_from_group>`\\ 方"
"法。"

msgid "Using the Node dock"
msgstr "使用节点面板"

msgid "When done, press Ok to create it."
msgstr "完成后，按“确定”创建它。"

msgid ""
"Selected Node(s) from the Scene dock can be added into groups by marking the "
"checkbox on the left side of the groups in the Groups dock. The node(s) you "
"had selected when creating a new group will be automatically checked."
msgstr ""
"通过标记组停靠栏中组左侧的复选框，可以将场景停靠栏中的选定节点添加到组中。创"
"建新组时选择的节点将被自动选中。"

msgid ""
"All groups present in the project that were marked as Global, created from "
"any scene, will be visible under Global Groups."
msgstr "从任何场景创建的项目中标记为“全局”的所有组都将在“全局组”下可见。"

msgid ""
"Any other group derived from nodes in the current scene will appear under "
"Scene Groups."
msgstr "从当前场景中的节点派生的任何其他组都将显示在“场景组”下。"

msgid ""
"The same underlying logic is used for both Global and Scene groups. Groups "
"with the same name are considered one and the same. This feature is purely "
"organizational."
msgstr ""
"全局组和场景组使用相同的底层逻辑。同名组被视为同一组。此功能纯粹是组织性的。"

msgid "Using code"
msgstr "使用代码"

msgid ""
"You can also manage groups from scripts. The following code adds the node to "
"which you attach the script to the ``guards`` group as soon as it enters the "
"scene tree."
msgstr ""
"你也可以通过脚本来管理分组。以下代码会在脚本所附加的节点进入场景树时，将其加"
"入 ``guards``\\ （守卫）分组。"

msgid ""
"Imagine you're creating an infiltration game. When an enemy spots the "
"player, you want all guards and robots to be on alert."
msgstr ""
"想象一下你正在制作一个潜入类游戏，敌人发现玩家后，希望所有守卫和机器人都进入"
"警觉状态。"

msgid ""
"In the fictional example below, we use ``SceneTree.call_group()`` to alert "
"all enemies that the player was spotted."
msgstr ""
"下面的例子中，我们使用 ``SceneTree.call_group()`` 来通知所有敌人：玩家被发现"
"了。"

msgid ""
"The above code calls the function ``enter_alert_mode`` on every member of "
"the group ``guards``."
msgstr ""
"以上代码会对 ``gurads`` 分组中的所有成员节点调用 ``enter_alter_mode`` 函数。"

msgid ""
"To get the full list of nodes in the ``guards`` group as an array, you can "
"call :ref:`SceneTree.get_nodes_in_group() "
"<class_SceneTree_method_get_nodes_in_group>`:"
msgstr ""
"要获取由 ``guards`` 分组中的所有节点所构成的数组，请调用 :ref:`SceneTree."
"get_nodes_in_group() <class_SceneTree_method_get_nodes_in_group>`\\ ："

msgid ""
"The :ref:`SceneTree <class_SceneTree>` class provides many more useful "
"methods to interact with scenes, their node hierarchy, and groups. It allows "
"you to switch scenes easily or reload them, quit the game or pause and "
"unpause it. It also provides useful signals."
msgstr ""
":ref:`SceneTree <class_SceneTree>` 类提供了许多有用的方法，例如与场景、场景节"
"点层次结构及节点编组交互，还可以使你可以轻松切换场景或重新加载场景、退出游戏"
"或暂停和恢复运行游戏。不仅如此，该类还提供了一些有用的信号。"
