#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom performance monitors"
msgstr "自定义性能监视器"

msgid "Introduction"
msgstr "前言"

msgid ""
"As explained in the :ref:`doc_debugger_panel` documentation, Godot features "
"a **Debugger > Monitors** bottom panel that allows tracking various values "
"with graphs showing their evolution over time. The data for those graphs is "
"sourced from the engine's :ref:`class_Performance` singleton."
msgstr ""
"如 :ref:`doc_debugger_panel` 文档所述，Godot 中的 **调试器 > 监视** 底部面板"
"可以跟踪显示各种值，用图表展示这些值随时间的变化。这些图的数据来源于引擎"
"的 :ref:`class_Performance` 单例。"

msgid ""
"Since Godot 4.0, you can declare custom values to be displayed in the "
"Monitors tab. Example use cases for custom performance monitors include:"
msgstr ""
"从 Godot 4.0 开始，你可以声明要在“监视”选项卡中显示的自定义值。自定义性能监视"
"器的示例用例包括："

msgid "Creating a custom performance monitor"
msgstr "创建自定义性能监视器"

msgid ""
"In this example, we'll create a custom performance monitor to track how many "
"enemies are present in the currently running project."
msgstr ""
"在这个例子中，我们将创建一个自定义性能监视器来跟踪当前运行的项目中存在多少敌"
"人。"

msgid ""
"The main scene features a :ref:`class_Timer` node with the following script "
"attached:"
msgstr "主场景中有一个 :ref:`class_Timer` 节点，附加了以下脚本："

msgid ""
"The second parameter "
"of :ref:`Performance.add_custom_monitor<class_Performance_method_add_custom_monitor>` "
"is a :ref:`class_Callable`."
msgstr ""
":ref:`Performance.add_custom_monitor<class_Performance_method_add_custom_monitor>` "
"方法的第二个参数是一个 :ref:`class_Callable`\\ 。"

msgid ""
"``enemy.tscn`` is a scene with a Node2D root node and Timer child node. The "
"Node2D has the following script attached:"
msgstr ""
"``enemy.tscn`` 是一个根节点为 Node2D、带有 Timer 子节点的场景。Node2D 附加了"
"以下脚本："

msgid ""
"In this example, since we spawn 20 enemies per second, and each enemy "
"despawns 2.5 seconds after they spawn, we expect the number of enemies "
"present in the scene to stabilize to 50. We can make sure about this by "
"looking at the graph."
msgstr ""
"在这个例子中，由于我们每秒生成20个敌人，每个敌人在生成后2.5秒就会死亡，我们预"
"计场景中存在的敌人数量将稳定在50个。我们可以通过查看图表来确定这一点。"

msgid "Example editor graph from a custom performance monitor"
msgstr "自定义性能监视器的编辑器图表示例"

msgid ""
"The performance monitor handling code doesn't have to live in the same "
"script as the nodes themselves. You may choose to move the performance "
"monitor registration and getter function to an :ref:`autoload "
"<doc_singletons_autoload>` instead."
msgstr ""
"性能监视器处理代码不必与节点本身位于同一脚本中。你可以选择将性能监视器的注册"
"和 getter 函数移动到\\ :ref:`自动加载 <doc_singletons_autoload>`\\ 中。"

msgid "Querying a performance monitor in a project"
msgstr "在项目中查询性能监视器"

msgid ""
"If you wish to display the value of the performance monitor in the running "
"project's window (rather than the editor), use "
"``Performance.get_custom_monitor(\"category/name\")`` to fetch the value of "
"the custom monitor. You can display the value using "
"a :ref:`class_Label`, :ref:`class_RichTextLabel`, :ref:`doc_custom_drawing_in_2d`, :ref:`doc_3d_text`, "
"etc."
msgstr ""
"如果你想在运行中的项目窗口（而不是编辑器窗口）中显示性能监视器的值，可以使用 "
"``Performance.get_custom_monitor(\"分类/名称\")`` 来获取自定义监视器的值，这"
"个值可以放在 :ref:`class_Label`\\ 、\\ :ref:`class_RichTextLabel`\\ 、"
"\\ :ref:`doc_custom_drawing_in_2d`\\ 、\\ :ref:`doc_3d_text` 中显示。"

msgid ""
"This method can be used in exported projects as well (debug and release "
"mode), which allows you to create visualizations outside the editor."
msgstr ""
"此方法也可用于导出项目（调试和发布模式），你可以在编辑器外创建可视化内容。"
