#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDExtension C++ example"
msgstr "GDExtension C++ 示例"

msgid "Introduction"
msgstr "前言"

msgid ""
"The C++ bindings for GDExtension are built on top of the C GDExtension API "
"and provide a nicer way to \"extend\" nodes and other built-in classes in "
"Godot using C++. This new system allows the extension of Godot to nearly the "
"same level as statically linked C++ modules."
msgstr ""
"GDExtension 的 C++ 绑定是在 C GDExtension API 基础之上构建的，为扩展 Godot 中"
"的节点和其他内置类提供了一种更为简洁的方法。这一新系统使得通过 GDExtension "
"对 Godot 进行扩展的能力几乎可以与静态链接的 C++ 模块相媲美。"

msgid ""
"You can download the included example in the test folder of the godot-cpp "
"repository `on GitHub <https://github.com/godotengine/godot-cpp>`__."
msgstr ""
"你可以在 `GitHub <https://github.com/godotengine/godot-cpp>`__ 上的 godot-"
"cpp 仓库的测试文件夹中下载包含的示例。"

msgid "Setting up the project"
msgstr "设置项目"

msgid "There are a few prerequisites you'll need:"
msgstr "这里有一些前置需求是你需要的："

msgid "a Godot 4 executable,"
msgstr "一份 Godot 4 可执行文件，"

msgid "a C++ compiler,"
msgstr "一个 C++ 编译器，"

msgid "SCons as a build tool,"
msgstr "作为构建工具的 SCons ，"

msgid ""
"a copy of the `godot-cpp repository <https://github.com/godotengine/godot-"
"cpp>`__."
msgstr ""
"`godot-cpp 仓库 <https://github.com/godotengine/godot-cpp>`__\\ 的副本。"

msgid ""
"See also :ref:`Configuring an IDE <toc-devel-configuring_an_ide>` "
"and :ref:`Compiling <toc-devel-compiling>` as the build tools are identical "
"to the ones you need to compile Godot from source."
msgstr ""
"另见《\\ :ref:`配置 IDE <toc-devel-configuring_an_ide>`\\ 》和《\\ :ref:`编"
"译 <toc-devel-compiling>`\\ 》，与从源码编译 Godot 所需的构建工具是一致的。"

msgid ""
"You can download the `godot-cpp repository <https://github.com/godotengine/"
"godot-cpp>`__ from GitHub or let Git do the work for you. Note that this "
"repository has different branches for different versions of Godot. "
"GDExtensions will not work in older versions of Godot (only Godot 4 and up) "
"and vice versa, so make sure you download the correct branch."
msgstr ""
"你可以从 GitHub 下载 `godot-cpp 仓库 <https://github.com/godotengine/godot-"
"cpp>`__\\ ，或者让 Git 为你完成这项工作。请注意，这个仓库为不同版本的 Godot "
"提供了不同的分支。GDExtensions 仅支持 Godot 的新版本（Godot 4 及更高版本），"
"反之亦然，因此请确保你下载的是正确的分支。"

msgid ""
"To use `GDExtension <https://godotengine.org/article/introducing-gd-"
"extensions>`__ you need to use the godot-cpp branch that matches the version "
"of Godot that you are targeting. For example, if you're targeting Godot 4.1, "
"use the ``4.1`` branch. Throughout this tutorial we use ``4.x``, which will "
"need to be replaced with the version of Godot you are targeting."
msgstr ""
"要使用 `GDExtension <https://godotengine.org/article/introducing-gd-"
"extensions>`__\\，你需要使用与目标 Godot 版本相匹配的 godot-cpp 分支。例如你"
"的目标是 Godot 4.1，那么应该使用 ``4.1`` 分支，这也是本教程中所展示的版本。"

msgid ""
"The ``master`` branch is the development branch which is updated regularly "
"to work with Godot's ``master`` branch."
msgstr ""
"``master`` 分支是开发分支，它会定期更新以与 Godot 的 ``master`` 分支保持兼"
"容。"

msgid ""
"Our long-term goal is that GDExtensions targeting an earlier version of "
"Godot will work in later minor versions, but not vice-versa. For example, a "
"GDExtension targeting Godot 4.1 should work just fine in Godot 4.2, but one "
"targeting Godot 4.2 won't work in Godot 4.1."
msgstr ""
"我们的长期目标是，面向早先版本的 GDExtension 在后续的小版本中依然能够运作，但"
"反之则不然。例如面向 Godot 4.1 的 GDExtension 应当在 Godot 4.2 中正常运作，但"
"面向 Godot 4.2 的则不能在 Godot 4.1 中运作。"

msgid ""
"However, GDExtension is currently *experimental*, which means that we may "
"break compatibility in order to fix major bugs or include critical features. "
"For example, GDExtensions created for Godot 4.0 aren't compatible with Godot "
"4.1 (see :ref:`updating_your_gdextension_for_godot_4_1`)."
msgstr ""
"不过 GDExtension 目前仍是\\ *实验性的*\\ ，这就意味着我们为了修复严重的 bug "
"或引入重大的特性，可能会牺牲兼容性。例如，为 Godot 4.0 创建的 GDExtension 与 "
"Godot 4.1 并不兼容（见"
"《\\ :ref:`updating_your_gdextension_for_godot_4_1`\\ 》）。"

msgid ""
"If you are versioning your project using Git, it is recommended to add it as "
"a Git submodule:"
msgstr "如果你使用 Git 对项目进行版本控制，最好将项目添加为 Git 子模块："

msgid "Alternatively, you can also clone it to the project folder:"
msgstr "也可以直接将该项目克隆到项目文件夹内："

msgid ""
"If you decide to download the repository or clone it into your folder, make "
"sure to keep the folder layout the same as we've setup here. Much of the "
"code we'll be showcasing here assumes the project has this layout."
msgstr ""
"如果你决定下载仓库或将其克隆到你的文件夹中，请确保与我们这里所设置的文件夹结"
"构相同，我们假定将在此展示的许多代码都基于这种项目结构。"

msgid ""
"If you cloned the example from the link specified in the introduction, the "
"submodules are not automatically initialized. You will need to execute the "
"following commands:"
msgstr ""
"如果从介绍中指定的链接克隆示例, 子模块不会自动初始化. 你需要执行以下命令:"

msgid "This will initialize the repository in your project folder."
msgstr "这会将该仓库克隆到你的项目文件夹中。"

msgid "Building the C++ bindings"
msgstr "构建 C++ 绑定"

msgid ""
"Now that we've downloaded our prerequisites, it is time to build the C++ "
"bindings."
msgstr "现在我们已经下载了我们的前置需求, 现在是构建C++绑定的时候了."

msgid ""
"The repository contains a copy of the metadata for the current Godot "
"release, but if you need to build these bindings for a newer version of "
"Godot, call the Godot executable:"
msgstr ""
"仓库包含当前 Godot 版本的元数据副本，如果你需要为较新版本的 Godot 构建这些绑"
"定，请调用 Godot 可执行文件："

msgid ""
"The resulting ``extension_api.json`` file will be created in the "
"executable's directory. Copy it to the project folder and add "
"``custom_api_file=<PATH_TO_FILE>`` to the scons command below."
msgstr ""
"生成的 ``extension_api.json`` 文件将会出现在可执行文件的目录中，将其复制到项"
"目文件夹中，并在下面的 scons 命令中添加 ``custom_api_file=<PATH_TO_FILE>`` 参"
"数。"

msgid ""
"To generate and compile the bindings, use this command (replacing "
"``<platform>`` with ``windows``, ``linux`` or ``macos`` depending on your "
"OS):"
msgstr ""
"用该命令来生成、编译绑定（取决于你的操作系统，用 ``windows`` , ``linux`` 或 "
"``macos`` 代替 ``<platform>`` ）："

msgid ""
"The build process automatically detects the number of CPU threads to use for "
"parallel builds. To specify a number of CPU threads to use, add ``-jN`` at "
"the end of the SCons command line where ``N`` is the number of CPU threads "
"to use."
msgstr ""
"构建过程会自动检测可用于并行构建的 CPU 线程数量。要指定使用的 CPU 线程数，请"
"在 SCons 命令行的末尾添加 ``-jN``\\，其中 ``N`` 是你希望使用的 CPU 线程数量。"

msgid ""
"This step will take a while. When it is completed, you should have static "
"libraries that can be compiled into your project stored in ``godot-cpp/bin/"
"``."
msgstr ""
"这一步将需要一段时间。完成后，你应该有一个静态库，可以编译到你的项目中，存储"
"在 ``godot-cpp / bin /`` 内。"

msgid "You may need to add ``bits=64`` to the command on Windows or Linux."
msgstr "你可能需要在 Windows 或 Linux 的命令行中添加 ``bits=64``\\ 。"

msgid "Creating a simple plugin"
msgstr "创建一个简单的插件"

msgid ""
"Now it's time to build an actual plugin. We'll start by creating an empty "
"Godot project in which we'll place a few files."
msgstr ""
"现在是构建实际插件的时候了。我们首先创建一个空的 Godot 项目，我们将在其中放置"
"一些文件。"

msgid ""
"Open Godot and create a new project. For this example, we will place it in a "
"folder called ``demo`` inside our GDExtension's folder structure."
msgstr ""
"打开 Godot 并创建一个新项目。对于该示例，我们将其放在我们的 GDExtension 的文"
"件夹结构中名为 ``demo`` 的文件夹中。"

msgid ""
"In our demo project, we'll create a scene containing a Node called \"Main\" "
"and we'll save it as ``main.tscn``. We'll come back to that later."
msgstr ""
"在我们的演示项目中，我们将创建一个包含名为 \"Main\" 的节点的场景，我们将其保"
"存为 ``main.tscn`` ，稍后再回过头来看看。"

msgid ""
"Back in the top-level GDExtension module folder, we're also going to create "
"a subfolder called ``src`` in which we'll place our source files."
msgstr ""
"回到顶层 GDExtension 模块文件夹，我们还要创建一个名为 ``src`` 的子文件夹，将"
"在其中放置源文件。"

msgid ""
"You should now have ``demo``, ``godot-cpp``, and ``src`` directories in your "
"GDExtension module."
msgstr ""
"在你的 GDExtension 模块中，你现在应该有 ``demo`` 、 ``godot-cpp`` 和 ``src`` "
"这三个目录。"

msgid "Your folder structure should now look like this:"
msgstr "你的文件结构应如下所示："

msgid ""
"In the ``src`` folder, we'll start with creating our header file for the "
"GDExtension node we'll be creating. We will name it ``gdexample.h``:"
msgstr ""
"在 ``src`` 文件夹中，我们将首先为我们将要创建的 GDExtension 节点创建头文件，"
"将其命名为 ``gdexample.h`` ："

msgid "gdextension_cpp_example/src/gdexample.h"
msgstr "gdextension_cpp_example/src/gdexample.h"

msgid ""
"There are a few things of note to the above. We include ``sprite2d.hpp`` "
"which contains bindings to the Sprite2D class. We'll be extending this class "
"in our module."
msgstr ""
"以上有些需要注意的地方：我们导入了 ``sprite2d.hpp``\\ ，其中包含 Sprite2D 类"
"的绑定。我们将在我们的模块中扩展这个类。"

msgid ""
"We're using the namespace ``godot``, since everything in GDExtension is "
"defined within this namespace."
msgstr ""
"我们使用命名空间 ``godot``\\ ，因为 GDExtension 中的所有内容都在此命名空间中"
"定义。"

msgid ""
"Then we have our class definition, which inherits from our Sprite2D through "
"a container class. We'll see a few side effects of this later on. The "
"``GDCLASS`` macro sets up a few internal things for us."
msgstr ""
"然后我们就是类定义，它通过一个容器类继承 Sprite2D。我们稍后会看到这样做的一些"
"副作用。\\ ``GDCLASS`` 宏为我们设置了一些内部内容。"

msgid "After that, we declare a single member variable called ``time_passed``."
msgstr "之后, 我们声明一个名为 ``time_passed`` 的成员变量."

msgid ""
"In the next block we're defining our methods, we have our constructor and "
"destructor defined, but there are two other functions that will likely look "
"familiar to some, and one new method."
msgstr ""
"下一个代码块中我们定义的是方法、构造函数和析构函数，还有两个其他函数可能有人"
"看起来比较熟悉，另外还有一个新的方法。"

msgid ""
"The first is ``_bind_methods``, which is a static function that Godot will "
"call to find out which methods can be called and which properties it "
"exposes. The second is our ``_process`` function, which will work exactly "
"the same as the ``_process`` function you're used to in GDScript."
msgstr ""
"第一个是 ``_bind_methods``\\ ，这是一个静态函数，Godot 会调用它来了解可以调用"
"哪些方法以及它暴露了哪些属性。第二个是我们的 ``_process`` 函数，它的工作方式"
"与你在 GDScript 中熟悉的 ``_process`` 函数完全相同。"

msgid "Let's implement our functions by creating our ``gdexample.cpp`` file:"
msgstr "所以, 让我们通过创建 ``gdexample.cpp`` 文件来实现我们的函数:"

msgid "gdextension_cpp_example/src/gdexample.cpp"
msgstr "gdextension_cpp_example/src/gdexample.cpp"

msgid ""
"This one should be straightforward. We're implementing each method of our "
"class that we defined in our header file."
msgstr "这一步应该非常直截了当。我们要实现头文件中定义的类中的每个方法。"

msgid ""
"Note our ``_process`` function, which keeps track of how much time has "
"passed and calculates a new position for our sprite using a sine and cosine "
"function."
msgstr ""
"注意 ``_process`` 函数，它用于记录经过的时间，并利用正弦和余弦函数计算精灵的"
"新位置。"

msgid "gdextension_cpp_example/src/register_types.cpp"
msgstr "gdextension_cpp_example/src/register_types.cpp"

msgid ""
"At last, we need the header file for the ``register_types.cpp`` named "
"``register_types.h``."
msgstr ""
"最后，我们需要为 ``register_types.cpp`` 创建一个头文件，命名为 "
"``register_types.h``\\ 。"

msgid "gdextension_cpp_example/src/register_types.h"
msgstr "gdextension_cpp_example/src/register_types.h"

msgid "Compiling the plugin"
msgstr "编译插件"

msgid ""
"This ``SConstruct`` file was written to be used with the latest ``godot-"
"cpp`` master, you may need to make small changes using it with older "
"versions or refer to the ``SConstruct`` file in the Godot 4.x documentation."
msgstr ""
"这个 ``SConstruct`` 文件是针对最新的 ``godot-cpp`` 主分支编写的，用于更早版本"
"的话可能需要略微进行一些修改，也可以参考 Godot 4.x 文档中的 ``SConstruct`` 文"
"件。"

msgid ""
"Once you've downloaded the ``SConstruct`` file, place it in your GDExtension "
"folder structure alongside ``godot-cpp``, ``src`` and ``demo``, then run:"
msgstr ""
"下载 ``SConstruct`` 文件后，请将其放在你的 GDExtension 文件夹中和 ``godot-"
"cpp``\\ 、\\ ``godot-headers`` 和 ``demo`` 平级的位置，然后运行："

msgid "You should now be able to find the module in ``demo/bin/<platform>``."
msgstr "你现在应该能够在 ``demo/bin/<platform>`` 中找到该模块。"

msgid ""
"Here, we've compiled both godot-cpp and our gdexample library as debug "
"builds. For optimized builds, you should compile them using the "
"``target=template_release`` switch."
msgstr ""
"我们这里是将 godot-cpp 和 gdexample 库都编译为了调试构建。需要优化构建的话，"
"编译时请使用 ``target=template_release`` 开关。"

msgid "Using the GDExtension module"
msgstr "使用 GDExtension 模块"

msgid ""
"Before we jump back into Godot, we need to create one more file in ``demo/"
"bin/``."
msgstr "回到 Godot 之前我们还需要在 ``demo/bin/`` 中再创建一个文件。"

msgid ""
"This file lets Godot know what dynamic libraries should be loaded for each "
"platform and the entry function for the module. It is called "
"``gdexample.gdextension``."
msgstr ""
"这个文件的作用是让 Godot 知道每个平台对应需要加载哪个动态库，以及模块的入口函"
"数。这个文件的文件名为 ``gdexample.gdextension``\\ 。"

msgid ""
"The ``libraries`` section is the important bit: it tells Godot the location "
"of the dynamic library in the project's filesystem for each supported "
"platform. It will also result in *just* that file being exported when you "
"export the project, which means the data pack won't contain libraries that "
"are incompatible with the target platform."
msgstr ""
"``libraries`` 部分很重要：它的作用是告诉 Godot 各个支持的平台对应的动态库在项"
"目文件系统中的位置。因此导出项目时，也\\ *只会*\\ 导出对应的文件，也就是说，"
"数据包中不会包含与目标平台不兼容的库文件。"

msgid ""
"Finally, the ``dependencies`` section allows you to name additional dynamic "
"libraries that should be included as well. This is important when your "
"GDExtension plugin implements someone else's library and requires you to "
"supply a third-party dynamic library with your project."
msgstr ""
"最后，你可以在 ``dependencies`` 部分中列出需要额外包含的动态库。如果你的 "
"GDExtension 插件实现了他人的库，需要在项目中提供第三方动态库的话，就会用到这"
"个部分。"

msgid "Here is another overview to check the correct file structure:"
msgstr "以下是另一个检查正确文件结构的概述："

msgid "We're finally ready to run the project:"
msgstr "我们终于准备好运行这个项目了:"

msgid "Adding properties"
msgstr "添加属性"

msgid ""
"In our ``gdexample.cpp`` file we need to make a number of changes, we will "
"only show the methods we end up changing, don't remove the lines we're "
"omitting:"
msgstr ""
"在我们的 ``gdexample.cpp`` 文件中, 我们需要进行一些更改, 我们只会显示我们最终"
"更改的方法, 不要删除我们省略的行:"

msgid ""
"Once you compile the module with these changes in place, you will see that a "
"property has been added to our interface. You can now change this property "
"and when you run your project, you will see that our Godot icon travels "
"along a larger figure."
msgstr ""
"使用这些更改编译模块后，就会看到界面上加入了一个属性。你现在可以更改此属性，"
"当运行项目时，你将看到我们的 Godot 图标沿着更大的数字移动。"

msgid ""
"Let's do the same but for the speed of our animation and use a setter and "
"getter function. Our ``gdexample.h`` header file again only needs a few more "
"lines of code:"
msgstr ""
"让我们做同样的事情但是为了我们动画的速度并使用 setter 和 getter 函数。我们的 "
"``gdexample.h`` 头文件再次只需要几行代码："

msgid ""
"This requires a few more changes to our ``gdexample.cpp`` file, again we're "
"only showing the methods that have changed so don't remove anything we're "
"omitting:"
msgstr ""
"这需要对我们的 ``gdexample.cpp`` 文件进行一些更改, 同样我们只显示已更改的方"
"法, 所以不要删除我们忽略的任何内容:"

msgid "Signals"
msgstr "信号"

msgid "This is the required syntax:"
msgstr "这是必需的语法："

msgid ""
"Note that you can only call ``my_method`` if you've previously registered it "
"in your ``_bind_methods`` method. Otherwise Godot will not know about the "
"existence of ``my_method``."
msgstr ""
"请注意，只有在 ``_bind_methods`` 方法中注册之后才能调用 ``my_method``\\ 。否"
"则 Godot 无法得知 ``my_method`` 的存在。"

msgid ""
"To learn more about ``Callable``, check out the class reference "
"here: :ref:`Callable <class_Callable>`."
msgstr ""
"想要进一步了解 ``Callable`` 请参考 :ref:`Callable <class_Callable>`\\ 。"

msgid ""
"Having your object sending out signals is more common. For our wobbling "
"Godot icon, we'll do something silly just to show how it works. We're going "
"to emit a signal every time a second has passed and pass the new location "
"along."
msgstr ""
"让对象发出信号更为常见。对于我们摇摆不定的 Godot 图标，我们会做一些愚蠢的事情"
"来展示它是如何工作的。每过一秒钟我们就会发出一个信号并传递新的位置。"

msgid ""
"In our ``gdexample.h`` header file, we need to define a new member "
"``time_emit``:"
msgstr ""
"在我们的 ``gdexample.h`` 头文件中，我们需要定义一个新成员 ``time_emit``\\ ："

msgid ""
"This time, the changes in ``gdexample.cpp`` are more elaborate. First, "
"you'll need to set ``time_emit = 0.0;`` in either our ``_init`` method or in "
"our constructor. We'll look at the other 2 needed changes one by one."
msgstr ""
"``gdexample.cpp`` 这次的修改有点复杂。首先，你需要在我们的 ``_init`` 方法或构"
"造函数中设置 ``time_emit = 0.0``\\ 。另外两个修改我们将逐一查看。"

msgid ""
"Here, our ``ADD_SIGNAL`` macro can be a single call with a ``MethodInfo`` "
"argument. ``MethodInfo``'s first parameter will be the signal's name, and "
"its remaining parameters are ``PropertyInfo`` types which describe the "
"essentials of each of the method's parameters. ``PropertyInfo`` parameters "
"are defined with the data type of the parameter, and then the name that the "
"parameter will have by default."
msgstr ""
"在这里，我们的 ``ADD_SIGNAL`` 宏可以通过一个包含 ``MethodInfo`` 参数的单次调"
"用来实现。\\ ``MethodInfo`` 的第一个参数是信号的名称，剩下的参数是 "
"``PropertyInfo`` 类型，描述方法每个参数的基本信息。\\ ``PropertyInfo`` 参数通"
"过定义参数的数据类型，以及参数的默认名称来进行说明。"

msgid "Next, we'll need to change our ``_process`` method:"
msgstr "接下来我们需要修改我们的 ``_process`` 方法："

msgid ""
"After a second has passed, we emit our signal and reset our counter. We can "
"add our parameter values directly to ``emit_signal``."
msgstr ""
"经过一秒钟后， 我们发出信号并重置我们的计数器。我们可以将参数值直接添加给 "
"``emit_signal``\\ 。"

msgid "Every second, we output our position to the console."
msgstr "每一秒，我们都会将我们的位置输出到控制台。"

msgid "Next steps"
msgstr "下一步"
