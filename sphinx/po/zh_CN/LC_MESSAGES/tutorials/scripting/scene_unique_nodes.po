#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Scene Unique Nodes"
msgstr "场景唯一节点"

msgid "Introduction"
msgstr "前言"

msgid ""
"Using ``get_node()`` to reference nodes from a script can sometimes be "
"fragile. If you move a button in a UI scene from one panel to another, the "
"button's node path changes, and if a script uses ``get_node()`` with a hard-"
"coded node path, the script will not be able to find the button anymore."
msgstr ""
"在脚本中使用 ``get_node()`` 来引用节点在某些情况下可能比较脆弱。如果你把 UI "
"场景里的某个按钮移到了别的面板里，那么这个按钮的节点路径就会发生改变，而如果"
"脚本中正好使用了写死的节点路径来调用 ``get_node()``\\ ，那这样一来这个脚本就"
"无法再找到这个按钮了。"

msgid ""
"In situations like this, the node can be turned into a scene unique node to "
"avoid having to update the script every time the node's path is changed."
msgstr ""
"类似这种情况，可以将节点设为场景唯一节点，这样该节点的路径发生变化时就不必再"
"更新脚本了。"

msgid "Creation and usage"
msgstr "创建与使用"

msgid ""
"In the Scene tree dock, right-click on a node and select **Access as Unique "
"Name** in the context menu."
msgstr ""
"在场景树面板中，右键单击节点并在上下文菜单中选择\\ **作为唯一名称访问**\\ 。"

msgid ""
"After selecting the option, the node will now have a percent symbol (**%**) "
"next to its name in the scene tree:"
msgstr "勾选后，场景树中该节点的名称旁边就会显示一个百分号（\\ **%**\\ ）："

msgid ""
"You can now use the node in your script. For example, you can reference it "
"with a ``get_node()`` method call by typing the % symbol, followed by the "
"node's name:"
msgstr ""
"现在你就可以在脚本中使用这个节点了。例如先打一个 % 符号，在后面跟上节点的名"
"称，这样就可以使用 ``get_node()`` 方法来引用这个节点："

msgid "Same-scene limitation"
msgstr "同场景限制"

msgid ""
"A scene unique node can only be retrieved by a node inside the same scene. "
"To demonstrate this limitation, consider this example **Player** scene that "
"instances a **Sword** scene:"
msgstr ""
"场景唯一节点只能获取同一场景中的节点。我们可以举些例子来演示一下，比如这个示"
"例场景是在 **Player** 场景中实例化了一个 **Sword** 场景："

msgid ""
"Here are the results of ``get_node()`` calls inside the **Player** script:"
msgstr "以下是在 **Player** 脚本中调用 ``get_node()`` 的结果："

msgid "``get_node(\"%Eyes\")`` returns the **Eyes** node."
msgstr "``get_node(\"%Eyes\")`` 会返回 **Eyes** 节点。"

msgid "``get_node(\"%Hilt\")`` returns ``null``."
msgstr "``get_node(\"%Hilt\")`` 会返回 ``null``\\ 。"

msgid ""
"These are the results of ``get_node()`` calls inside the **Sword** script:"
msgstr "以下是在 **Sword** 脚本中调用 ``get_node()`` 的结果："

msgid "``get_node(\"%Eyes\")`` returns ``null``."
msgstr "``get_node(\"%Eyes\")`` 会返回 ``null``\\ 。"

msgid "``get_node(\"%Hilt\")`` returns the **Hilt** node."
msgstr "``get_node(\"%Hilt\")`` 会返回 **Hilt** 节点。"

msgid ""
"If a script has access to a node in another scene, it can call "
"``get_node()`` on that node to get scene unique nodes from that node's "
"scene. This also works in a node path, which avoids multiple ``get_node()`` "
"calls. Here are two ways to get the **Hilt** node from the **Player** script "
"using scene unique nodes:"
msgstr ""
"如果脚本能够获取到另一个场景中的节点，那么就可以调用该节点的 ``get_node()`` "
"来获取该节点所在场景中的场景唯一节点。你也可以在节点路径中做类似的操作，从而"
"避免多次调用 ``get_node()``\\ 。以下两种方法均可从 **Player** 脚本中利用场景"
"唯一节点来获取 **Hilt** 节点："

msgid ""
"``get_node(\"Hand/Sword\").get_node(\"%Hilt\")`` returns the **Hilt** node."
msgstr ""
"``get_node(\"Hand/Sword\").get_node(\"%Hilt\")`` 会返回 **Hilt** 节点。"

msgid "``get_node(\"Hand/Sword/%Hilt\")`` also returns the **Hilt** node."
msgstr "``get_node(\"Hand/Sword/%Hilt\")`` 也会返回 **Hilt** 节点。"

msgid ""
"Scene unique names don't only work at the end of a node path. They can be "
"used in the middle to navigate from one node to another. For example, the "
"**Sword** node is marked as a scene unique node in the **Player** scene, so "
"this is possible:"
msgstr ""
"场景唯一名称不止可以用在节点路径的末尾，也可以用在路径的中间来实现跳转。例如 "
"**Player** 场景中的 **Sword** 节点就是一个场景唯一节点，因此可以这样写："

msgid "``get_node(\"%Sword/%Hilt\")`` returns the **Hilt** node."
msgstr "``get_node(\"%Sword/%Hilt\")`` 会返回 **Hilt** 节点。"

msgid "Alternatives"
msgstr "替代方案"

msgid ""
"Scene unique nodes are a useful tool to navigate a scene. However, there are "
"some situations where other techniques may be better."
msgstr ""
"使用场景唯一节点可以很方便地在场景中进行跳转。但是有些情况下其他写法会更好一"
"些。"

msgid ""
"A :ref:`Group <doc_groups>` allows locating a node (or a group of many "
"nodes) from any other node, no matter what scene the two nodes are located "
"in."
msgstr ""
"使用\\ :ref:`分组 <doc_groups>`\\ 可以从任意节点定位到某个节点（或一组节"
"点），无需考虑所处的场景。"

msgid ""
"A :ref:`Singleton (Autoload) <doc_singletons_autoload>` is an always loaded "
"node that can be accessed directly by any node regardless of the scene. "
"These are useful when some data or functionality is shared globally."
msgstr ""
":ref:`单例（自动加载） <doc_singletons_autoload>`\\ 是一种始终存在的节点，任"
"何节点都可以直接访问，无需考虑所处的场景。适合需要全局共享数据或功能的时候使"
"用。"

msgid ""
":ref:`Node.find_child() <class_Node_method_find_child>` finds a node by name "
"without knowing its full path. This seems similar to a scene unique node, "
"but this method is able to find nodes in nested scenes, and doesn't require "
"marking the node in the scene editor in any way. However, this method is "
"slow. Scene unique nodes are cached by Godot and are fast to retrieve, but "
"each time the method is called, ``find_child()`` needs to check every "
"descendant (every child, grandchild, and so on)."
msgstr ""
":ref:`Node.find_child() <class_Node_method_find_child>` 可以根据名称来查找节"
"点，无需知道完整路径。这种做法看上去和场景唯一节点类似，并且可以查找到嵌套场"
"景里的节点，也不需要在场景编辑器里标记节点。但是这个方法相对较慢。Godot 会缓"
"存场景唯一节点，所以获取的时候比较快，而调用 ``find_child()`` 时则需要查找每"
"一个后代节点（子节点、孙节点等）。"

msgid "Translation status"
msgstr "翻译状态"
