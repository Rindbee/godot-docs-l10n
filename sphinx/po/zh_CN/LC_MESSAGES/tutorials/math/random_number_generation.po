#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Random number generation"
msgstr "随机数生成"

msgid ""
"Many games rely on randomness to implement core game mechanics. This page "
"guides you through common types of randomness and how to implement them in "
"Godot."
msgstr ""
"许多游戏依靠随机性来实现核心游戏机制. 本页将指导你了解常见的随机性类型, 以及"
"如何在Godot中实现它们."

msgid ""
"After giving you a brief overview of useful functions that generate random "
"numbers, you will learn how to get random elements from arrays, "
"dictionaries, and how to use a noise generator in GDScript. Lastly, we'll "
"take a look at cryptographically secure random number generation and how it "
"differs from typical random number generation."
msgstr ""
"在简要概述生成随机数的实用函数之后，你将学习如何从数组、字典中获取随机元素，"
"以及如何在 GDScript 中使用噪点生成器。最后，我们将了解加密安全的随机数生成以"
"及它与典型随机数生成的区别。"

msgid ""
"Computers cannot generate \"true\" random numbers. Instead, they rely on "
"`pseudorandom number generators <https://en.wikipedia.org/wiki/"
"Pseudorandom_number_generator>`__ (PRNGs)."
msgstr ""
"计算机不能产生“真正的”随机数。相反，它们依赖\\ `伪随机数生成器 <https://"
"en.wikipedia.org/wiki/Pseudorandom_number_generator>`__\\ （PRNG）。"

msgid ""
"Godot internally uses the `PCG Family <https://www.pcg-random.org/>`__ of "
"pseudorandom number generators."
msgstr ""
"Godot内部使用`PCG Family <https://www.pcg-random.org/>`__ of 伪随机数生成器。"

msgid "Global scope versus RandomNumberGenerator class"
msgstr "全局作用域 vs RandomNumberGenerator 类"

msgid ""
"Godot exposes two ways to generate random numbers: via *global scope* "
"methods or using the :ref:`class_RandomNumberGenerator` class."
msgstr ""
"Godot 提供了两种生成随机数的方式：通过\\ *全局作用域*\\ 方法或使"
"用 :ref:`class_RandomNumberGenerator` 类。"

msgid ""
"Global scope methods are easier to set up, but they don't offer as much "
"control."
msgstr "全局作用域方法更容易设置，但不能提供太多控制。"

msgid ""
"RandomNumberGenerator requires more code to use, but allows creating "
"multiple instances, each with their own seed and state."
msgstr ""
"RandomNumberGenerator需要使用更多代码，但允许建立多个实例，每个实例都有自己的"
"种子和状态。"

msgid ""
"This tutorial uses global scope methods, except when the method only exists "
"in the RandomNumberGenerator class."
msgstr "本教程使用全局作用域方法, 只存在于RandomNumberGenerator类中的方法除外."

msgid "The randomize() method"
msgstr "randomize() 方法"

msgid ""
"Since Godot 4.0, the random seed is automatically set to a random value when "
"the project starts. This means you don't need to call ``randomize()`` in "
"``_ready()`` anymore to ensure that results are random across project runs. "
"However, you can still use ``randomize()`` if you want to use a specific "
"seed number, or generate it using a different method."
msgstr ""
"自Godot 4.0以来，当项目启动时，随机种子会自动设置为随机值。这意味着你不再需要"
"在 ``_ready()`` 中调用 ``randomize()`` 来确保项目运行的结果是随机的。但是，如"
"果你想使用特定的种子编号，或者使用不同的方法生成它，你仍然可以使用 "
"``randomize()``\\ 。"

msgid ""
"In global scope, you can find a :ref:`randomize() "
"<class_@GlobalScope_method_randomize>` method. **This method should be "
"called only once when your project starts to initialize the random seed.** "
"Calling it multiple times is unnecessary and may impact performance "
"negatively."
msgstr ""
"在全局作用域中，你可以找到一个 :ref:`randomize() "
"<class_@GlobalScope_method_randomize>` 方法。\\ **该方法应该在你的项目开始初"
"始化随机种子时只调用一次。**\\ 多次调用它是不必要的，且可能会对性能产生负面影"
"响。"

msgid ""
"Putting it in your main scene script's ``_ready()`` method is a good choice:"
msgstr "把它放在你的主场景脚本的 ``_ready()`` 方法中是个不错的选择："

msgid ""
"You can also set a fixed random seed instead using :ref:`seed() "
"<class_@GlobalScope_method_seed>`. Doing so will give you *deterministic* "
"results across runs:"
msgstr ""
"你也可以使用 :ref:`seed() <class_@GlobalScope_method_seed>` 设置固定的随机种"
"子。这样做会在运行过程中为你提供\\ *确定性*\\ 的结果："

msgid ""
"When using the RandomNumberGenerator class, you should call ``randomize()`` "
"on the instance since it has its own seed:"
msgstr ""
"当使用RandomNumberGenerator类时，应该在实例上调用 ``randomize()`` ，因为它有"
"自己的种子:"

msgid "Getting a random number"
msgstr "获得一个随机数"

msgid ""
"Let's look at some of the most commonly used functions and methods to "
"generate random numbers in Godot."
msgstr "让我们来看看Godot中最常用的一些生成随机数的函数和方法."

msgid ""
":ref:`randf() <class_@GlobalScope_method_randf>` returns a random floating-"
"point number between 0 and 1. This is useful to implement "
"a :ref:`doc_random_number_generation_weighted_random_probability` system, "
"among other things."
msgstr ""
":ref:`randf() <class_@GlobalScope_method_randf>` 返回一个介于 0 和 1 之间的随"
"机浮点数。在实"
"现 :ref:`doc_random_number_generation_weighted_random_probability` 系统等时很"
"有用。"

msgid ""
":ref:`randfn() <class_@GlobalScope_method_randfn>` returns a random floating-"
"point number following a `normal distribution <https://en.wikipedia.org/wiki/"
"Normal_distribution>`__. This means the returned value is more likely to be "
"around the mean (0.0 by default), varying by the deviation (1.0 by default):"
msgstr ""
":ref:`randfn() <class_@GlobalScope_method_randfn>` 返回遵循 `正态分布 "
"<https://en.wikipedia.org/wiki/Normal_distribution>`__ 的随机浮点数。这意味着"
"返回值更有可能在平均值附近（默认为 0.0），随偏差变化（默认为 1.0）:"

msgid ""
":ref:`randf_range() <class_@GlobalScope_method_randf_range>` takes two "
"arguments ``from`` and ``to``, and returns a random floating-point number "
"between ``from`` and ``to``:"
msgstr ""
":ref:`randf_range() <class_@GlobalScope_method_randf_range>` 接受两个参数 "
"``from`` 和 ``to``\\ ，并返回一个介于 ``from`` 和 ``to`` 之间的随机浮点数："

msgid ""
":ref:`randi_range() <class_@GlobalScope_method_randi_range>` takes two "
"arguments ``from`` and ``to``, and returns a random integer between ``from`` "
"and ``to``:"
msgstr ""
":ref:`randi_range() <class_@GlobalScope_method_randi_range>` 接受两个参数 "
"``from`` 和 ``to``\\ ，并返回一个介于 ``from`` 和 ``to`` 之间的随机整数："

msgid "Get a random array element"
msgstr "获取一个随机数组元素"

msgid ""
"We can use random integer generation to get a random element from an array, "
"or use the :ref:`Array.pick_random<class_Array_method_pick_random>` method "
"to do it for us:"
msgstr ""
"我们可以使用随机整数生成来从数组中获得一个随机元素，或者使用方"
"法 :ref:`Array.pick_random<class_Array_method_pick_random>` 来为我们做这件事:"

msgid ""
"To prevent the same fruit from being picked more than once in a row, we can "
"add more logic to the above method. In this case, we can't "
"use :ref:`Array.pick_random<class_Array_method_pick_random>` since it lacks "
"a way to prevent repetition:"
msgstr ""
"为了防止连续多次采摘相同的水果，我们可以给上述方法添加更多的逻辑。此时无法使"
"用 :ref:`Array.pick_random<class_Array_method_pick_random>` ，因其缺少防重复"
"机制："

msgid ""
"This approach can be useful to make random number generation feel less "
"repetitive. Still, it doesn't prevent results from \"ping-ponging\" between "
"a limited set of values. To prevent this, use the :ref:`shuffle bag "
"<doc_random_number_generation_shuffle_bags>` pattern instead."
msgstr ""
"这种方法可以让随机数生成的感觉不那么重复. 不过, 它仍然不能防止结果在有限的一"
"组值之间 \"乒乓反复\". 为了防止这种情况, 请使用 :ref:`shuffle bag "
"<doc_random_number_generation_shuffle_bags>` 模式来代替."

msgid "Get a random dictionary value"
msgstr "获取一个随机字典值"

msgid "We can apply similar logic from arrays to dictionaries as well:"
msgstr "我们也可以将数组的类似逻辑应用于字典:"

msgid "Weighted random probability"
msgstr "加权随机概率"

msgid ""
"The :ref:`randf() <class_@GlobalScope_method_randf>` method returns a "
"floating-point number between 0.0 and 1.0. We can use this to create a "
"\"weighted\" probability where different outcomes have different likelihoods:"
msgstr ""
":ref:`randf() <class_@GlobalScope_method_randf>` 方法返回一个介于 0.0 和 1.0 "
"之间的浮点数。我们可以使用它来创建“加权”概率，其中不同的结果具有不同的可能"
"性："

msgid "\"Better\" randomness using shuffle bags"
msgstr "使用 shuffle bag 达到“更好”随机性"

msgid ""
"Taking the same example as above, we would like to pick fruits at random. "
"However, relying on random number generation every time a fruit is selected "
"can lead to a less *uniform* distribution. If the player is lucky (or "
"unlucky), they could get the same fruit three or more times in a row."
msgstr ""
"以上面同样的例子为例, 我们希望随机挑选水果. 然而, 每次选择水果时依靠随机数生"
"成会导致分布不那么 *均匀* . 如果玩家足够幸运(或不幸), 他们可能会连续三次或更"
"多次得到相同的水果."

msgid ""
"When running the above code, there is a chance to get the same fruit twice "
"in a row. Once we picked a fruit, it will no longer be a possible return "
"value unless the array is now empty. When the array is empty, we reset it "
"back to its default value, making it possible to have the same fruit again, "
"but only once."
msgstr ""
"在运行上面的代码时, 仍有可能连续两次得到同一个水果. 我们摘下一个水果时, 它将"
"不再是一个可能的返回值, 但除非数组现在是空的. 当数组为空时, 此时我们将其重置"
"回默认值, 这样就导致了能再次获得相同的水果, 但只有这一次."

msgid "Random noise"
msgstr "随机噪音"

msgid ""
"The random number generation shown above can show its limits when you need a "
"value that *slowly* changes depending on the input. The input can be a "
"position, time, or anything else."
msgstr ""
"当你需要一个 *缓慢* 根据输入而变化的值时, 上面显示的随机数生成方式就显示出了"
"它们的局限性. 这里的输入可以是位置, 时间或其他任何东西."

msgid ""
"To achieve this, you can use random *noise* functions. Noise functions are "
"especially popular in procedural generation to generate realistic-looking "
"terrain. Godot provides :ref:`class_fastnoiselite` for this, which supports "
"1D, 2D and 3D noise. Here's an example with 1D noise:"
msgstr ""
"为了实现这一点，你可以使用随机\\ *噪声*\\ 函数。噪声函数在程序式生成中特别受"
"欢迎，可用于生成逼真的地形。Godot 为此提供了 :ref:`class_fastnoiselite`\\ ，"
"它支持 1D、2D 和 3D 噪声。以下是 1D 噪声的示例："

msgid "Cryptographically secure pseudorandom number generation"
msgstr "密码安全的伪随机数生成器"

msgid ""
"So far, the approaches mentioned above are **not** suitable for "
"*cryptographically secure* pseudorandom number generation (CSPRNG). This is "
"fine for games, but this is not sufficient for scenarios where encryption, "
"authentication or signing is involved."
msgstr ""
"目前为止提到的方法都\\ **无法**\\ 实现\\ *密码安全*\\ 的伪随机数生成"
"（CSPRNG）。这对于游戏而言没有问题，但是对于涉及加密、认证、签名的场景就显得"
"捉襟见肘。"

msgid ""
"Godot offers a :ref:`class_Crypto` class for this. This class can perform "
"asymmetric key encryption/decryption, signing/verification, while also "
"generating cryptographically secure random bytes, RSA keys, HMAC digests, "
"and self-signed :ref:`class_X509Certificate`\\ s."
msgstr ""
"Godot 为此提供了 :ref:`class_Crypto` 类。这个类可以执行非对称密钥加密、解密、"
"签名和验证，也可以生成密码安全的随机字节块、RSA 密钥、HMAC 摘要、自签名"
"的 :ref:`class_X509Certificate`\\ 。"

msgid ""
"The downside of :abbr:`CSPRNG (Cryptographically secure pseudorandom number "
"generation)` is that it's much slower than standard pseudorandom number "
"generation. Its API is also less convenient to use. As a "
"result, :abbr:`CSPRNG (Cryptographically secure pseudorandom number "
"generation)` should be avoided for gameplay elements."
msgstr ""
":abbr:`CSPRNG (加密安全伪随机数生成)` 的缺点是它比标准伪随机数的生成慢得多。"
"其 API 的使用也不太方便。因此，游戏机制应避免使用 :abbr:`CSPRNG (加密安全伪随"
"机数生成)`\\ 。"

msgid ""
"Example of using the Crypto class to generate 2 random integers between "
"``0`` and ``2^32 - 1`` (inclusive):"
msgstr ""
"使用 Crypto 类生成 ``0`` 到 ``2^32-1``\\ （含）之间的 2 个随机整数的示例："

msgid ""
"See :ref:`class_PackedByteArray`'s documentation for other methods you can "
"use to decode the generated bytes into various types of data, such as "
"integers or floats."
msgstr ""
"请参阅 :ref:`class_PackedByteArray` 的文档，了解可用于将生成的字节解码为各种"
"类型的数据（如整数或浮点）的其他方法。"
