# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-10 15:20+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Advanced vector math"
msgstr "高等向量数学"

msgid "Planes"
msgstr "平面"

msgid ""
"The dot product has another interesting property with unit vectors. Imagine "
"that perpendicular to that vector (and through the origin) passes a plane. "
"Planes divide the entire space into positive (over the plane) and negative "
"(under the plane), and (contrary to popular belief) you can also use their "
"math in 2D:"
msgstr ""
"单位向量的点积还有一个有趣的性质。请想象一个垂直于这个向量（且经过原点）的平"
"面。平面会将整个空间划分为正（在平面上方）和负（在平面下方）两部分，并且（与"
"普遍的看法相反）你也可以在 2D 中进行这样的数学运算："

msgid ""
"Unit vectors that are perpendicular to a surface (so, they describe the "
"orientation of the surface) are called **unit normal vectors**. Though, "
"usually they are just abbreviated as *normals*. Normals appear in planes, 3D "
"geometry (to determine where each face or vertex is siding), etc. A "
"**normal** *is* a **unit vector**, but it's called *normal* because of its "
"usage. (Just like we call (0,0) the Origin!)."
msgstr ""
"垂直于表面的单位向量称为\\ **单位法向量**\\ （因此描述的是表面的朝向），不过"
"通常会简称为\\ *法线*\\ 。平面、3D 几何体等场合中都会用到法线（用来确定面或顶"
"点的属于哪一侧）。\\ **法线**\\ 是一种\\ **单位向量**\\ ，因为用途才被称为\\ "
"*法线*\\ 。（就像我们说坐标 (0,0) 是“原点”一样！）。"

msgid ""
"The plane passes by the origin and the surface of it is perpendicular to the "
"unit vector (or *normal*). The side towards the vector points to is the "
"positive half-space, while the other side is the negative half-space. In 3D "
"this is exactly the same, except that the plane is an infinite surface "
"(imagine an infinite, flat sheet of paper that you can orient and is pinned "
"to the origin) instead of a line."
msgstr ""
"平面经过原点，它的表面垂直于这条单位向量（即\\ *法线*\\ ）。这条向量指向的一"
"侧为正半空间，而另一侧则为负半空间。以上概念在 3D 中依旧适用，只不过平面不再"
"是直线，而是一个无限的表面（想象一张固定在原点，无限伸展的平坦纸张）。"

msgid "Distance to plane"
msgstr "到平面的距离"

msgid ""
"Now that it's clear what a plane is, let's go back to the dot product. The "
"dot product between a **unit vector** and any **point in space** (yes, this "
"time we do dot product between vector and position), returns the **distance "
"from the point to the plane**:"
msgstr ""
"现在平面是什么就很清楚了，让我们再回到点积上。\\ **单位向量**\\ 和任何\\ **空"
"间点**\\ 之间的点积（是的，这次我们在向量和位置之间进行点乘），将返回\\ **从"
"该点到平面的距离**\\ ："

msgid ""
"But not just the absolute distance, if the point is in the negative half "
"space the distance will be negative, too:"
msgstr "但返回的不止是距离的绝对值，如果点位于负半空间，那么这个距离也是负的："

msgid "This allows us to tell which side of the plane a point is."
msgstr "这样我们就能够知道点位于平面的哪一侧。"

msgid "Away from the origin"
msgstr "脱离原点"

msgid ""
"I know what you are thinking! So far this is nice, but *real* planes are "
"everywhere in space, not only passing through the origin. You want real "
"*plane* action and you want it *now*."
msgstr ""
"我知道你在想什么！到目前为止还算不错，但\\ *真正的*\\ 平面在空间中无处不在，"
"并不一定要经过原点。你想要的是真正\\ *平面*\\ ，你\\ *现在*\\ 就想行动起来。"

msgid ""
"Remember that planes not only split space in two, but they also have "
"*polarity*. This means that it is possible to have perfectly overlapping "
"planes, but their negative and positive half-spaces are swapped."
msgstr ""
"请记住，平面不仅仅是将空间一分为二，这两个空间还有\\ *极性*\\ 。也就是说，如"
"果两个平面完全重合，它们的正负半空间可以相反。"

msgid ""
"With this in mind, let's describe a full plane as a **normal** *N* and a "
"**distance from the origin** scalar *D*. Thus, our plane is represented by N "
"and D. For example:"
msgstr ""
"明确了这一点，我们就可以将完整的平面描述为\\ **法线** *N* 和\\ **与原点的距离"
"**\\ 标量 *D*\\ 。这样用 N 和 D 就可以表示我们的平面了。例如："

msgid ""
"For 3D math, Godot provides a :ref:`Plane <class_Plane>` built-in type that "
"handles this."
msgstr ""
"对于 3D 空间中的平面，Godot 提供了 :ref:`Plane <class_Plane>` 内置类型来处理"
"这些计算。"

#, fuzzy
msgid ""
"Basically, N and D can represent any plane in space, be it for 2D or 3D "
"(depending on the amount of dimensions of N) and the math is the same for "
"both. It's the same as before, but D is the distance from the origin to the "
"plane, travelling in N direction. As an example, imagine you want to reach a "
"point in the plane, you will just do:"
msgstr ""
"基本上，N 和 D 可以用于表示空间中的任何平面。无论是对于 2D 还是 3D 场景来说"
"（取决于变量 N 的维数），两者的计算方法相同：和以前一样，但 D 是以 N 为方向，"
"从原点到平面的距离。例如，假设你想在到达平面上的某一点，你只需要做："

#, fuzzy
msgid ""
"This will stretch (resize) the normal vector and make it touch the plane. "
"This math might seem confusing, but it's actually much simpler than it "
"seems. If we want to tell, again, the distance from the point to the plane, "
"we do the same but adjusting for distance:"
msgstr ""
"上述步骤将拉伸（调整大小）法线向量，使其接触平面。这个计算方法看似令人困惑，"
"但实际上要比看起来简单得多。如果我们还想知道从点到平面的距离，也可以用同样方"
"法，但是要根据距离进行调整："

msgid "The same thing, using a built-in function:"
msgstr "也可以用内置函数执行同样的计算："

msgid "This will, again, return either a positive or negative distance."
msgstr "这同样会返回一个正或负的距离。"

#, fuzzy
msgid ""
"Flipping the polarity of the plane can be done by negating both N and D. "
"This will result in a plane in the same position, but with inverted negative "
"and positive half spaces:"
msgstr ""
"还可以通过同时对 N 和 D 取负来反转平面的极性。这样，平面的位置不变，但正负半"
"空间倒置："

msgid ""
"Godot also implements this operator in :ref:`Plane <class_Plane>`. So, using "
"the format below will work as expected:"
msgstr ""
"在Godot中，同样也可以使用 :ref:`Plane <class_Plane>` 中实现这个操作，示范如"
"下："

msgid ""
"So, remember, the plane's main practical use is that we can calculate the "
"distance to it. So, when is it useful to calculate the distance from a point "
"to a plane? Let's see some examples."
msgstr ""
"因此，谨记，向量数学当中，平面的主要用途就是计算某个点到它的距离。那么，什么"
"时候计算点到平面的距离有用呢？下文将提供应用实例。"

msgid "Constructing a plane in 2D"
msgstr "在二维空间中构造平面"

msgid ""
"Planes clearly don't come out of nowhere, so they must be built. "
"Constructing them in 2D is easy, this can be done from either a normal (unit "
"vector) and a point, or from two points in space."
msgstr ""
"平面不会凭空出现，必须先进行构造。在 2D 空间中构造平面很简单：只需要法线（单"
"位向量）和某一个点，或者空间中任意两点都可以完成。"

#, fuzzy
msgid ""
"In the case of a normal and a point, most of the work is done, as the normal "
"is already computed, so calculate D from the dot product of the normal and "
"the point."
msgstr ""
"针对法线和点的情况，大部分工作已经完成，因为当法线已经计算出来时，只需从法线"
"和点的点积得到 D。"

msgid ""
"For two points in space, there are actually two planes that pass through "
"them, sharing the same space but with normal pointing to the opposite "
"directions. To compute the normal from the two points, the direction vector "
"must be obtained first, and then it needs to be rotated 90° degrees to "
"either side:"
msgstr ""
"对于空间中的两个点, 实际上会有两个平面同时经过它们, 它们共享相同的空间, 但是"
"法线方向相反. 为了从这两个点计算面的法线, 必须首先获得方向向量, 然后将向任何"
"一边旋转90°:"

#, fuzzy
msgid ""
"The rest is the same as the previous example. Either point_a or point_b will "
"work, as they are in the same plane:"
msgstr ""
"其余的与前面的示例相同,point_a或point_b都可以工作, 因为它们在相同的平面中:"

#, fuzzy
msgid ""
"Doing the same in 3D is a little more complex and is explained further down."
msgstr "在3D中做同样的操作稍微复杂一些, 下面将进一步解释."

msgid "Some examples of planes"
msgstr "平面的一些示例"

#, fuzzy
msgid ""
"Here is an example of what planes are useful for. Imagine you have a `convex "
"<https://www.mathsisfun.com/definitions/convex.html>`__ polygon. For "
"example, a rectangle, a trapezoid, a triangle, or just any polygon where no "
"faces bend inwards."
msgstr ""
"这里有一个简单的示例, 说明平面的用途. 假设您有一个 `凸 <https://www."
"mathsisfun.com/definitions/convex.html>`__ 多边形. 例如, 矩形, 梯形, 三角形或"
"任何没有向内弯曲的多边形."

msgid ""
"For every segment of the polygon, we compute the plane that passes by that "
"segment. Once we have the list of planes, we can do neat things, for example "
"checking if a point is inside the polygon."
msgstr ""
"对多边形的每个部分, 我们计算出经过该部分的平面. 一旦我们有了平面的列表, 我们"
"就可以做些分类的事情, 例如检查一个点是否在多边形内部."

msgid ""
"We go through all planes, if we can find a plane where the distance to the "
"point is positive, then the point is outside the polygon. If we can't, then "
"the point is inside."
msgstr ""
"我们遍历所有平面, 如果我们能找到使得点到平面的距离为正的平面, 那么点在多边形"
"之外. 如果我们不能, 那么这一点就在多边形内部."

msgid "Code should be something like this:"
msgstr "代码应该是这样的:"

msgid ""
"Pretty cool, huh? But this gets much better! With a little more effort, "
"similar logic will let us know when two convex polygons are overlapping too. "
"This is called the Separating Axis Theorem (or SAT) and most physics engines "
"use this to detect collision."
msgstr ""
"很酷, 是吧？但这可以变得更好！稍加努力, 类似的逻辑将让我们知道两个凸多边形是"
"否重叠. 这叫做分离轴定理(或SAT), 大多数物理引擎都用这个来检测碰撞."

msgid ""
"With a point, just checking if a plane returns a positive distance is enough "
"to tell if the point is outside. With another polygon, we must find a plane "
"where *all* *the* *other* *polygon* *points* return a positive distance to "
"it. This check is performed with the planes of A against the points of B, "
"and then with the planes of B against the points of A:"
msgstr ""
"对于一个点, 仅仅检查一个平面是否返回正距离就足以判断该点是否在外面. 对于一个"
"多边形, 我们必须找到一个平面, 使得另一个多边形上的所有点到它的距离为正. 这种"
"可以用A平面对B点进行检查, 然后用B平面对A点进行检查:"

msgid ""
"As you can see, planes are quite useful, and this is the tip of the iceberg. "
"You might be wondering what happens with non convex polygons. This is "
"usually just handled by splitting the concave polygon into smaller convex "
"polygons, or using a technique such as BSP (which is not used much nowadays)."
msgstr ""
"正如你所看到的, 平面是非常有用的, 然而这只是冰山一角. 你可能想知道非凸多边形"
"会发生什么. 这通常只是通过将凹多边形分割成较小的凸多边形来处理, 或者使用诸如"
"BSP(现在使用得不多)之类的技术."

msgid "Collision detection in 3D"
msgstr "三维碰撞检测"

msgid ""
"This is another bonus bit, a reward for being patient and keeping up with "
"this long tutorial. Here is another piece of wisdom. This might not be "
"something with a direct use case (Godot already does collision detection "
"pretty well) but it's used by almost all physics engines and collision "
"detection libraries :)"
msgstr ""
"这是另一个奖励, 是对耐心并跟上这个漫长的教程的奖励. 这是另一条锦囊妙计. 这可"
"能不能直接拿来使用(Godot已经可以进行了相当棒的碰撞检测了), 但是几乎所有的物理"
"引擎和碰撞检测库都使用它的原理:)"

msgid ""
"Remember that converting a convex shape in 2D to an array of 2D planes was "
"useful for collision detection? You could detect if a point was inside any "
"convex shape, or if two 2D convex shapes were overlapping."
msgstr ""
"还记得把2D中的凸形转换成2D平面阵列对碰撞检测有用吗？你可以检测一个点是否在任"
"何凸形状内, 或者两个2D凸形状是否重叠."

msgid ""
"Well, this works in 3D too, if two 3D polyhedral shapes are colliding, you "
"won't be able to find a separating plane. If a separating plane is found, "
"then the shapes are definitely not colliding."
msgstr ""
"嗯, 这在3D中也适用, 如果两个3D多面体形状碰撞, 你将无法找到分离平面. 如果发现"
"一个分离平面, 那么形状肯定不会发生碰撞."

msgid ""
"To refresh a bit a separating plane means that all vertices of polygon A are "
"in one side of the plane, and all vertices of polygon B are in the other "
"side. This plane is always one of the face-planes of either polygon A or "
"polygon B."
msgstr ""
"要得到分离平面意味着多边形A的所有顶点都在平面的一侧, 而多边形B的所有顶点都在"
"另一侧. 该平面始终是多边形A或多边形B的面向平面之一."

msgid ""
"In 3D though, there is a problem to this approach, because it is possible "
"that, in some cases a separating plane can't be found. This is an example of "
"such situation:"
msgstr ""
"然而在3D中, 这种方法存在一个问题, 因为在某些情况下可能找不到分离平面. 下面就"
"是这种情况的一个示例:"

msgid ""
"To avoid it, some extra planes need to be tested as separators, these planes "
"are the cross product between the edges of polygon A and the edges of "
"polygon B"
msgstr ""
"为了避免这种情况，一些额外的平面需要作为分隔器被测试，这些平面是多边形 A 的边"
"和多边形 B 的边的叉积"

msgid "So the final algorithm is something like:"
msgstr "所以最后的算法是这样的:"

msgid "More information"
msgstr "更多信息"

msgid ""
"For more information on using vector math in Godot, see the following "
"article:"
msgstr "关于在Godot中使用向量数学的更多信息, 请参见以下文章:"

msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video series \"Essence of Linear Algebra\": https://www.youtube."
"com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"
msgstr ""
"如果你需要进一步的解释，你可以看看 3Blue1Brown 的绝佳的系列视频《线性代数的本"
"质》：\\ http://www.bilibili.com/video/BV1ys411472E?p=2"

msgid "Translation status"
msgstr "翻译状态"
