#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Advanced vector math"
msgstr "高等向量数学"

msgid "Planes"
msgstr "平面"

msgid ""
"The dot product has another interesting property with unit vectors. Imagine "
"that perpendicular to that vector (and through the origin) passes a plane. "
"Planes divide the entire space into positive (over the plane) and negative "
"(under the plane), and (contrary to popular belief) you can also use their "
"math in 2D:"
msgstr ""
"单位向量的点积还有一个有趣的性质。请想象一个垂直于这个向量（且经过原点）的平"
"面。平面会将整个空间划分为正（在平面上方）和负（在平面下方）两部分，并且（与"
"普遍的看法相反）你也可以在 2D 中进行这样的数学运算："

msgid ""
"Unit vectors that are perpendicular to a surface (so, they describe the "
"orientation of the surface) are called **unit normal vectors**. Though, "
"usually they are just abbreviated as *normals*. Normals appear in planes, 3D "
"geometry (to determine where each face or vertex is siding), etc. A "
"**normal** *is* a **unit vector**, but it's called *normal* because of its "
"usage. (Just like we call (0,0) the Origin!)."
msgstr ""
"垂直于表面的单位向量称为\\ **单位法向量**\\ （因此描述的是表面的朝向），不过"
"通常会简称为\\ *法线*\\ 。平面、3D 几何体等场合中都会用到法线（用来确定面或顶"
"点的属于哪一侧）。\\ **法线**\\ 是一种\\ **单位向量**\\ ，因为用途才被称为\\ "
"*法线*\\ 。（就像我们说坐标 (0,0) 是“原点”一样！）。"

msgid ""
"The plane passes by the origin and the surface of it is perpendicular to the "
"unit vector (or *normal*). The side towards the vector points to is the "
"positive half-space, while the other side is the negative half-space. In 3D "
"this is exactly the same, except that the plane is an infinite surface "
"(imagine an infinite, flat sheet of paper that you can orient and is pinned "
"to the origin) instead of a line."
msgstr ""
"平面经过原点，它的表面垂直于这条单位向量（即\\ *法线*\\ ）。这条向量指向的一"
"侧为正半空间，而另一侧则为负半空间。以上概念在 3D 中依旧适用，只不过平面不再"
"是直线，而是一个无限的表面（想象一张固定在原点，无限伸展的平坦纸张）。"

msgid "Distance to plane"
msgstr "到平面的距离"

msgid ""
"Now that it's clear what a plane is, let's go back to the dot product. The "
"dot product between a **unit vector** and any **point in space** (yes, this "
"time we do dot product between vector and position), returns the **distance "
"from the point to the plane**:"
msgstr ""
"现在平面是什么就很清楚了，让我们再回到点积上。\\ **单位向量**\\ 和任何\\ **空"
"间点**\\ 之间的点积（是的，这次我们在向量和位置之间进行点乘），将返回\\ **从"
"该点到平面的距离**\\ ："

msgid ""
"But not just the absolute distance, if the point is in the negative half "
"space the distance will be negative, too:"
msgstr "但返回的不止是距离的绝对值，如果点位于负半空间，那么这个距离也是负的："

msgid "This allows us to tell which side of the plane a point is."
msgstr "这样我们就能够知道点位于平面的哪一侧。"

msgid "Away from the origin"
msgstr "脱离原点"

msgid ""
"I know what you are thinking! So far this is nice, but *real* planes are "
"everywhere in space, not only passing through the origin. You want real "
"*plane* action and you want it *now*."
msgstr ""
"我知道你在想什么！到目前为止还算不错，但\\ *真正的*\\ 平面在空间中无处不在，"
"并不一定要经过原点。你想要的是真正\\ *平面*\\ ，你\\ *现在*\\ 就想行动起来。"

msgid ""
"Remember that planes not only split space in two, but they also have "
"*polarity*. This means that it is possible to have perfectly overlapping "
"planes, but their negative and positive half-spaces are swapped."
msgstr ""
"请记住，平面不仅仅是将空间一分为二，这两个空间还有\\ *极性*\\ 。也就是说，如"
"果两个平面完全重合，它们的正负半空间可以相反。"

msgid ""
"With this in mind, let's describe a full plane as a **normal** *N* and a "
"**distance from the origin** scalar *D*. Thus, our plane is represented by N "
"and D. For example:"
msgstr ""
"明确了这一点，我们就可以将完整的平面描述为\\ **法线** *N* 和\\ **与原点的距离"
"**\\ 标量 *D*\\ 。这样用 N 和 D 就可以表示我们的平面了。例如："

msgid ""
"For 3D math, Godot provides a :ref:`Plane <class_Plane>` built-in type that "
"handles this."
msgstr ""
"对于 3D 空间中的平面，Godot 提供了 :ref:`Plane <class_Plane>` 内置类型来处理"
"这些计算。"

msgid "The same thing, using a built-in function:"
msgstr "也可以用内置函数执行同样的计算："

msgid "This will, again, return either a positive or negative distance."
msgstr "这同样会返回一个正或负的距离。"

msgid ""
"Godot also implements this operator in :ref:`Plane <class_Plane>`. So, using "
"the format below will work as expected:"
msgstr ""
"在Godot中，同样也可以使用 :ref:`Plane <class_Plane>` 中实现这个操作，示范如"
"下："

msgid ""
"So, remember, the plane's main practical use is that we can calculate the "
"distance to it. So, when is it useful to calculate the distance from a point "
"to a plane? Let's see some examples."
msgstr ""
"因此，谨记，向量数学当中，平面的主要用途就是计算某个点到它的距离。那么，什么"
"时候计算点到平面的距离有用呢？下文将提供应用实例。"

msgid "Constructing a plane in 2D"
msgstr "在二维空间中构造平面"

msgid ""
"Planes clearly don't come out of nowhere, so they must be built. "
"Constructing them in 2D is easy, this can be done from either a normal (unit "
"vector) and a point, or from two points in space."
msgstr ""
"平面不会凭空出现，必须先进行构造。在 2D 空间中构造平面很简单：只需要法线（单"
"位向量）和某一个点，或者空间中任意两点都可以完成。"

msgid ""
"In the case of a normal and a point, most of the work is done, as the normal "
"is already computed, so calculate D from the dot product of the normal and "
"the point."
msgstr ""
"在法线和点的情况下，由于法线已经被计算出来，大部分计算工作都已完成。因此，只"
"需根据法线和点的点积计算 D 即可。"

msgid ""
"For two points in space, there are actually two planes that pass through "
"them, sharing the same space but with normal pointing to the opposite "
"directions. To compute the normal from the two points, the direction vector "
"must be obtained first, and then it needs to be rotated 90° degrees to "
"either side:"
msgstr ""
"而在空间中任意两点的情况下，空间内会有两个平面同时经过两点：这两个平面共享同"
"一个空间，但其法线方向相反。因此，为计算这两点的法线，必须先获得方向向量，然"
"后将其向两侧旋转 90° ："

msgid ""
"The rest is the same as the previous example. Either point_a or point_b will "
"work, as they are in the same plane:"
msgstr ""
"剩余步骤与前例相同。point_a 和 point_b 都可以用于计算，毕竟两者位于同一个平面"
"内："

msgid ""
"Doing the same in 3D is a little more complex and is explained further down."
msgstr "在 3D 空间中构造平面更加复杂，下文会进一步解释。"

msgid "Some examples of planes"
msgstr "平面的一些示例"

msgid ""
"Here is an example of what planes are useful for. Imagine you have a `convex "
"<https://www.mathsisfun.com/definitions/convex.html>`__ polygon. For "
"example, a rectangle, a trapezoid, a triangle, or just any polygon where no "
"faces bend inwards."
msgstr ""
"该示例将介绍平面的用途。假设有一个 `凸 <https://www.mathsisfun.com/"
"definitions/convex.html>`__ 多边形。比如矩形、梯形、三角形或任何没有面向内弯"
"曲的多边形。"

msgid ""
"For every segment of the polygon, we compute the plane that passes by that "
"segment. Once we have the list of planes, we can do neat things, for example "
"checking if a point is inside the polygon."
msgstr ""
"对多边形的每一段，我们通过计算获取经过该段的平面。重复以上操作，直到获得多边"
"形的平面列表后，我们就可以基于该列表，做些简单的事情，例如检查某点是否处于多"
"边形内部。"

msgid ""
"We go through all planes, if we can find a plane where the distance to the "
"point is positive, then the point is outside the polygon. If we can't, then "
"the point is inside."
msgstr ""
"我们遍历所有平面，如果能找到一个到点的距离为正的平面，那么该点就在多边形外；"
"反之，该点就在多边形内。"

msgid "Code should be something like this:"
msgstr "上述思路的代码实现如下："

msgid ""
"Pretty cool, huh? But this gets much better! With a little more effort, "
"similar logic will let us know when two convex polygons are overlapping too. "
"This is called the Separating Axis Theorem (or SAT) and most physics engines "
"use this to detect collision."
msgstr ""
"很酷吧？不过它还能做到更多！只要再花点心思，类似的逻辑也能让我们知道两个凸多"
"边形是否重叠。这就是所谓的分离轴定理 ( Separating Axis Theorem, SAT )，多数物"
"理引擎基于该定理检测碰撞。"

msgid ""
"With a point, just checking if a plane returns a positive distance is enough "
"to tell if the point is outside. With another polygon, we must find a plane "
"where *all* *the* *other* *polygon* *points* return a positive distance to "
"it. This check is performed with the planes of A against the points of B, "
"and then with the planes of B against the points of A:"
msgstr ""
"对于点的检测，只需检查平面是否返回正距离，就足以判断该点是否在外部。而对于多"
"边形之间的检测，我们必须找到一个平面，使得另一个多边形上的所有点到该平面的距"
"离都为正。在代码实现方面，可以先用多边形 A 的平面对多边形 B 的点进行检查，再"
"用多边形 B 的平面对多边形 A 的点进行检查："

msgid "Collision detection in 3D"
msgstr "三维环境下的碰撞检测"

msgid ""
"This is another bonus bit, a reward for being patient and keeping up with "
"this long tutorial. Here is another piece of wisdom. This might not be "
"something with a direct use case (Godot already does collision detection "
"pretty well) but it's used by almost all physics engines and collision "
"detection libraries :)"
msgstr ""
"这是本章的另一个奖励内容，是对你耐心看完这本长篇教程的奖励：以下内容是又一个"
"前人的智慧结晶，虽然它不算是个直接能拿来用的实例（ Godot 的碰撞检测功能已经足"
"够好了），但是接下来的内容是几乎所有物理引擎和碰撞检测库都在使用的一个原"
"理 : )"

msgid ""
"Remember that converting a convex shape in 2D to an array of 2D planes was "
"useful for collision detection? You could detect if a point was inside any "
"convex shape, or if two 2D convex shapes were overlapping."
msgstr ""
"还记得把 2D 中的凸形转换成 2D 平面阵列可用于碰撞检测吗？你可以检测一个点是否"
"在任何凸面形内，或两个 2D 凸面形是否重叠。"

msgid ""
"Well, this works in 3D too, if two 3D polyhedral shapes are colliding, you "
"won't be able to find a separating plane. If a separating plane is found, "
"then the shapes are definitely not colliding."
msgstr ""
"其实，这在 3D 中也同样适用：如果两个 3D 多面体相撞，你将无法找到这两个多面体"
"的分离平面。反之，如果能找到分离平面，那么这两个图形肯定不会发生碰撞。"

msgid ""
"In 3D though, there is a problem to this approach, because it is possible "
"that, in some cases a separating plane can't be found. This is an example of "
"such situation:"
msgstr ""
"不过，在 3D 空间中，这种思路存在一个问题：某些情况下可能找不到分离平面。下文"
"就是这种情况的一个示例："

msgid ""
"To avoid it, some extra planes need to be tested as separators, these planes "
"are the cross product between the edges of polygon A and the edges of "
"polygon B"
msgstr ""
"为了避免这种情况，一些额外的平面需要作为分隔器被测试，这些平面是多边形 A 的边"
"和多边形 B 的边的叉积"

msgid "So the final algorithm is something like:"
msgstr "所以，最后的算法代码差不多像这样："

msgid "More information"
msgstr "更多信息"

msgid ""
"For more information on using vector math in Godot, see the following "
"article:"
msgstr "有关在 Godot 中使用向量数学的更多信息，请参阅以下文章："

msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video series \"Essence of Linear Algebra\": https://www.youtube."
"com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"
msgstr ""
"如果你需要进一步的解释，你可以看看 3Blue1Brown 的绝佳的系列视频《线性代数的本"
"质》：\\ http://www.bilibili.com/video/BV1ys411472E?p=2"

msgid "Translation status"
msgstr "翻译状态"
