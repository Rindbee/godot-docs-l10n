#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Interpolation"
msgstr "插值"

msgid ""
"Interpolation is a very basic operation in graphics programming. It's good "
"to become familiar with it in order to expand your horizons as a graphics "
"developer."
msgstr ""
"插值是图形编程中一个非常基本的操作. 作为一名图形开发人员, 熟悉它有助于扩展你"
"的视野."

msgid ""
"The basic idea is that you want to transition from A to B. A value ``t``, "
"represents the states in-between."
msgstr "基本思想是从 A 转换到 B。\\ ``t`` 值是介于两者之间的状态。"

msgid ""
"For example, if ``t`` is 0, then the state is A. If ``t`` is 1, then the "
"state is B. Anything in-between is an *interpolation*."
msgstr ""
"举个例子，如果 ``t`` 是 0，那么他的状态是 A。如果 ``t`` 是 1，那么它的状态是 "
"B。任何介于两者之间的状态都是\\ *插值*\\ 。"

msgid ""
"Between two real (floating-point) numbers, an interpolation can be described "
"as:"
msgstr "两个实数（浮点数）之间的插值可以描述为："

msgid "And often simplified to:"
msgstr "通常简化为:"

msgid ""
"The name of this type of interpolation, which transforms a value into "
"another at *constant speed* is *\"linear\"*. So, when you hear about *Linear "
"Interpolation*, you know they are referring to this formula."
msgstr ""
"这种以\\ *恒定速度*\\ 将一个值转换为另一个值的插值被称为\\ *“线性”*\\ 。因"
"此，当你听到\\ *线性插值*\\ 时，你就知道他们指的是这个公式。"

msgid ""
"There are other types of interpolations, which will not be covered here. A "
"recommended read afterwards is the :ref:`Bezier <doc_beziers_and_curves>` "
"page."
msgstr ""
"还有其他类型的插值, 这里将不做讨论. 建议之后阅读 :ref:`Bezier "
"<doc_beziers_and_curves>` 页面."

msgid "Vector interpolation"
msgstr "向量插值"

msgid ""
"Vector types (:ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>`) can also be interpolated, they come with handy functions "
"to do it :ref:`Vector2.lerp() <class_Vector2_method_lerp>` and :ref:`Vector3."
"lerp() <class_Vector3_method_lerp>`."
msgstr ""
"向量类型（\\ :ref:`Vector2 <class_Vector2>` 和 :ref:`Vector3 "
"<class_Vector3>`\\ ）也可以插值，向量自带了相关的便捷函数 :ref:`Vector2."
"lerp() <class_Vector2_method_lerp>` 和 :ref:`Vector3.lerp() "
"<class_Vector3_method_lerp>`\\ 。"

msgid ""
"For cubic interpolation, there are also :ref:`Vector2.cubic_interpolate() "
"<class_Vector2_method_cubic_interpolate>` and :ref:`Vector3."
"cubic_interpolate() <class_Vector3_method_cubic_interpolate>`, which do a :"
"ref:`Bezier <doc_beziers_and_curves>` style interpolation."
msgstr ""
"对于三次插值，还有 :ref:`Vector2.cubic_interpolate() "
"<class_Vector2_method_cubic_interpolate>` 和 :ref:`Vector3."
"cubic_interpolate() <class_Vector3_method_cubic_interpolate>` ，它们执行 :"
"ref:`Bezier <doc_beziers_and_curves>` 式插值。"

msgid ""
"Here is example pseudo-code for going from point A to B using interpolation:"
msgstr "下面是从 A 点插值到 B 点的示例伪代码："

msgid "It will produce the following motion:"
msgstr "它将产生以下运动:"

msgid "Transform interpolation"
msgstr "变换插值"

msgid ""
"It is also possible to interpolate whole transforms (make sure they have "
"either uniform scale or, at least, the same non-uniform scale). For this, "
"the function :ref:`Transform3D.interpolate_with() "
"<class_Transform3D_method_interpolate_with>` can be used."
msgstr ""
"也可以对整个变换进行插值（确保它们具有均一缩放，或者至少有相同的非均一缩"
"放）。为此，可以使用函数 :ref:`Transform3D.interpolate_with() "
"<class_Transform3D_method_interpolate_with>`\\ 。"

msgid ""
"Here is an example of transforming a monkey from Position1 to Position2:"
msgstr "下面是将猴子从位置1转换为位置2的例子:"

msgid "Using the following pseudocode:"
msgstr "使用以下伪代码:"

msgid "And again, it will produce the following motion:"
msgstr "又会产生下面的动作:"

msgid "Smoothing motion"
msgstr "平滑运动"

msgid ""
"Interpolation can be used to smooth movement, rotation, etc. Here is an "
"example of a circle following the mouse using smoothed motion:"
msgstr "插值可用于平滑运动, 旋转等. 下面是使用平滑运动跟随鼠标的圆圈的例子:"

msgid "Here is how it looks:"
msgstr "如下:"
