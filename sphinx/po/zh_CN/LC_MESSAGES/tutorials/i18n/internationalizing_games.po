#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Internationalizing games"
msgstr "游戏的国际化"

msgid "Introduction"
msgstr "前言"

msgid ""
"While indie or niche games usually do not need localization, games targeting "
"a more massive market often require localization. Godot offers many tools to "
"make this process more straightforward, so this tutorial is more like a "
"collection of tips and tricks."
msgstr ""
"虽然独立游戏和小众游戏通常不需要本地化，但瞄准更大市场的游戏通常需要本地化。"
"Godot 提供了许多工具来使这个过程更加简单，因此本教程更像一个妙招和技巧的合"
"集。"

msgid ""
"Localization is usually done by specific studios hired for the job. Despite "
"the huge amount of software and file formats available for this, the most "
"common way to do localization to this day is still with spreadsheets. The "
"process of creating the spreadsheets and importing them is already covered "
"in the :ref:`doc_importing_translations` tutorial. If you haven't read the "
"Importing translations page before, we recommend you give it a read before "
"reading this page."
msgstr ""
"本地化通常是通过雇佣特定的工作室来完成的，尽管有大量的软件和文件格式可供使"
"用，但迄今为止进行本地化最常见的方式仍然是使用电子表格。创建电子表格并导入电"
"子表格的过程已经在《\\ :ref:`doc_importing_translations`\\ 》教程中介绍过了。"
"如果你之前尚未阅读导入翻译页面，我们建议你在阅读本页面之前先阅读该页面。"

msgid ""
"We will be using the official demo as an example; you can `download it from "
"the Asset Library <https://godotengine.org/asset-library/asset/2776>`_."
msgstr ""
"我们将使用官方演示作为示例，可以\\ `从资产库下载 <https://godotengine.org/"
"asset-library/asset/2776>`_\\ 。"

msgid "Configuring the imported translation"
msgstr "配置导入的译文"

msgid ""
"Translations can get updated and re-imported when they change, but they "
"still have to be added to the project. This is done in **Project → Project "
"Settings → Localization**:"
msgstr ""
"翻译可以在更改时得到更新并重新导入，但仍必须将其添加到项目中。可通过\\ **项"
"目 → 项目设置 → 本地化**\\ 来完成："

msgid "The above dialog is used to add or remove translations project-wide."
msgstr "上述对话框用于添加或移除用于整个项目范围的翻译。"

msgid "Localizing resources"
msgstr "资源的本地化"

msgid ""
"It is also possible to instruct Godot to use alternate versions of assets "
"(resources) depending on the current language. This can be used for "
"localized images such as in-game billboards or localized voices."
msgstr ""
"还可以指示 Godot 根据当前语言使用资产（资源）的替代版本。这可用于本地化诸如游"
"戏内广告牌之类的图像或者语音。"

msgid "The **Remaps** tab can be used for this:"
msgstr "**重定向**\\ 选项卡便可用于此："

msgid ""
"Select the resource to be remapped then add some alternatives for each "
"locale."
msgstr "选择需要重定向的资源，然后为每个区域设置添加一些替代项。"

msgid ""
"The resource remapping system isn't supported for DynamicFonts. To use "
"different fonts depending on the language's script, use the DynamicFont "
"fallback system instead, which lets you define as many fallback fonts as you "
"want."
msgstr ""
"DynamicFont 不支持资源重定向系统。要根据语言文字使用不同的字体，请改用 "
"DynamicFont 回退系统，可以让你根据需要定义任意数量的回退字体。"

msgid ""
"The upside of the DynamicFont fallback system is that it works regardless of "
"the current language, making it ideal for things like multiplayer chat where "
"the text language may not match the client's language."
msgstr ""
"DynamicFont 后备系统的优点是它可以忽略当前语言而工作，这使得它非常适合多人聊"
"天即文本语言可能与客户端语言不匹配的情况。"

msgid "Automatically setting a language"
msgstr "自动设置语言"

msgid ""
"It is recommended to default to the user's preferred language which can be "
"obtained via :ref:`OS.get_locale_language() "
"<class_OS_method_get_locale_language>`. If your game is not available in "
"that language, it will fall back to the :ref:`Fallback "
"<class_ProjectSettings_property_internationalization/locale/fallback>` in "
"**Project Settings > Internationalization > Locale**, or to ``en`` if empty. "
"Nevertheless letting players change the language in game is recommended for "
"various reasons (e.g. translation quality or player preference)."
msgstr ""
"建议默认使用用户的首选语言，可以通过 :ref:`OS.get_locale_language() "
"<class_OS_method_get_locale_language>` 获取。如果你的游戏不支持该语言，则会回"
"退到 **项目设置 > 国际化 > 区域** 中的 :ref:`回退语言 "
"<class_ProjectSettings_property_internationalization/locale/fallback>`\\ ，如"
"果为空则回退到 ``en``\\ 。不过，出于各种原因（例如翻译质量或玩家偏好），建议"
"让玩家能够在游戏中更改语言。"

msgid "Locale vs. language"
msgstr "区域设置 vs 语言"

msgid ""
"A :ref:`locale <doc_locales>` is commonly a combination of a language with a "
"region or country, but can also contain information like a script or a "
"variant."
msgstr ""
":ref:`区域设置 <doc_locales>`\\ 通常是语言与地区或国家的组合，还可能包含文"
"字、变体等信息。"

msgid "Examples:"
msgstr "示例："

msgid "``en``: English language"
msgstr "``en``\\ ：英语语言"

msgid "``en_GB``: English in Great Britain / British English"
msgstr "``en_GB``\\ ：英国的英语 / 英式英语"

msgid "``en_US``: English in the USA / American English"
msgstr "``en_US``\\ ：美国的英语 / 美式英语"

msgid "``en_DE``: English in Germany"
msgstr "``en_DE``\\ ：德国的英语"

msgid ""
"Indie games generally only need to care about language, but read on for more "
"information."
msgstr "独立游戏通常只需要关注语言，但请继续往下看更多信息。"

msgid ""
"Why locales exist can be illustrated through the USA and Great Britain. Both "
"speak the same language (English), yet differ in many aspects: - Spelling: "
"E.g. gray (USA), grey (GB) - Use of words: E.g. eggplant (USA), aubergine "
"(GB) - Units or currencies: E.g. feet/inches (USA), metres/cm (GB)"
msgstr ""
"可以通过美国和英国的例子来解释区域设置存在的必要性。他们所说的同一种语言（英"
"语），但在很多方面又有区别：——拼写：如 gray（美）和 grey（英）——用词：如 "
"eggplant（美）和 aubergine（英）——单位和货币：如 feet/inch（美）和 metre/cm"
"（英）"

msgid ""
"It can get more complex however. Imagine you offer different content in "
"Europe and in China (e.g. in an MMO). You will need to translate each of "
"those content variations into many languages and store and load them "
"accordingly."
msgstr ""
"甚至可以变得更加复杂。可以想象一下在欧洲和中国提供不同的内容（例如在 MMO "
"中）。你需要把每种内容变体都翻译成多种语言，进行相应的存储和加载。"

msgid "Converting keys to text"
msgstr "将键转换为文本"

msgid ""
"Some controls, such as :ref:`Button <class_Button>` and :ref:`Label "
"<class_Label>`, will automatically fetch a translation if their text matches "
"a translation key. For example, if a label's text is "
"\"MAIN_SCREEN_GREETING1\" and that key exists in the current translation, "
"then the text will automatically be translated."
msgstr ""
"对于 :ref:`Button <class_Button>`\\ 、\\ :ref:`Label <class_Label>` 等部分控"
"件，如果它们的文本与某个翻译键名相匹配，则将自动获取翻译内容。例如，如果标签"
"的文本为“MAIN_SCREEN_GREETING1”，并且该键存在于当前翻译中，则该文本将被自动翻"
"译。"

msgid ""
"This automatic translation behavior may be undesirable in certain cases. For "
"instance, when using a Label to display a player's name, you most likely "
"don't want the player's name to be translated if it matches a translation "
"key. To disable automatic translation on a specific node, disable "
"**Localization > Auto Translate** in the inspector."
msgstr ""
"这种自动翻译行为在某些情况下可能是不可取的。例如，当使用 Label 来显示玩家的名"
"字时，如果玩家的名字与翻译键相匹配，你很可能不希望进行翻译。要禁用某个节点的"
"自动翻译，请在检查器中禁用\\ **Localization > Auto Translate**\\ （本地化 > "
"自动翻译）。"

msgid ""
"In code, the :ref:`Object.tr() <class_Object_method_tr>` function can be "
"used. This will just look up the text in the translations and convert it if "
"found:"
msgstr ""
"在代码中，可以使用 :ref:`Object.tr() <class_Object_method_tr>` 函数。这将只在"
"翻译中查找文本，并在找到后进行转换："

msgid ""
"If no text is displayed after changing the language, try to use a different "
"font. The default project font only supports a subset of the Latin-1 "
"character set, which cannot be used to display languages like Russian or "
"Chinese."
msgstr ""
"如果更改语言后不显示任何文字，请尝试换一个字体。默认项目字体仅支持 Latin-1 字"
"符集的子集，无法用于显示俄语、汉语等文字。"

msgid ""
"A good resource for multilingual fonts is `Noto Fonts <https://"
"www.google.com/get/noto/>`__. Make sure to download the correct variation if "
"you're using a less common language."
msgstr ""
"`Noto Fonts <https://www.google.com/get/noto/>`__ 是一系列不错的多语言字体资"
"源。如果你使用的是不太常见的语言，请确保下载正确的变体。"

msgid ""
"Once you've downloaded the font, load the TTF file into a DynamicFont "
"resource and use it as a custom font of your Control node. For better "
"reusability, associate a new a Theme resource to your root Control node and "
"define the DynamicFont as the Default Font in the theme."
msgstr ""
"下载字体后，将 TTF 文件加载到 DynamicFont 资源中，并将其用作 Control 节点的自"
"定义字体。为了获得更好的可重用性，请将新的主题资源关联到根 Control 节点，并"
"将 DynamicFont 定义为主题中的默认字体。"

msgid "Placeholders"
msgstr "占位符"

msgid ""
"To feature placeholders in your translated strings, "
"use :ref:`doc_gdscript_printf` or the equivalent feature in C#. This lets "
"translators move the location of the placeholder in the string freely, which "
"allows translations to sound more natural. Named placeholders with the "
"``String.format()`` function should be used whenever possible, as they also "
"allow translators to choose the *order* in which placeholders appear:"
msgstr ""
"若要在翻译的字符串中使用占位符，请使用 :ref:`doc_gdscript_printf` 或 C# 中的"
"等效功能。这使得翻译者可以自由移动字符串中占位符的位置，使得翻译听起来更自"
"然。为了允许翻译人员决定占位符出现的\\ *顺序*\\ ，应尽可能使用搭配使用带命名"
"的占位符和 ``String.format()`` 的函数："

msgid "Translation contexts"
msgstr "翻译上下文"

msgid ""
"If you're using plain English as source strings (rather than message codes "
"``LIKE_THIS``), you may run into ambiguities when you have to translate the "
"same English string to different strings in certain target languages. You "
"can optionally specify a *translation context* to resolve this ambiguity and "
"allow target languages to use different strings, even though the source "
"string is identical:"
msgstr ""
"如果你使用普通的英文作为源字符串（而不是类似于 ``LIKE_THIS`` 的消息代码），那"
"么就有可能会遇到歧义的情况，同一个英文字符串可能需要在某些目标语言中翻译为不"
"同的字符串。你可以通过指定可选的\\ *翻译上下文*\\ 来消除歧义，即便源字符串是"
"相同的，也能够让目标语言能够使用不同的字符串："

msgid "Pluralization"
msgstr "复数"

msgid ""
"Most languages require different strings depending on whether an object is "
"in singular or plural form. However, hardcoding the \"is plural\" condition "
"depending on whether there is more than 1 object is not valid in all "
"languages."
msgstr ""
"很多语言会根据对象的单复数使用不同的字符串。但是把“是否为复数”的条件硬编码为"
"“对象数量是否大于 1 ”并不是对所有语言都有效。"

msgid ""
"Some languages have more than two plural forms, and the rules on the number "
"of objects required for each plural form vary. Godot offers support for "
"*pluralization* so that the target locales can handle this automatically."
msgstr ""
"有些语言有两种以上的复数形式，不同的复数需要的对象数量也各不相同。Godot 提供"
"了对\\ *复数*\\ 的支持，目标地区可以自动进行处理。"

msgid ""
"Pluralization is meant to be used with positive (or zero) integer numbers "
"only. Negative and floating-point values usually represent physical entities "
"for which singular and plural don't clearly apply."
msgstr ""
"复数应该只用于正整数（或零）的情况。负数和浮点数所代表的物理实体数量是单数还"
"是复数一般无法明确区分。"

msgid "This can be combined with a context if needed:"
msgstr "如果有需要也可以和上下文组合使用："

msgid ""
"Providing pluralized translations is only supported "
"with :ref:`doc_localization_using_gettext`, not CSV."
msgstr ""
"提供复数翻译仅支持\\ :ref:`doc_localization_using_gettext`\\ ，不支持 CSV。"

msgid "Making controls resizable"
msgstr "使控件的大小可调"

msgid ""
"The same text in different languages can vary greatly in length. For this, "
"make sure to read the tutorial on :ref:`doc_size_and_anchors`, as "
"dynamically adjusting control sizes may help. :ref:`Container "
"<class_Container>` can be useful, as well as the text wrapping options "
"available in :ref:`Label <class_Label>`."
msgstr ""
"不同语言的相同文本的长度差异很大。为此，请务必阅读教程"
"《\\ :ref:`doc_size_and_anchors`\\ 》，因为动态调整控件大小可能有所帮助。"
"\\ :ref:`Container <class_Container>` 可能很有用，\\ :ref:`Label "
"<class_Label>` 的文本换行选项应该也能帮上忙。"

msgid ""
"To check whether your UI can accommodate translations with longer strings "
"than the original, you can enable *pseudolocalization* in the advanced "
"Project Settings. This will replace all your localizable strings with longer "
"versions of themselves, while also replacing some characters in the original "
"strings with accented versions (while still being readable). Placeholders "
"are kept as-is, so that they keep working when pseudolocalization is enabled."
msgstr ""
"若要检查你的 UI 是否可以容纳比原始字串更长的翻译，你可以在高级项目设置中启用"
"\\ *伪本地化*\\ 。这会将所有可本地化的字符串替换为更长的字符串，同时还会将原"
"始字符串中的某些字符替换为带重音符号的字符串（同时仍可读）。占位符保持原样，"
"以便在启用伪本地化时它们继续工作。"

msgid ""
"For example, the string ``Hello world, this is %s!`` becomes ``[Ĥéłłô ŵôŕłd́, "
"ŧh̀íš íš %s!]`` when pseudolocalization is enabled."
msgstr ""
"例如，当启用伪本地化时，字符串 ``Hello world, this is %s!`` 会变为 ``[Ĥéłłô "
"ŵôŕłd́, ŧh̀íš íš %s!]``\\ 。"

msgid ""
"While looking strange at first, pseudolocalization has several benefits:"
msgstr "虽然第一眼看上去很奇怪，但是伪本地化的好处有很多："

msgid ""
"It lets you spot non-localizable strings quickly, so you can go over them "
"and make them localizable (if it makes sense to do so)."
msgstr ""
"它可以让你快速发现不可本地化的字串，这样你就可以检查它们并使它们可本地化（如"
"果这样做有意义的话）。"

msgid ""
"It lets you check UI elements that can't fit long strings. Many languages "
"will feature much longer translations than the source text, so it's "
"important to ensure your UI can accommodate longer-than-usual strings."
msgstr ""
"它可以让你检查无法容纳长字符串的 UI 元素。许多语言的翻译会比源文本长得多，因"
"此确保你的 UI 能够容纳比平常更长的字符串非常重要。"

msgid ""
"It lets you check whether your font contains all the characters required to "
"support various languages. However, since the goal of pseudolocalization is "
"to keep the original strings readable, it's not an effective test for "
"checking whether a font can support :abbr:`CJK (Chinese, Japanese, Korean)` "
"or right-to-left languages."
msgstr ""
"它可以让你检查你的字体是否包含支持各种语言所需的所有字符。然而，由于伪本地化"
"的目标是保持原始字符串的可读性，因此它并不是检查字体是否支持 :abbr:`CJK（中"
"文、日文、韩文）` 或从右到左语言的有效测试。"

msgid ""
"The project settings allow you to tune pseudolocalization behavior, so that "
"you can disable parts of it if desired."
msgstr "项目设置允许你调整伪本地化行为，以便你可以根据需要禁用它的某些部分。"

msgid "TranslationServer"
msgstr "TranslationServer"

msgid ""
"Godot has a server handling low-level translation management called "
"the :ref:`TranslationServer <class_TranslationServer>`. Translations can be "
"added or removed during runtime; the current language can also be changed at "
"runtime."
msgstr ""
"Godot 中负责底层翻译管理的服务器叫作 :ref:`TranslationServer "
"<class_TranslationServer>`\\ 。可以在运行时添加或删除翻译；当前语言也可以在运"
"行时更改。"

msgid "Bidirectional text and UI Mirroring"
msgstr "双向文本和 UI 镜像"

msgid ""
"Arabic and Hebrew are written from right to left (except for the numbers and "
"Latin words mixed in), and the user interface for these languages should be "
"mirrored as well. In some languages the shape of a glyph changes depending "
"on the surrounding characters."
msgstr ""
"阿拉伯语和希伯来语是从右到左书写的（除了混合的数字和拉丁单字），这些语言的用"
"户界面也应该是镜像的。在某些语言中，字形的形状会根据周围的字符而变化。"

msgid ""
"Support for bidirectional writing systems and UI mirroring is transparent, "
"you don't usually need to change anything or have any knowledge of the "
"specific writing system."
msgstr ""
"对双向书写系统和 UI 镜像的支持是透明的，你通常不需要更改任何内容或了解特定的"
"书写系统。"

msgid ""
"For RTL languages, Godot will automatically do the following changes to the "
"UI:"
msgstr "对于 RTL（从右至左）语言，Godot 会自动对 UI 进行以下调整："

msgid "Mirrors left/right anchors and margins."
msgstr "镜像左右锚点和边距。"

msgid "Swaps left and right text alignment."
msgstr "交换文本的左对齐和右对齐。"

msgid ""
"Mirrors horizontal order of the child controls in the containers, and items "
"in Tree/ItemList controls."
msgstr "镜像容器中子控件的水平顺序以及 Tree/ItemList 控件中项目的水平顺序。"

msgid ""
"Uses mirrored order of the internal control elements (e.g. OptionButton "
"dropdown button, checkbox alignment, List column order, Tree item icons and "
"connecting line alignment, e.t.c.), in some cases mirrored controls use "
"separate theme styles."
msgstr ""
"控件内部元素使用镜像顺序（例如 OptionButton 的下拉按钮、勾选框的位置、列表框"
"列的顺序、Tree 项目的图标和连接线的位置等），某些镜像的控件会使用单独的主题样"
"式。"

msgid ""
"Coordinate system is not mirrored, and non-UI nodes (sprites, e.t.c) are not "
"affected."
msgstr "坐标系不会镜像，非 UI 节点（精灵等）不受影响。"

msgid ""
"It is possible to override text and control layout direction by using the "
"following control properties:"
msgstr "可以使用下列控件属性来覆盖文字和控件布局方向："

msgid ""
"``text_direction``, sets the base text direction. When set to \"auto\", "
"direction depends on the first strong directional character in the text "
"according to the Unicode Bidirectional Algorithm,"
msgstr ""
"``text_direction`` 设定基本文字方向。当设定为“auto”时，方向取决于根据 "
"Unicode 双向算法的文字中的第一个强方向字符，"

msgid "``language``, overrides current project locale."
msgstr "``language`` 覆盖目前项目区域设定。"

msgid ""
"``structured_text_bidi_override`` property and ``_structured_text_parser`` "
"callback, enables special handling for structured text."
msgstr ""
"``structured_text_bidi_override`` 属性和 ``_structured_text_parser`` 回调，可"
"以对结构化文本进行特殊处理。"

msgid "``layout_direction``, overrides control mirroring."
msgstr "``layout_direction`` 覆盖控件的镜像。"

msgid ""
"You can see how right-to-left typesetting works in action using the `BiDI "
"and Font Features demo project <https://github.com/godotengine/godot-demo-"
"projects/tree/master/gui/bidi_and_font_features>`__."
msgstr ""
"你可以使用 `BiDI 和字体功能演示项目 <https://github.com/godotengine/godot-"
"demo-projects/tree/master/gui/bidi_and_font_features>`__\\ 来查看从右到左排版"
"的实际工作方式。"

msgid "Adding break iterator data to exported project"
msgstr "在导出后的项目中添加分词迭代器数据"

msgid ""
"Some languages are written without spaces, and word and line breaking "
"requires more than rules over character sequences. Godot includes ICU rule "
"and dictionary based, break iterator data, but this data is not included "
"into exported projects by default. To include it go to **Project → Project "
"Settings → Localization → Text Server Data** and click **Install support "
"data...**. Break iterator data is about 4 MB large."
msgstr ""
"有些语言在书写时没有空格，单词和行的断行需要的不仅仅是字符序列规则。Godot 包"
"含 ICU 规则和基于字典的分词迭代器数据，但默认情况下这些数据不包含在导出的项目"
"中。要包含它，请转到\\ **项目 → 项目设置 → 本地化 → 文本服务器数据**\\ 并单击"
"\\ **安装支持数据...**\\ 。分词迭代器数据大约有 4 MB 大。"

msgid "Structured text BiDi override"
msgstr "结构化文本 BiDi 覆盖"

msgid ""
"Unicode BiDi algorithm is designed to work with natural text and it's "
"incapable of handling text with the higher level order, like file names, "
"URIs, email addresses, regular expressions or source code."
msgstr ""
"Unicode BiDi 算法设计用于处理自然文本，它无法处理具有更高级别顺序的文本，例如"
"文件名、URI、电子邮件地址、正则表达式或源代码。"

msgid ""
"For example, the path for this shown directory structure will be displayed "
"incorrectly (top \"LineEdit\" control). \"File\" type structured text "
"override splits text into segments, then BiDi algorithm is applied to each "
"of them individually to correctly display directory names in any language "
"and preserve correct order of the folders (bottom \"LineEdit\" control)."
msgstr ""
"例如，所显示的目录结构的路径将显示不正确（顶部“LineEdit”控件）。“文件”类型结"
"构化文本覆盖将文本拆分为段，然后将 BiDi 算法分别应用于每个段，以正确显示任何"
"语言的目录名称并保留文件夹的正确顺序（底部“LineEdit”控件）。"

msgid ""
"Custom callbacks provide a way to override BiDi for the other types of "
"structured text."
msgstr "自定义回调提供了一种为其他类型的结构化文本覆盖 BiDi 的方法。"

msgid "Localizing numbers"
msgstr "数字的本地化"

msgid ""
"Controls specifically designed for number input or output (e.g. ProgressBar, "
"SpinBox) will use localized numbering system automatically, for the other "
"control :ref:`TextServer.format_number(string, language) "
"<class_TextServer_method_format_number>` can be used to convert Western "
"Arabic numbers (0..9) to the localized numbering system "
"and :ref:`TextServer.parse_number(string, language) "
"<class_TextServer_method_parse_number>` to convert it back."
msgstr ""
"专为数位输入或输出设计的控件（例如 ProgressBar、SpinBox）将自动使用本地化编号"
"系统，对于其他控件，\\ :ref:`TextServer.format_number(string, language) "
"<class_TextServer_method_format_number>` 可用于将西方阿拉伯数字（0..9）转换为"
"本地化的数字系统，而 :ref:`TextServer.parse_number(string, language) "
"<class_TextServer_method_parse_number>` 可以将其转换回来。"

msgid "Localizing icons and images"
msgstr "图标和图像的本地化"

msgid ""
"Icons with left and right pointing arrows which may need to be reversed for "
"Arabic and Hebrew locales, in case they indicate movement or direction (e.g. "
"back/forward buttons). Otherwise, they can remain the same."
msgstr ""
"当带有左右指向箭头的图标指示移动或方向（例如后退/前进按钮）时，它们可能需要在"
"阿拉伯语和希伯来语语言环境中翻转过来。否则，它们可以保持不变。"

msgid "Testing translations"
msgstr "测试翻译"

msgid ""
"You may want to test a project's translation before releasing it. Godot "
"provides two ways to do this."
msgstr "你可能会想要在发布前测试项目的翻译。Godot 为此提供了两种方法。"

msgid ""
"First, in the Project Settings, under **Internationalization > Locale** "
"(with advanced settings enabled), there is a **Test** property. Set this "
"property to the locale code of the language you want to test. Godot will run "
"the project with that locale when the project is run (either from the editor "
"or when exported)."
msgstr ""
"首先，在项目设置中的\\ **国际化 > 区域设置**\\ （启用高级设置）下，有一个\\ "
"**测试**\\ 属性。将这个属性设置为你想测试的语言的区域设置代码。Godot 将在项目"
"运行（无论是从编辑器还是从导出时）时，使用该区域设置运行该项目。"

msgid ""
"Keep in mind that since this is a project setting, it will show up in "
"version control when it is set to a non-empty value. Therefore, it should be "
"set back to an empty value before committing changes to version control."
msgstr ""
"请记住，因为这是一个项目设置，设为非空时它会在版本控制中显示。因此，将修改提"
"交到版本控制之前，应该将其设回空值。"

msgid ""
"Translations can also be tested when :ref:`running Godot from the command "
"line <doc_command_line_tutorial>`. For example, to test a game in French, "
"the following argument can be supplied:"
msgstr ""
"还可以\\ :ref:`在从命令行运行 Godot <doc_command_line_tutorial>` 时测试翻译。"
"例如，要使用法语测试游戏，可以提供以下参数："

msgid "Translating the project name"
msgstr "翻译项目名称"

msgid ""
"The project name becomes the app name when exporting to different operating "
"systems and platforms. To specify the project name in more than one language "
"go to **Project > Project Settings> Application > Config**. From here click "
"on the button that says ``Localizable String (Size 0)``. Now there should be "
"a button below that which says ``Add Translation``. Click on that and it "
"will take you to a page where you can choose the language (and country if "
"needed) for your project name translation. After doing that you can now type "
"in the localized name."
msgstr ""
"项目名称将在导出到不同的操作系统和平台时成为应用名称。要以多种语言指定项目名"
"称，请转到\\ **项目 > 项目设置 > 应用 > 配置**\\ 。从这里点击\\ ``可本地化字"
"符串（大小 0）``\\ 按钮。现在下面应该有一个标有\\ ``添加翻译``\\ 按钮。点击该"
"按钮，它将带你到一个页面，可以在其中为项目名称翻译选择语言（如果需要，还可以"
"选择地区）。完成后，你现在可以输入本地化的名称。"

msgid ""
"If you are unsure about the language code to use, refer to the :ref:`list of "
"locale codes <doc_locales>`."
msgstr ""
"如果你不确定要使用的语言代码，请参阅\\ :ref:`区域代码列表 <doc_locales>`\\ 。"
