#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "2D particle systems"
msgstr "2D 粒子系统"

msgid "Intro"
msgstr "简介"

msgid ""
"Particle systems are used to simulate complex physical effects, such as "
"sparks, fire, magic particles, smoke, mist, etc."
msgstr ""
"粒子系统用于模拟复杂的物理效果，例如火花、火焰、魔法粒子、烟雾、薄雾等。"

msgid ""
"The idea is that a \"particle\" is emitted at a fixed interval and with a "
"fixed lifetime. During its lifetime, every particle will have the same base "
"behavior. What makes each particle different from the rest and provides a "
"more organic look is the \"randomness\" associated with each parameter. In "
"essence, creating a particle system means setting base physics parameters "
"and then adding randomness to them."
msgstr ""
"这个想法是以固定的间隔发射具有固定的寿命的 \"粒子\"。 在其生命周期中，每个粒"
"子都具有相同的基本行为。 让每个粒子变得不同并提供整体更加 \"有机\" 外观的是与"
"各个参数相关的 \"随机性\"。 实质上，创建粒子系统意味着设置基本物理参数，然后"
"为它们添加随机性。"

msgid "Particle nodes"
msgstr "粒子节点"

msgid ""
"Godot provides two different nodes for 2D "
"particles, :ref:`class_GPUParticles2D` and :ref:`class_CPUParticles2D`. "
"GPUParticles2D is more advanced and uses the GPU to process particle "
"effects. CPUParticles2D is a CPU-driven option with near-feature parity with "
"GPUParticles2D, but lower performance when using large amounts of particles. "
"On the other hand, CPUParticles2D may perform better on low-end systems or "
"in GPU-bottlenecked situations."
msgstr ""
"Godot 为 2D 粒子提供了两个不同的节点： :ref:`class_GPUParticles2D` "
"和 :ref:`class_CPUParticles2D`\\ 。 GPUParticles2D 更先进，使用 GPU 来处理粒"
"子效果。 CPUParticles2D 是 CPU 驱动的选项，其功能与 GPUParticles2D 几乎相同，"
"但在使用大量粒子时性能较低。 另一方面，CPUParticles2D 在低端系统或 GPU 瓶颈情"
"况下可能表现更好。"

msgid ""
"While GPUParticles2D is configured via "
"a :ref:`class_ParticleProcessMaterial` (and optionally with a custom "
"shader), the matching options are provided via node properties in "
"CPUParticles2D (with the exception of the trail settings)."
msgstr ""
"虽然 GPUParticles2D 是通过 :ref:`class_ParticleProcessMaterial`\\ （还可以使"
"用自定义着色器）进行配置的，不过匹配的选项是通过 CPUParticles2D 中的节点属性"
"提供的（除了轨迹设置）。"

msgid ""
"You can convert a CPUParticles2D node into a GPUParticles2D node by clicking "
"on the node in the scene tree, selecting the 2D workspace, and selecting "
"**CPUParticles2D > Convert to GPUParticles2D** in the toolbar."
msgstr ""
"你可以通过在检查其中点击节点，选择 2D 视口，然后在视口顶部的工具栏中选择 "
"**GPUParticles2D > 转换为CPUParticles2D** ，将 GPUParticles2D 节点转换为 "
"CPUParticles2D 节点。"

msgid ""
"It is also possible to convert a GPUParticles2D node to a CPUParticles2D "
"node, however there may be issues if you use GPU-only features."
msgstr ""
"你也可以将 GPUParticles2D 节点转换为 CPUParticles2D 节点，但如果你使用了仅 "
"GPU 支持的功能，可能会出现一些问题。"

msgid ""
"The rest of this tutorial is going to use the GPUParticles2D node. First, "
"add a GPUParticles2D node to your scene. After creating that node you will "
"notice that only a white dot was created, and that there is a warning icon "
"next to your GPUParticles2D node in the scene dock. This is because the node "
"needs a ParticleProcessMaterial to function."
msgstr ""
"本教程的其余部分将使用 GPUParticles2D 节点。 首先，将 GPUParticles2D 节点添加"
"到场景中。 创建该节点后，你会注意到仅创建了一个白点，并且场景停靠栏中的 "
"GPUParticles2D 节点旁边有一个警告图标。 这是因为节点需要 "
"ParticleProcessMaterial 才能发挥作用。"

msgid "ParticleProcessMaterial"
msgstr "ParticleProcessMaterial"

msgid ""
"To add a process material to your particles node, go to ``Process Material`` "
"in your inspector panel. Click on the box next to ``Material``, and from the "
"dropdown menu select ``New ParticleProcessMaterial``."
msgstr ""
"要将处理材质添加到粒子节点，请转到检查器面板中的 ``Process Material``\\ 。单"
"击 ``Material`` 旁边的框，然后从下拉菜单中选择 ``新建 "
"ParticleProcessMaterial``\\ 。"

msgid "Your GPUParticles2D node should now be emitting white points downward."
msgstr "你的 GPUParticles2D 节点现在应该可以向下发射白点了。"

msgid "Texture"
msgstr "纹理（Texture）"

msgid ""
"A particle system can use a single texture or an animation *flipbook*. A "
"flipbook is a texture that contains several frames of animation that can be "
"played back, or chosen at random during emission. This is equivalent to a "
"spritesheet for particles."
msgstr ""
"粒子系统可以使用单个纹理或动画 *翻页* （filpbook）。翻页是一种纹理，其中包含"
"可以回放或在发射期间随机选择的多个动画帧。翻页相当于粒子的精灵表。"

msgid "The texture is set via the **Texture** property:"
msgstr "纹理通过 **Texture** 属性设置："

msgid "Using an animation flipbook"
msgstr "使用动画翻页"

msgid ""
"Particle flipbooks are suited to reproduce complex effects such as smoke, "
"fire, explosions. They can also be used to introduce random texture "
"variation, by making every particle use a different texture. You can find "
"existing particle flipbook images online, or pre-render them using external "
"tools such as `Blender <https://www.blender.org/>`__ or `EmberGen <https://"
"jangafx.com/software/embergen/>`__."
msgstr ""
"粒子翻页适合再现复杂的效果，如烟雾、火焰、爆炸。它们还可以通过使每个粒子使用"
"不同的纹理，来引入随机纹理变化。你可以在线寻找现成的粒子翻页图，或使用外部工"
"具预渲染它们，例如 `Blender <https://www.blender.org/>`__ 或 `EmberGen "
"<https://jangafx.com/software/embergen/>`__ 。"

msgid "Example of a particle system that uses a flipbook texture"
msgstr "使用翻页纹理的粒子系统示例"

msgid ""
"Using an animation flipbook requires additional configuration compared to a "
"single texture. For demonstration purposes, we'll use this texture with 5 "
"columns and 7 rows (right-click and choose **Save as…**):"
msgstr ""
"相比起单个纹理，使用动画翻页需要额外的配置。出于演示目的，我们将使用这 5 列 "
"7 行的纹理（右键单击并选择 **另存为...** ）："

msgid "Particle flipbook texture example"
msgstr "屏幕翻页纹理示例"

msgid ""
"Credit: `JoesAlotofthings <https://opengameart.org/content/alot-of-particles-"
"indispersal-special-effect-alotofparticles30>`__ (CC BY 4.0)"
msgstr ""
"作者：`JoesAlotofthings <https://opengameart.org/content/alot-of-particles-"
"indispersal-special-effect-alotofparticles30>`__ （CC BY 4.0）"

msgid ""
"To use an animation flipbook, you must create a new CanvasItemMaterial in "
"the Material section of the GPUParticles2D (or CPUParticles2D) node:"
msgstr ""
"要使用动画翻页，你必须在 GPUParticles2D（或 CPUParticles2D）节点的 Material "
"部分中创建一个新的 CanvasItemMaterial："

msgid ""
"Creating a CanvasItemMaterial at the bottom of the particles node inspector"
msgstr "在粒子节点检查器的底部创建一个 CanvasItemMaterial"

msgid ""
"In this CanvasItemMaterial, enable **Particle Animation** and set **H "
"Frames** and **V Frames** to the number of columns and rows present in your "
"flipbook texture:"
msgstr ""
"在这个 CanvasItemMaterial 中，启用 **Particle Animation** ，并将 **H "
"Frames** 和 **V Frames** 分别设置为翻页纹理中的列数和行数："

msgid "Configuring the CanvasItemMaterial for the example flipbook texture"
msgstr "为示例翻页纹理配置 CanvasItemMaterial"

msgid ""
"Once this is done, the :ref:`Animation section "
"<doc_particle_systems_2d_animation>` in ParticleProcessMaterial (for "
"GPUParticles2D) or in the CPUParticles2D inspector will be effective."
msgstr ""
"完成此操作后，ParticleProcessMaterial（对于 GPUParticles2D）或 "
"CPUParticles2D 检查器中的 :ref:`动画部分 "
"<doc_particle_systems_2d_animation>` 将生效。"

msgid ""
"If your flipbook texture has a black background instead of a transparent "
"background, you will also need to set the blend mode to **Add** instead of "
"**Mix** for correct display. Alternatively, you can modify the texture to "
"have a transparent background in an image editor. In `GIMP <https://"
"gimp.org>`__, this can be done using the **Color > Color to Alpha** menu."
msgstr ""
"如果你的翻页纹理是黑色背景而不是透明背景，你还需要将混合模式设置为 **Add** 而"
"不是 **Mix** 才能使它正确地显示。或者，你也可以修改纹理以使它在图像编辑器中有"
"透明背景。在 `GIMP <https://gimp.org>`__ 中，可以使用 **Color > Color to "
"Alpha** 菜单来完成此操作。"

msgid "Time parameters"
msgstr "时间参数"

msgid "Lifetime"
msgstr "生命期（Lifetime）"

msgid ""
"The time in seconds that every particle will stay alive. When lifetime ends, "
"a new particle is created to replace it."
msgstr ""
"每个粒子存活的时间，单位为秒。当生命期结束时，将创建一个新粒子来替换它。"

msgid "Lifetime: 0.5"
msgstr "寿命:0.5"

msgid "Lifetime: 4.0"
msgstr "寿命:4.0"

msgid "One Shot"
msgstr "单次（One Shot）"

msgid ""
"When enabled, a GPUParticles2D node will emit all of its particles once and "
"then never again."
msgstr "启用后，GPUParticles2D 节点将一次发射其所有粒子，之后将不再发射。"

msgid "Preprocess"
msgstr "预处理（Preprocess）"

msgid ""
"Particle systems begin with zero particles emitted, then start emitting. "
"This can be an inconvenience when loading a scene and systems like a torch, "
"mist, etc. begin emitting the moment you enter. Preprocess is used to let "
"the system process a given number of seconds before it is actually drawn the "
"first time."
msgstr ""
"粒子系统从没有粒子被发射开始，然后开始发射。 当加载场景如火炬，雾等系统时可能"
"会带来不便，因为它会在进入场景的那一刻开始发射。 预处理用于让系统在第一次实际"
"绘制之前处理给定的秒数。"

msgid "Speed Scale"
msgstr "速度缩放（Speed Scale）"

msgid ""
"The speed scale has a default value of ``1`` and is used to adjust the speed "
"of a particle system. Lowering the value will make the particles slower "
"while increasing the value will make the particles much faster."
msgstr ""
"速度比例具有默认值 ``1`` ，用于调整粒子系统的速度。 降低值会使粒子变慢，而增"
"加值会使粒子更快。"

msgid "Explosiveness"
msgstr "爆炸性（Explosiveness）"

msgid ""
"If lifetime is ``1`` and there are 10 particles, it means a particle will be "
"emitted every 0.1 seconds. The explosiveness parameter changes this, and "
"forces particles to be emitted all together. Ranges are:"
msgstr ""
"如果有10个寿命为 ``1`` 的粒子，则意味着粒子将每0.1秒发射一次. 爆炸性参数改变"
"了这一点，并迫使粒子一起发射. 范围是:"

msgid "0: Emit particles at regular intervals (default value)."
msgstr "0: 定期发射粒子(默认值)。"

msgid "1: Emit all particles simultaneously."
msgstr "1: 同时发射所有粒子。"

msgid ""
"Values in the middle are also allowed. This feature is useful for creating "
"explosions or sudden bursts of particles:"
msgstr "中间的值也是允许的。 此功能对于创建爆炸或突然爆发的粒子非常有用:"

msgid "Randomness"
msgstr "随机性（Randomness）"

msgid ""
"All physics parameters can be randomized. Random values range from ``0`` to "
"``1``. The formula to randomize a parameter is:"
msgstr ""
"所有物理参数都可以随机化。 随机值范围从 ``0`` 到 ``1``\\ 。 随机化参数的公式"
"为:"

msgid "Fixed FPS"
msgstr "固定 FPS（Fixed FPS）"

msgid ""
"This setting can be used to set the particle system to render at a fixed "
"FPS. For instance, changing the value to ``2`` will make the particles "
"render at 2 frames per second. Note this does not slow down the particle "
"system itself."
msgstr ""
"此设置可用于将粒子系统设置为以固定的帧率渲染。 例如，将值更改为 ``2`` 将使粒"
"子以每秒2帧的速度渲染。 请注意，这不会减慢粒子系统本身的速度。"

msgid ""
"Godot 4.3 does not currently support physics interpolation for 2D particles. "
"As a workaround, disable physics interpolation for the particles node by "
"setting **Node > Physics Interpolation > Mode** at the bottom of the "
"inspector."
msgstr ""
"Godot 4.3 目前不支持 2D 粒子的物理插值。作为临时解决方案，你可以在检查器底部"
"将粒子节点的 **Node > Physics Interpolation > Mode** 设置为禁用，以关闭物理插"
"值功能。"

msgid "Fract Delta"
msgstr "Fract Delta"

msgid ""
"Setting Fract Delta to ``true`` results in fractional delta calculation, "
"which has a smoother particles display effect. This increased smoothness "
"stems from higher accuracy. The difference is more noticeable in systems "
"with high randomness or fast-moving particles. It helps maintain the visual "
"consistency of the particle system, making sure that each particle's motion "
"aligns with its actual lifespan. Without it, particles might appear to jump "
"or move more than they should in a single frame if they are emitted at a "
"point within the frame. The greater accuracy has a performance tradeoff, "
"particularly in systems with a higher amount of particles."
msgstr ""
"将 Fract Delta 设置为 ``true`` 会启用分数增量计算，这会使粒子显示效果更加平"
"滑。这种平滑性的提升源于更高的计算精度。在具有高度随机性或快速移动粒子的系统"
"中，这种差异会更加明显。它有助于保持粒子系统的视觉一致性，确保每个粒子的运动"
"与其实际生命周期保持一致。如果不启用此选项，当粒子在帧内的某个时间点发射时，"
"可能会出现粒子跳跃或移动超出应有范围的现象。更高的精度会带来性能上的折衷，特"
"别是在粒子数量较多的系统中。"

msgid "Drawing parameters"
msgstr "绘图参数"

msgid "Visibility Rect"
msgstr "可见矩形（Visibility Rect）"

msgid ""
"The visibility rectangle controls the visibility of the particles on screen. "
"If this rectangle is outside of the viewport, the engine will not render the "
"particles on screen."
msgstr ""
"可见性矩形控制粒子在屏幕上的可见性。 如果此矩形位于视口之外，则引擎将不会在屏"
"幕上渲染粒子。"

msgid ""
"The rectangle's ``W`` and ``H`` properties respectively control its Width "
"and its Height. The ``X`` and ``Y`` properties control the position of the "
"upper-left corner of the rectangle, relative to the particle emitter."
msgstr ""
"矩形的 ``W`` 和 ``H`` 属性分别控制其宽度和高度。\\ ``X`` 和 ``Y`` 属性控制矩"
"形左上角相对于粒子发射器的位置。"

msgid ""
"You can have Godot generate a Visibility Rect automatically using the "
"toolbar above the 2d view. To do so, select the GPUParticles2D node and "
"Click ``Particles > Generate Visibility Rect``. Godot will simulate the "
"Particles2D node emitting particles for a few seconds and set the rectangle "
"to fit the surface the particles take."
msgstr ""
"可以使用 2d 视图上方的工具栏让 Godot 自动生成可见性矩形。 为此，请选择 "
"GPUParticles2D 节点并单击 ``粒子 > 生成可见性矩形``\\ 。 Godot 将模拟 "
"Particles2D 节点发射粒子几秒钟，并设置矩形以适合粒子所占据的表面。"

msgid ""
"You can control the emit duration with the ``Generation Time (sec)`` option. "
"The maximum value is 25 seconds. If you need more time for your particles to "
"move around, you can temporarily change the ``preprocess`` duration on the "
"Particles2D node."
msgstr ""
"你可以使用 ``Generation Time (sec)`` 选项控制发射持续时间。 最大值为25秒。 如"
"果你需要更多时间让粒子移动，你可以暂时更改Particles2D节点上的 ``preprocess`` "
"时间。"

msgid "Local Coords"
msgstr "局部坐标（Local Coords）"

msgid ""
"By default this option is on, and it means that the space that particles are "
"emitted to is relative to the node. If the node is moved, all particles are "
"moved with it:"
msgstr ""
"默认情况下，此选项处于启用状态，这意味着粒子发射的空间是相对于节点来算的。 如"
"果移动节点，则所有粒子会随之移动:"

msgid ""
"If disabled, particles will emit to global space, meaning that if the node "
"is moved, already emitted particles are not affected:"
msgstr ""
"如果禁用，粒子将发射到全局空间，这意味着如果移动节点，则已发射的粒子不会受到"
"影响:"

msgid "Draw Order"
msgstr "绘制顺序（Draw Order）"

msgid ""
"This controls the order in which individual particles are drawn. ``Index`` "
"means particles are drawn according to their emission order (default). "
"``Lifetime`` means they are drawn in order of remaining lifetime."
msgstr ""
"这可以控制绘制单个粒子的顺序。\\ ``Index`` 表示粒子根据它们的发射顺序被绘制"
"(默认)。\\ ``Lifetime`` 表示它们按照剩余寿命的顺序被绘制。"

msgid "Particle Process Material Settings"
msgstr "粒子处理材质设置"

msgid ""
"For information on the settings in the ParticleProcessMaterial "
"see :ref:`this page<doc_particle_process_material_2d>`."
msgstr ""
"与 ParticleProcessMaterial 设置相关的信息见\\ :ref:`此页面"
"<doc_particle_process_material_2d>`\\ 。"
