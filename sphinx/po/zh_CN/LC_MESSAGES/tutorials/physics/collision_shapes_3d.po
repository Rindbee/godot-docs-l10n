#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Collision shapes (3D)"
msgstr "碰撞形状（3D）"

msgid "This guide explains:"
msgstr "本指南解释："

msgid "The types of collision shapes available in 3D in Godot."
msgstr "Godot 3D 中可用的碰撞形状类型。"

msgid "Using a convex or a concave mesh as a collision shape."
msgstr "使用凸形或凹形网格作为碰撞形状."

msgid "Performance considerations regarding 3D collisions."
msgstr "有关3D碰撞的性能注意事项."

msgid ""
"Godot provides many kinds of collision shapes, with different performance "
"and accuracy tradeoffs."
msgstr "Godot提供多种碰撞形状, 具有不同的性能和精度权衡."

msgid ""
"When you add multiple collision shapes to a single PhysicsBody, you don't "
"have to worry about them overlapping. They won't \"collide\" with each other."
msgstr ""
"当你将多个碰撞形状添加到一个PhysicsBody中时, 你不必担心它们会重叠, 它们不会相"
"互 \"碰撞\"."

msgid "Primitive collision shapes"
msgstr "基本碰撞形状"

msgid "Godot provides the following primitive collision shape types:"
msgstr "Godot提供了以下基本碰撞形状类型:"

msgid ":ref:`class_BoxShape3D`"
msgstr ":ref:`class_BoxShape3D`"

msgid ":ref:`class_SphereShape3D`"
msgstr ":ref:`class_SphereShape3D`"

msgid ":ref:`class_CapsuleShape3D`"
msgstr ":ref:`class_CapsuleShape3D`"

msgid ":ref:`class_CylinderShape3D`"
msgstr ":ref:`class_CylinderShape3D`"

msgid ""
"You can represent the collision of most smaller objects using one or more "
"primitive shapes. However, for more complex objects, such as a large ship or "
"a whole level, you may need convex or concave shapes instead. More on that "
"below."
msgstr ""
"你可以使用一个或多个原始形状来表示大多数较小物体的碰撞. 然而, 对于更复杂的物"
"体, 如大型船舶或整个水平面, 你可能需要凸形或凹形来代替. 下面会有更多的介绍."

msgid ""
"We recommend favoring primitive shapes for dynamic objects such as "
"RigidBodies and CharacterBodies as their behavior is the most reliable. They "
"often provide better performance as well."
msgstr ""
"建议动态对象使用原始图形（如 RigidBodies 和 KinematicBodies），因为它们的行为"
"是可靠的，通常也能提供更好的性能。"

msgid "Convex collision shapes"
msgstr "凸型碰撞形状"

msgid ""
":ref:`Convex collision shapes <class_ConvexPolygonShape3D>` are a compromise "
"between primitive collision shapes and concave collision shapes. They can "
"represent shapes of any complexity, but with an important caveat. As their "
"name implies, an individual shape can only represent a *convex* shape. For "
"instance, a pyramid is *convex*, but a hollow box is *concave*. To define a "
"concave object with a single collision shape, you need to use a concave "
"collision shape."
msgstr ""
":ref:`凸碰撞形状 <class_ConvexPolygonShape3D>` 是图元碰撞形状和凹碰撞形状之间"
"的折衷。它们可以表示任何复杂程度的形状，但有一个重要的注意事项。顾名思义，单"
"个形状只能表示\\ *凸*\\ 形状。例如，金字塔是\\ *凸*\\ 的，而空心盒子是\\ *凹"
"*\\ 的。要用单个碰撞形状定义凹物体，你需要使用凹碰撞形状。"

msgid ""
"Depending on the object's complexity, you may get better performance by "
"using multiple convex shapes instead of a concave collision shape. Godot "
"lets you use *convex decomposition* to generate convex shapes that roughly "
"match a hollow object. Note this performance advantage no longer applies "
"after a certain amount of convex shapes. For large and complex objects such "
"as a whole level, we recommend using concave shapes instead."
msgstr ""
"根据对象的复杂程度, 可能要通过使用多个凸形而不是一个凹形碰撞形状来获得更好的"
"性能.Godot可以使用 *凸分解* 来生成与空心物体大致匹配的凸形. 请注意, 在一定数"
"量的凸形之后, 就没有了这种性能优势, 对于大而复杂的对象, 如整个关卡, 建议使用"
"凹形代替."

msgid ""
"You can generate one or several convex collision shapes from the editor by "
"selecting a MeshInstance3D and using the **Mesh** menu at the top of the 3D "
"viewport. The editor exposes two generation modes:"
msgstr ""
"你可以通过选择 MeshInstance3D 并使用 3D 视口顶部的\\ **网格**\\ 菜单从编辑器"
"生成一个或多个凸碰撞形状。编辑器提供两种生成模式："

msgid ""
"**Create Single Convex Collision Sibling** uses the Quickhull algorithm. It "
"creates one CollisionShape node with an automatically generated convex "
"collision shape. Since it only generates a single shape, it provides good "
"performance and is ideal for small objects."
msgstr ""
"**创建单凸碰撞同级** 使用Quickhull算法, 创建一个CollisionShape碰撞形状节点, "
"并自动生成一个凸碰撞形状, 由于只生成单个形状, 因此提供了良好的性能, 非常适合"
"小对象."

msgid ""
"**Create Multiple Convex Collision Siblings** uses the V-HACD algorithm. It "
"creates several CollisionShape nodes, each with a convex shape. Since it "
"generates multiple shapes, it is more accurate for concave objects at the "
"cost of performance. For objects with medium complexity, it will likely be "
"faster than using a single concave collision shape."
msgstr ""
"**创建多个凸形碰撞同级** 使用V-HACD算法. 创建多个CollisionShape碰撞形状节点, "
"每个节点都有一个凸形, 由于它能生成多个形状, 所以对于凹形物体来说, 精度更高, "
"但性能不佳. 对于中等复杂度的对象, 可能会比使用单个凹形碰撞形状更快."

msgid "Concave or trimesh collision shapes"
msgstr "凹面或三面体碰撞形状"

msgid ""
"Even though concave shapes offer the most accurate *collision*, contact "
"reporting can be less precise than primitive shapes."
msgstr "即使凹形提供了最准确的 *碰撞*, 但触碰信息的精度可能不如基础形状."

msgid ""
"When not using GridMaps for level design, concave shapes are the best "
"approach for a level's collision. That said, if your level has small "
"details, you may want to exclude those from collision for performance and "
"game feel. To do so, you can build a simplified collision mesh in a 3D "
"modeler and have Godot generate a collision shape for it automatically. More "
"on that below"
msgstr ""
"当不使用网络地图进行关卡设计时, 凹形是关卡碰撞的最佳方法, 也就是说, 如果关卡"
"有一些小细节, 可能希望将这些细节排除碰撞之外, 以保证性能和游戏体验, 要做到这"
"一点, 可以在3D建模中建立一个简化的碰撞网格, 并让Godot为其自动生成一个碰撞形"
"状. 下面会有更多的介绍"

msgid ""
"Note that unlike primitive and convex shapes, a concave collision shape "
"doesn't have an actual \"volume\". You can place objects both *outside* of "
"the shape as well as *inside*."
msgstr ""
"请注意, 与基础形状和凸形状不同, 凹形碰撞形状没有实际的 \"体积\", 既可以将对象"
"放置在形状的 *外侧*, 也可以放置在 *内侧*."

msgid ""
"You can generate a concave collision shape from the editor by selecting a "
"MeshInstance3D and using the **Mesh** menu at the top of the 3D viewport. "
"The editor exposes two options:"
msgstr ""
"选中 MeshInstance3D，然后使用 3D 视口顶部的\\ **网格**\\ 菜单就可以在编辑器中"
"生成一个凹形碰撞形状。编辑器提供了两个选项："

msgid ""
"See :ref:`doc_importing_3d_scenes` for information on how to export models "
"for Godot and automatically generate collision shapes on import."
msgstr ""
"关于如何为 Godot 导出模型，以及如何在导入时自动生成碰撞形状，"
"见 :ref:`doc_importing_3d_scenes`\\ 。"

msgid "Performance caveats"
msgstr "性能方面的注意事项"

msgid ""
"You aren't limited to a single collision shape per PhysicsBody. Still, we "
"recommend keeping the number of shapes as low as possible to improve "
"performance, especially for dynamic objects like RigidBodies and "
"CharacterBodies. On top of that, avoid translating, rotating, or scaling "
"CollisionShapes to benefit from the physics engine's internal optimizations."
msgstr ""
"每个 PhysicsBody（物理体）不限于一个碰撞形状。尽管如此，我们还是建议尽量减少"
"碰撞形状的数量以提高性能。特别是对于像 RigidBody（刚体）和 CharacterBody（角"
"色体）这样的动态对象。除此之外，避免平移、旋转或缩放碰撞形状，以从物理引擎的"
"内部优化中受益。"

msgid ""
"When using a single non-transformed collision shape in a StaticBody, the "
"engine's *broad phase* algorithm can discard inactive PhysicsBodies. The "
"*narrow phase* will then only have to take into account the active bodies' "
"shapes. If a StaticBody has many collision shapes, the broad phase will "
"fail. The narrow phase, which is slower, must then perform a collision check "
"against each shape."
msgstr ""
"在 StaticBody 中使用单个未变换的碰撞形状时，引擎的\\ *宽相位*\\ 算法可以丢弃"
"不活跃的 PhysicsBody。这个\\ *窄相位*\\ 只需考虑到活跃物体的形状。如果一个 "
"StaticBody 有许多碰撞形状， 那么宽相位就会失败。较慢的窄相位必须对每个形状执"
"行碰撞检查。"

msgid ""
"If you run into performance issues, you may have to make tradeoffs in terms "
"of accuracy. Most games out there don't have a 100% accurate collision. They "
"find creative ways to hide it or otherwise make it unnoticeable during "
"normal gameplay."
msgstr ""
"如果遇到性能问题，你可能需要在准确性方面进行权衡。大多数游戏都没有100%的精确"
"碰撞。他们找到了一些具有创造性的方法来隐藏它，或者在正常的游戏中让它变得不被"
"人注意到。"
