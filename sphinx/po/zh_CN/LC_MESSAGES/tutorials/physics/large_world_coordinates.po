#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Large world coordinates"
msgstr "大世界坐标"

msgid ""
"Large world coordinates are mainly useful in 3D projects; they are rarely "
"required in 2D projects. Also, unlike 3D rendering, 2D rendering currently "
"doesn't benefit from increased precision when large world coordinates are "
"enabled."
msgstr ""
"大世界坐标主要用于 3D 项目；2D 项目很少会用到。此外，启用大世界坐标后，2D 渲"
"染目前无法从精度的增加中获益，但 3D 渲染可以。"

msgid "Why use large world coordinates?"
msgstr "为什么要使用大世界坐标？"

msgid ""
"In Godot, physics simulation and rendering both rely on *floating-point* "
"numbers. However, in computing, floating-point numbers have **limited "
"precision and range**. This can be a problem for games with huge worlds, "
"such as space or planetary-scale simulation games."
msgstr ""
"在 Godot 中，物理仿真和渲染都依赖于\\ *浮点数*\\ 。然而，计算机中浮点数的\\ "
"**精度和范围是有限的**\\ ，可能在太空、星球尺度的仿真游戏等拥有庞大世界的游戏"
"中产生问题。"

msgid ""
"Precision is the greatest when the value is close to ``0.0``. Precision "
"becomes gradually lower as the value increases or decreases away from "
"``0.0``. This occurs every time the floating-point number's *exponent* "
"increases, which happens when the floating-point number surpasses a power of "
"2 value (2, 4, 8, 16, …). Every time this occurs, the number's minimum step "
"will *increase*, resulting in a loss of precision."
msgstr ""
"浮点数的精度在 ``0.0`` 附近是最高的。随着取值离 ``0.0`` 越来越远，精度就会变"
"得越来越低。每次浮点数的\\ *指数*\\ 变大时，精度就会降低，也就是浮点数取值越"
"过 2 的幂（2、4、8、16……）的时候。此时浮点数的最小步长就会\\ *增大*\\ ，精度"
"因此变低。"

msgid ""
"In practice, this means that as the player moves away from the world origin "
"(``Vector2(0, 0)`` in 2D games or ``Vector3(0, 0, 0)`` in 3D games), "
"precision will decrease."
msgstr ""
"在实践中，这意味着玩家远离世界原点（2D 游戏的 ``Vector2(0, 0)`` 和 3D 游戏的 "
"``Vector3(0, 0, 0)``\\ ），精度就会下降。"

msgid ""
"This loss of precision can result in objects appearing to \"vibrate\" when "
"far away from the world origin, as the model's position will snap to the "
"nearest value that can be represented in a floating-point number. This can "
"also result in physics glitches that only occur when the player is far from "
"the world origin."
msgstr ""
"精度的丢失可能会导致远离世界原点的对象看上去在“抖动”，因为模型的位置会吸附到"
"最接近的浮点数能够表示的值。这种情况下，如果玩家远离世界原点，还可能导致物理"
"方面的问题。"

msgid ""
"The range determines the minimum and maximum values that can be stored in "
"the number. If the player tries to move past this range, they will simply "
"not be able to. However, in practice, floating-point precision almost always "
"becomes a problem before the range does."
msgstr ""
"范围决定的是所能够存储的最小和最大值。如果玩家尝试移出这个范围就会直接失败。"
"但是实际情况下，在能够受到范围影响之前几乎都会遇到浮点数精度问题。"

msgid ""
"The range and precision (minimum step between two exponent intervals) are "
"determined by the floating-point number type. The *theoretical* range allows "
"extremely high values to be stored in single-precision floats, but with very "
"low precision. In practice, a floating-point type that cannot represent all "
"integer values is not very useful. At extreme values, precision becomes so "
"low that the number cannot even distinguish two separate *integer* values "
"from each other."
msgstr ""
"范围和精度（两个指数间隔的最小步长）取决于浮点数的类型。单精度浮点数的\\ *理"
"论*\\ 范围支持存储极高的值，单精度很低。实践中，无法表示所有整数值的浮点数类"
"型并不是很有用。极值附近的精度会变得非常低，低到连两个\\ *整数*\\ 值也无法区"
"分。"

msgid ""
"This is the range where individual integer values can be represented in a "
"floating-point number:"
msgstr "以下是浮点数能够表示整数值的范围："

msgid ""
"**Single-precision float range (represent all integers):** Between "
"-16,777,216 and 16,777,216"
msgstr ""
"**单精度浮点数范围（表示所有整数）：**\\ -16,777,216 和 16,777,216 之间"

msgid "Range"
msgstr "范围"

msgid "Single step"
msgstr "单精度步长"

msgid "Double step"
msgstr "双精度步长"

msgid "Comment"
msgstr "注释"

msgid "[1; 2]"
msgstr "[1; 2]"

msgid "~0.0000001"
msgstr "~0.0000001"

msgid "~1e-15"
msgstr "~1e-15"

msgid "Precision becomes greater near 0.0 (this table is abbreviated)."
msgstr "0.0 附近精度会变大（本表省略）。"

msgid "[2; 4]"
msgstr "[2; 4]"

msgid "~0.0000002"
msgstr "~0.0000002"

msgid "[4; 8]"
msgstr "[4; 8]"

msgid "~0.0000005"
msgstr "~0.0000005"

msgid "[8; 16]"
msgstr "[8; 16]"

msgid "~0.000001"
msgstr "~0.000001"

msgid "~1e-14"
msgstr "~1e-14"

msgid "[16; 32]"
msgstr "[16; 32]"

msgid "~0.000002"
msgstr "~0.000002"

msgid "[32; 64]"
msgstr "[32; 64]"

msgid "~0.000004"
msgstr "~0.000004"

msgid "[64; 128]"
msgstr "[64; 128]"

msgid "~0.000008"
msgstr "~0.000008"

msgid "~1e-13"
msgstr "~1e-13"

msgid "[128; 256]"
msgstr "[128; 256]"

msgid "~0.000015"
msgstr "~0.000015"

msgid "[256; 512]"
msgstr "[256; 512]"

msgid "~0.00003"
msgstr "~0.00003"

msgid "[512; 1024]"
msgstr "[512; 1024]"

msgid "~0.00006"
msgstr "~0.00006"

msgid "~1e-12"
msgstr "~1e-12"

msgid "[1024; 2048]"
msgstr "[1024; 2048]"

msgid "~0.0001"
msgstr "~0.0001"

msgid "[2048; 4096]"
msgstr "[2048; 4096]"

msgid "~0.0002"
msgstr "~0.0002"

msgid ""
"Maximum *recommended* single-precision range for a first-person 3D game "
"without rendering artifacts or physics glitches."
msgstr ""
"第一人称 3D 游戏的最大\\ *推荐*\\ 单精度范围，不会有渲染和物理方面的问题。"

msgid "[4096; 8192]"
msgstr "[4096; 8192]"

msgid "~0.0005"
msgstr "~0.0005"

msgid ""
"Maximum *recommended* single-precision range for a third-person 3D game "
"without rendering artifacts or physics glitches."
msgstr ""
"第三人称 3D 游戏的最大\\ *推荐*\\ 单精度范围，不会有渲染和物理方面的问题。"

msgid "[8192; 16384]"
msgstr "[8192; 16384]"

msgid "~0.001"
msgstr "~0.001"

msgid "[16384; 32768]"
msgstr "[16384; 32768]"

msgid "~0.0019"
msgstr "~0.0019"

msgid "~1e-11"
msgstr "~1e-11"

msgid ""
"Maximum *recommended* single-precision range for a top-down 3D game without "
"rendering artifacts or physics glitches."
msgstr ""
"俯视角 3D 游戏的最大\\ *推荐*\\ 单精度范围，不会有渲染和物理方面的问题。"

msgid "[32768; 65536]"
msgstr "[32768; 65536]"

msgid "~0.0039"
msgstr "~0.0039"

msgid ""
"Maximum *recommended* single-precision range for any 3D game. Double "
"precision (large world coordinates) is usually required past this point."
msgstr ""
"所有 3D 游戏的最大\\ *推荐*\\ 单精度范围。双精度（大世界坐标）通常会超过这个"
"点。"

msgid "[65536; 131072]"
msgstr "[65536; 131072]"

msgid "~0.0078"
msgstr "~0.0078"

msgid "[131072; 262144]"
msgstr "[131072; 262144]"

msgid "~0.0156"
msgstr "~0.0156"

msgid "~1e-10"
msgstr "~1e-10"

msgid "> 262144"
msgstr "> 262144"

msgid "> ~0.0313"
msgstr "> ~0.0313"

msgid "~1e-10 (0.0000000001)"
msgstr "~1e-10（0.0000000001）"

msgid ""
"Double-precision remains far more precise than single-precision past this "
"value."
msgstr "超过这个值之后，双精度仍然比单精度要精确地多。"

msgid ""
"When using single-precision floats, it is possible to go past the suggested "
"ranges, but more visible artifacting will occur and physics glitches will be "
"more common (such as the player not walking straight in certain directions)."
msgstr ""
"使用单精度浮点数时，可以超过建议的范围，但此时就会更多可见的渲染问题，物理问"
"题也会变得更常见（例如玩家在某些方向上无法直线移动）。"

msgid ""
"See the `Demystifying Floating Point Precision <https://blog.demofox."
"org/2017/11/21/>`__ article for more information."
msgstr ""
"详见 `Demystifying Floating Point Precision <https://blog.demofox."
"org/2017/11/21/>`__ 一文。"

msgid "How large world coordinates work"
msgstr "大世界坐标的工作原理"

msgid ""
"Large world coordinates (also known as **double-precision physics**) "
"increase the precision level of all floating-point computations within the "
"engine."
msgstr ""
"大世界坐标（也叫\\ **双精度物理**\\ ）能够增加引擎中所有浮点数计算的精度级"
"别。"

msgid ""
"By default, :ref:`class_float` is 64-bit in GDScript, but :ref:"
"`class_Vector2`, :ref:`class_Vector3` and :ref:`class_Vector4` are 32-bit. "
"This means that the precision of vector types is much more limited. To "
"resolve this, we can increase the number of bits used to represent a "
"floating-point number in a Vector type. This results in an *exponential* "
"increase in precision, which means the final value is not just twice as "
"precise, but potentially thousands of times more precise at high values. The "
"maximum value that can be represented is also greatly increased by going "
"from a single-precision float to a double-precision float."
msgstr ""
"在 GDScript 中， :ref:`class_float` 默认为 64 位，但 :ref:`class_Vector2`, :"
"ref:`class_Vector3` 和 :ref:`class_Vector4` 为 32 位。这意味着向量类型的精度"
"受到很大限制。为了解决这个问题，我们可以增加向量类型中用于表示浮点数的位数。"
"这样一来，精度就会呈*指数*增长，这意味着最终值的精度不仅提高了一倍，而且在数"
"值较高时，精度可能会提高数千倍。从单精度浮点数到双精度浮点数，可表示的最大值"
"也大大增加。"

msgid ""
"To avoid model snapping issues when far away from the world origin, Godot's "
"3D rendering engine will increase its precision for rendering operations "
"when large world coordinates are enabled. The shaders do not use double-"
"precision floats for performance reasons, but an `alternative solution "
"<https://github.com/godotengine/godot/pull/66178>`__ is used to emulate "
"double precision for rendering using single-precision floats."
msgstr ""
"为了避免远离世界原点时出现模型吸附（model snapping）问题，Godot 的 3D 渲染引"
"擎将在启用大世界坐标时提高渲染的精度。出于性能原因，着色器不使用双精度浮点"
"数，但会使用 `替代解决方案 <https://github.com/godotengine/godot/"
"pull/66178>`__ 来模拟双精度，以便使用单精度浮点数进行渲染。"

msgid ""
"Enabling large world coordinates comes with a performance and memory usage "
"penalty, especially on 32-bit CPUs. Only enable large world coordinates if "
"you actually need them."
msgstr ""
"只有确实需要大世界坐标时才启用它，因为启用大世界坐标会对性能和内存占用带来负"
"面影响，这种负面影响在32位CPU上更加明显。"

msgid ""
"This feature is tailored towards mid-range/high-end desktop platforms. Large "
"world coordinates may not perform well on low-end mobile devices, unless you "
"take steps to reduce CPU usage with other means (such as decreasing the "
"number of physics ticks per second)."
msgstr ""
"此功能专为中端/高端桌面平台量身定制。大世界坐标在低端移动设备上可能表现不佳，"
"除非你采取措施通过其他方式来减少 CPU 使用率（例如减少每秒的物理循环 physics "
"tick）。"

msgid "Who are large world coordinates for?"
msgstr "大世界坐标的目标群体是谁？"

msgid ""
"Large world coordinates are typically required for 3D space or planetary-"
"scale simulation games. This extends to games that require supporting *very* "
"fast movement speeds, but also very slow *and* precise movements at times."
msgstr ""
"大世界坐标的典型使用场景是3D太空类型或者星球规模的模拟游戏。延伸来讲，如果一"
"些游戏需要在支持*非常*快速的运动的同时还要支持非常慢并且精确的运动，那可能需"
"要使用大世界坐标。"

msgid ""
"On the other hand, it's important to only use large world coordinates when "
"actually required (for performance reasons). Large world coordinates are "
"usually **not** required for:"
msgstr ""
"从另一方面来看，只有在确实需要大世界坐标才启用它是至关重要的（从性能方面考"
"虑）。以下情况通常**不**适合使用大世界坐标："

msgid "2D games, as precision issues are usually less noticeable."
msgstr "2D 游戏，因为 2D 游戏中的精度问题通常不太明显。"

msgid "Games with small-scale or medium-scale worlds."
msgstr "那些世界尺寸是小型或者中型的游戏。"

msgid ""
"Games with large worlds, but split into different levels with loading "
"sequences in between. You can center each level portion around the world "
"origin to avoid precision issues without a performance penalty."
msgstr ""
"游戏的世界很大，但分为不同的级别，通过加载序列来实现场景的切换和加载。你可以"
"将每个级别的内容存放在其世界原点的周围，这样就可以在不产生性能损耗的情况下避"
"免精度问题。"

msgid ""
"Open world games with a *playable on-foot area* not exceeding 8192×8192 "
"meters (centered around the world origin). As shown in the above table, the "
"level of precision remains acceptable within that range, even for a first-"
"person game."
msgstr ""
"*可步行区域* 不超过8192×8192米（以世界原点为中心）的开放世界游戏。如上表所"
"示，即使是第一人称游戏，精度水平在该范围内也可以接受。"

msgid ""
"**If in doubt**, you probably don't need to use large world coordinates in "
"your project. For reference, most modern AAA open world titles don't use a "
"large world coordinates system and still rely on single-precision floats for "
"both rendering and physics."
msgstr ""
"**如果对是否使用大世界坐标存在疑虑** ，那你可能并不需要在你的项目中使用大世界"
"坐标。实际上，大多数现代的3A开放世界主题的游戏并没有使用大世界坐标系统，这些"
"游戏仍然依靠单精度浮点类型来处理游戏中的渲染和物理。"

msgid "Enabling large world coordinates"
msgstr "启用大世界坐标"

msgid ""
"This process requires recompiling the editor and all export template "
"binaries you intend to use. If you only intend to export your project in "
"release mode, you can skip the compilation of debug export templates. In any "
"case, you'll need to compile an editor build so you can test your large "
"precision world without having to export the project every time."
msgstr ""
"此过程需要重新编译编辑器以及你打算使用的所有导出模板的二进制文件。如果只打算"
"在发布模式下导出项目，则可以跳过调试导出模板的编译。无论如何，你都需要编译一"
"个编辑器构建版，这样就可以可以测试你的精确大世界，而不必每次都导出项目。"

msgid ""
"See the :ref:`Compiling <toc-devel-compiling>` section for compiling "
"instructions for each target platform. You will need to add the "
"``precision=double`` SCons option when compiling the editor and export "
"templates."
msgstr ""
"请参阅 :ref:`编译 <toc-devel-compiling>` 部分来了解每个目标平台的编译指令。编"
"译编辑器和导出模板时，需要添加 ``precision=double`` SCons 选项。"

msgid ""
"The resulting binaries will be named with a ``.double`` suffix to "
"distinguish them from single-precision binaries (which lack any precision "
"suffix). You can then specify the binaries as custom export templates in "
"your project's export presets in the Export dialog."
msgstr ""
"生成的二进制文件将以 ``.double`` 后缀命名，以将其与单精度二进制文件（缺少任何"
"精度后缀）区分开来。你可以随后在“导出”对话框的项目导出预设中将二进制文件指定"
"为自定义导出模板。"

msgid "Compatibility between single-precision and double-precision builds"
msgstr "单双精度构建之间的的兼容性"

msgid ""
"When saving a *binary* resource using the :ref:`class_ResourceSaver` "
"singleton, a special flag is stored in the file if the resource was saved "
"using a build that uses double-precision numbers. As a result, all binary "
"resources will change on disk when you switch to a double-precision build "
"and save over them."
msgstr ""
"当使用 :ref:`class_ResourceSaver` 单例保存 *可执行文件* 资源时，如果该资源是"
"使用双精度数字的构建方式保存的，则会在文件中存储一个特殊标志。因此，当你切换"
"到双精度构建并保存资源时，磁盘上的所有可执行文件资源都将发生变化。"

msgid ""
"Both single-precision and double-precision builds support using the :ref:"
"`class_ResourceLoader` singleton on resources that use this special flag. "
"This means single-precision builds can load resources saved using double-"
"precision builds and vice versa. Text-based resources don't store a double-"
"precision flag, as they don't require such a flag for correct reading."
msgstr ""
"单精度和双精度构建都支持在使用此特殊标志的资源上使用 :ref:"
"`class_ResourceLoader` 单例。这意味着单精度构建可以加载使用双精度构建的资源，"
"反之亦然。基于文本的资源不存储双精度标志，因为它们不需要这种标志来正确读取。"

msgid "Known incompatibilities"
msgstr "已知的不兼容"

msgid ""
"In a networked multiplayer game, the server and all clients should be using "
"the same build type to ensure precision remains consistent across clients. "
"Using different build types *may* work, but various issues can occur."
msgstr ""
"在网络多人游戏中，服务器和所有客户端都应使用相同的构建类型，以确保客户端之间"
"的精度保持一致。使用不同的构建类型 *可能* 也有效，但也可能会出现各种问题。"

msgid ""
"The GDExtension API changes in an incompatible way in double-precision "
"builds. This means extensions **must** be rebuilt to work with double-"
"precision builds. On the extension developer's end, the ``REAL_T_IS_DOUBLE`` "
"define is enabled when building a GDExtension with ``precision=double``. "
"``real_t`` can be used as an alias for ``float`` in single-precision builds, "
"and ``double`` in double-precision builds."
msgstr ""
"在双精度版本中，GDExtension API 以不兼容的方式发生变化。这意味着扩展 **必须"
"** 重新构建，才能使用双精度版本。在扩展开发者端，当使用 ``precision=double`` "
"构建 GDExtension 时，会启用 ``REAL_T_IS_DOUBLE`` 定义。在单精度构建中， "
"``real_t`` 可用作 ``float`` 的别名，在双精度构建中，可用作 ``double`` 的别"
"名。"

msgid "Limitations"
msgstr "限制"

msgid ""
"Since 3D rendering shaders don't actually use double-precision floats, there "
"are some limitations when it comes to 3D rendering precision:"
msgstr ""
"由于 3D 渲染着色器实际上并不使用双精度浮点，因此在 3D 渲染精度方面存在一些限"
"制："

msgid ""
"Shaders using the ``skip_vertex_transform`` or ``world_vertex_coords`` don't "
"benefit from increased precision."
msgstr ""
"使用 ``skip_vertex_transform`` 或 ``world_vertex_coords`` 的着色器不会从精度"
"提高中受益。"

msgid ""
":ref:`Triplanar mapping <doc_standard_material_3d_triplanar_mapping>` "
"doesn't benefit from increased precision. Materials using triplanar mapping "
"will exhibit visible jittering when far away from the world origin."
msgstr ""
":ref:`三平面映射 <doc_standard_material_3d_triplanar_mapping>` 不会从精度提高"
"中受益。当远离世界原点时，使用三平面映射的材质将表现出可见的抖动。"

msgid ""
"2D rendering currently doesn't benefit from increased precision when large "
"world coordinates are enabled. This can cause visible model snapping to "
"occur when far away from the world origin (starting from a few million "
"pixels at typical zoom levels). 2D physics calculations will still benefit "
"from increased precision though."
msgstr ""
"当启用大世界坐标时，目前 2D 渲染还无法从提高精度中受益。这可能会导致在远离世"
"界原点（从典型缩放级别的几百万像素开始）时发生可见的模型吸附（model "
"snapping）。不过，二维物理计算仍将从提高精度中受益。"

msgid "Translation status"
msgstr "翻译状态"
