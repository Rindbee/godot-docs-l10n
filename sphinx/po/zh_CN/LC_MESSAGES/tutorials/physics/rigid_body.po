#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using RigidBody"
msgstr "使用 RigidBody"

msgid "What is a rigid body?"
msgstr "什么是刚体？"

msgid ""
"A rigid body is one that is directly controlled by the physics engine in "
"order to simulate the behavior of physical objects. In order to define the "
"shape of the body, it must have one or more :ref:`Shape3D <class_Shape3D>` "
"objects assigned. Note that setting the position of these shapes will affect "
"the body's center of mass."
msgstr ""
"刚体是由物理引擎直接控制的物体，用于模拟物体的的物理行为。为了定义刚体的形"
"状，必须为其指定一个或多个 :ref:`Shape3D <class_Shape3D>` 对象。注意，设置这"
"些形状的位置将影响物体的质心。"

msgid "How to control a rigid body"
msgstr "如何控制刚体"

msgid ""
"A rigid body's behavior can be altered by setting its properties, such as "
"mass and weight. A physics material needs to be added to the rigid body to "
"adjust its friction and bounce, and set if it's absorbent and/or rough. "
"These properties can be set in the Inspector or via code. See :ref:"
"`RigidBody3D <class_RigidBody3D>` and :ref:`PhysicsMaterial "
"<class_PhysicsMaterial>` for the full list of properties and their effects."
msgstr ""
"刚体的行为可以通过设置其属性（例如质量和重量）来进行调整。需要给刚体添加一个"
"物理材质来调整它的摩擦和反弹，并设置它是否具有吸收性、粗糙度。这些属性可以在"
"检查器中或通过代码来设置。参见 :ref:`RigidBody3D <class_RigidBody3D>` 和 :"
"ref:`PhysicsMaterial <class_PhysicsMaterial>` 获取完整的属性列表和它们的效"
"果。"

msgid ""
"There are several ways to control a rigid body's movement, depending on your "
"desired application."
msgstr "有几种方法可以控制刚体的运动, 这取决于你的应用程序."

msgid ""
"If you only need to place a rigid body once, for example to set its initial "
"location, you can use the methods provided by the :ref:`Node3D "
"<class_Node3D>` node, such as ``set_global_transform()`` or ``look_at()``. "
"However, these methods cannot be called every frame or the physics engine "
"will not be able to correctly simulate the body's state. As an example, "
"consider a rigid body that you want to rotate so that it points towards "
"another object. A common mistake when implementing this kind of behavior is "
"to use ``look_at()`` every frame, which breaks the physics simulation. "
"Below, we'll demonstrate how to implement this correctly."
msgstr ""
"如果你只需要放置一次刚体，例如设置它的初始位置，你可以使用 :ref:`Node3D "
"<class_Node3D>` 节点提供的方法，例如 ``set_global_transform()`` 或 "
"``look_at()``\\ 。但是，这些方法不能每一帧都被调用，否则物理引擎将无法正确地"
"仿真物体的状态。举个例子，考虑一个刚体，你想旋转它，使它指向另一个对象。在实"
"现这种行为时，一个常见的错误是每一帧都使用 ``look_at()`` ，这样会破坏物理仿"
"真。下面，我们将演示如何正确地实现这一点。"

msgid ""
"The fact that you can't use ``set_global_transform()`` or ``look_at()`` "
"methods doesn't mean that you can't have full control of a rigid body. "
"Instead, you can control it by using the ``_integrate_forces()`` callback. "
"In this method, you can add *forces*, apply *impulses*, or set the "
"*velocity* in order to achieve any movement you desire."
msgstr ""
"你不能使用 ``set_global_transform()`` 或 ``look_at()`` 方法并不意味着你不能完"
"全控制一个刚体. 相反, 你可以通过使用 ``_integrate_forces()`` 回调来控制它. 在"
"这个方法中, 你可以添加 *力* , 应用 *冲量* , 或者设置 *速度* , 以实现你想要的"
"任何运动."

msgid "The \"look at\" method"
msgstr "“look at”方法"

msgid ""
"As described above, using the Node3D's ``look_at()`` method can't be used "
"each frame to follow a target. Here is a custom ``look_at()`` method called "
"``look_follow()`` that will work with rigid bodies:"
msgstr ""
"如上所述，使用 Node3D 节点的 ``look_at()`` 方法不能每一帧都用来跟踪一个目标。"
"这里有一个自定义的 ``look_at()`` 方法叫做 ``look_follow()`` ，可以适用于刚"
"体："
