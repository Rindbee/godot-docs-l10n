#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Running code in the editor"
msgstr "在编辑器中运行代码"

msgid "What is ``@tool``?"
msgstr "``@tool`` 是什么？"

msgid ""
"``@tool`` is a powerful line of code that, when added at the top of your "
"script, makes it execute in the editor. You can also decide which parts of "
"the script execute in the editor, which in game, and which in both."
msgstr ""
"``@tool`` 是一行强大的代码，添加到脚本的顶部后，脚本就会在编辑器中执行。你还"
"可以决定脚本的哪些部分在编辑器中执行、哪些部分在游戏中执行、哪部分在两者中均"
"执行。"

msgid ""
"You can use it for doing many things, but it is mostly useful in level "
"design for visually presenting things that are hard to predict ourselves. "
"Here are some use cases:"
msgstr ""
"你可以使用它来做很多事情, 它在层次设计中非常有用, 可以直观地呈现难以预测的事"
"物. 以下是一些用例:"

msgid ""
"If you have a cannon that shoots cannonballs affected by physics (gravity), "
"you can draw the cannonball's trajectory in the editor, making level design "
"a lot easier."
msgstr ""
"如果你有一门发射受物理学(重力)影响的炮弹的大炮, 你可以在编辑器中画出炮弹的轨"
"迹, 使关卡设计容易得多."

msgid ""
"If you have jumppads with varying jump heights, you can draw the maximum "
"jump height a player would reach if it jumped on one, also making level "
"design easier."
msgstr ""
"如果你有不同跳跃高度的跳线, 你可以绘制游戏角色能跳过的最大跳跃高度, 也可以让"
"关卡设计变得更容易."

msgid ""
"If your player doesn't use a sprite, but draws itself using code, you can "
"make that drawing code execute in the editor to see your player."
msgstr ""
"如果你的游戏角色不使用精灵, 却使用代码来绘制, 你可以在编辑器中执行该绘图代码"
"以查看你的游戏角色."

msgid "How to use ``@tool``"
msgstr "如何使用 ``@tool``"

msgid ""
"To turn a script into a tool, add the ``@tool`` annotation at the top of "
"your code."
msgstr "要把脚本变成工具脚本，请在代码顶部添加 ``@tool`` 注解。"

msgid ""
"To check if you are currently in the editor, use: "
"``Engine.is_editor_hint()``."
msgstr ""
"要检查你当前是否在编辑器中，请使用：\\ ``Engine.is_editor_hint()``\\ 。"

msgid "For example, if you want to execute some code only in the editor, use:"
msgstr "例如, 如果你想只在编辑器中执行一些代码, 可以使用:"

msgid ""
"On the other hand, if you want to execute code only in game, simply negate "
"the same statement:"
msgstr "另一方面, 如果你想只在游戏中执行代码, 只需否定相同的语句:"

msgid ""
"Pieces of code that do not have either of the 2 conditions above will run "
"both in-editor and in-game."
msgstr "没有上述两个条件之一的代码片段将可在编辑器和游戏中运行。"

msgid "Here is how a ``_process()`` function might look for you:"
msgstr "以下是 ``_process()`` 函数的示例:"

msgid "Important information"
msgstr "重要信息"

msgid ""
"Any other GDScript that your tool script uses must *also* be a tool. Any "
"GDScript without ``@tool`` used by the editor will act like an empty file!"
msgstr ""
"你的工具脚本使用的任何其他 GDScript *也*\\ 必须是一个工具脚本。编辑器使用的任"
"何没有 ``@tool`` 的 GDScript 都将像一个空文件一样！"

msgid ""
"Extending a ``@tool`` script does not automatically make the extending "
"script a ``@tool``. Omitting ``@tool`` from the extending script will "
"disable tool behavior from the super class. Therefore the extending script "
"should also specify the ``@tool`` annotation."
msgstr ""
"扩展一个 ``@tool`` 脚本不会自动使扩展的脚本成为 ``@tool``\\ 脚本。从扩展的脚"
"本中省略 ``@tool`` 将禁用父类中的工具行为。因此扩展的脚本还应该指定 "
"``@tool`` 注解。"

msgid ""
"Modifications in the editor are permanent. For example, in the next section "
"when we remove the script, the node will keep its rotation. Be careful to "
"avoid making unwanted modifications."
msgstr ""
"编辑器中的修改是永久性的。例如，在下一节中，当我们移除脚本时，节点将保持其旋"
"转。要注意避免进行不必要的修改。"

msgid "Try ``@tool`` out"
msgstr "试试 ``@tool``"

msgid ""
"Add a ``Sprite2D`` node to your scene and set the texture to Godot icon. "
"Attach and open a script, and change it to this:"
msgstr ""
"在场景中添加一个 ``Sprite2D`` 节点，并将纹理设置为 Godot 图标。附加并打开一个"
"脚本，将其更改为："

msgid ""
"Save the script and return to the editor. You should now see your object "
"rotate. If you run the game, it will also rotate."
msgstr ""
"保存脚本并返回编辑器. 现在你应该看到你的对象在旋转. 如果你运行游戏, 它也会旋"
"转."

msgid ""
"You may need to restart the editor. This is a known bug found in all Godot 4 "
"versions: `GH-66381 <https://github.com/godotengine/godot/issues/66381>`_."
msgstr ""
"你可能需要重启编辑器。这是在所有 Godot 4 版本中发现的已知问题：`GH-66381 "
"<https://github.com/godotengine/godot/issues/66381>`_ 。"

msgid ""
"If you don't see the changes, reload the scene (close it and open it again)."
msgstr "如果你没有看到变化, 请重新加载场景(关闭它并再次打开)."

msgid ""
"Now let's choose which code runs when. Modify your ``_process()`` function "
"to look like this:"
msgstr "现在让我们选择何时运行代码. 将 ``_process()`` 函数修改为:"

msgid ""
"Save the script. Now the object will spin clockwise in the editor, but if "
"you run the game, it will spin counter-clockwise."
msgstr ""
"保存脚本. 现在, 对象将在编辑器中顺时针旋转, 但如果你运行游戏, 它将逆时针旋转."

msgid "Editing variables"
msgstr "编辑变量"

msgid ""
"Add and export a variable speed to the script. To update the speed and also "
"reset the rotation angle add a setter ``set(new_speed)`` which is executed "
"with the input from the inspector. Modify ``_process()`` to include the "
"rotation speed."
msgstr ""
"添加并导出一个变量 speed 到脚本。要更新 speed 并重置旋转角度，请添加一个设值"
"函数 ``set(new_speed)``\\ ，该函数使用检查器的输入执行。修改 ``_process()`` "
"以包含旋转速度。"

msgid ""
"Code from other nodes doesn't run in the editor. Your access to other nodes "
"is limited. You can access the tree and nodes, and their default properties, "
"but you can't access user variables. If you want to do so, other nodes have "
"to run in the editor too. Autoload nodes cannot be accessed in the editor at "
"all."
msgstr ""
"其他节点的代码无法在编辑器中运行。你对其他节点的访问受到限制。你可以访问树和"
"节点及其默认属性，但无法访问用户变量。如果要这样做，其他节点也必须在编辑器中"
"运行。自动加载节点是根本无法在编辑器中访问的。"

msgid "Getting notified when resources change"
msgstr "资源变化时获取通知"

msgid ""
"To get around this problem you first have to make your resource a tool and "
"make it emit the ``changed`` signal whenever a property is set:"
msgstr ""
"要解决这个问题，首先必须将资源变成一个工具脚本，并使其在设置属性时发出 "
"``changed`` 信号："

msgid "You then want to connect the signal when a new resource is set:"
msgstr "然后，你需要在设置新资源时连接该信号："

msgid ""
"Lastly, remember to disconnect the signal as the old resource being used and "
"changed somewhere else would cause unneeded updates."
msgstr "最后，记住断开信号，因为在其他地方使用和更改旧资源会导致不必要的更新。"

msgid "Reporting node configuration warnings"
msgstr "报告节点配置警告"

msgid ""
"Godot uses a *node configuration warning* system to warn users about "
"incorrectly configured nodes. When a node isn't configured correctly, a "
"yellow warning sign appears next to the node's name in the Scene dock. When "
"you hover or click on the icon, a warning message pops up. You can use this "
"feature in your scripts to help you and your team avoid mistakes when "
"setting up scenes."
msgstr ""
"Godot 使用 *节点配置警告* 系统来警告用户有关配置错误的节点。当某个节点配置不"
"正确时，场景面板中该节点名称旁边会出现黄色警告标志。当你悬停在该图标上或点击"
"该图标时，会弹出警告标志。脚本中可以使用这一特性来帮助你和你的团队避免在设定"
"场景过程中出现错误。"

msgid ""
"When using node configuration warnings, when any value that should affect or "
"remove the warning changes, you need to "
"call :ref:`update_configuration_warnings<class_Node_method_update_configuration_warnings>` . "
"By default, the warning only updates when closing and reopening the scene."
msgstr ""
"使用节点配置警告时，如果能够影响警告或移除警告的值发生了变化，那么你就需要调"
"用 :ref:`update_configuration_warnings<class_Node_method_update_configuration_warnings>`\\ 。"
"默认只会在关闭并重新打开场景时才会更新警告。"

msgid "Running one-off scripts using EditorScript"
msgstr "使用 EditorScript 运行一次性脚本"

msgid ""
"Sometimes, you need to run code just one time to automate a certain task "
"that is not available in the editor out of the box. Some examples might be:"
msgstr ""
"有时，你只需运行一次代码，以自动执行编辑器中未提供的特定任务。一些示例可能"
"是："

msgid ""
"Use as a playground for GDScript or C# scripting without having to run a "
"project. ``print()`` output is displayed in the editor Output panel."
msgstr ""
"无需运行项目即可用作 GDScript 或 C# 脚本的游乐场。\\ ``print()`` 输出显示在编"
"辑器输出面板中。"

msgid ""
"Scale all light nodes in the currently edited scene, as you noticed your "
"level ends up looking too dark or too bright after placing lights where "
"desired."
msgstr ""
"缩放当前编辑的场景内的所有灯光节点，因为你会注意到在将灯光放置在所需的位置"
"后，你的关卡最终看起来太暗或太亮。"

msgid ""
"Replace nodes that were copy-pasted with scene instances to make them easier "
"to modify later."
msgstr "用场景实例替换复制粘贴的节点，以便以后更容易修改。"

msgid ""
"This is available in Godot by extending :ref:`class_EditorScript` in a "
"script. This provides a way to run individual scripts in the editor without "
"having to create an editor plugin."
msgstr ""
"这可以在 Godot 内通过扩展脚本中的 :ref:`class_EditorScript` 来实现。这提供了"
"一种在编辑器中运行单个脚本而无需创建编辑器插件的方法。"

msgid ""
"To create an EditorScript, right-click a folder or empty space in the "
"FileSystem dock then choose **New > Script...**. In the script creation "
"dialog, click the tree icon to choose an object to extend from (or enter "
"``EditorScript`` directly in the field on the left, though note this is case-"
"sensitive):"
msgstr ""
"要创建一个 EditorScript，请右键单击文件系统面板中的文件夹或空白处，然后选择"
"\\ **新建 > 脚本...**\\ 。在脚本创建对话框中，点击树图标以选择要扩展的对象"
"（或直接在左侧字段中输入 ``EditorScript``\\ ，但请注意区分大小写）："

msgid "Creating an editor script in the script editor creation dialog"
msgstr "在脚本编辑器创建对话框中创建一个编辑器脚本"

msgid ""
"This will automatically select a script template that is suited for "
"EditorScripts, with a ``_run()`` method already inserted:"
msgstr "这将自动选择适合 EditorScript 的脚本模板，其中已插入 ``_run()`` 方法："

msgid ""
"This ``_run()`` method is executed when you use **File > Run** or the "
"keyboard shortcut :kbd:`Ctrl + Shift + X` while the EditorScript is the "
"currently open script in the script editor. This keyboard shortcut is only "
"effective when currently focused on the script editor."
msgstr ""
"当你使用\\ **文件 > 运行**\\ 或键盘快捷键 :kbd:`Ctrl + Shift + X` 且 "
"EditorScript 是脚本编辑器中当前打开的脚本时，将执行该 ``_run()`` 方法。该键盘"
"快捷键仅在当前聚焦于脚本编辑器时有效。"

msgid "Scripts that extend EditorScript must be ``@tool`` scripts to function."
msgstr "扩展 EditorScript 的脚本必须是 ``@tool`` 脚本才能运行。"

msgid ""
"EditorScripts have no undo/redo functionality, so **make sure to save your "
"scene before running one** if the script is designed to modify any data."
msgstr ""
"EditorScripts 没有撤消/重做功能，因此如果脚本旨在修改任何数据，\\ **请确保在"
"运行场景之前保存场景**\\ 。"

msgid ""
"To access nodes in the currently edited scene, use "
"the :ref:`EditorScript.get_scene <class_EditorScript_method_get_scene>` "
"method which returns the root Node of the currently edited scene. Here's an "
"example that recursively gets all nodes in the currently edited scene and "
"doubles the range of all OmniLight3D nodes:"
msgstr ""
"要访问当前编辑场景中的节点，请使用 :ref:`EditorScript.get_scene "
"<class_EditorScript_method_get_scene>` 方法，该方法返回当前编辑场景的根节点。"
"下面是一个示例，它递归地获取当前编辑场景中的所有节点，并将所有 OmniLight3D 节"
"点的范围加倍："

msgid ""
"You can change the currently edited scene at the top of the editor even "
"while the Script view is open. This will affect the return value "
"of :ref:`EditorScript.get_scene <class_EditorScript_method_get_scene>`, so "
"make sure you've selected the scene you intend to iterate upon before "
"running the script."
msgstr ""
"即使在脚本视图打开时，你也可以在编辑器顶部更改当前编辑的场景。这将影"
"响 :ref:`EditorScript.get_scene <class_EditorScript_method_get_scene>` 的返回"
"值，因此请确保在运行脚本之前选择了要迭代的场景。"

msgid "Instancing scenes"
msgstr "实例化场景"

msgid ""
"You can instantiate packed scenes normally and add them to the scene "
"currently opened in the editor. By default, nodes or scenes added "
"with :ref:`Node.add_child(node) <class_Node_method_add_child>` are **not** "
"visible in the Scene tree dock and are **not** persisted to disk. If you "
"wish the node or scene to be visible in the scene tree dock and persisted to "
"disk when saving the scene, you need to set the child node's :ref:`owner "
"<class_Node_property_owner>` property to the currently edited scene root."
msgstr ""
"在编辑器中，你可以正常实例化打包场景，并将它们添加到当前打开的场景中。默认情"
"况下，使用 :ref:`Node.add_child(node) <class_Node_method_add_child>` 添加的节"
"点或场景在“场景”树面板中是\\ **不可见**\\ 的，也\\ **不会**\\ 持久化到磁盘"
"上。如果你希望节点和场景在场景树面板中可见，并在保存场景时持久化到磁盘上，则"
"需要将这些子节点的 :ref:`owner <class_Node_property_owner>` 属性设为当前编辑"
"场景的根节点。"

msgid "If you are using ``@tool``:"
msgstr "如果你使用的是 ``@tool``\\ ："

msgid "If you are using :ref:`EditorScript<class_EditorScript>`:"
msgstr "如果你使用 :ref:`EditorScript<class_EditorScript>`\\ ："

msgid ""
"Using ``@tool`` improperly can yield many errors. It is advised to first "
"write the code how you want it, and only then add the ``@tool`` annotation "
"to the top. Also, make sure to separate code that runs in-editor from code "
"that runs in-game. This way, you can find bugs more easily."
msgstr ""
"不适当地使用 ``@tool`` 会产生许多错误。建议先按需要编写代码，然后再将 "
"``@tool`` 注解添加到顶部。此外，请确保将在编辑器中运行的代码与在游戏中运行的"
"代码分开。这样，你可以更轻松地找到错误。"
