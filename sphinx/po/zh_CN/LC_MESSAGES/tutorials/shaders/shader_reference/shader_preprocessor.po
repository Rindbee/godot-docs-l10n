#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Shader preprocessor"
msgstr "着色器预处理器"

msgid "Why use a shader preprocessor?"
msgstr "为什么要使用着色器预处理器？"

msgid ""
"In programming languages, a *preprocessor* allows changing the code before "
"the compiler reads it. Unlike the compiler, the preprocessor does not care "
"about whether the syntax of the preprocessed code is valid. The preprocessor "
"always performs what the *directives* tell it to do. A directive is a "
"statement starting with a hash symbol (``#``). It is not a *keyword* of the "
"shader language (such as ``if`` or ``for``), but a special kind of token "
"within the language."
msgstr ""
"编程语言中，\\ *预处理器*\\ 的作用是在编译器读取代码前对代码进行修改。与编译"
"器不同，预处理器并不关心被处理代码的语法是否有效。预处理器会一丝不苟地执行每"
"一条\\ *指令*\\ 。指令是以井号（\\ ``#``\\ ）开头的语句。这并不是着色器语言中"
"的\\ *关键字*\\ （例如 ``if`` 和 ``for``\\ ），而是语言中的一种特殊标记。"

msgid ""
"From Godot 4.0 onwards, you can use a shader preprocessor within text-based "
"shaders. The syntax is similar to what most GLSL shader compilers support "
"(which in turn is similar to the C/C++ preprocessor)."
msgstr ""
"从 Godot 4.0 开始，你可以在文本着色器中使用着色器预处理器。语法与大多数 GLSL "
"着色器编译器所支持的语法类似（因而也类似于 C/C++ 的预处理器）。"

msgid ""
"The shader preprocessor is not available in :ref:`visual shaders "
"<doc_visual_shaders>`. If you need to introduce preprocessor statements to a "
"visual shader, you can convert it to a text-based shader using the **Convert "
"to Shader** option in the VisualShader inspector resource dropdown. This "
"conversion is a one-way operation; text shaders cannot be converted back to "
"visual shaders."
msgstr ""
":ref:`可视化着色器 <doc_visual_shaders>`\\ 中无法使用着色器预处理器。如果你需"
"要在可视化着色器中引入预处理器语句，就需要使用 VisualShader 检查器资源下拉菜"
"单中的 **转换为着色器** 选项将其转换为文本着色器。这种转换是单向的；文字着色"
"器无法转换回可视化着色器。"

msgid "Directives"
msgstr "指令"

msgid "General syntax"
msgstr "常规语法"

msgid ""
"Preprocessor directives do not use brackets (``{}``), but can use "
"parentheses."
msgstr "预处理器指令不使用大括号（\\ ``{}``\\ ），但会用到括号。"

msgid ""
"Preprocessor directives **never** end with semicolons (with the exception of "
"``#define``, where this is allowed but potentially dangerous)."
msgstr ""
"预处理器指令\\ **从不**\\ 以分号结尾（除非是 ``#define``\\ ，允许这么做，但是"
"可能比较危险）。"

msgid ""
"Preprocessor directives can span several lines by ending each line with a "
"backslash (``\\``). The first line break *not* featuring a backslash will "
"end the preprocessor statement."
msgstr ""
"预处理器指令可以跨行，每一行的末尾都需要使用反斜杠（\\ ``\\``\\ ）。如果某一"
"行\\ *不使用*\\ 反斜杠，那么就表示预处理器语句结束。"

msgid "#define"
msgstr "#define"

msgid "**Syntax:** ``#define <identifier> [replacement_code]``."
msgstr "**语法：**\\ ``#define <标识符> [替换代码]``\\ 。"

msgid ""
"Defines the identifier after that directive as a macro, and replaces all "
"successive occurrences of it with the replacement code given in the shader. "
"Replacement is performed on a \"whole words\" basis, which means no "
"replacement is performed if the string is part of another string (without "
"any spaces or operators separating it)."
msgstr ""
"将该指令后面给出的标识符定义成宏，并用给定的替换代码替换到后续所有出现此标识"
"符的位置。替换规则是“全字匹配”，即如果是另一字符串的一部分，两侧无空格或运算"
"符，则不执行替换。"

msgid ""
"Defines with replacements may also have one or more *arguments*, which can "
"then be passed when referencing the define (similar to a function call)."
msgstr ""
"具有替换代码的宏定义可带有单个或多个\\ *参数*\\ ，以待后续引用该宏时传入（类"
"似于函数调用）。"

msgid ""
"If the replacement code is not defined, the identifier may only be used with "
"``#ifdef`` or ``#ifndef`` directives."
msgstr ""
"如果没有定义替换代码，那么该标识符就只能在 ``#ifdef`` 和 ``#ifndef`` 指令里使"
"用。"

msgid ""
"If the *concatenation* symbol (``##``) is present in the replacement code "
"then it will be removed upon macro insertion, together with any space "
"surrounding it, and join the surrounding words and arguments into a new "
"token."
msgstr ""
"如果替换代码中存在\\ *连接*\\ 符号（\\ ``##``\\ ），那么这个符号在插入宏时会"
"将其连同周围的空格一起删除，从而将周围的单词和参数连接起来构成新的记号。"

msgid ""
"Compared to constants (``const CONSTANT = value;``), ``#define`` can be used "
"anywhere within the shader (including in uniform hints). ``#define`` can "
"also be used to insert arbitrary shader code at any location, while "
"constants can't do that."
msgstr ""
"不同于常量（\\ ``const CONSTANT = value;``\\ ），\\ ``#define`` 可以放在着色"
"器中的任何位置（包括 uniform 提示）。\\ ``#define`` 还可以用于在任何位置插入"
"任意着色器代码，常量则做不到这一点。"

msgid ""
"Defining a ``#define`` for an identifier that is already defined results in "
"an error. To prevent this, use ``#undef <identifier>``."
msgstr ""
"使用 ``#define`` 定义的标识符如果已经存在就会报错。避免报错的方法是使用 "
"``#undef <标识符>``\\ 。"

msgid "#undef"
msgstr "#undef"

msgid "**Syntax:** ``#undef identifier``"
msgstr "**语法：**\\ ``#undef 标识符``"

msgid ""
"The ``#undef`` directive may be used to cancel a previously defined "
"``#define`` directive:"
msgstr "可以使用 ``#undef`` 来取消之前定义的 ``#define`` 指令："

msgid ""
"Without ``#undef`` in the above example, there would be a macro redefinition "
"error."
msgstr "上面的例子中如果没有 ``#undef`` 就会报重复宏定义错误。"

msgid "#if"
msgstr "#if"

msgid "**Syntax:** ``#if <condition>``"
msgstr "**语法：**\\ ``#if <条件>``"

msgid ""
"The ``#if`` directive checks whether the ``condition`` passed. If it "
"evaluates to a non-zero value, the code block is included, otherwise it is "
"skipped."
msgstr ""
"``#if`` 指令检查 ``condition`` 是否成立。若结果为非零值，则代码块被包含；否"
"则，代码块被跳过。"

msgid ""
"To evaluate correctly, the condition must be an expression giving a simple "
"floating-point, integer or boolean result. There may be multiple condition "
"blocks connected by ``&&`` (AND) or ``||`` (OR) operators. It may be "
"continued by a ``#else`` block, but **must** be ended with the ``#endif`` "
"directive."
msgstr ""
"为保证计算正确，条件必须是能够得出简单浮点数、整数或布尔值的表达式。允许用 "
"``&&``\\ （逻辑与）及 ``||``\\ （逻辑或）两种运算符连接多个条件块。后续可接一"
"个 ``#else`` 块，但\\ **必须**\\ 以 ``#endif`` 指令结束。"

msgid ""
"Using the ``defined()`` *preprocessor function*, you can check whether the "
"passed identifier is defined a by ``#define`` placed above that directive. "
"This is useful for creating multiple shader versions in the same file. It "
"may be continued by a ``#else`` block, but must be ended with the ``#endif`` "
"directive."
msgstr ""
"利用\\ *预处理器函数* ``defined()``\\ ，可检查传入的标识符是否已被位于该指令"
"上方的 ``#define`` 定义过。这可用于在单个文件中创建多个着色器版本。后续可接一"
"个 ``#else`` 块，但必须以 ``#endif`` 指令结束。"

msgid ""
"The ``defined()`` function's result can be negated by using the ``!`` "
"(boolean NOT) symbol in front of it. This can be used to check whether a "
"define is *not* set."
msgstr ""
"可以在 ``defined()`` 函数的结果前面加 ``!``\\ （逻辑非）来取反。可借此检查是"
"否\\ *未设置*\\ 某个定义。"

msgid ""
"Be careful, as ``defined()`` must only wrap a single identifier within "
"parentheses, never more:"
msgstr "请小心，\\ ``defined()`` 的括号内只能包含 1 个标识符，不能有多个："

msgid "**#if preprocessor versus if statement: Performance caveats**"
msgstr "**#if 预处理器与 if 语句：性能注意事项**"

msgid ""
"If the uniform is never changed, this behaves identical to the following "
"usage of the ``#if`` preprocessor statement:"
msgstr ""
"如果 uniform 从未改变，那么行为和下面的 ``#if`` 预处理语句用法是等价的："

msgid ""
"Modern GPUs are `quite effective <https://medium.com/@jasonbooth_86226/"
"branching-on-a-gpu-18bfc83694f2>`__ at performing \"static\" branching. "
"\"Static\" branching refers to ``if`` statements where *all* pixels/vertices "
"evaluate to the same result in a given shader invocation. However, high "
"amounts of :abbr:`VGPRs (Vector General-Purpose Register)` (which can be "
"caused by having too many branches) can still slow down shader execution "
"significantly."
msgstr ""
"现代 GPU 在执行“静态”分支时\\ `相当高效 <https://medium.com/"
"@jasonbooth_86226/branching-on-a-gpu-18bfc83694f2>`__\\ 。这里的“静态”分支指"
"的是在一次给定的着色器调用中，对\\ *所有*\\ 像素/顶点都求得相同结果的 ``if`` "
"语句。不过大量的 :abbr:`VGPR (Vector General-Purpose Register)`\\ （分支过多"
"就可能造成这种情况）仍然会显著拖慢着色器的运行。"

msgid "#elif"
msgstr "#elif"

msgid ""
"The ``#elif`` directive stands for \"else if\" and checks the condition "
"passed if the above ``#if`` evaluated to ``false``. ``#elif`` can only be "
"used within an ``#if`` block. It is possible to use several ``#elif`` "
"statements after an ``#if`` statement."
msgstr ""
"``#elif`` 指令就是“else if”的意思，会在之前的 ``#if`` 求得 ``false`` 时检查条"
"件是否成立。\\ ``#elif`` 只能在 ``#if`` 块中使用。一个 ``#if`` 语句后面可以使"
"用多个 ``#elif``\\ 。"

msgid "Like with ``#if``, the ``defined()`` preprocessor function can be used:"
msgstr "可以和 ``#if`` 一样使用预处理器函数 ``defined()``\\ ："

msgid "#ifdef"
msgstr "#ifdef"

msgid "**Syntax:** ``#ifdef <identifier>``"
msgstr "**语法：**\\ ``#ifdef <标识符>``"

msgid ""
"This is a shorthand for ``#if defined(...)``. Checks whether the passed "
"identifier is defined by ``#define`` placed above that directive. This is "
"useful for creating multiple shader versions in the same file. It may be "
"continued by a ``#else`` block, but must be ended with the ``#endif`` "
"directive."
msgstr ""
"这是 ``#if defined(...)`` 的缩写。用于检查传入的标识符是否在该指令上方由 "
"``#define`` 定义。可用于在同一文件中创建多个不同版本的着色器。可以由 "
"``#else`` 块延续，必须由 ``#endif`` 指令终止。"

msgid ""
"The processor does *not* support ``#elifdef`` as a shortcut for ``#elif "
"defined(...)``. Instead, use the following series of ``#ifdef`` and "
"``#else`` when you need more than two branches:"
msgstr ""
"处理器不支持用 ``#elifdef`` 作为 ``#elif defined(...)`` 的缩写。在需要多余两"
"个分支时，应采用以下一系列的 ``#ifdef`` 和 ``#else``\\ ："

msgid "#ifndef"
msgstr "#ifndef"

msgid "**Syntax:** ``#ifndef <identifier>``"
msgstr "**语法：**\\ ``#ifndef <标识符>``"

msgid ""
"This is a shorthand for ``#if !defined(...)``. Similar to ``#ifdef``, but "
"checks whether the passed identifier is **not** defined by ``#define`` "
"before that directive."
msgstr ""
"这是 ``#if !defined(...)`` 的简写，与 ``#ifdef`` 类似，但是会检查传递过来的标"
"识符是否\\ **未**\\ 在该语句之前的 ``#define`` 中定义。"

msgid ""
"This is the exact opposite of ``#ifdef``; it will always match in situations "
"where ``#ifdef`` would never match, and vice versa."
msgstr ""
"这与 ``#ifdef`` 完全相反;它会在 ``#ifdef`` 不匹配的情况下匹配，反之亦然。"

msgid "#else"
msgstr "#else"

msgid "**Syntax:** ``#else``"
msgstr "**语法：**\\ ``#else``"

msgid "#endif"
msgstr "#endif"

msgid "**Syntax:** ``#endif``"
msgstr "**语法：**\\ ``#endif``"

msgid ""
"Used as terminator for the ``#if``, ``#ifdef``, ``#ifndef`` or subsequent "
"``#else`` directives."
msgstr ""
"用于 ``#if`` ，\\ ``#ifdef`` ，\\ ``#ifndef`` 或后跟 ``#else`` 指令的终止符。"

msgid "#include"
msgstr "#include"

msgid "**Syntax:** ``#include \"path\"``"
msgstr "**语法：**\\ ``#include \"路径\"``"

msgid "Example shader include file:"
msgstr "示例着色器头文件："

msgid "#pragma"
msgstr "#pragma"

msgid "**Syntax:** ``#pragma value``"
msgstr "**语法：**\\ ``#pragma 值``"
