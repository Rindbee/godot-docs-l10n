#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom post-processing"
msgstr "自定义后期处理"

msgid "Introduction"
msgstr "前言"

msgid ""
"The easiest way to implement a custom post-processing shader is to use "
"Godot's built-in ability to read from the screen texture. If you're not "
"familiar with this, you should read the :ref:`Screen Reading Shaders "
"Tutorial <doc_screen-reading_shaders>` first."
msgstr ""
"实现自定义后期处理着色器的最简单方法是使用Godot的内置功能从屏幕纹理中读取. 如"
"果你不熟悉这个, 你应该先阅读 :ref:`屏幕阅读着色器教程 <doc_screen-"
"reading_shaders>` ."

msgid "Single pass post-processing"
msgstr "单阶段后期处理"

msgid ""
"For this demo, we will use this :ref:`Sprite <class_Sprite2D>` of a sheep."
msgstr "这个演示中，我们使用的是这张小羊的\\ :ref:`精灵 <class_Sprite2D>`\\ 。"

msgid ""
"Assign a new :ref:`Shader <class_Shader>` to the ``ColorRect``'s "
"``ShaderMaterial``. You can access the frame's texture and UV with a "
"``sampler2D`` using ``hint_screen_texture`` and the built in ``SCREEN_UV`` "
"uniforms."
msgstr ""
"为 ``ColorRect`` 的 ``ShaderMaterial`` 分配一个新的 :ref:`Shader "
"<class_Shader>`\\ 。你可以通过使用带 ``hint_screen_texture`` 的 "
"``sampler2D`` 以及内置的 uniform ``SCREEN_UV`` 来访问这一帧的纹理和 UV。"

msgid ""
"Copy the following code to your shader. The code below is a hex pixelization "
"shader by `arlez80 <https://bitbucket.org/arlez80/hex-mosaic/src/master/>`_,"
msgstr ""
"将以下代码复制到着色器. 上面的代码是单通道边缘检测滤波器, `Sobel 滤波器 "
"<https://en.wikipedia.org/wiki/Sobel_operator>`_ ，"

msgid "The sheep will look something like this:"
msgstr "小羊就会变成这样："

msgid "Multi-pass post-processing"
msgstr "多阶段后期处理"

msgid ""
"As an example, you could write a full screen Gaussian blur effect by "
"attaching the following pieces of code to each of the ``ColorRect`` nodes. "
"The order in which you apply the shaders depends on the position of the "
"``CanvasLayer`` in the scene tree, higher means sooner. For this blur "
"shader, the order does not matter."
msgstr ""
"例如，可以通过将下面的代码段附加到每个 ``ColorRect`` 上来编写全屏高斯模糊效"
"果。应用着色器的顺序取决于场景树中 ``CanvasLayer`` 的位置，越往上越早应用。对"
"于这个模糊着色器而言，顺序是无所谓的。"

msgid ""
"Using the above code, you should end up with a full screen blur effect like "
"below."
msgstr "使用上面的代码, 你应该得到如下所示的全屏模糊效果."

msgid "Translation status"
msgstr "翻译状态"
