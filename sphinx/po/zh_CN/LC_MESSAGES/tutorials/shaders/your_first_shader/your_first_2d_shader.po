#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Your first 2D shader"
msgstr "你的第一个 2D 着色器"

msgid "Introduction"
msgstr "前言"

msgid ""
"Shaders are special programs that execute on the GPU and are used for "
"rendering graphics. All modern rendering is done with shaders. For a more "
"detailed description of what shaders are please see :ref:`What are shaders "
"<doc_introduction_to_shaders>`."
msgstr ""
"着色器是在 GPU 上运行，用来渲染图像的一种特殊程序。现代渲染都是通过着色器实现"
"的。若想了解关于着色器更详细的说明，请查看\\ :ref:`着色器是什么 "
"<doc_introduction_to_shaders>`\\ 。"

msgid ""
"This tutorial will focus on the practical aspects of writing shader programs "
"by walking you through the process of writing a shader with both vertex and "
"fragment functions. This tutorial targets absolute beginners to shaders."
msgstr ""
"本教程将重点介绍实际编写着色器程序的各个方面, 引导你走过使用顶点和片段函数编"
"写着色器的整个流程. 本教程面向着色器."

msgid ""
"If you have experience writing shaders and are just looking for an overview "
"of how shaders work in Godot, see the :ref:`Shading Reference <toc-shading-"
"reference>`."
msgstr ""
"如果你在着色器方面有一定的经验，只是想知道着色器在 Godot 中是如何运作的，请参"
"阅\\ :ref:`着色器参考 <toc-shading-reference>`\\ 。"

msgid "Setup"
msgstr "场景布置"

msgid ""
"Next, look down in the Inspector, under the CanvasItem section, click beside "
"\"Material\" and select \"New ShaderMaterial\". This creates a new Material "
"resource. Click on the sphere that appears. Godot currently doesn't know "
"whether you are writing a CanvasItem Shader or a Spatial Shader and it "
"previews the output of spatial shaders. So what you are seeing is the output "
"of the default Spatial Shader."
msgstr ""
"接下来，在“检查器”下的 CanvasItem 部分中，在“Material”旁点击并选择“新建 "
"ShaderMaterial”。这会创建一个新的材质资源。然后点击新出现的球体。Godot 目前还"
"不知道你是要写 CanvasItem 着色器还是 Spatial 着色器，它显示 Spatial 着色器的"
"输出预览，所以你看到的是默认的 Spatial 着色器的输出。"

msgid "Your first CanvasItem shader"
msgstr "你的第一个 CanvasItem 着色器"

msgid ""
"In Godot, all shaders start with a line specifying what type of shader they "
"are. It uses the following format:"
msgstr "在Godot中, 所有的着色器第一行都是指定着色器类型的, 格式如下:"

msgid ""
"Because we are writing a CanvasItem shader, we specify ``canvas_item`` in "
"the first line. All our code will go beneath this declaration."
msgstr ""
"因为我们正在编写CanvasItem着色器, 所以我们在第一行中指定了 ``canvas_item``. "
"我们所有的代码都会在这个声明下面."

msgid ""
"This line tells the engine which built-in variables and functionality to "
"supply you with."
msgstr "这一行告诉游戏引擎要提供你哪些内置变量以及函数."

msgid ""
"In Godot you can override three functions to control how the shader "
"operates; ``vertex``, ``fragment``, and ``light``. This tutorial will walk "
"you through writing a shader with both vertex and fragment functions. Light "
"functions are significantly more complex than vertex and fragment functions "
"and so will not be covered here."
msgstr ""
"在Godot中, 你可以重写三个函数来控制着色器的运作, 它们是 ``vertex`` (顶点函"
"数), ``fragment`` (片段函数)和 ``light`` (光照函数). 本教程会引导你写出一个包"
"含顶点和片段函数的着色器. 因为光照函数比另外两个函数要复杂非常多, 所以在这里"
"不会进行讲解."

msgid "Your first fragment function"
msgstr "你的第一个片段函数"

msgid ""
"The most basic fragment function does nothing except assign a single color "
"to every pixel."
msgstr "最基础的片段函数仅仅给每个像素赋予一个颜色."

msgid ""
"Congratulations! You're done. You have successfully written your first "
"shader in Godot."
msgstr "恭喜你！你成功在 Godot 中写出了你的第一个着色器。"

msgid "Now let's make things more complex."
msgstr "接着, 我们来讨论更复杂的事情."

msgid ""
"In the fragment function you can only read from ``UV``, but you can use it "
"in other functions or to assign values to ``COLOR`` directly."
msgstr ""
"在片段函数中你只能从 ``UV`` 中读取, 但是你可以在其他函数中使用, 或者直接对 "
"``COLOR`` 赋值."

msgid "``UV`` varies between 0-1 from left-right and from top-bottom."
msgstr "``UV`` 取值在0-1之间, 从左到右, 由上到下."

msgid "Using ``TEXTURE`` built-in"
msgstr "使用内置变量 ``TEXTURE``"

msgid ""
"The default fragment function reads from the set Sprite2D texture and "
"displays it."
msgstr "默认的片段函数会读取 Sprite2D 设置的纹理并将其显示出来。"

msgid "Uniform input"
msgstr "Uniform 输入"

msgid ""
"Uniform input is used to pass data into a shader that will be the same "
"across the entire shader."
msgstr ""
"Uniform 输入是用来向着色器传递数据的，这些数据在整个着色器中都是一致的。"

msgid ""
"You can use uniforms by defining them at the top of your shader like so:"
msgstr "你可以像这样通过在着色器顶部定义来使用 Uniform 值："

msgid ""
"For more information about usage see the :ref:`Shading Language doc "
"<doc_shading_language>`."
msgstr "用法的更多详情请参见\\ :ref:`着色语言文档 <doc_shading_language>`\\ 。"

msgid "Interacting with shaders from code"
msgstr "代码与着色器的交互"

msgid ""
"Note that the name of the uniform is a string. The string must match exactly "
"with how it is written in the shader, including spelling and case."
msgstr ""
"注意,uniform值的名称是一个字符串. 字符串必须与它在着色器中的书写方式完全匹"
"配, 包括拼写和大小写."

msgid "Your first vertex function"
msgstr "你的第一个顶点函数"

msgid "Now that we have a fragment function, let's write a vertex function."
msgstr "现在我们有了一个片段函数, 我们再写一个顶点函数."

msgid ""
"Use the vertex function to calculate where on the screen each vertex should "
"end up."
msgstr "使用顶点函数计算屏幕上每个顶点的结束位置."

msgid ""
"The most important variable in the vertex function is ``VERTEX``. Initially, "
"it specifies the vertex coordinates in your model, but you also write to it "
"to determine where to actually draw those vertices. ``VERTEX`` is a ``vec2`` "
"that is initially presented in local-space (i.e. not relative to the camera, "
"viewport, or parent nodes)."
msgstr ""
"顶点函数中最重要的变量是 ``VERTEX``\\ 。它最初指定的是模型中的顶点坐标，但你"
"也会通过往里面写值来决定把这些顶点画到哪里。\\ ``VERTEX`` 是一个 "
"``vec2``\\ ，最初使用的是局部空间（即与摄像机、视口、父节点无关）。"

msgid "You can offset the vertices by directly adding to ``VERTEX``."
msgstr "你可以通过直接调整 ``VERTEX`` 来偏移顶点。"

msgid "Conclusion"
msgstr "总结"

msgid ""
"At their core, shaders do what you have seen so far, they compute ``VERTEX`` "
"and ``COLOR``. It is up to you to dream up more complex mathematical "
"strategies for assigning values to those variables."
msgstr ""
"着色器的核心, 如你所见, 是计算 ``VERTEX`` 和 ``COLOR``. 你可以制定更复杂的数"
"学策略来给这些变量赋值."

msgid ""
"For inspiration, take a look at some of the more advanced shader tutorials, "
"and look at other sites like `Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ and `The Book of Shaders <https://"
"thebookofshaders.com>`_."
msgstr ""
"一些更高级的着色器教程可以给你启发, 如 `Shadertoy <https://www.shadertoy.com/"
"results?query=&sort=popular&from=10&num=4>`_ 和 `着色器之书 <https://"
"thebookofshaders.com/?lan=ch>`_ ."

msgid "Translation status"
msgstr "翻译状态"
