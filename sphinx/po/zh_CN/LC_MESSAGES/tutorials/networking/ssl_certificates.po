#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "TLS/SSL certificates"
msgstr "TLS/SSL 证书"

msgid "Introduction"
msgstr "前言"

msgid ""
"Godot will try to use the TLS certificate bundle provided by the operating "
"system, but also includes the `TLS certificate bundle from Mozilla <https://"
"github.com/godotengine/godot/blob/master/thirdparty/certs/ca-"
"certificates.crt>`__ as a fallback."
msgstr ""
"Godot 会尝试使用操作系统提供的 TLS 证书捆绑包，但同时也包含了 `Mozilla 的 "
"TLS 证书捆绑包 <https://github.com/godotengine/godot/blob/master/thirdparty/"
"certs/ca-certificates.crt>`__\\ 以备不时之需。"

msgid ""
"You can alternatively force your own certificate bundle in the Project "
"Settings:"
msgstr "你也可以在“项目设置”中强制使用自己的证书包："

msgid "Setting the TLS certificate bundle override project setting"
msgstr "设置 TLS 证书捆绑包覆盖项目设置"

msgid "There are two ways to obtain certificates:"
msgstr "获取证书有两种方法:"

msgid "Obtain a certificate from a certificate authority"
msgstr "从证书颁发机构获取证书"

msgid ""
"The main approach to getting a certificate is to use a certificate authority "
"(CA) such as `Let's Encrypt <https://letsencrypt.org/>`__. This is a more "
"cumbersome process than a self-signed certificate, but it's more "
"\"official\" and ensures your identity is clearly represented. The resulting "
"certificate is also trusted by applications such as web browsers, unlike a "
"self-signed certificate which requires additional configuration on the "
"client side before it's considered trusted."
msgstr ""
"获取证书的主要方法是使用证书颁发机构（CA），例如 `Let's Encrypt <https://"
"letsencrypt.org/>`__\\ 。这一过程比使用自签名证书更为繁琐，但更加“官方”，并且"
"能确保你的身份得到清晰的表示。生成的证书也会被诸如网页浏览器等应用程序信任，"
"而自签名证书则需要在客户端进行额外配置才能被视为可信。"

msgid ""
"These certificates do not require any configuration on the client to work, "
"since Godot already bundles the Mozilla certificate bundle in the editor and "
"exported projects."
msgstr ""
"这些证书无需在客户端进行任何配置即可工作，因为 Godot 已经在编辑器和导出的项目"
"中捆绑了 Mozilla 证书捆绑包。"

msgid "Generate a self-signed certificate"
msgstr "生成自签名证书"

msgid ""
"For most use cases, it's recommended to go through certificate authority as "
"the process is free with certificate authorities such as Let's Encrypt. "
"However, if using a certificate authority is not an option, then you can "
"generate a self-signed certificate and tell the client to consider your self-"
"signed certificate as trusted."
msgstr ""
"对于大多数使用场景，建议通过证书颁发机构（CA）来处理，因为像 Let's Encrypt 这"
"样的证书颁发机构提供免费的服务。但是，如果使用证书颁发机构不是一个选项，那么"
"你可以生成自签名证书，并告诉客户端将你的自签名证书视为可信证书。"

msgid ""
"To create a self-signed certificate, generate a private and public key pair "
"and add the public key (in PEM format) to the CRT file specified in the "
"Project Settings."
msgstr ""
"创建自签名证书的方法是：生成一对私钥和公钥，然后将（PEM 格式的）公钥添加到“项"
"目设置”中指定的 CRT 文件中。"

msgid ""
"The private key should **only** go to your server. The client must not have "
"access to it: otherwise, the security of the certificate will be compromised."
msgstr ""
"私钥\\ **仅**\\ 应部署到你的服务器上。客户端必须不能访问它：否则，证书的安全"
"性将会被破坏。"
