#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making HTTP requests"
msgstr "进行 HTTP 请求"

msgid "Why use HTTP?"
msgstr "为什么使用 HTTP？"

msgid ""
"`HTTP requests <https://developer.mozilla.org/en-US/docs/Web/HTTP>`_ are "
"useful to communicate with web servers and other non-Godot programs."
msgstr ""
"`HTTP 请求 <https://developer.mozilla.org/en-US/docs/Web/HTTP>`_\\ 可以用来"
"与 Web 服务器以及其他非 Godot 程序通信。"

msgid ""
"Compared to Godot's other networking features (like :ref:`High-level "
"multiplayer <doc_high_level_multiplayer>`), HTTP requests have more overhead "
"and take more time to get going, so they aren't suited for real-time "
"communication, and aren't great to send lots of small updates as is common "
"for multiplayer gameplay."
msgstr ""
"与 Godot 的其他网络功能（例如\\ :ref:`高阶多人游戏 "
"<doc_high_level_multiplayer>`\\ ）相比，HTTP 请求的额外开销更大，起步也更慢，"
"所以并不适合实时通信，也不善于进行多人游戏中常见的大量较小更新的发送。"

msgid ""
"HTTP, however, offers interoperability with external web resources and is "
"great at sending and receiving large amounts of data, for example to "
"transfer files like game assets. These assets can then be loaded "
"using :ref:`runtime file loading and saving "
"<doc_runtime_loading_and_saving>`."
msgstr ""
"然而，HTTP 提供了与外部 Web 资源的互操作性，并且非常适合发送和接收大量数据，"
"例如传输游戏资产等文件。然后可以使用\\ :ref:`运行时文件加载和保存 "
"<doc_runtime_loading_and_saving>`\\ 来加载这些资产。"

msgid ""
"So HTTP may be useful for your game's login system, lobby browser, to "
"retrieve some information from the web or to download game assets."
msgstr ""
"所以 HTTP 可以用在游戏的登录系统、大厅浏览器，可以从 Web 获取信息，也可以下载"
"游戏资产。"

msgid "HTTP requests in Godot"
msgstr "Godot 中的 HTTP 请求"

msgid ""
"The :ref:`HTTPRequest <class_HTTPRequest>` node is the easiest way to make "
"HTTP requests in Godot. It is backed by the more low-level :ref:`HTTPClient "
"<class_HTTPClient>`, for which a tutorial is available :ref:`here "
"<doc_http_client_class>`."
msgstr ""
"在Godot中, 用 :ref:`HTTPRequest <class_HTTPRequest>` 节点发出HTTP请求是最简单"
"的方法. 它继承自更低级别的 :ref:`HTTPClient <class_HTTPClient>` , 相关的教程"
"见 :ref:`here <doc_http_client_class>`."

msgid ""
"For this example, we will make an HTTP request to GitHub to retrieve the "
"name of the latest Godot release."
msgstr "对于此示例，我们将向GitHub发出HTTP请求以检索最新Godot版本的名称。"

msgid ""
"When exporting to **Android**, make sure to enable the **Internet** "
"permission in the Android export preset before exporting the project or "
"using one-click deploy. Otherwise, network communication of any kind will be "
"blocked by the Android OS."
msgstr ""
"导出到 **Android** 时，在导出项目或使用一键部署之前，请确保在 Android 导出预"
"设中启用 **Internet** 权限。否则，任何类型的网络通信都将被 Android 操作系统阻"
"止。"

msgid "Preparing the scene"
msgstr "准备场景"

msgid ""
"Create a new empty scene, add a root :ref:`Node <class_Node>` and add a "
"script to it. Then add an :ref:`HTTPRequest <class_HTTPRequest>` node as a "
"child."
msgstr ""
"创建一个新的空场景，添加一个根节点 :ref:`Node <class_Node>` 并向其添加一个脚"
"本。然后添加一个 :ref:`HTTPRequest <class_HTTPRequest>` 节点作为子节点。"

msgid "Scripting the request"
msgstr "编写请求脚本"

msgid ""
"When the project is started (so in ``_ready()``), we're going to send an "
"HTTP request to Github using our :ref:`HTTPRequest <class_HTTPRequest>` "
"node, and once the request completes, we're going to parse the returned JSON "
"data, look for the ``name`` field and print that to console."
msgstr ""
"当项目启动时（所以在 ``_ready()`` 中），我们将使用 :ref:`HTTPRequest "
"<class_HTTPRequest>` 节点向Github发送HTTP请求，一旦请求完成，我们就将解析传回"
"的JSON数据，搜寻 ``name`` 字段并将其打印到控制台。"

msgid ""
"Save the script and the scene, and run the project. The name of the most "
"recent Godot release on Github should be printed to the output log. For more "
"information on parsing JSON, see the class references for :ref:`JSON "
"<class_JSON>`."
msgstr ""
"保存脚本和场景，然后运行项目。输出日志中应该会打印 Github 上最新的 Godot 版本"
"的名称。有关解析 JSON 的更多信息见 :ref:`JSON <class_JSON>` 类参考。"

msgid ""
"Note that you may want to check whether the ``result`` equals "
"``RESULT_SUCCESS`` and whether a JSON parsing error occurred, see the JSON "
"class reference and :ref:`HTTPRequest <class_HTTPRequest>` for more."
msgstr ""
"请注意, 你可能需要检查 ``result`` 是否等于 ``RESULT_SUCCESS`` 以及JSON解析错"
"误是否发生, 要了解更多信息, 请参阅JSON类型参考和 :ref:`HTTPRequest "
"<class_HTTPRequest>` ."

msgid ""
"You have to wait for a request to finish before sending another one. Making "
"multiple request at once requires you to have one node per request. A common "
"strategy is to create and delete HTTPRequest nodes at runtime as necessary."
msgstr ""
"你必须等待一个请求完成后才能发送另一个请求。一次发出多个请求需要每个请求都有"
"一个节点。一种常见的策略是在运行时根据需要创建和移除 HTTPRequest 节点。"

msgid "Sending data to the server"
msgstr "向服务器发送数据"

msgid ""
"Until now, we have limited ourselves to requesting data from a server. But "
"what if you need to send data to the server? Here is a common way of doing "
"it:"
msgstr ""
"到目前为止, 我们仅限于从服务器上请求数据. 但如果你需要向服务器发送数据呢？这"
"里有一个常见的方法:"

msgid "Setting custom HTTP headers"
msgstr "设置自定义 HTTP 报头"

msgid ""
"Of course, you can also set custom HTTP headers. These are given as a string "
"array, with each string containing a header in the format ``\"header: "
"value\"``. For example, to set a custom user agent (the HTTP ``User-Agent`` "
"header) you could use the following:"
msgstr ""
"当然，你也可以设置自定义 HTTP 标头。这些标头以字符串数组的形式提供，每个字符"
"串包含一个标头，格式为 ``\"header: value\"``\\ 。例如，要设置自定义用户代理"
"（HTTP ``User-Agent`` 标头），你可以使用以下代码："

msgid ""
"Be aware that someone might analyse and decompile your released application "
"and thus may gain access to any embedded authorization information like "
"tokens, usernames or passwords. That means it is usually not a good idea to "
"embed things such as database access credentials inside your game. Avoid "
"providing information useful to an attacker whenever possible."
msgstr ""
"请注意，有人可能会分析和反编译你发布的应用程序，从而可能获得任何嵌入的授权信"
"息，如令牌、用户名或密码。这意味着在你的游戏中，嵌入诸如数据库访问凭据之类的"
"信息，通常不是一个好主意。尽可能避免提供对攻击者有用的信息。"
