#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Scripting languages"
msgstr "脚本语言"

msgid ""
"This lesson will give you an overview of the available scripting languages "
"in Godot. You will learn the pros and cons of each option. In the next part, "
"you will write your first script using GDScript."
msgstr ""
"本课将向你介绍 Godot 中可用的脚本语言。你将了解每个选项的优点和缺点。在下一部"
"分，你将使用 GDScript 编写你的第一个脚本。"

msgid ""
"**Scripts attach to a node and extend its behavior**. This means that "
"scripts inherit all functions and properties of the node they attach to."
msgstr ""
"**脚本附加到节点并扩展其行为**\\ 。这意味着脚本继承所附加节点的全部函数和属"
"性。"

msgid ""
"For example, take a game where a Camera2D node follows a ship. The Camera2D "
"node follows its parent by default. Imagine you want the camera to shake "
"when the player takes damage. As this feature is not built into Godot, you "
"would attach a script to the Camera2D node and code the shake."
msgstr ""
"例如，以一个 Camera2D 节点跟随一艘船的游戏为例。Camera2D 节点默认跟随其父节"
"点。想象一下，当玩家受到伤害时，你希望相机震动。由于此功能未内置在 Godot 中，"
"因此你可以在该 Camera2D 节点上附加脚本并对抖动进行编程。"

msgid "Available scripting languages"
msgstr "可用的脚本语言"

msgid ""
"Godot offers **four gameplay programming languages**: GDScript, C#, and, via "
"its GDExtension technology, C and C++. There are more community-supported "
"languages, but these are the official ones."
msgstr ""
"Godot 提供了\\ **四种游戏编程语言**\\ ：GDScript、C# 以及通过 GDExtension 技"
"术提供的 C 和 C++。还有更多社区支持的语言，但这四个是官方所支持的语言。"

msgid ""
"You can use multiple languages in a single project. For instance, in a team, "
"you could code gameplay logic in GDScript as it's fast to write, and use C# "
"or C++ to implement complex algorithms and maximize their performance. Or "
"you can write everything in GDScript or C#. It's your call."
msgstr ""
"你可以在一个项目中使用多种语言。例如，在团队中，你可以在 GDScript 中编写游戏"
"逻辑，编写起来很快，然后使用 C# 或 C++ 来实现复杂的算法，最大限度地提高其性"
"能。你也可以使用 GDScript 或 C# 来编写所有内容。这些都由你自己决定。"

msgid ""
"We provide this flexibility to answer the needs of different game projects "
"and developers."
msgstr "我们提供这种灵活性以满足不同游戏项目和开发者的需求。"

msgid "Which language should I use?"
msgstr "我应该使用哪种语言？"

msgid ""
"If you're a beginner, we recommend to **start with GDScript**. We made this "
"language specifically for Godot and the needs of game developers. It has a "
"lightweight and straightforward syntax and provides the tightest integration "
"with Godot."
msgstr ""
"如果你是初学者，我们推荐\\ **从 GDScript 入手**\\ 。这门语言是我们针对 Godot "
"和游戏开发者的需求制作的。语法简单直白，与 Godot 结合得最为紧密。"

msgid ""
"For C#, you will need an external code editor like `VSCode <https://"
"code.visualstudio.com/>`_ or Visual Studio. While C# support is now mature, "
"you will find fewer learning resources for it compared to GDScript. That's "
"why we recommend C# mainly to users who already have experience with the "
"language."
msgstr ""
"使用 C# 时，你需要使用 `VSCode <https://code.visualstudio.com/>`_ 或 Visual "
"Studio 等外部编辑器。虽然对 C# 支持目前已经成熟，但相对 GDScript 而言，能找到"
"的学习资源会相对较少。因此，我们主要推荐已经熟悉 C# 语言的用户去使用 C#。"

msgid "Let's look at each language's features, as well as its pros and cons."
msgstr "我们来看看各个语言的特性以及其优缺点。"

msgid "GDScript"
msgstr "GDScript"

msgid ""
":ref:`GDScript<doc_gdscript>` is an `object-oriented <https://"
"en.wikipedia.org/wiki/Object-oriented_programming>`_ and `imperative "
"<https://en.wikipedia.org/wiki/Imperative_programming>`_ programming "
"language built for Godot. It's made by and for game developers to save you "
"time coding games. Its features include:"
msgstr ""
":ref:`GDScript<doc_gdscript>` 是一门\\ `面向对象 <https://zh.wikipedia.org/"
"wiki/"
"%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1>`_\\ "
"的\\ `指令式 <https://zh.wikipedia.org/wiki/"
"%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%B7%A8%E7%A8%8B>`_\\ 编程语言，专为 Godot 构"
"建，是游戏开发者为游戏开发所制作的，目的是节省编写游戏代码的时间。其特性包"
"括："

msgid "A simple syntax that leads to short files."
msgstr "简洁的语法，让文件更轻量。"

msgid "Blazing fast compilation and loading times."
msgstr "极快的编译与加载速度。"

msgid ""
"Tight editor integration, with code completion for nodes, signals, and more "
"information from the scene it's attached to."
msgstr ""
"与编辑器紧密集成，包括节点、信号以及脚本所挂载场景的更多信息等元素的代码补"
"全。"

msgid ""
"Built-in vector and transform types, making it efficient for heavy use of "
"linear algebra, a must for games."
msgstr "内置向量与变换类型，让海量线性代数计算更高效，游戏必备。"

msgid "Supports multiple threads as efficiently as statically typed languages."
msgstr "支持多线程，与静态类型语言的一样高效。"

msgid ""
"No `garbage collection <https://en.wikipedia.org/wiki/"
"Garbage_collection_(computer_science)>`_, as this feature eventually gets in "
"the way when creating games. The engine counts references and manages the "
"memory for you in most cases by default, but you can also control memory if "
"you need to."
msgstr ""
"没有\\ `垃圾回收 <https://zh.wikipedia.org/wiki/"
"%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)>`_\\ ，"
"因为垃圾回收最终会影响游戏的开发。引擎会默认进行引用计数，在大多数情况下为你"
"管理内存，但你也可以在需要时自行控制内存。"

msgid ""
"`Gradual typing <https://en.wikipedia.org/wiki/Gradual_typing>`_. Variables "
"have dynamic types by default, but you also can use type hints for strong "
"type checks."
msgstr ""
"`渐进类型 <https://en.wikipedia.org/wiki/Gradual_typing>`_\\ 。变量默认是动态"
"类型，但你也可以使用类型提示来做强类型检查。"

msgid ""
"GDScript looks like Python as you structure your code blocks using "
"indentations, but it doesn't work the same way in practice. It's inspired by "
"multiple languages, including Squirrel, Lua, and Python."
msgstr ""
"GDScript 用缩进来做代码块结构，看上去像 Python，然而实际上这两者的原理截然不"
"同。GDScript 的设计灵感是从 Squirrel、Lua、Python 等诸多语言中得到的。"

msgid "Why don't we use Python or Lua directly?"
msgstr "我们为什么不直接使用 Python 或者 Lua？"

msgid ""
"Years ago, Godot used Python, then Lua. Both languages' integration took a "
"lot of work and had severe limitations. For example, threading support was a "
"big challenge with Python."
msgstr ""
"很多年前，Godot 曾使用过 Python，后来也用过 Lua。做这两个语言对 Godot 的集成"
"花费了大量精力，而且还存在局限性。例如，在 Python 中做多线程支持是个非常巨大"
"的挑战。"

msgid ""
"Developing a dedicated language doesn't take us more work and we can tailor "
"it to game developers' needs. We're now working on performance optimizations "
"and features that would've been difficult to offer with third-party "
"languages."
msgstr ""
"开发专属语言不会花费更多的时间，我们还能针对游戏开发者的需求去量体裁衣。我们"
"现在在做性能优化工作，也在实现用第三方语言难以实现的特性。"

msgid ".NET / C#"
msgstr ".NET / C#"

msgid ""
"As Microsoft's `C# <https://en.wikipedia.org/wiki/"
"C_Sharp_(programming_language)>`_ is a favorite amongst game developers, we "
"officially support it. C# is a mature and flexible language with tons of "
"libraries written for it. We were able to add support for it thanks to a "
"generous donation from Microsoft."
msgstr ""
"微软的 `C# <https://en.wikipedia.org/wiki/C_Sharp_(programming_language)>`_ "
"深受游戏开发者的喜爱，我们对其有官方支持。C# 是一门成熟灵活的语言，拥有海量的"
"库。得益于微软慷慨大方的捐助，才让 Godot 对 C# 的支持成为可能。"

msgid ""
"C# offers a good tradeoff between performance and ease of use, although you "
"should be aware of its garbage collector."
msgstr ""
"虽然 C# 在性能和易用性之间进行了良好的平衡，但你也要注意一下其垃圾回收机制。"

msgid ""
"You must use the .NET edition of the Godot editor to script in C#. You can "
"download it on the Godot website's `download <https://godotengine.org/"
"download/>`_ page."
msgstr ""
"你必须使用 .NET版本的 Godot 编辑器才能在项目中使用 C# 进行编程，可以在 Godot "
"网站的\\ `下载 <https://godotengine.org/download/>`_\\ 页面进行下载。"

msgid ""
"Since Godot uses .NET 8, in theory, you can use any third-party .NET library "
"or framework in Godot, as well as any Common Language Infrastructure-"
"compliant programming language, such as F#, Boo, or ClojureCLR. However, C# "
"is the only officially supported .NET option."
msgstr ""
"Godot 使用 .NET 8，理论上任何第三方 .NET 库或框架都可用于编写 Godot 脚本，包"
"括任何符合通用语言标准架构的语言，如 F#、Boo、ClojureCLR等。然而，C# 是唯一官"
"方支持的 .NET 语言选项。"

msgid ""
"GDScript code itself doesn't execute as fast as compiled C# or C++. However, "
"most script code calls functions written with fast algorithms in C++ code "
"inside the engine. In many cases, writing gameplay logic in GDScript, C#, or "
"C++ won't have a significant impact on performance."
msgstr ""
"GDScript 代码本身执行起来并没有 C# 或 C++ 等编译型语言快，而大多数脚本代码又"
"都是在调用 Godot 引擎的 C++ 代码中的快速算法。在大多数情况下，使用 GDScript、"
"C#、C++ 编写游戏逻辑并不会呈现出明显的的性能差异。"

msgid ""
"Projects written in C# using Godot 4 currently cannot be exported to the web "
"platform. To use C# on that platform, consider Godot 3 instead. Android and "
"iOS platform support is available as of Godot 4.2, but is experimental "
"and :ref:`some limitations apply <doc_c_sharp_platforms>`."
msgstr ""
"在 Godot 4 中用 C# 编写的项目目前无法导出到 Web 平台。如果要在该平台上使用 "
"C#，请考虑使用 Godot 3。（C# 的）Android 和 iOS 平台支持从 Godot 4.2 开始提"
"供，但仍处于实验阶段，并且\\ :ref:`存在一些限制 <doc_c_sharp_platforms>`\\ 。"

msgid "C++ via GDExtension"
msgstr "通过 GDExtension 使用 C++"

msgid ""
"GDExtension allows you to write game code in C++ without needing to "
"recompile Godot."
msgstr "GDExtension 能够让你使用 C++ 编写游戏代码，无需重新编译 Godot。"

msgid ""
"You can use any version of the language or mix compiler brands and versions "
"for the generated shared libraries, thanks to our use of an internal C API "
"Bridge."
msgstr ""
"我们在内部使用 C API 进行桥接，得益于此，你可以使用任意版本的该语言，也可以混"
"用由不同厂牌、不同版本的编译器所生成的共享库。"

msgid ""
"GDExtension is the best choice for performance. You don't need to use it "
"throughout an entire game, as you can write other parts in GDScript or C#."
msgstr ""
"如果要图性能，那么 GDExtension 便是最佳选择，不需要在整个游戏中都用到。这样，"
"你仍可以用 GDScript 或 C# 来编写其他部分。"

msgid ""
"When working with GDExtension, the available types, functions, and "
"properties closely resemble Godot's actual C++ API."
msgstr ""
"使用 GDExtension 时，其可用的类型、函数和属性与 Godot 实际的 C++ API 高度相"
"似。"

msgid "Summary"
msgstr "总结"

msgid ""
"Scripts are files containing code that you attach to a node to extend its "
"functionality."
msgstr "脚本可附加到节点，是扩展该节点功能的代码文件。"

msgid ""
"Godot supports four official scripting languages, offering you flexibility "
"between performance and ease of use."
msgstr "Godot 支持四种官方脚本语言，在性能和易用性之间为你提供灵活的选择。"

msgid ""
"You can mix languages, for instance, to implement demanding algorithms with "
"C or C++ and write most of the game logic with GDScript or C#."
msgstr ""
"你可以混合使用语言，例如，用 C 或 C++ 来实现高要求算法，用 GDScript 或 C# 来"
"编写大部分游戏逻辑。"
