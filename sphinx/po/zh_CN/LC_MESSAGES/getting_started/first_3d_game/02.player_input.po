#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Player scene and input actions"
msgstr "Player 场景与输入事件"

msgid ""
"In the next two lessons, we will design the player scene, register custom "
"input actions, and code player movement. By the end, you'll have a playable "
"character that moves in eight directions."
msgstr ""
"在接下来的两节课程中，我们将会设计玩家场景、注册自定义输入动作、编写玩家移动"
"代码。在最后，你将会得到一个可以八方向移动的可游玩角色。"

msgid ""
"To learn more about the different physics node types, see "
"the :ref:`doc_physics_introduction`."
msgstr ""
"要学习更多关于不同物理节点类型的内容，请参"
"阅 :ref:`doc_physics_introduction`\\ 。"

msgid ""
"For now, we're going to create a basic rig for our character's 3D model. "
"This will allow us to rotate the model later via code while it plays an "
"animation."
msgstr ""
"现在，我们将为角色的 3D 模型创建一个基本的装备。稍后我们将在播放动画时通过代"
"码旋转模型。"

msgid ""
"Then, in the FileSystem dock, expand the ``art/`` folder by double-clicking "
"it and drag and drop ``player.glb`` onto ``Pivot``."
msgstr ""
"然后在文件系统面板中，双击展开 ``art/`` 文件夹，将 ``player.glb`` 拖放到 "
"``Pivot`` 节点上。"

msgid ""
"This should instantiate the model as a child of ``Pivot``. You can rename it "
"to ``Character``."
msgstr ""
"这样应该就会把这个模型实例化为 ``Pivot`` 的子项。你可以将其重命名为 "
"``Character``\\ 。"

msgid ""
"The ``.glb`` files contain 3D scene data based on the open source glTF 2.0 "
"specification. They're a modern and powerful alternative to a proprietary "
"format like FBX, which Godot also supports. To produce these files, we "
"designed the model in `Blender 3D <https://www.blender.org/>`__ and exported "
"it to glTF."
msgstr ""
"``.glb`` 文件包含基于开源的 GLTF 2.0 规范的 3D 场景数据。它是一种现代的、强大"
"的并替代 FBX 等专有格式的文件，Godot 也支持这种格式。为了制作这些文件，我们"
"在 `Blender 3D <https://www.blender.org/>`__ 中设计了模型，并将其导出为 "
"glTF。"

msgid "The sphere's wireframe appears below the character."
msgstr "球体的线框出现在角色的下面。"

msgid ""
"It will be the shape the physics engine uses to collide with the "
"environment, so we want it to better fit the 3D model. Make it a bit larger "
"by dragging the orange dot in the viewport. My sphere has a radius of about "
"``0.8`` meters."
msgstr ""
"它将是物理引擎用来与环境碰撞的形状，因此我们希望它更适合 3D 模型。拖动视口中"
"的橙色点，将其缩小一点。我的球体半径约为 ``0.8`` 米。"

msgid ""
"Then, move the collision shape up so its bottom roughly aligns with the "
"grid's plane."
msgstr "然后，向上移动碰撞体，使其底部与网格平面大致对齐。"

msgid ""
"With the nodes ready, we can almost get coding. But first, we need to define "
"some input actions."
msgstr "节点准备就绪后，我们开始编写程序。但首先，我们需要定义一些输入动作。"

msgid "Creating input actions"
msgstr "创建输入动作"

msgid ""
"To move the character, we will listen to the player's input, like pressing "
"the arrow keys. In Godot, while we could write all the key bindings in code, "
"there's a powerful system that allows you to assign a label to a set of keys "
"and buttons. This simplifies our scripts and makes them more readable."
msgstr ""
"要移动角色，我们就要监听玩家的输入，比如按下方向键。在 Godot 中，我们能够使用"
"代码来绑定按键，但还有一个非常强大的系统，可以让你为一系列按键和按钮设置标"
"签。这样可以简化我们的脚本，让它们更易读。"

msgid ""
"We're going to name our actions ``move_left``, ``move_right``, "
"``move_forward``, ``move_back``, and ``jump``."
msgstr ""
"我们要把这些动作命名为 ``move_left``\\ 、\\ ``move_right``\\ 、\\ "
"``move_forward``\\ 、\\ ``move_back``\\ 、\\ ``jump``\\ （向左移动、向右移"
"动、向前移动、向后移动、跳跃）。"

msgid "Create the following five actions:"
msgstr "创建以下五个动作："

msgid "Bind also the :kbd:`A` key, onto the action ``move_left``."
msgstr "将 :kbd:`A` 键也绑定在动作 ``move_left`` 上面。"

msgid ""
"If you want controllers to have different input actions, you should use the "
"Devices option in Additional Options. Device 0 corresponds to the first "
"plugged gamepad, Device 1 corresponds to the second plugged gamepad, and so "
"on."
msgstr ""
"如果你想让多个手柄有不同的输入动作，你需要在额外选项中使用设备选项。设备 0 对"
"应的是第一个插入的手柄，设备 1 对应的是第二个插入的手柄，以此类推。"

msgid ""
"Do the same for the other input actions. For example, bind the right arrow, "
"D, and the left joystick's positive axis to ``move_right``. After binding "
"all keys, your interface should look like this."
msgstr ""
"为其他输入动作也执行同样的操作。比如将右方向键、D、左摇杆的正轴绑定给 "
"``move_right``\\ 。全部绑定完后，你的界面应该类似这样。"

msgid "Your jump input action should look like this."
msgstr "你的跳跃输入动作应该看上去类似这样。"

msgid ""
"That's all the actions we need for this game. You can use this menu to label "
"any groups of keys and buttons in your projects."
msgstr ""
"这些就是这个游戏所需的所有动作了。你可以使用这个菜单来对项目中的任意按键和按"
"钮组进行标记。"

msgid "In the next part, we'll code and test the player's movement."
msgstr "在下一部分，我们将为玩家的移动进行编程和测试。"
