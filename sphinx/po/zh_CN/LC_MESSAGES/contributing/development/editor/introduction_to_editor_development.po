#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to editor development"
msgstr "编辑器开发简介"

msgid "On this page, you will learn:"
msgstr "在这一页，你将了解到:"

msgid "The **design decisions** behind the Godot editor."
msgstr "Godot 编辑器背后的\\ **设计决策**\\ 。"

msgid "How to work efficiently on the Godot editor's C++ code."
msgstr "如何高效地处理Godot编辑器的C++代码。"

msgid ""
"This guide is aimed at current or future engine contributors. To create "
"editor plugins in GDScript, see :ref:`doc_making_plugins` instead."
msgstr ""
"本指南针对的是目前或未来的引擎贡献者。要在GDScript中创建编辑器插件，请参见 :"
"ref:`doc_making_plugins` 。"

msgid ""
"If you are new to Godot, we recommended you to read :ref:"
"`doc_godot_design_philosophy` before continuing. Since the Godot editor is a "
"Godot project written in C++, much of the engine's philosophy applies to the "
"editor."
msgstr ""
"如果你是 Godot 的新手，建议你在继续之前先阅读 :ref:"
"`doc_godot_design_philosophy` 。由于 Godot 编辑器是用 C++ 编写的 Godot 项目，"
"引擎的许多理念同样适用于编辑器。"

msgid "Technical choices"
msgstr "技术选择"

msgid ""
"The editor is fully written in C++. It can't contain any GDScript or C# code."
msgstr "该编辑器完全是用C++编写的。它不能包含任何GDScript或C#代码。"

msgid "Directory structure"
msgstr "目录结构"

msgid ""
"The editor's code is fully self-contained in the `editor/ <https://github."
"com/godotengine/godot/tree/master/editor>`__ folder of the Godot source "
"repository."
msgstr ""
"编辑器的代码完全独立于Godot源代码库的 `editor/ <https://github.com/"
"godotengine/godot/tree/master/editor>`__ 文件夹中。"

msgid "Some important files in the editor are:"
msgstr "编辑器中的一些重要文件包括："

msgid ""
"`editor/editor_node.cpp <https://github.com/godotengine/godot/blob/master/"
"editor/editor_node.cpp>`__: Main editor initialization file. Effectively the "
"\"main scene\" of the editor."
msgstr ""
"`editor/editor_node.cpp <https://github.com/godotengine/godot/blob/"
"mastereditor/editor_node.cpp>`__\\ ：主编辑器初始化文件。相当于编辑器的“主场"
"景”。"

msgid ""
"`editor/project_manager.cpp <https://github.com/godotengine/godot/blob/"
"master/editor/project_manager.cpp>`__: Main Project Manager initialization "
"file. Effectively the \"main scene\" of the Project Manager."
msgstr ""
"`editor/project_manager.cpp <https://github.com/godotengine/godot/blob/"
"master/editor/project_manager.cpp>`__\\ ：主项目管理器初始化文件。相当于项目"
"管理器的“主场景”。"

msgid "Editor dependencies in ``scene/`` files"
msgstr "``scene/`` 中文件对编辑器的依赖性"

msgid ""
"When working on an editor feature, you may have to modify files in Godot's "
"GUI nodes, which you can find in the ``scene/`` folder."
msgstr ""
"在处理编辑器功能时，你可能需要修改Godot的GUI节点中的文件，你可以在 ``scene/"
"`` 文件夹中找到。"

msgid ""
"One rule to keep in mind is that you must **not** introduce new dependencies "
"to ``editor/`` includes in other folders such as ``scene/``. This applies "
"even if you use ``#ifdef TOOLS_ENABLED``."
msgstr ""
"需要记住的一条规则是，你\\ **不能**\\ 给 ``editor/`` 在其他文件夹中引入新的依"
"赖关系，如 ``scene/``\\ 。即使你使用 ``#ifdef TOOLS_ENABLED`` 也是如此。"

msgid ""
"To make the codebase easier to follow and more self-contained, the allowed "
"dependency order is:"
msgstr "为了使代码库更容易操作，更自成一体，允许的依赖性顺序是:"

msgid "``editor/`` -> ``scene/`` -> ``servers/`` -> ``core/``"
msgstr "``editor/`` -> ``scene/`` -> ``servers/`` -> ``core/``"

msgid ""
"This means that files in ``editor/`` can depend on includes from ``scene/``, "
"``servers/``, and ``core/``. But, for example, while ``scene/`` can depend "
"on includes from ``servers/`` and ``core/``, it cannot depend on includes "
"from ``editor/``."
msgstr ""
"这意味着 ``editor/`` 中的文件可以依赖 ``scene/``, ``servers/``, 和 ``core/`` "
"中的包含。但是，虽然 ``scene/`` 可以依赖 ``servers/`` 和 ``core/`` 的内容，但"
"它不能依赖 ``editor/`` 的内容。"

msgid "Development tips"
msgstr "开发技巧"
