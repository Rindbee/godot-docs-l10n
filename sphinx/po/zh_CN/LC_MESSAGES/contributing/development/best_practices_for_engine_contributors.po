#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Best practices for engine contributors"
msgstr "引擎贡献者的最佳实践"

msgid "Introduction"
msgstr "前言"

msgid "Language"
msgstr "语言"

msgid ""
"The scope of this document is to be a list of best practices for "
"contributors to follow, as well as to create a language they can use to "
"refer to common situations that arise in the process of submitting their "
"contributions."
msgstr ""
"本文档的范围是罗列让贡献者遵循的最佳实践，并且创建一种语言，供他们用来指代提"
"交贡献过程中出现的常见情况。"

msgid ""
"Contributions are most of the time categorized as bug fixes, enhancements or "
"new features. To abstract this idea, we will call them *Solutions*, because "
"they always seek to solve something that can be described as a *Problem*."
msgstr ""
"贡献大部分时间都归类为错误修复, 增强功能或新功能. 为了抽象化这个想法, 我们将"
"它们称为 *解决方案*, 因为它们总是寻求解决可以描述为 *问题* 的问题."

msgid "Best Practices"
msgstr "最佳实践"

msgid "#1: The problem always comes first"
msgstr "#1：问题第一"

msgid ""
"Many contributors are extremely creative and just enjoy the process of "
"designing abstract data structures, creating nice user interfaces, or simply "
"love programming. Whatever the case may be, they come up with cool ideas, "
"which may or may not solve real problems."
msgstr ""
"许多贡献者非常有创造力，他们就是享受设计抽象数据结构、创建漂亮的用户界面，或"
"者就是单纯喜欢编程。不管是什么情况，他们都会想出很酷的想法，但这些想法可能并"
"不能真正解决任何实际问题。"

msgid ""
"These are usually called *solutions in search of a problem*. In an ideal "
"world, they would not be harmful but, in reality, code takes time to write, "
"takes up space and requires maintenance once it exists. Avoiding the "
"addition of anything unnecessary is always considered a good practice in "
"software development."
msgstr ""
"这种情况通常被称为\\ *为解决方案寻找问题*\\ 。在理想情况下并没有害处，但在现"
"实世界中，代码需要花费时间去编写、需要占用空间、出现后就需要维护。在软件开发"
"领域，避免添加任何不必要的东西永远是最佳实践。"

msgid "#2: To solve the problem, it has to exist in the first place"
msgstr "#2：只能解决存在的问题"

msgid ""
"This is a variation of the previous practice. Adding anything unnecessary is "
"not a good idea, but what constitutes what is necessary and what isn't?"
msgstr "这是上一条的变体。添加不必要的东西是不好的，但是如何判断是否必要呢？"

msgid ""
"The answer to this question is that the problem needs to *exist* before it "
"can be actually solved. It must not be speculation or a belief. The user "
"must be using the software as intended to create something they *need*. In "
"this process, the user may stumble upon a problem that requires a solution "
"to proceed, or in order to achieve greater productivity. In this case, *a "
"solution is needed*."
msgstr ""
"答案是问题需要先\\ *存在*\\ ，然后才能解决。问题不能是推测或者观点。用户必须"
"正常使用软件，才能创造出他们\\ *需要*\\ 的东西。在这个过程中，用户可能会遇到"
"一些问题，需要有解决方案才能继续，或者达到更高的生产力。这种情况下就\\ *需要"
"解决方案*\\ 。"

msgid ""
"Believing that problems may arise in the future and that the software needs "
"to be ready to solve them by the time they appear is called *\"Future "
"proofing\"* and its characterized by lines of thought such as:"
msgstr ""
"坚信将来可能会出现问题，并且软件需要在问题出现时就已准备好解决它们，这被称为"
"\\ *“保护未来”*\\ ，其特点是思路如下："

msgid "I think it would be useful for users to..."
msgstr "我想这对于用户来说是有用的...."

msgid "I think users will eventually need to..."
msgstr "我认为用户最终需要..."

msgid ""
"This is generally considered a bad habit because trying to solve problems "
"that *don't actually exist* in the present will often lead to code that will "
"be written but never used, or that is considerably more complex to use and "
"maintain than it needs to be."
msgstr ""
"通常认为这是不好的习惯，因为试图解决\\ *当前不存在*\\ 的问题的结果往往是代码"
"写好了，但是从来没人用，或者是无论用起来还是维护起来都比实际需要的要复杂地"
"多。"

msgid "#3: The problem has to be complex or frequent"
msgstr "#3：问题应该比较复杂或频繁出现"

msgid "The complexity of the problem"
msgstr "问题的复杂性"

msgid "The frequency the problem"
msgstr "问题发生的频率"

msgid "#4: The solution must be discussed with others"
msgstr "#4：必须与其他人讨论解决方案"

msgid ""
"Often, users will be immersed in their own projects when they stumble upon "
"problems. These users will naturally try to solve the problem from their "
"perspective, thinking only about their own use case. As a result, user "
"proposed solutions don't always contemplate all use cases and are often "
"biased towards the user's own requirements."
msgstr ""
"当用户偶尔发现问题时，他们往往会沉浸在自己的项目中。自然而然地，他们会尝试从"
"他们自己的角度来解决问题，并只关注他们自己的情况。因此，用户提出的解决方案通"
"常偏向于用户自己的需求，考虑不到所有情况。"

msgid ""
"Also, Godot's philosophy is to favor ease of use and maintenance over "
"absolute performance. Performance optimizations will be considered, but they "
"may not be accepted if they make something too difficult to use or if they "
"add too much complexity to the codebase."
msgstr ""
"另外,Godot的理念是支持易用性和维护性, 而不是绝对性能. 性能优化将被考虑, 但是"
"如果它们使得某些东西太难使用或者给代码库增加了太多的复杂性, 那么它们可能不会"
"被接受."

msgid "#5: To each problem, its own solution"
msgstr "#5：不同的问题用不同的解决方案"

msgid ""
"The situation will often take a turn for the worse when, in order to make "
"this solution appear even more fantastic and flexible, the pure speculation-"
"based problems (as described in #2) also make their appearance on stage."
msgstr ""
"当为了使这个解决方案显得更加奇妙和灵活, 纯粹的基于推测的问题(如#2所述)也出现"
"在舞台上时, 情况往往会变得更糟."

msgid ""
"The main problem is that, in reality, it rarely works this way. Most of the "
"time, writing an individual solution to each problem results in code that is "
"simpler and more maintainable."
msgstr ""
"主要问题是，在现实中，它很少以这种方式工作。大多数情况下，只要为每个问题编写"
"一个单独的解决方案，代码就会变得更简单，更易于维护。"

msgid "#6: Cater to common use cases, leave the door open for the rare ones"
msgstr "#6：满足常见用例，为罕见用例敞开大门"

msgid ""
"This is a continuation of the previous point, which further explains why "
"this way of thinking and designing software is preferred."
msgstr "这是前一点的延续, 这进一步解释了为什么这种思维方式和设计软件是首选."

msgid ""
"As mentioned before (in point #2), it is very difficult for us (as human "
"beings who design software) to actually understand all future user needs. "
"Trying to write very flexible structures that cater to many use cases at "
"once is often a mistake."
msgstr ""
"如前所述(第2点), 我们(作为设计软件的人)很难真正理解所有未来的用户需求. 试图同"
"时编写满足许多用例的非常灵活的结构常常是一个错误."

msgid ""
"In real-life scenarios, these use cases will be at most rare and uncommon "
"anyway, so it makes sense a custom solution needs to be written. This is why "
"it's important to still provide users the basic building blocks to do it."
msgstr ""
"在现实场景中, 这些用例无论如何都是非常罕见的, 所以需要编写一个定制的解决方案"
"是有意义的. 这就是为什么仍然要为用户提供基本的构建块来实现这一点很重要."

msgid "#7: Prefer local solutions"
msgstr "#7：局部解决方案优先"

msgid ""
"When looking for a solution to a problem, be it implementing a new feature "
"or fixing a bug, sometimes the easiest path is to add data or a new function "
"in the core layers of code."
msgstr ""
"当寻找一个问题的解决方法时, 例如实现新特性或者修复一个BUG, 有时最简单的方式是"
"在核心代码层中, 添加数据或是一个新的代码函数."

msgid ""
"The main problem here is, adding something to the core layers that will only "
"be used from a single location far away will not only make the code more "
"difficult to follow (split in two), but also make the core API larger, more "
"complex, more difficult to understand in general."
msgstr ""
"这里的主要问题是, 在核心层中添加一些只在很远的地方使用的东西, 不仅会使代码更"
"难理解(一分为二), 而且还会使核心API更大, 更复杂, 更难理解."

msgid ""
"This is bad, because readability and cleanness of core APIs is always of "
"extreme importance given how much code relies on it, and because it's key "
"for new contributors as a starting point to learning the codebase."
msgstr ""
"这是不好的, 因为核心api的可读性和干净性总是非常重要的, 因为它是新贡献者学习代"
"码库的一个起点."

msgid "#8: Don't use complex canned solutions for simple problems"
msgstr "#8：不要用复杂的现成解决方案来处理简单的问题"

msgid ""
"As Godot requires to be shipped in a large amount of platforms, we can't "
"link libraries dynamically. Instead, we bundle them in our source tree."
msgstr ""
"由于 Godot 需要在大量的平台上发布，我们无法对库进行动态链接。相反，我们将它们"
"捆绑在我们的源代码树中。"
