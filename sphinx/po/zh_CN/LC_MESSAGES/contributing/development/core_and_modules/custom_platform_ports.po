#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom platform ports"
msgstr "自定义平台的移植"

msgid "Some reasons to create custom platform ports might be:"
msgstr "创建自定义平台移植可能有以下原因："

msgid "Official platform ports"
msgstr "官方的平台移植"

msgid ""
"The official platform ports can be used as a reference when creating a "
"custom platform port:"
msgstr "创建自定义平台移植时，可以使用官方的平台移植作为参考："

msgid ""
"`Windows <https://github.com/godotengine/godot/tree/master/platform/"
"windows>`__"
msgstr ""
"`Windows <https://github.com/godotengine/godot/tree/master/platform/"
"windows>`__"

msgid ""
"`macOS <https://github.com/godotengine/godot/tree/master/platform/macos>`__"
msgstr ""
"`macOS <https://github.com/godotengine/godot/tree/master/platform/macos>`__"

msgid ""
"`Linux/\\*BSD <https://github.com/godotengine/godot/tree/master/platform/"
"linuxbsd>`__"
msgstr ""
"`Linux/\\*BSD <https://github.com/godotengine/godot/tree/master/platform/"
"linuxbsd>`__"

msgid ""
"`Android <https://github.com/godotengine/godot/tree/master/platform/"
"android>`__"
msgstr ""
"`Android <https://github.com/godotengine/godot/tree/master/platform/"
"android>`__"

msgid "`iOS <https://github.com/godotengine/godot/tree/master/platform/ios>`__"
msgstr ""
"`iOS <https://github.com/godotengine/godot/tree/master/platform/ios>`__"

msgid "`Web <https://github.com/godotengine/godot/tree/master/platform/web>`__"
msgstr ""
"`Web <https://github.com/godotengine/godot/tree/master/platform/web>`__"

msgid "Creating a custom platform port"
msgstr "创建自定义平台移植"

msgid ""
"Creating a custom platform port is a large undertaking which requires prior "
"knowledge of the platform's SDKs. Depending on what features you need, the "
"amount of work needed varies:"
msgstr ""
"创建自定义平台移植是一项繁重的工作，同时需要熟悉对应平台的 SDK。工作量因所需"
"的功能而异："

msgid "Required features of a platform port"
msgstr "平台移植的必要功能"

msgid ""
"At the very least, a platform port must have methods from the :ref:"
"`class_OS` singleton implemented to be buildable and usable for headless "
"operation. A ``logo.svg`` (32×32) vector image must also be present within "
"the platform folder. This logo is displayed in the Export dialog for each "
"export preset targeting the platform in question."
msgstr ""
"平台移植至少需要实现 :ref:`class_OS` 单例中的方法才能够进行构建，用于无头操"
"作。平台文件夹中还需要存在一张名为 ``logo.svg`` 的矢量图（32×32）。“导出”对话"
"框中为该平台定义的导出预设就会显示这个图标。"

msgid ""
"See `this implementation <https://github.com/godotengine/godot/blob/master/"
"platform/linuxbsd/os_linuxbsd.cpp>`__ for the Linux/\\*BSD platform as an "
"example. See also the `OS singleton header <https://github.com/godotengine/"
"godot/blob/master/core/os/os.h>`__ for reference."
msgstr ""
"`示例实现 <https://github.com/godotengine/godot/blob/master/platform/"
"linuxbsd/os_linuxbsd.cpp>`__\\ 请参考 Linux/\\*BSD 平台。另见 `OS 单例头文件 "
"<https://github.com/godotengine/godot/blob/master/core/os/os.h>`__\\ 。"

msgid ""
"If your target platform is UNIX-like, consider inheriting from the "
"``OS_Unix`` class to get much of the work done automatically."
msgstr ""
"如果你的目标平台是类 UNIX 平台，请考虑继承 ``OS_Unix`` 类，这样就能够自动完成"
"大量工作。"

msgid "**detect.py file**"
msgstr "**detect.py 文件**"

msgid "All methods should be implemented within ``detect.py`` as follows:"
msgstr "``detect.py`` 应实现如下所有方法："

msgid ""
"``is_active()``: Can be used to temporarily disable building for a platform. "
"This should generally always return ``True``."
msgstr ""
"``is_active()``\\ ：可以用来临时禁用某个平台的构建。一般都应该返回 "
"``True``\\ 。"

msgid "``get_name()``: Returns the platform's user-visible name as a string."
msgstr "``get_name()``\\ ：返回平台的用户可见名称字符串。"

msgid ""
"``can_build()``: Return ``True`` if the host system is able to build for the "
"target platform, ``False`` otherwise. Do not put slow checks here, as this "
"is queried when the list of platforms is requested by the user. Use "
"``configure()`` for extensive dependency checks instead."
msgstr ""
"``can_build()``\\ ：如果宿主系统能够构建目标平台则返回 ``True``\\ ，否则返回 "
"``False``\\ 。请勿在此处进行耗时的检查，用户请求平台列表时会查询该函数。大量"
"的依赖项检查请使用 ``configure()``\\ 。"

msgid ""
"``get_opts()``: Returns the list of SCons build options that can be defined "
"by the user for this platform."
msgstr "``get_opts()``\\ ：返回用户能够为该平台定义的 Scons 构建选项列表。"

msgid ""
"``get_flags()``: Returns the list of overridden SCons flags for this "
"platform."
msgstr "``get_flags()``\\ ：返回该平台覆盖的 Scons 标识列表。"

msgid ""
"``configure()``: Perform build configuration, such as selecting compiler "
"options depending on SCons options chosen."
msgstr ""
"``configure()``\\ ：执行构建配置，例如根据所选的 SCons 选项调整编译器选项。"

msgid "Optional features of a platform port"
msgstr "平台移植的可选功能"

msgid ""
"In practice, headless operation doesn't suffice if you want to see anything "
"on screen and handle input devices. You may also want audio output for most "
"games."
msgstr ""
"实践中，如果你想要在屏幕和手持输入设备上看到画面，那么需要的就不仅仅是无头操"
"作。大多数游戏可能还会需要音频输出。"

msgid "Distributing a custom platform port"
msgstr "分发自定义平台移植"

msgid ""
"Before distributing a custom platform port, make sure you're allowed to "
"distribute all the code that is being linked against. Console SDKs are "
"typically under NDAs which prevent redistribution to the public."
msgstr ""
"分发自定义平台移植之前，请先确定你有权利分发所有被链接的代码。主机平台的 SDK "
"通常存在相关的保密协议，禁止向公众进行二次分发。"

msgid ""
"Platform ports are designed to be as self-contained as possible. Most of the "
"code can be kept within a single folder located in ``platform/``. Like :ref:"
"`doc_custom_modules_in_cpp`, this allows for streamlining the build process "
"by making it possible to ``git clone`` a platform folder within a Godot "
"repository clone's ``platform/`` folder, then run ``scons platform=<name>``. "
"No other steps are necessary for building, unless third-party platform-"
"specific dependencies need to be installed first."
msgstr ""
"平台移植的设计尽量做到了自包含。大多数代码都在 ``platform/`` 下的某个文件夹"
"中。这种设计与 :ref:`doc_custom_modules_in_cpp` 类似，能够允许将平台文件夹 "
"``git clone`` 至 Godot 仓库副本的 ``platform/`` 文件夹中，后续执行 ``scons "
"platform=<name>`` 即可，使得构建过程流水线化。除非有第三方平台特定的依赖项需"
"要安装，否则构建时不需要其他步骤。"
