#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Unit testing"
msgstr "单元测试"

msgid "Platform and target support"
msgstr "平台及目标支持"

msgid ""
"C++ unit tests can be run on Linux, macOS, and Windows operating systems."
msgstr "C++ 单元测试可以在 Linux、macOS 和 Windows 操作系统上运行。"

msgid ""
"Tests can only be run with editor ``tools`` enabled, which means that export "
"templates cannot be tested currently."
msgstr ""
"测试只能在启用编辑器 ``tools`` 的情况下运行，这意味着目前无法测试导出模板。"

msgid "Running tests"
msgstr "运行测试"

msgid ""
"Before tests can be actually run, the engine must be compiled with the "
"``tests`` build option enabled (and any other build option you typically "
"use), as the tests are not compiled as part of the engine by default:"
msgstr ""
"在测试被实际运行之前，必须在启用 ``tests`` 构建选项（并使用你通常使用的任何其"
"他构建选项）的情况下编译引擎，因为默认情况下测试不会作为引擎的一部分进行编"
"译："

msgid ""
"Once the build is done, run the tests with a ``--test`` command-line option:"
msgstr "构建完成后，使用 ``--test`` 命令行选项运行测试："

msgid ""
"The test run can be configured with the various doctest-specific command-"
"line options. To retrieve the full list of supported options, run the ``--"
"test`` command with the ``--help`` option:"
msgstr ""
"可以使用各种 doctest 特定的命令行选项来配置测试运行。要检索受支持选项的完整列"
"表，请使用 ``--help`` 选项运行 ``--test`` 命令："

msgid ""
"Any other options and arguments after the ``--test`` command are treated as "
"arguments for doctest."
msgstr "``--test`` 命令后的任何其他选项和参数都被视为 doctest 的参数。"

msgid ""
"Tests are compiled automatically if you use the ``dev_mode=yes`` SCons "
"option. ``dev_mode=yes`` is recommended if you plan on contributing to the "
"engine development as it will automatically treat compilation warnings as "
"errors. The continuous integration system will fail if any compilation "
"warnings are detected, so you should strive to fix all warnings before "
"opening a pull request."
msgstr ""
"如果你使用 ``dev_mode=yes`` SCons 选项，则测试会被自动编译。如果你计划为引擎"
"开发做出贡献，建议使用 ``dev_mode=yes``\\ ，因为它会自动将编译警告视为错误。"
"如果检测到任何编译警告，持续集成系统将失败，因此你应该努力在打开拉取请求之前"
"修复所有警告。"

msgid "Filtering tests"
msgstr "筛选测试"

msgid ""
"By default, all tests are run if you don't supply any extra arguments after "
"the ``--test`` command. But if you're writing new tests or would like to see "
"the successful assertions output coming from those tests for debugging "
"purposes, you can run the tests of interest with the various filtering "
"options provided by doctest."
msgstr ""
"默认情况下，如果你在 ``--test`` 命令后不提供任何额外参数，则所有测试都会运"
"行。但是，如果你正在编写新测试，或者希望出于调试目的查看来自这些测试的成功断"
"言输出，则可以使用 doctest 提供的各种过滤选项运行感兴趣的测试。"

msgid ""
"The wildcard syntax ``*`` is supported for matching any number of characters "
"in test suites, test cases, and source file names:"
msgstr ""
"支持通配符语法 ``*`` 来匹配测试套件、测试用例和源文件名中的任意数量的字符："

msgid "**Filter options**"
msgstr "**过滤选项**"

msgid "**Shorthand**"
msgstr "**Shorthand**"

msgid "**Examples**"
msgstr "**Examples**"

msgid "``--test-suite``"
msgstr "``--test-suite``"

msgid "``-ts``"
msgstr "``-ts``"

msgid "``-ts=\"*[GDScript]*\"``"
msgstr "``-ts=\"*[GDScript]*\"``"

msgid "``--test-case``"
msgstr "``--test-case``"

msgid "``-tc``"
msgstr "``-tc``"

msgid "``-tc=\"*[String]*\"``"
msgstr "``-tc=\"*[String]*\"``"

msgid "``--source-file``"
msgstr "``--source-file``"

msgid "``-sf``"
msgstr "``-sf``"

msgid "``-sf=\"*test_color*\"``"
msgstr "``-sf=\"*test_color*\"``"

msgid "For instance, to run only the ``String`` unit tests, run:"
msgstr "例如，要仅运行 ``String`` 单元测试，请运行："

msgid ""
"Successful assertions output can be enabled with the ``--success`` (``-s``) "
"option, and can be combined with any combination of filtering options above, "
"for instance:"
msgstr ""
"可以使用 ``--success`` (``-s``) 选项启用成功断言输出，并且可以与上面的任意过"
"滤选项组合使用，例如："

msgid ""
"Specific tests can be skipped with corresponding ``-exclude`` options. As of "
"now, some tests include random stress tests which take a while to execute. "
"In order to skip those kind of tests, run the following command:"
msgstr ""
"可以使用相应的 ``-exclude`` 选项跳过特定测试。到目前为止，包括随机压力测试在"
"内的一些测试需要执行一段时间。为了跳过这些类型的测试，请运行以下命令："

msgid "Writing tests"
msgstr "编写测试"

msgid ""
"Test suites represent C++ header files which must be included as part of the "
"main test entry point in ``tests/test_main.cpp``. Most test suites are "
"located directly under ``tests/`` directory."
msgstr ""
"测试套件代表 C++ 头文件，必须将其作为主测试入口点的一部分包含在 ``tests/"
"test_main.cpp`` 中。大多数测试套件都直接位于 ``tests/`` 目录下。"

msgid ""
"All header files are prefixed with ``test_``, and this is a naming "
"convention which the Godot build system relies on to detect tests throughout "
"the engine."
msgstr ""
"所有头文件都以 ``test_`` 为前缀，这是一个命名约定，Godot 构建系统将依赖于此来"
"检测整个引擎的测试。"

msgid "Here's a minimal working test suite with a single test case written:"
msgstr "这是一个最小的工作测试套件，其中只包含单个测试用例："

msgid ""
"The ``tests/test_macros.h`` header encapsulates everything which is needed "
"for writing C++ unit tests in Godot. It includes doctest assertion and "
"logging macros such as ``CHECK`` as seen above, and of course the "
"definitions for writing test cases themselves."
msgstr ""
"``tests/test_macros.h`` 头文件封装了在 Godot 中编写 C++ 单元测试所需的一切。"
"它包括 doctest 断言和类似如上所述的 ``CHECK`` 等日志记录宏，当然还有用于编写"
"测试用例本身的定义。"

msgid ""
"`tests/test_macros.h <https://github.com/godotengine/godot/blob/master/tests/"
"test_macros.h>`_ source code for currently implemented macros and aliases "
"for them."
msgstr ""
"用于当前实现的宏及其别名的 `tests/test_macros.h <https://github.com/"
"godotengine/godot/blob/master/tests/test_macros.h>`_ 源代码。"

msgid ""
"Test cases are written in a dedicated namespace. This is not required, but "
"allows to prevent naming collisions for when other static helper functions "
"are written to accommodate the repeating testing procedures such as "
"populating common test data for each test, or writing parameterized tests."
msgstr ""
"测试用例编写在专用的命名空间中。这不是必需的，但可以防止在编写其他静态帮助函"
"数以适应重复测试程序（例如为每个测试填充通用测试数据或编写参数化测试）时发生"
"命名冲突。"

msgid ""
"Godot supports writing tests per C++ module. For instructions on how to "
"write module tests, refer to :ref:`doc_custom_module_unit_tests`."
msgstr ""
"Godot 支持为每个 C++ 模块编写测试。有关如何编写模块测试的说明，请参"
"阅 :ref:`doc_custom_module_unit_tests`\\ 。"

msgid "Assertions"
msgstr "断言"

msgid ""
"A list of all commonly used assertions used throughout the Godot tests, "
"sorted by severity."
msgstr "Godot 测试中常用的断言列表，按严格程度排序。"

msgid "**Assertion**"
msgstr "**断言**"

msgid "**Description**"
msgstr "**描述**"

msgid "``REQUIRE``"
msgstr "``REQUIRE``"

msgid ""
"Test if condition holds true. Fails the entire test immediately if the "
"condition does not hold true."
msgstr "检查条件是否成立。如果条件不成立则会立即让整个测试失败。"

msgid "``REQUIRE_FALSE``"
msgstr "``REQUIRE_FALSE``"

msgid ""
"Test if condition does not hold true. Fails the entire test immediately if "
"the condition holds true."
msgstr "检查条件是否不成立。如果条件成立则会立即让整个测试失败。"

msgid "``CHECK``"
msgstr "``CHECK``"

msgid ""
"Test if condition holds true. Marks the test run as failing, but allow to "
"run other assertions."
msgstr "检查条件是否成立。会将测试表示为失败，但允许运行其他断言。"

msgid "``CHECK_FALSE``"
msgstr "``CHECK_FALSE``"

msgid ""
"Test if condition does not hold true. Marks the test run as failing, but "
"allow to run other assertions."
msgstr "检查条件是否不成立。会将测试表示为失败，但允许运行其他断言。"

msgid "``WARN``"
msgstr "``WARN``"

msgid ""
"Test if condition holds true. Does not fail the test under any circumstance, "
"but logs a warning if something does not hold true."
msgstr ""
"检查条件是否成立。任何情况下都不会让测试失败，但是不成立时会记录一条警告。"

msgid "``WARN_FALSE``"
msgstr "``WARN_FALSE``"

msgid ""
"Test if condition does not hold true. Does not fail the test under any "
"circumstance, but logs a warning if something holds true."
msgstr ""
"检查条件是否不成立。任何情况下都不会让测试失败，但是成立时会记录一条警告。"

msgid ""
"All of the above assertions have corresponding ``*_MESSAGE`` macros, which "
"allow to print optional message with rationale of what should happen."
msgstr ""
"以上断言都有对应的 ``*_MESSAGE`` 宏，能够在原有行为的基础上输出可选的消息。"

msgid ""
"Prefer to use ``CHECK`` for self-explanatory assertions and "
"``CHECK_MESSAGE`` for more complex ones if you think that it deserves a "
"better explanation."
msgstr ""
"对于能够自我说明的断言请尽量使用 ``CHECK``\\ ，如果你认为相对复杂的断言需要更"
"好的解释再使用 ``CHECK_MESSAGE``\\ 。"

msgid "Logging"
msgstr "日志"

msgid ""
"The test output is handled by doctest itself, and does not rely on Godot "
"printing or logging functionality at all, so it's recommended to use "
"dedicated macros which allow to log test output in a format written by "
"doctest."
msgstr ""
"测试输出由 doctest 本身处理，完全不依赖于 Godot 打印或日志功能，因此建议使用"
"专用宏，允许以 doctest 编写的格式记录测试输出。"

msgid "**Macro**"
msgstr "**Macro**"

msgid "``MESSAGE``"
msgstr "``MESSAGE``"

msgid "Prints a message."
msgstr "打印一条信息."

msgid "``FAIL_CHECK``"
msgstr "``FAIL_CHECK``"

msgid ""
"Marks the test as failing, but continue the execution. Can be wrapped in "
"conditionals for complex checks."
msgstr "将测试标记为失败，但继续执行。可以包含在条件中以进行复杂的检查。"

msgid "``FAIL``"
msgstr "``FAIL``"

msgid ""
"Fails the test immediately. Can be wrapped in conditionals for complex "
"checks."
msgstr "立即使测试失败。可以包含在条件语句中以进行复杂的检查。"

msgid "Testing failure paths"
msgstr "测试故障路径"

msgid ""
"Sometimes, it's not always feasible to test for an *expected* result. With "
"the Godot development philosophy of that the engine should not crash and "
"should gracefully recover whenever a non-fatal error occurs, it's important "
"to check that those failure paths are indeed safe to execute without "
"crashing the engine."
msgstr ""
"有时，测试\\ *预期*\\ 结果并不总是可行的。根据 Godot 开发理念，引擎不应崩溃，"
"并且应在发生非致命错误时正常恢复，因此，重要的是检查这些故障路径确实可以安全"
"执行而不会导致引擎崩溃。"

msgid ""
"*Unexpected* behavior can be tested in the same way as anything else. The "
"only problem this creates is that the error printing shall unnecessarily "
"pollute the test output with errors coming from the engine itself (even if "
"the end result is successful)."
msgstr ""
"*意外*\\ 行为可以像其他任何行为一样进行测试。这样做的唯一问题是，错误打印会不"
"必要地污染测试输出，因为测试输出中会出现来自引擎本身的错误（即使最终结果是成"
"功的）。"

msgid ""
"To alleviate this problem, use ``ERR_PRINT_OFF`` and ``ERR_PRINT_ON`` macros "
"directly within test cases to temporarily disable the error output coming "
"from the engine, for instance:"
msgstr ""
"为了缓解这个问题，请在测试用例中直接使用 ``ERR_PRINT_OFF`` 和 "
"``ERR_PRINT_ON`` 宏来暂时禁用来自引擎的错误输出，例如："

msgid "**Tag**"
msgstr "**标签**"

msgid "``[SceneTree]``"
msgstr "``[SceneTree]``"

msgid "``[Editor]``"
msgstr "``[Editor]``"

msgid "``[Audio]``"
msgstr "``[Audio]``"

msgid "``[Navigation]``"
msgstr "``[Navigation]``"

msgid "Testing signals"
msgstr "测试信号"

msgid "The following macros can be use to test signals:"
msgstr "可以使用以下宏来测试信号："

msgid "Macro"
msgstr "宏"

msgid "Description"
msgstr "描述"

msgid "``SIGNAL_WATCH(object, \"signal_name\")``"
msgstr "``SIGNAL_WATCH(object, \"signal_name\")``"

msgid "``SIGNAL_UNWATCH(object, \"signal_name\")``"
msgstr "``SIGNAL_UNWATCH(object, \"signal_name\")``"

msgid "``SIGNAL_CHECK(\"signal_name\", Vector<Vector<Variant>>)``"
msgstr "``SIGNAL_CHECK(\"signal_name\", Vector<Vector<Variant>>)``"

msgid "``SIGNAL_CHECK_FALSE(\"signal_name\")``"
msgstr "``SIGNAL_CHECK_FALSE(\"signal_name\")``"

msgid "``SIGNAL_DISCARD(\"signal_name\")``"
msgstr "``SIGNAL_DISCARD(\"signal_name\")``"

msgid "Test tools"
msgstr "测试工具"

msgid ""
"Test tools are advanced methods which allow you to run arbitrary procedures "
"to facilitate the process of manual testing and debugging the engine "
"internals."
msgstr ""
"测试工具是一种高级方法，允许你运行任意程序，以促进手动测试和调试引擎内部的过"
"程。"

msgid ""
"These tools can be run by supplying the name of a tool after the ``--test`` "
"command-line option. For instance, the GDScript module implements and "
"registers several tools to help the debugging of the tokenizer, parser, and "
"compiler:"
msgstr ""
"可以通过在 ``--test`` 命令行选项后提供工具名称来运行这些工具。例如，GDScript "
"模块实现并注册了几个工具来帮助调试标记器、解析器和编译器："

msgid ""
"If any such tool is detected, then the rest of the unit tests are skipped."
msgstr "如果检测到任何此类工具，则会跳过其余的单元测试。"

msgid ""
"Test tools can be registered anywhere throughout the engine as the "
"registering mechanism closely resembles of what doctest provides while "
"registering test cases using dynamic initialization technique, but usually "
"these can be registered at corresponding ``register_types.cpp`` sources (per "
"module or core)."
msgstr ""
"测试工具可以在整个引擎的任何地方注册，因为该注册机制与 doctest 在使用动态初始"
"化技术注册测试用例时提供的机制非常相似，但通常这些工具可以在相应的 "
"``register_types.cpp`` 源（每个模块或核心）中注册。"

msgid ""
"Here's an example of how GDScript registers test tools in ``modules/gdscript/"
"register_types.cpp``:"
msgstr ""
"下面是 GDScript 如何在 ``modules/gdscript/register_types.cpp`` 中注册测试工具"
"的示例："

msgid ""
"The custom command-line parsing can be performed by a test tool itself with "
"the help of OS :ref:`get_cmdline_args<class_OS_method_get_cmdline_args>` "
"method."
msgstr ""
"自定义命令行解析可以在 OS "
"的 :ref:`get_cmdline_args<class_OS_method_get_cmdline_args>` 方法的帮助下由测"
"试工具本身执行。"

msgid "Integration tests for GDScript"
msgstr "GDScript 的集成测试"

msgid ""
"Godot uses doctest to prevent regressions in GDScript during development. "
"There are several types of test scripts which can be written:"
msgstr ""
"Godot 使用 doctest 来防止在开发时引入回归问题。可以编写以下几种测试脚本："

msgid "tests for expected errors;"
msgstr "对预期错误的测试；"

msgid "tests for warnings;"
msgstr "对警告的测试；"

msgid "tests for features."
msgstr "对功能的测试。"

msgid ""
"Therefore, the process of writing integration tests for GDScript is the "
"following:"
msgstr "因此，为 GDScript 编写集成测试的步骤如下："

msgid ""
"Pick a type of a test script you'd like to write, and create a new GDScript "
"file under the ``modules/gdscript/tests/scripts`` directory within "
"corresponding sub-directory."
msgstr ""
"选择你想要编写的测试脚本类型，然后在 ``modules/gdscript/tests/scripts`` 目录"
"下对应的子目录中新建 GDScript 脚本。"

msgid ""
"Write GDScript code. The test script must have a function called ``test()`` "
"which takes no arguments. Such function will be called by the test runner. "
"The test should not have any dependency unless it's part of the test too. "
"Global classes (using ``class_name``) are registered before the runner "
"starts, so those should work if needed."
msgstr ""
"编写 GDScript 代码。测试脚本必须包含一个名叫 ``test()`` 的函数，不带任何参"
"数。这个函数会由测试运行器调用。测试不应存在任何依赖项，除非依赖项本身也是测"
"试的一部分。全局类（使用 ``class_name``\\ ）是在运行器启动前注册的，所以需要"
"时应该能够正常工作。"

msgid "Here's an example test script:"
msgstr "这是一个测试脚本的示例："

msgid "Change directory to the Godot source repository root."
msgstr "切换到 Godot 源码仓库的根目录。"

msgid ""
"Generate ``*.out`` files to update the expected results from the output:"
msgstr "生成 ``*.out`` 文件，更新期望输出的结果："

msgid ""
"You may add the ``--print-filenames`` option to see filenames as their test "
"outputs are generated. If you are working on a new feature that is causing "
"hard crashes, you can use this option to quickly find which test file causes "
"the crash and debug from there."
msgstr ""
"你可以加上 ``--print-filenames`` 选项，查看生成测试输出时对应的文件名。如果你"
"在开发新功能时造成了硬崩溃，就可以使用使用这个选项快速定位到造成崩溃的测试文"
"件，从而开始调试。"

msgid "Run GDScript tests with:"
msgstr "运行 GDScript 测试："

msgid "This also accepts the ``--print-filenames`` option (see above)."
msgstr "此处也能够使用 ``--print-filenames`` 选项（见上文）。"

msgid "If no errors are printed and everything goes well, you're done!"
msgstr "如果没有打印错误并且一切顺利，那么就完成了！"

msgid ""
"Make sure the output does have the expected values before submitting a pull "
"request. If ``--gdscript-generate-tests`` produces ``*.out`` files which are "
"unrelated to newly added tests, you should revert those files back and only "
"commit ``*.out`` files for new tests."
msgstr ""
"在提交拉取请求之前，请确保输出确实具有预期值。如果 ``--gdscript-generate-"
"tests`` 生成的 ``*.out`` 文件与新添加的测试无关，则应恢复这些文件并仅为新测试"
"提交 ``*.out`` 文件。"

msgid ""
"The GDScript test runner is meant for testing the GDScript implementation, "
"not for testing user scripts nor testing the engine using scripts. We "
"recommend writing new tests for already resolved `issues related to GDScript "
"at GitHub <https://github.com/godotengine/godot/issues?"
"q=is%3Aissue+label%3Atopic%3Agdscript+is%3Aclosed>`_, or writing tests for "
"currently working features."
msgstr ""
"GDScript 测试运行器用于测试 GDScript 实现，而不是用于测试用户脚本或测试引擎使"
"用脚本。我们建议为已解决的 `GitHub 上与 GDScript 相关的问题 <https://"
"github.com/godotengine/godot/issues?"
"q=is%3Aissue+label%3Atopic%3Agdscript+is%3Aclosed>`_\\ 编写新测试，或为当前正"
"在工作的功能编写测试。"

msgid ""
"If your test case requires that there is no ``test()`` function present "
"inside the script file, you can disable the runtime section of the test by "
"naming the script file so that it matches the pattern ``*.notest.gd``. For "
"example, \"test_empty_file.notest.gd\"."
msgstr ""
"如果你的测试用例要求脚本文件中不存在 ``test()`` 函数，你可以通过命名脚本文件"
"使其与模式 ``*.notest.gd`` 匹配来禁用测试的运行时部分。例"
"如，“test_empty_file.notest.gd”。"
