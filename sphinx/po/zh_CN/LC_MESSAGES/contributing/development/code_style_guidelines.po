#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Code style guidelines"
msgstr "代码风格规范"

msgid ""
"When contributing to Godot's source code, you will be expected to follow the "
"style guidelines outlined below. Some of them are checked via the Continuous "
"Integration process and reviewers will ask you to fix potential issues, so "
"best setup your system as outlined below to ensure all your commits follow "
"the guidelines."
msgstr ""
"在给 Godot 的源代码做贡献时，你需要遵循下面概述的样式规范。其中一些是通过持续"
"集成过程进行检查的，评审人员将要求你修复潜在的问题，因此最好按照下面概述的方"
"式设置系统，以确保所有提交都遵循规范。"

msgid "C++ and Objective-C"
msgstr "C++ 和 Objective-C"

msgid ""
"Indentation and alignment are both tab based (respectively one and two tabs)"
msgstr "缩进和对齐都是基于制表符的（分别是一个和两个制表符）"

msgid "One space around math and assignments operators as well as after commas"
msgstr "数学和赋值运算符以及逗号后面有一个空格"

msgid ""
"Pointer and reference operators are affixed to the variable identifier, not "
"to the type name"
msgstr "指针和引用运算符附加到变量标识符，而不是类型名称"

msgid "See further down regarding header includes"
msgstr "有关头文件的引入，请参见下文"

msgid ""
"The rules used by clang-format are outlined in the `.clang-format <https://"
"github.com/godotengine/godot/blob/master/.clang-format>`__ file of the Godot "
"repository."
msgstr ""
"Clang 格式使用的规则在 Godot 仓库的 `.clang-format <https://github.com/"
"godotengine/godot/blob/master/.clang-format>`__ 文件中进行了概述。"

msgid ""
"Third-party code is usually included in the ``thirdparty/`` folder and can "
"thus easily be excluded from formatting scripts. For the rare cases where a "
"third-party code snippet needs to be included directly within a Godot file, "
"you can use ``/* clang-format off */`` and ``/* clang-format on */`` to tell "
"clang-format to ignore a chunk of code."
msgstr ""
"第三方代码通常包含在 ``thirdparty/`` 文件夹中, 因此可以很容易地从格式化脚本中"
"排除. 在极少数情况下, 第三方代码片段需要直接包含在Godot文件中, 你可以使用 ``/"
"* clang-format off */`` 和 ``/* clang-format on */`` 来告诉clang-format忽略某"
"块儿的代码."

msgid ""
"These guidelines only cover code formatting. See :ref:"
"`doc_cpp_usage_guidelines` for a list of language features that are "
"permitted in pull requests."
msgstr ""
"这些规范只涉及代码的格式化。拉取请求中所允许的语言特性列表请参阅 :ref:"
"`doc_cpp_usage_guidelines`\\ 。"

msgid "Using clang-format locally"
msgstr "在本地使用 clang-format"

msgid "Pre-commit hook"
msgstr "预提交钩子"

msgid ""
"For ease of use, we provide hooks for Git with the `pre-commit <https://pre-"
"commit.com/>`__ Python framework that will run clang-format automatically on "
"all your commits with the correct version of clang-format. To set up:"
msgstr ""
"为了便于使用，我们提供了基于 `pre-commit <https://pre-commit.com/>`__ Python "
"框架的 Git 钩子，可以对你的所有提交自动运行 clang-format，同时确保使用的是正"
"确版本的 clang-format。设置方法是这样的："

msgid "You can also run the hook manually with ``pre-commit run``."
msgstr "你还可以使用 ``pre-commit run`` 手动运行这个钩子。"

msgid "Installation"
msgstr "安装"

msgid "Here's how to install clang-format:"
msgstr "以下是如何安装 clang-format："

msgid ""
"You then have different possibilities to apply clang-format to your changes:"
msgstr "然后, 你就有不同的可能性将clang-format应用于你的更改:"

msgid "Manual usage"
msgstr "手动使用"

msgid ""
"``-i`` means that the changes should be written directly to the file (by "
"default clang-format would only output the fixed version to the terminal)."
msgstr ""
"``-i`` 表示更改应直接写入文件(默认情况下,clang-format只会将固定版本输出到终"
"端)."

msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell. Be careful when globbing so that you "
"don't run clang-format on compiled objects (.o and .a files) that are in "
"Godot's tree. So better use ``core/*.{cpp,h}`` than ``core/*``."
msgstr ""
"该路径可以指向几个文件, 一个接一个, 也可以使用如在典型的Unix shell中的通配"
"符. 在通配时要小心, 以免对Godot树中的已编译对象(.o和.a文件)运行clang格式. 因"
"此, 最好使用 ``core/*. {cpp,h}`` 而不是 ``core/*``."

msgid "IDE plugin"
msgstr "IDE插件"

msgid "Here is a non-exhaustive list of beautifier plugins for some IDEs:"
msgstr "以下是一些IDE的美化插件的非详尽列表:"

msgid ""
"Visual Studio Code: `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`__"
msgstr ""
"Visual Studio Code：\\ `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`__"

msgid "vim: `vim-clang-format <https://github.com/rhysd/vim-clang-format>`__"
msgstr ""
"vim：\\ `vim-clang-format <https://github.com/rhysd/vim-clang-format>`__"

msgid ""
"CLion: Starting from version ``2019.1``, no plugin is required. Instead, "
"enable `ClangFormat <https://www.jetbrains.com/help/clion/clangformat-as-"
"alternative-formatter.html#clion-support>`__"
msgstr ""
"CLion：从 ``2019.1`` 版本起不再需要插件。启用 `ClangFormat <https://www."
"jetbrains.com/help/clion/clangformat-as-alternative-formatter.html#clion-"
"support>`__ 即可"

msgid "Header includes"
msgstr "头文件的引入"

msgid ""
"When adding new C++ or Objective-C files or including new headers in "
"existing ones, the following rules should be followed:"
msgstr ""
"当添加新的C++或Objective-C文件或在现有文件中引入新的标头时, 应遵循以下规则:"

msgid ""
"The first lines in the file should be Godot's copyright header and MIT "
"license, copy-pasted from another file. Make sure to adjust the filename."
msgstr ""
"文件中的第一行应该是Godot的版权标头和MIT许可证, 从另一个文件复制粘贴. 确保调"
"整文件名."

msgid ""
"In a ``.h`` header, include guards should be used with the form "
"``FILENAME_H``."
msgstr "在 ``.h`` 头文件中, 引入防护应该与 ``FILENAME_H`` 形式一起使用."

msgid ""
"In a ``.cpp`` file (e.g. ``filename.cpp``), the first include should be the "
"one where the class is declared (e.g. ``#include \"filename.h\"``), followed "
"by an empty line for separation."
msgstr ""
"在 ``.cpp`` 文件(如 ``filename.cpp`` )中, 第一个引入应该是声明类的那个(例如 "
"``#include \"filename.h\"``), 然后使用空行分隔."

msgid ""
"Finally, third-party headers (either from ``thirdparty`` or from the "
"system's include paths) come next and should be included with the < and > "
"symbols, e.g. ``#include <png.h>``. The block of third-party headers should "
"also be followed by an empty line for separation."
msgstr ""
"最后, 第三方头文件(无论是来自 ``thirdparty`` 还是来自系统的包含路径)接下来, "
"应该用 < and > 符号包含, 例如 ``#include <png.h>`` . 第三方头文件块的后面也应"
"该有一个空行来分隔."

msgid ""
"Godot and third-party headers should be included in the file that requires "
"them, i.e. in the `.h` header if used in the declarative code or in the `."
"cpp` if used only in the imperative code."
msgstr ""
"Godot和第三方标头应包含在需要它们的文件中, 即, 如果在声明性代码中使用, 则在 "
"`.h` 标头中；如果仅在命令性代码中使用, 则在 `.cpp` 中."

msgid "Example:"
msgstr "示例："

msgid "Java"
msgstr "Java"

msgid ""
"Godot's Java code (mostly in ``platform/android``) is also enforced via "
"``clang-format``, so see the instructions above to set it up. Keep in mind "
"that this style guide only applies to code written and maintained by Godot, "
"not third-party code such as the ``java/src/com/google`` subfolder."
msgstr ""
"Godot的Java代码(主要在 ``platform/android`` 中)也是通过 ``clang-format`` 来执"
"行的, 所以请看上面的说明来设置它. 请记住, 本风格规则只适用于Godot编写和维护的"
"代码, 而不是第三方代码, 如 ``java/src/com/google`` 子文件夹."

msgid "Python"
msgstr "Python"

msgid ""
"Godot's SCons buildsystem is written in Python, and various scripts included "
"in the source tree are also using Python."
msgstr ""
"Godot的SCons构建系统是用Python编写的, 源代码树中包含的各种脚本也使用Python."

msgid "Using ruff locally"
msgstr "本地使用 ruff"

msgid ""
"First of all, you will need to install Ruff. Ruff requires Python 3.7+ to "
"run."
msgstr "首先你需要安装 Ruff。Ruff 需要 Python 3.7+ 才能运行。"

msgid "Here's how to install ruff:"
msgstr "下面介绍如何安装 ruff："

msgid "You then have different possibilities to apply ruff to your changes:"
msgstr "这样就可以将 ruff 应用到你的修改了："

msgid ""
"You can apply ``ruff`` manually to one or more files with the following "
"command:"
msgstr "你可以使用以下命令将 ``ruff`` 手动应用于一个或多个文件："

msgid ""
"``-l 120`` means that the allowed number of characters per line is 120. This "
"number was agreed upon by the developers."
msgstr "``-l 120`` 表示每行允许的字符数为 120。这个数字是经过开发者们商定的。"

msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell."
msgstr ""
"该路径可以指向多个文件, 可以一个接一个, 也可以像典型的unixshell一样使用通配"
"符."

msgid ""
"For ease of use, we provide hooks for Git with the `pre-commit <https://pre-"
"commit.com/>`__ Python framework that will run ``ruff`` automatically on all "
"your commits with the correct version of ``ruff``. To set up:"
msgstr ""
"为了便于使用，我们提供了基于 `pre-commit <https://pre-commit.com/>`__ Python "
"框架的 Git 钩子，可以对你的所有提交自动运行 ``ruff``\\ ，同时确保使用的是正确"
"版本的 ``ruff``\\ 。设置方法是这样的："

msgid "Editor integration"
msgstr "编辑器集成"

msgid "Comment style guide"
msgstr "注释风格指南"

msgid ""
"This comment style guide applies to all programming languages used within "
"Godot's codebase."
msgstr "本注释风格指南适用于Godot代码库中使用的所有编程语言."

msgid ""
"Begin comments with a space character to distinguish them from disabled code."
msgstr "以空间字符开始注释, 以将其与禁用代码区分开来."

msgid ""
"Use sentence case for comments. Begin comments with an uppercase character "
"and always end them with a period."
msgstr "注释使用句子大小写. 注释以大写字母开头, 并始终以句号结束."

msgid "Reference variable/function names and values using backticks."
msgstr "使用反引号引用变量和函数名和值."

msgid "Wrap comments to ~100 characters."
msgstr "将注释控制在~100个字符。"

msgid "**Example:**"
msgstr "**示例:**"

msgid ""
"Don't repeat what the code says in a comment. Explain the *why* rather than "
"*how*."
msgstr "不要在注释中重复代码的内容. 解释 *为什么* 而不是 *如何* ."

msgid "**Bad:**"
msgstr "**错误做法：**"
