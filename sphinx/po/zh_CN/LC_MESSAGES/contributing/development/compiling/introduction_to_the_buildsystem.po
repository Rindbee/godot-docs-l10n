#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to the buildsystem"
msgstr "构建系统介绍"

msgid ":ref:`doc_compiling_for_android`"
msgstr ":ref:`doc_compiling_for_android`"

msgid ":ref:`doc_compiling_for_ios`"
msgstr ":ref:`doc_compiling_for_ios`"

msgid ":ref:`doc_compiling_for_linuxbsd`"
msgstr ":ref:`doc_compiling_for_linuxbsd`"

msgid ":ref:`doc_compiling_for_macos`"
msgstr ":ref:`doc_compiling_for_macos`"

msgid ":ref:`doc_compiling_for_web`"
msgstr ":ref:`doc_compiling_for_web`"

msgid ":ref:`doc_compiling_for_windows`"
msgstr ":ref:`doc_compiling_for_windows`"

msgid "Platform selection"
msgstr "选择平台"

msgid ""
"Godot's build system will begin by detecting the platforms it can build for. "
"If not detected, the platform will simply not appear on the list of "
"available platforms. The build requirements for each platform are described "
"in the rest of this tutorial section."
msgstr ""
"Godot的构建系统将从检测可构建的平台开始. 如果未检测到, 该平台将不会出现在可用"
"平台列表中. 本教程后续部分将介绍每种平台的构建要求."

msgid ""
"SCons is invoked by just calling ``scons``. If no platform is specified, "
"SCons will detect the target platform automatically based on the host "
"platform. It will then start building for the target platform right away."
msgstr ""
"仅通过调用 ``scons`` 即可调用SCons. 如果未指定平台,SCons将基于主机平台自动检"
"测目标平台. 然后它将立即开始为目标平台构建."

msgid "Resulting binary"
msgstr "生成的二进制文件"

msgid "A Windows binary with the same configuration will look like this:"
msgstr "一个具有相同配置的Windows二进制文件将如下所示:"

msgid ""
"Aside from that, there are a few standard options that can be set in all "
"build targets, and which will be explained below."
msgstr ""
"除此之外, 在所有的构建目标平台中有几个标准选项可以进行设置, 下面将对此进行说"
"明."

msgid "Target"
msgstr "目标"

msgid ""
"The editor is enabled by default in all PC targets (Linux, Windows, macOS), "
"disabled for everything else. Disabling the editor produces a binary that "
"can run projects but does not include the editor or the Project Manager."
msgstr ""
"所有 PC 目标（Linux、Windows、macOS）上都默认启用了编辑器，其他目标默认禁用。"
"禁用编辑器时得到的二进制文件可以运行项目，但不包含编辑器和项目管理器。"

msgid "Development and production aliases"
msgstr "开发别名与生产别名"

msgid ""
"When creating builds for development (running debugging/:ref:`profiling "
"<doc_using_cpp_profilers>` tools), you often have different goals compared "
"to production builds (making binaries as fast and small as possible)."
msgstr ""
"针对开发创建构建（运行调试工具或\\ :ref:`性能分析 "
"<doc_using_cpp_profilers>`\\ 工具）时，你的目的通常与生产构建不同（生产构建要"
"求让二进制文件尽可能又快又小）。"

msgid "Godot provides two aliases for this purpose:"
msgstr "Godot 为此提供了两种别名："

msgid ""
"``dev_mode=yes`` is an alias for ``verbose=yes warnings=extra werror=yes "
"tests=yes``. This enables warnings-as-errors behavior (similar to Godot's "
"continuous integration setup) and also builds :ref:`unit tests "
"<doc_unit_testing>` so you can run them locally."
msgstr ""
"``dev_mode=yes`` 是 ``verbose=yes warnings=extra werror=yes tests=yes`` 的别"
"名，启用了“将警告当作错误”的行为（与 Godot 的持续集成设置一致），并且会构建"
"\\ :ref:`单元测试 <doc_unit_testing>`\\ ，这些测试能够在本地运行。"

msgid ""
"``production=yes`` is an alias for ``use_static_cpp=yes debug_symbols=no "
"lto=auto``. Statically linking libstdc++ allows for better binary "
"portability when compiling for Linux. This alias also enables link-time "
"optimization when compiling for Linux, Web and Windows with MinGW, but keeps "
"LTO disabled when compiling for macOS, iOS or Windows with MSVC. This is "
"because LTO on those platforms is very slow to link or has issues with the "
"generated code."
msgstr ""
"``production=yes`` 是 ``use_static_cpp=yes debug_symbols=no lto=auto`` 的别"
"名。为 Linux 构建时，静态链接 libstdc++ 可以提升二进制文件的可移植性。在 "
"Linux、Web 和在 Windows 上使用 MinGW 编译时，这个别名还会启用链接时优化"
"（Link-Time Optimization，LTO），而在 macOS、iOS 和在 Windows 上使用 MSVC 编"
"译时 LTO 是禁用的。这是因为这些平台上的 LTO 不是非常缓慢就是生成的代码有问"
"题。"

msgid ""
"You can manually override options from those aliases by specifying them on "
"the same command line with different values. For example, you can use "
"``scons production=yes debug_symbols=yes`` to create production-optimized "
"binaries with debugging symbols included."
msgstr ""
"这些别名中的选项可以手动覆盖，在命令行中将其指定为不同的值即可。例如使用 "
"``scons production=yes debug_symbols=yes`` 即可创建针对生产优化并且带有调试符"
"号的二进制文件。"

msgid "Dev build"
msgstr "开发构建"

msgid ""
"``dev_build`` should **not** be confused with ``dev_mode``, which is an "
"alias for several development-related options (see above)."
msgstr ""
"**请勿**\\ 混淆 ``dev_build`` 与 ``dev_mode``\\ ，后者是部分开发相关选项的别"
"名（见上文）。"

msgid "Debugging symbols"
msgstr "调试符号"

msgid "Optimization level"
msgstr "优化级别"

msgid "Several compiler optimization levels can be chosen from:"
msgstr "以下几种编译器优化级别可供选择："

msgid ""
"``optimize=speed_trace`` *(default when targeting non-Web platforms)*: "
"Favors execution speed at the cost of larger binary size. Optimizations may "
"sometimes negatively impact debugger usage (stack traces may be less "
"accurate. If this occurs to you, use ``optimize=debug`` instead."
msgstr ""
"``optimize=speed_trace``\\ *（目标平台非 Web 时默认）*\\ ：执行速度更快，但二"
"进制文件更大。优化有时会对调试器的使用产生负面影响（可能会降低堆栈跟踪的准确"
"性）。如果遇到了这种情况，请改用 ``optimize=debug``\\ 。"

msgid ""
"``optimize=speed``: Favors even more execution speed, at the cost of even "
"larger binary size compared to ``optimize=speed_trace``. Even less friendly "
"to debugging compared to ``optimize=debug``, as this uses the most "
"aggressive optimizations available."
msgstr ""
"``optimize=speed``\\ ：与 ``optimize=speed_trace`` 相比，执行速度更快，但二进"
"制文件也更大。与 ``optimize=debug`` 相比更不利于调试，因为会尽可能使用最激进"
"的优化手段。"

msgid ""
"``optimize=size`` *(default when targeting the Web platform)*: Favors small "
"binaries at the cost of slower execution speed."
msgstr ""
"``optimize=size``\\ *（目标平台为 Web 时默认）*\\ ：二进制文件更小，但执行速"
"度更慢。"

msgid ""
"``optimize=debug``: Only enables optimizations that do not impact debugging "
"in any way. This results in faster binaries than ``optimize=none``, but "
"slower binaries than ``optimize=speed_trace``."
msgstr ""
"``optimize=debug``\\ ：仅启用不会对调试产生影响的优化手段。得到的二进制文件"
"比 ``optimize=none`` 快、比 ``optimize=speed_trace`` 慢。"

msgid ""
"``optimize=none``: Do not perform any optimization. This provides the "
"fastest build times, but the slowest execution times."
msgstr "``optimize=none``\\ ：不进行任何优化。构建时间最快、执行速度最慢。"

msgid ""
"``optimize=custom`` *(advanced users only)*: Do not pass optimization "
"arguments to the C/C++ compilers. You will have to pass arguments manually "
"using the ``cflags``, ``ccflags`` and ``cxxflags`` SCons options."
msgstr ""
"``optimize=custom``\\ *（仅限高阶用户）*\\ ：不会向 C/C++ 编译器传递优化参"
"数。你需要通过 ``cflags``\\ 、\\ ``ccflags``\\ 、\\ ``cxxflags`` SCons 选项手"
"动传递参数。"

msgid "Architecture"
msgstr "架构"

msgid ""
"The ``arch`` option is meant to control the CPU or OS version intended to "
"run the binaries. It is focused mostly on desktop platforms and ignored "
"everywhere else."
msgstr ""
"``arch`` 选项的作用是控制用于运行二进制文件的 CPU 或操作系统版本。主要针对桌"
"面平台，其他平台都会忽略该选项。"

msgid ""
"Supported values for the ``arch`` option are **auto**, **x86_32**, "
"**x86_64**, **arm32**, **arm64**, **rv64**, **ppc32**, **ppc64** and "
"**wasm32**."
msgstr ""
"``arch`` 选项支持的取值有：\\ **auto**\\ 、 **x86_32**\\ 、 **x86_64**\\ 、 "
"**arm32**\\ 、 **arm64**\\ 、 **rv64**\\ 、 **ppc32**\\ 、 **ppc64**\\ 、 "
"**wasm32**\\ 。"

msgid ""
"This flag appends the value of ``arch`` to resulting binaries when "
"relevant.  The default value ``arch=auto`` detects the architecture that "
"matches the host platform."
msgstr ""
"使用该标志时，最终得到的二进制文件的末尾会加上 ``arch`` 的取值。默认值 "
"``arch=auto`` 会检测与宿主平台匹配的架构。"

msgid "Custom modules"
msgstr "自定义模块"

msgid ""
"It's possible to compile modules residing outside of Godot's directory tree, "
"along with the built-in modules."
msgstr "可以编译驻扎在Godot目录树之外的模块, 以及内置模块."

msgid ""
"A ``custom_modules`` build option can be passed to the command line before "
"compiling. The option represents a comma-separated list of directory paths "
"containing a collection of independent C++ modules that can be seen as C++ "
"packages, just like the built-in ``modules/`` directory."
msgstr ""
"在编译之前, 可以在命令行中传递一个 ``custom_modules`` 构建选项. 这个选项代表"
"了一个以逗号分隔的目录路径列表, 其中包含了一系列独立的C++模块, 这些模块可以被"
"看作是C++包, 就像内置的 ``modules/`` 目录一样."

msgid ""
"For instance, it's possible to provide both relative, absolute, and user "
"directory paths containing such modules:"
msgstr "例如, 可以同时提供包含此类模块的相对, 绝对和用户目录路径:"

msgid ""
"If there's any custom module with the exact directory name as a built-in "
"module, the engine will only compile the custom one. This logic can be used "
"to override built-in module implementations."
msgstr ""
"如果有任何自定义模块的目录名与内置模块的目录名完全相同, 引擎将只编译自定义模"
"块. 这个逻辑可以用来覆盖内置模块的实现."

msgid ":ref:`doc_custom_modules_in_cpp`"
msgstr ":ref:`doc_custom_modules_in_cpp`"

msgid "Cleaning generated files"
msgstr "清理生成的文件"

msgid ""
"Sometimes, you may encounter an error due to generated files being present. "
"You can remove them by using ``scons --clean <options>``, where "
"``<options>`` is the list of build options you've used to build Godot "
"previously."
msgstr ""
"有时, 你可能会遇到一个错误, 因为生成的文件存在. 你可以使用``scons --clean "
"<options>``删除它们, 其中 ``<options>`` 是你之前用来构建Godot的构建选项列表."

msgid ""
"Alternatively, you can use ``git clean -fixd`` which will clean build "
"artifacts for all platforms and configurations. Beware, as this will remove "
"all untracked and ignored files in the repository. Don't run this command if "
"you have uncommitted work!"
msgstr ""
"或者, 你也可以使用``git clean -fixd``来清理所有平台和配置的构建工件. 注意, 这"
"将删除版本库中所有未跟踪和忽略的文件. 如果你有未提交的工作, 请不要运行这个命"
"令！"

msgid "Other build options"
msgstr "其他构建选项"

msgid ""
"There are several other build options that you can use to configure the way "
"Godot should be built (compiler, debug options, etc.) as well as the "
"features to include/disable."
msgstr ""
"你还可以使用其他几个构建选项来配置Godot的构建方式(编译器, 调试选项等), 以及要"
"包含/禁用的功能."

msgid ""
"Check the output of ``scons --help`` for details about each option for the "
"version you are willing to compile."
msgstr ""
"检查 ``scons --help`` 的输出, 以获取有关你愿意编译的版本的每个选项的详细信息."

msgid "Overriding the build options"
msgstr "重写构建选项"

msgid "Using a file"
msgstr "使用文件"

msgid ""
"The default ``custom.py`` file can be created at the root of the Godot "
"Engine source to initialize any SCons build options passed via the command "
"line:"
msgstr ""
"默认的 ``custom.py`` 文件可以在Godot引擎源的根部创建, 以初始化任何通过命令行"
"传递的SCons构建选项:"

msgid ""
"You can use the online `Godot build options generator <https://godot-build-"
"options-generator.github.io/>`__ to generate a ``custom.py`` file containing "
"SCons options. You can then save this file and place it at the root of your "
"Godot source directory."
msgstr ""
"你可以使用在线 `Godot 构建选项生成器 <https://godot-build-options-"
"generator.github.io/>`__ , 生成一个包含SCons选项的 ``custom.py`` 文件. 然后你"
"可以保存这个文件, 并将其放在Godot源目录的根目录下."

msgid ""
"Another custom file can be specified explicitly with the ``profile`` command "
"line option, both overriding the default build configuration:"
msgstr ""
"另一个自定义文件可以用 ``profile`` 命令行选项明确指定, 都会覆盖默认的构建配"
"置:"

msgid ""
"Build options set from the file can be overridden by the command line "
"options."
msgstr "从文件中设置的构建选项可以被命令行选项所覆盖."

msgid "It's also possible to override the options conditionally:"
msgstr "也可以有条件地重写这些选项:"

msgid "Using the SCONSFLAGS"
msgstr "使用SCONSFLAGS"

msgid ""
"``SCONSFLAGS`` is an environment variable which is used by the SCons to set "
"the options automatically without having to supply them via the command line."
msgstr ""
"``SCONSFLAGS`` 是一个环境变量,SCons用来自动设置选项, 而无需通过命令行提供."

msgid ""
"For instance, you may want to force a number of CPU threads with the "
"aforementioned ``-j`` option for all future builds:"
msgstr ""
"例如你可能会想要让后续的构建都使用前面提到的 ``-j`` 选项来强制使用特定数量的 "
"CPU 线程："

msgid "SCU (single compilation unit) build"
msgstr "SCU（单编译单元）构建"

msgid ""
"Regular builds tend to be bottlenecked by including large numbers of headers "
"in each compilation translation unit. Primarily to speed up development "
"(rather than for production builds), Godot offers a \"single compilation "
"unit\" build (aka \"Unity / Jumbo\" build)."
msgstr ""
"普通构建的瓶颈通常在于每个编译翻译单元都包含了大量的头文件。为了加速开发（并"
"非针对生产构建），Godot 提供了“单编译单元”构建（也叫“统一构建”或“巨型构"
"建”）。"

msgid ""
"For the folders accelerated by this option, multiple ``.cpp`` files are "
"compiled in each translation unit, so headers can be shared between multiple "
"files, which can dramatically decrease build times."
msgstr ""
"在能够被该选项加速的文件夹中，每个翻译单元都会编译多个 ``.cpp`` 文件，因此头"
"文件会在多个文件之间共享，从而大幅降低编译时长。"

msgid "To perform an SCU build, use the ``scu_build=yes`` SCons option."
msgstr "要进行 SCU 构建，请使用 Scons 选项 ``scu_build=yes``\\ 。"

msgid "Export templates"
msgstr "导出模板"

msgid ""
"Official export templates are downloaded from the Godot Engine site: "
"`godotengine.org <https://godotengine.org/>`__. However, you might want to "
"build them yourself (in case you want newer ones, you are using custom "
"modules, or simply don't trust your own shadow)."
msgstr ""
"官方的导出模板可以从 `Godot 的官方网站 <https://godotengine.org/>`__ 下载到. "
"此外, 你可能想要自己构建它们(可能想要构建更新的版本, 要使用自定义模块, 不信任"
"我们编译的包是否安全)."

msgid ""
"If you download the official export templates package and unzip it, you will "
"notice that most files are optimized binaries or packages for each platform:"
msgstr ""
"如果下载官方导出模板程序包并解压缩, 你会注意到大多数文件都是针对每个平台的优"
"化二进制文件或程序包:"

msgid ""
"To create those yourself, follow the instructions detailed for each platform "
"in this same tutorial section. Each platform explains how to create its own "
"template."
msgstr ""
"要自己创建它们, 请按照该教程中针对每个平台的详细说明的部分进行操作. 每个平台"
"都说明了如何创建自己的模板."

msgid ""
"The ``version.txt`` file should contain the corresponding Godot version "
"identifier. This file is used to install export templates in a version-"
"specific directory to avoid conflicts. For instance, if you are building "
"export templates for Godot 3.1.1, ``version.txt`` should contain "
"``3.1.1.stable`` on the first line (and nothing else). This version "
"identifier is based on the ``major``, ``minor``, ``patch`` (if present) and "
"``status`` lines of the `version.py file in the Godot Git repository "
"<https://github.com/godotengine/godot/blob/master/version.py>`__."
msgstr ""
"``version.txt`` 文件应包含相应的 Godot 版本标识符。该文件用于在特定于版本的目"
"录中安装导出模板，以避免冲突。例如，如果你要为 Godot 3.1.1 构建导出模板，则 "
"``version.txt`` 文件的第一行应包含 ``3.1.1.stable``\\ （没有其他内容）。该版"
"本标识符\\ `在 Godot Git 仓库库中的 version.py 文件 <https://github.com/"
"godotengine/godot/blob/master/version.py>`__\\ 的 ``major``\\ 、\\ "
"``minor``\\ 、\\ ``patch``\\ （如果存在）和 ``status`` 行。"
