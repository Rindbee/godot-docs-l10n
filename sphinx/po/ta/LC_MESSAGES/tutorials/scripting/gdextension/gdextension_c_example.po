#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ta\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDExtension C example"
msgstr "Gdextension c எடுத்துக்காட்டு"

msgid "Introduction"
msgstr "அறிமுகம்"

msgid ""
"This is a simple example on how to work with GDExtension directly with C "
"code. Note that the API is not meant to be used directly, so this will "
"definitely be quite verbose and require a lot of steps even for a small "
"example. However, it serves as a reference for creating bindings for a "
"different language. It is still possible to use the API directly if you "
"prefer, which might be convenient when only binding a third-party library."
msgstr ""
"சி குறியீட்டுடன் நேரடியாக gdextension உடன் எவ்வாறு செயல்படுவது என்பதற்கான எளிய "
"எடுத்துக்காட்டு இது. பநிஇ நேரடியாகப் பயன்படுத்தப்படக்கூடாது என்பதை நினைவில் கொள்க, எனவே "
"இது நிச்சயமாக மிகவும் சொற்களஞ்சியமாக இருக்கும், மேலும் ஒரு சிறிய எடுத்துக்காட்டுக்கு "
"கூட நிறைய படிகள் தேவைப்படும். இருப்பினும், இது வேறு மொழிக்கு பிணைப்புகளை "
"உருவாக்குவதற்கான குறிப்பாக செயல்படுகிறது. நீங்கள் விரும்பினால் நேரடியாக பநிஇ ஐப் "
"பயன்படுத்துவது இன்னும் சாத்தியமாகும், இது மூன்றாம் தரப்பு நூலகத்தை மட்டுமே பிணைக்கும்போது "
"வசதியாக இருக்கும்."

msgid ""
"In this example we will create a custom node that moves a sprite on the "
"screen based on the user's parameters. While very simple, it serves to show "
"how to do some of the things with GDExtension, like registering custom "
"classes with methods, properties, and signals. It gives an insight on the "
"GDExtension API."
msgstr ""
"இந்த எடுத்துக்காட்டில் பயனரின் அளவுருக்களின் அடிப்படையில் திரையில் ஒரு ச்ப்ரைட்டை நகர்த்தும் "
"தனிப்பயன் முனையை உருவாக்குவோம். மிகவும் எளிமையானது என்றாலும், முறைகள், பண்புகள் மற்றும் "
"சமிக்ஞைகளுடன் தனிப்பயன் வகுப்புகளை பதிவு செய்வது போன்ற gdextension உடன் சில விசயங்களை "
"எவ்வாறு செய்வது என்பதைக் காண்பிக்க இது உதவுகிறது. இது gdextension பநிஇ பற்றிய ஒரு "
"நுண்ணறிவை அளிக்கிறது."

msgid "Setting up the project"
msgstr "திட்டத்தை அமைத்தல்"

msgid "There are a few prerequisites you'll need:"
msgstr "உங்களுக்கு தேவையான சில முன்நிபந்தனைகள் உள்ளன:"

msgid "a Godot 4.2 (or later) executable,"
msgstr "ஒரு கோடோட் 4.2 (அல்லது அதற்குப் பிறகு) இயங்கக்கூடிய,"

msgid "a C compiler,"
msgstr "ஒரு சி கம்பைலர்,"

msgid "SCons as a build tool."
msgstr "ஒரு உருவாக்க கருவியாக ச்கான்."

msgid ""
"Since this is using the API directly, there's no need to use the `godot-cpp "
"repository <https://github.com/godotengine/godot-cpp>`__."
msgstr ""
"இது பநிஇ ஐ நேரடியாகப் பயன்படுத்துவதால், `கோடோட்-சிபிபி களஞ்சியத்தை <https://"
"github.com/godotengine/godot-cpp> __ __."

msgid "File structure"
msgstr "கோப்பு அமைப்பு"

msgid "To organize our files, we're gonna split into mainly two folders:"
msgstr ""
"எங்கள் கோப்புகளை ஒழுங்கமைக்க, நாங்கள் முக்கியமாக இரண்டு கோப்புறைகளாகப் பிரிக்கப் போகிறோம்:"

msgid ""
"We also need a copy of the ``gdextension_interface.h`` header from the Godot "
"source code, which can be obtained directly from the Godot executable by "
"running the following command:"
msgstr ""
"கோடோட் மூலக் குறியீட்டிலிருந்து `` gdextension_interface.h` `தலைப்பின் நகலும் நமக்குத் "
"தேவை, பின்வரும் கட்டளையை இயக்குவதன் மூலம் கோடோட்டிலிருந்து நேரடியாகப் பெறலாம்:"

msgid ""
"This creates the header in the current folder, so you can just copy it to "
"the ``src`` folder in the example project."
msgstr ""
"இது தற்போதைய கோப்புறையில் தலைப்பை உருவாக்குகிறது, எனவே நீங்கள் அதை எடுத்துக்காட்டு "
"திட்டத்தில் `` SRC`` கோப்புறையில் நகலெடுக்கலாம்."

msgid ""
"Lastly, there's another source of information we need to refer to, which is "
"the JSON file with the Godot API reference. This file won't be used by the "
"code directly, we will only use it to extract some information manually."
msgstr ""
"கடைசியாக, நாம் குறிப்பிட வேண்டிய மற்றொரு தகவல்களின் சான்று உள்ளது, இது கோடோட் பநிஇ "
"குறிப்பைக் கொண்ட சாதொபொகு கோப்பு. இந்த கோப்பு குறியீட்டால் நேரடியாகப் பயன்படுத்தப்படாது, "
"சில தகவல்களை கைமுறையாக பிரித்தெடுக்க மட்டுமே இதைப் பயன்படுத்துவோம்."

msgid "To get this JSON file, just call the Godot executable:"
msgstr "இந்த சாதொபொகு கோப்பைப் பெற, கோடோட் இயங்கக்கூடியதாக அழைக்கவும்:"

msgid ""
"The resulting ``extension_api.json`` file will be created in the current "
"folder. You can copy this file to the example folder to have it handy."
msgstr ""
"இதன் விளைவாக `` Extanse_api.json`` கோப்பு தற்போதைய கோப்புறையில் உருவாக்கப்படும். இந்த "
"கோப்பை எடுத்துக்காட்டு கோப்புறையில் நகலெடுக்கலாம்."

msgid ""
"This extension is targeting Godot 4.2, but it should work on later versions "
"as well. If you want to target a different minimal version, make sure to get "
"the header and the JSON from the version Godot version you are targeting."
msgstr ""
"இந்த நீட்டிப்பு கோடோட் 4.2 ஐ குறிவைக்கிறது, ஆனால் இது பிற்கால பதிப்புகளிலும் செயல்பட "
"வேண்டும். நீங்கள் வேறுபட்ட குறைந்தபட்ச பதிப்பை குறிவைக்க விரும்பினால், நீங்கள் குறிவைக்கும் "
"பதிப்பு கோடோட் பதிப்பிலிருந்து தலைப்பு மற்றும் சாதொபொகு ஐப் பெறுவதை உறுதிப்படுத்திக் "
"கொள்ளுங்கள்."

msgid "Buildsystem"
msgstr "கட்டட அமைப்பு"

msgid ""
"Using a buildsystem makes our life a lot easier when dealing with C code. "
"For the sake of convenience, we'll use SCons since it's the same as what "
"Godot itself uses."
msgstr ""
"சி குறியீட்டைக் கையாளும் போது ஒரு பில்ட் சிச்டத்தைப் பயன்படுத்துவது நம் வாழ்க்கையை மிகவும் "
"எளிதாக்குகிறது. வசதிக்காக, கோடோட் பயன்படுத்துவதைப் போலவே ச்கான்களைப் பயன்படுத்துவோம்."

msgid ""
"The following ``SConstruct`` file is a simple one that will build your "
"extension to the current platform that you are using, be it Linux, macOS, or "
"Windows. This will be a non-optimized build for debugging purposes. It also "
"assumes a 64-bit build, which is relevant for some parts of the example "
"code. Making other build types and cross-compilation is out of the scope of "
"this tutorial. Save this file to the root folder."
msgstr ""
"பின்வரும் `` ச்கிரான்ட்ரக்ட்`` கோப்பு என்பது நீங்கள் பயன்படுத்தும் தற்போதைய தளத்திற்கு உங்கள் "
"நீட்டிப்பை உருவாக்கும் ஒரு எளிய ஒன்றாகும், இது லினக்ச், மேகோச் அல்லது சாளரங்கள். இது "
"பிழைத்திருத்த நோக்கங்களுக்காக உகந்ததாக இல்லாத கட்டமைப்பாக இருக்கும். இது 64-பிட் "
"கட்டமைப்பையும் கருதுகிறது, இது எடுத்துக்காட்டு குறியீட்டின் சில பகுதிகளுக்கு "
"பொருத்தமானது. பிற கட்டட வகைகள் மற்றும் குறுக்கு ஏற்றத்தாழ்வு இந்த டுடோரியலின் எல்லைக்கு "
"அப்பாற்பட்டது. இந்த கோப்பை ரூட் கோப்புறையில் சேமிக்கவும்."

msgid ""
"This will include all C files in the ``src`` folder, so we don't need to "
"change this file when adding new source files."
msgstr ""
"இது `` SRC`` கோப்புறையில் உள்ள அனைத்து சி கோப்புகளையும் உள்ளடக்கும், எனவே புதிய மூல "
"கோப்புகளைச் சேர்க்கும்போது இந்த கோப்பை மாற்ற தேவையில்லை."

msgid "Initializing the extension"
msgstr "நீட்டிப்பைத் தொடங்குதல்"

msgid ""
"The first bit of code will be responsible for initializing the extension. "
"This is what makes Godot aware of what our GDExtension provides, such as "
"classes and plugins."
msgstr ""
"நீட்டிப்பைத் தொடங்குவதற்கு முதல் பிட் குறியீடு பொறுப்பாகும். வகுப்புகள் மற்றும் "
"செருகுநிரல்கள் போன்ற நமது gdextension எதை வழங்குகிறது என்பதை கோடோட்டுக்கு இது "
"தெரியப்படுத்துகிறது."

msgid ""
"Create the file ``init.h`` in the ``src`` folder, with the following "
"contents:"
msgstr "பின்வரும் உள்ளடக்கங்களுடன் `` src`` கோப்புறையில் `` init.h`` கோப்பை உருவாக்கவும்:"

msgid ""
"The functions declared here have the signatures expected by the GDExtension "
"API."
msgstr ""
"இங்கு அறிவிக்கப்பட்ட செயல்பாடுகளில் Gdextension பநிஇ ஆல் எதிர்பார்க்கப்படும் கையொப்பங்கள் "
"உள்ளன."

msgid ""
"Note the inclusion of the ``defs.h`` file. This is one of our helpers to "
"simplify writing the extension code. For now it will only contain the "
"definition of ``GDE_EXPORT``, a macro that makes the function public in the "
"shared library so Godot can properly call it. This macro helps abstracting "
"what each compiler expects."
msgstr ""
"`` Defs.h`` கோப்பைச் சேர்ப்பதைக் கவனியுங்கள். நீட்டிப்புக் குறியீட்டை எழுதுவதை "
"எளிதாக்குவதற்கான எங்கள் உதவியாளர்களில் இதுவும் ஒன்றாகும். இப்போதைக்கு இது பகிரப்பட்ட "
"நூலகத்தில் செயல்பாட்டை பகிரங்கப்படுத்தும் மேக்ரோ, `` gde_export`` இன் வரையறையை மட்டுமே "
"கொண்டிருக்கும், எனவே கோடோட் அதை சரியாக அழைக்க முடியும். ஒவ்வொரு கம்பைலரும் "
"எதிர்பார்ப்பதை சுருக்கிக் கொள்ள இந்த மேக்ரோ உதவுகிறது."

msgid ""
"Create the ``defs.h`` file in the ``src`` folder with the following contents:"
msgstr "பின்வரும் உள்ளடக்கங்களுடன் `` src`` கோப்புறையில் `` defs.h`` கோப்பை உருவாக்கவும்:"

msgid ""
"We also include some standard headers to make things easier. Now we only "
"have to include ``defs.h`` and those will come as a bonus."
msgstr ""
"விசயங்களை எளிதாக்க சில நிலையான தலைப்புகளையும் நாங்கள் சேர்க்கிறோம். இப்போது நாம் `` "
"defs.h`` ஐ மட்டுமே சேர்க்க வேண்டும், அவை போனசாக வரும்."

msgid ""
"Now, let's implement the functions we just declared. Create a file called "
"``init.c`` in the ``src`` folder and add this code:"
msgstr ""
"இப்போது, நாங்கள் இப்போது அறிவித்த செயல்பாடுகளை செயல்படுத்துவோம். `` Src`` கோப்புறையில் "
"`` init.c`` என்ற கோப்பை உருவாக்கி இந்த குறியீட்டைச் சேர்க்கவும்:"

msgid ""
"What this does is set up the initialization data that Godot expects. The "
"functions to initialize and deinitialize are set so Godot will call then "
"when needed. It also sets the initialization level which varies per "
"extension. Since we plan to add a custom node, the ``SCENE`` level is enough."
msgstr ""
"இது என்னவென்றால், கோடோட் எதிர்பார்க்கும் துவக்க தரவை அமைக்கிறது. துவக்க மற்றும் டினிடீலைச் "
"செய்வதற்கான செயல்பாடுகள் அமைக்கப்படுகின்றன, எனவே கோடோட் தேவைப்படும்போது அழைக்கும். இது "
"ஒரு நீட்டிப்புக்கு மாறுபடும் துவக்க அளவையும் அமைக்கிறது. தனிப்பயன் முனையைச் சேர்க்க நாங்கள் "
"திட்டமிட்டுள்ளதால், `` காட்சி`` நிலை போதுமானது."

msgid ""
"We will fill the ``initialize_gdexample_module()`` function later to "
"register our custom class."
msgstr ""
"எங்கள் தனிப்பயன் வகுப்பைப் பதிவுசெய்ய `` துவக்க_சிடெக்சால்_மோடூல் () `` பின்னர் நிரப்புவோம்."

msgid "A basic class"
msgstr "ஒரு அடிப்படை வகுப்பு"

msgid ""
"In order to make an actual node, first we'll create a C struct to hold data "
"and functions that will act as methods. The plan is to make this a custom "
"node that inherits from :ref:`Sprite2D <class_Sprite2D>`."
msgstr ""
"உண்மையான முனையை உருவாக்க, முதலில் தரவு மற்றும் செயல்பாடுகளை முறைகளாக வைத்திருக்க ஒரு "
"சி கட்டமைப்பை உருவாக்குவோம். இதிலிருந்து பெறும் தனிப்பயன் முனையை உருவாக்குவதே திட்டம்: "
"ref: `sprite2d <class_sprite2d>`."

msgid ""
"Create a file called ``gdexample.h`` in the ``src`` folder with the "
"following contents:"
msgstr ""
"பின்வரும் உள்ளடக்கங்களுடன் `` src`` கோப்புறையில் `` gdexample.h`` என்ற கோப்பை "
"உருவாக்கவும்:"

msgid ""
"Noteworthy here is the ``object`` field, which holds a pointer to the Godot "
"object, and the ``gdexample_class_bind_methods()`` function, which will "
"register the metadata of our custom class (properties, methods, and "
"signals). The latter is not entirely necessary, as we can do it when "
"registering the class, but it makes clearer to separate the concerns and let "
"our class register its own metadata."
msgstr ""
"கோடோட் பொருளுக்கு ஒரு சுட்டிக்காட்டி வைத்திருக்கும் `` பொருள்` புலம், மற்றும் `` "
"gdexample_class_bind_methods () `` செயல்பாடு, இது எங்கள் தனிப்பயன் வகுப்பின் "
"மெட்டாடேட்டாவை (பண்புகள், முறைகள் மற்றும் சமிக்ஞைகள்) பதிவு செய்யும். பிந்தையது முற்றிலும் "
"தேவையில்லை, ஏனெனில் வகுப்பைப் பதிவுசெய்யும்போது நாம் அதைச் செய்ய முடியும், ஆனால் "
"கவலைகளை பிரிக்கவும், எங்கள் வகுப்பு அதன் சொந்த மெட்டாடேட்டாவை பதிவு செய்யவும் இது "
"தெளிவானது."

msgid ""
"The ``object`` field is necessary because our class will inherit a Godot "
"class. Since we can't inherit it directly, as we are not interacting with "
"the source code (and C doesn't even have classes), we instead tell Godot to "
"create an object of a type it knows and attach our extension to it. We will "
"need the reference to such objects when calling methods on the parent class, "
"for instance."
msgstr ""
"`` பொருள்` `புலம் தேவை, ஏனென்றால் எங்கள் வகை ஒரு கோடோட் வகுப்பைப் பெறும். மூலக் "
"குறியீட்டோடு (மற்றும் சி வகுப்புகள் கூட இல்லை) உடன் தொடர்பு கொள்ளாததால், அதை நேரடியாகப் "
"பெற முடியாது என்பதால், அதற்கு பதிலாக கோடோட்டுக்கு அது தெரிந்த ஒரு வகையின் ஒரு "
"பொருளை உருவாக்கி, அதனுடன் எங்கள் நீட்டிப்பை இணைக்கச் சொல்கிறோம். உதாரணமாக, பெற்றோர் "
"வகுப்பில் முறைகளை அழைக்கும்போது இதுபோன்ற பொருள்களைப் பற்றிய குறிப்பு நமக்குத் தேவைப்படும்."

msgid ""
"Let's create the source counterpart of this header. Create the file "
"``gdexample.c`` in the ``src`` folder and add the following code to it:"
msgstr ""
"இந்த தலைப்பின் மூல எண்ணை உருவாக்குவோம். `` Src`` கோப்புறையில் `` gdexample.c` கோப்பை "
"உருவாக்கி பின்வரும் குறியீட்டைச் சேர்க்கவும்:"

msgid ""
"As we don't have anything to do with those functions yet, they'll stay empty "
"for a while."
msgstr ""
"அந்த செயல்பாடுகளுடன் எங்களுக்கு இன்னும் எந்த தொடர்பும் இல்லை என்பதால், அவை சிறிது நேரம் "
"காலியாக இருக்கும்."

msgid ""
"The next step is registering our class. However, in order to do so we need "
"to create a :ref:`StringName <class_StringName>` and for that we have to get "
"a function from the GDExtension API. Since we'll need this a few times and "
"we'll also need other things, let's create a wrapper API to facilitate this "
"kind of chore."
msgstr ""
"அடுத்த கட்டம் எங்கள் வகுப்பை பதிவு செய்கிறது. இருப்பினும், அவ்வாறு செய்ய நாம் ஒரு: ref: "
"`சரம் பெயர் <class_stringname>` உருவாக்க வேண்டும், அதற்காக gdextension பநிஇ "
"இலிருந்து ஒரு செயல்பாட்டைப் பெற வேண்டும். எங்களுக்கு இது சில முறை தேவைப்படும் என்பதால், "
"எங்களுக்கு பிற விசயங்களும் தேவைப்படும் என்பதால், இந்த வகையான வேலையை எளிதாக்க ஒரு ரேப்பர் "
"பநிஇ உருவாக்குவோம்."

msgid "A wrapper API"
msgstr "ஒரு ரேப்பர் பநிஇ"

msgid "We'll start by creating an ``api.h`` file in the ``src`` folder:"
msgstr "`` Src`` கோப்புறையில் `` api.h`` கோப்பை உருவாக்குவதன் மூலம் தொடங்குவோம்:"

msgid ""
"This file will include many other helpers as we fill our extension with "
"something useful. For now it only has a pointer to a function that creates a "
"StringName from a C string (in Latin-1 encoding) and another to destruct a "
"StringName, which we'll need to use to avoid leaking memory, as well as the "
"function to register a class, which is our initial goal."
msgstr ""
"இந்த கோப்பில் பல உதவியாளர்களை உள்ளடக்கும், ஏனெனில் எங்கள் நீட்டிப்பை பயனுள்ளதாக "
"நிரப்புகிறோம். இப்போதைக்கு இது ஒரு சி சரத்திலிருந்து (லத்தீன் -1 குறியாக்கத்தில்) ஒரு "
"சரம் பெயரையும், ஒரு சரம் பெயரை அழிப்பதற்கும் ஒரு சரம் பெயர் உருவாக்கும் ஒரு "
"செயல்பாட்டிற்கு ஒரு சுட்டிக்காட்டி மட்டுமே உள்ளது, இது நினைவகத்தை கசிவதைத் தவிர்ப்பதற்கு "
"நாம் பயன்படுத்த வேண்டும், அதே போல் ஒரு வகுப்பை பதிவு செய்வதற்கான செயல்பாடும், இது எங்கள் "
"ஆரம்ப குறிக்கோள்."

msgid ""
"We also keep a reference to the ``class_library`` here. This is something "
"that Godot provides to us when initializing the extension and we'll need to "
"use it when registering the things we create so Godot can tell which "
"extension is making the call."
msgstr ""
"`` Class_library`` பற்றிய குறிப்பையும் இங்கே வைத்திருக்கிறோம். நீட்டிப்பைத் தொடங்கும்போது "
"இது கோடோட் நமக்கு வழங்கும் ஒன்று, நாம் உருவாக்கும் விசயங்களை பதிவு செய்யும் போது அதைப் "
"பயன்படுத்த வேண்டும், எனவே எந்த நீட்டிப்பு அழைப்பை உருவாக்குகிறது என்பதை கோடோட் சொல்ல "
"முடியும்."

msgid ""
"There's also a function to load those function pointers from the GDExtension "
"API."
msgstr ""
"Gdextension பநிஇ இலிருந்து அந்த செயல்பாட்டு சுட்டிகள் ஏற்ற ஒரு செயல்பாடும் உள்ளது."

msgid ""
"Let's work on the source counterpart of this header. Create the ``api.c`` "
"file in the ``src`` folder, adding the following code:"
msgstr ""
"இந்த தலைப்பின் மூல எதிர்ப்பில் வேலை செய்வோம். `` Src`` கோப்புறையில் `` api.c`` கோப்பை "
"உருவாக்கவும், பின்வரும் குறியீட்டைச் சேர்த்துக் கொள்ளுங்கள்:"

msgid ""
"The first important thing here is ``p_get_proc_address``. This a function "
"from the GDExtension API that is passed during initialization. You can use "
"this function to request specific functions from the API by their name. Here "
"we are caching the results so we don't have to keep a reference for "
"``p_get_proc_address`` everywhere and use our wrapper instead."
msgstr ""
"இங்கே முதல் முக்கியமான சேதி `` p_get_proc_address``. இது துவக்கத்தின் போது "
"நிறைவேற்றப்படும் gdextension பநிஇ இலிருந்து ஒரு செயல்பாடு. பநிஇ இலிருந்து "
"குறிப்பிட்ட செயல்பாடுகளை அவற்றின் பெயரால் கோர இந்த செயல்பாட்டைப் பயன்படுத்தலாம். இங்கே "
"நாங்கள் முடிவுகளைத் தேடுகிறோம், எனவே எல்லா இடங்களிலும் `` p_get_proc_address` க்கான "
"குறிப்பை வைத்து அதற்கு பதிலாக எங்கள் ரேப்பரைப் பயன்படுத்த வேண்டியதில்லை."

msgid ""
"At the start we request the ``variant_get_ptr_destructor()`` function. This "
"is not going to be used outside of this function, so we don't add to our "
"wrapper and only cache it locally. The cast is necessary to silence compiler "
"warnings."
msgstr ""
"தொடக்கத்தில் `` variant_get_ptr_destructor () `` செயல்பாட்டைக் கோருகிறோம். இந்த "
"செயல்பாட்டிற்கு வெளியே இது பயன்படுத்தப்படாது, எனவே நாங்கள் எங்கள் ரேப்பரில் சேர்க்க "
"மாட்டோம், அதை உள்நாட்டில் மட்டுமே கேச் செய்யுங்கள். கம்பைலர் எச்சரிக்கைகளை ம silence னமாக்க "
"நடிகர்கள் தேவை."

msgid ""
"Then we get the function that creates a StringName from a C string, exactly "
"what we mentioned before as a needed function. We store that in our "
"``constructors`` struct."
msgstr ""
"ஒரு சி சரத்திலிருந்து ஒரு சரம் பெயரை உருவாக்கும் செயல்பாட்டை நாம் பெறுகிறோம், தேவையான "
"செயல்பாடாக நாம் முன்பு குறிப்பிட்டது. எங்கள் `` கட்டமைப்பாளர்களான` கட்டமைப்பில் நாங்கள் அதை "
"சேமிக்கிறோம்."

msgid ""
"Next, we use the ``variant_get_ptr_destructor()`` function we just got to "
"query for the destructor for StringName, using the enum value from "
"``gdextension_interface.h`` API as a parameter. We could get destructors for "
"other types in a similar manner, but we'll limit ourselves to what is needed "
"for the example."
msgstr ""
"அடுத்து, `` gdextension_interface.h`` பநிஇ இலிருந்து ஒரு அளவுருவாகப் பயன்படுத்த, "
"`` variant_get_ptr_destructor () `` செயல்பாட்டைப் பயன்படுத்துகிறோம். இதேபோன்ற "
"முறையில் மற்ற வகைகளுக்கு அழிப்பாளர்களைப் பெறலாம், ஆனால் எடுத்துக்காட்டுக்கு "
"தேவையானவற்றிற்கு நம்மை மட்டுப்படுத்துவோம்."

msgid ""
"Lastly, we get the ``classdb_register_extension_class2()`` function, which "
"we'll need in order to register our custom class."
msgstr ""
"கடைசியாக, `` classdb_register_extension_class2 () `` செயல்பாட்டைப் பெறுகிறோம், "
"இது எங்கள் தனிப்பயன் வகுப்பை பதிவு செய்ய நமக்குத் தேவைப்படும்."

msgid ""
"You may wonder why the ``2`` is there in the function name. This means it's "
"the second version of this function. The old version is kept to ensure "
"backwards compatibility with older extensions, but since we have the second "
"version available, it's best to use the new one, because we don't intend to "
"support older Godot versions in this example."
msgstr ""
"`` 2`` ஏன் செயல்பாட்டு பெயரில் உள்ளது என்று நீங்கள் ஆச்சரியப்படலாம். இதன் பொருள் இது இந்த "
"செயல்பாட்டின் இரண்டாவது பதிப்பாகும். பழைய பதிப்பு பழைய நீட்டிப்புகளுடன் பின்னோக்கி "
"பொருந்தக்கூடிய தன்மையை உறுதி செய்வதற்காக வைக்கப்படுகிறது, ஆனால் இரண்டாவது பதிப்பு "
"எங்களிடம் இருப்பதால், புதியதைப் பயன்படுத்துவது நல்லது, ஏனென்றால் இந்த எடுத்துக்காட்டில் "
"பழைய கோடோட் பதிப்புகளை ஆதரிக்க நாங்கள் விரும்பவில்லை."

msgid ""
"The ``gdextension_interface.h`` header documents in which Godot version each "
"function was introduced."
msgstr ""
"`` Gdextension_interface.h`` தலைப்பு ஆவணங்கள், இதில் ஒவ்வொரு செயல்பாடும் "
"அறிமுகப்படுத்தப்பட்ட கோடோட் பதிப்பு."

msgid ""
"We also define the ``class_library`` variable here, which will be set during "
"initialization."
msgstr ""
"`` Class_library`` மாறுபாட்டையும் இங்கே வரையறுக்கிறோம், இது துவக்கத்தின் போது "
"அமைக்கப்படும்."

msgid ""
"Speaking of initialization, now we have to change the ``init.c`` file in "
"order to fill the things we just added:"
msgstr ""
"துவக்கத்தைப் பற்றி பேசுகையில், இப்போது நாங்கள் சேர்த்த விசயங்களை நிரப்ப `` init.c`` "
"கோப்பை மாற்ற வேண்டும்:"

msgid ""
"Here we set the ``class_library`` as needed and call our new ``load_api()`` "
"function. Don't forget to also include the new headers at the top of this "
"file:"
msgstr ""
"இங்கே நாங்கள் `` class_library`` ஐ தேவைக்கேற்ப அமைத்து, எங்கள் புதிய `` load_api () "
"`` செயல்பாட்டை அழைக்கிறோம். இந்த கோப்பின் மேலே புதிய தலைப்புகளையும் சேர்க்க மறக்காதீர்கள்:"

msgid ""
"Since we are here, we can register our new custom class. Let's fill the "
"``initialize_gdexample_module()`` function:"
msgstr ""
"நாங்கள் இங்கே இருப்பதால், எங்கள் புதிய தனிப்பயன் வகுப்பை பதிவு செய்யலாம். `` துவக்க_சி "
"டீக்ச்பான்_மோடூல் () `` செயல்பாட்டை நிரப்புவோம்:"

msgid ""
"The struct with the class information is the biggest thing here. None of its "
"fields are required with the exception of ``create_instance_func`` and "
"``free_instance_func``. We haven't made those functions yet, so we'll have "
"to work on them soon. Note that we skip the initialization if it isn't at "
"the ``SCENE`` level. This function may be called multiple times, once for "
"each level, but we only want to register our class once."
msgstr ""
"வர்க்கத் தகவலுடன் கூடிய கட்டமைப்பு இங்கே மிகப்பெரிய சேதி. `` Create_instance_func`` "
"மற்றும் `` free_instance_func`` தவிர அதன் புலங்கள் எதுவும் தேவையில்லை. நாங்கள் இன்னும் "
"அந்த செயல்பாடுகளைச் செய்யவில்லை, எனவே விரைவில் அவற்றைச் செய்ய வேண்டியிருக்கும். துவக்கத்தை "
"`` காட்சி`` மட்டத்தில் இல்லாவிட்டால் அதைத் தவிர்க்கிறோம் என்பதை நினைவில் கொள்க. இந்த "
"செயல்பாடு ஒவ்வொரு நிலைக்கும் ஒரு முறை பல முறை அழைக்கப்படலாம், ஆனால் நாங்கள் எங்கள் "
"வகுப்பை ஒரு முறை மட்டுமே பதிவு செய்ய விரும்புகிறோம்."

msgid ""
"The other undefined thing here is ``StringName``. This will be an opaque "
"struct meant to hold the data of a Godot StringName in our extension. We'll "
"define it in the appropriately named ``defs.h`` file:"
msgstr ""
"இங்கே வரையறுக்கப்படாத மற்ற சேதி `` சரம் பெயர்``. இது எங்கள் நீட்டிப்பில் ஒரு கோடோட் சரம் "
"பெயர் தரவை வைத்திருப்பதற்கான ஒரு ஒளிபுகா கட்டமைப்பாக இருக்கும். சரியான முறையில் "
"பெயரிடப்பட்ட `` defs.h`` கோப்பில் அதை வரையறுப்போம்:"

msgid ""
"As mentioned in the comment, the sizes can be found in the "
"``extension_api.json`` file that we generated earlier, under the "
"``builtin_class_sizes`` property. The ``BUILD_32`` is never defined, as we "
"assume we are working with a 64-bits build of Godot here, but if you need it "
"you can add ``env.Append(CPPDEFINES=[\"BUILD_32\"])`` to your ``SConstruct`` "
"file."
msgstr ""
"கருத்தில் குறிப்பிட்டுள்ளபடி, `` பில்டின்_ கிளாச்_சைச்`` சொத்தின் கீழ், நாங்கள் முன்னர் "
"உருவாக்கிய `` extranse_api.json`` கோப்பில் அளவுகளை காணலாம். `` Bild_32`` "
"ஒருபோதும் வரையறுக்கப்படவில்லை, ஏனெனில் நாங்கள் இங்கே 64-பிட்கள் கோடோட்டுடன் வேலை "
"செய்கிறோம் என்று கருதுகிறோம், ஆனால் உங்களுக்கு தேவைப்பட்டால் `` env.append (cppdefines "
"= [\"Build_32\"]) `` உங்கள் `` ச்கான்ச்ட்ரக்ட்` கோப்பில் சேர்க்கலாம்."

msgid ""
"The ``// Types.`` comment foreshadows that we'll be adding more types to "
"this file. Let's leave that for later."
msgstr ""
"`` // வகைகள் .`` இந்த கோப்பில் நாங்கள் கூடுதல் வகைகளைச் சேர்ப்போம் என்று கருத்து "
"முன்னறிவிக்கிறது. அதை பின்னர் விட்டுவிடுவோம்."

msgid ""
"The ``StringName`` struct here is just to hold Godot data, so we don't "
"really care what is inside of it. Though, in this case, it is just a pointer "
"to the data in the heap. We'll use this struct when we need to allocate data "
"for a StringName ourselves, like we are doing when registering our class."
msgstr ""
"இங்கே `` சரம் பெயர்`` கட்டமைப்பு என்பது கோடோட் தரவை வைத்திருப்பதுதான், எனவே அதன் உள்ளே "
"என்ன இருக்கிறது என்பதை நாங்கள் உண்மையில் பொருட்படுத்தவில்லை. இருப்பினும், இந்த விசயத்தில், "
"இது குவியலில் உள்ள தரவுகளுக்கு ஒரு சுட்டிக்காட்டி மட்டுமே. எங்கள் வகுப்பைப் "
"பதிவுசெய்யும்போது நாங்கள் செய்வது போல, ஒரு சரம் பெயருக்கு தரவை ஒதுக்க வேண்டியிருக்கும் "
"போது இந்த கட்டமைப்பைப் பயன்படுத்துவோம்."

msgid ""
"Back to registering, we need to work on our create and free functions. Let's "
"include them in ``gdexample.h`` since they're specific to the custom class:"
msgstr ""
"பதிவு செய்வதற்குத் திரும்பு, எங்கள் உருவாக்கம் மற்றும் இலவச செயல்பாடுகளில் நாங்கள் பணியாற்ற "
"வேண்டும். தனிப்பயன் வகுப்பிற்கு அவை குறிப்பிட்டவை என்பதால் அவற்றை `` gdexample.h`` இல் "
"சேர்க்கலாம்:"

msgid ""
"Before we can implement those function, we'll need a few more things in our "
"API. We need a way to allocate and free memory. While we could do this with "
"good ol' ``malloc()``, we can instead make use of Godot's memory management "
"functions. We'll also need a way to create a Godot object and set it with "
"our custom instance."
msgstr ""
"அந்த செயல்பாட்டை நாங்கள் செயல்படுத்துவதற்கு முன், எங்கள் பநிஇ இல் இன்னும் சில விசயங்கள் "
"தேவைப்படும். ஒதுக்க மற்றும் இலவச நினைவகம் எங்களுக்கு ஒரு வழி தேவை. நல்ல OL '`` Malloc "
"() `` உடன் இதைச் செய்ய முடியும் என்றாலும், அதற்கு பதிலாக கோடோட்டின் நினைவக மேலாண்மை "
"செயல்பாடுகளைப் பயன்படுத்தலாம். ஒரு கோடோட் பொருளை உருவாக்கி அதை எங்கள் தனிப்பயன் "
"நிகழ்வுடன் அமைக்க எங்களுக்கு ஒரு வழி தேவை."

msgid "So let's change the ``api.h`` to include these new functions:"
msgstr "எனவே இந்த புதிய செயல்பாடுகளைச் சேர்க்க `` api.h`` ஐ மாற்றுவோம்:"

msgid ""
"Then we change the ``load_api()`` function in ``api.c`` to grab these new "
"functions:"
msgstr ""
"இந்த புதிய செயல்பாடுகளைப் பிடிக்க `` load_api () `` செயல்பாட்டை `` api.c`` இல் "
"மாற்றுகிறோம்:"

msgid ""
"Now we can go back to ``gdexample.c`` and define the new functions, without "
"forgetting to include the ``api.h`` header:"
msgstr ""
"இப்போது நாம் மீண்டும் `` gdexample.c`` க்குச் சென்று புதிய செயல்பாடுகளை வரையறுக்கலாம், "
"`` api.h`` தலைப்பைச் சேர்க்க மறக்காமல்:"

msgid ""
"When instantiating an object, first we create a new Sprite2D object, since "
"that's the parent of our class. Then we allocate memory for our custom "
"struct and call its constructor. We save the pointer to the Godot object in "
"the struct as well like we mentioned earlier."
msgstr ""
"ஒரு பொருளை நிறுவும் போது, முதலில் ஒரு புதிய ச்ப்ரைட் 2 டி பொருளை உருவாக்குகிறோம், "
"ஏனெனில் அது எங்கள் வகுப்பின் பெற்றோர். நாங்கள் எங்கள் தனிப்பயன் கட்டமைப்பிற்கு நினைவகத்தை "
"ஒதுக்கி அதன் கட்டமைப்பாளரை அழைக்கிறோம். நாம் முன்பு குறிப்பிட்டதைப் போலவே கட்டமைப்பிலும் "
"உள்ள கோடோட் பொருளுக்கு சுட்டிக்காட்டி சேமிக்கிறோம்."

msgid ""
"Then we set our custom struct as the instance data. This will make Godot "
"know that the object is an instance of our custom class and properly call "
"our custom methods for instance, as well as passing this data back."
msgstr ""
"எங்கள் தனிப்பயன் கட்டமைப்பை நிகழ்வு தரவுகளாக அமைத்துள்ளோம். இது நமது தனிப்பயன் வகுப்பின் "
"ஒரு நிகழ்வு என்பதையும், உதாரணமாக எங்கள் தனிப்பயன் முறைகளை சரியாக அழைப்பதையும், இந்தத் "
"தரவை மீண்டும் அனுப்புவதையும் இது கோடோட் அறிந்து கொள்ளும்."

msgid "Note that we return the Godot object we created, not our custom struct."
msgstr ""
"நாம் உருவாக்கிய கோடோட் பொருளை நாம் திருப்பித் தருகிறோம் என்பதை நினைவில் கொள்க, எங்கள் "
"தனிப்பயன் கட்டமைப்பு அல்ல."

msgid ""
"For the ``gdextension_free_instance()`` function, we only call the "
"destructor and free the memory we allocated for the custom data. It is not "
"necessary to destruct the Godot object since that will be taken care of by "
"the engine itself."
msgstr ""
"`` Gdextension_free_instance () `` செயல்பாட்டிற்கு, நாங்கள் அழிப்பாளரை மட்டுமே "
"அழைத்து தனிப்பயன் தரவுக்கு நாங்கள் ஒதுக்கிய நினைவகத்தை விடுவிக்கிறோம். கோடோட் பொருளை "
"அழிக்க வேண்டிய அவசியமில்லை, ஏனெனில் அது இயந்திரத்தினால் கவனிக்கப்படும்."

msgid "A demo project"
msgstr "ஒரு டெமோ திட்டம்"

msgid ""
"Now that we can create and free our custom object, we should be able to try "
"it out in an actual project. For this, you need to open Godot and create a "
"new project on the ``demo`` folder. The project manager may warn you the "
"folder isn't empty if you have compiled the extension before, you can safely "
"ignore this warning this time."
msgstr ""
"இப்போது நாம் எங்கள் தனிப்பயன் பொருளை உருவாக்கி விடுவிக்க முடியும், உண்மையான திட்டத்தில் "
"அதை முயற்சிக்க முடியும். இதற்காக, நீங்கள் கோடோட்டைத் திறந்து `` டெமோ` கோப்புறையில் ஒரு "
"புதிய திட்டத்தை உருவாக்க வேண்டும். திட்ட மேலாளர் உங்களுக்கு முன்பு நீட்டிப்பைத் "
"தொகுத்திருந்தால் கோப்புறை காலியாக இல்லை என்று எச்சரிக்கலாம், இந்த நேரத்தில் இந்த "
"எச்சரிக்கையை நீங்கள் பாதுகாப்பாக புறக்கணிக்கலாம்."

msgid ""
"If you didn't compile the extension yet, it is the time to do it now. To do "
"that, open a terminal or command prompt, navigate to the root folder of the "
"extension and run ``scons``. It should compile quickly since the extension "
"is very simple."
msgstr ""
"நீங்கள் இன்னும் நீட்டிப்பை தொகுக்கவில்லை என்றால், இப்போது அதைச் செய்ய வேண்டிய நேரம் இது. அதைச் "
"செய்ய, ஒரு முனையம் அல்லது கட்டளை வரியில் திறந்து, நீட்டிப்பின் ரூட் கோப்புறையில் செல்லவும் "
"மற்றும் `` ச்கான்ச்`` ஐ இயக்கவும். நீட்டிப்பு மிகவும் எளிமையானது என்பதால் இது விரைவாக "
"தொகுக்க வேண்டும்."

msgid ""
"Then, create a file called ``gdexample.gdextension`` inside the ``demo`` "
"folder. This is a Godot resource that describes the extension, allowing the "
"engine to properly load it. Put the following content in this file:"
msgstr ""
"பின்னர், `` டெமோ`` கோப்புறையில் `` gdexample.gdextension` என்ற கோப்பை உருவாக்கவும். "
"இது ஒரு கோடோட் வளமாகும், இது நீட்டிப்பை விவரிக்கிறது, இயந்திரத்தை சரியாக ஏற்ற "
"அனுமதிக்கிறது. பின்வரும் உள்ளடக்கத்தை இந்த கோப்பில் வைக்கவும்:"

msgid ""
"As you can see, ``gdexample_library_init()`` is the same name of the "
"function we defined in our ``init.c`` file. It is important that the names "
"match because it is how Godot calls the entry point of the extension."
msgstr ""
"நீங்கள் பார்க்க முடியும் என, `` gdexample_library_init () `` என்பது எங்கள் `init.c`` "
"கோப்பில் வரையறுக்கப்பட்ட செயல்பாட்டின் அதே பெயர். பெயர்கள் பொருந்துவது முதன்மை, ஏனென்றால் "
"கோடோட் நீட்டிப்பின் நுழைவு புள்ளியை எவ்வாறு அழைக்கிறார்."

msgid ""
"We also set the compatibility minimum to 4.2, since we are targeting this "
"version. It should still work on later versions. If you are using a later "
"Godot version and rely on the new features, you need to increase this value "
"to a version number that has everything you use. "
"See :ref:`doc_what_is_gdextension_version_compatibility` for more "
"information."
msgstr ""
"இந்த பதிப்பை நாங்கள் குறிவைப்பதால், பொருந்தக்கூடிய குறைந்தபட்சத்தை 4.2 ஆக அமைத்துள்ளோம். "
"இது இன்னும் பின்னர் பதிப்புகளில் வேலை செய்ய வேண்டும். நீங்கள் பின்னர் கோடோட் பதிப்பைப் "
"பயன்படுத்துகிறீர்கள் மற்றும் புதிய அம்சங்களை நம்பினால், இந்த மதிப்பை நீங்கள் பயன்படுத்தும் "
"அனைத்தையும் கொண்ட பதிப்பு எண்ணுக்கு அதிகரிக்க வேண்டும். காண்க: Ref: "
"`doc_what_is_gdextension_version_compatibility` மேலும் தகவலுக்கு."

msgid ""
"In the ``[libraries]`` section we set up the paths to the shared library on "
"different platforms. Here there's only the debug versions since that's what "
"we are working on for the example. Using :ref:`feature tags "
"<doc_feature_tags>` you can fine tune this to also provide release versions, "
"add more target operating systems, as well as providing 32-bit and 64-bit "
"binaries."
msgstr ""
"`` [நூலகங்கள்] `` பிரிவில், பகிரப்பட்ட நூலகத்திற்கான பாதைகளை வெவ்வேறு தளங்களில் "
"அமைத்தோம். இங்கே பிழைத்திருத்த பதிப்புகள் மட்டுமே உள்ளன, ஏனெனில் அதனால்தான் நாங்கள் "
"எடுத்துக்காட்டாக வேலை செய்கிறோம். பயன்படுத்துதல்: குறிப்பு: `அம்சக் குறிச்சொற்கள் "
"<doc_feature_tags>` வெளியீட்டு பதிப்புகளை வழங்கவும், அதிக இலக்கு இயக்க முறைமைகளைச் "
"சேர்க்கவும், 32-பிட் மற்றும் 64-பிட் பைனரிகளை வழங்கவும் இதை நீங்கள் நன்றாக மாற்றலாம்."

msgid ""
"You can also add library dependencies and custom icons for your classes in "
"this file, but this is out of the scope for this tutorial."
msgstr ""
"இந்த கோப்பில் உங்கள் வகுப்புகளுக்கான நூலக சார்புகள் மற்றும் தனிப்பயன் சின்னங்களையும் நீங்கள் "
"சேர்க்கலாம், ஆனால் இது இந்த டுடோரியலுக்கான எல்லைக்கு அப்பாற்பட்டது."

msgid ""
"After saving the file, go back to the editor. Godot should automatically "
"load the extension. Nothing will be seen because our extension only "
"registers a new class. To use this class add a ``Node2D`` as a root of the "
"scene. Move it to the middle of viewport for better visibility. Then add a "
"new child node to the root and in the **Create New Node** dialog search for "
"\"GDExample\", the name of our class, as it should be listed there. If it "
"isn't, it means that Godot didn't load the extension properly, so try "
"restarting the editor and retrace the steps to see if anything went missing."
msgstr ""
"கோப்பைச் சேமித்த பிறகு, மீண்டும் எடிட்டரிடம் செல்லுங்கள். கோடோட் தானாக நீட்டிப்பை ஏற்ற "
"வேண்டும். எங்கள் நீட்டிப்பு ஒரு புதிய வகுப்பை மட்டுமே பதிவு செய்வதால் எதுவும் "
"பார்க்கப்படாது. இந்த வகுப்பைப் பயன்படுத்த காட்சியின் வேராக `` Node2d`` ஐச் சேர்க்கவும். "
"சிறந்த தெரிவுநிலைக்கு அதை காட்சியமைப்பின் நடுவில் நகர்த்தவும். பின்னர் ஒரு புதிய குழந்தை "
"முனையைச் சேர்த்து, ** புதிய முனை ** உரையாடல் தேடலை \"gdexample\", எங்கள் வகுப்பின் "
"பெயர், அது அங்கு பட்டியலிடப்பட வேண்டும். அது இல்லையென்றால், கோடோட் நீட்டிப்பை சரியாக "
"ஏற்றவில்லை என்று பொருள், எனவே எடிட்டரை மறுதொடக்கம் செய்ய முயற்சிக்கவும், ஏதேனும் காணாமல் "
"போனதா என்பதைப் பார்க்க படிகளைத் திரும்பப் பெறவும்."

msgid ""
"Our custom class is derived from ``Sprite2D``, so it has a **Texture** "
"property in the Inspector. Set this to the ``icon.svg`` file that Godot "
"handily created for us when making the project. Save this scene as "
"``main.tscn`` and run it. You may want to set it as the main scene for "
"convenience."
msgstr ""
"எங்கள் தனிப்பயன் வகுப்பு `` ச்ப்ரைட் 2 டி`` இலிருந்து பெறப்பட்டது, எனவே இது இன்ச்பெக்டரில் "
"** அமைப்பு ** சொத்து உள்ளது. இதை திட்டத்தை உருவாக்கும் போது கோடோட் நமக்காக உருவாக்கிய "
"`` ஐகான்.ச்விசி`` கோப்பாக இதை அமைக்கவும். இந்த காட்சியை `` main.tscn`` என சேமித்து "
"இயக்கவும். வசதிக்காக இதை முக்கிய காட்சியாக அமைக்க விரும்பலாம்."

msgid ""
"Voilà! We have a custom node running in Godot. However, it does not do "
"anything and has nothing different than a regular ``Sprite2D`` node. We will "
"fix that next by adding custom methods and properties."
msgstr ""
"Voilà! கோடோட்டில் தனிப்பயன் முனை இயங்கும். இருப்பினும், இது எதையும் செய்யாது மற்றும் "
"வழக்கமான `` ச்ப்ரைட் 2 டி`` முனையை விட வித்தியாசமாக எதுவும் இல்லை. தனிப்பயன் முறைகள் "
"மற்றும் பண்புகளைச் சேர்ப்பதன் மூலம் அதை அடுத்ததாக சரிசெய்வோம்."

msgid "Custom methods"
msgstr "தனிப்பயன் முறைகள்"

msgid ""
"A common thing in extensions is creating methods for the custom classes and "
"exposing those to the Godot API. We are going to create a couple of getters "
"and setters which are need for binding the properties afterwards."
msgstr ""
"நீட்டிப்புகளில் ஒரு பொதுவான சேதி தனிப்பயன் வகுப்புகளுக்கான முறைகளை உருவாக்குவதும், "
"கோடோட் ஏபிஐக்கு வெளிப்படுத்துவதும் ஆகும். பண்புகளை பிணைக்க வேண்டிய இரண்டு பெறுநர்கள் "
"மற்றும் செட்டர்களை நாங்கள் உருவாக்கப் போகிறோம்."

msgid ""
"First, let's add the new fields in our struct to hold the values for "
"``amplitude`` and ``speed``, which we will use later on when creating the "
"behavior for the node. Add them to the ``gdexample.h`` file, changing the "
"``GDExample`` struct:"
msgstr ""
"முதலாவதாக, `` அலைவீச்சு`` மற்றும் `ச்பீட்`` ஆகியவற்றிற்கான மதிப்புகளை வைத்திருக்க எங்கள் "
"கட்டமைப்பில் புதிய புலங்களைச் சேர்ப்போம், இது முனைக்கான நடத்தையை உருவாக்கும்போது பின்னர் "
"பயன்படுத்துவோம். அவற்றை `` gdexample.h`` கோப்பில் சேர்க்கவும், `` gdexample`` "
"கட்டமைப்பை மாற்றவும்:"

msgid ""
"In the same file, add the declaration for the getters and setters, right "
"after the destructor."
msgstr ""
"அதே கோப்பில், அழிப்பாளருக்குப் பிறகு, பெறுநர்கள் மற்றும் செட்டர்களுக்கான அறிவிப்பைச் "
"சேர்க்கவும்."

msgid ""
"To make those simple functions work when called by Godot, we will need some "
"wrappers to help us properly convert the data to and from the engine."
msgstr ""
"கோடோட் அழைக்கப்படும்போது அந்த எளிய செயல்பாடுகளைச் செயல்படுத்த, தரவை இயந்திரத்திற்கு "
"மற்றும் இருந்து சரியாக மாற்ற எங்களுக்கு உதவ சில ரேப்பர்கள் தேவைப்படும்."

msgid ""
"First, we will create wrappers for ``ptrcall``. This is what Godot uses when "
"the types of the values are known to be exact, which avoids using Variant. "
"We're gonna need two of those: one for the functions that take no arguments "
"and return a ``double`` (for the getters) and another for the functions that "
"take a single ``double`` argument and return nothing (for the setters)."
msgstr ""
"முதலில், `` ptrcall`` க்காக ரேப்பர்களை உருவாக்குவோம். மதிப்புகளின் வகைகள் துல்லியமாக "
"அறியப்படும்போது கோடோட் இதைப் பயன்படுத்துகிறது, இது மாறுபாட்டைப் பயன்படுத்துவதைத் "
"தவிர்க்கிறது. அவற்றில் இரண்டு நமக்குத் தேவைப்படும்: ஒன்று எந்த வாதங்களையும் எடுக்காத "
"செயல்பாடுகளுக்கு மற்றும் ஒரு `` இரட்டை`` (பெறுநர்களுக்கு) திருப்பித் தரும், மற்றொன்று "
"ஒரு `` இரட்டை`` வாதத்தை எடுத்து ஒன்றும் (செட்டர்களுக்காக) திருப்பித் தரும் "
"செயல்பாடுகளுக்கு."

msgid "Add the declarations to the ``api.h`` file:"
msgstr "அறிவிப்புகளை `` api.h`` கோப்பில் சேர்க்கவும்:"

msgid ""
"Those two functions follow the ``GDExtensionClassMethodPtrCall`` type, as "
"defined in the ``gdextension_interface.h``. We use ``float`` as a name here "
"because in Godot the ``float`` type has double precision, so we keep this "
"convention."
msgstr ""
"அந்த இரண்டு செயல்பாடுகளும் `` gdextension_interface.h`` இல் வரையறுக்கப்பட்டுள்ளபடி `` "
"gdextensionsclassmethodptrcall` `வகையைப் பின்பற்றுகின்றன. நாங்கள் இங்கே ஒரு பெயராக "
"`` மிதவை`` ஐப் பயன்படுத்துகிறோம், ஏனெனில் கோடோட்டில் `` மிதவை`` வகை இரட்டை "
"துல்லியத்தைக் கொண்டுள்ளது, எனவே இந்த மாநாட்டை நாங்கள் வைத்திருக்கிறோம்."

msgid "Then we implement those functions in the ``api.c`` file:"
msgstr "அந்த செயல்பாடுகளை `` api.c`` கோப்பில் செயல்படுத்துகிறோம்:"

msgid ""
"The ``method_userdata`` argument is a custom value that we give to Godot, in "
"this case we will set as the function pointer for the one we want to call. "
"So first we convert it to the function type, then we just call it by passing "
"the arguments when needed, or setting the return value."
msgstr ""
"`` Method_userdata`` உரையாடல் நாம் கோடோட்டுக்கு வழங்கும் தனிப்பயன் மதிப்பாகும், இந்த "
"விசயத்தில் நாம் அழைக்க விரும்பும் ஒன்றிற்கான செயல்பாட்டு சுட்டிக்காட்டி என்று அமைப்போம். "
"எனவே முதலில் நாம் அதை செயல்பாட்டு வகைக்கு மாற்றுவோம், பின்னர் தேவைப்படும்போது வாதங்களை "
"அனுப்புவதன் மூலமோ அல்லது வருவாய் மதிப்பை அமைப்பதன் மூலமோ அதை அழைக்கிறோம்."

msgid ""
"The ``p_instance`` argument contains the custom instance of our class, which "
"we gave with ``object_set_instance()`` when creating the object."
msgstr ""
"`` P_instance`` வாதத்தில் எங்கள் வகுப்பின் தனிப்பயன் நிகழ்வு உள்ளது, இது பொருளை "
"உருவாக்கும் போது `` object_set_instance () `` உடன் கொடுத்தோம்."

msgid ""
"``p_args`` is an array of arguments. Note this contains **pointers** to the "
"values. That's why we dereference it when passing to our functions. The "
"number of arguments will be declared when binding the function (which we "
"will do soon) and it will always include default ones if those exist."
msgstr ""
"`` p_args`` என்பது வாதங்களின் வரிசை. இது மதிப்புகளுக்கு ** சுட்டிகள் ** ஐக் "
"கொண்டுள்ளது என்பதை நினைவில் கொள்க. அதனால்தான் எங்கள் செயல்பாடுகளுக்கு செல்லும்போது அதைத் "
"தவிர்க்கிறோம். செயல்பாட்டை பிணைக்கும்போது வாதங்களின் எண்ணிக்கை அறிவிக்கப்படும் (நாங்கள் "
"விரைவில் செய்வோம்) மற்றும் அவை இருந்தால் இயல்புநிலைகள் எப்போதும் இருக்கும்."

msgid ""
"Finally, the ``r_ret`` is a pointer to the variable where the return value "
"needs to be set. Like the arguments, it will be the correct type as "
"declared. For the function that does not return, we have to avoid setting it."
msgstr ""
"இறுதியாக, `` r_ret`` என்பது திரும்ப மதிப்பை அமைக்க வேண்டிய மாறிக்கு ஒரு "
"சுட்டிக்காட்டி ஆகும். வாதங்களைப் போலவே, இது அறிவிக்கப்பட்ட சரியான வகையாக இருக்கும். "
"திரும்பாத செயல்பாட்டிற்கு, அதை அமைப்பதை நாம் தவிர்க்க வேண்டும்."

msgid ""
"Note how the type and argument counts are exact, so if we needed different "
"types, for example, we would have to create more wrappers. This could be "
"automated using some code generation, but this is out of the scope for this "
"tutorial."
msgstr ""
"வகை மற்றும் வாத எண்ணிக்கைகள் எவ்வாறு துல்லியமாக இருக்கின்றன என்பதைக் கவனியுங்கள், எனவே "
"எங்களுக்கு வெவ்வேறு வகைகள் தேவைப்பட்டால், எடுத்துக்காட்டாக, நாம் அதிக ரேப்பர்களை உருவாக்க "
"வேண்டும். இது சில குறியீடு தலைமுறையைப் பயன்படுத்தி தானியங்கி செய்யப்படலாம், ஆனால் இது "
"இந்த டுடோரியலுக்கான எல்லைக்கு அப்பாற்பட்டது."

msgid ""
"While the ``ptrcall`` functions are used when types are exact, sometimes "
"Godot cannot know if that's the case (when the call comes from a dynamically "
"typed language, such as GDScript). In those situations it uses regular "
"``call`` functions, so we need to provide those as well when binding."
msgstr ""
"வகைகள் துல்லியமாக இருக்கும்போது `` ptrcall`` செயல்பாடுகள் பயன்படுத்தப்படுகின்றன, சில "
"சமயங்களில் கோடோட் அப்படித்தான் என்பதை அறிய முடியாது (அழைப்பு GDSCRIPT போன்ற மாறும் "
"தட்டச்சு செய்யப்பட்ட மொழியிலிருந்து வரும்போது). அந்த சூழ்நிலைகளில் இது வழக்கமான `` "
"அழைப்பு`` செயல்பாடுகளைப் பயன்படுத்துகிறது, எனவே பிணைக்கும்போது அவற்றையும் வழங்க வேண்டும்."

msgid "Let's create two new wrappers in the ``api.h`` file:"
msgstr "`` Api.h`` கோப்பில் இரண்டு புதிய ரேப்பர்களை உருவாக்குவோம்:"

msgid ""
"These follow the ``GDExtensionClassMethodCall`` type, which is a bit "
"different. First, you receive pointers to Variants instead of exact types. "
"There's also the amount of arguments and an error struct that you can set if "
"something goes wrong."
msgstr ""
"இவை `` gdextensionsclassmethodcall`` வகையைப் பின்பற்றுகின்றன, இது சற்று "
"வித்தியாசமானது. முதலில், நீங்கள் சரியான வகைகளுக்கு பதிலாக மாறுபாடுகளுக்கு சுட்டிகளைப் "
"பெறுவீர்கள். ஏதேனும் தவறு நடந்தால் நீங்கள் அமைக்கக்கூடிய வாதங்களின் அளவு மற்றும் பிழை "
"கட்டமைப்பும் உள்ளது."

msgid ""
"In order to check the type and also extract interact with Variant, we will "
"need a few more functions from the GDExtension API. So let's expand our "
"wrapper structs:"
msgstr ""
"வகையைச் சரிபார்க்கவும், மாறுபாட்டுடன் தொடர்பு கொள்ளவும், gdextension பநிஇ இலிருந்து "
"இன்னும் சில செயல்பாடுகள் தேவைப்படும். எனவே எங்கள் ரேப்பர் கட்டமைப்புகளை விரிவுபடுத்துவோம்:"

msgid ""
"The names say all about what those do. We have a couple of constructors to "
"create and extract a floating point value to and from a Variant. We also "
"have a couple of helpers to actually get those constructors, as well as a "
"function to find out the type of a Variant."
msgstr ""
"பெயர்கள் என்ன செய்கின்றன என்பதைப் பற்றி கூறுகின்றன. ஒரு மாறுபாட்டிலிருந்து ஒரு மிதக்கும் "
"புள்ளி மதிப்பை உருவாக்கி பிரித்தெடுக்க இரண்டு கட்டமைப்பாளர்கள் எங்களிடம் உள்ளனர். அந்த "
"கட்டமைப்பாளர்களைப் பெறுவதற்கு எங்களிடம் இரண்டு உதவியாளர்களும் உள்ளனர், அதே போல் ஒரு "
"மாறுபாட்டின் வகையைக் கண்டறிய ஒரு செயல்பாடும் உள்ளது."

msgid ""
"Let's get those from the API, like we did before, by changing the "
"``load_api()`` function in the ``api.c`` file:"
msgstr ""
"`` Api.c`` கோப்பில் `` load_api () `` செயல்பாட்டை மாற்றுவதன் மூலம், நாங்கள் முன்பு "
"செய்ததைப் போலவே பநிஇ இலிருந்து பெறுவோம்:"

msgid ""
"Now that we have these set, we can implement our call wrappers in the same "
"file:"
msgstr ""
"இப்போது எங்களிடம் இந்த தொகுப்பு உள்ளது, எங்கள் அழைப்பு ரேப்பர்களை ஒரே கோப்பில் "
"செயல்படுத்தலாம்:"

msgid ""
"These functions are a bit longer but easy to follow. First they check if the "
"argument count is as expected and if not they set the error struct and "
"return. For the one that has one parameter, it also checks if the argument "
"type is correct. This is important because mismatched types when extracting "
"from Variant can cause crashes."
msgstr ""
"இந்த செயல்பாடுகள் சற்று நீளமானது, ஆனால் பின்பற்ற எளிதானது. முதலில் அவர்கள் வாத எண்ணிக்கை "
"எதிர்பார்த்தபடி இருக்கிறதா என்று சரிபார்க்கிறார்கள், இல்லையென்றால் அவை பிழை கட்டமைப்பை "
"அமைத்து திரும்புகின்றன. ஒரு அளவுருவைக் கொண்ட ஒன்றிற்கு, வாத வகை சரியானதா என்பதையும் "
"இது சரிபார்க்கிறது. இது முக்கியமானது, ஏனென்றால் மாறுபாட்டிலிருந்து பிரித்தெடுக்கும் "
"போது பொருந்தாத வகைகள் செயலிழப்புகளை ஏற்படுத்தும்."

msgid ""
"Then it proceeds to extract the argument using the constructor we setup "
"before. The one with no arguments instead sets the return value after "
"calling the function. Note how they use a pointer to a ``double`` variable, "
"since this is what those constructors expect."
msgstr ""
"நாங்கள் முன்பு அமைக்கும் கட்டமைப்பாளரைப் பயன்படுத்தி வாதத்தை பிரித்தெடுக்க இது தொடர்கிறது. "
"எந்தவொரு வாதமும் இல்லாத ஒன்று, செயல்பாட்டை அழைத்த பிறகு வருவாய் மதிப்பை அமைக்கிறது. "
"ஒரு `` இரட்டை`` மாறிக்கு அவர்கள் ஒரு சுட்டிக்காட்டி எவ்வாறு பயன்படுத்துகிறார்கள் என்பதைக் "
"கவனியுங்கள், ஏனெனில் அந்த கட்டமைப்பாளர்கள் எதிர்பார்க்கிறார்கள்."

msgid ""
"Before we can actually bind our methods, we need a way to create "
"``GDExtensionPropertyInfo`` instances. While we could do them inside the "
"binding functions that we'll implement afterwards, it's easier to have a "
"helper for it since we'll need it multiple times, including for when we bind "
"properties."
msgstr ""
"எங்கள் முறைகளை உண்மையில் பிணைப்பதற்கு முன், `` gdextensionpropertyinfo`` நிகழ்வுகளை "
"உருவாக்க எங்களுக்கு ஒரு வழி தேவை. நாங்கள் செயல்படுத்தும் பிணைப்பு செயல்பாடுகளுக்குள் "
"அவற்றைச் செய்ய முடியும் என்றாலும், அதற்கான உதவியாளரைப் பெறுவது எளிதானது, ஏனென்றால் நாம் "
"பண்புகளை பிணைக்கும்போது உட்பட பல முறை நமக்குத் தேவைப்படும்."

msgid "Let's create these two functions in the ``api.h`` file:"
msgstr "இந்த இரண்டு செயல்பாடுகளையும் `` api.h`` கோப்பில் உருவாக்குவோம்:"

msgid ""
"The first one is a simplified version of the second since we usually don't "
"need all the arguments for the property and are okay with the defaults. Then "
"we also have a function to destruct the PropertyInfo since we need to create "
"Strings and StringNames that need to be properly disposed of."
msgstr ""
"முதலாவது இரண்டாவது ஒரு எளிமைப்படுத்தப்பட்ட பதிப்பாகும், ஏனெனில் எங்களுக்கு வழக்கமாக "
"சொத்துக்கான அனைத்து வாதங்களும் தேவையில்லை, இயல்புநிலைகளுடன் சரி. சொத்துஇன்ஃபோவை அழிக்க "
"ஒரு செயல்பாடும் எங்களிடம் உள்ளது, ஏனெனில் நாம் சரியாக அகற்றப்பட வேண்டிய சரங்களையும் சரம் "
"பெயர்களையும் உருவாக்க வேண்டும்."

msgid ""
"Speaking of which, we also need a way to create and destruct Strings, so "
"we'll make an addition to existing structs in this same file. We'll also get "
"a new API function for actually binding our custom method."
msgstr ""
"இதைப் பற்றி பேசும்போது, சரங்களை உருவாக்குவதற்கும் அழிப்பதற்கும் எங்களுக்கு ஒரு வழியும் "
"தேவை, எனவே இதே கோப்பில் இருக்கும் கட்டமைப்புகளுக்கு கூடுதலாகச் செய்வோம். எங்கள் தனிப்பயன் "
"முறையை உண்மையில் பிணைப்பதற்கான புதிய பநிஇ செயல்பாட்டையும் பெறுவோம்."

msgid ""
"Before implementing those, let's do a quick stop in the ``defs.h`` file and "
"include the size of the ``String`` type and a couple of enums:"
msgstr ""
"அவற்றை செயல்படுத்துவதற்கு முன், `` defs.h`` கோப்பில் விரைவான நிறுத்தத்தை செய்வோம், "
"மேலும் `` சரம்`` வகை மற்றும் ஓரிரு எண்ணிகள் இன் அளவைச் சேர்ப்போம்:"

msgid ""
"While it's the same size as ``StringName``, it is more clear to use a "
"different name for it."
msgstr ""
"இது `` சரம் பெயர்`` அதே அளவு என்றாலும், அதற்கு வேறு பெயரைப் பயன்படுத்துவது மிகவும் "
"தெளிவாக உள்ளது."

msgid ""
"The enums here are just helpers to give names to the numbers they represent. "
"The information about them is present in the ``extension_api.json`` file. "
"Here we just set up the ones we need for the tutorial, to keep it more "
"concise."
msgstr ""
"இங்குள்ள எண்ணிகள் அவர்கள் பிரதிநிதித்துவப்படுத்தும் எண்களுக்கு பெயர்களைக் கொடுப்பதற்கான "
"உதவியாளர்கள். அவற்றைப் பற்றிய தகவல்கள் `` extranty_api.json`` கோப்பில் உள்ளன. அதை "
"இன்னும் சுருக்கமாக வைத்திருக்க, டுடோரியலுக்குத் தேவையானவற்றை இங்கே அமைத்துள்ளோம்."

msgid ""
"Going now to the ``api.c``, we need to load the pointers to the new "
"functions we added to the API."
msgstr ""
"இப்போது `` API.C`` க்குச் செல்லும்போது, நாங்கள் பநிஇ இல் சேர்த்த புதிய செயல்பாடுகளுக்கு "
"சுட்டிகளை ஏற்ற வேண்டும்."

msgid ""
"Then we can also implement the functions to create the ``PropertyInfo`` "
"struct."
msgstr "`` Propertyinfo`` கட்டமைப்பை உருவாக்க செயல்பாடுகளையும் செயல்படுத்தலாம்."

msgid ""
"The simple version of ``make_property()`` just calls the more complete one "
"with a some default arguments. What those values mean exactly is out of the "
"scope of this tutorial, check the page about the :ref:`Object class "
"<doc_object_class>` for more details about binding methods and properties."
msgstr ""
"`` Make_property () `` இன் எளிய பதிப்பு சில இயல்புநிலை வாதங்களுடன் முழுமையான ஒன்றை "
"அழைக்கிறது. அந்த மதிப்புகள் எதைக் குறிக்கின்றன என்பது இந்த டுடோரியலின் எல்லைக்கு வெளியே "
"உள்ளது, இது பற்றிய பக்கத்தை சரிபார்க்கவும்: குறிப்பு: `பொருள் வகுப்பு "
"<doc_object_class>` பிணைப்பு முறைகள் மற்றும் பண்புகள் பற்றிய கூடுதல் விவரங்களுக்கு."

msgid ""
"The complete version is more involved. First, it creates ``String``'s and "
"``StringName``'s for the needed fields, by allocating memory and calling "
"their constructors. Then it creates a ``GDExtensionPropertyInfo`` struct and "
"sets all the fields with the arguments provided. Finally it returns this "
"created struct."
msgstr ""
"முழுமையான பதிப்பு அதிக ஈடுபாடு கொண்டது. முதலாவதாக, இது `` சரம்` `மற்றும்` "
"`ச்ட்ரிங்நேம்`` ஐ உருவாக்குகிறது, தேவையான புலங்களுக்காக, நினைவகத்தை ஒதுக்கி அவற்றின் "
"கட்டமைப்பாளர்களை அழைப்பதன் மூலம். பின்னர் அது ஒரு `` gdextensionspropertyinfo`` "
"கட்டமைப்பை உருவாக்கி, வழங்கப்பட்ட வாதங்களுடன் அனைத்து துறைகளையும் அமைக்கிறது. இறுதியாக "
"இது உருவாக்கப்பட்ட கட்டமைப்பை வழங்குகிறது."

msgid ""
"The ``destruct_property()`` function is straightforward, it simply calls the "
"destructors for the created objects and frees their allocated memory."
msgstr ""
"`` Ursounce_property () `` செயல்பாடு நேரடியானது, இது உருவாக்கப்பட்ட பொருள்களுக்கு "
"அழிப்பவர்களை அழைக்கிறது மற்றும் அவை ஒதுக்கப்பட்ட நினைவகத்தை விடுவிக்கிறது."

msgid ""
"Let's go back again to the header ``api.h`` to create the functions that "
"will actually bind the methods:"
msgstr ""
"முறைகளை பிணைக்கும் செயல்பாடுகளை உருவாக்க `` api.h`` என்ற தலைப்புக்கு மீண்டும் செல்லலாம்:"

msgid "Then switch back to the ``api.c`` file to implement these:"
msgstr "இவற்றைச் செயல்படுத்த `` api.c`` கோப்புக்கு திரும்பவும்:"

msgid ""
"Both functions are very similar. First, they create a ``StringName`` with "
"the method name. This is created in the stack since we don't need to keep it "
"after the function ends. Then they create local variables to hold the "
"``call_func`` and ``ptrcall_func``, pointing to the helper functions we "
"defined earlier."
msgstr ""
"இரண்டு செயல்பாடுகளும் மிகவும் ஒத்தவை. முதலில், அவை முறை பெயருடன் `` சரம் பெயர்` "
"உருவாக்குகின்றன. செயல்பாடு முடிந்தபின் அதை வைத்திருக்க தேவையில்லை என்பதால் இது அடுக்கில் "
"உருவாக்கப்பட்டது. பின்னர் அவை `` kall_func`` மற்றும் `` ptrcall_func`` ஆகியவற்றை "
"வைத்திருக்க உள்ளக மாறிகளை உருவாக்குகின்றன, இது நாங்கள் முன்னர் வரையறுத்த உதவி "
"செயல்பாடுகளை சுட்டிக்காட்டுகிறது."

msgid ""
"In the next step they diverge a bit. The first one creates a property for "
"the return value, which has an empty name since it's not needed. The other "
"creates an array of properties for the arguments, which in this case has a "
"single element. This one also has an array of metadata, which can be used if "
"there's something special about the argument (e.g. if an ``int`` value is 32 "
"bits long instead of the default of 64 bits)."
msgstr ""
"அடுத்த கட்டத்தில் அவை கொஞ்சம் வேறுபடுகின்றன. முதலாவது வருவாய் மதிப்புக்கு ஒரு சொத்தை "
"உருவாக்குகிறது, இது தேவையில்லை என்பதால் வெற்று பெயரைக் கொண்டுள்ளது. மற்றொன்று "
"வாதங்களுக்கான பண்புகளின் வரிசையை உருவாக்குகிறது, இந்த விசயத்தில் ஒரு உறுப்பு உள்ளது. "
"இது மெட்டாடேட்டாவின் வரிசையையும் கொண்டுள்ளது, இது வாதத்தில் ஏதேனும் சிறப்பு இருந்தால் "
"பயன்படுத்தப்படலாம் (எ.கா. 64 பிட்களின் இயல்புநிலைக்கு பதிலாக ஒரு `` இன்ட்`` மதிப்பு 32 "
"பிட்கள் நீளமாக இருந்தால்)."

msgid ""
"Afterwards, they create the ``GDExtensionClassMethodInfo`` with the required "
"fields for each case. Then they make a ``StringName`` for the class name, in "
"order to associate the method with the class. Next, they call the API "
"function to actually bind this method to the class. Finally, we destruct the "
"objects we created since they aren't needed anymore."
msgstr ""
"பின்னர், அவை ஒவ்வொரு வழக்குக்கும் தேவையான புலங்களுடன் `` "
"gdextensionsclassmethodinfo`` ஐ உருவாக்குகின்றன. வகுப்போடு முறையை "
"தொடர்புபடுத்துவதற்காக, வகுப்பு பெயருக்கு அவர்கள் `` சரம் பெயர்`` உருவாக்குகிறார்கள். "
"அடுத்து, இந்த முறையை உண்மையில் வகுப்போடு பிணைக்க அவர்கள் பநிஇ செயல்பாட்டை அழைக்கிறார்கள். "
"இறுதியாக, நாங்கள் உருவாக்கிய பொருள்களை இனி தேவையில்லை என்பதால் அவற்றை அழிக்கிறோம்."

msgid ""
"The bind helpers here use the call helpers we created earlier, so do note "
"that those call helpers only accept the Godot ``FLOAT`` type (which is "
"equivalent to ``double`` in C). If you intend to use this for other types, "
"you would need to check the type of the arguments and return type and select "
"an appropriate function callback. This is avoided here only to keep the "
"example from becoming even longer."
msgstr ""
"இங்குள்ள பிணைப்பு உதவியாளர்கள் நாங்கள் முன்பு உருவாக்கிய அழைப்பு உதவியாளர்களைப் "
"பயன்படுத்துகிறார்கள், எனவே அந்த அழைப்பு உதவியாளர்கள் கோடோட்டை மட்டுமே ஏற்றுக்கொள்கிறார்கள் "
"`` மிதவை`` வகையை (இது சி இல் `` இரட்டை`` க்கு சமம்). நீங்கள் இதை மற்ற வகைகளுக்கு "
"பயன்படுத்த விரும்பினால், நீங்கள் வாதங்களின் வகையைச் சரிபார்த்து, திரும்பும் வகையைத் திரும்பப் "
"பெற வேண்டும் மற்றும் பொருத்தமான செயல்பாட்டு கால்பேக்கைத் தேர்ந்தெடுக்க வேண்டும். உதாரணத்தை "
"இன்னும் நீளமாக மாற்றாமல் இருக்க இது இங்கே தவிர்க்கப்படுகிறது."

msgid ""
"Now that we have the means to bind methods, we can actually do so in our "
"custom class. Go to the ``gdexample.c`` file and fill up the "
"``gdexample_class_bind_methods()`` function:"
msgstr ""
"இப்போது முறைகளை பிணைப்பதற்கான வழிமுறைகள் எங்களிடம் உள்ளன, உண்மையில் நம் தனிப்பயன் "
"வகுப்பில் அவ்வாறு செய்யலாம். `` Gdexample.c`` கோப்புக்குச் சென்று `` "
"gdexample_class_bind_methods () `` செயல்பாடு:"

msgid ""
"Since this function is already being called by the initialization process, "
"we can stop here. This function is much more straightforward after we "
"created all the infrastructure to make this work. You can see that "
"implementing the binding functions inline here would take some space and "
"also be quite repetitive. This also makes it easier to add another method in "
"the future."
msgstr ""
"இந்த செயல்பாடு ஏற்கனவே துவக்க செயல்முறையால் அழைக்கப்படுவதால், நாம் இங்கே நிறுத்தலாம். இந்த "
"வேலையைச் செய்ய நாங்கள் அனைத்து உள்கட்டமைப்புகளையும் உருவாக்கிய பிறகு இந்த செயல்பாடு "
"மிகவும் நேரடியானது. பிணைப்பு செயல்பாடுகளை இங்கே செயல்படுத்துவது சில இடங்களை எடுக்கும் "
"என்பதையும், மறுநிகழ்வு இருக்கும் என்பதையும் நீங்கள் காணலாம். இது எதிர்காலத்தில் மற்றொரு "
"முறையைச் சேர்ப்பதை எளிதாக்குகிறது."

msgid ""
"If you compile the code and reopen the demo project, nothing will be "
"different at first, since we only added two new methods. To ensure those are "
"registered properly, you can search for ``GDExample`` in the editor help and "
"verify they are present in the documentation page."
msgstr ""
"நீங்கள் குறியீட்டைத் தொகுத்து டெமோ திட்டத்தை மீண்டும் திறந்தால், நாங்கள் இரண்டு புதிய முறைகளை "
"மட்டுமே சேர்த்துள்ளதால், முதலில் எதுவும் வித்தியாசமாக இருக்காது. அவை சரியாக பதிவு "
"செய்யப்பட்டுள்ளதா என்பதை உறுதிப்படுத்த, நீங்கள் எடிட்டர் உதவியில் `` gdexample`` ஐத் "
"தேடலாம் மற்றும் அவை ஆவணப்படுத்தல் பக்கத்தில் உள்ளன என்பதை சரிபார்க்கலாம்."

msgid "Custom properties"
msgstr "தனிப்பயன் பண்புகள்"

msgid ""
"Since we now have the getter and setter for our properties already bound, we "
"can move forward to create actual properties that will be displayed in the "
"Godot editor inspector."
msgstr ""
"ஏற்கனவே எங்கள் பண்புகளுக்கான பெறுநர் மற்றும் செட்டர் இப்போது இருப்பதால், கோடோட் எடிட்டர் "
"இன்ச்பெக்டரில் காண்பிக்கப்படும் உண்மையான பண்புகளை உருவாக்க நாம் முன்னேறலாம்."

msgid ""
"Given our extensive setup in the previous section, there are only a few "
"things needed to enable us to bind properties. First, let's get a new API "
"function in the ``api.h`` file:"
msgstr ""
"முந்தைய பிரிவில் எங்கள் விரிவான அமைப்பைக் கருத்தில் கொண்டு, பண்புகளை பிணைக்க எங்களுக்கு "
"உதவ சில விசயங்கள் மட்டுமே தேவை. முதலில், `` api.h`` கோப்பில் புதிய பநிஇ செயல்பாட்டைப் "
"பெறுவோம்:"

msgid "Let's also declare a function here to bind properties:"
msgstr "பண்புகளை பிணைக்க இங்கே ஒரு செயல்பாட்டையும் அறிவிப்போம்:"

msgid "In the ``api.c`` file, we can load the new API function:"
msgstr "`` Api.c`` கோப்பில், புதிய பநிஇ செயல்பாட்டை ஏற்றலாம்:"

msgid "Then we can implement our new helper function in this same file:"
msgstr "இதே கோப்பில் எங்கள் புதிய உதவி செயல்பாட்டை செயல்படுத்தலாம்:"

msgid ""
"This function is similar to the one for binding methods. The main difference "
"is that we don't need an extra struct since we can simply use the "
"``GDExtensionPropertyInfo`` that is created by our helper function, so it's "
"more straightforward. It only creates the ``StringName`` values from the C "
"strings, creates a property info struct using our helper, calls the API "
"function to register the property in the class and then destructs all the "
"objects we created."
msgstr ""
"இந்த செயல்பாடு பிணைப்பு முறைகளுக்கு ஒத்ததாகும். முக்கிய வேறுபாடு என்னவென்றால், "
"எங்களுக்கு கூடுதல் கட்டமைப்பு தேவையில்லை, ஏனெனில் எங்கள் உதவி செயல்பாட்டால் உருவாக்கப்பட்ட "
"`` gdextensionspropertyinfo`` ஐப் பயன்படுத்தலாம், எனவே இது மிகவும் நேரடியானது. "
"இது சி சரங்களிலிருந்து `` சரம் பெயர்`` மதிப்புகளை மட்டுமே உருவாக்குகிறது, எங்கள் "
"உதவியாளரைப் பயன்படுத்தி ஒரு சொத்து செய்தி கட்டமைப்பை உருவாக்குகிறது, வகுப்பில் உள்ள "
"சொத்தை பதிவு செய்ய பநிஇ செயல்பாட்டை அழைக்கிறது, பின்னர் நாங்கள் உருவாக்கிய அனைத்து "
"பொருட்களையும் அழிக்கிறது."

msgid ""
"With this done, we can extend the ``gdexample_class_bind_methods()`` "
"function in the ``gdexample.c`` file:"
msgstr ""
"இது முடிந்தால், `` gdexample.c`` கோப்பில் `` gdexample_class_bind_methods () "
"`செயல்பாட்டை நீட்டிக்க முடியும்:"

msgid ""
"If you build the extension with ``scons``, you'll see in the Godot editor "
"the new property shown not only on the documentation page for the custom "
"class but also in the Inspector dock when the ``GDExample`` node is selected."
msgstr ""
"`` ச்கான்ச்`` உடன் நீட்டிப்பை உருவாக்கினால், தனிப்பயன் வகுப்பிற்கான ஆவணங்கள் பக்கத்தில் "
"மட்டுமல்லாமல், `` gdexample`` முனை தேர்ந்தெடுக்கப்பட்டால் இன்ச்பெக்டர் கப்பல்துறையிலும் "
"காட்டப்பட்டுள்ள புதிய சொத்தை கோடோட் எடிட்டரில் காண்பீர்கள்."

msgid "Binding virtual methods"
msgstr "மெய்நிகர் முறைகளை பிணைக்கிறது"

msgid ""
"Our custom node now has properties to influence how it operates, but it "
"still doesn't do anything. In this section, we will bind the virtual "
"method :ref:`_process() <class_Node_private_method__process>` and make our "
"custom sprite move a little bit."
msgstr ""
"எங்கள் தனிப்பயன் முனை இப்போது அது எவ்வாறு இயங்குகிறது என்பதைப் பாதிக்கும் பண்புகள் உள்ளன, "
"ஆனால் அது இன்னும் எதுவும் செய்யவில்லை. இந்த பிரிவில், மெய்நிகர் முறையை பிணைப்போம்: ref: "
"`_PROCESS () <class_node_private_method__process>` மற்றும் எங்கள் தனிப்பயன் ச்பிரிட் "
"சிறிது நகர்த்தவும்."

msgid ""
"In the ``gdexample.h`` file, let's add a function that represents the custom "
"``_process()`` method:"
msgstr "`` Gdexample.h`` கோப்பில், தனிப்பயன் `` _ செயல்முறை () `` முறை:"

msgid ""
"We'll also add a \"private\" field to keep track of the time passed in our "
"custom struct. This is \"private\" only in the sense that it won't be bound "
"to the Godot API, even though it is public in the C side, given the language "
"lacks access modifiers."
msgstr ""
"எங்கள் தனிப்பயன் கட்டமைப்பில் அனுப்பப்பட்ட நேரத்தைக் கண்காணிக்க ஒரு \"தனியார்\" புலத்தையும் "
"சேர்ப்போம். இது \"தனிப்பட்டது\" என்பது கோடோட் பநிஇ உடன் கட்டுப்படாது என்ற பொருளில் "
"மட்டுமே, இது சி பக்கத்தில் பொதுவில் இருந்தாலும், மொழிக்கு அணுகல் மாற்றியமைப்பாளர்கள் "
"இல்லாததால்."

msgid ""
"On the counterpart source file ``gdexample.c`` we need to initialize the new "
"field in the constructor:"
msgstr ""
"எதிர் மூலக் கோப்பில் `` gdexample.c`` கட்டமைப்பாளரின் புதிய புலத்தை நாம் துவக்க வேண்டும்:"

msgid ""
"Then we can create the simplest implementation for the ``_process`` method:"
msgstr "`` _PROCESS`` முறைக்கு எளிமையான செயலாக்கத்தை உருவாக்கலாம்:"

msgid ""
"For now it will do nothing but update the private field we created. We'll "
"come back to this after the method is properly bound."
msgstr ""
"இப்போது நாங்கள் உருவாக்கிய தனிப்பட்ட துறையைப் புதுப்பிப்பதைத் தவிர வேறு எதுவும் "
"செய்யாது. முறை சரியாக பிணைக்கப்பட்ட பிறகு நாங்கள் இதற்கு திரும்பி வருவோம்."

msgid ""
"Virtual methods are a bit different from the regular bindings. Instead of "
"explicitly registering the method itself, we'll register a special function "
"that Godot will call to ask if a particular virtual method is implemented in "
"our extension. The engine will pass a ``StringName`` as an argument so, "
"following the spirit of this tutorial, we'll create a helper function to "
"check if it is equal to a C string."
msgstr ""
"மெய்நிகர் முறைகள் வழக்கமான பிணைப்புகளிலிருந்து சற்று வேறுபட்டவை. முறையை வெளிப்படையாக "
"பதிவு செய்வதற்குப் பதிலாக, எங்கள் நீட்டிப்பில் ஒரு குறிப்பிட்ட மெய்நிகர் முறை "
"செயல்படுத்தப்பட்டுள்ளதா என்று கேட்க கோடோட் அழைக்கும் ஒரு சிறப்பு செயல்பாட்டை நாங்கள் பதிவு "
"செய்வோம். இயந்திரம் ஒரு `` சரம் பெயர்`` ஒரு வாதமாக அனுப்பும், எனவே, இந்த டுடோரியலின் "
"ஆவியைப் பின்பற்றி, இது ஒரு சி சரத்திற்கு சமமானதா என்பதைச் சரிபார்க்க ஒரு உதவி "
"செயல்பாட்டை உருவாக்குவோம்."

msgid "Let's add the declaration to the ``api.h`` file:"
msgstr "அறிவிப்பை `` api.h`` கோப்பில் சேர்ப்போம்:"

msgid ""
"We'll also add a new struct to this file, to hold function pointers for "
"custom operators:"
msgstr ""
"தனிப்பயன் ஆபரேட்டர்களுக்கான செயல்பாட்டு சுட்டிகள் வைத்திருக்க, இந்த கோப்பில் ஒரு புதிய "
"கட்டமைப்பையும் சேர்ப்போம்:"

msgid ""
"Then in the ``api.c`` file we'll load the function pointer from the API:"
msgstr "பின்னர் `` api.c`` கோப்பில் பநிஇ இலிருந்து செயல்பாட்டு சுட்டிக்காட்டி ஏற்றுவோம்:"

msgid ""
"As you can see we need a new local helper here in order to grab the function "
"pointer for the operator."
msgstr ""
"ஆபரேட்டருக்கான செயல்பாட்டு சுட்டிக்காட்டியைப் பிடிக்க எங்களுக்கு இங்கே ஒரு புதிய உள்ளக "
"உதவியாளர் தேவை என்பதை நீங்கள் காண முடியும்."

msgid ""
"With this handy, we can easily create our comparison function in the same "
"file:"
msgstr ""
"இந்த எளிது மூலம், அதே கோப்பில் எங்கள் ஒப்பீட்டு செயல்பாட்டை எளிதாக உருவாக்க முடியும்:"

msgid ""
"This function creates a ``StringName`` from the argument, compares with the "
"other one using the operator function pointer, and returns the result. Note "
"that the return value for the operator is passed as an out reference, this "
"is a common thing in the API."
msgstr ""
"இந்த செயல்பாடு வாதத்திலிருந்து `` சரம் பெயர்` உருவாக்குகிறது, மற்றொன்றை ஆபரேட்டர் "
"செயல்பாட்டு சுட்டிக்காட்டி பயன்படுத்தி ஒப்பிடுகிறது, மேலும் முடிவை வழங்குகிறது. "
"ஆபரேட்டருக்கான வருவாய் மதிப்பு ஒரு அவுட் குறிப்பாக அனுப்பப்படுகிறது என்பதை நினைவில் "
"கொள்க, இது பநிஇ இல் ஒரு பொதுவான சேதி."

msgid ""
"Let's go back to the ``gdexample.h`` file and add a couple of functions that "
"will be used as the callbacks for the Godot API:"
msgstr ""
"`` Gdexample.h`` கோப்புக்குச் சென்று, கோடோட் ஏபிஐக்கான கால்பேக்குகளாகப் பயன்படுத்தப்படும் "
"இரண்டு செயல்பாடுகளைச் சேர்ப்போம்:"

msgid ""
"There are actually two ways of registering virtual methods. Only one has the "
"``get`` part, in which you give Godot a properly crafted function pointer "
"which will be called. For this we would need to create another helper for "
"each virtual method, something that is not very convenient. Instead, we use "
"the second method which allows us to return any data, and then Godot will "
"call a second callback and give us back this data along with the call "
"information. We can simply give our own function pointer as custom data and "
"then have a single callback for all virtual methods. Although in this "
"example we will only use it for one method, this way is simpler to expand."
msgstr ""
"மெய்நிகர் முறைகளை பதிவு செய்வதற்கு உண்மையில் இரண்டு வழிகள் உள்ளன. ஒருவருக்கு மட்டுமே `` "
"கெட்`` பகுதி உள்ளது, அதில் நீங்கள் கோடோட்டை ஒழுங்காக வடிவமைக்கப்பட்ட செயல்பாட்டு "
"சுட்டிக்காட்டி கொடுக்கிறீர்கள், அது அழைக்கப்படும். இதற்காக ஒவ்வொரு மெய்நிகர் முறைக்கும் "
"மற்றொரு உதவியாளரை உருவாக்க வேண்டும், இது மிகவும் வசதியானது. அதற்கு பதிலாக, எந்தவொரு "
"தரவையும் திருப்பித் தர அனுமதிக்கும் இரண்டாவது முறையைப் பயன்படுத்துகிறோம், பின்னர் கோடோட் "
"இரண்டாவது அழைப்பை அழைத்து இந்தத் தரவை அழைப்பு தகவலுடன் திருப்பித் தருவார். நாங்கள் எங்கள் "
"சொந்த செயல்பாட்டு சுட்டிக்காட்டி தனிப்பயன் தரவுகளாகக் கொடுக்கலாம், பின்னர் அனைத்து மெய்நிகர் "
"முறைகளுக்கும் ஒற்றை அழைப்பைக் கொண்டிருக்கலாம். இந்த எடுத்துக்காட்டில் நாம் அதை ஒரு முறைக்கு "
"மட்டுமே பயன்படுத்துவோம் என்றாலும், இந்த வழியில் விரிவாக்க எளிதானது."

msgid "So let's implement those two functions in the ``gdexample.c`` file:"
msgstr "எனவே அந்த இரண்டு செயல்பாடுகளையும் `` gdexample.c`` கோப்பில் செயல்படுத்துவோம்:"

msgid ""
"Those functions are also quite straightforward after making all the helpers "
"previously."
msgstr ""
"முன்னர் அனைத்து உதவியாளர்களையும் உருவாக்கிய பிறகு அந்த செயல்பாடுகளும் மிகவும் "
"நேரடியானவை."

msgid ""
"For the first one, we simply check if the function name requested is "
"``_process`` and if it is we return a function pointer to our implementation "
"of it. Otherwise we return ``NULL``, signaling that the method is not being "
"overridden. We don't use the ``p_class_userdata`` here since this function "
"is meant only for one class and we don't have any data associated with it."
msgstr ""
"முதலாவதாக, கோரப்பட்ட செயல்பாட்டு பெயர் `` _ செயல்முறை`` என்பதையும், அதை "
"செயல்படுத்துவதற்கு ஒரு செயல்பாட்டு சுட்டிக்காட்டி திருப்பித் தரும் என்பதை நாங்கள் "
"சரிபார்க்கிறோம். இல்லையெனில், நாம் `` NULL`` திருப்பித் தருகிறோம், முறை மீறப்படவில்லை "
"என்பதைக் குறிக்கிறது. இந்த செயல்பாடு ஒரு வகுப்பிற்கு மட்டுமே என்பதற்கும், அதனுடன் "
"தொடர்புடைய தரவும் எங்களிடம் இல்லை என்பதால் நாங்கள் இங்கே `` p_class_userdata`` ஐப் "
"பயன்படுத்த மாட்டோம்."

msgid ""
"The second one is similar. If it is the ``_process()`` method, it uses the "
"given function pointer to call the ``ptrcall`` helper, passing the call "
"arguments forward. Otherwise it simply does nothing, since we don't have any "
"other virtual methods being implemented."
msgstr ""
"இரண்டாவது ஒத்ததாகும். இது `` _ செயல்முறை () `` முறையாக இருந்தால், அது கொடுக்கப்பட்ட "
"செயல்பாட்டு சுட்டிக்காட்டி பயன்படுத்துகிறது `` ptrcall`` உதவியாளரை அழைக்கவும், அழைப்பு "
"வாதங்களை முன்னோக்கி அனுப்பவும். இல்லையெனில் அது ஒன்றும் செய்யாது, ஏனென்றால் வேறு எந்த "
"மெய்நிகர் முறைகளும் செயல்படுத்தப்படவில்லை."

msgid ""
"The only thing missing is using those callbacks when the class is "
"registered. Go to the ``init.c`` file and change the ``class_info`` "
"initialization to include those, replacing the ``NULL`` value used "
"previously:"
msgstr ""
"வகுப்பு பதிவு செய்யப்படும்போது அந்த கால்பேக்குகளைப் பயன்படுத்துவதே காணாமல் போன ஒரே "
"சேதி. `` Init.c`` கோப்புக்குச் சென்று, அவற்றைச் சேர்க்க `` class_info`` துவக்கத்தை "
"மாற்றவும், முன்பு பயன்படுத்தப்பட்ட `` பூச்ய`` மதிப்பை மாற்றவும்:"

msgid ""
"This is enough to bind the virtual method. If you build the extension and "
"run the demo project again, the ``_process()`` function will be called. You "
"just won't be able to tell since the function itself does nothing visible. "
"We will solve this now by making the custom node move following a pattern."
msgstr ""
"மெய்நிகர் முறையை பிணைக்க இது போதுமானது. நீங்கள் நீட்டிப்பை உருவாக்கி டெமோ திட்டத்தை "
"மீண்டும் இயக்கினால், `` _ செயல்முறை () `` செயல்பாடு அழைக்கப்படும். செயல்பாடு எதுவும் "
"தெரியவில்லை என்பதால் நீங்கள் சொல்ல முடியாது. தனிப்பயன் முனை நகர்வை ஒரு முறையைப் "
"பின்பற்றுவதன் மூலம் இதை இப்போது தீர்ப்போம்."

msgid ""
"In order to make our node do stuff, we'll need to call Godot methods. Not "
"only the GDExtension API functions as we've being doing so far, but actual "
"engine methods, as we would do with scripting. This naturally requires some "
"extra setup."
msgstr ""
"எங்கள் முனை விசயங்களைச் செய்ய, நாங்கள் கோடோட் முறைகளை அழைக்க வேண்டும். நாம் இதுவரை செய்து "
"வருவதால் GDextension பநிஇ செயல்படுவது மட்டுமல்லாமல், உண்மையான இயந்திர முறைகள், "
"ச்கிரிப்டிங் செய்வதைப் போலவே. இதற்கு இயற்கையாகவே சில கூடுதல் அமைப்பு தேவைப்படுகிறது."

msgid ""
"First, let's add :ref:`class_Vector2` to our ``defs.h`` file, so we can use "
"it in our method:"
msgstr ""
"முதலில், சேர்த்துக் கொள்வோம்: ref: `class_vector2` எங்கள்` `defs.h`` கோப்புக்கு, எனவே "
"அதை எங்கள் முறையில் பயன்படுத்தலாம்:"

msgid ""
"The ``REAL_T_IS_DOUBLE`` define is only needed if your Godot version was "
"built with double precision support, which is not the default."
msgstr ""
"உங்கள் கோடோட் பதிப்பு இரட்டை துல்லிய ஆதரவுடன் கட்டப்பட்டிருந்தால் மட்டுமே `` "
"ரியல்_டி_ச்_டூபிள்`` வரையறை மட்டுமே தேவைப்படுகிறது, இது இயல்புநிலை அல்ல."

msgid ""
"Now, in the ``api.h`` file, we'll add few things to the API structs, "
"including a new one for holding engine methods to call."
msgstr ""
"இப்போது, `` api.h`` கோப்பில், பநிஇ கட்டமைப்புகளில் சில விசயங்களைச் சேர்ப்போம், இதில் "
"இயந்திர முறைகளை அழைக்க புதியது உட்பட."

msgid ""
"Then in the ``api.c`` file we can grab the function pointers from Godot:"
msgstr "பின்னர் `` api.c`` கோப்பில் கோடோட்டிலிருந்து செயல்பாட்டு சுட்டிகள் பிடிக்கலாம்:"

msgid ""
"The only noteworthy part here is the ``Vector2`` constructor, for which we "
"request the index ``3``. Since there are multiple constructors with "
"different kinds of arguments, we need to specify which one we want. In this "
"case we're getting the one that takes two float numbers as the ``x`` and "
"``y`` coordinates, hence the name. This index can be retrieved from the "
"``extension_api.json`` file. Note we also need a new local helper to get it."
msgstr ""
"இங்கே ஒரே குறிப்பிடத்தக்க பகுதி `` vector2`` கட்டமைப்பாளராகும், இதற்காக நாங்கள் "
"குறியீட்டைக் கோருகிறோம் `` 3``. பல்வேறு வகையான வாதங்களைக் கொண்ட பல கட்டமைப்பாளர்கள் "
"இருப்பதால், நாம் விரும்பும் ஒன்றை நாம் குறிப்பிட வேண்டும். இந்த விசயத்தில் இரண்டு மிதவை "
"எண்களை `` x`` மற்றும் `` y`` ஒருங்கிணைப்புகளாக எடுக்கும் ஒன்றை நாங்கள் பெறுகிறோம், எனவே "
"பெயர். இந்த குறியீட்டை `` extranse_api.json`` கோப்பிலிருந்து மீட்டெடுக்கலாம். அதைப் பெற "
"எங்களுக்கு ஒரு புதிய உள்ளக உதவியாளரும் தேவை என்பதை நினைவில் கொள்க."

msgid ""
"Be aware that we don't get anything for the methods struct here. This is "
"because this function is called too early in the initialization process, so "
"classes won't be properly registered yet."
msgstr ""
"முறைகள் கட்டமைப்பிற்கு நாங்கள் எதுவும் பெறவில்லை என்பதை அறிந்து கொள்ளுங்கள். ஏனென்றால், இந்த "
"செயல்பாடு துவக்க செயல்பாட்டில் மிக விரைவாக அழைக்கப்படுகிறது, எனவே வகுப்புகள் இன்னும் "
"சரியாக பதிவு செய்யப்படாது."

msgid ""
"Instead, we're gonna use the initialization level callback to grab those "
"when we are registering our custom class. Add this to the ``init.c`` file:"
msgstr ""
"அதற்கு பதிலாக, நாங்கள் எங்கள் தனிப்பயன் வகுப்பைப் பதிவுசெய்யும்போது அவற்றைப் பிடிக்க துவக்க "
"நிலை கால்பேக்கைப் பயன்படுத்தப் போகிறோம். இதை `` init.c`` கோப்பில் சேர்க்கவும்:"

msgid ""
"Here we create ``StringName``'s for the class and method we want to get, "
"then use the GDExtension API to retrieve their ``MethodBind``, which is an "
"object that represents the bound method. We get the ``set_position`` method "
"from ``Node2D`` since this is where it was registered, even though we're "
"going to use it in a ``Sprite2D``, a derived class."
msgstr ""
"இங்கே நாம் பெற விரும்பும் வகுப்பு மற்றும் முறைக்காக `` ச்ட்ரிங் பெயர்`` ஐ உருவாக்குகிறோம், "
"பின்னர் gdextension பநிஇ ஐப் பயன்படுத்தி அவற்றின் `` methodbind``, இது பிணைக்கப்பட்ட "
"முறையை குறிக்கும் ஒரு பொருளாகும். `` Set_Position`` முறையை `` Node2d`` ல் இருந்து "
"பெறுகிறோம், இது பதிவுசெய்யப்பட்ட இடத்திலிருந்தே, நாங்கள் பெறப்பட்ட வகுப்பில் `` ச்ப்ரைட் 2 "
"டி`` பயன்படுத்தப் போகிறோம்."

msgid ""
"The seemingly random number for getting the bind is actually a hash of the "
"method signature. This allows Godot to match the method you're requesting "
"even if in a future Godot version this signature changes, by providing a "
"compatibility method that matches what you're asking for. This is one of the "
"systems that allow the engine to load extensions made for previous versions. "
"You can get the value of this hash from the ``extension_api.json`` file."
msgstr ""
"பிணைப்பைப் பெறுவதற்கான சீரற்ற எண் உண்மையில் முறை கையொப்பத்தின் ஆச் ஆகும். எதிர்கால கோடோட் "
"பதிப்பில் இந்த கையொப்பம் மாறினாலும், நீங்கள் கேட்பதைப் பொருத்தும் ஒரு பொருந்தக்கூடிய முறையை "
"வழங்குவதன் மூலம், நீங்கள் கோரும் முறையுடன் பொருந்தும்படி கோடோட்டை இது அனுமதிக்கிறது. "
"முந்தைய பதிப்புகளுக்காக செய்யப்பட்ட நீட்டிப்புகளை ஏற்றுவதற்கு இயந்திரத்தை அனுமதிக்கும் "
"அமைப்புகளில் இதுவும் ஒன்றாகும். இந்த ஆசின் மதிப்பை `` extsention_api.json`` "
"கோப்பிலிருந்து பெறலாம்."

msgid ""
"With all that, we can finally implement our custom ``_process()`` method in "
"the ``gdexample.c`` file:"
msgstr ""
"அதையெல்லாம் கொண்டு, எங்கள் தனிப்பயன் `` _PROCESS () `முறையை` `gdexample.c`` கோப்பில் "
"செயல்படுத்தலாம்:"

msgid ""
"After updating the time passed scaled by the ``speed`` property, it creates "
"``x`` and ``y`` values based on that, also modulated by the ``amplitude`` "
"property. This is what will give the pattern effect. The ``math.h`` header "
"is needed for the ``sin()`` and ``cos()`` functions used here."
msgstr ""
"`` வேகம்`` சொத்து அளவிடப்பட்ட நேரத்தைப் புதுப்பித்த பிறகு, அது `` x`` மற்றும் `y`` "
"மதிப்புகளை உருவாக்குகிறது, இது` `அலைவீச்சு` சொத்து ஆகியவற்றால் மாற்றியமைக்கப்படுகிறது. "
"இதுதான் முறை விளைவைக் கொடுக்கும். இங்கே பயன்படுத்தப்படும் `` ஊழ்கம் () `` `` மற்றும் `` "
"காச் () `` `` `` `` `` `` `` `` `` `` `` `` `` `` `` இங்கே பயன்படுத்தப்படும் `` "
"கணிதம்."

msgid ""
"Then it sets up an array of arguments to construct a ``Vector2``, followed "
"by calling the constructor. It sets up another array of arguments and use it "
"to call the ``set_position()`` method via the bind we acquired previously."
msgstr ""
"பின்னர் அது ஒரு `` வெக்டர் 2`` ஐ உருவாக்க பல வாதங்களை அமைக்கிறது, அதைத் தொடர்ந்து "
"கட்டமைப்பாளரை அழைப்பது. இது மற்றொரு வாதங்களை அமைத்து, நாங்கள் முன்பு வாங்கிய பிணைப்பு "
"வழியாக `` set_position () `முறையை அழைக்க அதைப் பயன்படுத்துகிறது."

msgid "Since nothing here allocates any memory, there's not a need to cleanup."
msgstr ""
"இங்கே எதுவும் எந்த நினைவகத்தையும் ஒதுக்கவில்லை என்பதால், தூய்மை செய்ய வேண்டிய அவசியமில்லை."

msgid ""
"Now we can build the extension again and reopen Godot. Even in the editor "
"you'll see the custom sprite moving."
msgstr ""
"இப்போது நாம் மீண்டும் நீட்டிப்பை உருவாக்கி கோடோட்டை மீண்டும் திறக்கலாம். எடிட்டரில் கூட "
"தனிப்பயன் ச்பிரிட் நகர்வதைக் காண்பீர்கள்."

msgid ""
"Try changing the **Speed** and **Amplitude** properties and see how the "
"sprite react."
msgstr ""
"** விரைவு ** மற்றும் ** அலைவீச்சு ** பண்புகளை மாற்ற முயற்சிக்கவும், ச்பிரிட் எவ்வாறு "
"செயல்படுகிறது என்பதைப் பார்க்கவும்."

msgid "Registering and emitting a signal"
msgstr "ஒரு சமிக்ஞையை பதிவு செய்தல் மற்றும் வெளியிடுதல்"

msgid ""
"To complete this tutorial, let's see how you can register a custom signal "
"and emit it when appropriate. As you might have guessed, we'll need a few "
"more function pointers from the API and more helper functions."
msgstr ""
"இந்த டுடோரியலை முடிக்க, தனிப்பயன் சமிக்ஞையை எவ்வாறு பதிவு செய்யலாம் மற்றும் பொருத்தமான "
"போது அதை வெளியிடலாம் என்று பார்ப்போம். நீங்கள் யூகித்தபடி, பநிஇ இலிருந்து இன்னும் சில "
"செயல்பாட்டு சுட்டிகள் மற்றும் அதிக உதவி செயல்பாடுகள் தேவைப்படும்."

msgid ""
"In the ``api.h`` file we're adding two things. One is a an API function to "
"register a signal, the other is a helper function to wrap the signal binding."
msgstr ""
"`` Api.h`` கோப்பில் நாங்கள் இரண்டு விசயங்களைச் சேர்க்கிறோம். ஒன்று சமிக்ஞையை பதிவு "
"செய்வதற்கான பநிஇ செயல்பாடு, மற்றொன்று சமிக்ஞை பிணைப்பை மடிக்க உதவியாளர் செயல்பாடு."

msgid ""
"In this case we only have a version for one argument, since it's what we're "
"going to use."
msgstr ""
"இந்த விசயத்தில் ஒரு வாதத்திற்கான ஒரு பதிப்பு மட்டுமே உள்ளது, ஏனெனில் நாங்கள் பயன்படுத்தப் "
"போகிறோம்."

msgid ""
"Moving to the ``api.c`` file, we can load this new function pointer and "
"implement the helper:"
msgstr ""
"`` Api.c`` கோப்புக்கு நகரும், இந்த புதிய செயல்பாட்டு சுட்டிக்காட்டி ஏற்றி உதவியாளரை "
"செயல்படுத்தலாம்:"

msgid ""
"This one is very similar to the function to bind methods. The main "
"difference is that we don't need to fill another struct, we just pass the "
"needed names and the array of arguments. The ``1`` at the end means the "
"amount of arguments the signal provides."
msgstr ""
"முறைகளை பிணைப்பதற்கான செயல்பாட்டிற்கு இது மிகவும் ஒத்திருக்கிறது. முக்கிய வேறுபாடு "
"என்னவென்றால், நாம் மற்றொரு கட்டமைப்பை நிரப்ப தேவையில்லை, தேவையான பெயர்களையும் வாதங்களின் "
"வரிசையையும் நாங்கள் கடந்து செல்கிறோம். முடிவில் `` 1`` என்பது சமிக்ஞை வழங்கும் வாதங்களின் "
"அளவைக் குறிக்கிறது."

msgid "With this we can bind the signal in ``gdexample.c``:"
msgstr "இதன் மூலம் சமிக்ஞையை `` gdexample.c`` இல் பிணைக்கலாம்:"

msgid ""
"In order to emit a signal, we need to call the :ref:`emit_signal() "
"<class_Object_method_emit_signal>` method on our custom node. Since this is "
"a ``vararg`` function (meaning it takes any amount of arguments), we cannot "
"use ``ptrcall``. To do a regular call, we have to create Variants, which "
"require a few more steps of plumbing to get done."
msgstr ""
"ஒரு சமிக்ஞையை வெளியிடுவதற்கு, நாம் அழைக்க வேண்டும்: ref: `emit_signal () "
"<class_object_method_emit_signal>` எங்கள் தனிப்பயன் முனையில் முறை. இது ஒரு `` "
"vararg`` செயல்பாடு என்பதால் (அதாவது இது எந்த அளவிலான வாதங்களையும் எடுக்கும்), நாம் `` "
"ptrcall`` ஐப் பயன்படுத்த முடியாது. ஒரு வழக்கமான அழைப்பைச் செய்ய, நாம் மாறுபாடுகளை "
"உருவாக்க வேண்டும், இதற்கு இன்னும் சில படிகள் பிளம்பிங் தேவைப்படுகின்றன."

msgid "First, in the ``defs.h`` file we create a definition for Variant:"
msgstr "முதலில், `` defs.h`` கோப்பில் மாறுபாட்டிற்கான வரையறையை உருவாக்குகிறோம்:"

msgid ""
"We first set the size of Variant together with the size of Vector2 that we "
"added before. Then we use it to create an opaque struct that is enough to "
"hold the Variant data. Again, we set the size for double precision builds as "
"a fallback, since by the official Godot builds use single precision."
msgstr ""
"நாங்கள் முன்பு சேர்த்த வெக்டர் 2 இன் அளவுடன் மாறுபாட்டின் அளவை முதலில் அமைத்தோம். மாறுபட்ட "
"தரவை வைத்திருக்க போதுமானதாக இருக்கும் ஒரு ஒளிபுகா கட்டமைப்பை உருவாக்க இதைப் "
"பயன்படுத்துகிறோம். மீண்டும், இரட்டை துல்லியமான கட்டமைப்பிற்கான அளவை ஒரு குறைவடையும் என்று "
"அமைத்துள்ளோம், ஏனெனில் உத்தியோகபூர்வ கோடோட் கட்டடங்கள் ஒற்றை துல்லியத்தைப் பயன்படுத்துகின்றன."

msgid ""
"The ``emit_signal()`` function will be called with two arguments. The first "
"is the name of the signal to be emitted and the second is the argument we're "
"passing to the signal connections, which is a Vector2 as we declared when "
"binding it. So we're gonna create a helper function that can call a "
"MethodBind with these types. Even though it does return something (an error "
"code), we don't need to deal with it, so for now we're just going to ignore "
"it."
msgstr ""
"`` Emit_signal () `` செயல்பாடு இரண்டு வாதங்களுடன் அழைக்கப்படும். முதலாவது "
"உமிழ்வதற்கான சமிக்ஞையின் பெயர் மற்றும் இரண்டாவது நாம் சமிக்ஞை இணைப்புகளுக்கு அனுப்பும் "
"உரையாடல், இது ஒரு திசையன் 2 ஆகும், அதை பிணைக்கும்போது நாங்கள் அறிவித்தோம். எனவே இந்த "
"வகைகளுடன் ஒரு முறை பைண்டை அழைக்கக்கூடிய ஒரு உதவி செயல்பாட்டை நாங்கள் "
"உருவாக்கப்போகிறோம். இது எதையாவது (பிழைக் குறியீடு) திருப்பித் தரும் என்றாலும், நாங்கள் "
"அதைச் சமாளிக்கத் தேவையில்லை, எனவே இப்போது நாங்கள் அதை புறக்கணிக்கப் போகிறோம்."

msgid ""
"In the ``api.h``, we're adding a few things to the existing structs, plus a "
"new helper function for the call:"
msgstr ""
"`` Api.h`` இல், தற்போதுள்ள சில விசயங்களை நாங்கள் சேர்க்கிறோம், மேலும் அழைப்பிற்கான புதிய "
"உதவி செயல்பாடு:"

msgid ""
"Now let's switch to the ``api.c`` file to load these new function pointers "
"and implement the helper function."
msgstr ""
"இப்போது இந்த புதிய செயல்பாட்டு சுட்டிகள் ஏற்றவும், உதவி செயல்பாட்டை செயல்படுத்தவும் `` "
"api.c`` கோப்புக்கு மாறலாம்."

msgid ""
"This helper function has some boilerplate code but is quite straightforward. "
"It sets up the two arguments inside stack allocated Variants, then creates "
"an array with pointers to those. It also sets up another Variant to keep the "
"return value, which we don't need to construct since the call expects it to "
"be uninitialized."
msgstr ""
"இந்த உதவி செயல்பாடு சில கொதிகலன் குறியீட்டைக் கொண்டுள்ளது, ஆனால் இது மிகவும் "
"நேரடியானது. இது ச்டாக் ஒதுக்கப்பட்ட வகைகளுக்குள் உள்ள இரண்டு வாதங்களை அமைக்கிறது, பின்னர் "
"அவற்றுக்கு சுட்டிகள் கொண்ட ஒரு வரிசையை உருவாக்குகிறது. வருவாய் மதிப்பைக் கடைப்பிடிக்க "
"இது மற்றொரு மாறுபாட்டையும் அமைக்கிறது, இது அழைப்பு ஆரம்பிக்கப்படாது என்று "
"எதிர்பார்க்கிறது என்பதால் நாம் உருவாக்க தேவையில்லை."

msgid ""
"Then it actually calls the MethodBind using the instance we provided and the "
"arguments. The ``NULL`` at the end would be a pointer to a "
"``GDExtensionCallError`` struct. This can be used to treat potential errors "
"when calling the functions (such as wrong arguments). For the sake of "
"simplicity we're not gonna handle that here."
msgstr ""
"பின்னர் அது உண்மையில் நாங்கள் வழங்கிய நிகழ்வு மற்றும் வாதங்களைப் பயன்படுத்தி முறை பைண்டை "
"அழைக்கிறது. முடிவில் `` NULL`` ஒரு `` gdextensionCallerror`` கட்டமைப்பிற்கு ஒரு "
"சுட்டிக்காட்டி இருக்கும். செயல்பாடுகளை (தவறான வாதங்கள் போன்றவை) அழைக்கும்போது சாத்தியமான "
"பிழைகளுக்கு சிகிச்சையளிக்க இதைப் பயன்படுத்தலாம். எளிமைக்காக நாங்கள் அதை இங்கே கையாள "
"மாட்டோம்."

msgid ""
"At the end we need to destruct the Variants we created. While technically "
"the Vector2 one does not require destructing, it is clearer to cleanup "
"everything."
msgstr ""
"இறுதியில் நாம் உருவாக்கிய மாறுபாடுகளை அழிக்க வேண்டும். தொழில்நுட்ப ரீதியாக வெக்டர் 2 "
"க்கு அழிவு தேவையில்லை என்றாலும், எல்லாவற்றையும் தூய்மை செய்வது தெளிவாக உள்ளது."

msgid ""
"We also need to load the MethodBind, which we'll do in the ``init.c`` file, "
"right after loading the one for the ``set_position`` method we did before:"
msgstr ""
"நாம் முன்பு செய்த `` set_position`` முறைக்கு ஒன்றை ஏற்றிய உடனேயே, `` init.c`` "
"கோப்பில் செய்வோம் என்று மெதடி பைண்டையும் ஏற்ற வேண்டும்:"

msgid ""
"Note that we reuse the ``native_class_name`` and ``method_name`` variables "
"here, so we don't need to declare new ones."
msgstr ""
"இங்கே `` நேட்டிவ்_க்ளாச்_நேம்`` மற்றும் `` முறை_நாம்`` மாறுபாடுகள் ஆகியவற்றை மீண்டும் "
"பயன்படுத்துகிறோம் என்பதை நினைவில் கொள்க, எனவே புதியவற்றை நாங்கள் அறிவிக்க தேவையில்லை."

msgid ""
"Now go to the ``gdexample.h`` file where we're going to add a couple of "
"fields:"
msgstr ""
"இப்போது `` gdexample.h`` கோப்புக்குச் செல்லுங்கள், அங்கு நாங்கள் இரண்டு புலங்களைச் சேர்க்கப் "
"போகிறோம்:"

msgid ""
"The first one will store the time passed since the last signal was emitted, "
"since we'll be doing so at regular intervals. The other is just to cache the "
"signal name so we don't need to create a new StringName every time."
msgstr ""
"முதலாவது கடைசி சமிக்ஞை வெளியேற்றப்பட்டதிலிருந்து கடந்து செல்லும் நேரத்தை சேமிக்கும், "
"ஏனென்றால் நாங்கள் வழக்கமான இடைவெளியில் அவ்வாறு செய்வோம். மற்றொன்று சமிக்ஞை பெயரை கேச் "
"செய்வதே மட்டுமே, எனவே ஒவ்வொரு முறையும் ஒரு புதிய சரம் பெயரை உருவாக்க தேவையில்லை."

msgid ""
"In the source ``gdexample.c`` file we can change the constructor and "
"destructor to deal with the new fields:"
msgstr ""
"மூலத்தில் `` gdexample.c`` கோப்பில் புதிய புலங்களைச் சமாளிக்க கட்டமைப்பாளரையும் "
"அழிப்பாளரையும் மாற்றலாம்:"

msgid "It is important to destruct the StringName to avoid memory leaks."
msgstr "நினைவக கசிவைத் தவிர்க்க சரம் பெயர் அழிக்க வேண்டியது தேவை."

msgid ""
"Now we can add to the ``gdexample_class_process()`` function to actually "
"emit the signal:"
msgstr ""
"இப்போது நாம் சிக்னலை வெளியிடுவதற்கு `` gdexample_class_process () `` செயல்பாட்டில் "
"சேர்க்கலாம்:"

msgid ""
"This updates the time passed for the signal emission and, if it is over one "
"second it calls the ``emit_signal()`` function on the current instance, "
"passing the name of the signal and the new position as arguments."
msgstr ""
"இது சமிக்ஞை உமிழ்வுக்கான நேரத்தை புதுப்பிக்கிறது, மேலும் இது ஒரு நொடிக்கு மேல் "
"இருந்தால், அது தற்போதைய நிகழ்வில் `` emit_signal () `` செயல்பாட்டை அழைக்கிறது, இது "
"சமிக்ஞையின் பெயரையும் புதிய நிலையை வாதங்களாகவும் கடந்து செல்கிறது."

msgid ""
"Now we're done with our C GDExtension. Build it once more and reopen the "
"demo project in the editor."
msgstr ""
"இப்போது நாங்கள் எங்கள் சி gdextension உடன் முடித்துவிட்டோம். அதை மீண்டும் ஒரு முறை "
"உருவாக்கி, எடிட்டரில் டெமோ திட்டத்தை மீண்டும் திறக்கவும்."

msgid ""
"In the documentation page for ``GDExample`` you can see the new signal we "
"bound:"
msgstr ""
"`` Gdexample` க்கான ஆவணங்கள் பக்கத்தில், நாங்கள் பிணைக்கப்பட்ட புதிய சமிக்ஞையை நீங்கள் "
"காணலாம்:"

msgid ""
"To check it's working, let's add a small script to the root node, parent of "
"our custom one, that prints the position to the output every time it "
"receives the signal:"
msgstr ""
"இது செயல்படுகிறது என்பதைச் சரிபார்க்க, எங்கள் தனிப்பயன் ஒன்றின் பெற்றோரான ரூட் முனையில் "
"ஒரு சிறிய ச்கிரிப்டைச் சேர்ப்போம், இது ஒவ்வொரு முறையும் வெளியீட்டிற்கு நிலையை "
"அச்சிடுகிறது:"

msgid ""
"Run the project and you can observe the values being printed in the Output "
"dock in the editor:"
msgstr ""
"திட்டத்தை இயக்கவும், எடிட்டரில் வெளியீட்டு கப்பல்துறையில் அச்சிடப்பட்ட மதிப்புகளை நீங்கள் "
"கவனிக்கலாம்:"

msgid "Conclusion"
msgstr "முடிவு"

msgid ""
"This tutorial shows a basic extension with custom methods, properties, and "
"signals. While it does require a good amount of boilerplate, it can scale "
"well by creating helper functions to handle the tedious tasks."
msgstr ""
"இந்த பயிற்சி தனிப்பயன் முறைகள், பண்புகள் மற்றும் சமிக்ஞைகளுடன் அடிப்படை நீட்டிப்பைக் "
"காட்டுகிறது. இதற்கு நல்ல அளவு கொதிகலன் தேவைப்படும் போது, கடினமான பணிகளைக் கையாளுவில் "
"உதவி செயல்பாடுகளை உருவாக்குவதன் மூலம் இது நன்கு அளவிட முடியும்."

msgid ""
"This should serve as a good basis to understand the GDExtension API and as a "
"starting point to create custom binding generators. In fact, it would be "
"possible to create bindings for C using such type of generator, making the "
"actual coding look more like the ``gdexample.c`` file in this example, which "
"is quite straightforward and not very verbose."
msgstr ""
"Gdextension பநிஇ ஐப் புரிந்துகொள்வதற்கும் தனிப்பயன் பிணைப்பு செனரேட்டர்களை "
"உருவாக்குவதற்கான தொடக்க புள்ளியாகவும் இது ஒரு நல்ல அடிப்படையாக இருக்க வேண்டும். "
"உண்மையில்."

msgid ""
"If you want to create actual extensions, it is preferred to use the C++ "
"bindings instead, as it takes away all of the boilerplate from your code. "
"Check the :ref:`GDExtension C++ example <doc_gdextension_cpp_example>` to "
"see how you can do this."
msgstr ""
"நீங்கள் உண்மையான நீட்டிப்புகளை உருவாக்க விரும்பினால், அதற்கு பதிலாக சி ++ பிணைப்புகளைப் "
"பயன்படுத்த விரும்பப்படுகிறது, ஏனெனில் இது உங்கள் குறியீட்டிலிருந்து கொதிகலன் அனைத்தையும் "
"எடுத்துச் செல்கிறது. சரிபார்க்கவும்: ref: `gdextension c ++ எடுத்துக்காட்டு "
"<doc_gdextension_cpp_example>` இதை நீங்கள் எவ்வாறு செய்ய முடியும் என்பதைப் பார்க்க."
