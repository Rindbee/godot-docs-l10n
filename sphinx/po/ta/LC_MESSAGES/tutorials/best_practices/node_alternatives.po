#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ta\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When and how to avoid using nodes for everything"
msgstr "எல்லாவற்றிற்கும் முனைகளைப் பயன்படுத்துவது எப்போது, எப்படி தவிர்ப்பது"

msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"முனைகள் விளைவாக்கம் செய்ய மலிவானவை, ஆனால் அவை கூட அவற்றின் வரம்புகளைக் கொண்டுள்ளன. ஒரு "
"திட்டத்தில் பல்லாயிரக்கணக்கான முனைகள் இருக்கலாம். அவற்றின் நடத்தை மிகவும் சிக்கலானது "
"என்றாலும், ஒவ்வொன்றும் ஒரு திட்டத்தின் செயல்திறனைச் சேர்க்கிறது."

msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"கோடோட் முனைகள் பயன்படுத்தும் பநிஇ களை உருவாக்குவதற்கு அதிக இலகுரக பொருள்களை "
"வழங்குகிறது. உங்கள் திட்டத்தின் அம்சங்களை நீங்கள் எவ்வாறு உருவாக்க விரும்புகிறீர்கள் என்பதை "
"வடிவமைக்கும்போது இவற்றை மனதில் வைத்துக் கொள்ளுங்கள்."

msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
": ref: `பொருள் <class_object>`: இறுதி இலகுரக பொருள், அசல் பொருள் கையேடு நினைவக "
"நிர்வாகத்தைப் பயன்படுத்த வேண்டும். ஒருவரின் சொந்த தனிப்பயன் தரவு கட்டமைப்புகளை, முனை "
"கட்டமைப்புகளை கூட உருவாக்குவது மிகவும் கடினம் அல்ல, அவை: re: `முனை <class_node>` "
"வகுப்பு."

msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"** எடுத்துக்காட்டு: ** காண்க: ref: `மரம் <class_tree>` முனை. இது தன்னிச்சையான "
"எண்ணிக்கையிலான வரிசைகள் மற்றும் நெடுவரிசைகளைக் கொண்ட உள்ளடக்க அட்டவணைக்கு உயர் மட்ட "
"தனிப்பயனாக்கத்தை ஆதரிக்கிறது. அதன் காட்சிப்படுத்தலை உருவாக்க அது பயன்படுத்தும் தரவு "
"உண்மையில் ஒரு மரம்: குறிப்பு: `ட்ரீயிடெம் <class_treeitem>` பொருள்கள்."

msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"** நன்மைகள்: ** சிறிய ச்கோப் செய்யப்பட்ட பொருள்களுக்கு ஒருவரின் பநிஇ ஐ எளிதாக்குவது அதன் "
"அணுகலை மேம்படுத்தவும் மறு செய்கை நேரத்தை மேம்படுத்தவும் உதவுகிறது. முழு முனை "
"நூலகத்துடன் பணிபுரிவதை விட, ஒருவர் சுருக்கமான பொருள்களை உருவாக்குகிறார், அதில் "
"இருந்து ஒரு முனை பொருத்தமான துணை முனைகளை உருவாக்கி நிர்வகிக்க முடியும்."

msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"அவற்றைக் கையாளும் போது ஒருவர் கவனமாக இருக்க வேண்டும். ஒருவர் ஒரு பொருளை ஒரு மாறியில் "
"சேமிக்க முடியும், ஆனால் இந்த குறிப்புகள் எச்சரிக்கையின்றி செல்லாது. எடுத்துக்காட்டாக, "
"பொருளின் படைப்பாளி அதை எங்கும் நீக்க முடிவு செய்தால், அடுத்தவர் அதை அணுகும்போது இது "
"பிழை நிலையைத் தூண்டும்."

msgid ""
":ref:`RefCounted <class_RefCounted>`: Only a little more complex than "
"Object. They track references to themselves, only deleting loaded memory "
"when no further references to themselves exist. These are useful in the "
"majority of cases where one needs data in a custom class."
msgstr ""
". அவர்கள் தங்களைப் பற்றிய குறிப்புகளைக் கண்காணிக்கிறார்கள், தங்களைப் பற்றிய கூடுதல் "
"குறிப்புகள் இல்லாதபோது ஏற்றப்பட்ட நினைவகத்தை மட்டுமே நீக்குகின்றன. தனிப்பயன் வகுப்பில் "
"ஒருவர் தரவு தேவைப்படும் பெரும்பாலான சந்தர்ப்பங்களில் இவை பயனுள்ளதாக இருக்கும்."

msgid ""
"**Example:** See the :ref:`FileAccess <class_FileAccess>` object. It "
"functions just like a regular Object except that one need not delete it "
"themselves."
msgstr ""
". இது ஒரு வழக்கமான பொருளைப் போலவே செயல்படுகிறது, தவிர ஒருவர் அதை நீக்க தேவையில்லை."

msgid "**Advantages:** same as the Object."
msgstr "** நன்மைகள்: ** பொருளைப் போலவே."

msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than "
"RefCounted. They have the innate ability to serialize/deserialize (i.e. save "
"and load) their object properties to/from Godot resource files."
msgstr ""
". கோடோட் வளக் கோப்புகளிலிருந்து/அவற்றின் பொருள் பண்புகளை/வரிசைப்படுத்துதல் (அதாவது "
"சேமித்து ஏற்றவும்) அவர்கள் உள்ளார்ந்த திறனைக் கொண்டுள்ளனர்."

msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be saved and loaded, therefore they extend from Resource."
msgstr ""
". இவை ஒவ்வொன்றையும் சேமித்து ஏற்றலாம், எனவே அவை வளத்திலிருந்து நீட்டிக்கப்படுகின்றன."

msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/RefCounted, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
". முனைகளுக்கு மேல் வளங்களைப் பயன்படுத்துவதற்கான சூழலில், அவற்றின் முக்கிய நன்மை இன்ச்பெக்டர்-"
"இணக்கத்தன்மையில் உள்ளது. பொருள்/புதுப்பிக்கப்பட்டதைப் போலவே இலகுரக என்றாலும், அவை இன்னும் "
"இன்ச்பெக்டரில் பண்புகளைக் காண்பிக்கலாம் மற்றும் ஏற்றுமதி செய்யலாம். இது பயன்பாட்டினை "
"முன்னணியில் துணை முனைகளைப் போன்ற ஒரு நோக்கத்தை நிறைவு செய்ய அனுமதிக்கிறது, ஆனால் "
"ஒருவர் தங்கள் காட்சிகளில் இதுபோன்ற பல வளங்கள்/முனைகளை வைத்திருக்க திட்டமிட்டால் செயல்திறனை "
"மேம்படுத்தவும்."
