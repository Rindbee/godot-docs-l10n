#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Player scene and input actions"
msgstr "プレイヤーシーンと入力アクション"

msgid ""
"In the next two lessons, we will design the player scene, register custom "
"input actions, and code player movement. By the end, you'll have a playable "
"character that moves in eight directions."
msgstr ""
"次の2つのレッスンでは、プレイヤーのシーンをデザインし、カスタム入力アクション"
"を登録し、プレイヤーの動きをコーディングします。最後には、8方向に動くプレイ可"
"能なキャラクターが完成します。"

msgid ""
"Create a new scene by going to the Scene menu in the top-left and clicking "
"*New Scene*."
msgstr ""
"上部メニュー左の「 *シーン* 」 -> 「 *新規シーン* 」で、新しいシーンを作成し"
"ます。"

msgid "|image0|"
msgstr "\\ |image0|"

msgid "image0"
msgstr "image0"

msgid ""
"Create a :ref:`CharacterBody3D <class_CharacterBody3D>` node as the root"
msgstr ""
"ルートノードとして :ref:`CharacterBody3D <class_CharacterBody3D>` ノードを作"
"成します"

msgid ""
"Name the :ref:`CharacterBody3D <class_CharacterBody3D>` to ``Player``. "
"Character bodies are complementary to the area and rigid bodies used in the "
"2D game tutorial. Like rigid bodies, they can move and collide with the "
"environment, but instead of being controlled by the physics engine, **you** "
"dictate their movement. You will see how we use the node's unique features "
"when we code the jump and squash mechanics."
msgstr ""
"追加した :ref:`CharacterBody3D <class_CharacterBody3D>` ノード名を "
"``Player`` と名付けます。 *キネマティックボディ* (Kinematic Body)というBody "
"Typeは、2D ゲームのチュートリアルで使用したエリアと *リジッドボディ* (Rigid "
"Body)を補完するものです。 *リジッドボディ* と同じように、移動して環境と衝突す"
"ることができますが、物理エンジンによって制御されるのではなく、 *あなた* がそ"
"の動きを指示します。このノードのユニークな機能を、ジャンプする動作と押しつぶ"
"す動作のコーディングで見ていきます。"

msgid ""
"To learn more about the different physics node types, see the :ref:"
"`doc_physics_introduction`."
msgstr ""
"さまざまな物理ノードの種類についての詳細は、 :ref:`doc_physics_introduction` "
"を参照してください。"

msgid ""
"For now, we're going to create a basic rig for our character's 3D model. "
"This will allow us to rotate the model later via code while it plays an "
"animation."
msgstr ""
"とりあえず、キャラクタの3D モデルに対して基本的なリグを作成します。これによっ"
"て、後でアニメーションを再生しながら、コードを使用してモデルを回転させること"
"ができます。"

msgid ""
"Add a :ref:`Node3D <class_Node3D>` node as a child of ``Player`` and name it "
"``Pivot``"
msgstr ""
":ref:`Node3D <class_Node3D>` ノードを ``Player`` の子ノードとして追加し、名前"
"を ``Pivot`` とします"

msgid ""
"Then, in the FileSystem dock, expand the ``art/`` folder by double-clicking "
"it and drag and drop ``player.glb`` onto ``Pivot``."
msgstr ""
"次に、 *ファイルシステム(FileSystem)* ドックで、 ``art/`` フォルダをダブルク"
"リックして展開し、 ``player.glb`` を ``Pivot`` ノードにドラッグ アンド ドロッ"
"プしてください。"

msgid "|image1|"
msgstr "\\ |image1|"

msgid "image1"
msgstr "image1"

msgid ""
"This should instantiate the model as a child of ``Pivot``. You can rename it "
"to ``Character``."
msgstr ""
"これで、 ``Pivot`` の子としてモデルがインスタンス化されるはずです。このノード"
"の名前を ``Character`` に変更しておきましょう。"

msgid "|image2|"
msgstr "\\ |image2|"

msgid "image2"
msgstr "image2"

msgid ""
"As with all kinds of physics nodes, we need a collision shape for our "
"character to collide with the environment. Select the ``Player`` node again "
"and add a child node :ref:`CollisionShape3D <class_CollisionShape3D>`. In "
"the *Inspector*, on the *Shape* property, add a new :ref:`SphereShape3D "
"<class_SphereShape3D>`."
msgstr ""
"あらゆる種類の物理ノードと同様に、キャラクターが環境と衝突するための衝突判定"
"用の型が必要です。 ``Player`` ノードを再度選択し、 :ref:`CollisionShape3D "
"<class_CollisionShape3D>` を追加してください。 *インスペクター(Inspector)* "
"で、 *Shape* プロパティの隣の *<空>* (empty)を押下し、「新規 :ref:"
"`SphereShape3D <class_SphereShape3D>` 」を選択します。"

msgid "The sphere's wireframe appears below the character."
msgstr "球体のワイヤーフレームがキャラクターの下に表示されます。"

msgid "|image3|"
msgstr "\\ |image3|"

msgid "image3"
msgstr "image3"

msgid ""
"It will be the shape the physics engine uses to collide with the "
"environment, so we want it to better fit the 3D model. Make it a bit larger "
"by dragging the orange dot in the viewport. My sphere has a radius of about "
"``0.8`` meters."
msgstr ""
"これは3Dモデルが周りのオブジェクトと衝突するときに、物理エンジンが使用する型"
"になります。なので、3Dモデルにうまくフィットするようにしましょう。ビューポー"
"トでオレンジ色のドットをドラッグして、少し縮小してください。球体の半径は、 "
"``0.8`` メートルほどです。"

msgid ""
"Then, move the collision shape up so its bottom roughly aligns with the "
"grid's plane."
msgstr ""
"次に、この衝突のための型を上に移動して、型の底がグリッドの平面とほぼ一致する"
"ようにします。"

msgid "|image4|"
msgstr "\\ |image4|"

msgid "image4"
msgstr "image4"

msgid ""
"To make moving the shape easier, you can toggle the model's visibility by "
"clicking the eye icon next to the ``Character`` or the ``Pivot`` nodes."
msgstr ""
"モデルの表示/非表示を切り替えるには、 ``Character`` ノードまたは ``Pivot`` "
"ノードの横にある目のアイコンをクリックします。"

msgid "|image5|"
msgstr "\\ |image5|"

msgid "image5"
msgstr "image5"

msgid "Save the scene as ``player.tscn``"
msgstr "``player.tscn`` という名前でシーンを保存しておきましょう"

msgid ""
"With the nodes ready, we can almost get coding. But first, we need to define "
"some input actions."
msgstr ""
"ノードの準備ができたので、ほとんどコーディングできるようになりました。しかし"
"その前に、いくつかの入力アクションを定義する必要があります。"

msgid "Creating input actions"
msgstr "入力アクションの作成"

msgid ""
"To move the character, we will listen to the player's input, like pressing "
"the arrow keys. In Godot, while we could write all the key bindings in code, "
"there's a powerful system that allows you to assign a label to a set of keys "
"and buttons. This simplifies our scripts and makes them more readable."
msgstr ""
"キャラクターを動かすために、矢印キーを押した、などのようなプレイヤーの入力操"
"作を認識する必要があります。Godotでは、全てのキーバインドをコードで書くことも"
"できますが、キーやボタンのセットに操作のラベルを割り当てられる便利な機能があ"
"ります。この機能により、スクリプトをよりシンプルで読みやすくすることができま"
"す。"

msgid ""
"This system is the Input Map. To access its editor, head to the *Project* "
"menu and select *Project Settings*."
msgstr ""
"この機能が「 *インプットマップ* 」です。 *インプットマップ* のエディターにア"
"クセスするには、 *プロジェクト* (Project)メニューから、 *プロジェクト設定..."
"* (Project Settings...)を選択してください。"

msgid "|image6|"
msgstr "|image6|"

msgid "image6"
msgstr "\\ image6"

msgid ""
"At the top, there are multiple tabs. Click on *Input Map*. This window "
"allows you to add new actions at the top; they are your labels. In the "
"bottom part, you can bind keys to these actions."
msgstr ""
"上部に、複数のタブがあります。\\ *インプットマップ*\\ (Input Map)をクリックし"
"ます。このウィンドウでは、上部で新しいアクションを追加することができます。そ"
"れらはあなたのラベルです。下部では、これらのアクションにキーをバインドするこ"
"とができます。"

msgid "|image7|"
msgstr "\\ |image7|"

msgid "image7"
msgstr "\\ image7"

msgid ""
"Godot projects come with some predefined actions designed for user interface "
"design (see above screenshot). These will become visible if you enable the "
"*Show Built-in Actions* toggle. We could use these here, but instead we're "
"defining our own to support gamepads. Leave *Show Built-in Actions* disabled."
msgstr ""
"Godot プロジェクトには、ユーザーインターフェイスのために設計された、定義済み"
"のアクションがいくつか用意されています（上のスクリーンショット参照）。これら"
"は、「 *組み込みアクションを表示 (Show Built-in Actions)* 」をオンにすると表"
"示されます。ここで定義済みのアクションを使うこともできますが、ゲームパッドを"
"サポートするため、代わりに独自のアクションを定義します。「 *組み込みアクショ"
"ンを表示 (Show Built-in Actions)* 」はオフのままにしておいてください。"

msgid ""
"We're going to name our actions ``move_left``, ``move_right``, "
"``move_forward``, ``move_back``, and ``jump``."
msgstr ""
"これから定義するアクションには ``move_left`` 、 ``move_right`` 、 "
"``move_forward`` 、 ``move_back`` 、 そして ``jump`` という名前をつけてみま"
"しょう。"

msgid "To add an action, write its name in the bar at the top and press Enter."
msgstr ""
"アクションを追加するには、上部の「 *新しいアクションの追加* 」バーにアクショ"
"ンの名前を入力して、 ``追加`` または :kbd:`Enter` キーを押します。"

msgid "|image8|"
msgstr "\\ |image8|"

msgid "image8"
msgstr "\\ image8"

msgid "Create the following five actions:"
msgstr "以下の5つのアクションを作成してください:"

msgid "|image9|"
msgstr "\\ |image9|"

msgid "image9"
msgstr "\\ image9"

msgid ""
"To bind a key or button to an action, click the \"+\" button to its right. "
"Do this for ``move_left``. Press the left arrow key and click *OK*."
msgstr ""
"キーやボタンをアクションに紐づけるには、その右側にある \"+\" ボタンをクリック"
"します。 ``move_left`` に対してこの操作を行い、「 *キーボードのキー* 」内のメ"
"ニューにある *Left* を選択して ``OK`` ボタンを押します。"

msgid "Bind also the :kbd:`A` key, onto the action ``move_left``."
msgstr ""
"同様に、 :kbd:`A` キーも、 ``move_left`` のアクションに紐づけておきましょう。"

msgid "|image12|"
msgstr "\\ |image12|"

msgid "image12"
msgstr "\\ image12"

msgid ""
"Let's now add support for a gamepad's left joystick. Click the \"+\" button "
"again but this time, select *Manual Selection -> Joypad Axes*."
msgstr ""
"次に、ゲームパッドの左ジョイスティックの操作も追加しましょう。もう一度 \"+\" "
"ボタンをクリックしますが、今度は *ジョイパッドの軸* (Joy Axis)のメニューを開"
"きます。"

msgid "Select the negative X axis of the left joystick."
msgstr ""
"「 *ジョイパッドの軸 0 - (左スティック 左, ジョイスティック 0 左)* 」を選択し"
"てください。"

msgid "Leave the other values as default and press *OK*"
msgstr "他の値はデフォルトのままにして、 ``OK`` を押しましょう"

msgid ""
"If you want controllers to have different input actions, you should use the "
"Devices option in Additional Options. Device 0 corresponds to the first "
"plugged gamepad, Device 1 corresponds to the second plugged gamepad, and so "
"on."
msgstr ""
"コントローラごとに異なる入力アクションを紐づけたい場合には、「 *追加のオプ"
"ション* (Additional Options)」の「 *デバイス* (Devices)」オプションを使用しま"
"す。デバイス 0は最初に接続されたゲームパッドに対応し、デバイス 1は2番目に接続"
"されたゲームパッドに対応します。"

msgid ""
"Do the same for the other input actions. For example, bind the right arrow, "
"D, and the left joystick's positive axis to ``move_right``. After binding "
"all keys, your interface should look like this."
msgstr ""
"他の入力アクションも同じように紐づけます。例えば、右方向キー、D、ジョイス"
"ティックの左軸を右側に倒した時の操作は ``move_right`` にバインドします。すべ"
"てのキーをバインドすると、インプットマップは次のようになります。"

msgid "|image15|"
msgstr "\\ |image15|"

msgid "image15"
msgstr "\\ image15"

msgid ""
"The final action to set up is the ``jump`` action. Bind the Space key and "
"the gamepad's A button."
msgstr ""
"最後に作成するアクションは ``jump`` です。 :kbd:`Space` キーとゲームパッドのA"
"ボタンをバインドして下さい。"

msgid "|image16|"
msgstr "\\ |image16|"

msgid "image16"
msgstr "\\ image16"

msgid "Your jump input action should look like this."
msgstr "ジャンプ入力のアクションはこのようになるはずです。"

msgid "|image18|"
msgstr "\\ |image18|"

msgid "image18"
msgstr "image18"

msgid ""
"That's all the actions we need for this game. You can use this menu to label "
"any groups of keys and buttons in your projects."
msgstr ""
"これで、このゲームに必要なアクションが用意できました。このメニューを使って、"
"プロジェクト内のキーやボタンのグループにラベルを付けることができます。"

msgid "In the next part, we'll code and test the player's movement."
msgstr "次のパートでは、プレーヤーの動きをコーディングしてテストしていきます。"
