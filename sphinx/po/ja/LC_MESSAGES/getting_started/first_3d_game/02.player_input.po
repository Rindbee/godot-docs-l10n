#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Player scene and input actions"
msgstr "プレイヤーシーンと入力アクション"

msgid ""
"In the next two lessons, we will design the player scene, register custom "
"input actions, and code player movement. By the end, you'll have a playable "
"character that moves in eight directions."
msgstr ""
"次の2つのレッスンでは、プレイヤーのシーンをデザインし、カスタム入力アクション"
"を登録し、プレイヤーの動きをコーディングします。最後には、8方向に動くプレイ可"
"能なキャラクターが完成します。"

msgid ""
"To learn more about the different physics node types, see "
"the :ref:`doc_physics_introduction`."
msgstr ""
"さまざまな物理ノードの種類についての詳細は、 :ref:`doc_physics_introduction` "
"を参照してください。"

msgid ""
"For now, we're going to create a basic rig for our character's 3D model. "
"This will allow us to rotate the model later via code while it plays an "
"animation."
msgstr ""
"とりあえず、キャラクタの3D モデルに対して基本的なリグを作成します。これによっ"
"て、後でアニメーションを再生しながら、コードを使用してモデルを回転させること"
"ができます。"

msgid ""
"Then, in the FileSystem dock, expand the ``art/`` folder by double-clicking "
"it and drag and drop ``player.glb`` onto ``Pivot``."
msgstr ""
"次に、 *ファイルシステム(FileSystem)* ドックで、 ``art/`` フォルダをダブルク"
"リックして展開し、 ``player.glb`` を ``Pivot`` ノードにドラッグ アンド ドロッ"
"プしてください。"

msgid ""
"This should instantiate the model as a child of ``Pivot``. You can rename it "
"to ``Character``."
msgstr ""
"これで、 ``Pivot`` の子としてモデルがインスタンス化されるはずです。このノード"
"の名前を ``Character`` に変更しておきましょう。"

msgid ""
"The ``.glb`` files contain 3D scene data based on the open source glTF 2.0 "
"specification. They're a modern and powerful alternative to a proprietary "
"format like FBX, which Godot also supports. To produce these files, we "
"designed the model in `Blender 3D <https://www.blender.org/>`__ and exported "
"it to glTF."
msgstr ""
"``.glb`` ファイルは、オープンソースの glTF 2.0 仕様に基づく 3D シーン データ"
"を含んでいます。これは、FBX のような独自のフォーマットに代わる、現代的で強力"
"なフォーマットで、Godot もこれをサポートしています。これらのファイルを作成す"
"るために、 `Blender 3D <https://www.blender.org/>`__ でモデルを設計し、それ"
"を glTF にエクスポートしました。"

msgid "The sphere's wireframe appears below the character."
msgstr "球体のワイヤーフレームがキャラクターの下に表示されます。"

msgid ""
"It will be the shape the physics engine uses to collide with the "
"environment, so we want it to better fit the 3D model. Make it a bit larger "
"by dragging the orange dot in the viewport. My sphere has a radius of about "
"``0.8`` meters."
msgstr ""
"これは3Dモデルが周りのオブジェクトと衝突するときに、物理エンジンが使用する型"
"になります。なので、3Dモデルにうまくフィットするようにしましょう。ビューポー"
"トでオレンジ色のドットをドラッグして、少し縮小してください。球体の半径は、 "
"``0.8`` メートルほどです。"

msgid ""
"Then, move the collision shape up so its bottom roughly aligns with the "
"grid's plane."
msgstr ""
"次に、この衝突のための型を上に移動して、型の底がグリッドの平面とほぼ一致する"
"ようにします。"

msgid ""
"With the nodes ready, we can almost get coding. But first, we need to define "
"some input actions."
msgstr ""
"ノードの準備ができたので、ほとんどコーディングできるようになりました。しかし"
"その前に、いくつかの入力アクションを定義する必要があります。"

msgid "Creating input actions"
msgstr "入力アクションの作成"

msgid ""
"To move the character, we will listen to the player's input, like pressing "
"the arrow keys. In Godot, while we could write all the key bindings in code, "
"there's a powerful system that allows you to assign a label to a set of keys "
"and buttons. This simplifies our scripts and makes them more readable."
msgstr ""
"キャラクターを動かすために、矢印キーを押した、などのようなプレイヤーの入力操"
"作を認識する必要があります。Godotでは、全てのキーバインドをコードで書くことも"
"できますが、キーやボタンのセットに操作のラベルを割り当てられる便利な機能があ"
"ります。この機能により、スクリプトをよりシンプルで読みやすくすることができま"
"す。"

msgid ""
"We're going to name our actions ``move_left``, ``move_right``, "
"``move_forward``, ``move_back``, and ``jump``."
msgstr ""
"これから定義するアクションには ``move_left`` 、 ``move_right`` 、 "
"``move_forward`` 、 ``move_back`` 、 そして ``jump`` という名前をつけてみま"
"しょう。"

msgid "Create the following five actions:"
msgstr "以下の5つのアクションを作成してください:"

msgid "Bind also the :kbd:`A` key, onto the action ``move_left``."
msgstr ""
"同様に、 :kbd:`A` キーも、 ``move_left`` のアクションに紐づけておきましょう。"

msgid ""
"If you want controllers to have different input actions, you should use the "
"Devices option in Additional Options. Device 0 corresponds to the first "
"plugged gamepad, Device 1 corresponds to the second plugged gamepad, and so "
"on."
msgstr ""
"コントローラごとに異なる入力アクションを紐づけたい場合には、「 *追加のオプ"
"ション* (Additional Options)」の「 *デバイス* (Devices)」オプションを使用しま"
"す。デバイス 0は最初に接続されたゲームパッドに対応し、デバイス 1は2番目に接続"
"されたゲームパッドに対応します。"

msgid ""
"Do the same for the other input actions. For example, bind the right arrow, "
"D, and the left joystick's positive axis to ``move_right``. After binding "
"all keys, your interface should look like this."
msgstr ""
"他の入力アクションも同じように紐づけます。例えば、右方向キー、D、ジョイス"
"ティックの左軸を右側に倒した時の操作は ``move_right`` にバインドします。すべ"
"てのキーをバインドすると、インプットマップは次のようになります。"

msgid "Your jump input action should look like this."
msgstr "ジャンプ入力のアクションはこのようになるはずです。"

msgid ""
"That's all the actions we need for this game. You can use this menu to label "
"any groups of keys and buttons in your projects."
msgstr ""
"これで、このゲームに必要なアクションが用意できました。このメニューを使って、"
"プロジェクト内のキーやボタンのグループにラベルを付けることができます。"

msgid "In the next part, we'll code and test the player's movement."
msgstr "次のパートでは、プレーヤーの動きをコーディングしてテストしていきます。"
