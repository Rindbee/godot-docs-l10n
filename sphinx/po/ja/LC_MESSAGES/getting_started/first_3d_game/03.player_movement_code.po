#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Moving the player with code"
msgstr "プログラムでプレイヤーを動かす"

msgid ""
"It's time to code! We're going to use the input actions we created in the "
"last part to move the character."
msgstr ""
"いよいよコーディングです。前編で作成した入力アクションを使って、キャラクター"
"を動かしていきます。"

msgid "For this project, we will be following the Godot naming conventions."
msgstr "このプロジェクトでは、Godotの命名規則に従います。"

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: クラス(ノード)はPascalCaseを使用し、変数と関数はsnake_caseを使"
"用し、定数はALL_CAPSを使用します(\\ :ref:`doc_gdscript_styleguide`\\ を参"
"照)。"

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: クラス、export変数、メソッドはPascalCaseを使用し、プライベートフィー"
"ルドは _camelCase を使用し、ローカル変数とパラメーターは camelCase を使用しま"
"す(\\ :ref:`doc_c_sharp_styleguide`\\ を参照)。シグナルを接続するときは、メ"
"ソッド名を正確に入力してください。"

msgid ""
"Right-click the ``Player`` node and select *Attach Script* to add a new "
"script to it. In the popup, set the *Template* to *Empty* before pressing "
"the *Create* button. We set it to *Empty* because we want to write our own "
"code for player movement."
msgstr ""
"新しいスクリプトを追加するために、 ``Player`` ノードを右クリックし、 ``スクリ"
"プトをアタッチ…`` (Attach Script)を選択します。「ノードにスクリプトをアタッチ"
"する」ポップアップ画面で、 ``テンプレート`` (Template)横のチェックボックスを"
"オフにし、テンプレートを ``空`` (Empty)にセットしてから ``作成`` (Create)ボタ"
"ンを押してください。"

msgid "|image0|"
msgstr "\\ |image0|"

msgid "image0"
msgstr "image0"

msgid ""
"Let's start with the class's properties. We're going to define a movement "
"speed, a fall acceleration representing gravity, and a velocity we'll use to "
"move the character."
msgstr ""
"まず、このクラスのプロパティから始めましょう。移動速度(speed)、重力を表す落下"
"加速度(gravity)、そしてキャラクターを移動させるのに使う速度(velocity)を定義し"
"ていきます。"

msgid ""
"These are common properties for a moving body. The ``target_velocity`` is a :"
"ref:`3D vector <class_Vector3>` combining a speed with a direction. Here, we "
"define it as a property because we want to update and reuse its value across "
"frames."
msgstr ""
"これらは移動する物体に共通するプロパティです。 ``target_velocity`` は、速度と"
"方向を組み合わせた :ref:`3Dベクトル <class_Vector3>` です。ここでは、フレーム"
"間で値を更新して再利用したいので、プロパティとして定義しています。"

msgid ""
"The values are quite different from 2D code because distances are in meters. "
"While in 2D, a thousand units (pixels) may only correspond to half of your "
"screen's width, in 3D, it's a kilometer."
msgstr ""
"距離はメートル単位なので、2D コードとは値がかなり異なります。2D では、1000単"
"位（ピクセル）は画面の幅の半分にしか相当しませんが、3D では 1km になります。"

msgid ""
"Let's code the movement. We start by calculating the input direction vector "
"using the global ``Input`` object, in ``_physics_process()``."
msgstr ""
"それでは、移動をコーディングしていきましょう。まず、グローバルな ``Input`` オ"
"ブジェクトを使って、 ``_physics_process()`` 内で入力方向ベクトルを計算すると"
"ころから始めます。"

msgid ""
"To learn more about the difference between ``_process()`` and "
"``_physics_process()``, see :ref:`doc_idle_and_physics_processing`."
msgstr ""
"\\ ``_process()``\\ と\\ ``_physics_process()``\\ の違いについては、 :ref:"
"`doc_idle_and_physics_processing` を参照してください。"

msgid ""
"We start by initializing a ``direction`` variable to ``Vector3.ZERO``. Then, "
"we check if the player is pressing one or more of the ``move_*`` inputs and "
"update the vector's ``x`` and ``z`` components accordingly. These correspond "
"to the ground plane's axes."
msgstr ""
"まず、\\ ``direction``\\ 変数を \\ ``Vector3.ZERO``\\ に初期化することからは"
"じめます。次に、プレイヤーが\\ ``move_*``\\ の入力を一つ以上押しているかどう"
"かを確認し、ベクトルの\\ ``x``\\ 、\\ ``z``\\ 成分を適宜に更新します。これら"
"の成分は地平面の軸に相当します。"

msgid ""
"These four conditions give us eight possibilities and eight possible "
"directions."
msgstr "この4つの条件は8つの可能性そして8つの可能な方向を与えます。"

msgid ""
"In case the player presses, say, both W and D simultaneously, the vector "
"will have a length of about ``1.4``. But if they press a single key, it will "
"have a length of ``1``. We want the vector's length to be consistent, and "
"not move faster diagonally. To do so, we can call its ``normalized()`` "
"method."
msgstr ""
"たとえば、プレイヤーが W と D の両方を同時に押した場合、ベクトルの長さは\\ "
"``1.4``\\ 程度になります。しかし、1 つのキーを押した場合は、\\ ``1``\\ の長さ"
"になります。ベクトルの長さが一定であるようにしたいので、そのために\\ "
"``normalized()``\\ メソッドを呼び出します。"

msgid ""
"Here, we only normalize the vector if the direction has a length greater "
"than zero, which means the player is pressing a direction key."
msgstr ""
"ここでは、方向が0より大きい長さを持つ場合、つまりプレイヤーが方向キーを押して"
"いる場合にのみ、このベクトルを正規化(normalize)します。"

msgid ""
"We compute the direction the ``$Pivot`` is looking by creating a :ref:`Basis "
"<class_Basis>` that looks in the ``direction`` direction."
msgstr ""
"``$Pivot`` が向いている方向を、 ``direction`` 方向を向く :ref:`Basis "
"<class_Basis>` を生成することで計算します。"

msgid ""
"Then, we update the velocity. We have to calculate the ground velocity and "
"the fall speed separately. Be sure to go back one tab so the lines are "
"inside the ``_physics_process()`` function but outside the condition we just "
"wrote above."
msgstr ""
"次に、速度(velocity)を更新します。地面での速度と落下速度を別々に計算する必要"
"があります。字下げを1タブ戻し、プログラム行が\\ ``_physics_process()``\\ 関数"
"の中にありつつ、上で書いた条件文の外にあるようにしてください。"

msgid ""
"The ``CharacterBody3D.is_on_floor()`` function returns ``true`` if the body "
"collided with the floor in this frame. That's why we apply gravity to the "
"``Player`` only while it is in the air."
msgstr ""
"``CharacterBody3D.is_on_floor()`` 関数はオブジェクトが床と接触しているフレー"
"ムで ``true`` の値を返します。そのため、 ``Player`` が空中にいる間だけ重力を"
"適用すればよいのです。"

msgid ""
"For the vertical velocity, we subtract the fall acceleration multiplied by "
"the delta time every frame. This line of code will cause our character to "
"fall in every frame, as long as it is not on or colliding with the floor."
msgstr ""
"垂直方向の速度については、毎フレーム落下加速度にデルタタイムを掛けたものを引"
"きます。このコード行でキャラクターは床に乗るか接触していない間は毎フレーム落"
"下するようになります。"

msgid ""
"The physics engine can only detect interactions with walls, the floor, or "
"other bodies during a given frame if movement and collisions happen. We will "
"use this property later to code the jump."
msgstr ""
"物理エンジンは、移動および衝突が起こった場合にのみ、特定のフレームにおける"
"壁、床、または他の物体との相互作用を検出することができます。 後でこのプロパ"
"ティを使ってジャンプをコーディングします。"

msgid ""
"On the last line, we call ``CharacterBody3D.move_and_slide()`` which is a "
"powerful method of the ``CharacterBody3D`` class that allows you to move a "
"character smoothly. If it hits a wall midway through a motion, the engine "
"will try to smooth it out for you. It uses the *velocity* value native to "
"the :ref:`CharacterBody3D <class_CharacterBody3D>`"
msgstr ""
"最後の行で\\ ``CharacterBody3D.move_and_slide()``\\ を呼び出しています。これ"
"は\\ ``CharacterBody3D``\\ クラスの強力なメソッドで、キャラクターをスムーズに"
"動かすことができます。動きの途中で壁にぶつかっても、エンジンがスムーズな動き"
"にしようとします。これは\\ :ref:`CharacterBody3D <class_CharacterBody3D>`\\ "
"の\\ *velocity*\\ の値を使用します"

msgid "And that's all the code you need to move the character on the floor."
msgstr ""
"そして、これが床の上でキャラクターを動かすために必要なコードのすべてです。"

msgid "Here is the complete ``player.gd`` code for reference."
msgstr "参考までに、 ``player.gd`` の全体のコードを以下に示します。"

msgid "Testing our player's movement"
msgstr "プレイヤーの動きをテストする"

msgid ""
"We're going to put our player in the ``Main`` scene to test it. To do so, we "
"need to instantiate the player and then add a camera. Unlike in 2D, in 3D, "
"you won't see anything if your viewport doesn't have a camera pointing at "
"something."
msgstr ""
"これから、 ``Main`` のシーンにプレーヤーを置いてテストしてみましょう。そのた"
"めには、プレーヤーをインスタンス化し、カメラを追加する必要があります。2D とは"
"異なり、3D では、ビューポートにカメラがない場合は何も見えません。"

msgid ""
"Save your ``Player`` scene and open the ``Main`` scene. You can click on the "
"*Main* tab at the top of the editor to do so."
msgstr ""
"``Player`` のシーンを保存し、 ``Main`` のシーンを開いてみてください。エディタ"
"上部の\\ *Main*\\ タブをクリックすると開けます。"

msgid "|image1|"
msgstr "\\ |image1|"

msgid "image1"
msgstr "image1"

msgid ""
"If you closed the scene before, head to the *FileSystem* dock and double-"
"click ``main.tscn`` to re-open it."
msgstr ""
"シーンを閉じていた場合は、\\ *ファイルシステム*\\ (FileSystem)ドックで、\\ "
"``main.tscn``\\ をダブルクリックして再び開いてください。"

msgid ""
"To instantiate the ``Player``, right-click on the ``Main`` node and select "
"*Instantiate Child Scene*."
msgstr ""
"``Player`` をインスタンス化するには、 ``Main`` ノードを右クリックして、 ``子"
"シーンをインスタンス化…`` (Instantiate Child Scene)を選択してください。"

msgid "|image2|"
msgstr "\\ |image2|"

msgid "image2"
msgstr "image2"

msgid ""
"In the popup, double-click ``player.tscn``. The character should appear in "
"the center of the viewport."
msgstr ""
"ポップアップウィンドウの中の、 ``Player.tscn`` をダブルクリックします。キャラ"
"クターがビューポートの中央に表示されるはずです。"

msgid "Adding a camera"
msgstr "カメラを追加する"

msgid ""
"Let's add the camera next. Like we did with our *Player*\\ 's *Pivot*, we're "
"going to create a basic rig. Right-click on the ``Main`` node again and "
"select *Add Child Node*. Create a new :ref:`Marker3D <class_Marker3D>`, and "
"name it ``CameraPivot``. Select ``CameraPivot`` and add a child node :ref:"
"`Camera3D <class_Camera3D>` to it. Your scene tree should look similar to "
"this."
msgstr ""
"次にカメラを追加しましょう。\\ *Player*\\ の\\ *Pivot*\\ で行ったように、基本"
"的なリグを作成することにします。 ``Main`` ノードをもう一度右クリックし、今度"
"は\\ *子ノードを追加*\\ (Add Child Node)を選択します。新しい :ref:`Marker3D "
"<class_Marker3D>` を作成し、それを ``CameraPivot`` と名づけてください。 "
"``CameraPivot`` を選択し、 :ref:`Camera3D <class_Camera3D>` を子ノードとして"
"追加してください。シーン ツリーは、次のようになります。"

msgid "|image3|"
msgstr "\\ |image3|"

msgid "image3"
msgstr "image3"

msgid ""
"Notice the *Preview* checkbox that appears in the top-left of the 3D view "
"when you have the *Camera* selected. You can click it to preview the in-game "
"camera projection."
msgstr ""
"\\ *Camera*\\ を選択しているとき3Dビューの左上に表示される \\ *プレビュー*\\ "
"(Preview)チェック ボックスに注目してください。これをクリックすると、ゲーム内"
"のカメラの投影をプレビューすることができます。"

msgid "|image4|"
msgstr "\\ |image4|"

msgid "image4"
msgstr "image4"

msgid ""
"We're going to use the *Pivot* to rotate the camera as if it was on a crane. "
"Let's first split the 3D view to be able to freely navigate the scene and "
"see what the camera sees."
msgstr ""
"ここでは、\\ *Pivot*\\ を使用して、クレーンに乗っているかのようにカメラを回転"
"させることにします。まず、3D ビューを分割して、シーンを自由に移動できるように"
"し、カメラが見ているものを確認できるようにしましょう。"

msgid ""
"In the toolbar right above the viewport, click on *View*, then *2 "
"Viewports*. You can also press :kbd:`Ctrl + 2` (:kbd:`Cmd + 2` on macOS)."
msgstr ""
"ビューポートのすぐ上のツールバーで、\\ *ビュー*\\ (View)、そして\\ *2 ビュー"
"ポート*\\ (2 Viewports)をクリックしてください。また、:kbd:`Ctrl + 2` (macOS"
"は :kbd:`Cmd + 2` )を押すことも可能です。"

msgid "|image11|"
msgstr "\\ |image11|"

msgid "image11"
msgstr "\\ image11"

msgid "|image5|"
msgstr "\\ |image5|"

msgid "image5"
msgstr "image5"

msgid ""
"On the bottom view, select your :ref:`Camera3D <class_Camera3D>` and turn on "
"camera Preview by clicking the checkbox."
msgstr ""
"下部のビューで :ref:`Camera3D <class_Camera3D>` を選択し、プレビューのチェッ"
"クボックスをクリックしてカメラプレビューをオンにします。"

msgid "|image6|"
msgstr "|image6|"

msgid "image6"
msgstr "\\ image6"

msgid ""
"In the top view, make sure your *Camera3D* is selected and move the camera "
"about ``19`` units on the Z axis (drag the blue arrow)."
msgstr ""
"上部のビューで、 *Camera3D* が選択されていることを確認し、カメラをZ軸方向に"
"\\ ``19``\\ ユニットほど移動させます（青い矢印をドラッグします）。"

msgid "|image7|"
msgstr "\\ |image7|"

msgid "image7"
msgstr "\\ image7"

msgid ""
"Here's where the magic happens. Select the *CameraPivot* and rotate it "
"``-45`` degrees around the X axis (using the red circle). You'll see the "
"camera move as if it was attached to a crane."
msgstr ""
"ここでマジックが起こります。\\ *CameraPivot*\\ を選択し、X 軸の周りで（赤い円"
"を使用して）\\ ``-45``\\ 度回転させます。カメラがクレーンに取り付けられている"
"ように動くのがわかると思います。"

msgid "|image8|"
msgstr "\\ |image8|"

msgid "image8"
msgstr "\\ image8"

msgid ""
"You can run the scene by pressing :kbd:`F6` and press the arrow keys to move "
"the character."
msgstr ""
":kbd:`F6` を押してシーンを実行し、矢印キーを押してキャラクターを移動すること"
"ができます。"

msgid "|image9|"
msgstr "\\ |image9|"

msgid "image9"
msgstr "\\ image9"

msgid ""
"We can see some empty space around the character due to the perspective "
"projection. In this game, we're going to use an orthographic projection "
"instead to better frame the gameplay area and make it easier for the player "
"to read distances."
msgstr ""
"透視投影(Perspective)を使用しているため、キャラクターの周囲の何もない空間が見"
"えています。このゲームでは、ゲームプレイエリアをより適切に枠に収め、プレイ"
"ヤーが距離を読みやすくするために、代わりに平行投影(Orthographic)を使用するこ"
"とにします。"

msgid ""
"Select the *Camera* again and in the *Inspector*, set the *Projection* to "
"*Orthogonal* and the *Size* to ``19``. The character should now look flatter "
"and the ground should fill the background."
msgstr ""
"再び\\ *Camera*\\ を選択し、\\ *インスペクター*\\ (Inspector)で、\\ "
"*Projection*\\ を \\ *Orthogonal*\\ に、\\ *Size*\\ を\\ ``19``\\ に設定しま"
"す。これで、キャラクターはより平坦に見え、地面が背景を埋めるようになるはずで"
"す。"

msgid ""
"When using an orthogonal camera in Godot 4, directional shadow quality is "
"dependent on the camera's *Far* value. The higher the *Far* value, the "
"further away the camera will be able to see. However, higher *Far* values "
"also decrease shadow quality as the shadow rendering has to cover a greater "
"distance."
msgstr ""
"Godot 4 でオルソグラフィックカメラ（平行に投影するカメラ）を使用する場合、"
"ディレクショナルライト（ライト1灯でシーン全体を照らすライト）のシャドウの品質"
"はカメラの *Far* 値に依存します。 *Far* 値が高いほど、カメラはより遠くを見る"
"ことができます。ただし、 *Far* 値が高いほど、影のレンダリングがより長い距離を"
"カバーする必要があるため、（カメラに近いシャドウマップのピクセルが拡大されて"
"しまい）影の品質も低下します。"

msgid ""
"If directional shadows look too blurry after switching to an orthogonal "
"camera, decrease the camera's *Far* property to a lower value such as "
"``100``. Don't decrease this *Far* property too much, or objects in the "
"distance will start disappearing."
msgstr ""
"平行投影に切り替えた後、ディレクショナルシャドウがぼやけて見える場合は、カメ"
"ラの *Far* プロパティを ``100`` などの低い値に下げてください。 *Far* プロパ"
"ティを小さくしすぎないように注意してください。この *Far* プロパティの値を下げ"
"すぎると、遠くのオブジェクトが表示されなくなります。"

msgid "|image10|"
msgstr "\\ |image10|"

msgid "image10"
msgstr "\\ image10"

msgid ""
"Test your scene and you should be able to move in all 8 directions and not "
"glitch through the floor!"
msgstr ""
"シーンを実行してみましょう。8方向全てに移動ができ、床をすり抜けないことが確認"
"できるはずです！"

msgid ""
"Ultimately, we have both player movement and the view in place. Next, we "
"will work on the monsters."
msgstr ""
"最終的に、プレイヤーの動きとビューの両方が整いました。次は、モンスターを作成"
"していきます。"
