#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "|image0|"
msgstr "\\ |image0|"

msgid "image0"
msgstr "image0"

msgid "|image1|"
msgstr "\\ |image1|"

msgid "image1"
msgstr "image1"

msgid ""
"Here is a trick you can use to make the collisions only happen when the "
"player is on the ground or close to it. You can reduce the cylinder's height "
"and move it up to the top of the character. This way, when the player jumps, "
"the shape will be too high up for the enemies to collide with it."
msgstr ""
"ここでは、プレイヤーが地面やそれに近いところにいるときだけ衝突が起こるように"
"するトリックを使います。シリンダーの高さを小さくして、キャラクターの上部に移"
"動させます。こうすることで、プレイヤーがジャンプしたときに、形状が高すぎて敵"
"が衝突しにくくなります。"

msgid "|image2|"
msgstr "\\ |image2|"

msgid "image2"
msgstr "image2"

msgid ""
"You also want the cylinder to be wider than the sphere. This way, the player "
"gets hit before colliding and being pushed on top of the monster's collision "
"box."
msgstr ""
"また、シリンダーの幅は球よりも広くします。こうすると、衝突してモンスターのコ"
"リジョンボックスの上に押し出される前に、プレイヤーは当たることになります。"

msgid "The wider the cylinder, the more easily the player will get killed."
msgstr "シリンダーの幅が広いほど、プレイヤーは殺されやすくなります。"

msgid ""
"Next, select the ``MobDetector`` node again, and in the *Inspector*, turn "
"**off** its *Monitorable* property. This makes it so other physics nodes "
"cannot detect the area. The complementary *Monitoring* property allows it to "
"detect collisions. Then, remove the *Collision -> Layer* and set the mask to "
"the \"enemies\" layer."
msgstr ""
"次に、\\ *MobDetector*\\ ノードを再度選択し、\\ *インスペクター*\\ "
"(Inspector)で、\\ *Monitorable*\\ プロパティをオフにしてください。これによ"
"り、他の物理ノードがその領域を検出できないようにします。補完的な\\ "
"*Monitoring*\\ プロパティにより、衝突を検出することができます。次に、\\ "
"*Collision -> Layer*\\ でレイヤーを削除して、敵レイヤーにマスクを設定します。"

msgid "|image3|"
msgstr "\\ |image3|"

msgid "image3"
msgstr "image3"

msgid ""
"When areas detect a collision, they emit signals. We're going to connect one "
"to the ``Player`` node. Select ``MobDetector`` and go to *Inspector*'s "
"*Node* tab, double-click the ``body_entered`` signal and connect it to the "
"``Player``"
msgstr ""
"領域が衝突を検出するとシグナルを発信し、それを ``Player`` ノードに接続しま"
"す。 ``MobDetector`` を選択してから、 *Inspector* の *Node* タブに移動し、 "
"``body_entered`` シグナルをダブルクリックして ``Player`` に接続します。"

msgid "|image4|"
msgstr "\\ |image4|"

msgid "image4"
msgstr "image4"

msgid ""
"The *MobDetector* will emit ``body_entered`` when a :ref:`CharacterBody3D "
"<class_CharacterBody3D>` or a :ref:`RigidBody3D <class_RigidBody3D>` node "
"enters it. As it only masks the \"enemies\" physics layers, it will only "
"detect the ``Mob`` nodes."
msgstr ""
":ref:`CharacterBody3D <class_CharacterBody3D>` または :ref:`RigidBody3D "
"<class_RigidBody3D>` ノードが入った際に、 *MobDetector* は ``body_entered`` "
"を発信します。\"敵\" の物理レイヤーをマスクするだけなので、 ``Mob`` ノードの"
"みが検出されます."

msgid ""
"Code-wise, we're going to do two things: emit a signal we'll later use to "
"end the game and destroy the player. We can wrap these operations in a "
"``die()`` function that helps us put a descriptive label on the code."
msgstr ""
"コード的には、2つのことをします：ゲームを終了するために後で使用するシグナルを"
"発信することと、プレーヤーを破壊することです。これらの操作を\\ ``die()``\\ 関"
"数でラップすることにより、コードに説明的なラベルを付けることができます。"

msgid "|image5|"
msgstr "\\ |image5|"

msgid "image5"
msgstr "image5"

msgid "Starting with ``main.gd``."
msgstr "``main.gd`` からはじめます。"

msgid "Translation status"
msgstr "翻訳ステータス"
