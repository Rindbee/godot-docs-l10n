#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Killing the player"
msgstr "プレイヤーに死亡判定を設定する"

msgid ""
"We can kill enemies by jumping on them, but the player still can't die. "
"Let's fix this."
msgstr ""
"敵キャラクターの上にジャンプすることで敵を倒すことはできるようになりました"
"が、プレイヤーはゲームオーバーになりません。これを修正していきましょう。"

msgid ""
"We want to detect being hit by an enemy differently from squashing them. We "
"want the player to die when they're moving on the floor, but not if they're "
"in the air. We could use vector math to distinguish the two kinds of "
"collisions. Instead, though, we will use an :ref:`Area3D <class_Area3D>` "
"node, which works well for hitboxes."
msgstr ""
"敵に殴られた場合と押し潰された場合とで、検知の仕方を変えたいです。プレイヤー"
"が床を動いているときは死にますが、空中にいるときは倒されないようにしたいで"
"す。2種類の衝突を区別するためにベクトル演算ノードを使うことも可能です。しか"
"し、ここでは代わりに :ref:`Area3D <class_Area3D>` ノードを使ってみましょう。"
"こちらのノードのほうが Hitbox に適しています。"

msgid "Hitbox with the Area node"
msgstr "Areaノードによるヒットボックス"

msgid ""
"Head back to the ``player.tscn`` scene and add a new child node :ref:`Area3D "
"<class_Area3D>`. Name it ``MobDetector`` Add a :ref:`CollisionShape3D "
"<class_CollisionShape3D>` node as a child of it."
msgstr ""
"\\ ``player.tscn`` シーンに戻り、新しい子ノード :ref:`Area3D <class_Area3D>` "
"を追加します。\\ ``MobDetector`` と名付け、 :ref:`CollisionShape3D "
"<class_CollisionShape3D>` ノードをこれの子ノードとして追加します。"

msgid "|image0|"
msgstr "\\ |image0|"

msgid "image0"
msgstr "image0"

msgid "In the *Inspector*, assign a cylinder shape to it."
msgstr ""
"\\ *インスペクター*\\ (Inspector)で、これにシリンダーの形状を割り当てます。"

msgid "|image1|"
msgstr "\\ |image1|"

msgid "image1"
msgstr "image1"

msgid ""
"Here is a trick you can use to make the collisions only happen when the "
"player is on the ground or close to it. You can reduce the cylinder's height "
"and move it up to the top of the character. This way, when the player jumps, "
"the shape will be too high up for the enemies to collide with it."
msgstr ""
"ここでは、プレイヤーが地面やそれに近いところにいるときだけ衝突が起こるように"
"するトリックを使います。シリンダーの高さを小さくして、キャラクターの上部に移"
"動させます。こうすることで、プレイヤーがジャンプしたときに、形状が高すぎて敵"
"が衝突しにくくなります。"

msgid "|image2|"
msgstr "\\ |image2|"

msgid "image2"
msgstr "image2"

msgid ""
"You also want the cylinder to be wider than the sphere. This way, the player "
"gets hit before colliding and being pushed on top of the monster's collision "
"box."
msgstr ""
"また、シリンダーの幅は球よりも広くします。こうすると、衝突してモンスターのコ"
"リジョンボックスの上に押し出される前に、プレイヤーは当たることになります。"

msgid "The wider the cylinder, the more easily the player will get killed."
msgstr "シリンダーの幅が広いほど、プレイヤーは殺されやすくなります。"

msgid ""
"Next, select the ``MobDetector`` node again, and in the *Inspector*, turn "
"**off** its *Monitorable* property. This makes it so other physics nodes "
"cannot detect the area. The complementary *Monitoring* property allows it to "
"detect collisions. Then, remove the *Collision -> Layer* and set the mask to "
"the \"enemies\" layer."
msgstr ""
"次に、\\ *MobDetector*\\ ノードを再度選択し、\\ *インスペクター*\\ "
"(Inspector)で、\\ *Monitorable*\\ プロパティをオフにしてください。これによ"
"り、他の物理ノードがその領域を検出できないようにします。補完的な\\ "
"*Monitoring*\\ プロパティにより、衝突を検出することができます。次に、\\ "
"*Collision -> Layer*\\ でレイヤーを削除して、敵レイヤーにマスクを設定します。"

msgid "|image3|"
msgstr "\\ |image3|"

msgid "image3"
msgstr "image3"

msgid ""
"When areas detect a collision, they emit signals. We're going to connect one "
"to the ``Player`` node. Select ``MobDetector`` and go to *Inspector*'s "
"*Node* tab, double-click the ``body_entered`` signal and connect it to the "
"``Player``"
msgstr ""
"領域は衝突を検出するとシグナルを発信します。この内の1つを``Player`` ノードへ"
"接続します。 ``MobDetector`` を選択してから *Inspector* の *Node* タブに移動"
"し、 ``body_entered`` シグナルをダブルクリックして ``Player`` に接続してくだ"
"さい"

msgid "|image4|"
msgstr "\\ |image4|"

msgid "image4"
msgstr "image4"

msgid ""
"The *MobDetector* will emit ``body_entered`` when a :ref:`CharacterBody3D "
"<class_CharacterBody3D>` or a :ref:`RigidBody3D <class_RigidBody3D>` node "
"enters it. As it only masks the \"enemies\" physics layers, it will only "
"detect the ``Mob`` nodes."
msgstr ""
":ref:`CharacterBody3D <class_CharacterBody3D>` または :ref:`RigidBody3D "
"<class_RigidBody3D>` ノードが入った際に、 *MobDetector* は ``body_entered`` "
"を発信します。\"敵\" の物理レイヤーをマスクするだけなので、 ``Mob`` ノードの"
"みが検出されます."

msgid ""
"Code-wise, we're going to do two things: emit a signal we'll later use to "
"end the game and destroy the player. We can wrap these operations in a "
"``die()`` function that helps us put a descriptive label on the code."
msgstr ""
"コード的には、2つのことをします：ゲームを終了するために後で使用するシグナルを"
"発信することと、プレーヤーを破壊することです。これらの操作を\\ ``die()``\\ 関"
"数でラップすることにより、コードに説明的なラベルを付けることができます。"

msgid "Ending the game"
msgstr "ゲームオーバーを設定する"

msgid ""
"We can use the ``Player``\\ 's ``hit`` signal to end the game. All we need "
"to do is connect it to the ``Main`` node and stop the ``MobTimer`` in "
"reaction."
msgstr ""
"ゲームオーバーは ``Player`` の ``hit`` シグナルを使用して実装することができま"
"す。あとは ``Main`` ノードに接続して、シグナルに応じて ``MobTimer`` を止める"
"だけです。"

msgid ""
"Open ``main.tscn``, select the ``Player`` node, and in the *Node* dock, "
"connect its ``hit`` signal to the ``Main`` node."
msgstr ""
"``main.tscn`` を開き、 ``Player`` ノードを選択し、 *Node* ドックで ``hit`` シ"
"グナルを ``Main`` ノードに接続します。"

msgid "|image5|"
msgstr "\\ |image5|"

msgid "image5"
msgstr "image5"

msgid "Get the timer, and stop it, in the ``_on_player_hit()`` function."
msgstr ""
"これで、 ``_on_player_hit()`` 関数の中で Timer を 取得し、停止することができ"
"ます。"

msgid ""
"If you try the game now, the monsters will stop spawning when you die, and "
"the remaining ones will leave the screen."
msgstr ""
"今ゲームを試しに実行してみると、プレイヤー自身が死ぬとモンスターの出現が止ま"
"り、残ったモンスターはスクリーンから去っていきます。"

msgid ""
"Notice also that the game no longer crashes or displays an error when the "
"player dies. Because we are stopping the MobTimer, it no longer triggers the "
"``_on_mob_timer_timeout()`` function."
msgstr ""
"また、プレイヤーが死んだときに、今度はゲームがクラッシュしたりエラーが表示さ"
"れたりしなくなったことにも注目してください。MobTimerを停止しているため、 "
"``_on_mob_timer_timeout()`` 関数が実行されなくなったのです。"

msgid ""
"Also note that the enemy colliding with the player and dying depends on the "
"size and position of the ``Player`` and the ``Mob``\\ 's collision shapes. "
"You may need to move them and resize them to achieve a tight game feel."
msgstr ""
"また、敵がプレイヤーに衝突して死ぬかどうかは、 ``Player`` と ``Mob`` の衝突判"
"定のサイズと位置によって決まることに注意してください。プレイヤーの感覚に合っ"
"たゲーム体験を実現するためには、衝突判定を動かしたり、サイズを変更したりして"
"調整する必要があるかもしれません。"

msgid ""
"From there, we'll add a score, the option to retry the game, and you'll see "
"how you can make the game feel much more alive with minimalistic animations."
msgstr ""
"ここから、スコア表示やリトライするオプションを追加し、最小限のアニメーション"
"でゲームをより生き生きとしたものにするにはどうすればよいのか、学習していきま"
"しょう。"

msgid "Code checkpoint"
msgstr "ここまでのコードの確認"

msgid ""
"Here are the complete scripts for the ``Main``, ``Mob``, and ``Player`` "
"nodes, for reference. You can use them to compare and check your code."
msgstr ""
"以下は ``Main`` ノード、 ``Mob`` ノード、 ``Player`` ノードのスクリプトです。"
"あなたが書いたコードと比較したりチェックしたりするのに使ってください。"

msgid "Starting with ``main.gd``."
msgstr "``main.gd`` から見ていきましょう。"

msgid "Next is ``mob.gd``."
msgstr "次に ``mob.gd`` を記載します。"

msgid "Finally, the longest script, ``player.gd``:"
msgstr "最後に、最も長いスクリプトの ``player.gd`` を記載しておきます:"

msgid "See you in the next lesson to add the score and the retry option."
msgstr "次回のレッスンでは、スコア表示とリトライオプションを追加しましょう。"
