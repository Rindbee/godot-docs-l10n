#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Score and replay"
msgstr "スコアとリプレイ"

msgid ""
"In this part, we'll add the score, music playback, and the ability to "
"restart the game."
msgstr ""
"このパートでは、スコア表示、音楽再生、リプレイの機能を追加していきます。"

msgid ""
"We have to keep track of the current score in a variable and display it on "
"screen using a minimal interface. We will use a text label to do that."
msgstr ""
"現在のスコアを変数に記録し、最小限のインターフェイスで画面に表示する必要があ"
"ります。そのためにテキストラベルを使うことにします。"

msgid ""
"In the main scene, add a new child node :ref:`Control <class_Control>` to "
"``Main`` and name it ``UserInterface``. Ensure you are on the 2D screen, "
"where you can edit your User Interface (UI)."
msgstr ""
"メインシーンで、新しい子ノードとして :ref:`Control <class_Control>` を "
"``Main`` に追加し、名前を ``UserInterface`` とします。UIを編集できる *2D* の"
"画面を表示していることを確認してください。"

msgid "Add a :ref:`Label <class_Label>` node and name it ``ScoreLabel``"
msgstr ""
":ref:`Label <class_Label>` ノードを追加して、名前を ``ScoreLabel`` にします"

msgid "|image1|"
msgstr "\\ |image1|"

msgid "image1"
msgstr "image1"

msgid ""
"In the *Inspector*, set the *Label*'s *Text* to a placeholder like \"Score: "
"0\"."
msgstr ""
"*インスペクター* (Inspector) で、 *Label* の *Text* に \"Score: 0\" というプ"
"レースホルダーを設定してください。"

msgid "|image2|"
msgstr "\\ |image2|"

msgid "image2"
msgstr "image2"

msgid ""
"Also, the text is white by default, like our game's background. We need to "
"change its color to see it at runtime."
msgstr ""
"また、テキストはデフォルトではゲームの背景と同じ白です。ゲームを実行した時に"
"テキストが見えるように、色を変更する必要があります。"

msgid ""
"Scroll down to *Theme Overrides*, and expand *Colors* and enable *Font "
"Color* in order to tint the text to black (which contrasts well with the "
"white 3D scene)"
msgstr ""
"*Theme Overrides* までスクロールダウンし、 *Colors* を展開し、 *Font Color* "
"チェックボックスを有効にして、テキストを黒に設定しましょう（これで白い3Dシー"
"ンとのコントラストがハッキリしました）"

msgid "|image3|"
msgstr "\\ |image3|"

msgid "image3"
msgstr "image3"

msgid ""
"Finally, click and drag on the text in the viewport to move it away from the "
"top-left corner."
msgstr ""
"最後に、ビューポート内のテキストをクリック＆ドラッグして、左上隅から離しま"
"す。"

msgid "|image4|"
msgstr "\\ |image4|"

msgid "image4"
msgstr "image4"

msgid ""
"The ``UserInterface`` node allows us to group our UI in a branch of the "
"scene tree and use a theme resource that will propagate to all its children. "
"We'll use it to set our game's font."
msgstr ""
"``UserInterface`` ノードを使うと、UIを *シーン* の中で1つのツリー状にまとめる"
"ことができ、テーマリソースを使うことができます。この ``UserInterface`` ノード"
"を使用して、ゲームのフォントを設定します。"

msgid "Creating a UI theme"
msgstr "UIテーマの作成"

msgid ""
"Once again, select the ``UserInterface`` node. In the *Inspector*, create a "
"new theme resource in *Theme -> Theme*."
msgstr ""
"もう一度、 ``UserInterface`` ノードを選択してください。 *インスペクター* "
"(Inspector)で、 *Theme* 項目を開き、 *Theme* 横の *<空>* (empty)をクリックし"
"て *新規Theme* を選択して新しいテーマ・リソースを作成します。"

msgid "|image5|"
msgstr "\\ |image5|"

msgid "image5"
msgstr "image5"

msgid ""
"Click on it to open the theme editor In the bottom panel. It gives you a "
"preview of how all the built-in UI widgets will look with your theme "
"resource."
msgstr ""
"*Theme* をクリックすると、Godotの下のパネルにある *テーマ* というエディタが開"
"きます（※ 開かない場合には、インスペクター内で先ほど追加した *Theme* 横のプル"
"ダウンから *編集* をクリックしても開きます）。 *デフォルトのプレビュー* 内で"
"は、既に用意されている全てのUIウィジェットがテーマリソースでどのように見える"
"か、プレビューを確認できます。"

msgid "|image6|"
msgstr "|image6|"

msgid "image6"
msgstr "\\ image6"

msgid ""
"By default, a theme only has a few properties: *Default Base Scale*, "
"*Default Font* and *Default Font Size*."
msgstr ""
"デフォルトでは、テーマにはプロパティが少ししかありません（『インスペクター』"
"内をご覧ください）： *Default Base Scale* (デフォルトのベーススケール)、 "
"*Default Font* (デフォルトのフォント)、 *Default Font Size* (デフォルトのフォ"
"ントサイズ)です。"

msgid ""
"You can add more properties to the theme resource to design complex user "
"interfaces, but that is beyond the scope of this series. To learn more about "
"creating and editing themes, see :ref:`doc_gui_skinning`."
msgstr ""
"テーマリソースにさらにプロパティを追加して複雑なユーザーインターフェースを設"
"計することもできますが、それはこのチュートリアルでは扱いません。テーマの作成"
"と編集について詳しく知るには、 :ref:`doc_gui_skinning` を参照してください。"

msgid ""
"The *Default Font* expects a font file like the ones you have on your "
"computer. Two common font file formats are TrueType Font (TTF) and OpenType "
"Font (OTF)."
msgstr ""
"*デフォルトフォント* は、お使いのコンピュータに既にあるようなフォントファイル"
"を想定しています。一般的なフォントファイルの形式は次の2種類あります。TrueType"
"フォント（TTF）とOpenTypeフォント（OTF）です。"

msgid ""
"In the *FileSystem* dock, expand the ``fonts`` directory and click and drag "
"the ``Montserrat-Medium.ttf`` file we included in the project onto the "
"*Default Font*. The text will reappear in the theme preview."
msgstr ""
"左下の *ファイルシステム* (FileSystem)ドックで ``fonts`` ディレクトリを展開"
"し、プロジェクトに含まれている ``Montserrat-Medium.ttf`` ファイルを *インスペ"
"クター* ドックの *Theme* 内の *Default Font* の上までドラッグします。画面下"
"の *テーマ* ドックの *デフォルトのプレビュー* 内のフォントが更新されます。"

msgid ""
"The text is a bit small. Set the *Default Font Size* to ``22`` pixels to "
"increase the text's size."
msgstr ""
"このままだと文字が少し小さいので、 *Default Font Size* (デフォルトのフォント"
"サイズ) を ``22`` ピクセルに設定して、文字のサイズを大きくしてください。"

msgid "|image7|"
msgstr "\\ |image7|"

msgid "image7"
msgstr "\\ image7"

msgid "Keeping track of the score"
msgstr "スコアの記録"

msgid ""
"Let's work on the score next. Attach a new script to the ``ScoreLabel`` and "
"define the ``score`` variable."
msgstr ""
"次にスコア表示に取りかかりましょう。新しいスクリプトを ``ScoreLabel`` にア"
"タッチし、 ``score`` という変数を定義してください。"

msgid ""
"The score should increase by ``1`` every time we squash a monster. We can "
"use their ``squashed`` signal to know when that happens. However, because we "
"instantiate monsters from the code, we cannot connect the mob signal to the "
"``ScoreLabel`` via the editor."
msgstr ""
"敵モンスターを踏んで倒すたびにスコアが ``1`` ずつ増えるように作ります。倒した"
"イベントは ``squashed`` シグナルを使って検知できます。しかし、プログラムコー"
"ドからモンスターをインスタンス化しているので、エディターを使ってモブキャラク"
"ターが送るシグナルを ``ScoreLabel`` に接続することはできません。"

msgid ""
"Instead, we have to make the connection from the code every time we spawn a "
"monster."
msgstr ""
"その代わりに、モンスターを出現させるたびにコードから接続する必要があります。"

msgid ""
"Open the script ``main.gd``. If it's still open, you can click on its name "
"in the script editor's left column."
msgstr ""
"``main.gd`` のスクリプトを開いてください。もしスクリプトファイルを開いたまま"
"でしたら、スクリプトエディタの左の列でファイル名をクリックして開くこともでき"
"ます。"

msgid "|image8|"
msgstr "\\ |image8|"

msgid "image8"
msgstr "\\ image8"

msgid ""
"Alternatively, you can double-click the ``main.gd`` file in the *FileSystem* "
"dock."
msgstr ""
"あるいは、 *ファイルシステム* (FileSystem)ドックにある ``main.gd`` ファイルを"
"ダブルクリックして開くこともできます。"

msgid ""
"At the bottom of the ``_on_mob_timer_timeout()`` function, add the following "
"line:"
msgstr ""
"そして ``_on_mob_timer_timeout()`` 関数の末尾に以下の行を追加してください："

msgid ""
"This line means that when the mob emits the ``squashed`` signal, the "
"``ScoreLabel`` node will receive it and call the function "
"``_on_mob_squashed()``."
msgstr ""
"この処理は、モブキャラクターが ``squashed`` シグナルを出力すると、 "
"``ScoreLabel`` ノードがそれを受け取り、 ``_on_mob_squashed()`` 関数を呼び出す"
"という処理です。"

msgid ""
"Head back to the ``score_label.gd`` script to define the "
"``_on_mob_squashed()`` callback function."
msgstr ""
"``score_label.gd`` のスクリプトを再度開いて、呼び出される "
"``_on_mob_squashed()`` 関数を定義しましょう。"

msgid "There, we increment the score and update the displayed text."
msgstr "ここでスコアの得点を追加し、表示されているテキストを更新します。"

msgid ""
"The second line uses the value of the ``score`` variable to replace the "
"placeholder ``%s``. When using this feature, Godot automatically converts "
"values to string text, which is convenient when outputting text in labels or "
"when using the ``print()`` function."
msgstr ""
"2行目の処理( `text = ...` )は ``score`` 変数の値を使って ``%s`` の部分を置き"
"換えています。この機能を使用すると、Godot は自動的に値を文字列型に変換するの"
"で、ラベルにテキストを出力するときや ``print()`` 関数を使用するときに便利で"
"す。"

msgid ""
"You can learn more about string formatting here: :ref:`doc_gdscript_printf`. "
"In C#, consider using `string interpolation with \"$\" <https://learn."
"microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated>`_."
msgstr ""
"文字列のフォーマットについてはこちら( :ref:`doc_gdscript_printf`)で詳しく説明"
"されています。C#では、 `\"$\"を使った文字列補間 <https://learn.microsoft.com/"
"en-us/dotnet/csharp/language-reference/tokens/interpolated>`_ を参照してくだ"
"さい。"

msgid ""
"You can now play the game and squash a few enemies to see the score increase."
msgstr ""
"これでゲームをプレイすると、敵を踏んで倒すたびにスコアが増えていくのを確認で"
"きるようになりました。"

msgid "|image9|"
msgstr "\\ |image9|"

msgid "image9"
msgstr "\\ image9"

msgid ""
"In a complex game, you may want to completely separate your user interface "
"from the game world. In that case, you would not keep track of the score on "
"the label. Instead, you may want to store it in a separate, dedicated "
"object. But when prototyping or when your project is simple, it is fine to "
"keep your code simple. Programming is always a balancing act."
msgstr ""
"複雑なゲームでは、ユーザーインターフェイスをゲームの世界から完全に切り離した"
"い場合があります。そのような場合、ラベルにスコアを表示させることもなくなるか"
"もしれません。その代わりに、スコアを別の専用オブジェクトに格納することもでき"
"ます。しかし、試作品のゲームやシンプルなプロジェクトの場合には、コードをシン"
"プルなままにしておくのも良いでしょう。プログラミングは、常にバランスを取って"
"進めることが大切です。"

msgid "Retrying the game"
msgstr "ゲームをリトライする"

msgid ""
"We'll now add the ability to play again after dying. When the player dies, "
"we'll display a message on the screen and wait for input."
msgstr ""
"ゲームオーバーになった後にリトライできる機能を追加します。プレイヤーがゲーム"
"オーバーになった場合、画面にメッセージを表示して入力を待つ機能を作ります。"

msgid ""
"Head back to the ``main.tscn`` scene, select the ``UserInterface`` node, add "
"a child node :ref:`ColorRect <class_ColorRect>`, and name it ``Retry``. This "
"node fills a rectangle with a uniform color and will serve as an overlay to "
"darken the screen."
msgstr ""
"``main.tscn`` シーンに戻り、 ``UserInterface`` ノードを選択し、子ノードとし"
"て :ref:`ColorRect <class_ColorRect>` を追加し、名前を ``Retry`` とします。こ"
"のノードは長方形を単色で塗りつぶし、画面を暗くするオーバーレイとして機能しま"
"す。"

msgid ""
"To make it span over the whole viewport, you can use the *Anchor Preset* "
"menu in the toolbar."
msgstr ""
"ビューポート全体を覆うようにするには、ツールバーの *Anchor Preset* (アンカー"
"のプリセット)メニューを使用します。"

msgid "|image10|"
msgstr "\\ |image10|"

msgid "image10"
msgstr "\\ image10"

msgid "Open it and apply the *Full Rect* command."
msgstr "メニューを開いて、 *Rect全面* (Full Rect)を適用します。"

msgid "|image11|"
msgstr "\\ |image11|"

msgid "image11"
msgstr "\\ image11"

msgid ""
"Nothing happens. Well, almost nothing; only the four green pins move to the "
"corners of the selection box."
msgstr ""
"まだ何も起こっていません。少なくとも、ほとんど何も起こっていません。緑色の4本"
"のピンが選択中のボックスの隅に移動するだけです。"

msgid "|image12|"
msgstr "\\ |image12|"

msgid "image12"
msgstr "\\ image12"

msgid ""
"This is because UI nodes (all the ones with a green icon) work with anchors "
"and margins relative to their parent's bounding box. Here, the "
"``UserInterface`` node has a small size and the ``Retry`` one is limited by "
"it."
msgstr ""
"これは、UIノード（緑色のアイコンが付いているものすべて）が、親ノードに紐づく"
"長方形を起点にして、相対的なアンカーと余白で動作するためです。ここでは、 "
"``UserInterface`` ノードのサイズが小さいので、子ノードである ``Retry`` ノード"
"のサイズが制限されています。"

msgid ""
"Select the ``UserInterface`` and apply *Anchor Preset -> Full Rect* to it as "
"well. The ``Retry`` node should now span the whole viewport."
msgstr ""
"``UserInterface`` を選択し、インスペクターから *Layout* -> *Anchors Preset* -"
"> *Rect全面* (Full Rect)を適用します。これで ``Retry`` ノードがビューポート全"
"体に広がるはずです。"

msgid ""
"Let's change its color so it darkens the game area. Select ``Retry`` and in "
"the *Inspector*, set its *Color* to something both dark and transparent. To "
"do so, in the color picker, drag the *A* slider to the left. It controls the "
"color's Alpha channel, that is to say, its opacity/transparency."
msgstr ""
"その色を変えて、ゲームエリアを暗くしましょう。 ``Retry`` を選択し、 *インスペ"
"クター* (Inspector)ドックで *Color* を暗くて透明なものに設定します。これを行"
"うには、カラーピッカー内で *A* スライダーを左にドラッグします。このスライダー"
"は色のアルファ値、つまり不透明度／透明度をコントロールするスライダーです。"

msgid "|image13|"
msgstr "\\ |image13|"

msgid "image13"
msgstr "\\ image13"

msgid ""
"Next, add a :ref:`Label <class_Label>` as a child of ``Retry`` and give it "
"the *Text* \"Press Enter to retry.\" To move it and anchor it in the center "
"of the screen, apply *Anchor Preset -> Center* to it."
msgstr ""
"次に、 :ref:`Label <class_Label>` を ``Retry`` の子ノードとして追加し、インス"
"ペクター内の *Text* の項目に \"Press Enter to retry.\" と入力します。この :"
"ref:`Label <class_Label>` を動かして画面の中央に固定するには、 *Anchors "
"Preset* の項目を *中央* (Center)に設定してください。"

msgid "|image14|"
msgstr "\\ |image14|"

msgid "image14"
msgstr "\\ image14"

msgid "Coding the retry option"
msgstr "リトライの機能をコーディングする"

msgid ""
"We can now head to the code to show and hide the ``Retry`` node when the "
"player dies and plays again."
msgstr ""
"プレイヤーがゲームオーバーになってリトライするときに ``Retry`` ノードを表示し"
"たり隠したりするコードにもう一度、取りかかりましょう。"

msgid ""
"Open the script ``main.gd``. First, we want to hide the overlay at the start "
"of the game. Add this line to the ``_ready()`` function."
msgstr ""
"``main.gd`` のスクリプトを開いてください。まず、ゲーム開始時点ではリトライす"
"るオーバーレイを隠しておく必要があります。そこで次の行を ``_ready()`` 関数に"
"追加してください。"

msgid "Then, when the player gets hit, we show the overlay."
msgstr "そして、プレイヤーが敵から攻撃を受けた時にオーバーレイを表示します。"

msgid ""
"Finally, when the ``Retry`` node is visible, we need to listen to the "
"player's input and restart the game if they press enter. To do this, we use "
"the built-in ``_unhandled_input()`` callback, which is triggered on any "
"input."
msgstr ""
"最後に、 ``Retry`` ノードが表示されたら、プレイヤーの入力待ち状態にして、プレ"
"イヤーがエンターキーを押したらゲームをリスタートする必要があります。これを行"
"うにはGodotに既に用意されている ``_unhandled_input()`` コールバック関数を使用"
"します。この関数はプレイヤーがどんなキーを押しても動作する関数です。"

msgid ""
"If the player pressed the predefined ``ui_accept`` input action and "
"``Retry`` is visible, we reload the current scene."
msgstr ""
"プレイヤーが ``ui_accept`` としてあらかじめ設定しておいた入力を行い、その時"
"に ``Retry`` オーバーレイが表示されている場合、現在のシーンをリロードします。"

msgid ""
"The function ``get_tree()`` gives us access to the global :ref:`SceneTree "
"<class_SceneTree>` object, which allows us to reload and restart the current "
"scene."
msgstr ""
"``get_tree()`` は、グローバルな :ref:`SceneTree <class_SceneTree>` オブジェク"
"トにアクセスできる関数です。そのため、この関数は現在のシーンをリロード、リス"
"タートさせることができます。"

msgid "Adding music"
msgstr "音楽を追加する"

msgid ""
"To add music that plays continuously in the background, we're going to use "
"another feature in Godot: :ref:`autoloads <doc_singletons_autoload>`."
msgstr ""
"バックグラウンドで繰り返し再生される音楽を追加するには、Godot の別の機能であ"
"る :ref:`autoloads <doc_singletons_autoload>` を使用します。"

msgid ""
"To play audio, all you need to do is add an :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` node to your scene and attach an audio file to "
"it. When you start the scene, it can play automatically. However, when you "
"reload the scene, like we do to play again, the audio nodes are also reset, "
"and the music starts back from the beginning."
msgstr ""
"オーディオを再生するには、シーンに :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` ノードを追加し、オーディオファイルを添付するだけで"
"再生できるようになります。シーンを開始すると、自動的にオーディオが再生されま"
"す。しかし、シーンをリロードする（ゲームをリプレイしたりするときのように）"
"と、オーディオノードもリセットされ、音楽は最初から始まります。"

msgid ""
"You can use the autoload feature to have Godot load a node or a scene "
"automatically at the start of the game, outside the current scene. You can "
"also use it to create globally accessible objects."
msgstr ""
"オートロード機能を使えば、ゲーム開始時に現在のシーン以外のノードやシーンを"
"Godot に自動的にロードさせることができます。また、グローバルにアクセス可能な"
"オブジェクトを作成する場合にも使用できます。"

msgid ""
"Create a new scene by going to the *Scene* menu and clicking *New Scene* or "
"by using the *+* icon next to your currently opened scene."
msgstr ""
"左上の *シーン* (Scene)メニューから *新規シーン* (New Scene)をクリックし、新"
"しいシーンを作成します。または現在開いているシーンのタブの横にある *+* のアイ"
"コンを押して新しいシーンを作成することもできます。"

msgid "|image15|"
msgstr "\\ |image15|"

msgid "image15"
msgstr "\\ image15"

msgid ""
"Click the *Other Node* button to create an :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` and rename it to ``MusicPlayer``."
msgstr ""
"*その他のノード* (Other Node)ボタンをクリックして :ref:`AudioStreamPlayer "
"<class_AudioStreamPlayer>` を作成し、名前を ``MusicPlayer`` に変更します。"

msgid "|image16|"
msgstr "\\ |image16|"

msgid "image16"
msgstr "\\ image16"

msgid ""
"We included a music soundtrack in the ``art/`` directory, ``House In a "
"Forest Loop.ogg``. Click and drag it onto the *Stream* property in the "
"*Inspector*. Also, turn on *Autoplay* so the music plays automatically at "
"the start of the game."
msgstr ""
"``art/`` ディレクトリに ``House In a Forest Loop.ogg`` というサウンドトラック"
"があります。これをクリックして、 *インスペクター* (Inspector)の *Stream* プロ"
"パティにドラッグしてください。また、 *Autoplay* のチェックボックスをオンにし"
"て、ゲーム開始時に自動的に音楽が再生されるようにしてみましょう。"

msgid "|image17|"
msgstr "\\ |image17|"

msgid "image17"
msgstr "\\ image17"

msgid "Save the scene as ``music_player.tscn``."
msgstr "シーンを ``music_player.tscn`` などの名前で保存します。"

msgid ""
"In the *Path* field, you want to enter the path to your scene. Click the "
"folder icon to open the file browser and double-click on ``music_player."
"tscn``. Then, click the *Add* button on the right to register the node."
msgstr ""
"*パス* (Path)フィールドにシーンへのパスを入力します。フォルダアイコンをクリッ"
"クしてファイルブラウザを開き、 ``music_player.tscn`` をダブルクリックします。"
"次に、 *パス* の右側にある *追加* (Add)ボタンをクリックしてノードを登録しま"
"す。"

msgid "|image18|"
msgstr "\\ |image18|"

msgid "image18"
msgstr "image18"

msgid ""
"``music_player.tscn`` now loads into any scene you open or play. So if you "
"run the game now, the music will play automatically in any scene."
msgstr ""
"``music_player.tscn`` がどのシーンでもロードされるようになりました。そのた"
"め、この状態でゲームを実行すると、どのシーンでも音楽が自動的に再生されます。"

msgid ""
"Before we wrap up this lesson, here's a quick look at how it works under the "
"hood. When you run the game, your *Scene* dock changes to give you two tabs: "
"*Remote* and *Local*."
msgstr ""
"このレッスンを終える前に、ゲームの中でどのように処理が動いているのか簡単に見"
"てみましょう。ゲームを実行すると、 *シーン* (Scene)ドックが2つのタブに変わり"
"ます： *リモート* (Remote)と *ローカル* (Local)です。"

msgid "|image19|"
msgstr "\\ |image19|"

msgid "image19"
msgstr "\\ image19"

msgid ""
"The *Remote* tab allows you to visualize the node tree of your running game. "
"There, you will see the *Main* node and everything the scene contains and "
"the instantiated mobs at the bottom."
msgstr ""
"*リモート* (Remote)タブでは、実行中のゲームのノードツリーを視覚化することがで"
"きます。そこでは、 *Main* ノードとシーンに含まれるすべてのもの、そしてインス"
"タンス化されたモブキャラクターのノードが一番下に表示されます。"

msgid "|image20|"
msgstr "\\ |image20|"

msgid "image20"
msgstr "\\ image20"

msgid ""
"At the top are the autoloaded ``MusicPlayer`` and a *root* node, which is "
"your game's viewport."
msgstr ""
"一番上にはオートロード（自動読み込み）された ``MusicPlayer`` と、その上に "
"*root* ノードがあります。 *root* ノードはゲームのビューポートになります。"

msgid ""
"And that does it for this lesson. In the next part, we'll add an animation "
"to make the game both look and feel much nicer."
msgstr ""
"今回のレッスンはここまでです。次のパートでは、アニメーションを追加して、ゲー"
"ムの見た目とゲーム体験の両方をより良くしていきましょう。"

msgid "Here is the complete ``main.gd`` script for reference."
msgstr "参考までに、 ``main.gd`` のスクリプト全体は次のようになります。"
