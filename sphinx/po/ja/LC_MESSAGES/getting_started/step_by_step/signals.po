#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Signal"
msgstr "シグナル"

msgid "Using signals"
msgstr "シグナルの使用"

msgid ""
"In this lesson, we will look at signals. They are messages that nodes emit "
"when something specific happens to them, like a button being pressed. Other "
"nodes can connect to that signal and call a function when the event occurs."
msgstr ""
"このレッスンでは、シグナルを見ていきます。これらは、ボタンが押された、など特"
"定のことが起こったときにノードが発信するメッセージです。他のノードはシグナル"
"に接続し、イベントが発生したときに関数を呼び出すことができます。"

msgid ""
"Signals are a delegation mechanism built into Godot that allows one game "
"object to react to a change in another without them referencing one another. "
"Using signals limits `coupling <https://en.wikipedia.org/wiki/"
"Coupling_(computer_programming)>`_ and keeps your code flexible."
msgstr ""
"シグナルはGodotに組み込まれた委任メカニズムで、あるゲームオブジェクトが別の"
"ゲームオブジェクトの変更に反応する際に、それらを相互参照させることなく反応で"
"きるようにするものです。シグナルを使うと、 `結合度 <https://ja.wikipedia.org/"
"wiki/%E7%B5%90%E5%90%88%E5%BA%A6>`_ を制限し、コードの柔軟性を保つことができ"
"ます。"

msgid ""
"For example, you might have a life bar on the screen that represents the "
"player's health. When the player takes damage or uses a healing potion, you "
"want the bar to reflect the change. To do so, in Godot, you would use "
"signals."
msgstr ""
"例えば、画面上にプレイヤーの体力を表すライフバーがあるとします。プレイヤーが"
"ダメージを受けたり、回復薬を使ったりした場合には、その変化をバーに反映される"
"ようにしたいとします。これを実現するために、Godotではシグナルを使用します。"

msgid ""
"Like methods (:ref:`class_callable`), signals are a first-class type since "
"Godot 4.0. This means you can pass them around as method arguments directly "
"without having to pass them as strings, which allows for better "
"autocompletion and is less error-prone. See the :ref:`class_signal` class "
"reference for a list of what you can do with the Signal type directly."
msgstr ""
"メソッド ( :ref:`class_callable` ) と同様に、シグナルは Godot 4.0 以降の最重"
"要な型です。つまり、文字列として渡す必要がなく、メソッドの引数として直接渡す"
"ことができるという意味であり、オートコンプリートの向上と、エラーの抑制につな"
"がります。 Signal 型で直接できることのリストについては、クラス リファレンス :"
"ref:`class_signal` を参照してください。"

msgid ""
"As mentioned in the introduction, signals are Godot's version of the "
"observer pattern. You can learn more about it in `Game Programming Patterns "
"<https://gameprogrammingpatterns.com/observer.html>`__."
msgstr ""
"概要で述べたように、シグナルはGodotバージョンのobserverパターンです。詳しく"
"は 次を参照ください `Game Programming Patterns <https://"
"gameprogrammingpatterns.com/observer.html>`__\\ 。"

msgid ""
"We will now use a signal to make our Godot icon from the previous lesson (:"
"ref:`doc_scripting_player_input`) move and stop by pressing a button."
msgstr ""
"今度はシグナルを使って、前パート ( :ref:`doc_scripting_player_input` ) で作っ"
"たGodotのアイコンがボタンを押すことで動いたり止まったりするようにします。"

msgid "For this project, we will be following the Godot naming conventions."
msgstr "このプロジェクトでは、Godotの命名規則に従います。"

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: クラス(ノード)はPascalCaseを使用し、変数と関数はsnake_caseを使"
"用し、定数はALL_CAPSを使用します(\\ :ref:`doc_gdscript_styleguide`\\ を参"
"照)。"

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: クラス、export変数、メソッドはPascalCaseを使用し、プライベートフィー"
"ルドは _camelCase を使用し、ローカル変数とパラメーターは camelCase を使用しま"
"す(\\ :ref:`doc_c_sharp_styleguide`\\ を参照)。シグナルを接続するときは、メ"
"ソッド名を正確に入力してください。"

msgid "Scene setup"
msgstr "シーンの設定"

msgid ""
"To add a button to our game, we will create a new scene which will include "
"both a :ref:`Button <class_button>` and the ``sprite_2d.tscn`` scene we "
"created in the :ref:`doc_scripting_first_script` lesson."
msgstr ""
"ゲームにボタンを追加するために、 :ref:`Button <class_button>` と :ref:"
"`doc_scripting_first_script` レッスンで作成した ``sprite_2d.tscn`` シーンの両"
"方を含む新しいシーンを作成します。"

msgid "Create a new scene by going to the menu Scene -> New Scene."
msgstr "メニューの「シーン -> 新規シーン」で、新しいシーンを作成します。"

msgid ""
"In the Scene dock, click the 2D Scene button. This will add a :ref:`Node2D "
"<class_Node2D>` as our root."
msgstr ""
"シーンドック内の2Dシーンボタンをクリックすることで、:ref:`Node2D "
"<class_Node2D>` がルートとして追加されます。"

msgid ""
"In the FileSystem dock, click and drag the ``sprite_2d.tscn`` file you saved "
"previously onto the Node2D to instantiate it."
msgstr ""
"ファイルシステムドック内で、先に保存した ``sprite_2d.tscn`` ファイルをクリッ"
"クして、Node2Dの上にドロップしインスタンス化します。"

msgid ""
"We want to add another node as a sibling of the Sprite2D. To do so, right-"
"click on Node2D and select Add Child Node."
msgstr ""
"もう一つ別のノードをSprite2Dと同レベルとして追加します。これをするには、"
"Node2Dを右クリックし、「子ノードを追加」を選択します。"

msgid "Search for the :ref:`Button <class_button>` node and add it."
msgstr ":ref:`Button <class_button>` ノードを検索して追加します。"

msgid ""
"The node is small by default. Click and drag on the bottom-right handle of "
"the Button in the viewport to resize it."
msgstr ""
"デフォルトではノードは小さく作成されます。ハンドルの右下をクリック＆ドラッグ"
"し、サイズを変更します。"

msgid ""
"If you don't see the handles, ensure the select tool is active in the "
"toolbar."
msgstr ""
"ハンドルが表示されない場合は、ツールバー上で選択ツールが選択されていることを"
"確認してください。"

msgid "Click and drag on the button itself to move it closer to the sprite."
msgstr "ボタンをクリック＆ドラッグし、Spriteの近くへ動かします。"

msgid ""
"You can also write a label on the Button by editing its Text property in the "
"Inspector. Enter ``Toggle motion``."
msgstr ""
"インスペクター上のTextプロパティでButtonにラベルをつけることができます。 "
"``Toggle motion`` と入力しましょう。"

msgid "Your scene tree and viewport should look like this."
msgstr "シーンツリーとビューポートは次のようになります。"

msgid ""
"Save your newly created scene as ``node_2d.tscn``, if you haven't already. "
"You can then run it with :kbd:`F6` (:kbd:`Cmd + R` on macOS). At the moment, "
"the button will be visible, but nothing will happen if you press it."
msgstr ""
"新たに作成したシーンについて、もしまだであれば ``node_2d.tscn`` として保存し"
"ましょう。 :kbd:`F6` (macOSでは:kbd:`Cmd + R`)で実行できます。この時点では、"
"ボタンは表示されますが、押しても何も起こりません。"

msgid "Connecting a signal in the editor"
msgstr "エディタ内でシグナルを接続する"

msgid ""
"Here, we want to connect the Button's \"pressed\" signal to our Sprite2D, "
"and we want to call a new function that will toggle its motion on and off. "
"We need to have a script attached to the Sprite2D node, which we do from the "
"previous lesson."
msgstr ""
"ここでは、Button の \"pressed\" シグナルを Sprite2D に接続し、その動きのオ"
"ン・オフを切り替える新しい関数を呼び出しましょう。前のレッスンで行ったよう"
"に、Sprite2Dノードにスクリプトをアタッチする必要があります。"

msgid ""
"You can connect signals in the Node dock. Select the Button node and, on the "
"right side of the editor, click on the tab named \"Node\" next to the "
"Inspector."
msgstr ""
"ノードドック内でシグナルを接続することができます。Buttonノードを選択し、イン"
"スペクターの横にあるノードをクリックします。"

msgid "The dock displays a list of signals available on the selected node."
msgstr "選択したノードで利用可能なシグナルが表示されます。"

msgid "Double-click the \"pressed\" signal to open the node connection window."
msgstr ""
"\"pressed\"シグナルをダブルクリックし、ノード接続ウィンドウを開きます。"

msgid ""
"There, you can connect the signal to the Sprite2D node. The node needs a "
"receiver method, a function that Godot will call when the Button emits the "
"signal. The editor generates one for you. By convention, we name these "
"callback methods \"_on_node_name_signal_name\". Here, it'll be "
"\"_on_button_pressed\"."
msgstr ""
"そこで、Sprite2Dノードにシグナルを接続できます。ノードはreceiverメソッドを必"
"要とします。これは、Buttonがシグナルを発信したときにGodotが呼び出す関数です。"
"エディタはこの関数を自動生成します。規約として、これらのコールバック関数は"
"\"_on_ノード名_シグナル名\"と命名されます。ここでの場合"
"は、\"_on_button_pressed\"となります。"

msgid ""
"When connecting signals via the editor's Node dock, you can use two modes. "
"The simple one only allows you to connect to nodes that have a script "
"attached to them and creates a new callback function on them."
msgstr ""
"ノードドックよりシグナルを接続する場合、簡易モードと高度な設定を利用できま"
"す。簡易モードではスクリプトが付随しているノードにのみ接続でき、そのノードに"
"新しいコールバック関数を作成します。"

msgid ""
"The advanced view lets you connect to any node and any built-in function, "
"add arguments to the callback, and set options. You can toggle the mode in "
"the window's bottom-right by clicking the Advanced button."
msgstr ""
"高度な設定(\"Advanced\")では、任意のノードと任意のビルトイン関数に接続し、"
"コールバックに引数を追加し、オプションを設定することができます。ウィンドウの"
"下部にある高度な設定トグルスイッチをクリックすることで、モードを切り替えるこ"
"とができます。"

msgid ""
"Click the Connect button to complete the signal connection and jump to the "
"Script workspace. You should see the new method with a connection icon in "
"the left margin."
msgstr ""
"接続ボタン(\"Connect\")をクリックすると、シグナルの接続が完了し、スクリプトの"
"ワークスペースにジャンプします。左側のマージンに接続アイコンのある新しいメ"
"ソッドが表示されるはずです。"

msgid ""
"If you click the icon, a window pops up and displays information about the "
"connection. This feature is only available when connecting nodes in the "
"editor."
msgstr ""
"このアイコンをクリックすると、ウィンドウがポップアップし、接続に関する情報が"
"表示されます。この機能は、エディターでノードを接続する場合のみ有効です。"

msgid ""
"Let's replace the line with the ``pass`` keyword with code that'll toggle "
"the node's motion."
msgstr ""
"\\ ``pass``\\ キーワードの行を、ノードの動きを切り替えるコードに置き換えま"
"しょう。"

msgid ""
"Our Sprite2D moves thanks to code in the ``_process()`` function. Godot "
"provides a method to toggle processing on and off: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Another method of the Node class, "
"``is_processing()``, returns ``true`` if idle processing is active. We can "
"use the ``not`` keyword to invert the value."
msgstr ""
"Sprite2Dが動くのは、\\ ``_process()``\\ 関数内のコードのおかげです。Godot は"
"処理のオンとオフを切り替えるメソッド : :ref:`Node.set_process() "
"<class_Node_method_set_process>` を提供しています。Nodeクラスの別のメソッドで"
"ある ``is_processing()`` は、アイドル処理が有効であれば \\ ``true``\\ を返し"
"ます。\\ ``not``\\ キーワードで値を反転できます。"

msgid ""
"This function will toggle processing and, in turn, the icon's motion on and "
"off upon pressing the button."
msgstr ""
"この関数はボタンを押したときに、処理を切り替え、アイコンの動作のON/OFFを切り"
"替えます。"

msgid ""
"Before trying the game, we need to simplify our ``_process()`` function to "
"move the node automatically and not wait for user input. Replace it with the "
"following code, which we saw two lessons ago:"
msgstr ""
"ゲームを試す前に、 \\ ``_process()``\\ 関数を単純化して、ユーザー入力を待たず"
"にノードを自動的に移動させる必要があります。次のコードに置き換えます (これは "
"2 つ前のレッスンで見ています)。"

msgid "Your complete ``sprite_2d.gd`` code should look like the following."
msgstr "完成した \\ ``sprite_2d.gd``\\ コードは次のようになります。"

msgid ""
"Run the scene now and click the button to see the sprite start and stop."
msgstr ""
"すぐにシーンを実行し、ボタンをクリックして、スプライトの開始と停止を確認しま"
"す。"

msgid "Connecting a signal via code"
msgstr "コード経由でシグナルを接続する"

msgid ""
"You can connect signals via code instead of using the editor. This is "
"necessary when you create nodes or instantiate scenes inside of a script."
msgstr ""
"エディタを使用する代わりに、コードを介してシグナルを接続することができます。"
"これは、スクリプトの中でノードを作成したり、シーンをインスタンス化するときに"
"必要です。"

msgid ""
"Let's use a different node here. Godot has a :ref:`Timer <class_Timer>` node "
"that's useful to implement skill cooldown times, weapon reloading, and more."
msgstr ""
"ここで、別のノードを使ってみましよう。Godot には :ref:`Timer <class_Timer>` "
"ノードがあり、スキルのクールダウン時間や武器のリロードなどを実装するのに便利"
"です。"

msgid ""
"Head back to the 2D workspace. You can either click the \"2D\" text at the "
"top of the window or press :kbd:`Ctrl + F1` (:kbd:`Ctrl + Cmd + 1` on macOS)."
msgstr ""
"2Dワークスペースに戻りましょう。ウィンドウ上部の \"2D\" のテキストをクリック"
"するか、 :kbd:`Ctrl + F1` (macOS では :kbd:`Ctrl + Cmd + 1`) を押します。"

msgid ""
"In the Scene dock, right-click on the Sprite2D node and add a new child "
"node. Search for Timer and add the corresponding node. Your scene should now "
"look like this."
msgstr ""
"シーンドックで、Sprite2D ノードを右クリックし、新しい子ノードを追加します。"
"Timer を検索して、対応するノードを追加します。シーンは次のようになります。"

msgid ""
"With the Timer node selected, go to the Inspector and enable the "
"**Autostart** property."
msgstr ""
"Timerノードを選択した状態で、インスペクタに移動し、\\ **Autostart**\\ プロパ"
"ティを有効化します。"

msgid ""
"Click the script icon next to Sprite2D to jump back to the scripting "
"workspace."
msgstr ""
"Sprite2Dの横にあるスクリプトアイコンをクリックして、スクリプトのワークスペー"
"スに戻ります。"

msgid "We need to do two operations to connect the nodes via code:"
msgstr "ノードをコードで接続するには、2つの操作が必要です。"

msgid "Get a reference to the Timer from the Sprite2D."
msgstr "Sprite2D から Timer への参照を取得します。"

msgid "Call the ``connect()`` method on the Timer's \"timeout\" signal."
msgstr ""
"Timer の\"timeout\"シグナルで、\\ ``connect()``\\ メソッドを呼び出します。"

msgid ""
"To connect to a signal via code, you need to call the ``connect()`` method "
"of the signal you want to listen to. In this case, we want to listen to the "
"Timer's \"timeout\" signal."
msgstr ""
"コードでシグナルに接続するには、シグナルを受信したいノードの\\ "
"``connect()``\\ メソッドを呼び出す必要があります。この場合、Timer の"
"\"timeout\"シグナルを受信します。"

msgid ""
"We want to connect the signal when the scene is instantiated, and we can do "
"that using the :ref:`Node._ready() <class_Node_private_method__ready>` built-"
"in function, which is called automatically by the engine when a node is "
"fully instantiated."
msgstr ""
"シーンがインスタンス化されたときにシグナルを接続したいのですが、それには :"
"ref:`Node._ready() <class_Node_private_method__ready>` ビルトイン関数を使用し"
"て接続できます。この関数はノードが完全にインスタンス化されるとエンジンから自"
"動的に呼び出されます 。"

msgid ""
"To get a reference to a node relative to the current one, we use the method :"
"ref:`Node.get_node() <class_Node_method_get_node>`. We can store the "
"reference in a variable."
msgstr ""
"現在のノードに関連するノードの参照を取得するには、 :ref:`Node.get_node() "
"<class_Node_method_get_node>` というメソッドを使用します。この参照は変数に格"
"納することができます。"

msgid ""
"The function ``get_node()`` looks at the Sprite2D's children and gets nodes "
"by their name. For example, if you renamed the Timer node to "
"\"BlinkingTimer\" in the editor, you would have to change the call to "
"``get_node(\"BlinkingTimer\")``."
msgstr ""
"関数 \\ ``get_node()``\\ は Sprite2D の子を調べ、その名前によってノードを取得"
"します。たとえば、エディタで Timer ノードの名前を \"BlinkingTimer\" に変更し"
"た場合、呼び出しを\\ ``get_node(\"BlinkingTimer\")``\\ に変更する必要がありま"
"す。"

msgid ""
"We can now connect the Timer to the Sprite2D in the ``_ready()`` function."
msgstr ""
"これで、\\ ``_ready()``\\ 関数の中で Timer を Sprite2D に接続することができま"
"す。"

msgid ""
"The line reads like so: we connect the Timer's \"timeout\" signal to the "
"node to which the script is attached. When the Timer emits ``timeout``, we "
"want to call the function ``_on_timer_timeout()``, that we need to define. "
"Let's add it at the bottom of our script and use it to toggle our sprite's "
"visibility."
msgstr ""
"この行は次のようになります。Timer の \"timeout\" シグナルを、スクリプトが接続"
"されているノードに接続します。Timer が \"timeout\" を発信したら、関数 "
"``_on_timer_timeout()`` を呼び出したいので、これを定義する必要があります。ス"
"クリプトの下部にこの関数を追加し、それを使用してスプライトの表示を切り替えま"
"しょう。"

msgid ""
"By convention, we name these callback methods in GDScript as "
"\"_on_node_name_signal_name\" and in C# as \"OnNodeNameSignalName\". Here, "
"it'll be \"_on_timer_timeout\" for GDScript and OnTimerTimeout() for C#."
msgstr ""
"規約では、このようなコールバックメソッドはGDScriptでは"
"\"_on_node_name_signal_name\"と命名されて、C#では \"OnNodeNameSignalName\" と"
"命名されます。ここでは、GDScriptだと \"_on_timer_timeout\"、C#では "
"OnTimerTimeout() となります。"

msgid ""
"The ``visible`` property is a boolean that controls the visibility of our "
"node. The line ``visible = not visible`` toggles the value. If ``visible`` "
"is ``true``, it becomes ``false``, and vice-versa."
msgstr ""
"\\ ``visible``\\ のプロパティはブール値で、ノードの可視性を制御します。\\ "
"``visible = not visible``\\ の行で値を反転します。\\ ``visible``\\ が \\ "
"``true``\\ なら、\\ ``false``\\ に、また逆の場合も同様です。"

msgid ""
"If you run the Node2D scene now, you will see that the sprite blinks on and "
"off, at one second intervals."
msgstr ""
"この2Dシーンを実行すると、スプライトが1秒間隔で点滅するのがわかるでしょう。"

msgid "Complete script"
msgstr "完全なスクリプト"

msgid ""
"That's it for our little moving and blinking Godot icon demo! Here is the "
"complete ``sprite_2d.gd`` file for reference."
msgstr ""
"これで、Godot アイコンが動いて点滅する、小さなデモを終了します！参考までに、"
"以下が\\ ``sprite_2d.gd``\\ の完全なファイルです。"

msgid "Custom signals"
msgstr "カスタムシグナル"

msgid ""
"This section is a reference on how to define and use your own signals, and "
"does not build upon the project created in previous lessons."
msgstr ""
"このセクションは、独自のシグナルを定義して使用する方法についての参考であり、"
"前のレッスンで作成したプロジェクトを使用するものではありません。"

msgid ""
"You can define custom signals in a script. Say, for example, that you want "
"to show a game over screen when the player's health reaches zero. To do so, "
"you could define a signal named \"died\" or \"health_depleted\" when their "
"health reaches 0."
msgstr ""
"スクリプトでカスタムシグナルを定義することができます。例えば、プレイヤーの体"
"力が0になったときにゲームオーバー画面を表示させたいとします。そのためには、体"
"力が0になったときに、\"died\" (死亡)や \"health_depleted\"(体力の枯渇) という"
"名前のシグナルを定義することができます。"

msgid ""
"As signals represent events that just occurred, we generally use an action "
"verb in the past tense in their names."
msgstr ""
"シグナルは発生したばかりのイベントを表現するため、通常、動作を表す過去形の動"
"詞をシグナルの名前に使用します。"

msgid ""
"Your signals work the same way as built-in ones: they appear in the Node tab "
"and you can connect to them like any other."
msgstr ""
"作成したシグナルは、組み込まれたシグナルと同じように動作します。シグナルは"
"ノード(\"Node\")タブに表示され、他のシグナルと同様に接続することができます。"

msgid "To emit a signal in your scripts, call ``emit()`` on the signal."
msgstr "スクリプト内でシグナルを発信するには、\\ ``emit()``\\ を呼び出します。"

msgid ""
"A signal can optionally declare one or more arguments. Specify the argument "
"names between parentheses:"
msgstr ""
"シグナルは、オプションで1つ以上の引数を宣言できます。カッコの中に引数の名前を"
"指定します:"

msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"シグナル引数はエディタのノードドックに表示され、Godotはそれらを使用してコール"
"バック関数を生成できます。しかしながら、シグナルを発信するときに、任意の数の"
"引数を発行できます。正しい値を出力するのはあなた次第です。"

msgid ""
"To emit values along with the signal, add them as extra arguments to the "
"``emit()`` function:"
msgstr ""
"シグナルと一緒に値を出力するには、\\ ``emit()``\\ 関数に追加の引数として値を"
"追加します。"

msgid "Summary"
msgstr "要約"

msgid ""
"Any node in Godot emits signals when something specific happens to them, "
"like a button being pressed. Other nodes can connect to individual signals "
"and react to selected events."
msgstr ""
"Godot ではどのノードも、ボタンが押されるなど、何か特定のことが起こるとシグナ"
"ルを発し ます。他のノードは個々のシグナルに接続し、選択されたイベントに反応す"
"ることができます。"

msgid ""
"Signals have many uses. With them, you can react to a node entering or "
"exiting the game world, to a collision, to a character entering or leaving "
"an area, to an element of the interface changing size, and much more."
msgstr ""
"シグナルには多くの用途があります。これらを使用すると、ゲームワールドに出入り"
"するノード、衝突、領域に出入りするキャラクター、サイズが変化するインターフェ"
"イスの要素など、多くのことに反応できます。"

msgid ""
"For example, an :ref:`Area2D <class_Area2D>` representing a coin emits a "
"``body_entered`` signal whenever the player's physics body enters its "
"collision shape, allowing you to know when the player collected it."
msgstr ""
"たとえば、コインの見た目をした :ref:`Area2D <class_Area2D>` は、プレイヤーの"
"物理ボディが衝突形状(コリジョンシェイプ)に入るたびに \\ ``body_entered``\\ シ"
"グナルを発し、プレイヤーがそれを収集したタイミングを知ることができます。"

msgid ""
"In the next section, :ref:`doc_your_first_2d_game`, you'll create a complete "
"2D game and put everything you learned so far into practice."
msgstr ""
"次のセクション、 :ref:`doc_your_first_2d_game` では、完全な2Dゲームを作成し、"
"これまでに学んだことを実践します。"
