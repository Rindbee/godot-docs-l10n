#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "playerシーンの作成"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""
"プロジェクト設定が完了したので、操作できるキャラクターを作成しましょう。"

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"最初のシーンでは、 ``Player`` オブジェクトを定義します。Player シーンを独立し"
"て作成する利点の 1 つは、たとえゲームの他の部分を作成する前であっても、個別に"
"テストができることです。"

msgid "Node structure"
msgstr "ノード構成"

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"``Area2D`` を使用すると、プレイヤーに重なり合ったり、プレイヤーに衝突したりす"
"るオブジェクトを検出できます。ノードの名前をダブルクリックして、名前を "
"``Player`` に変更します。シーンのルートノードを決めたので、これにノードを追加"
"して機能を追加できます。"

msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock. Its tooltip says \"Groups the "
"selected node with its children. This causes the parent to be selected when "
"any child node is clicked in 2D and 3D view.\""
msgstr ""
"``Player`` ノードに子を追加する前に、それらを誤ってクリックしてしまうことで移"
"動したりサイズを変更したりすることがないようにしておきます。ノードを選択し、"
"鍵アイコンの右側にあるアイコンをクリックします。ツールチップには「選択した"
"ノードを子でグループ化します。これにより、子ノードが2Dと3Dビューでクリックさ"
"れたときに親が選択されるようになります」と書いてあります。"

msgid "For this project, we will be following the Godot naming conventions."
msgstr "このプロジェクトでは、Godotの命名規則に従います。"

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: クラス(ノード)はPascalCaseを使用し、変数と関数はsnake_caseを使"
"用し、定数はALL_CAPSを使用します(\\ :ref:`doc_gdscript_styleguide`\\ を参"
"照)。"

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: クラス、export変数、メソッドはPascalCaseを使用し、プライベートフィー"
"ルドは _camelCase を使用し、ローカル変数とパラメーターは camelCase を使用しま"
"す(\\ :ref:`doc_c_sharp_styleguide`\\ を参照)。シグナルを接続するときは、メ"
"ソッド名を正確に入力してください。"

msgid "Sprite animation"
msgstr "スプライトアニメーション"

msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite2D`` node and set the "
"``Scale`` property to ``(0.5, 0.5)``. You can find it in the Inspector under "
"the ``Node2D`` heading."
msgstr ""
"プレーヤーの画像はゲーム ウィンドウに対して少し大きすぎるため、縮小する必要が"
"あります。 ``AnimatedSprite2D`` ノードをクリックし、 ``Scale`` プロパティを "
"``(0.5, 0.5)`` に設定します。 これは、インスペクターの ``Node2D`` ヘッダの下"
"にあります。"

msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\" -> \"New "
"CapsuleShape2D\". Using the two size handles, resize the shape to cover the "
"sprite:"
msgstr ""
"最後に、 :ref:`CollisionShape2D <class_CollisionShape2D>` を ``Player`` の子"
"として追加します。 これにより、プレイヤーの「ヒットボックス」、つまり衝突領域"
"の境界が決まります。 このキャラクターの場合、 ``CapsuleShape2D`` ノードが最適"
"なフィット感を与えるので、インスペクターの「Shape」項目の横にある「<空>」をク"
"リックし「新規 CapsuleShape2D」を選択します。 2 つのサイズ ハンドルを使用し"
"て、スプライトを覆うようにシェイプのサイズを変更します。"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "完了すると、 ``Player`` シーンは次のようになります:"

msgid "Make sure to save the scene again after these changes."
msgstr "これらの変更後は、必ずシーンを再度保存してください。"

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"次のパートでは、動かしたりアニメーションさせるためのスクリプトをplayerノード"
"に追加します。それから、playerがなにかにあたった事がわかるよう、衝突判定を設"
"定します。"
