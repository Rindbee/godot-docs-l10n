#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Code style guidelines"
msgstr "コードスタイルガイドライン"

msgid ""
"When contributing to Godot's source code, you will be expected to follow the "
"style guidelines outlined below. Some of them are checked via the Continuous "
"Integration process and reviewers will ask you to fix potential issues, so "
"best setup your system as outlined below to ensure all your commits follow "
"the guidelines."
msgstr ""
"Godotのソースコードに投稿する場合は、以下に示すスタイルガイドラインに従ってく"
"ださい。一部のインテグレーションプロセスを介してチェックされ、レビュー担当者"
"から潜在的な問題の修正を求める質問が表示されますので、以下に示すようにシステ"
"ムをセットアップして、すべてのコミットがガイドラインに従うようにします。"

msgid "C++ and Objective-C"
msgstr "C++およびObjective-C"

msgid ""
"Indentation and alignment are both tab based (respectively one and two tabs)"
msgstr "インデントと配置は両方ともタブベースです(それぞれ1つと2つのタブ)"

msgid "One space around math and assignments operators as well as after commas"
msgstr "コンマの後だけでなく、数学演算子と代入演算子の周りに1つのスペース"

msgid ""
"Pointer and reference operators are affixed to the variable identifier, not "
"to the type name"
msgstr "ポインタ演算子と参照演算子は、型名ではなく変数識別子に貼り付けられます"

msgid "See further down regarding header includes"
msgstr "ヘッダーのインクルードに関する詳細を参照してください"

msgid ""
"The rules used by clang-format are outlined in the `.clang-format <https://"
"github.com/godotengine/godot/blob/master/.clang-format>`__ file of the Godot "
"repository."
msgstr ""
"\\ clang形式で使用されるルールは、Godotリポジトリの\\ `.clang形式 <https://"
"github.com/godotengine/godot/blob/master/.clang-format>`_\\ ファイルで概説さ"
"れています。"

msgid "Using clang-format locally"
msgstr "\\ clang形式をローカルで使用する"

msgid "Pre-commit hook"
msgstr "プレコミット フック"

msgid "Installation"
msgstr "インストール手順"

msgid "Here's how to install clang-format:"
msgstr "\\ clang形式をインストールする方法は次のとおりです:"

msgid ""
"You then have different possibilities to apply clang-format to your changes:"
msgstr "変更にclang-formatを適用する方法はいくつかあります:"

msgid "Manual usage"
msgstr "手動使用"

msgid ""
"``-i`` means that the changes should be written directly to the file (by "
"default clang-format would only output the fixed version to the terminal)."
msgstr ""
"``-i`` は、変更をファイルに直接書き込む必要があることを意味します(デフォルト"
"ではclang形式では、固定バージョンは端末にのみ出力されます)。"

msgid ""
"The path can point to several files, either one after the other or using "
"wildcards like in a typical Unix shell. Be careful when globbing so that you "
"don't run clang-format on compiled objects (.o and .a files) that are in "
"Godot's tree. So better use ``core/*.{cpp,h}`` than ``core/*``."
msgstr ""
"パスは、次々に、または典型的なUnixシェルのようにワイルドカードを使用して、複"
"数のファイルを指すことができます。 グロブするときは、Godotのツリーにあるコン"
"パイル済みオブジェクト(.oおよび.aファイル)でclang-formatを実行しないように注"
"意してください。 そのため、 ``core/*`` よりも ``core/*.{cpp,h}`` を使用する方"
"が適切です。"

msgid "IDE plugin"
msgstr "IDEプラグイン"

msgid "Here is a non-exhaustive list of beautifier plugins for some IDEs:"
msgstr "一部のIDE用の美しいプラグインの非網羅的なリストを以下に示します:"

msgid ""
"Visual Studio Code: `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`__"
msgstr ""
"Visual Studio Code: `Clang-Format <https://marketplace.visualstudio.com/"
"items?itemName=xaver.clang-format>`_"

msgid "vim: `vim-clang-format <https://github.com/rhysd/vim-clang-format>`__"
msgstr "vim: `vim-clang-format <https://github.com/rhysd/vim-clang-format>`_"

msgid "Header includes"
msgstr "ヘッダーのインクルード"

msgid ""
"When adding new C++ or Objective-C files or including new headers in "
"existing ones, the following rules should be followed:"
msgstr ""
"新しいC++またはObjective-Cファイルを追加するとき、または既存のファイルに新し"
"いヘッダーを含めるときは、次の規則に従う必要があります:"

msgid ""
"The first lines in the file should be Godot's copyright header and MIT "
"license, copy-pasted from another file. Make sure to adjust the filename."
msgstr ""
"ファイルの最初の行は、別のファイルからコピーアンドペーストされたGodotの著作権"
"ヘッダーとMITライセンスでなければなりません。必ずファイル名を調整してくださ"
"い。"

msgid ""
"In a ``.h`` header, include guards should be used with the form "
"``FILENAME_H``."
msgstr ""
"``.h`` ヘッダーでは、インクルードガードを ``FILENAME_H`` の形式で使用する必要"
"があります。"

msgid ""
"In a ``.cpp`` file (e.g. ``filename.cpp``), the first include should be the "
"one where the class is declared (e.g. ``#include \"filename.h\"``), followed "
"by an empty line for separation."
msgstr ""
"``.cpp`` ファイル(たとえば ``filename.cpp``)では、最初のインクルードはクラス"
"が宣言されているもの(たとえば ``#include \"filename.h\"``)で、その後に分離の"
"ための空白行が続く必要があります。"

msgid ""
"Then come headers from Godot's own code base, included in alphabetical order "
"(enforced by ``clang-format``) with paths relative to the root folder. Those "
"includes should be done with quotes, e.g. ``#include \"core/object.h\"``. "
"The block of Godot header includes should then be followed by an empty line "
"for separation."
msgstr ""
"次に、Godot独自のコードベースからヘッダーを取得します。このヘッダーは、アル"
"ファベット順(``clang-format`` で強制)に含まれ、ルートフォルダからの相対パスを"
"持ちます。これらのインクルードは引用符で行う必要があります。\\ ``#include "
"\"core/object.h\"``\\ 。 Godotヘッダーのインクルードブロックの後には、分離の"
"ために空白行が続く必要があります。"

msgid "Example:"
msgstr "例:"

msgid "Java"
msgstr "Java"

msgid "Python"
msgstr "Python"

msgid ""
"Godot's SCons buildsystem is written in Python, and various scripts included "
"in the source tree are also using Python."
msgstr ""
"GodotのSConsビルドシステムはPythonで書かれており、ソースツリーに含まれる様々"
"なスクリプトもPythonを使用しています。"

msgid "Comment style guide"
msgstr "コメントスタイルガイド"

msgid "**Example:**"
msgstr "**例:**"
