#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom modules in C++"
msgstr "C++のカスタムモジュール"

msgid "Modules"
msgstr "モジュール"

msgid ""
"Godot allows extending the engine in a modular way. New modules can be "
"created and then enabled/disabled. This allows for adding new engine "
"functionality at every level without modifying the core, which can be split "
"for use and reuse in different modules."
msgstr ""
"Godotでは、モジュール方式でエンジンを拡張できます。新しいモジュールを作成して"
"から、有効/無効にすることができます。これにより、コアを変更せずにすべてのレベ"
"ルで新しいエンジン機能を追加できます。コアは別のモジュールで使用および再利用"
"するために分割できます。"

msgid ""
"Modules are located in the ``modules/`` subdirectory of the build system. By "
"default, dozens of modules are enabled, such as GDScript (which, yes, is not "
"part of the base engine), the Mono runtime, a regular expressions module, "
"and others. As many new modules as desired can be created and combined. The "
"SCons build system will take care of it transparently."
msgstr ""
"モジュールは、ビルドシステムの ``modules/`` サブディレクトリにあります。デ"
"フォルトでは、GDScript(そう、これはエンジン基盤の一部ではありません)、Mono ラ"
"ンタイム、正規表現モジュールなど、多くの異なるモジュールが存在します。必要に"
"応じて多くの新しいモジュールを作成して組み合わせることができます。SConsビルド"
"システムが透過的に処理します。"

msgid "What for?"
msgstr "何のために？"

msgid ""
"While it's recommended that most of a game be written in scripting (as it is "
"an enormous time saver), it's perfectly possible to use C++ instead. Adding "
"C++ modules can be useful in the following scenarios:"
msgstr ""
"ゲームの大部分はスクリプトで記述することをお勧めしますが(時間を大幅に節約でき"
"るため)、代わりにC++を使用することも完全に可能です。 C++モジュールの追加は、"
"以下のシナリオで役立ちます:"

msgid "Binding an external library to Godot (like PhysX, FMOD, etc)."
msgstr "外部ライブラリをGodot にバインドする(PhysX、FMODなど)。"

msgid "Optimize critical parts of a game."
msgstr "ゲームの重要な部分を最適化する。"

msgid "Adding new functionality to the engine and/or editor."
msgstr "エンジンまたはエディタに新しい機能を追加する。"

msgid "Porting an existing game to Godot."
msgstr "既存のゲームをGodotへ移植する。"

msgid "Write a whole, new game in C++ because you can't live without C++."
msgstr "C++なしでは生きていけないので、C++でまったく新しいゲームを書く。"

msgid "Creating a new module"
msgstr "新しいモジュールの作成"

msgid ""
"Before creating a module, make sure to :ref:`download the source code of "
"Godot and compile it <toc-devel-compiling>`."
msgstr ""
"モジュールを作成する前に、 :ref:`Godot のソースコードをダウンロードし、コンパ"
"イルしてください <toc-devel-compiling>` 。"

msgid ""
"To create a new module, the first step is creating a directory inside "
"``modules/``. If you want to maintain the module separately, you can "
"checkout a different VCS into modules and use it."
msgstr ""
"新しいモジュールを作成するには、最初のステップは ``modules/`` 内にディレクト"
"リを作成することです。モジュールを個別に保守する場合は、別のVCSをモジュールに"
"チェックアウトして使用できます。"

msgid ""
"The example module will be called \"summator\" (``godot/modules/summator``). "
"Inside we will create a summator class:"
msgstr ""
"モジュールの例は \"summator\"(``godot/modules/summator``) とします。この中に"
"summatorクラスを作成します:"

msgid "And then the cpp file."
msgstr "それからcppファイル。"

msgid ""
"Then, the new class needs to be registered somehow, so two more files need "
"to be created:"
msgstr ""
"次に、新しいクラスを何らかの方法で登録する必要があるので、さらに2つのファイル"
"を作成する必要があります:"

msgid ""
"With multiple sources, you can also add each file individually to a Python "
"string list:"
msgstr ""
"複数のソースを使用して、各ファイルをPython文字列リストに個別に追加することも"
"できます:"

msgid ""
"To add include directories for the compiler to look at you can append it to "
"the environment's paths:"
msgstr ""
"コンパイラが見るインクルードディレクトリを追加するには、環境のパスに追加しま"
"す:"

msgid ""
"The module is asked if it's OK to build for the specific platform (in this "
"case, ``True`` means it will build for every platform)."
msgstr ""
"モジュールは、特定のプラットフォーム用にビルドしてもよいかどうかを尋ねられま"
"す(この場合、\\ ``True`` はすべてのプラットフォーム用にビルドすることを意味し"
"ます)。"

msgid ""
"And that's it. Hope it was not too complex! Your module should look like "
"this:"
msgstr ""
"以上です。あまり複雑でなければいいのですが。モジュールは次のようになります:"

msgid ""
"You can then zip it and share the module with everyone else. When building "
"for every platform (instructions in the previous sections), your module will "
"be included."
msgstr ""
"その後、それを圧縮し、他の人とモジュールを共有することができます。すべてのプ"
"ラットフォーム (前のセクションの手順)を構築する場合は、モジュールが含まれま"
"す。"

msgid ""
"There is a parameter limit of 5 in C++ modules for things such as "
"subclasses. This can be raised to 13 by including the header file ``core/"
"method_bind_ext.gen.inc``."
msgstr ""
"サブクラスなどのC++モジュールには、パラメーター数が5までの制限があります。こ"
"れは、ヘッダーファイル ``core/method_bind_ext.gen.inc`` を含めることで13に上"
"げることができます。"

msgid "Using the module"
msgstr "モジュールの使用"

msgid "You can now use your newly created module from any script:"
msgstr "これで、任意のスクリプトから新しく作成したモジュールを使用できます:"

msgid "The output will be ``60``."
msgstr "出力は ``60`` になります。"

msgid ""
"The previous Summator example is great for small, custom modules, but what "
"if you want to use a larger, external library? Refer to :ref:"
"`doc_binding_to_external_libraries` for details about binding to external "
"libraries."
msgstr ""
"前のSummatorの例は、小さなカスタムモジュールに最適ですが、より大きな外部ライ"
"ブラリを使用する場合はどうでしょうか。外部ライブラリへのバインドの詳細につい"
"ては、\\ :ref:`doc_binding_to_external_libraries` を参照してください。"

msgid ""
"If your module is meant to be accessed from the running project (not just "
"from the editor), you must also recompile every export template you plan to "
"use, then specify the path to the custom template in each export preset. "
"Otherwise, you'll get errors when running the project as the module isn't "
"compiled in the export template. See the :ref:`Compiling <toc-devel-"
"compiling>` pages for more information."
msgstr ""
"モジュールが(エディタからだけでなく)実行中のプロジェクトからアクセスされる場"
"合、使用する予定のすべてのエクスポートテンプレートを再コンパイルし、各エクス"
"ポートプリセットでカスタムテンプレートへのパスを指定する必要があります。そう"
"しないと、モジュールがエクスポートテンプレートでコンパイルされないため、プロ"
"ジェクトの実行時にエラーが発生します。詳細については、\\ :ref:`Compiling "
"<toc-devel-compiling>` ページを参照してください。"

msgid "Improving the build system for development"
msgstr "開発のためのビルドシステムの改善"

msgid ""
"The solution to avoid such a cost is to build our own module as a shared "
"library that will be dynamically loaded when starting our game's binary."
msgstr ""
"このようなコストを回避するソリューションは、ゲームのバイナリを起動するときに"
"動的に読み込まれる共有ライブラリとして独自のモジュールを構築することです。"

msgid ""
"Now by default ``scons`` command will build our module as part of Godot's "
"binary and as a shared library when passing ``summator_shared=yes``."
msgstr ""
"現在、デフォルトで ``scons`` コマンドは、モジュールをGodotのバイナリの一部と"
"して、そして ``summator_shared = yes`` を渡すときに共有ライブラリとしてビルド"
"します。"

msgid "Writing custom documentation"
msgstr "カスタムドキュメントの作成"

msgid "There are several steps in order to setup custom docs for the module:"
msgstr ""
"モジュールのカスタムドキュメントをセットアップするには、いくつかの手順があり"
"ます:"

msgid ""
"Make a new directory in the root of the module. The directory name can be "
"anything, but we'll be using the ``doc_classes`` name throughout this "
"section."
msgstr ""
"モジュールのルートに新しいディレクトリを作成します。ディレクトリ名は何でもか"
"まいませんが、このセクションでは ``doc_classes`` という名前を使用します。"

msgid "Now we can generate the documentation:"
msgstr "これで、ドキュメントを生成できます:"

msgid "Run command:"
msgstr "コマンドの実行:"

msgid "Adding custom editor icons"
msgstr "カスタムエディタアイコンの追加"

msgid ""
"Similarly to how you can write self-contained documentation within a module, "
"you can also create your own custom icons for classes to appear in the "
"editor."
msgstr ""
"モジュール内で自己完結型のドキュメントを作成する方法と同様に、エディタに表示"
"されるクラスの独自のカスタムアイコンを作成することもできます。"

msgid ""
"For the actual process of creating editor icons to be integrated within the "
"engine, please refer to :ref:`doc_editor_icons` first."
msgstr ""
"エンジン内に統合されるエディタアイコンを作成する実際のプロセスについては、最"
"初に :ref:`doc_editor_icons` を参照してください。"

msgid "Once you've created your icon(s), proceed with the following steps:"
msgstr "アイコンを作成したら、次の手順に進みます:"

msgid ""
"Make a new directory in the root of the module named ``icons``. This is the "
"default path for the engine to look for module's editor icons."
msgstr ""
"``icons`` という名前のモジュールのルートに新しいディレクトリを作成します。こ"
"れは、モジュールのエディタアイコンを検索するエンジンのデフォルトパスです。"

msgid ""
"Move your newly created ``svg`` icons (optimized or not) into that folder."
msgstr ""
"新しく作成した ``svg`` アイコン(最適化されているかどうかに関係なく)をそのフォ"
"ルダに移動します。"

msgid ""
"Recompile the engine and run the editor. Now the icon(s) will appear in "
"editor's interface where appropriate."
msgstr ""
"エンジンを再コンパイルし、エディタを実行します。必要に応じて、エディタのイン"
"ターフェースにアイコンが表示されます。"

msgid ""
"If you'd like to store your icons somewhere else within your module, add the "
"following code snippet to ``config.py`` to override the default path:"
msgstr ""
"モジュール内の別の場所にアイコンを保存したい場合は、次のコードスニペットを "
"``config.py`` に追加してデフォルトパスをオーバーライドします:"

msgid "Summing up"
msgstr "まとめ"

msgid "Remember to:"
msgstr "覚えておいてください:"

msgid "Use ``GDCLASS`` macro for inheritance, so Godot can wrap it."
msgstr "継承に ``GDCLASS`` マクロを使用するので、Godotはそれをラップできます。"

msgid ""
"But this is not all, depending what you do, you will be greeted with some "
"(hopefully positive) surprises."
msgstr ""
"しかし、これはすべてではありません、あなたが何をするかに応じて、いくつかの(う"
"まくいけば肯定的な)驚きで迎えられます。"

msgid ""
"If you inherit from :ref:`class_Resource`, it will appear in the resource "
"list, and all the exposed properties can be serialized when saved/loaded."
msgstr ""
":ref:`class_Resource`\\ から継承すると、リソース リストに表示され、公開されて"
"いるすべてのプロパティは、保存/読み込み時にシリアル化できます。"

msgid ""
"By this same logic, you can extend the Editor and almost any area of the "
"engine."
msgstr ""
"この同じロジックによって、エディタとエンジンのほぼすべての領域を拡張できま"
"す。"
