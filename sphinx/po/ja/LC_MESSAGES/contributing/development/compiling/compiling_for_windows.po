#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for Windows"
msgstr "Windows用のコンパイル"

msgid "Requirements"
msgstr "必要条件"

msgid "For compiling under Windows, the following is required:"
msgstr "Windowsでコンパイルするには、次のことが必要です:"

msgid ""
"If you have `Scoop <https://scoop.sh/>`_ installed, you can easily install "
"MinGW and other dependencies using the following command::"
msgstr ""
"もし `Scoop <https://scoop.sh/>`_ がインストールされていれば、MinGWや他の依存"
"関係を、次のコマンドで簡単にインストールできます:"

msgid ""
"If you have `MSYS2 <https://www.msys2.org/>`_ installed, you can easily "
"install MinGW and other dependencies using the following command::"
msgstr ""
"もし `MSYS2 <https://www.msys2.org/>`_ がインストールされていれば、MinGWや他"
"の依存関係を、次のコマンドで簡単にインストールできます:"

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"Godotにおける基本的なSconsの使い方については、\\ :ref:"
"`doc_introduction_to_the_buildsystem`\\ を参照してください。"

msgid "Setting up SCons"
msgstr "SConsの設定"

msgid ""
"To check whether you have installed Python and SCons correctly, you can type "
"``python --version`` and ``scons --version`` into a command prompt (``cmd."
"exe``)."
msgstr ""
"PythonとSConsがきちんとインストールされたかどうか確認するには、コマンドプロン"
"プト (``cmd.exe``) にて\\ ``python --version``\\ および\\ ``scons --"
"version``\\ とタイプしてみてください。"

msgid ""
"If the commands above don't work, make sure to add Python to your ``PATH`` "
"environment variable after installing it, then check again. You can do so by "
"running the Python installer again and enabling the option to add Python to "
"the ``PATH``."
msgstr ""
"上記のコマンドが失敗した場合は、インストール後にPythonを環境変数\\ "
"``PATH``\\ に含めてから、ふたたび確認してください。そうするには、Pythonインス"
"トーラーを再実行して、Pythonを\\ ``PATH``\\ に含めるオプションを有効にすれば"
"できます。"

msgid "Downloading Godot's source"
msgstr "Godotのソースをダウンロードする"

msgid ""
"The tutorial will assume from now on that you placed the source code in ``C:"
"\\godot``."
msgstr ""
"ここからのチュートリアルは、ソースコードを\\ ``C:\\godot``\\ に置いたとして進"
"めます。"

msgid "Compiling"
msgstr "コンパイル"

msgid "Selecting a compiler"
msgstr "コンパイラの選択"

msgid "Running SCons"
msgstr "SConsの実行"

msgid ""
"When compiling with multiple CPU threads, SCons may warn about pywin32 being "
"missing. You can safely ignore this warning."
msgstr ""
"複数CPUスレッドでコンパイルするとき、pywin32が無いという警告をSConsは出すかも"
"しれません。しかし、これは無視しても大丈夫です。"

msgid ""
"This executable file contains the whole engine and runs without any "
"dependencies. Running it will bring up the Project Manager."
msgstr ""
"この実行ファイルにはエンジン全体が含まれていて、単体で起動できます。実行する"
"と、プロジェクト マネージャーが現れます。"

msgid ""
"You can create a Visual Studio solution via SCons by running SCons with the "
"``vsproj=yes`` parameter, like this::"
msgstr ""
"SConsを ``vsproj=yes`` パラメーターとともに実行すれば、Visual Studioソリュー"
"ションを生成できます::"

msgid ""
"You will be able to open Godot's source in a Visual Studio solution now, and "
"able to build Godot using Visual Studio's **Build** button."
msgstr ""
"これでGodotのソースをVisual Studioのソリューションとして開けるようになり、"
"Visual Studioの\\ **ビルド (Build)**\\ ボタンでビルドできます。"

msgid "Cross-compiling for Windows from other operating systems"
msgstr "他のオペレーティングシステムからのWindowsのクロスコンパイル"

msgid "**Arch Linux**"
msgstr "\\ **Arch Linux**"

msgid "**Debian** / **Ubuntu**"
msgstr "**Debian** / **Ubuntu**"

msgid "**Fedora**"
msgstr "**Fedora**"

msgid "**macOS**"
msgstr "**macOS**"

msgid "**Mageia**"
msgstr "\\ **Mageia**"

msgid ""
"Before attempting the compilation, SCons will check for the following "
"binaries in your ``PATH`` environment variable::"
msgstr ""
"コンパイルする前に、SConsは下記のバイナリが ``PATH`` 環境変数にあるかチェック"
"します::"

msgid ""
"To make sure you are doing things correctly, executing the following in the "
"shell should result in a working compiler (the version output may differ "
"based on your system)::"
msgstr ""
"正しく設定できたか確認するには、下記のシェルを実行することで動くコンパイラが"
"呼ばれるはずです (バージョン表示はシステムにより異なります)::"

msgid "Troubleshooting"
msgstr "トラブルシューティング"

msgid ""
"Cross-compiling from some Ubuntu versions may lead to `this bug <https://"
"github.com/godotengine/godot/issues/9258>`_, due to a default configuration "
"lacking support for POSIX threading."
msgstr ""
"Ubuntuのいくつかのバージョンでは、標準設定でPOSIXスレッディングが有効になって"
"いないので、クロスコンパイルすると\\ `このバグ <https://github.com/"
"godotengine/godot/issues/9258>`_ (英語) が発生する可能性があります。"

msgid ""
"You can change that configuration following those instructions, for 64-bit::"
msgstr ""
"下記のとおりにすれば設定を変更できます。64ビットの場合 (それぞれ実行してか"
"ら、リストにある x86_64-w64-mingw32-gcc-posix および x86_64-w64-mingw32-g++-"
"posix を選択する)::"

msgid "And for 32-bit::"
msgstr ""
"そして32ビットの場合 (それぞれ実行してから、リストにある i686-w64-mingw32-"
"gcc-posix および i686-w64-mingw32-g++-posix を選択する)::"

msgid "Creating Windows export templates"
msgstr "Windowsエクスポートテンプレートの作成"

msgid "With the following names::"
msgstr "名前は次のようにします::"

msgid ""
"However, if you are using custom modules or custom engine code, you may "
"instead want to configure your binaries as custom export templates here:"
msgstr ""
"一方、もしカスタム モジュールやカスタム エンジンコードを使用しているなら、バ"
"イナリをカスタムのエクスポート テンプレートとして指定することもできます。"

msgid ""
"You don't need to copy them in this case, just reference the resulting files "
"in the ``bin\\`` directory of your Godot source folder, so the next time you "
"build, you will automatically have the custom templates referenced."
msgstr ""
"この場合はコピーする必要はなく、Godotのソースフォルダ内にある ``bin\\`` ディ"
"レクトリに出力されたファイルを指定するだけです。こうすれば、次にビルドした時"
"も、自動的にカスタム テンプレートを参照するようになります。"
