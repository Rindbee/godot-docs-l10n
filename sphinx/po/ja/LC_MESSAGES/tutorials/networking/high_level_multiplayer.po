#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid ""
"The following explains the differences of high- and low-level networking in "
"Godot as well as some fundamentals. If you want to jump in head-first and "
"add networking to your first nodes, skip to `Initializing the network`_ "
"below. But make sure to read the rest later on!"
msgstr ""
"以下では、Godotの高レベルネットワークと低レベルネットワークの違いといくつかの"
"基本事項について説明します。基本をとばして最初のノードにネットワークを追加す"
"る場合は、以下の `Initializing the network`_ までスキップしてください。ただ"
"し、後で残りも読んでください！"

msgid "This is due to the inherent limitations of the low-level protocols:"
msgstr "これは、低レベルプロトコルの固有の制限によるものです:"

msgid ""
"TCP ensures packets will always arrive reliably and in order, but latency is "
"generally higher due to error correction. It's also quite a complex protocol "
"because it understands what a \"connection\" is, and optimizes for goals "
"that often don't suit applications like multiplayer games. Packets are "
"buffered to be sent in larger batches, trading less per-packet overhead for "
"higher latency. This can be useful for things like HTTP, but generally not "
"for games. Some of this can be configured and disabled (e.g. by disabling "
"\"Nagle's algorithm\" for the TCP connection)."
msgstr ""
"TCPは、パケットが常に確実に順序どおりに到着することを保証しますが、一般に、エ"
"ラー修正のために待ち時間が長くなります。また、手順に「接続(connection)」を必"
"要とし、マルチプレイヤーゲームのようなアプリケーションには向かない目的に合わ"
"せて最適化されているので、非常に複雑なプロトコルでもあります。パケットはより"
"大きなバッチで送信されるようにバッファリングされ、パケットごとのオーバーヘッ"
"ドが少なくなり、待ち時間が長くなります。これはHTTPのようなものには便利です"
"が、一般的にはゲームには役立ちません。この一部は、(例えば、TCP接続の「Nagleの"
"アルゴリズム」を無効にすることによって)設定および無効にすることができます。"

msgid ""
"UDP is a simpler protocol, which only sends packets (and has no concept of a "
"\"connection\"). No error correction makes it pretty quick (low latency), "
"but packets may be lost along the way or received in the wrong order. Added "
"to that, the MTU (maximum packet size) for UDP is generally low (only a few "
"hundred bytes), so transmitting larger packets means splitting them, "
"reorganizing them and retrying if a part fails."
msgstr ""
"UDPはより単純なプロトコルであり、パケットのみを送信します(「接続」の概念はあ"
"りません)。エラー修正を行わないので処理がかなり速くなりますが(低遅延)、パケッ"
"トは途中で失われたり、間違った順序で受信されたりする可能性があります。それに"
"加えて、UDPのMTU(最大パケットサイズ)は一般的に小さい(数百バイトのみ)ため、大"
"きなパケットを送信することは、パケットを分割し、再編成し、一部が失敗した場合"
"に再試行することを意味します。"

msgid ""
"In general, TCP can be thought of as reliable, ordered, and slow; UDP as "
"unreliable, unordered and fast. Because of the large difference in "
"performance, it often makes sense to re-build the parts of TCP wanted for "
"games (optional reliability and packet order), while avoiding the unwanted "
"parts (congestion/traffic control features, Nagle's algorithm, etc). Due to "
"this, most game engines come with such an implementation, and Godot is no "
"exception."
msgstr ""
"一般に、TCPは信頼性が高く、順序があり、低速であると考えることができます。それ"
"に対し、UDPは信頼性がなく、順序がなく、高速であるといえます。パフォーマンスが"
"大きく異なるため、多くの場合、ゲームに必要なTCPの部分(オプションの信頼性とパ"
"ケット順序)を再構築し、不要な部分(輻輳/トラフィック制御機能、Nagleのアルゴリ"
"ズムなど)を回避することは理にかなっています。このため、ほとんどのゲームエンジ"
"ンにはこのような実装が付属しており、Godotも例外ではありません。"

msgid ""
"In summary, you can use the low-level networking API for maximum control and "
"implement everything on top of bare network protocols or use the high-level "
"API based on :ref:`SceneTree <class_SceneTree>` that does most of the heavy "
"lifting behind the scenes in a generally optimized way."
msgstr ""
"要約すると、低レベルのネットワークAPIを使用して最大限の制御を行い、すべてを素"
"のネットワークプロトコルの上に実装するか、または :ref:`SceneTree "
"<class_SceneTree>`に基づいた高レベルAPIを使用するかです。これは、一般的に最適"
"化された方法で、シーンの後ろで重い処理を引き受けます。"

msgid ""
"This is always the case when networking is involved and has nothing to do "
"with Godot. You can of course experiment, but when you release a networked "
"application, always take care of any possible security concerns."
msgstr ""
"これは、ネットワーキングが関係する場合に常に当てはまり、Godotとは関係ありませ"
"ん。もちろん実験はできますが、ネットワークアプリケーションをリリースするとき"
"は、考えられるセキュリティ上の問題に常に注意してください。"

msgid "Mid-level abstraction"
msgstr "中レベルの抽象化"

msgid ""
"Before going into how we would like to synchronize a game across the "
"network, it can be helpful to understand how the base network API for "
"synchronization works."
msgstr ""
"ネットワークを介してゲームを同期する方法に入る前に、同期のための基本のネット"
"ワークAPIがどのように機能するかを理解しておくと役立ちます。"

msgid ""
"Godot uses a mid-level object :ref:`MultiplayerPeer "
"<class_MultiplayerPeer>`. This object is not meant to be created directly, "
"but is designed so that several C++ implementations can provide it."
msgstr ""
"Godotは、中レベルのオブジェクト :ref:`MultiplayerPeer "
"<class_MultiplayerPeer>` を使用します。このオブジェクトは直接作成するためのも"
"のではなく、いくつかのC++実装が提供できるように設計されています。"

msgid ""
"This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it "
"inherits all the useful methods for serializing, sending and receiving data. "
"On top of that, it adds methods to set a peer, transfer mode, etc. It also "
"includes signals that will let you know when peers connect or disconnect."
msgstr ""
"このオブジェクトは :ref:`PacketPeer <class_PacketPeer>` から継承されるため、"
"データのシリアル化、送信、受信に役立つすべてのメソッドを引き継ぎます。さら"
"に、ピア、転送モードなどを設定するメソッドを追加します。また、ピアが接続また"
"は切断したときに通知するシグナルも含まれています。"

msgid ""
"This class interface can abstract most types of network layers, topologies "
"and libraries. By default, Godot provides an implementation based on ENet (:"
"ref:`ENetMultiplayerPeer <class_ENetMultiplayerPeer>`), one based on WebRTC "
"(:ref:`WebRTCMultiplayerPeer <class_WebRTCMultiplayerPeer>`), and one based "
"on WebSocket (:ref:`WebSocketPeer <class_WebSocketPeer>`), but this could be "
"used to implement mobile APIs (for ad hoc WiFi, Bluetooth) or custom device/"
"console-specific networking APIs."
msgstr ""
"このクラスインターフェイスは、ほとんどの種類のネットワーク層、トポロジ、およ"
"びライブラリを抽象化できます。デフォルトでは、GodotはENet(:ref:"
"`ENetMultiplayerPeer <class_ENetMultiplayerPeer>`)に基づいた実装、WebRTC(:"
"ref:`WebRTCMultiplayerPeer <class_WebRTCMultiplayerPeer>`)に基づいた実装、お"
"よびWebSocket(:ref:`WebSocketPeer <class_WebSocketPeer>`)に基づいた実装を提供"
"しますが、これはモバイルAPI(アドホックWiFi、Bluetooth用)またはカスタムデバイ"
"ス/コンソール固有のネットワークAPIを実装するためにも使用できます。"

msgid ""
"For most common cases, using this object directly is discouraged, as Godot "
"provides even higher level networking facilities. This object is still made "
"available in case a game has specific needs for a lower-level API."
msgstr ""
"ほとんどの場合、Godotはさらに高度なネットワーク機能を提供するため、このオブ"
"ジェクトを直接使用することはお勧めしません。 それでも、ゲームに低レベルAPIの"
"特定のニーズがある時のために利用できるようになっています。"

msgid "Hosting considerations"
msgstr "ホスティング時の考慮事項"

msgid "Initializing the network"
msgstr "ネットワークの初期化"

msgid ""
"High level networking in Godot is managed by the :ref:`SceneTree "
"<class_SceneTree>`."
msgstr ""
"Godotの高レベルのネットワーキングは :ref:`SceneTree <class_SceneTree>` によっ"
"て管理されます。"

msgid "Managing connections"
msgstr "接続の管理"

msgid "``mode``:"
msgstr "``mode``\\ :"

msgid "``sync``:"
msgstr "``sync``\\ :"

msgid "``transfer_mode``:"
msgstr "``transfer_mode``\\ :"

msgid "Translation status"
msgstr "翻訳ステータス"
