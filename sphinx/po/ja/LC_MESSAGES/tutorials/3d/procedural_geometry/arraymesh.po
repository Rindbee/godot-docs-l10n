#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the ArrayMesh"
msgstr "ArrayMeshの使用"

msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`."
msgstr ""
"このチュートリアルでは、 :ref:`ArrayMesh <class_arraymesh>` の使用の基本につ"
"いて説明します。"

msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to five "
"parameters. The first two are required, while the last three are optional."
msgstr ""
"そのためには、最大5つのパラメータを取る関数 :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` を使用します。最初の2つは必"
"須ですが、残りの3つはオプションです。"

msgid ""
"The first parameter is the ``PrimitiveType``, an OpenGL concept that "
"instructs the GPU how to arrange the primitive based on the vertices given, "
"i.e. whether they represent triangles, lines, points, etc. See :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` for the options available."
msgstr ""
"1つ目は ``PrimitiveType`` です。これは指定された頂点に基づいてプリミティブを"
"どのように配置するか、つまり頂点が三角形、線、点など、どれを表すかを GPU に指"
"示する OpenGL の概念です。使用可能なオプションについては :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` を参照してください。"

msgid ""
"The second parameter, ``arrays``, is the actual Array that stores the mesh "
"information. The array is a normal Godot array that is constructed with "
"empty brackets ``[]``. It stores a ``Packed**Array`` (e.g. "
"PackedVector3Array, PackedInt32Array, etc.) for each type of information "
"that will be used to build the surface."
msgstr ""
"2番目のパラメータ ``arrays`` はメッシュ情報を格納する実際の配列です。配列は空"
"の括弧 ``[]`` で構成された通常のGodot配列です。サーフェスの構築に使用される情"
"報の種類ごとに、 ``Packed**Array`` (例: PackedVector3Array、PackedInt32Array "
"など) を格納します。"

msgid ""
"Common elements of ``arrays`` are listed below, together with the position "
"they must have within ``arrays``. See :ref:`Mesh.ArrayType "
"<enum_Mesh_ArrayType>` for a full list."
msgstr ""
"``arrays`` の共通要素と、それが ``arrays`` 内で指定する位置を以下に示します。"
"完全なリストは :ref:`Mesh.ArrayType <enum_Mesh_ArrayType>` を参照してくださ"
"い。"

msgid "Index"
msgstr "インデックス"

msgid "Mesh.ArrayType Enum"
msgstr "Mesh.ArrayType"

msgid "Array type"
msgstr "配列タイプ"

msgid "0"
msgstr "\\ 0"

msgid "``ARRAY_VERTEX``"
msgstr "``ARRAY_VERTEX``"

msgid ""
":ref:`PackedVector3Array <class_PackedVector3Array>` or :ref:"
"`PackedVector2Array <class_PackedVector2Array>`"
msgstr ""
":ref:`PackedVector3Array <class_PackedVector3Array>` または :ref:"
"`PackedVector2Array <class_PackedVector2Array>`"

msgid "1"
msgstr "\\ 1"

msgid "``ARRAY_NORMAL``"
msgstr "``ARRAY_NORMAL``"

msgid ":ref:`PackedVector3Array <class_PackedVector3Array>`"
msgstr ":ref:`PackedVector3Array <class_PackedVector3Array>`"

msgid "2"
msgstr "2"

msgid "``ARRAY_TANGENT``"
msgstr "``ARRAY_TANGENT``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` or :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 floats. The "
"first 3 floats determine the tangent, and the last float the binormal "
"direction as -1 or 1."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` または :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` の4つのfloatのグループ。最初"
"の3つのfloatは接線を決定し、最後のfloatは従法線方向を -1 または 1 として指定"
"します。"

msgid "3"
msgstr "\\ 3"

msgid "``ARRAY_COLOR``"
msgstr "``ARRAY_COLOR``"

msgid ":ref:`PackedColorArray <class_PackedColorArray>`"
msgstr ":ref:`PackedColorArray <class_PackedColorArray>`"

msgid "4"
msgstr "4"

msgid "``ARRAY_TEX_UV``"
msgstr "``ARRAY_TEX_UV``"

msgid ""
":ref:`PackedVector2Array <class_PackedVector2Array>` or :ref:"
"`PackedVector3Array <class_PackedVector3Array>`"
msgstr ""
":ref:`PackedVector2Array <class_PackedVector2Array>` または :ref:"
"`PackedVector3Array <class_PackedVector3Array>`"

msgid "5"
msgstr "5"

msgid "``ARRAY_TEX_UV2``"
msgstr "``ARRAY_TEX_UV2``"

msgid "10"
msgstr "10"

msgid "``ARRAY_BONES``"
msgstr "``ARRAY_BONES``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` of groups of 4 floats "
"or :ref:`PackedInt32Array <class_PackedInt32Array>` of groups of 4 ints. "
"Each group lists indexes of 4 bones that affects a given vertex."
msgstr ""
"4つのfloatのグループの :ref:`PackedFloat32Array "
"<class_PackedFloat32Array>` 。または4つの int のグループの :ref:"
"`PackedInt32Array <class_PackedInt32Array>`。各グループには特定の頂点に影響を"
"与える4つのボーンのインデックスがリストされます。"

msgid "11"
msgstr "11"

msgid "``ARRAY_WEIGHTS``"
msgstr "``ARRAY_WEIGHTS``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` or :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 floats. Each "
"float lists the amount of weight the corresponding bone in ``ARRAY_BONES`` "
"has on a given vertex."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` または :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` の4つのfloatのグループ。各"
"floatには ``ARRAY_BONES`` 内の対応するボーンが特定の頂点に対して持つ重みの量"
"がリストされます。"

msgid "12"
msgstr "12"

msgid "``ARRAY_INDEX``"
msgstr "``ARRAY_INDEX``"

msgid ":ref:`PackedInt32Array <class_PackedInt32Array>`"
msgstr ":ref:`PackedInt32Array <class_PackedInt32Array>`"

msgid ""
"In most cases when creating a mesh, we define it by its vertex positions. So "
"usually, the array of vertices (at index 0) is required, while the index "
"array (at index 12) is optional and will only be used if included. It is "
"also possible to create a mesh with only the index array and no vertex "
"array, but that's beyond the scope of this tutorial."
msgstr ""
"ほとんどのケースでメッシュを作成するときは頂点の位置を使ってメッシュを定義し"
"ます。通常は頂点配列 (index=0) は必須ですが、インデックス配列 (index=12) はオ"
"プションであり、含まれている場合にのみ使用されます。インデックス配列のみで頂"
"点配列を使用せずにメッシュを作成することも可能ですが、それはこのチュートリア"
"ルでは解説しません。"

msgid ""
"All the other arrays carry information about the vertices. They are optional "
"and will only be used if included. Some of these arrays (e.g. "
"``ARRAY_COLOR``) use one entry per vertex to provide extra information about "
"vertices. They must have the same size as the vertex array. Other arrays (e."
"g. ``ARRAY_TANGENT``) use four entries to describe a single vertex. These "
"must be exactly four times larger than the vertex array."
msgstr ""
"その他の全ての配列は、頂点に関する情報を保持します。これらもオプションであ"
"り、含まれている場合にのみ使用されます。これらの配列の一部 (例: "
"``ARRAY_COLOR``) は、頂点ごとに1つのエントリを使用して、頂点に関する追加情報"
"を提供します。これらは頂点配列と同じサイズである必要があります。その他の配列 "
"(例: ``ARRAY_TANGENT``) は、1つの頂点を記述するために4つのエントリを使用しま"
"す。これらは、頂点配列のちょうど4倍の大きさである必要があります。"

msgid ""
"For normal usage, the last three parameters in :ref:"
"`add_surface_from_arrays() <class_arraymesh_method_add_surface_from_arrays>` "
"are typically left empty."
msgstr ""
"以上の配列を準備してメッシュを生成するには、関数 :ref:"
"`add_surface_from_arrays() <class_arraymesh_method_add_surface_from_arrays>` "
"を使用します。これは最大4つのパラメーターを指定します。始めの2つは必須です"
"が、残りの2つはオプションです。"

msgid "Setting up the ArrayMesh"
msgstr "ArrayMeshの設定"

msgid ""
"In the editor, create a :ref:`MeshInstance3D <class_meshinstance3d>` and add "
"an :ref:`ArrayMesh <class_arraymesh>` to it in the Inspector. Normally, "
"adding an ArrayMesh in the editor is not useful, but in this case it allows "
"us to access the ArrayMesh from code without creating one."
msgstr ""
"エディターで :ref:`MeshInstance3D <class_meshinstance3d>` を作成し、インスペ"
"クターでそれに :ref:`ArrayMesh <class_arraymesh>` を追加します。通常、エディ"
"ターで ArrayMesh を追加しても意味がありませんが、この場合は ArrayMesh を作成"
"しなくてもコードから ArrayMesh にアクセスできるようになります。"

msgid "Next, add a script to the MeshInstance3D."
msgstr "続いて、 MeshInstance3D にスクリプトを追加します。"

msgid "Under ``_ready()``, create a new Array."
msgstr "``_ready()`` 下に、新しい配列を作成します。"

msgid ""
"This will be the array that we keep our surface information in - it will "
"hold all the arrays of data that the surface needs. Godot will expect it to "
"be of size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""
"これは、サーフェス情報を保持する配列になります。サーフェスに必要なすべての"
"データ配列が保持されます。Godot は、サイズが ``Mesh.ARRAY_MAX`` であると想定"
"しているため、それに応じてサイズを変更します。"

msgid "Next create the arrays for each data type you will use."
msgstr "次に、使用する各データ型の配列を作成します。"

msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""
"データ配列にジオメトリを入力したら、各配列を ``surface_array`` に追加し、メッ"
"シュにコミットすることでメッシュを作成できます。"

msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""
"この例では、\\ ``Mesh.PRIMITIVE_TRIANGLES`` を使用しましたが、メッシュから利"
"用可能な任意のプリミティブタイプを使用できます。"

msgid "Put together, the full code looks like:"
msgstr "完全なコードをまとめると次のようになります:"

msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code for generating a sphere."
msgstr ""
"中間にあるコードは、あなたが望むものなら何でも構いません。以下に、例として球"
"を生成するコードを示します。"

msgid "Generating geometry"
msgstr "ジオメトリの生成"

msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""
"球体を生成するためのサンプルコードを次に示します。コードはGDScriptで表示され"
"ますが、コードを生成する方法についてGodot固有のものはありません。この実装は、"
"ArrayMeshとは特に関係がなく、球体を生成するための一般的なアプローチです。理解"
"に問題がある場合、または手続き型ジオメトリ全般について詳しく知りたい場合は、"
"オンラインで見つけたチュートリアルを使用できます。"

msgid "Saving"
msgstr "保存"

msgid ""
"Finally, we can use the :ref:`ResourceSaver <class_resourcesaver>` class to "
"save the ArrayMesh. This is useful when you want to generate a mesh and then "
"use it later without having to re-generate it."
msgstr ""
"最後に、ArrayMesh を保存するために :ref:`ResourceSaver "
"<class_resourcesaver>` クラスを使用できます。これは事前にメッシュを生成して保"
"存しておき、後で使用したい場合に便利です。"
