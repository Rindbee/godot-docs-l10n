#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Procedural geometry"
msgstr "手続き型ジオメトリ(幾何)"

msgid "What is geometry?"
msgstr "ジオメトリとは何ですか？"

msgid ""
"Geometry is a fancy way of saying shape. In computer graphics, geometry is "
"typically represented by an array of positions called \"vertices\". In "
"Godot, geometry is represented by Meshes."
msgstr ""
"ジオメトリは、形を洒落た言い方で表現したものです。コンピュータグラフィックス"
"では、ジオメトリは通常「頂点」と呼ばれる位置の配列で表されます。 Godotでは、"
"ジオメトリはメッシュで表されます。"

msgid "What is a Mesh?"
msgstr "メッシュとは何ですか?"

msgid ""
"Meshes and ArrayMeshes are resources that are drawn using a MeshInstance3D "
"node. Resources like Meshes and ArrayMeshes cannot be added to the scene "
"directly. A MeshInstance3D represents one instance of a mesh in your scene. "
"You can reuse a single mesh in multiple MeshInstance3Ds to draw it in "
"different parts of your scene with different materials or transformations "
"(scale, rotation, position etc.)."
msgstr ""
"MesheとArrayMeshは、MeshInstance3Dノードを使用して描画されるリソースです。 "
"MesheやArrayMeshなどのリソースをシーンに直接追加することはできません。 "
"MeshInstance3Dは、シーン内のメッシュの1つのインスタンスを表します。単一のメッ"
"シュを複数のMeshInstance3Dで再利用して、異なるマテリアルまたは変換(スケール、"
"回転、位置など)を使用してシーンの異なる部分に描画することができます。"

msgid ""
"If you are going to draw the same object many times, it can be helpful to "
"use a MultiMesh with a MultiMeshInstance3D. MultiMeshInstance3Ds draw meshes "
"thousands of times very cheaply by taking advantage of hardware instancing. "
"The drawback with using a MultiMeshInstance3D is that each of your mesh's "
"surfaces are limited to one material for all instances. It uses an instance "
"array to store different colors and transformations for each instance, but "
"all the instances of each surface use the same material."
msgstr ""
"同じオブジェクトを何度も描画する場合は、MultiMeshとMultiMeshInstance3Dを使用"
"すると便利です。 MultiMeshInstance3Dは非常に安価に何千回もメッシュを描画しま"
"す。そのためには、ハードウェアのインスタンス化を利用します。 "
"MultiMeshInstance3Dを使用する場合の欠点は、すべてのインスタンスで1つのマテリ"
"アルに制限されることです。インスタンス配列を使用して、インスタンスごとに異な"
"る色と変換を保存しますが、すべてのインスタンスは同じマテリアルを使用します。"

msgid "What a Mesh is"
msgstr "メッシュとは"

msgid ""
"A Mesh is composed of one or more surfaces. A surface is an array composed "
"of multiple sub-arrays containing vertices, normals, UVs, etc. Normally the "
"process of constructing surfaces and meshes is hidden from the user in the :"
"ref:`RenderingServer <class_RenderingServer>`, but with ArrayMeshes, the "
"user can construct a Mesh manually by passing in an array containing the "
"surface information."
msgstr ""
"メッシュは、1つ以上のサーフェスで構成されます。サーフェスは、頂点、法線、UVな"
"どを含む複数のサブ配列で構成される配列です。通常、サーフェスとメッシュを構築"
"するプロセスは、\\ :ref:`RenderingServer<class_RenderingServer>` でユーザーか"
"ら隠されていますが、ArrayMeshではユーザーは、サーフェス情報を含む配列を渡すこ"
"とにより、メッシュを手動で構築できます。"

msgid "Surfaces"
msgstr "サーフェス"

msgid ""
"Each surface has its own material. Alternatively, you can override the "
"material for all surfaces in the Mesh when you use a MeshInstance3D using "
"the :ref:`material_override "
"<class_GeometryInstance3D_property_material_override>` property."
msgstr ""
"各サーフェスには独自のマテリアルがあります。または、\\ ``GeometryInstance3D."
"override_material`` を使用してMeshInstance3Dを使用するときに、メッシュ内のす"
"べてのサーフェスのマテリアルをオーバーライドできます。"

msgid "Surface array"
msgstr "サーフェス配列"

msgid ""
"The surface array is an array of length ``ArrayMesh.ARRAY_MAX``. Each "
"position in the array is filled with a sub-array containing per-vertex "
"information. For example, the array located at ``ArrayMesh.ARRAY_NORMAL`` is "
"a :ref:`PackedVector3Array <class_PackedVector3Array>` of vertex normals. "
"See :ref:`Mesh.ArrayType <enum_Mesh_ArrayType>` for more information."
msgstr ""
"サーフェス配列は、長さ ``ArrayMesh.ARRAY_MAX`` の配列です。配列の各位置は、頂"
"点ごとの情報を含むサブ配列で埋められます。たとえば、\\ ``ArrayMesh."
"ARRAY_NORMAL`` にある配列は、頂点法線の :ref:"
"`PackedVector3Array<class_PackedVector3Array>` です。"

msgid "Tools"
msgstr "ツール"

msgid ""
"Godot provides different ways of accessing and working with geometry. More "
"information on each will be provided in the following tutorials."
msgstr ""
"Godotは、ジオメトリにアクセスして操作するさまざまな方法を提供します。それぞれ"
"の詳細については、次のチュートリアルで説明します。"

msgid "ArrayMesh"
msgstr "\\ ArrayMesh"

msgid ""
"For more information about the ArrayMesh, please see the :ref:`ArrayMesh "
"tutorial <doc_arraymesh>`."
msgstr ""
"ArrayMeshの詳細については、\\ :ref:`ArrayMesh tutoria <doc_arraymesh>` を参照"
"してください。"

msgid "MeshDataTool"
msgstr "\\ MeshDataTool"

msgid ""
"The MeshDataTool is a resource that converts Mesh data into arrays of "
"vertices, faces, and edges that can be modified at runtime."
msgstr ""
"MeshDataToolは、メッシュデータを、実行時に変更できる頂点、面、およびエッジの"
"配列に変換するリソースです。"

msgid ""
"For more information about the MeshDataTool, please see the :ref:"
"`MeshDataTool tutorial <doc_meshdatatool>`."
msgstr ""
"MeshDataToolの詳細については、\\ :ref:`MeshDataTool tutorial "
"<doc_meshdatatool>` を参照してください。"

msgid "SurfaceTool"
msgstr "\\ SurfaceTool"

msgid ""
"The SurfaceTool allows the creation of Meshes using an OpenGL 1.x immediate "
"mode style interface."
msgstr ""
"SurfaceToolでは、OpenGL 1.xイミディエイトモードスタイルのインターフェイスを使"
"用してメッシュを作成できます。"

msgid ""
"For more information about the SurfaceTool, please see the :ref:`SurfaceTool "
"tutorial <doc_surfacetool>`."
msgstr ""
"SurfaceToolの詳細については、\\ :ref:`SurfaceTool tutorial "
"<doc_surfacetool>` を参照してください。"

msgid "Which one should I use?"
msgstr "どちらを使うべきですか？"

msgid ""
"Both SurfaceTool and ArrayMesh are excellent for generating static geometry "
"(meshes) that don't change over time."
msgstr ""
"SurfaceToolとArrayMeshはどちらも、時間とともに変化しない静的なジオメトリ(メッ"
"シュ)の生成に最適です。"

msgid "Translation status"
msgstr "翻訳ステータス"
