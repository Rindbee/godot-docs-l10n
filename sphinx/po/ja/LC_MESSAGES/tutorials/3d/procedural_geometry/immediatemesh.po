#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using ImmediateMesh"
msgstr "ImmediateMeshの使用"

msgid ""
"The :ref:`ImmediateMesh <class_ImmediateMesh>` is a convenient tool to "
"create dynamic geometry using an OpenGL 1.x-style API. Which makes it both "
"approachable to use and efficient for meshes which need to be updated every "
"frame."
msgstr ""
":ref:`ImmediateMesh <class_ImmediateMesh>` は、OpenGL 1.x スタイルの API を使"
"用して動的なジオメトリを作成するための便利なツールです。これはフレームごとに"
"更新する必要があるメッシュに対して使いやすく効率的です。"

msgid ""
"Generating complex geometry (several thousand vertices) with this tool is "
"inefficient, even if it's done only once. Instead, it is designed to "
"generate simple geometry that changes every frame."
msgstr ""
"このノードを使用して複雑なジオメトリ(数千個の頂点)を生成することは、たとえ1回"
"だけ実行される場合でも非効率的です。これはフレームごとに変化する単純なジオメ"
"トリを生成するように設計されています。"

msgid ""
"First, you need to create a :ref:`MeshInstance3D <class_meshinstance3d>` and "
"add an :ref:`ImmediateMesh <class_ImmediateMesh>` to it in the Inspector."
msgstr ""
"まず :ref:`MeshInstance3D <class_meshinstance3d>` を作成し、インスペクターで"
"それに :ref:`ImmediateMesh <class_ImmediateMesh>` を追加する必要があります。"

msgid ""
"Next, add a script to the MeshInstance3D. The code for the ImmediateMesh "
"should go in the ``_process()`` function if you want it to update each "
"frame, or in the ``_ready()`` function if you want to create the mesh once "
"and not update it. If you only generate a surface once, the ImmediateMesh is "
"just as efficient as any other kind of mesh as the generated mesh is cached "
"and reused."
msgstr ""
"次に MeshInstance3D にスクリプトを追加します。ImmediateMesh のコードは、各フ"
"レームを更新する場合は ``_process()`` 関数に、メッシュを1回だけ作成して更新し"
"ない場合は ``_ready()`` 関数に記述する必要があります。サーフェスを1回だけ生成"
"する場合、ImmediateMesh は、生成されたメッシュがキャッシュされて再利用される"
"ため、他の種類のメッシュと同じくらい効率的です。"

msgid ""
"To begin generating geometry you must call ``surface_begin()``. "
"``surface_begin()`` takes a ``PrimitiveType`` as an argument. "
"``PrimitiveType`` instructs the GPU how to arrange the primitive based on "
"the vertices given whether it is triangles, lines, points, etc. A complete "
"list can be found under the :ref:`Mesh <class_mesh>` class reference page."
msgstr ""
"ジオメトリの生成を開始するには、 ``surface_begin()`` を呼び出す必要がありま"
"す。 ``surface_begin()`` は ``PrimitiveType`` を引数として 取ります。 "
"``PrimitiveType`` は、三角形、線、点など、指定された頂点に基づいてプリミティ"
"ブを配置する方法を GPU に指示します。完全なリストは、:ref:`Mesh "
"<class_mesh>` クラスのリファレンス ページにあります。"

msgid ""
"Once you have called ``surface_begin()`` you are ready to start adding "
"vertices. You add vertices one at a time. First you add vertex specific "
"attributes such as normals or UVs using ``surface_set_****()`` (e.g. "
"``surface_set_normal()``). Then you call ``surface_add_vertex()`` to add a "
"vertex with those attributes. For example:"
msgstr ""
"``surface_begin()`` を呼び出したら、頂点の追加を開始する準備が整います。頂点"
"は一度に1つずつ追加します。最初に ``surface_set_****()`` (例 "
"``surface_set_normal()``) を使用して、法線や UV などの頂点固有の属性を追加し"
"ます。次に ``surface_add_vertex()`` を呼び出して、それらの属性を持つ頂点を追"
"加します。例えば:"

msgid ""
"Only attributes added before the call to ``surface_add_vertex()`` will be "
"included in that vertex. If you add an attribute twice before calling "
"``surface_add_vertex()``, only the second call will be used."
msgstr ""
"``surface_add_vertex()`` の呼び出し前に追加された属性のみがその頂点に含まれま"
"す。 ``surface_add_vertex()`` を呼び出す前に属性を2回追加した場合、2回目の呼"
"び出しのみが使用されます。"

msgid ""
"Finally, once you have added all your vertices call ``surface_end()`` to "
"signal that you have finished generating the surface. You can call "
"``surface_begin()`` and ``surface_end()`` multiple times to generate "
"multiple surfaces for the mesh."
msgstr ""
"最後にすべての頂点を追加したら、サーフェスの生成が完了したことを通知するため"
"に ``surface_end()`` を呼び出します。メッシュの複数のサーフェスを生成するに"
"は、 ``surface_begin()`` と ``surface_end()`` を複数回呼び出します。"

msgid ""
"The example code below draws a single triangle in the ``_ready()`` function."
msgstr "以下のサンプルコードは、 ``_ready()`` 関数で単一の三角形を描画します。"

msgid ""
"The ImmediateMesh can also be used across frames. Each time you call "
"``surface_begin()`` and ``surface_end()``, you are adding a new surface to "
"the ImmediateMesh. If you want to recreate the mesh from scratch each frame, "
"call ``clear_surfaces()`` before calling ``surface_begin()``."
msgstr ""
"ImmediateMesh はフレーム間でも使用できます。 ``surface_begin()`` と "
"``surface_end()`` を呼び出すたびに、ImmediateMesh に新しいサーフェスが追加さ"
"れます。フレームごとにメッシュを最初から再作成する場合は、 "
"``surface_begin()`` を呼び出す前に ``clear_surfaces()`` を呼び出します。"

msgid ""
"The above code will dynamically create and draw a single surface each frame."
msgstr ""
"上記のコードは、フレームごとに1つのサーフェスを動的に作成して描画します。"
