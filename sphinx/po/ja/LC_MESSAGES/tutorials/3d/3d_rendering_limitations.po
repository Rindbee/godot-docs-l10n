#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "3D rendering limitations"
msgstr "3Dレンダリングの制限"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Due to their focus on performance, real-time rendering engines have many "
"limitations. Godot's renderer is no exception. To work effectively with "
"those limitations, you need to understand them."
msgstr ""
"リアルタイムレンダリングエンジンはパフォーマンスに重点を置いているため、多く"
"の制限があります。Godot のレンダラーも例外ではありません。効果的にレンダリン"
"グさせるには、様々な制限を理解する必要があります。"

msgid "Texture size limits"
msgstr "テクスチャサイズの制限"

msgid ""
"On desktops and laptops, textures larger than 8192×8192 may not be supported "
"on older devices. You can check your target GPU's limitations on `GPUinfo."
"org <https://www.gpuinfo.org/>`__."
msgstr ""
"デスクトップやラップトップでは、8192×8192 より大きいテクスチャは古いデバイス"
"ではサポートされない可能性があります。ターゲット GPU の制限については、"
"`GPUinfo.org <https://www.gpuinfo.org/>`__ で確認できます。"

msgid ""
"Mobile GPUs are typically limited to 4096×4096 textures. Also, some mobile "
"GPUs don't support repeating non-power-of-two-sized textures. Therefore, if "
"you want your texture to display correctly on all platforms, you should "
"avoid using textures larger than 4096×4096 and use a power of two size if "
"the texture needs to repeat."
msgstr ""
"モバイルGPUは通常、テクスチャは 4096×4096 までに制限されています。また一部の"
"モバイル GPU は、2の累乗サイズ以外のテクスチャのリピートをサポートしていませ"
"ん。したがってテクスチャをすべてのプラットフォームで正しく表示したい場合は、"
"4096×4096 より大きいテクスチャの使用を避け、テクスチャをリピートする必要があ"
"る場合は2の累乗サイズを使用する必要があります。"

msgid ""
"To limit the size of a specific texture that may be too large to render, you "
"can set the **Process > Size Limit** import option to a value greater than "
"``0``. This will reduce the texture's dimensions on import (preserving "
"aspect ratio) without affecting the source file."
msgstr ""
"レンダリングするには大きすぎる可能性がある特定のテクスチャのサイズを制限する"
"には、インポートオプションの **インポートプロセス > サイズ制限** を ``0`` よ"
"り大きい値に設定します。これによりソース ファイルに影響を与えることなく、イン"
"ポート時にテクスチャのサイズが縮小されます (アスペクト比は維持されます)。"

msgid "Color banding"
msgstr "色の縞模様 (バンディング)"

msgid ""
"When using the Forward+ or Forward Mobile rendering methods, Godot's 3D "
"engine renders internally in HDR. However, the rendering output will be "
"tonemapped to a low dynamic range so it can be displayed on the screen. This "
"can result in visible banding, especially when using untextured materials. "
"For performance reasons, color precision is also lower when using the "
"Forward Mobile rendering method compared to Forward+."
msgstr ""
"Forward+ または Forward Mobile レンダリング方法を使用する場合、Godot の 3Dエ"
"ンジンは内部的に HDR でレンダリングします。ただしレンダリング結果は画面に表示"
"できるようにLDR (低いダイナミックレンジ)にトーンマップされます。これにより特"
"にテクスチャのないマテリアルを使用する場合に、目に見える縞模様(バンディング)"
"が発生する可能性があります。パフォーマンス上の理由から Forward Mobile レンダ"
"リングを使用する場合、色の精度も Forward+ に比べて低くなります。"

msgid ""
"When using the Compatibility rendering method, HDR is not used and the color "
"precision is the lowest of all rendering methods. This also applies to 2D "
"rendering, where banding may be visible when using smooth gradient textures."
msgstr ""
"互換性レンダリングを使用する場合、HDR は使用されず、色の精度はすべてのレンダ"
"リング方法の中で最も低くなります。これは2Dレンダリングにも当てはまり、滑らか"
"なグラデーションテクスチャを使用するとバンドが見える場合があります。"

msgid "There are two main ways to alleviate banding:"
msgstr "バンディングを軽減するには、主に2つの方法があります。"

msgid ""
"Alternatively, bake some noise into your textures. This is mainly effective "
"in 2D, e.g. for vignetting effects. In 3D, you can also use a `custom "
"debanding shader <https://github.com/fractilegames/godot-gles2-debanding-"
"material>`__ to be applied on your *materials*. This technique works even if "
"your project is rendered with low color precision, which means it will work "
"when using the Mobile and Compatibility rendering methods."
msgstr ""
"あるいはテクスチャにノイズを焼き付けます。これは主に2Dで効果的で、たとえばビ"
"ネット効果を使うときに有効です。3Dでは `カスタムデバンドシェーダー <https://"
"github.com/fractilegames/godot-gles2-debanding-material>`__ を使用して *マテ"
"リアル* に適用することもできます。このテクニックはプロジェクトが低い色精度で"
"レンダリングされている場合でも機能します。つまりモバイルおよび互換性レンダリ"
"ングを使用する場合も機能します。"

msgid "Color banding comparison (contrast increased for more visibility)"
msgstr ""
"色のバンディングの比較（視認性を高めるためにコントラストを強めています）"

msgid ""
"See `Banding in Games: A Noisy Rant (PDF) <https://loopit.dk/"
"banding_in_games.pdf>`__ for more details about banding and ways to combat "
"it."
msgstr ""
"バンディングとその対処方法の詳細については `Banding in Games: A Noisy Rant "
"(PDF) <https://loopit.dk/banding_in_games.pdf>`__ を参照してください。"

msgid "Depth buffer precision"
msgstr "深度バッファの精度"

msgid ""
"To sort objects in 3D space, rendering engines rely on a *depth buffer* "
"(also called *Z-buffer*). This buffer has a finite precision: 24-bit on "
"desktop platforms, sometimes 16-bit on mobile platforms (for performance "
"reasons). If two different objects end up on the same buffer value, then Z-"
"fighting will occur. This will materialize as textures flickering back and "
"forth as the camera moves or rotates."
msgstr ""
"3D空間でオブジェクトをソートするために、レンダリングエンジンは *深度バッファ"
"* (Zバッファとも呼ばれます) に依存します。パフォーマンス上の理由からこのバッ"
"ファの精度は有限で、デスクトッププラットフォームでは24ビット、モバイル プラッ"
"トフォームでは16ビットになることもあります。2つの異なるオブジェクトが同じバッ"
"ファ値になると、Zファイティングが発生します。これはカメラが移動または回転する"
"とテクスチャが前後にちらつくことで現れます。"

msgid ""
"To make the depth buffer more precise over the rendered area, you should "
"*increase* the Camera node's **Near** property. However, be careful: if you "
"set it too high, players will be able to see through nearby geometry. You "
"should also *decrease* the Camera node's **Far** property to the lowest "
"permissible value for your use case, though keep in mind it won't impact "
"precision as much as the **Near** property."
msgstr ""
"レンダリングされた領域で深度バッファをより正確にするには、Cameraノードの "
"**Near** プロパティを *増やす* 方法があります。ただし注意が必要で、Near値が高"
"すぎるとプレイヤーは近くのジオメトリが透明になってしまいます。またCameraノー"
"ドの **Far** プロパティを、使用ケースで許容される最小値まで *減らす* 方法もあ"
"りますが、**Near** プロパティほど精度に影響しないことに注意してください。"

msgid ""
"If you only need high precision when the player can see far away, you could "
"change it dynamically based on the game conditions. For instance, if the "
"player enters an airplane, the **Near** property can be temporarily "
"increased to avoid Z-fighting in the distance. It can then be decreased once "
"the player leaves the airplane."
msgstr ""
"プレイヤーが遠くを見るときにのみ高精度にする場合は、ゲームの状況に応じて動的"
"に変更することもできます。たとえばプレイヤーが飛行機に乗ったとき、遠くのZファ"
"イティングを回避するために、**Near** プロパティを一時的に増加させます。そして"
"プレイヤーが飛行機を離れたら、**Near** プロパティを減らします。"

msgid ""
"Depending on the scene and viewing conditions, you may also be able to move "
"the Z-fighting objects further apart without the difference being visible to "
"the player."
msgstr ""
"シーンや表示条件によっては、プレイヤーに違いが見えない状態で、Zファイティング"
"が発生するオブジェクトをさらに離すこともできます。"

msgid ""
"Z-fighting comparison (before and after tweaking the scene by offsetting the "
"Label3D away from the floor)"
msgstr ""
"Z ファイティングの比較 (Label3D を床からオフセットしてシーンを微調整する前と"
"後)"

msgid "Transparency sorting"
msgstr "半透明のソート"

msgid ""
"In Godot, transparent materials are drawn after opaque materials. "
"Transparent objects are sorted back to front before being drawn based on the "
"Node3D's position, not the vertex position in world space. Due to this, "
"overlapping objects may often be sorted out of order. To fix improperly "
"sorted objects, tweak the material's :ref:`Render Priority "
"<class_Material_property_render_priority>` property or the node's :ref:"
"`Sorting Offset <class_VisualInstance3D_property_sorting_offset>`. Render "
"Priority will force specific materials to appear in front of or behind other "
"transparent materials, while Sorting Offset will move the object forward or "
"backward for the purpose of sorting. Even then, these may not always be "
"sufficient."
msgstr ""
"Godot では半透明マテリアルは不透明マテリアルの後に描画されます。半透明オブ"
"ジェクトはワールド空間の頂点位置ではなく、Node3D の位置に基づいて描画される前"
"に後ろから前にソートされます。このため重なり合ったオブジェクトは順序どおりに"
"ソートされないことがよくあります。不適切にソートされたオブジェクトを修正する"
"には、マテリアルの :ref:`レンダリング優先順位 "
"<class_Material_property_render_priority>` プロパティまたはノードの :ref:`"
"ソートオフセット <class_VisualInstance3D_property_sorting_offset>` を微調整し"
"ます。レンダリング優先順位は特定のマテリアルを他の半透明マテリアルの前または"
"後ろに表示するように強制し、ソートオフセットはソートのためにオブジェクトを前"
"後に移動します。しかしこれらを行っても、必ずしも十分ではない場合があります。"

msgid ""
"Some rendering engines feature *order-independent transparency* techniques "
"to alleviate this, but this is costly on the GPU. Godot currently doesn't "
"provide this feature. There are still several ways to avoid this problem:"
msgstr ""
"一部のレンダリングエンジンでは、この問題を軽減するために *順序に依存しない半"
"透明* 技術を採用していますが、これは GPU に負担がかかります。Godot は現在この"
"機能を提供していません。この問題を回避する方法はいくつかあります。"

msgid ""
"Only make materials transparent if you actually need it. If a material only "
"has a small transparent part, consider splitting it into a separate "
"material. This will allow the opaque part to cast shadows and will also "
"improve performance."
msgstr ""
"実際に必要なものだけマテリアルを半透明にしてください。マテリアルに小さな半透"
"明部分しかない場合は、別のマテリアルに分割することを検討してください。これに"
"より不透明部分は影を落とすことができ、パフォーマンスも向上します。"

msgid ""
"If your texture mostly has fully opaque and fully transparent areas, you can "
"use alpha testing instead of alpha blending. This transparency mode is "
"faster to render and doesn't suffer from transparency issues. Enable "
"**Transparency > Transparency** to **Alpha Scissor** in StandardMaterial3D, "
"and adjust **Transparency > Alpha Scissor Threshold** accordingly if needed. "
"Note that MSAA will not antialias the texture's edges unless alpha "
"antialiasing is enabled in the material's properties. However, FXAA, TAA and "
"supersampling will be able to antialias the texture's edges regardless of "
"whether alpha antialiasing is enabled on the material."
msgstr ""
"テクスチャのほとんどが完全に不透明で完全に半透明な領域である場合は、アルファ"
"ブレンディングの代わりにアルファテストを使用できます。この透過モードはレンダ"
"リングが高速で、半透明の問題が発生しません。StandardMaterial3D で "
"**Transparency > Transparency** から **Alpha Scissor** を有効にし、必要に応じ"
"て **Transparency > Alpha Scissor Threshold** を調整します。マテリアルのプロ"
"パティでアルファアンチエイリアシングが有効になっていない限り、MSAA はテクス"
"チャのエッジをアンチエイリアシングしないことに注意してください。ただし、"
"FXAA、TAA、およびスーパーサンプリングは、マテリアルでアルファアンチエイリアシ"
"ングが有効になっているかどうかに関係なく、テクスチャのエッジをアンチエイリア"
"シングできます。"

msgid ""
"If you need to render semi-transparent areas of the texture, alpha scissor "
"isn't suitable. Instead, setting the StandardMaterial3D's **Transparency > "
"Transparency** property to **Depth Pre-Pass** can sometimes work (at a "
"performance cost). You can also try the **Alpha Hash** mode."
msgstr ""
"テクスチャの半透明領域をレンダリングする必要がある場合、アルファシザーは適し"
"ていません。代わりに StandardMaterial3D の **Transparency > Transparency** プ"
"ロパティを **Depth Pre-Pass** に設定すると、機能する場合があります (いくらか"
"パフォーマンス コストがかかります)。**Alpha Hash** モードを試すこともできま"
"す。"

msgid ""
"If you want a material to fade with distance, use the StandardMaterial3D "
"distance fade mode **Pixel Dither** or **Object Dither** instead of **Pixel "
"Alpha**. This will make the material opaque, which also speeds up rendering."
msgstr ""
"距離に応じてマテリアルをフェードさせたい場合は、**Pixel Alpha** ではなく、"
"StandardMaterial3D 距離フェード モードの **Pixel Dither** または **Object "
"Dither** を使用します。これによりマテリアルが不透明になり、レンダリングも高速"
"化されます。"

msgid ""
"Transparency sorting comparison (alpha-blended materials on the left, alpha "
"scissor materials on the right)"
msgstr "半透明のタイプの比較（左がアルファブレンド、右がアルファシザー）"

msgid "Multi-sample antialiasing"
msgstr "MSAA"

msgid ""
"Antialiasing is explained in detail on the :ref:`doc_3d_antialiasing` page."
msgstr ""
"アンチエイリアシングについては、 :ref:`doc_3d_antialiasing` ページで詳しく説"
"明されています。"

msgid ""
"Multi-sample antialiasing (MSAA) takes multiple *coverage* samples at the "
"edges of polygons when rendering objects. It does not increase the number of "
"*color* samples used to render a scene. Here's what this means in practice:"
msgstr ""
"MSAA (マルチサンプルアンチエイリアシング)は、オブジェクトをレンダリングすると"
"きにポリゴンのエッジで複数の *カバレッジ* サンプルを取得します。シーンのレン"
"ダリングに使用される *カラー* サンプルの数は増加しません。これは実際には次の"
"ことを意味します。"

msgid ""
"Edges of meshes will be smoothed out nicely (as well as supersampling would)."
msgstr ""
"メッシュのエッジは（スーパーサンプリングと同様に）きれいに滑らかになります。"

msgid ""
"Transparent materials that use *alpha testing* (1-bit transparency) won't be "
"smoothed out."
msgstr ""
"*アルファテスト* (1ビットの透明度) を使用するマテリアルは滑らかになりません。"

msgid ""
"Specular aliasing (\"sparkles\" that appear on reflective surfaces) won't be "
"reduced."
msgstr "鏡面反射エイリアシング (反射面に現れる「輝き」) は軽減されません。"

msgid ""
"There are several ways to work around this limitation depending on your "
"performance budget:"
msgstr ""
"パフォーマンスの制約に応じて、この制限を回避する方法はいくつかあります:"

msgid ""
"To make specular aliasing less noticeable, open the Project Settings and "
"enable **Rendering > Quality > Screen Space Filters > Screen Space Roughness "
"Limiter**. This filter has a moderate cost on performance, so it should only "
"be enabled if you actually need it."
msgstr ""
"鏡面反射エイリアシングを目立たなくするには、プロジェクト設定を開き、**レンダ"
"リング > アンチエイリアス > Screen Space Roughness Limiter** を有効にします。"
"このフィルターはパフォーマンスに中程度の負荷がかかるため、実際に必要な場合に"
"のみ有効にしてください。"

msgid ""
"Enable fast approximate antialiasing (FXAA) in addition to (or instead of) "
"MSAA. Since FXAA is a screen-space antialiasing method, it will smooth out "
"anything. As a downside, FXAA also makes the scene appear blurrier, "
"especially at resolutions below 1440p. FXAA also lacks temporal information, "
"which means its impact on specular aliasing is limited."
msgstr ""
"MSAA に加えて (または MSAA の代わりに) 高速近似アンチエイリアシング (FXAA) を"
"有効にします。FXAA はスクリーンスペース方式であるため、あらゆるものを滑らかに"
"します。欠点として FXAA では、特に 1440p 未満の解像度では、シーンがぼやけて見"
"えることがあります。FXAA には時間情報もないため、鏡面反射エイリアシングへの影"
"響は限られています。"

msgid ""
"Enable temporal antialiasing (TAA) in addition to (or instead of) MSAA. "
"Since TAA is a screen-space antialiasing method, it will smooth out "
"anything. As a downside, TAA also makes the scene appear blurrier, "
"especially at resolutions below 1440p. TAA provides superior quality "
"compared to FXAA and can effectively combat specular aliasing. However, TAA "
"has a greater performance cost compared to FXAA, and TAA can introduce "
"ghosting artifacts with fast movement."
msgstr ""
"MSAA に加えて (または MSAA の代わりに) テンポラルアンチエイリアシング (TAA) "
"を有効にします。TAA はスクリーンスペース方式であるため、あらゆるものを滑らか"
"にします。欠点としては TAA を使用すると、特に 1440p 未満の解像度では、シーン"
"がぼやけて見えることがあります。TAA は FXAA に比べて優れた品質を提供し、鏡面"
"反射エイリアシングを効果的に抑制できます。ただし TAA は FXAA に比べてパフォー"
"マンス コストが高く、動きが速い場合にゴーストアーティファクトが発生する可能性"
"があります。"

msgid ""
"Render the scene at a higher resolution by increasing the **Scaling 3D > "
"Scale** project setting above ``1.0``. This technique is called supersample "
"antialiasing (SSAA) and is very slow. Its use is generally only recommended "
"for offline rendering."
msgstr ""
"プロジェクト設定の **3Dスケール > スケール** を ``1.0`` より大きくして、シー"
"ンをより高い解像度でレンダリングします。この手法はスーパーサンプルアンチエイ"
"リアシング (SSAA) と呼ばれ、品質は最高ですが非常に低速です。一般的にオフライ"
"ンレンダリングでのみ使用することをお勧めします。"
