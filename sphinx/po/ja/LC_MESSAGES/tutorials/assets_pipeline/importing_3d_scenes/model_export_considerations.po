#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Model export considerations"
msgstr "モデルのエクスポートに関する考慮事項"

msgid ""
"Before exporting a 3D model from a 3D modeling application, such as Blender, "
"there are some considerations that should be taken into account to ensure "
"that the model follows the conventions and best practices for Godot."
msgstr ""
"Blender などの3Dモデリングアプリケーションから3Dモデルをエクスポートする前"
"に、モデルが Godot の規則とベスト プラクティスに従っていることを確認するため"
"に考慮すべき事項がいくつかあります。"

msgid "3D asset direction conventions"
msgstr "3Dアセットの方向規則"

msgid ""
"Godot uses a right-handed, Y-is-up coordinate system, with the -Z axis as "
"the camera's forward direction. This is the same as OpenGL. This implies "
"that +Z is back, +X is right, and -X is left for a camera."
msgstr ""
"Godot は右手系の Y up 座標系を使用し、-Z がカメラの前方方向になります。これ"
"は OpenGL と同じです。つまりカメラの場合、+Z は後ろ、+X は右、-X は左になりま"
"す。"

msgid ""
"The convention for 3D assets is to face the opposite direction as the "
"camera, so that characters and other assets are facing the camera by "
"default. This convention is extremely common in 3D modeling applications, "
"and is `codified in glTF as part of the glTF 2.0 specification <https://"
"registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#coordinate-system-and-"
"units>`__. This means that for oriented 3D assets (such as characters), the "
"+Z axis is the direction of the front, so -Z is the rear, +X is the left "
"side, and -X is the right side for a 3D asset. In Blender, this means that "
"+Y is rear and -Y is front for an asset."
msgstr ""
"3Dアセットの慣例では、カメラと反対方向を向くため、キャラクターやその他のア"
"セットはデフォルトでカメラの方を向いています。この慣例は3Dモデリングアプリ"
"ケーションでは非常に一般的で `glTF 2.0 仕様 <https://registry.khronos.org/"
"glTF/specs/2.0/glTF-2.0.html#coordinate-system-and-units>` の一部として glTF "
"にコード化されています`__。つまり方向が定められた3Dアセット (キャラクターな"
"ど) の場合、+Z が前面の方向となり、3D アセットの場合、-Z が背面、+X が左側、-"
"X が右側になります。Blender では、アセットの場合、+Y が背面、-Y が前面になり"
"ます。"

msgid ""
"When rotating an oriented 3D asset in Godot, use the ``use_model_front`` "
"option on the ``look_at`` functions, and use the ``Vector3.MODEL_*`` "
"constants to perform calculations in the oriented asset's local space."
msgstr ""
"Godot で方向指定された3Dアセットを回転する場合は、 ``look_at`` 関数の "
"``use_model_front`` オプションを使用し、 ``Vector3.MODEL_*`` 定数を使用して方"
"向指定されたアセットのローカル空間で計算を実行します。"

msgid ""
"For assets without an intrinsic front side or forward direction, such as a "
"game map or terrain, take note of the cardinal directions instead. The "
"convention in Godot and the vast majority of other applications is that +X "
"is east and -X is west. Due to Godot's right-handed Y-is-up coordinate "
"system, this implies that +Z is south and -Z is north. In Blender, this "
"means that +Y is north and -Y is south."
msgstr ""
"ゲームマップや地形など、前面または前方方向が本質的にないアセットの場合は、代"
"わりに基本方向をメモします。Godot および他のほとんどのアプリケーションで"
"は、+X が東、-X が西という規則があります。Godot は右手 Y up 座標系のため、+Z "
"が南、-Z が北であることを意味します。Blender では +Y が北、-Y が南であること"
"を意味します。"

msgid "Exporting textures separately"
msgstr "テクスチャを個別にエクスポートする"

msgid ""
"While textures can be exported with a model in certain file formats, such as "
"glTF 2.0, you can also export them separately. Godot uses PBR (physically "
"based rendering) for its materials, so if a texturing program can export PBR "
"textures, they can work in Godot. This includes the `Substance suite "
"<https://www.adobe.com/creativecloud/3d-ar.html>`__, `ArmorPaint (open "
"source) <https://armorpaint.org/>`__, and `Material Maker (open source) "
"<https://github.com/RodZill4/material-maker>`__."
msgstr ""
"テクスチャは glTF 2.0 などの特定のファイル形式でモデルと一緒にエクスポートで"
"きますが、別々にエクスポートすることもできます。Godot はマテリアルに PBR (物"
"理ベースレンダリング) を使用するため、テクスチャリングプログラムがPBRテクス"
"チャをエクスポートできる場合は、Godot でも使用できます。これには `Substance "
"suite <https://www.adobe.com/creativecloud/3d-ar.html>`__ 、`ArmorPaint (オー"
"プンソース) <https://armorpaint.org/>`__ 、および `Material Maker (オープン"
"ソース) <https://github.com/RodZill4/material-maker>`__ が含まれます。"

msgid ""
"For more information on Godot's materials, see :ref:"
"`doc_standard_material_3d`."
msgstr ""
"Godot のマテリアルの詳細については、:ref:`doc_standard_material_3d` を参照し"
"てください。"

msgid "Exporting considerations"
msgstr "エクスポートに関する考慮事項"

msgid ""
"Since GPUs can only render triangles, meshes that contain quads or N-gons "
"have to be *triangulated* before they can be rendered. Godot can triangulate "
"meshes on import, but results may be unpredictable or incorrect, especially "
"with N-gons. Regardless of the target application, triangulating *before* "
"exporting the scene will lead to more consistent results and should be done "
"whenever possible."
msgstr ""
"GPU は三角形しかレンダリングできないため、四角形または多角形を含むメッシュは"
"レンダリングする前に *三角形化* する必要があります。Godot はインポート時に"
"メッシュを三角形化できますが、特に多角形の場合、結果は予測できないか不正確に"
"なる可能性があります。ターゲットアプリケーションに関係なく、シーンをエクス"
"ポートする *前に* 三角形化を行うと、より一貫した結果が得られるため、可能な限"
"り三角形化を行う必要があります。"

msgid ""
"To avoid issues with incorrect triangulation after importing in Godot, it is "
"recommended to make the 3D modeling software triangulate objects on its own. "
"In Blender, this can be done by adding a Triangulate modifier to your "
"objects and making sure **Apply Modifiers** is checked in the export dialog. "
"Alternatively, depending on the exporter, you may be able to find and enable "
"a **Triangulate Faces** option in the export dialog."
msgstr ""
"Godot にインポートした後、誤った三角形化の問題を回避するには、3Dモデリングソ"
"フトウェアでオブジェクトを独自に三角形化するようにすることをお勧めします。"
"Blender ではオブジェクトに三角形化モディファイアを追加し、エクスポート ダイア"
"ログで **モディファイアを適用** がオンになっていることを確認することでこれを"
"実行できます。または、エクスポーターによっては、エクスポート ダイアログで **"
"面を三角形化** オプションを見つけて有効にできる場合があります。"

msgid ""
"To avoid issues with 3D selection in the editor, it is recommended to apply "
"the object transform in the 3D modeling software before exporting the scene."
msgstr ""
"エディターでの3D選択に関する問題を回避するには、シーンをエクスポートする前に "
"3Dモデリングソフトウェアでオブジェクト変換を適用することをお勧めします。"

msgid ""
"It is important that the mesh is not deformed by bones when exporting. Make "
"sure that the skeleton is reset to its T-pose or default rest pose before "
"exporting with your favorite 3D editor."
msgstr ""
"これは重要なことですが、エクスポートする際にボーンがメッシュを変形させないよ"
"うにしてください。お使いの3Dエディタからエクスポートする前にまず、スケルトン"
"がTポーズなどデフォルトのポーズになっていること確認しましょう。"

msgid "Lighting considerations"
msgstr "ライティングに関する考慮事項"

msgid ""
"While it's possible to import lights from a 3D scene using the glTF, ``."
"blend`` or Collada formats, it's generally advised to design the scene's "
"lighting in the Godot editor after importing the scene."
msgstr ""
"glTF、.blend、または Collada 形式を使用して3Dシーンからライトをインポートする"
"ことは可能ですが、通常はシーンをインポートした後、Godot エディタでシーンのラ"
"イティングを設計することをお勧めします。"

msgid ""
"This allows you to get a more accurate feel for the final result, as "
"different engines will render lights in a different manner. This also avoids "
"any issues with lights appearing excessively strong or faint as a result of "
"the import process."
msgstr ""
"これにより異なるエンジンではライトのレンダリング方法が異なるため、最終結果を"
"より正確に把握できます。またインポートプロセスの結果としてライトが過度に強く"
"なったり弱くなったりする問題も回避できます。"
