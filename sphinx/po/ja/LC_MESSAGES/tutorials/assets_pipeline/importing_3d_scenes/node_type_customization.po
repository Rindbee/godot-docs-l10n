#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Node type customization using name suffixes"
msgstr "名前にサフィックスを使用したノードタイプのカスタマイズ"

msgid ""
"Many times, when editing a scene, there are common tasks that need to be "
"done after exporting:"
msgstr ""
"多くの場合、シーンを編集する場合、エクスポート後に実行する必要がある一般的な"
"タスクがあります:"

msgid "Adding collision detection to objects."
msgstr "オブジェクトへのコリジョン検出の追加。"

msgid "Setting objects as navigation meshes."
msgstr "オブジェクトをナビゲーションメッシュとして設定する。"

msgid ""
"Deleting nodes that are not used in the game engine (like specific lights "
"used for modeling)."
msgstr ""
"ゲームエンジンで使用されていないノードの削除 (モデリングに使用される特定のラ"
"イトなど)。"

msgid ""
"To simplify this workflow, Godot offers several suffixes that can be added "
"to the names of the objects in your 3D modeling software. When imported, "
"Godot will detect suffixes in object names and will perform actions "
"automatically."
msgstr ""
"このワークフローを簡略化するために、Godotには3Dモデリングソフトウェアのオブ"
"ジェクトの名前に追加できるサフィックスがいくつかあります。インポートすると、"
"Godotはオブジェクトの名前のサフィックスを検出し、自動的にアクションを実行しま"
"す。"

msgid ""
"All the suffixes described below can be used with ``-``, ``$``, and ``_`` "
"and are **case-insensitive**."
msgstr ""
"以下に説明するすべてのサフィックスは、 ``-`` 、 ``$`` 、 ``_`` とともに使用で"
"き、**大文字と小文字は区別されません**。"

msgid ""
"This is equivalent to enabling **Skip Import** for a node in the Advanced "
"Import Settings dialog."
msgstr ""
"これは [詳細インポート設定] ダイアログでノードに対して **インポートをスキップ"
"** を有効にするのと同じです。"

msgid "Create collisions (-col, -convcol, -colonly, -convcolonly)"
msgstr "コリジョンの作成 (-col, -convcol, -colonly, -convcolonly)"

msgid ""
"The option ``-col`` will work only for Mesh objects. If it is detected, a "
"child static collision node will be added, using the same geometry as the "
"mesh. This will create a triangle mesh collision shape, which is a slow, but "
"accurate option for collision detection. This option is usually what you "
"want for level geometry (but see also ``-colonly`` below)."
msgstr ""
"オプション ``-col`` はメッシュオブジェクトに対してのみ機能します。検出された"
"場合、メッシュと同じジオメトリを使用して、子の静的衝突ノードが追加されます。"
"これにより三角形メッシュのコリジョンシェイプが作成されます。これは衝突検出の"
"ための低速ですが正確なオプションです。このオプションは通常、地形ジオメトリに"
"必要なものです (ただし、以下の ``-colonly`` も参照してください)。"

msgid ""
"The option ``-convcol`` will create a :ref:`class_ConvexPolygonShape3D` "
"instead of a :ref:`class_ConcavePolygonShape3D`. Unlike triangle meshes "
"which can be concave, a convex shape can only accurately represent a shape "
"that doesn't have any concave angles (a pyramid is convex, but a hollow box "
"is concave). Due to this, convex collision shapes are generally not suited "
"for level geometry. When representing simple enough meshes, convex collision "
"shapes can result in better performance compared to a triangle collision "
"shape. This option is ideal for simple or dynamic objects that require "
"mostly-accurate collision detection."
msgstr ""
"オプション ``-convcol`` は、:ref:`class_ConcavePolygonShape3D` ではな"
"く :ref:`class_ConvexPolygonShape3D` を作成します。凹型にできる三角形メッシュ"
"とは異なり、凸型は凹角のない形状のみを正確に表現できます (ピラミッドは凸型で"
"すが、中空のボックスは凹型です)。このため、凸型コリジョンシェイプは一般に地形"
"ジオメトリには適していません。十分に単純なメッシュを表現する場合、凸型コリ"
"ジョンシェイプは三角形コリジョンシェイプと比較してパフォーマンスが向上する可"
"能性があります。このオプションは、ほぼ正確な衝突検出を必要とする単純なオブ"
"ジェクトまたは動的オブジェクトに最適です。"

msgid ""
"However, in both cases, the visual geometry may be too complex or not smooth "
"enough for collisions. This can create physics glitches and slow down the "
"engine unnecessarily."
msgstr ""
"ただし、どちらの場合も視覚的なジオメトリが複雑すぎるか、衝突に対して十分にス"
"ムーズでない可能性があります。これにより、物理的な不具合が発生し、エンジンが"
"不必要に遅くなる可能性があります。"

msgid ""
"To solve this, the ``-colonly`` modifier exists. It will remove the mesh "
"upon importing and will create a :ref:`class_StaticBody3D` collision "
"instead. This helps the visual mesh and actual collision to be separated."
msgstr ""
"これを解決するには、 ``-colonly`` 修飾子を使用します。これによりインポート時"
"にメッシュが削除され、代わりに :ref:`class_StaticBody3D` コリジョンが作成され"
"ます。これにより、視覚的なメッシュと実際の衝突を分離できます。"

msgid ""
"The option ``-convcolonly`` works in a similar way, but will create "
"a :ref:`class_ConvexPolygonShape3D` instead using convex decomposition."
msgstr ""
"オプション ``-convcolonly`` も同様に動作しますが、凸型分解を使用する代わり"
"に :ref:`class_ConvexPolygonShape3D` を作成します。"

msgid ""
"With Collada files, the option ``-colonly`` can also be used with Blender's "
"empty objects. On import, it will create a :ref:`class_StaticBody3D` with a "
"collision node as a child. The collision node will have one of a number of "
"predefined shapes, depending on Blender's empty draw type:"
msgstr ""
"オプション ``-colonly`` は、Blenderの空のオブジェクトでも使用できます。イン"
"ポート時にコリジョンノードを子として持つ :ref:`class_StaticBody3D` が作成され"
"ます。コリジョンノードには、Blenderの空の描画タイプに応じて、事前定義されたい"
"くつかの形状があります:"

msgid "Choosing a draw type for an Empty on creation in Blender"
msgstr "Blender で Empty を作成するときに描画タイプを選択する"

msgid "Single arrow will create a :ref:`class_SeparationRayShape3D`."
msgstr ""
"単一の矢印(Single arrow)は :ref:`class_SeparationRayShape3D` を作成します。"

msgid "Cube will create a :ref:`class_BoxShape3D`."
msgstr "キューブは :ref:`class_BoxShape3D` を作成します。"

msgid "Image will create a :ref:`class_WorldBoundaryShape3D`."
msgstr "イメージ :ref:`class_WorldBoundaryShape3D` を作成します。"

msgid ""
"Sphere (and the others not listed) will create a :ref:`class_SphereShape3D`."
msgstr ""
"球、(およびリストされていない他のもの)は :ref:`class_SphereShape3D` を作成し"
"ます。"

msgid ""
"When possible, **try to use a few primitive collision shapes** instead of "
"triangle mesh or convex shapes. Primitive shapes often have the best "
"performance and reliability."
msgstr ""
"可能であれば、三角形メッシュや凸型シェイプの代わりに、**いくつかのプリミティ"
"ブ衝突シェイプを使用するようにしてください**。プリミティブシェイプは、多くの"
"場合、最高のパフォーマンスと信頼性が得られます。"

msgid ""
"For better visibility on Blender's editor, you can set the \"X-Ray\" option "
"on collision empties and set some distinct color for them by changing **Edit "
"> Preferences > Themes > 3D Viewport > Empty**."
msgstr ""
"Blenderのエディタで見やすくするために、ユーザーはコリジョン用エンプティに「X-"
"Ray」オプションを設定し、**編集 > プリファレンス > テーマ > 3Dビューポート > "
"エンプティ** を変更して、それらに明確な色を設定できます。"

msgid ""
"If using Blender 2.79 or older, follow these steps instead: **User "
"Preferences > Themes > 3D View > Empty**."
msgstr ""
"Blender 2.79 以前を使用している場合は、代わりに次の手順に従ってください: **"
"ユーザープリファレンス > テーマ > 3Dビュー > エンプティ**。"

msgid ""
"See :ref:`doc_collision_shapes_3d` for a comprehensive overview of collision "
"shapes."
msgstr ""
"コリジョンシェイプの包括的な概要については、:ref:`doc_collision_shapes_3d` を"
"参照してください。"

msgid "Create Occluder (-occ, -occonly)"
msgstr "オクルーダの作成 (-occ, -occonly)"

msgid ""
"If a mesh is imported with the ``-occ`` suffix an :ref:`class_occluder3D` "
"node will be created based on the geometry of the mesh, it does not replace "
"the mesh. A mesh node with the ``-occonly`` suffix will be converted to "
"an :ref:`class_occluder3D` on import."
msgstr ""
"メッシュが ``-occ`` サフィックス付きでインポートされると、メッシュのジオメト"
"リに基づいて :ref:`class_occluder3D` ノードが作成されますが、メッシュは置き換"
"えられません。 ``-occonly`` サフィックス付きのメッシュノードは、インポート時"
"に :ref:`class_occluder3D` に変換されます。"

msgid "Create navigation (-navmesh)"
msgstr "ナビゲーションの作成(-navmesh)"

msgid ""
"A mesh node with the ``-navmesh`` suffix will be converted to a navigation "
"mesh. The original Mesh object will be removed at import-time."
msgstr ""
"``-navmesh`` サフィックスを持つメッシュノードはナビゲーションメッシュに変換さ"
"れます。元のメッシュオブジェクトはインポート時に削除されます。"

msgid "Create a VehicleBody (-vehicle)"
msgstr "VehicleBodyの作成 (-vehicle)"

msgid ""
"A mesh node with the ``-vehicle`` suffix will be imported as a child to "
"a :ref:`class_VehicleBody3D` node."
msgstr ""
"``-vehicle`` サフィックスを持つメッシュノードは、 :ref:`class_VehicleBody3D` "
"ノードの子としてインポートされます。"

msgid "Create a VehicleWheel (-wheel)"
msgstr "VehicleWheelの作成 (-wheel)"

msgid ""
"A mesh node with the ``-wheel`` suffix will be imported as a child to "
"a :ref:`class_VehicleWheel3D` node."
msgstr ""
"``-wheel`` サフィックスを持つメッシュノードは、 :ref:`class_VehicleWheel3D` "
"ノードの子としてインポートされます。"

msgid "Rigid Body (-rigid)"
msgstr "リジッドボディ(-rigid)"

msgid ""
"A mesh node with the ``-rigid`` suffix will be imported as "
"a :ref:`class_RigidBody3D`."
msgstr ""
"``-rigid`` サフィックスを持つメッシュ ノードは、 :ref:`class_RigidBody3D` と"
"してインポートされます。"

msgid "Animation loop (-loop, -cycle)"
msgstr "アニメーションループ(-loop、-cycle)"

msgid ""
"Animation clips in the source 3D file that start or end with the token "
"``loop`` or ``cycle`` will be imported as a Godot :ref:`class_Animation` "
"with the loop flag set. **Unlike the other suffixes described above, this "
"does not require a hyphen.**"
msgstr ""
"``loop`` または ``cycle`` トークンで開始または終了するCOLLADAドキュメント内の"
"アニメーションクリップは、ループフラグが設定された "
"Godot :ref:`class_Animation` としてインポートされます。 **上記の他のサフィッ"
"クスとは異なり、ハイフンは必要ありません。**"

msgid ""
"In Blender, this requires using the NLA Editor and naming the Action with "
"the ``loop`` or ``cycle`` prefix or suffix."
msgstr ""
"Blenderでは、NLAエディタを使用し、アクションの名前に ``loop`` または "
"``cycle`` のプレフィックスもしくはサフィックスを付ける必要があります。"
