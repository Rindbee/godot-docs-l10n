#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Running code in the editor"
msgstr "エディタでコードを実行する"

msgid "What is ``@tool``?"
msgstr "``@tool`` とは？"

msgid ""
"``@tool`` is a powerful line of code that, when added at the top of your "
"script, makes it execute in the editor. You can also decide which parts of "
"the script execute in the editor, which in game, and which in both."
msgstr ""
"``@ tool``は強力なコード行で、スクリプトの先頭に追加すると、それがエディタ内"
"で実行されるようになります。また、スクリプトの部分ごとにそれをエディタ内で実"
"行するのか、ゲーム内で実行するのか、それとも両方で実行するのかも決めることが"
"できます。"

msgid ""
"You can use it for doing many things, but it is mostly useful in level "
"design for visually presenting things that are hard to predict ourselves. "
"Here are some use cases:"
msgstr ""
"多くの目的のためにそれを使用できますが、レベル設計をするときに、予測が難しい"
"ものを視覚的に提示するためにとても役立ちます。使用例は次のとおりです:"

msgid ""
"If you have a cannon that shoots cannonballs affected by physics (gravity), "
"you can draw the cannonball's trajectory in the editor, making level design "
"a lot easier."
msgstr ""
"物理(重力)の影響を受ける砲弾を撃つ大砲がある場合、砲弾の軌道をエディタ内で表"
"示することで、レベル設計をはるかに簡単にできます。"

msgid ""
"If you have jumppads with varying jump heights, you can draw the maximum "
"jump height a player would reach if it jumped on one, also making level "
"design easier."
msgstr ""
"ジャンプの高さが異なるジャンプパッドがある場合、プレイヤーがジャンプした場合"
"に到達する最大ジャンプ高を描画でき、レベル設計も容易になります。"

msgid ""
"If your player doesn't use a sprite, but draws itself using code, you can "
"make that drawing code execute in the editor to see your player."
msgstr ""
"プレイヤーがスプライトを使用せず、コードを使用して描画を行う場合、エディタ内"
"でその描画コードを実行するようにしてプレイヤーを見られます。"

msgid ""
"``@tool`` scripts run inside the editor, and let you access the scene tree "
"of the currently edited scene. This is a powerful feature which also comes "
"with caveats, as the editor does not include protections for potential "
"misuse of ``@tool`` scripts. Be **extremely** cautious when manipulating the "
"scene tree, especially "
"via :ref:`Node.queue_free<class_Node_method_queue_free>`, as it can cause "
"crashes if you free a node while the editor runs logic involving it."
msgstr ""
"``@tool`` スクリプトはエディタ内で実行され、現在編集されているシーンのシーン"
"ツリーにアクセスできます。これは強力な機能ですが警告も伴います。エディタには "
"``@tool`` スクリプトの誤用の可能性に対する保護が含まれていないためです。特"
"に :ref:`Node.queue_free <class_Node_method_queue_free>` を介してシーンツリー"
"を操作するときは\\ **非常に**\\ 注意してください、エディタがそれに関連するロ"
"ジックを実行している間にノードを解放するとクラッシュする可能性があります。"

msgid "How to use ``@tool``"
msgstr "``@tool``\\ の使用方法"

msgid ""
"To turn a script into a tool, add the ``@tool`` annotation at the top of "
"your code."
msgstr ""
"スクリプトをツールにするには、コードの先頭に ``@tool`` アノテーションを追加し"
"ます。"

msgid ""
"To check if you are currently in the editor, use: "
"``Engine.is_editor_hint()``."
msgstr ""
"現在の実行環境がエディタ内なのかどうかを確認するには、\\ "
"``Engine.is_editor_hint()`` を使用します。"

msgid "For example, if you want to execute some code only in the editor, use:"
msgstr ""
"たとえば、あるコードをエディタでのみ実行したい場合は、次のようにします:"

msgid ""
"On the other hand, if you want to execute code only in game, simply negate "
"the same statement:"
msgstr ""
"反対に、ゲームでのみコードを実行したい場合は、単純に同じプログラムを反転しま"
"す:"

msgid ""
"Pieces of code that do not have either of the 2 conditions above will run "
"both in-editor and in-game."
msgstr ""
"上記の2つの条件のいずれにも該当しないコード部分はエディタとゲームの両方で実行"
"されます。"

msgid "Here is how a ``_process()`` function might look for you:"
msgstr "``_process()`` 関数の全体像はこのようになります:"

msgid "Important information"
msgstr "重要な情報"

msgid ""
"Any other GDScript that your tool script uses must *also* be a tool. Any "
"GDScript without ``@tool`` used by the editor will act like an empty file!"
msgstr ""
"toolスクリプトが使用する全てのGDScriptは必ず\\ *toolでもある* 必要がありま"
"す。``@tool`` がない全てのGDScriptはエディタ内で使用するとき空のファイルのよ"
"うにふるまいます！"

msgid ""
"Extending a ``@tool`` script does not automatically make the extending "
"script a ``@tool``. Omitting ``@tool`` from the extending script will "
"disable tool behavior from the super class. Therefore the extending script "
"should also specify the ``@tool`` annotation."
msgstr ""
"``@tool`` スクリプトを継承しても継承したスクリプトが自動的に ``@tool`` になる"
"ことはありません。 継承スクリプトに ``@tool`` が無い場合は親クラスのツールと"
"してのふるまいは無効化されます。なので継承スクリプトも ``@tool`` アノテーショ"
"ンを明示しなければなりません。"

msgid ""
"Modifications in the editor are permanent. For example, in the next section "
"when we remove the script, the node will keep its rotation. Be careful to "
"avoid making unwanted modifications."
msgstr ""
"エディタスクリプトでの変更は永続的です。例えば、次のセクションでスクリプトを"
"削除すると、ノードはその時の角度のままになります。不要な変更を避けるよう注意"
"してください。"

msgid "Try ``@tool`` out"
msgstr "``@tool`` を試してみる"

msgid ""
"Add a ``Sprite2D`` node to your scene and set the texture to Godot icon. "
"Attach and open a script, and change it to this:"
msgstr ""
"シーンに ``Sprite2D`` ノードを追加し、テクスチャをGodotアイコンに設定します。"
"スクリプトをアタッチして開き、次のように変更します:"

msgid ""
"Save the script and return to the editor. You should now see your object "
"rotate. If you run the game, it will also rotate."
msgstr ""
"スクリプトを保存してエディタに戻りましょう。これで、オブジェクトが回転するよ"
"うになるはずです。ゲームを実行してみると、ゲーム内でも回転します。"

msgid ""
"If you don't see the changes, reload the scene (close it and open it again)."
msgstr ""
"変化がみられない場合は、シーンをリロードしましょう(閉じてからもう一度開きま"
"す)。"

msgid ""
"Now let's choose which code runs when. Modify your ``_process()`` function "
"to look like this:"
msgstr ""
"次に、どのコードがいつ実行されるのかを選択しましょう。\\ ``_process()`` 関数"
"を次のように変更します:"

msgid ""
"Save the script. Now the object will spin clockwise in the editor, but if "
"you run the game, it will spin counter-clockwise."
msgstr ""
"スクリプトを保存します。これで、オブジェクトはエディタでは時計回りに回転しま"
"すが、ゲームを実行すると、反時計回りに回転します。"

msgid "Editing variables"
msgstr "変数の編集"

msgid ""
"Add and export a variable speed to the script. To update the speed and also "
"reset the rotation angle add a setter ``set(new_speed)`` which is executed "
"with the input from the inspector. Modify ``_process()`` to include the "
"rotation speed."
msgstr ""
"スクリプトにspeed変数を追加しエクスポートしましょう。speedを更新し回転角度も"
"リセットするため ``set(new_speed)`` セッターを追加します。これはインスペクタ"
"から入力があった時に実行され、 ``_process()`` を修正して回転速度を反映しま"
"す。"

msgid ""
"Code from other nodes doesn't run in the editor. Your access to other nodes "
"is limited. You can access the tree and nodes, and their default properties, "
"but you can't access user variables. If you want to do so, other nodes have "
"to run in the editor too. Autoload nodes cannot be accessed in the editor at "
"all."
msgstr ""
"他のノードからのコードはエディタで実行されません。他のノードへのアクセスは制"
"限されています。ツリーとノード、およびそれらのデフォルトのプロパティにはアク"
"セスできますが、ユーザー変数にはアクセスできません。そうしたい場合は、他の"
"ノードも同じくエディタで実行する必要があります。 AutoLoadノードにはエディタで"
"はまったくアクセスできません。"

msgid "Getting notified when resources change"
msgstr "リソース変更の通知を受け取る"

msgid ""
"To get around this problem you first have to make your resource a tool and "
"make it emit the ``changed`` signal whenever a property is set:"
msgstr ""
"この問題をかいくぐるにはまずリソースをツールにする必要があり、それがプロパ"
"ティが設定された時にいつでも ``changed`` シグナルを発信するようにします:"

msgid "You then want to connect the signal when a new resource is set:"
msgstr "次に新しいリソースが設定された時のシグナルを接続します:"

msgid ""
"Lastly, remember to disconnect the signal as the old resource being used and "
"changed somewhere else would cause unneeded updates."
msgstr ""
"最後に、シグナルを接続解除するのを忘れないようにしましょう。古いリソースが別"
"の場所で使われ変更されると必要ない更新が起きてしまいます。"

msgid "Reporting node configuration warnings"
msgstr "ノード設定の警告を報告する"

msgid ""
"Godot uses a *node configuration warning* system to warn users about "
"incorrectly configured nodes. When a node isn't configured correctly, a "
"yellow warning sign appears next to the node's name in the Scene dock. When "
"you hover or click on the icon, a warning message pops up. You can use this "
"feature in your scripts to help you and your team avoid mistakes when "
"setting up scenes."
msgstr ""
"Godotは *ノード設定警告*\\ システムを使いノードの設定が不適切なことをユーザー"
"に警告します。ノードが適切に設定されていないとき、シーンドックのノード名の横"
"に黄色の警告マークが現れます。アイコンにカーソルをホバーするかクリックする"
"と、警告メッセージがポップアップします。この機能はあなたやチームがシーン設定"
"をするときにミスを避けるために使えます。"

msgid ""
"When using node configuration warnings, when any value that should affect or "
"remove the warning changes, you need to "
"call :ref:`update_configuration_warnings<class_Node_method_update_configuration_warnings>` . "
"By default, the warning only updates when closing and reopening the scene."
msgstr ""
"ノード設定警告を使うとき、警告に影響したり消したりする可能性がある値を変更す"
"る時には\\ : "
"ref:`update_configuration_warnings<class_Node_method_update_configuration_warnings>`"
"を呼ぶ必要があります。デフォルトでは、警告はシーンを閉じて再度開いたときにの"
"み更新されます。"

msgid "Running one-off scripts using EditorScript"
msgstr "エディタスクリプトで一回限りのスクリプトを実行する"

msgid ""
"Sometimes, you need to run code just one time to automate a certain task "
"that is not available in the editor out of the box. Some examples might be:"
msgstr ""
"ある時には、エディタから簡単に実行できないような特定の作業を自動化するために"
"コードを一回だけ実行する必要があるかもしれません。たとえば:"

msgid ""
"Use as a playground for GDScript or C# scripting without having to run a "
"project. ``print()`` output is displayed in the editor Output panel."
msgstr ""
"プロジェクトを実行せずにGDScriptやC#スクリプトのプレイグラウンドとして使う。 "
"``print()`` 出力をエディタのアプトプットパネルに出力する。"

msgid ""
"Scale all light nodes in the currently edited scene, as you noticed your "
"level ends up looking too dark or too bright after placing lights where "
"desired."
msgstr ""
"編集中のシーンにある光源ノードを拡大縮小し、ライトを好きな場所に配置した後に"
"レベルが暗すぎたり明るすぎたりしないかを確認する。"

msgid ""
"Replace nodes that were copy-pasted with scene instances to make them easier "
"to modify later."
msgstr ""
"コピーペーストした複製したノードをシーンインスタンスに置き換え、それらを後で"
"変更しやすいようにする。"

msgid ""
"This is available in Godot by extending :ref:`class_EditorScript` in a "
"script. This provides a way to run individual scripts in the editor without "
"having to create an editor plugin."
msgstr ""
"Godotでは :ref:`class_EditorScript` を継承することでこれが可能です。これは個"
"別のスクリプトをエディタプラグインを作ることなくエディタから実行する方法を提"
"供します。"

msgid ""
"To create an EditorScript, right-click a folder or empty space in the "
"FileSystem dock then choose **New > Script...**. In the script creation "
"dialog, click the tree icon to choose an object to extend from (or enter "
"``EditorScript`` directly in the field on the left, though note this is case-"
"sensitive):"
msgstr ""
"エディタスクリプトを作成するには、ファイルシステムドックのフォルダや空の空間"
"を右クリックし、 ** 新規作成 > スクリプト... ** を選択します。スクリプト作成"
"ダイアログでは、ツリーアイコンを選択して継承元のオブジェクトを選択します。(ま"
"たは ``EditorScript`` を直接左のフィールドに入力します。大文字と小文字は区別"
"されます。):"

msgid "Creating an editor script in the script editor creation dialog"
msgstr "エディタスクリプトを作るスクリプトエディタの作成ダイアログ"

msgid ""
"This will automatically select a script template that is suited for "
"EditorScripts, with a ``_run()`` method already inserted:"
msgstr ""
"これで自動的にエディタスクリプトのためのスクリプトテンプレートが選択され、 "
"``_run()`` メソッドが既に入っています:"

msgid ""
"This ``_run()`` method is executed when you use **File > Run** or the "
"keyboard shortcut :kbd:`Ctrl + Shift + X` while the EditorScript is the "
"currently open script in the script editor. This keyboard shortcut is only "
"effective when currently focused on the script editor."
msgstr ""
"この ``_run()`` メソッドはスクリプトエディタでスクリプトを開いている時に **"
"ファイル > 実行 ** を使用するかキーボードショートカット :kbd:`Ctrl + Shift + "
"X` を使用することで実行されます。このキーボードショートカットはスクリプトエ"
"ディタで現在フォーカスしているもののみに有効です。"

msgid "Scripts that extend EditorScript must be ``@tool`` scripts to function."
msgstr ""
"EditorScriptを継承するスクリプトは機能するために必ず ``@tool`` スクリプトでな"
"ければなりません。"

msgid ""
"EditorScripts have no undo/redo functionality, so **make sure to save your "
"scene before running one** if the script is designed to modify any data."
msgstr ""
"エディタスクリプトには元に戻す/やり直す機能がありません、なのでもしスクリプト"
"がデータを変更するようデザインされているなら ** 実行する前に必ずシーンをセー"
"ブしてください ** 。"

msgid ""
"To access nodes in the currently edited scene, use "
"the :ref:`EditorScript.get_scene <class_EditorScript_method_get_scene>` "
"method which returns the root Node of the currently edited scene. Here's an "
"example that recursively gets all nodes in the currently edited scene and "
"doubles the range of all OmniLight3D nodes:"
msgstr ""
"エディタで編集中のシーンにあるノードにアクセスするに"
"は :ref:`EditorScript.get_scene <class_EditorScript_method_get_scene>` を使い"
"ます。これは現在編集中のシーンのルートノードを返します。以下は編集している"
"シーンにあるすべてのノードを再帰的に取得し、全てのOmniLight3Dノードの範囲を倍"
"にする例です:"

msgid ""
"You can change the currently edited scene at the top of the editor even "
"while the Script view is open. This will affect the return value "
"of :ref:`EditorScript.get_scene <class_EditorScript_method_get_scene>`, so "
"make sure you've selected the scene you intend to iterate upon before "
"running the script."
msgstr ""
"スクリプトビューを開いる間にもエディタの上部から編集中のシーンを変更すること"
"ができます。これによって :ref:`EditorScript.get_scene "
"<class_EditorScript_method_get_scene>` の返り値が変わるので、このスクリプトを"
"実行する前に反復実行を行いたいシーンを選択していることを確認してください。"

msgid "Instancing scenes"
msgstr "シーンのインスタンス化"

msgid ""
"You can instantiate packed scenes normally and add them to the scene "
"currently opened in the editor. By default, nodes or scenes added "
"with :ref:`Node.add_child(node) <class_Node_method_add_child>` are **not** "
"visible in the Scene tree dock and are **not** persisted to disk. If you "
"wish the node or scene to be visible in the scene tree dock and persisted to "
"disk when saving the scene, you need to set the child node's :ref:`owner "
"<class_Node_property_owner>` property to the currently edited scene root."
msgstr ""
"通常はpacked sceneをインスタンス化し、エディタで現在開いているシーンに追加す"
"ることができます。デフォルトでは、 :ref:`Node.add_child(node) "
"<class_Node_method_add_child>` によって追加されたノードやシーンはシーンツリー"
"ドックで ** 表示されず ** 、ディスクにも ** 残りません ** 。シーンを保存する"
"時にこのノードやシーンをシーンツリードックで表示したりディスクに保存されるよ"
"うにするには、子ノードの :ref:`owner <class_Node_property_owner>` プロパティ"
"を編集中のシーンルートに設定する必要があります。"

msgid "If you are using ``@tool``:"
msgstr "``@tool`` の場合:"

msgid "If you are using :ref:`EditorScript<class_EditorScript>`:"
msgstr ":ref:`EditorScript<class_EditorScript>` の場合:"

msgid ""
"Using ``@tool`` improperly can yield many errors. It is advised to first "
"write the code how you want it, and only then add the ``@tool`` annotation "
"to the top. Also, make sure to separate code that runs in-editor from code "
"that runs in-game. This way, you can find bugs more easily."
msgstr ""
"``@tool`` を不適切に使用すると、多くのエラーが発生する可能性があります。まず"
"はあなたが望むようにコードを書き、それができた後で ``@tool`` キーワードを先頭"
"に追加する方法をお勧めします。また、エディタで実行するコードはゲームで実行す"
"るコードから分離するようにしてください。これにより、バグを簡単に見つけること"
"ができます。"
