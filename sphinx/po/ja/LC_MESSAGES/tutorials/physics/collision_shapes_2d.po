#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Collision shapes (2D)"
msgstr "コリジョン形状(2D)"

msgid "This guide explains:"
msgstr "このガイドでは以下の事を説明します:"

msgid "The types of collision shapes available in 2D in Godot."
msgstr "Godotで使用可能な2Dの衝突形状の種類。"

msgid "Using an image converted to a polygon as a collision shape."
msgstr "ポリゴンに変換された画像をコリジョン形状として使用。"

msgid "Performance considerations regarding 2D collisions."
msgstr "2Dコリジョンに関するパフォーマンス上の考慮事項。"

msgid ""
"Godot provides many kinds of collision shapes, with different performance "
"and accuracy tradeoffs."
msgstr ""
"Godotはさまざまな種類の衝突形状を提供しており、それぞれにパフォーマンスと精度"
"のトレードオフがあります。"

msgid ""
"You can define the shape of a :ref:`class_PhysicsBody2D` by adding one or "
"more :ref:`CollisionShape2Ds <class_CollisionShape2D>` or :ref:"
"`CollisionPolygon2Ds <class_CollisionPolygon2D>` as child nodes. Note that "
"you must add a :ref:`class_Shape2D` *resource* to collision shape nodes in "
"the Inspector dock."
msgstr ""
"\\ :ref:`class_PhysicsBody2D` のシェイプを定義するには、一つ以上の\\ :ref:"
"`CollisionShape2Ds <class_CollisionShape2D>` または :ref:"
"`CollisionPolygon2Ds <class_CollisionPolygon2D>` をノードの子として追加しま"
"す。インスペクタドックで :ref:`class_Shape2D` *リソース* をコリジョン形状にを"
"追加する必要があることに注意してください。"

msgid ""
"When you add multiple collision shapes to a single PhysicsBody2D, you don't "
"have to worry about them overlapping. They won't \"collide\" with each other."
msgstr ""
"1つの PhysicsBody2D 複数のコリジョン形状を追加すると、それらが重なることを心"
"配せずに済みます。それらは互いに \"衝突\" しません。"

msgid "Primitive collision shapes"
msgstr "プリミティブコリジョン形状"

msgid "Godot provides the following primitive collision shape types:"
msgstr "Godotは、以下のプリミティブコリジョン形状を提供します:"

msgid ":ref:`class_RectangleShape2D`"
msgstr ":ref:`class_RectangleShape2D`"

msgid ":ref:`class_CircleShape2D`"
msgstr ":ref:`class_CircleShape2D`"

msgid ":ref:`class_CapsuleShape2D`"
msgstr ":ref:`class_CapsuleShape2D`"

msgid ":ref:`class_SegmentShape2D`"
msgstr ":ref:`class_SegmentShape2D`"

msgid ":ref:`class_SeparationRayShape2D` (designed for characters)"
msgstr ""
":ref:`class_SeparationRayShape2D` (キャラクターのためにデザインされています)"

msgid ":ref:`class_WorldBoundaryShape2D` (infinite plane)"
msgstr ":ref:`class_WorldBoundaryShape2D` (無限平面)"

msgid ""
"You can represent the collision of most smaller objects using one or more "
"primitive shapes. However, for more complex objects, such as a large ship or "
"a whole level, you may need convex or concave shapes instead. More on that "
"below."
msgstr ""
"ほとんどの小さなオブジェクトの衝突は、1つまたは複数の基本的な形状を使用して表"
"現できます。しかし、大型の船やレベル全体のような複雑なオブジェクトの場合は、"
"代わりに凸形状や凹形状を使用する必要があるかもしれません。詳細は以下で説明し"
"ます。"

msgid ""
"We recommend favoring primitive shapes for dynamic objects such as "
"RigidBodies and CharacterBodies as their behavior is the most reliable. They "
"often provide better performance as well."
msgstr ""
"動的オブジェクト、たとえばRigidBody や CharacterBodyの場合は、基本的な形状を"
"使用することをお勧めします。これは挙動が最も安定しているためです。これらの形"
"状はパフォーマンスが優れている場合が多いです。"

msgid "Convex collision shapes"
msgstr "凸形状コリジョン形状"

msgid ""
"Godot currently doesn't offer a built-in way to create 2D convex collision "
"shapes. This section is mainly here for reference purposes."
msgstr ""
"Godot は現在、2Dの凸形状コリジョン形状を作成するビルトインの方法を提供してい"
"ません。このセクションは主に参考情報として記載されています。"

msgid ""
":ref:`Convex collision shapes <class_ConvexPolygonShape2D>` are a compromise "
"between primitive collision shapes and concave collision shapes. They can "
"represent shapes of any complexity, but with an important caveat. As their "
"name implies, an individual shape can only represent a *convex* shape. For "
"instance, a pyramid is *convex*, but a hollow box is *concave*. To define a "
"concave object with a single collision shape, you need to use a concave "
"collision shape."
msgstr ""
"\\ :ref:`凸形状コリジョン形状 <class_ConvexPolygonShape2D>` は、プリミティブ"
"コリジョン形状と凹型コリジョン形状の折衷的な選択肢です。これらはどんな複雑な"
"形状でも表現できますが、重要な制約があります。その名前が示すように、個々の形"
"状は *凸型* の形状しか表現できません。例えば、ピラミッドは *凸型* ですが、中"
"が空洞の箱は *凹型* です。1つのコリジョン形状で凹型オブジェクトを定義するに"
"は、凹型コリジョン形状を使用する必要があります。"

msgid ""
"Depending on the object's complexity, you may get better performance by "
"using multiple convex shapes instead of a concave collision shape. Godot "
"lets you use *convex decomposition* to generate convex shapes that roughly "
"match a hollow object. Note this performance advantage no longer applies "
"after a certain amount of convex shapes. For large and complex objects such "
"as a whole level, we recommend using concave shapes instead."
msgstr ""
"オブジェクトの複雑さによっては、凹型コリジョン形状を使用する代わりに、複数の"
"凸型形状を使用することでパフォーマンスが向上する場合があります。Godotでは、 *"
"凸形状分解* を使用して、中が空洞のオブジェクトに大まかに一致する凸型形状を生"
"成できます。ただし、凸型形状の数が一定量を超えると、このパフォーマンスの利点"
"は失われます。レベル全体のような大きく複雑なオブジェクトの場合は、凹型形状を"
"使用することを推奨します。"

msgid "Concave or trimesh collision shapes"
msgstr "凹形状または三角形メッシュのコリジョン形状"

msgid ""
":ref:`Concave collision shapes <class_ConcavePolygonShape2D>`, also called "
"trimesh collision shapes, can take any form, from a few triangles to "
"thousands of triangles. Concave shapes are the slowest option but are also "
"the most accurate in Godot. **You can only use concave shapes within "
"StaticBodies.** They will not work with CharacterBodies or RigidBodies "
"unless the RigidBody's mode is Static."
msgstr ""
"\\ :ref:`凹形状コリジョン形状 <class_ConcavePolygonShape2D>` 、または三角メッ"
"シュコリジョン形状は、少数の三角形から数千の三角形まで、あらゆる形状を表現で"
"きます。凹形状は、Godotにおいて最も正確で、最も処理速度が遅いオプションで"
"す。 **凹形状は StaticBody 内でのみ使用可能です** 。CharacterBodyやRigidBody"
"では動作しません。ただし、RigidBodyが Static モードに設定されている場合は例外"
"的に動作します。"

msgid ""
"Even though concave shapes offer the most accurate *collision*, contact "
"reporting can be less precise than primitive shapes."
msgstr ""
"凹形状は最も正確な *衝突* を提供しますが、接触報告の精度はプリミティブ形状よ"
"りも低い場合があります。"

msgid ""
"When not using TileMaps for level design, concave shapes are the best "
"approach for a level's collision."
msgstr ""
"レベルデザインにTileMapを使用しない場合、凹形状がレベルの衝突判定に最適なアプ"
"ローチです。"

msgid ""
"You can configure the CollisionPolygon2D node's *build mode* in the "
"inspector. If it is set to **Solids** (the default), collisions will include "
"the polygon and its contained area. If it is set to **Segments**, collisions "
"will only include the polygon edges."
msgstr ""
"CollisionPolygon2D ノードの *build mode* はインスペクタで設定できます。 "
"**Solids** (デフォルト)に設定されている場合、衝突判定にはポリゴンとその内側の"
"領域が含まれます。一方、 **Segments** に設定されている場合、衝突判定にはポリ"
"ゴンの辺のみが含まれます。"

msgid ""
"You can generate a concave collision shape from the editor by selecting a "
"Sprite2D and using the **Sprite2D** menu at the top of the 2D viewport. The "
"Sprite2D menu dropdown exposes an option called **Create CollisionPolygon2D "
"Sibling**. Once you click it, it displays a menu with 3 settings:"
msgstr ""
"エディタから Sprite2D を選択し、2D ビューポート上部の **Sprite2D** メニューを"
"使用することで、凹型のコリジョン形状を生成できます。Sprite2Dメニューのドロッ"
"プダウンには、**CollisionPolygon2Dの兄弟を作成** というオプションがあります。"
"これをクリックすると、3つの設定が表示されます。"

msgid ""
"**Simplification:** Higher values will result in a less detailed shape, "
"which improves performance at the cost of accuracy."
msgstr ""
"\\ **簡略化:** 値を大きくすると形状の詳細が少なくなり、精度を犠牲にする代わり"
"にパフォーマンスが向上します。"

msgid ""
"**Shrink (Pixels):** Higher values will shrink the generated collision "
"polygon relative to the sprite's edges."
msgstr ""
"\\ **縮小(ピクセル):** 値を大きくすると、生成されるコリジョンポリゴンがスプラ"
"イトのエッジに対して縮小されます。"

msgid ""
"**Grow (Pixels):** Higher values will grow the generated collision polygon "
"relative to the sprite's edges. Note that setting Grow and Shrink to equal "
"values may yield different results than leaving both of them on 0."
msgstr ""
"\\ **拡大(ピクセル):** 値を大きくすると、生成される衝突ポリゴンがスプライトの"
"エッジに対して拡大されます。なお、拡大と縮小を同じ値に設定すると、両方を0にし"
"た場合とは異なる結果になることがあります。"

msgid ""
"If you have an image with many small details, it's recommended to create a "
"simplified version and use it to generate the collision polygon. This can "
"result in better performance and game feel, since the player won't be "
"blocked by small, decorative details."
msgstr ""
"画像に細かいディテールが多い場合は、簡略化されたバージョンを作成し、それを"
"使ってコリジョンポリゴンを生成することをおすすめします。これにより、パフォー"
"マンスやゲームプレイの感やが向上します。これはプレイヤーが小さく装飾的なディ"
"テールに邪魔されることを防ぐためです。"

msgid ""
"To use a separate image for collision polygon generation, create another "
"Sprite2D, generate a collision polygon sibling from it then remove the "
"Sprite2D node. This way, you can exclude small details from the generated "
"collision."
msgstr ""
"コリジョンポリゴンの生成に別の画像を使用する場合、別のSprite2Dを作成し、それ"
"から衝突ポリゴンの兄弟ノードを生成して、Sprite2Dノードを削除します。この方法"
"で、生成された衝突から小さなディテールを除外することができます。"

msgid "Performance caveats"
msgstr "パフォーマンス注意点"

msgid ""
"You aren't limited to a single collision shape per PhysicsBody. Still, we "
"recommend keeping the number of shapes as low as possible to improve "
"performance, especially for dynamic objects like RigidBodies and "
"CharacterBodies. On top of that, avoid translating, rotating, or scaling "
"CollisionShapes to benefit from the physics engine's internal optimizations."
msgstr ""
"PhysicsBody につき衝突形状は1つに限定されません。それでも形状の数をできるだけ"
"少なく保つことをお勧めします。これはパフォーマンス向上のためで、特にRigidBody"
"やCharacterBodyのような動的オブジェクトでは重要です。さらに、物理エンジンの内"
"部最適化を活用するために、CollisionShape の移動、回転、スケーリングを避けるべ"
"きです。"

msgid ""
"When using a single non-transformed collision shape in a StaticBody, the "
"engine's *broad phase* algorithm can discard inactive PhysicsBodies. The "
"*narrow phase* will then only have to take into account the active bodies' "
"shapes. If a StaticBody has many collision shapes, the broad phase will "
"fail. The narrow phase, which is slower, must then perform a collision check "
"against each shape."
msgstr ""
"単一の非変形コリジョン形状を StaticBody で使用する場合、エンジンの *broad "
"phase* アルゴリズムは非アクティブな PhysicsBody を除外できます。その結果、 "
"*narrow phase* ではアクティブなボディの形状のみを考慮すればよくなります。しか"
"し、StaticBody に多くの衝突形状がある場合、broad phaseは失敗します。より遅い"
"narrow phaseがそれぞれの形状に対して衝突チェックを行うことになります。"

msgid ""
"If you run into performance issues, you may have to make tradeoffs in terms "
"of accuracy. Most games out there don't have a 100% accurate collision. They "
"find creative ways to hide it or otherwise make it unnoticeable during "
"normal gameplay."
msgstr ""
"パフォーマンスの問題に直面した場合、精度に関して妥協を行う必要があるかもしれ"
"ません。ほとんどのゲームでは、衝突判定が100%正確であることはありません。代わ"
"りにクリエイティブな方法でそれを隠したり、通常のゲームプレイ中に目立たなくさ"
"せたりしています。"
