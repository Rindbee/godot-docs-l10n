#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction"
msgstr "はじめに"

msgid "Movement and collision"
msgstr "動きと衝突"

msgid ""
"The two movement methods serve different purposes, and later in this "
"tutorial, you'll see examples of how they work."
msgstr ""
"2つの移動方法の目的は異なります。このチュートリアルの後半では、それらの動作方"
"法の例を参照します。"

msgid ""
"``KinematicCollision2D`` is an object containing data about the collision "
"and the colliding object. Using this data, you can calculate your collision "
"response."
msgstr ""
"``KinematicCollision2D`` は、衝突とコリジョンオブジェクトに関するデータを含む"
"オブジェクトです。 このデータを使用して、衝突応答を計算できます。"

msgid ""
"The ``move_and_slide()`` method is intended to simplify the collision "
"response in the common case where you want one body to slide along the "
"other. It is especially useful in platformers or top-down games, for example."
msgstr ""
"``move_and_slide()`` メソッドは、一方のボディをもう一方のボディに沿ってスライ"
"ドさせたいという一般的なケースで衝突応答を単純化することを目的としています。 "
"たとえば、プラットフォーマーやトップダウンゲームで特に役立ちます。"

msgid ""
"``floor_max_angle`` - *default value:* ``0.785398`` (in radians, equivalent "
"to ``45`` degrees)"
msgstr ""
"``floor_max_angle`` - *デフォルト値:* ``0.785398`` (ラジアンで、\\ ``45`` 度"
"に相当)"

msgid ""
"This parameter is the maximum angle before a surface is no longer considered "
"a \"floor.\""
msgstr ""
"このパラメーターは、サーフェスが「床」と見なされなくなる前の最大角度です。"

msgid "Which movement method to use?"
msgstr "使用する移動方法は？"

msgid ""
"Anything you do with ``move_and_slide()`` can also be done with "
"``move_and_collide()``, but it might take a little more code. However, as "
"we'll see in the examples below, there are cases where ``move_and_slide()`` "
"doesn't provide the response you want."
msgstr ""
"``move_and_slide()`` で行うことはすべて ``move_and_collide()`` でもできます"
"が、もう少しコードが必要になる場合があります。 ただし、以下の例で見るよう"
"に、 ``move_and_slide()`` が希望する応答を提供しない場合があります。"

msgid ""
"For example, if your character fell on the floor, you don't want it to "
"accumulate vertical speed due to the effect of gravity. Instead, you want "
"its vertical speed to reset to zero."
msgstr ""
"たとえば、キャラクターが床に落ちた場合、重力の影響により垂直速度を蓄積するこ"
"とは望ましくありません。 代わりに、垂直速度をゼロにリセットする必要がありま"
"す。"

msgid "Examples"
msgstr "例"

msgid "Movement and walls"
msgstr "動きと壁"

msgid ""
"See :ref:`doc_2d_movement` for examples of implementing 2D movement schemes."
msgstr ""
"2D移動スキームの実装例については、\\ :ref:`doc_2d_movement` を参照してくださ"
"い。"

msgid ""
"This happens because there is no *collision response*. "
"``move_and_collide()`` stops the body's movement when a collision occurs. We "
"need to code whatever response we want from the collision."
msgstr ""
"これは、\\ *collision response * がないために発生します。\\ "
"``move_and_collide()`` は衝突が発生したときに体の動きを止めます。 衝突からの"
"応答をコーディングする必要があります。"

msgid ""
"``move_and_slide()`` provides a default collision response of sliding the "
"body along the collision object. This is useful for a great many game types, "
"and may be all you need to get the behavior you want."
msgstr ""
"``move_and_slide()`` は、コリジョンオブジェクトに沿ってボディをスライドさせる"
"デフォルトの衝突応答を提供します。 これは非常に多くの種類のゲームに有用であ"
"り、必要な動作を得るために必要なものすべてである場合があります。"

msgid "Bouncing/reflecting"
msgstr "反発/反射"

msgid ""
"This example uses three scenes. The main scene contains the Player and "
"Walls. The Bullet and Wall are separate scenes so that they can be instanced."
msgstr ""
"この例では、3つのシーンを使用しています。 メインシーンには、プレイヤーと壁が"
"含まれています。 BulletとWallは別々のシーンであるため、インスタンス化できま"
"す。"

msgid ""
"The Player is controlled by the ``w`` and ``s`` keys for forward and back. "
"Aiming uses the mouse pointer. Here is the code for the Player, using "
"``move_and_slide()``:"
msgstr ""
"プレイヤーの前後移動は\\ ``w`` および ``s`` キーで制御します。 照準はマウスポ"
"インターを使用します。以下が\\ ``move_and_slide()`` を使用する プレイヤーの"
"コードです:"

msgid "And the code for the Bullet:"
msgstr "そして、弾丸のコード:"

msgid ""
"If there is a returned collision, we use the ``normal`` of the collision to "
"reflect the bullet's ``velocity`` with the ``Vector2.bounce()`` method."
msgstr ""
"返されたコリジョンがある場合、コリジョンの ``normal`` を使用して\\ ``Vector2."
"bounce()`` メソッドで弾丸の ``velocity`` を反映します。"

msgid ""
"If the colliding object (``collider``) has a ``hit`` method, we also call "
"it. In the example project, we've added a flashing color effect to the Wall "
"to demonstrate this."
msgstr ""
"衝突するオブジェクト(``collider``) に ``hit`` メソッドがある場合、それも呼び"
"出します。 サンプルプロジェクトでは、これを示すために壁に点滅する色の効果を追"
"加しました。"

msgid "Platformer movement"
msgstr "プラットフォームの動き"

msgid "Here's the code for the player body:"
msgstr "プレイヤーの本体のコードは次のとおりです:"
