#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Vector math"
msgstr "ベクトル演算"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"This tutorial is a short and practical introduction to linear algebra as it "
"applies to game development. Linear algebra is the study of vectors and "
"their uses. Vectors have many applications in both 2D and 3D development and "
"Godot uses them extensively. Developing a good understanding of vector math "
"is essential to becoming a strong game developer."
msgstr ""
"このチュートリアルは、ゲーム開発に適用される範囲内での、線形代数の短くて実践"
"的な入門書です。線形代数学は、ベクトルとその使い方の研究分野です。2Dおよび3D"
"開発の両方において、ベクトルには多くの応用法があり、Godotではそれらを広範囲で"
"利用しています。すぐれたゲーム開発者になるには、ベクトル数学の十分な理解を深"
"めることが不可欠です。"

msgid ""
"This tutorial is **not** a formal textbook on linear algebra. We will only "
"be looking at how it is applied to game development. For a broader look at "
"the mathematics, see https://www.khanacademy.org/math/linear-algebra"
msgstr ""
"このチュートリアルは、線形代数に関する正式な教科書ではありません。それがゲー"
"ム開発にどのように適用されるかだけを見ていきます。数学の詳細については、\\ "
"https://www.khanacademy.org/math/linear-algebra\\ を見てください(英語)"

msgid "Coordinate systems (2D)"
msgstr "座標系 (2D)"

msgid ""
"In 2D space, coordinates are defined using a horizontal axis (``x``) and a "
"vertical axis (``y``). A particular position in 2D space is written as a "
"pair of values such as ``(4, 3)``."
msgstr ""
"2D空間では、座標は水平軸 (``x``) と垂直軸 (``y``) を使用して定義されます。 2D"
"空間の特定の位置は、\\ ``(4, 3)``\\ などの値のペアとして書き込まれます。"

msgid ""
"If you're new to computer graphics, it might seem odd that the positive "
"``y`` axis points **downwards** instead of upwards, as you probably learned "
"in math class. However, this is common in most computer graphics "
"applications."
msgstr ""
"コンピュータグラフィックスが初めての場合、数学のクラスで学んだように、正の "
"``y`` 軸が上向きではなく **下向き** を指すのは奇妙に思えるかもしれません。た"
"だし、これはほとんどのコンピューターグラフィックアプリケーションで一般的で"
"す。"

msgid ""
"Any position in the 2D plane can be identified by a pair of numbers in this "
"way. However, we can also think of the position ``(4, 3)`` as an **offset** "
"from the ``(0, 0)`` point, or **origin**. Draw an arrow pointing from the "
"origin to the point:"
msgstr ""
"この方法で、2D平面内の任意の位置を1組の数字で識別できます。ただし、位置 "
"``(4, 3)`` は ``(0, 0)`` ポイントまたは原点からの **オフセット** と考えること"
"もできます。\\ **原点** からポイントを指す矢印を描画します:"

msgid ""
"A very important point to consider about vectors is that they only represent "
"**relative** direction and magnitude. There is no concept of a vector's "
"position. The following two vectors are identical:"
msgstr ""
"ベクトルについて考慮すべき非常に重要な点は、ベクトルが **相対的** な方向と大"
"きさのみを表すことです。ベクトルのには位置の概念はありません。次の2つのベクト"
"ルは同一です:"

msgid ""
"Both vectors represent a point 4 units to the right and 3 units below some "
"starting point. It does not matter where on the plane you draw the vector, "
"it always represents a relative direction and magnitude."
msgstr ""
"両方のベクトルは、開始点から右に4単位、下に3単位の点を表します。平面上のどこ"
"でベクトルを描くかは問題ではなく、常に相対的な方向と大きさを表します。"

msgid "Vector operations"
msgstr "ベクトル操作"

msgid ""
"You can use either method (x and y coordinates or angle and magnitude) to "
"refer to a vector, but for convenience, programmers typically use the "
"coordinate notation. For example, in Godot, the origin is the top-left "
"corner of the screen, so to place a 2D node named ``Node2D`` 400 pixels to "
"the right and 300 pixels down, use the following code:"
msgstr ""
"いずれかの方法(xおよびy座標または角度と大きさ)を使用してもベクトルを参照でき"
"ますが、プログラマーは通常、座標表記を使用します。たとえば、Godotでは、原点は"
"画面の左上隅であるため、\\ ``Node2D`` という名前の2Dノードを右に400ピクセル、"
"下に300ピクセル配置するには、次のコードを使用します:"

msgid "Member access"
msgstr "メンバアクセス"

msgid ""
"The individual components of the vector can be accessed directly by name."
msgstr "ベクトルの個々のコンポーネントには、名前で直接アクセスできます。"

msgid "Adding vectors"
msgstr "ベクトルの加算"

msgid ""
"When adding or subtracting two vectors, the corresponding components are "
"added:"
msgstr ""
"2つのベクトルを加算または減算すると、対応するコンポーネントが追加されます:"

msgid ""
"We can also see this visually by adding the second vector at the end of the "
"first:"
msgstr ""
"また、最初のベクトルの終点に2番目のベクトルを追加することで、これを視覚的に確"
"認できます:"

msgid "Note that adding ``a + b`` gives the same result as ``b + a``."
msgstr "``a + b`` は、\\ ``b + a`` と同じ結果になることに注意してください。"

msgid "Scalar multiplication"
msgstr "スカラー乗算"

msgid "A vector can be multiplied by a **scalar**:"
msgstr "ベクトルには **スカラー** を掛けることができます:"

msgid "Practical applications"
msgstr "実際の応用"

msgid "Let's look at two common uses for vector addition and subtraction."
msgstr "ベクトルの加算と減算の2つの一般的な使用方法を見てみましょう。"

msgid "Movement"
msgstr "移動"

msgid "Pointing toward a target"
msgstr "ターゲットへ向く"

msgid ""
"In this scenario, you have a tank that wishes to point its turret at a "
"robot. Subtracting the tank's position from the robot's position gives the "
"vector pointing from the tank to the robot."
msgstr ""
"このシナリオでは、砲塔をロボットに向けたい戦車があります。ロボットの位置から"
"タンクの位置を引くと、タンクからロボットを指すベクトルが得られます。"

msgid "Unit vectors"
msgstr "単位ベクトル"

msgid ""
"A vector with **magnitude** of ``1`` is called a **unit vector**. They are "
"also sometimes referred to as **direction vectors** or **normals**. Unit "
"vectors are helpful when you need to keep track of a direction."
msgstr ""
"大きさが1のベクトルを、\\ **単位ベクトル**\\ と呼びます。また、\\ **方向ベク"
"トル**\\ または\\ **法線**\\ と呼ばれることもあります。単位ベクトルは、方向を"
"追跡する必要がある場合に役立ちます。"

msgid "Normalization"
msgstr "正規化"

msgid "Reflection"
msgstr "反射"

msgid ""
"A common use of unit vectors is to indicate **normals**. Normal vectors are "
"unit vectors aligned perpendicularly to a surface, defining its direction. "
"They are commonly used for lighting, collisions, and other operations "
"involving surfaces."
msgstr ""
"単位ベクトルの一般的な用途は、\\ **法線**\\ を示すことです。法線ベクトルは、"
"面の表面に垂直に配置され、その方向を定義する単位ベクトルです。これらは一般"
"に、照明、衝突、およびサーフェスに関連する他の操作に使用されます。"

msgid ""
"For example, imagine we have a moving ball that we want to bounce off a wall "
"or other object:"
msgstr ""
"例として、動いているボールを想像してみましょう。壁や他の物体に当たったら跳ね"
"返ってほしいですね:"

msgid "Dot product"
msgstr "内積 (ドット積)"

msgid ""
"The **dot product** is one of the most important concepts in vector math, "
"but is often misunderstood. Dot product is an operation on two vectors that "
"returns a **scalar**. Unlike a vector, which contains both magnitude and "
"direction, a scalar value has only magnitude."
msgstr ""
"\\ **内積**\\ は、ベクトル数学の最も重要な概念の1つですが、誤解されることがよ"
"くあります。内積は、2つのベクトルを演算して\\ **スカラー**\\ を返します。大き"
"さと方向の両方を含むベクトルとは異なり、スカラーは大きさのみを持ちます。"

msgid "The formula for dot product takes two common forms:"
msgstr "内積の式には、2つの一般的な形式があります:"

msgid "and"
msgstr "そして"

msgid ""
"When using unit vectors, the result will always be between ``-1`` (180°) and "
"``1`` (0°)."
msgstr ""
"単位ベクトルを利用すると結果は ``-1`` (180°)から ``1`` (0°)になります。"

msgid "Facing"
msgstr "正面"

msgid ""
"We can use this fact to detect whether an object is facing toward another "
"object. In the diagram below, the player ``P`` is trying to avoid the "
"zombies ``A`` and ``B``. Assuming a zombie's field of view is **180°**, can "
"they see the player?"
msgstr ""
"これを利用して、オブジェクトが別のオブジェクトに向いているかどうかを検出でき"
"ます。下の図では、プレイヤー ``P`` はゾンビ ``A`` と ``B`` を避けようとしてい"
"ます。ゾンビの視界が **180度** であると仮定すると、ゾンビはプレイヤーを見るこ"
"とができるでしょうか？"

msgid "In code it would look like this:"
msgstr "コードでは次のように表せます:"

msgid "Cross product"
msgstr "外積 (クロス積)"

msgid ""
"Like the dot product, the **cross product** is an operation on two vectors. "
"However, the result of the cross product is a vector with a direction that "
"is perpendicular to both. Its magnitude depends on their relative angle. If "
"two vectors are parallel, the result of their cross product will be a null "
"vector."
msgstr ""
"内積と同様に、\\ **外積**\\ は2つのベクトルの演算です。ただし、外積の結果は、"
"両方に垂直な方向を持つベクトルです。その大きさは、相対的な角度に依存します。 "
"2つのベクトルが平行である場合、それらの外積の結果はヌルベクトルになります。"

msgid "The cross product is calculated like this:"
msgstr "外積は以下のように求めます:"

msgid ""
"In the cross product, order matters. ``a.cross(b)`` does not give the same "
"result as ``b.cross(a)``. The resulting vectors point in **opposite** "
"directions."
msgstr ""
"外積では、順序が重要です。\\ ``a.cross(b)``\\ は\\ ``b.cross(a)``\\ と同じ結"
"果にはなりません。結果のベクトルは\\ **反対方向**\\ を指します。"

msgid "Calculating normals"
msgstr "法線の計算"

msgid "Here is a function to calculate a triangle's normal:"
msgstr "三角形の法線を計算する関数は以下のとおりです:"

msgid "Pointing to a target"
msgstr "ターゲットへの方向"

msgid ""
"In the dot product section above, we saw how it could be used to find the "
"angle between two vectors. However, in 3D, this is not enough information. "
"We also need to know what axis to rotate around. We can find that by "
"calculating the cross product of the current facing direction and the target "
"direction. The resulting perpendicular vector is the axis of rotation."
msgstr ""
"上記の内積セクションでは、2つのベクトル間の角度を見つけるためにそれをどのよう"
"に使用できるかを見ました。ただし、3Dでは、これは十分な情報ではありません。さ"
"らに、どの軸を中心に回転するかを知る必要があります。これは、現在の向きとター"
"ゲットの方向の外積を計算することでわかります。結果の垂直ベクトルが回転の軸で"
"す。"

msgid "More information"
msgstr "より多くの情報"

msgid ""
"For more information on using vector math in Godot, see the following "
"articles:"
msgstr ""
"Godotでのベクトル演算の使用の詳細については、次の記事を参照してください:"

msgid ":ref:`doc_vectors_advanced`"
msgstr ":ref:`doc_vectors_advanced`"

msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"

msgid "Translation status"
msgstr "翻訳ステータス"
