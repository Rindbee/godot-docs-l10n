#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "The Profiler"
msgstr "プロファイラー"

msgid ""
"You run your game from Godot and play around. It's fun, it's becoming "
"feature complete, and you feel it's getting close to release."
msgstr ""
"Godotからゲームを実行してプレイしてみましょう。楽しくて、機能が完成しつつあ"
"り、リリースが近づいていると感じます。"

msgid ""
"But then, you open the skill tree, and it grinds to a halt as something "
"snags in your code. Watching the skill tree scroll by like it's a slide show "
"is unacceptable. What went wrong? Is it positioning the skill tree elements, "
"the UI, or rendering?"
msgstr ""
"しかしその後、スキルツリーを開くとコードに何かが引っかかり、スキルツリーが停"
"止してしまいます。スキルツリーがスライドショーのようにスクロールするのは受け"
"入れられません。何が悪かったのでしょう？ スキルツリー要素の位置？ UI？ それと"
"もレンダリング？"

msgid ""
"You could try to optimize everything and run the game repeatedly, but you "
"can be smarter about this and narrow down the possibilities. Enter Godot's "
"profiler."
msgstr ""
"すべてを最適化してゲームを繰り返し実行することもできますが、重い箇所の可能性"
"を絞り込んでいくほうが賢いです。 そのためにGodotのプロファイラーを使用しま"
"す。"

msgid "An overview of the profiler"
msgstr "プロファイラーの概要"

msgid ""
"You can open the profiler by opening the **Debugger** panel and clicking on "
"the **Profiler** tab."
msgstr ""
"プロファイラーを開くには、**デバッガー** パネルを開いて、**プロファイラー** "
"タブをクリックします。"

msgid ""
"Godot's profiler does not automatically run because profiling is performance-"
"intensive. It has to continually measure everything happening in the game "
"and report back to the debugger, so it's off by default."
msgstr ""
"プロファイリングはパフォーマンスを重視するため、Godotのプロファイラは自動的に"
"は実行されません。ゲーム内で起こっているすべての事象を継続的に測定し、デバッ"
"ガーに報告する必要があるため、デフォルトではオフになっています。"

msgid ""
"The profiler does not currently support C# scripts. C# scripts can be "
"profiled using JetBrains Rider and JetBrains dotTrace with the Godot support "
"plugin."
msgstr ""
"プロファイラーは現在、C#スクリプトをサポートしていません。 C#スクリプトは"
"Godotサポートプラグインを備えた JetBrains Rider および JetBrains dotTrace を"
"使用してプロファイリングできます。"

msgid ""
"You can clear the data by clicking the **Clear** button anytime. Use the "
"**Measure** drop-down menu to change the type of data you measure. The "
"measurements panel and the graph will update accordingly."
msgstr ""
"**クリア** ボタンをクリックすると、いつでもデータをクリアできます。 **測定** "
"ドロップダウンメニューを使用して、測定するデータの種類を変更します。それに応"
"じて測定パネルとグラフが更新されます。"

msgid "The measured data"
msgstr "測定データ"

msgid ""
"The profiler's interface is split into two. There is a list of functions on "
"the left and the performance graph on the right."
msgstr ""
"プロファイラーのインターフェースは2つに分かれています。左側に機能のリスト、右"
"側にパフォーマンスのグラフがあります。"

msgid ""
"The main measurements are frame time, physics frame, idle time, and physics "
"time."
msgstr "主な測定値は、フレーム時間、物理フレーム、待機時間、物理時間です。"

msgid ""
"The **frame time** is the time it takes Godot to execute all the logic for "
"an entire image, from physics to rendering."
msgstr ""
"**Frame Time** は物理からレンダリングまで、画像全体のすべてのロジックをGodot"
"が実行するのにかかる時間です。"

msgid ""
"**Physics frame** is the time Godot has allocated between physics updates. "
"In an ideal scenario, the frame time is whatever you chose: 16.66 "
"milliseconds by default, which corresponds to 60FPS. It's a frame of "
"reference you can use for everything else around it."
msgstr ""
"**Physics Frame Time** はGodotが物理更新の間に割り当てた時間です。理想的なシ"
"ナリオではフレーム時間は選択したものになります。デフォルトでは 16.66 ミリ秒"
"で、これは 60FPS に相当します。これは周囲のあらゆるものに使用できる参照フレー"
"ムです。"

msgid ""
"**Idle time** is the time Godot took to update logic other than physics, "
"such as code that lives in `_process` or timers and cameras set to update on "
"**Idle**."
msgstr ""
"**Process time** はGodot が物理以外のロジック (_process 内に存在するコード"
"や、**アイドル時**に更新するように設定されたタイマーやカメラなど) を更新する"
"のにかかった時間です。"

msgid ""
"**Physics time** is the time Godot took to update physics tasks, like "
"`_physics_process` and built-in nodes set to **Physics** update."
msgstr ""
"**Physics Time** はGodot が `_physics_process` や組み込みノードなどの**物理**"
"タスクを更新するのにかかった時間です。"

msgid ""
"**Frame Time** includes rendering time. Say you find a mysterious spike of "
"lag in your game, but your physics and scripts are all running fast. The "
"delay could be due to the appearance of particles or visual effects!"
msgstr ""
"**Frame Time**にはレンダリング時間が含まれます。ゲーム内で謎のラグの急増を見"
"つけたものの、物理演算とスクリプトはすべて高速に実行されているとするとき、遅"
"延はパーティクルの出現または視覚効果が原因である可能性があります！"

msgid ""
"By default, Godot ticks on Frame Time and Physics Time. This gives you an "
"overview of how long each frame takes relative to the allocated desired "
"physics FPS. You can toggle functions on and off by clicking the checkboxes "
"on the left. Other facilities make appearances as you go down the list, like "
"Physics 2D, Physics, and Audio, before reaching Script functions, where your "
"code appears."
msgstr ""
"デフォルトではGodotはフレーム時間と物理時間をチェックします。これにより設定さ"
"れた物理FPSと比較して各フレームにかかる時間の概要が得られます。左側のチェック"
"ボックスをクリックすると、機能のオンとオフを切り替えることができます。リスト"
"の下に進むとコードが表示されるスクリプト関数に到達する前に、Physics 2D、"
"Physics 3D、Audioなどの他の機能も表示されます。"

msgid ""
"If you click on the graph, you change which frame's information appears on "
"the left. In the top right, there is also a frame counter where you can "
"manually adjust the frame you are looking at more granularly."
msgstr ""
"グラフをクリックすると、左側に表示されるフレームの情報が変わります。右上には"
"表示しているフレームをより細かく手動で調整できるフレームカウンターもありま"
"す。"

msgid "Scope of measurement and measurement windows"
msgstr "測定範囲と測定ウィンドウ"

msgid ""
"You can change what measurement you are looking at using the **Measure** "
"drop-down menu. By default, it starts with Frame Time and lists the time it "
"takes to go through the frame in milliseconds. The average time is the "
"average time any given function took when called more than once. For "
"example, a function that took 0.05 milliseconds to run five times should "
"give you an average of 0.01 milliseconds."
msgstr ""
"**測定** のドロップダウンメニューを開くと、表示する測定値の種類を変更できま"
"す。デフォルトではフレームを通過するのにかかる時間をミリ秒単位でリストしま"
"す。平均時間は特定の関数が複数回呼び出されたときにかかった平均時間です。たと"
"えば、5回の実行に 0.05 ミリ秒かかった関数の平均時間は 0.01 ミリ秒になります。"

msgid ""
"If accurate milliseconds count is not important, and you want to see "
"proportions of time relative to the rest of the frame, use percentage "
"measurements. Frame % is relative to Frame Time, and Physics % is relative "
"to Physics Time."
msgstr ""
"正確なミリ秒数が重要ではなく、フレームの残りの部分に対する時間の割合を確認し"
"たい場合は、パーセンテージ測定を使用します。 フレーム%はフレーム時間に相対"
"し、物理フレーム%は物理時間に相対します。"

msgid ""
"The last option is the scope of the time. **Inclusive** measures the time a "
"function took **with** any nested function calls. For example:"
msgstr ""
"最後のオプションは時間の範囲です。 **包括**はネストされた関数呼び出しを含む関"
"数にかかった時間を測定します。例えば："

msgid ""
"`get_neighbors`, `find_nearest_neighbor` and `move_subject` all took a lot "
"of time. You could be fooled into thinking that this is because all three of "
"them are slow."
msgstr ""
"`get_neighbors` 、 `find_nearest_neighbor` 、 `move_subject` はすべて時間がか"
"かりました。これは3つすべてが遅いためだと思われる可能性があります。"

msgid ""
"But when changed to **Self**, Godot measures the time spent in the function "
"body without considering function calls it made itself."
msgstr ""
"ただし **自己** に変更すると、Godotは関数呼び出しの関係を考慮せずに、その関数"
"本体で費やした時間を測定します。"

msgid ""
"You can see that `get_neighbors` and `move_subject` have lost a lot of their "
"importance. In effect, that means that `get_neighbors` and `move_subject` "
"have spent more time waiting for some other function call to finish than "
"not, and `find_nearest_neighbor` is **actually** slow."
msgstr ""
"`get_neighbors` と `move_subject` のパーセントが大幅に減っていることがわかり"
"ます。実際にはこれは `get_neighbors` と `move_subject` が他の関数呼び出しが終"
"了するまでの待機時間よりも待機時間の方が長く、 `find_nearest_neighbor` が**実"
"際** のところ一番遅いことを意味します。"

msgid "Debugging slow code with the profiler"
msgstr "プロファイラーを使用した遅いコードのデバッグ"

msgid ""
"Finding slow code with the profiler boils down to running your game and "
"watching the performance graph as it draws. When an unacceptable spike "
"occurs in the frame time, you can click on the graph to pause your game and "
"narrow the _Frame #_ to the spike's start. You may need to jump back and "
"forth between frames and functions to find the root cause."
msgstr ""
"プロファイラーを使用して遅いコードを見つけるには、結局のところゲームを実行"
"し、描画されるパフォーマンス グラフを観察することになります。フレーム時間内に"
"許容できないスパイクが発生した場合は、グラフをクリックしてゲームを一時停止"
"し、 \"フレーム #\" をスパイクの開始位置まで絞り込むことができます。根本原因"
"を見つけるにはフレームと関数の間を行ったり来たりする必要がある場合がありま"
"す。"

msgid ""
"Under the Script functions, turn on the checkboxes for some functions to "
"find which take time. These are the functions you need to review and "
"optimize."
msgstr ""
"時間がかかる関数を見つけるためには、 Script Functionsの下のいくつかの関数の"
"チェックボックスをオンにします。これを使用してレビュー、最適化する必要がある"
"関数を見つけます。"

msgid "Measuring manually in microseconds"
msgstr "手動で測定する (マイクロ秒単位)"

msgid ""
"If your function is complex, it could be challenging to figure out which "
"part needs optimization. Is it your math or the way you access other pieces "
"of data to do the math with? Is it the `for` loop? The `if` statements?"
msgstr ""
"関数が複雑な場合、どの部分を最適化する必要があるかを把握するのが困難になる可"
"能性があります。ボトルネックになっているところは計算処理自体なのか、計算を行"
"うために他のデータにアクセスしているところなのか、 `for` ループなのか、 `if` "
"条件式なのか？"

msgid ""
"You can narrow down the measurement by manually counting ticks as the code "
"runs with some temporary functions. The two functions are part of the `Time` "
"class object. They are `get_ticks_msec` and `get_ticks_usec`. The first "
"measures in milliseconds (1,000 per second), and the second measures in "
"microseconds (1,000,000 per second)."
msgstr ""
"コードがいくつかの一時的な関数で実行されるとき、手動でティックをカウントする"
"ことで負荷の高い場所を絞り込むことができます。2つの関数は `Time` クラス オブ"
"ジェクトの一部です。それは `get_ticks_msec` と `get_ticks_usec` です。前者は"
"ミリ秒 (1秒あたり 1,000) 単位で測定され、後者はマイクロ秒 (1 秒あたり "
"1,000,000) 単位で測定されます。"

msgid ""
"Either one returns the amount of time since the game engine started in their "
"respective time frame."
msgstr ""
"どちらもそれぞれの時間枠でゲーム エンジンが開始されてからの時間を返します。"

msgid ""
"If you wrap a piece of code with a start and end count of microseconds, the "
"difference between the two is the amount of time it took to run that piece "
"of code."
msgstr ""
"マイクロ秒の開始カウントと終了カウントを使用してコード部分を囲む場合、2つの違"
"いはそのコード部分の実行にかかった時間になります。"

msgid ""
"As you become a more experienced programmer, this technique becomes less "
"necessary. You begin to learn what parts of a running program are slow. "
"Knowing that loops and branches can be slow comes from experience, and you "
"gain experience by measuring and doing research."
msgstr ""
"経験豊富なプログラマになると、このテクニックは必要なくなります。実行中のプロ"
"グラムのどの部分が遅いのかがわかり始めます。ループや分岐が遅くなる可能性があ"
"ることは経験から得られるものであり、測定や調査を行うことで経験を積みます。"

msgid ""
"But between the profiler and the ticks functions, you should have enough to "
"get started finding which parts of your code need optimization."
msgstr ""
"ただしプロファイラーとティック関数の間には、コードのどの部分を最適化する必要"
"があるかを見つけるのに十分な情報が必要です。"
