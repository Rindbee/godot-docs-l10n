#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# basics"
msgstr "C# の基本"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>`, and "
"(re)visit the :ref:`Scripting section <doc_scripting>` of the step-by-step "
"tutorial."
msgstr ""
"このページでは、C# の概要と、Godot での使用方法について簡単に説明します。その"
"後 :ref:`特定の機能の使用方法 <doc_c_sharp_features>` を参照したり、 :ref:"
"`C# と GDScript API の違い <doc_c_sharp_differences>` について読んだり、ス"
"テップバイステップのチュートリアルの :ref:`スクリプト セクション "
"<doc_scripting>` を (再度) 参照したりすることをお勧めします。"

msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with .NET 6.0."
msgstr ""
"C# は Microsoft が開発した高水準プログラミング言語です。Godot では .NET 6.0 "
"を使用して実装されています。"

msgid ""
"Projects written in C# using Godot 4 currently cannot be exported to the web "
"platform. To use C# on the web platform, consider Godot 3 instead. Android "
"and iOS platform support is available as of Godot 4.2, but is experimental "
"and :ref:`some limitations apply <doc_c_sharp_platforms>`."
msgstr ""
"Godot 4 を使用して C# で記述されたプロジェクトは、現在 Web プラットフォームに"
"エクスポートできません。Web プラットフォームで C# を使用する場合は、代わりに "
"Godot 3 の使用を検討してください。Android および iOS プラットフォームのサポー"
"トは Godot 4.2 以降で利用可能ですが、実験段階であり :ref:`いくつかの制限が適"
"用されます <doc_c_sharp_platforms>` 。"

msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"これはC#言語全体に関する本格的なチュートリアルでは\\ **ありません**\\ 。まだ"
"その構文や機能に慣れていなければ、\\ `Microsoft C#ガイド <https://docs."
"microsoft.com/ja-jp/dotnet/csharp/index>`_\\ や他の適切な入門書を参照してくだ"
"さい。"

msgid "Prerequisites"
msgstr "前提条件"

msgid ""
"Godot bundles the parts of .NET needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, and need to be installed separately."
msgstr ""
"Godot には既にコンパイルされたゲームを実行するために必要な .NET の部分がバン"
"ドルされています。ただしGodot には、MSBuild や C# コンパイラなど、ゲームのビ"
"ルドとコンパイルに必要なツールはバンドルされていません。これらは .NET SDK に"
"含まれており、別途インストールする必要があります。"

msgid ""
"In summary, you must have installed the .NET SDK **and** the .NET-enabled "
"version of Godot."
msgstr ""
"要約すると、.NET SDK **および** .NET 対応バージョンの Godot をインストールし"
"ておく必要があります。"

msgid ""
"Download and install the latest stable version of the SDK from the `.NET "
"download page <https://dotnet.microsoft.com/download>`__."
msgstr ""
"`.NET ダウンロードページ <https://dotnet.microsoft.com/download>`__ から SDK "
"の最新の安定バージョンをダウンロードしてインストールします。"

msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr ""
"Godot の64ビット バージョンを使用している場合は、必ず SDK の64ビット バージョ"
"ンをインストールしてください。"

msgid ""
"If you are building Godot from source, make sure to follow the steps to "
"enable .NET support in your build as outlined in the :ref:"
"`doc_compiling_with_dotnet` page."
msgstr ""
"Godot をソースからビルドする場合は、 :ref:`doc_compiling_with_dotnet` ページ"
"で説明されている手順に従って、ビルドで .NET サポートを有効にしてください。"

msgid "Configuring an external editor"
msgstr "外部エディタの設定"

msgid ""
"C# support in Godot's built-in script editor is minimal. Consider using an "
"external IDE or editor, such as  `Visual Studio Code <https://code."
"visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, "
"debugging, and other useful features for C#. To select an external editor in "
"Godot, click on **Editor → Editor Settings** and scroll down to **Dotnet**. "
"Under **Dotnet**, click on **Editor**, and select your external editor of "
"choice. Godot currently supports the following external editors:"
msgstr ""
"Godot の組み込みスクリプト エディタでの C# のサポートは最小限です。`Visual "
"Studio Code <https://code.visualstudio.com/>`__ や MonoDevelop などの外部 "
"IDE またはエディターの使用を検討してください。これらは C# の自動補完、デバッ"
"グ、およびその他の便利な機能を提供します。Godot で外部エディタを選択するに"
"は、**[エディター] → [エディター設定]** をクリックし、**[.NET]** までスクロー"
"ルします。**[.NET]** の下で、**[エディター]** をクリックし、External Editorを"
"選択します。Godot は現在、次の外部エディタをサポートしています。"

msgid "Visual Studio 2022"
msgstr "\\ Visual Studio 2022"

msgid "Visual Studio Code"
msgstr "\\ Visual Studio Code"

msgid "MonoDevelop"
msgstr "\\ MonoDevelop"

msgid "Visual Studio for Mac"
msgstr "\\ Visual Studio for Mac"

msgid "JetBrains Rider"
msgstr "\\ JetBrains Rider"

msgid "See the following sections for how to configure an external editor:"
msgstr ""
"外部エディターを構成する方法については、次のセクションを参照してください。"

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""
"「前提条件」セクションを読んだ後、`JetBrains Rider <https://www.jetbrains."
"com/rider/download>`__ をダウンロードしてインストールできます。"

msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr "Godot の **エディター → エディター設定** メニューで:"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr ""
"**.NET** -> **エディター** -> **External Editor** を **JetBrains Rider** に設"
"定します。"

msgid "In Rider:"
msgstr "Riderでは:"

msgid "Set **MSBuild version** to **.NET Core**."
msgstr "**MSBuild version** を **.NET Core** に設定します。"

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""
"「前提条件」セクションを読んだ後、`Visual Studio Code <https://code."
"visualstudio.com/download>`__ (別名 VS Code) をダウンロードしてインストールで"
"きます。"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio "
"Code**."
msgstr ""
"**.NET** -> **エディター** -> **External Editor** を **Visual Studio Code** "
"に設定します。"

msgid "In Visual Studio Code:"
msgstr "Visual Studio Codeでは:"

msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""
"`C# <https://marketplace.visualstudio.com/items?itemName=ms-dotnettools."
"csharp>`__ 拡張機能をインストールします。"

msgid ""
"To configure a project for debugging, you need a ``tasks.json`` and ``launch."
"json`` file in the ``.vscode`` folder with the necessary configuration."
msgstr ""
"プロジェクトのデバッグ実行を行うには、必要な構成を含む ``.vscode`` フォルダー"
"に ``tasks.json`` ファイルと ``launch.json`` ファイルが必要です。"

msgid "Here is an example ``launch.json``:"
msgstr "``launch.json`` の例を次に示します。"

msgid ""
"For this launch configuration to work, you need to either setup a GODOT4 "
"environment variable that points to the Godot executable, or replace "
"``program`` parameter with the path to the Godot executable."
msgstr ""
"この起動構成を機能させるには、Godot 実行可能ファイルを指す GODOT4 環境変数を"
"設定するか、 ``program`` パラメータを Godot 実行可能ファイルへのパスに置き換"
"える必要があります。"

msgid "Here is an example ``tasks.json``:"
msgstr "``tasks.json`` の例を次に示します。"

msgid ""
"Now, when you start the debugger in Visual Studio Code, your Godot project "
"will run."
msgstr ""
"これで、Visual Studio Code でデバッグを開始すると、Godot プロジェクトが実行さ"
"れます。"

msgid "Visual Studio (Windows only)"
msgstr "Visual Studio (Windows のみ)"

msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""
"最新バージョンの `Visual Studio <https://visualstudio.microsoft.com/"
"downloads/>`__ をダウンロードしてインストールします。正しいワークロードを選択"
"した場合、Visual Studio には必要な SDK が含まれるため、「前提条件」セクション"
"に記載されているものを手動でインストールする必要はありません。"

msgid "While installing Visual Studio, select this workload:"
msgstr "Visual Studio のインストール時に、次のワークロードを選択します。"

msgid ".NET desktop development"
msgstr ".NET デスクトップ開発"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr ""
"**.NET** -> **エディター** -> **External Editor** を **Visual Studio** に設定"
"します。"

msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""
"「パッケージ Godot.NET.Sdk が見つかりません」のようなエラーが表示される場合"
"は、NuGet の構成が正しくない可能性があり、修正する必要があります。"

msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""
"NuGet 構成ファイルを修正する簡単な方法は、それを再生成することです。ファイル"
"エクスプローラーウィンドウで、``%AppData%\\NuGet`` に移動します。``NuGet."
"Config`` ファイルの名前を変更するか削除します。Godot プロジェクトを再度ビルド"
"すると、ファイルはデフォルト値で自動的に作成されます。"

msgid ""
"To debug your C# scripts using Visual Studio, open the .sln file that is "
"generated after opening the first C# script in the editor. In the **Debug** "
"menu, go to the **Debug Properties** menu item for your project. Click the "
"**Create a new profile** button and choose **Executable**. In the "
"**Executable** field, browse to the path of the C# version of the Godot "
"editor, or type ``%GODOT4%`` if you have created an environment variable for "
"the Godot executable path. It must be the path to the main Godot executable, "
"not the 'console' version. For the **Working Directory**, type a single "
"period, ``.``, meaning the current directory. Also check the **Enable native "
"code debugging** checkbox. You may now close this window, click downward "
"arrow on the debug profile dropdown, and select your new launch profile. Hit "
"the green start button, and your game will begin playing in debug mode."
msgstr ""
"Visual Studio を使用して C# スクリプトをデバッグするには、エディターで最初の "
"C# スクリプトを開いた後に生成される .sln ファイルを開きます。**デバッグ** メ"
"ニューで、プロジェクトの **デバッグ プロパティ** メニュー項目に移動します。**"
"新しいプロファイルの作成** ボタンをクリックし、**実行可能ファイル** を選択し"
"ます。**実行可能ファイル** フィールドで、C# バージョンの Godot エディターのパ"
"スを参照するか、Godot 実行可能ファイル パスの環境変数を作成している場合は "
"``%GODOT4%`` と入力します。これは、\"コンソール\"バージョンではなく、メイン"
"の Godot 実行可能ファイルへのパスである必要があります。**作業ディレクトリ** "
"には、現在のディレクトリを意味する単一のピリオド ``.`` を入力します。**ネイ"
"ティブコードのデバッグを有効にする** チェックボックスもオンにします。これでこ"
"のウィンドウを閉じて、デバッグ プロファイル ドロップダウンの下矢印をクリック"
"し、新しい起動プロファイルを選択できます。緑の開始ボタンを押すと、ゲームがデ"
"バッグモードで実行されます。"

msgid "Creating a C# script"
msgstr "C#スクリプトの作成"

msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"Godot用にC#を正常にセットアップした後、シーン内のノードのコンテキストメニュー"
"で ``Attach Script`` を選択すると、次のオプションが表示されます:"

msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some documentation "
"pages still lack C# examples, most notions can be transferred from GDScript."
msgstr ""
"スクリプトに C# を使用する場合、一部の細かい仕様は変わりますが、ほとんどのコ"
"ンセプトは同じように機能します。Godot を初めて使用する場合は、この時点で :"
"ref:`doc_scripting` のチュートリアルに従うことをお勧めします。一部のドキュメ"
"ントページには C# のサンプルがまだありませんが、ほとんどのコードはGDScriptか"
"ら簡単に移行できます。"

msgid "Project setup and workflow"
msgstr "プロジェクトの設定とワークフロー"

msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.godot/mono``). All of these but ``.godot/mono`` are important and should "
"be committed to your version control system. Everything under ``.godot`` can "
"be safely added to the ignore list of your VCS. When troubleshooting, it can "
"sometimes help to delete the ``.godot/mono`` folder and let it regenerate."
msgstr ""
"最初のC#スクリプトを作成すると、GodotはGodotプロジェクトのC#プロジェクトファ"
"イルを初期化します。これには C#ソリューション(``.sln``)とプロジェクトファイル"
"(``.csproj``)の生成、およびいくつかのユーティリティ ファイルとフォルダー (``."
"godot/mono``) の生成が含まれます。 ``.godot/mono`` 以外のこれらはすべて重要な"
"ので、バージョン管理システムにコミットする必要があります。 ``.godot`` の下に"
"あるものはすべて、バージョン管理の無視リストに安全に追加できます。トラブル"
"シューティングを行うときは、 ``.godot/mono`` フォルダーを削除して再生成すると"
"改善する場合があります。"

msgid "Example"
msgstr "サンプル"

msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "以下に、空白のC#スクリプトと、その動作を示すコメントを示します。"

msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` static class which is part of "
"the ``Godot`` namespace. For a full list of methods in the ``GD`` class, see "
"the class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"ご覧のとおり、Godot の ``print`` 関数のように、GDScript では通常グローバル ス"
"コープにある関数は、``Godot`` 名前空間の一部である ``GD`` 静的クラスで使用で"
"きます。 ``GD`` クラスのメソッドの完全なリストについては、 :ref:`@GDScript "
"<class_@gdscript>` および :ref:`@GlobalScope <class_@globalscope>` のクラス参"
"照ページを参照してください。"

msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error:"
msgstr ""
"ノードにアタッチするクラスは ``.cs`` ファイルと同じ名前でなければならないこと"
"に注意してください。そうしないと、次のようなエラーが発生します:"

msgid "*\"Cannot find class XXX for script res://XXX.cs\"*"
msgstr "*\"スクリプト res://XXX.cs のクラス XXX が見つかりません\"*"

msgid "General differences between C# and GDScript"
msgstr "C#とGDScriptの一般的な違い"

msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"C# APIはGDScript/C++の ``snake_case`` の代わりに ``PascalCase`` を使います。 "
"可能であれば、フィールドとゲッター/セッターはプロパティに変換されています。一"
"般的に、C# Godot APIは合理的に可能な限り慣用的であるように努めています。"

msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr ""
"詳細については、\\ :ref:`doc_c_sharp_differences` ページを参照してください。"

msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the **Build** button in the top right corner of the "
"editor."
msgstr ""
"C#スクリプトから新しくエクスポートされた変数やシグナルをエディターで表示する"
"には、プロジェクトアセンブリをリビルドする必要があります。このビルドはエディ"
"ターの右上隅にある [**ビルド**] ボタンをクリックすることで手動でトリガーでき"
"ます。"

msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr ""
"また「ツール」スクリプトの変更を適用するためにも、プロジェクトアセンブリをリ"
"ビルドする必要があります。"

msgid "Current gotchas and known issues"
msgstr "現在の課題と既知の問題"

msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for .NET issues <https://github.com/"
"godotengine/godot/labels/topic%3Adotnet>`_."
msgstr ""
"GodotでのC#のサポートは非常に新しいため、いくつかの苦労や解決すべき問題があり"
"ます。以下は Godot で C# を使用する際に注意したほうがいい重要なリストですが、"
"疑問がある場合は、公式の `.NET の問題管理システム <https://github.com/"
"godotengine/godot/labels/topic%3Adotnet>`_ も併せて確認してください。"

msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr "エディタプラグインの作成は可能ですが、現在は非常に複雑です。"

msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr ""
"現在、エクスポートされた変数を除き、状態(State)は保存およびホットリロード時に"
"復元されません。"

msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr ""
"アタッチされた C#スクリプトは、ファイル名と一致するクラス名を持つクラスを参照"
"する必要があります。"

msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation. Prefer "
"using the exposed ``StringName`` in the ``PropertyName``, ``MethodName`` and "
"``SignalName`` to avoid extra ``StringName`` allocations and worrying about "
"snake_case naming."
msgstr ""
"Godot の ``snake_case`` API 命名規則に依存する ``Get()``/``Set()`` 、\\ "
"``Call()``/``CallDeferred()`` 及びシグナル接続メソッド ``Connect()`` などのメ"
"ソッドがあります。したがって、例えば ``CallDeferred(\"AddChild\")`` を使用す"
"る場合、API は元の ``snake_case`` バージョンの ``add_child`` を想定しているた"
"め、 ``AddChild`` は機能しません。ただし、この制限なしに任意のカスタム プロパ"
"ティまたはメソッドを使用できます。余分な ``StringName`` 割り当てを回避し、"
"snake_case 命名を気にせず、 ``PropertyName`` 、 ``MethodName`` 、および "
"``SignalName`` で公開されている ``StringName`` を使用することをお勧めします。"

msgid ""
"As of Godot 4.0, exporting .NET projects is supported for desktop platforms "
"(Linux, Windows and macOS). Other platforms will gain support in future 4.x "
"releases."
msgstr ""
"Godot 4.0 以降、.NET プロジェクトのエクスポートはデスクトッププラットフォー"
"ム (Linux、Windows、macOS) でサポートされています。他のプラットフォームは、今"
"後の 4.x リリースでサポートされる予定です。"

msgid "Common pitfalls"
msgstr "よくある落とし穴"

msgid ""
"You might encounter the following error when trying to modify some values in "
"Godot objects, e.g. when trying to change the X coordinate of a ``Node2D``:"
msgstr ""
"Godot オブジェクトの値を変更しようとしたとき。たとえば ``Node2D`` の X 座標を"
"変更しようとすると、次のエラーが発生する場合があります。"

msgid ""
"This is perfectly normal. Structs (in this example, a ``Vector2``) in C# are "
"copied on assignment, meaning that when you retrieve such an object from a "
"property or an indexer, you get a copy of it, not the object itself. "
"Modifying said copy without reassigning it afterwards won't achieve anything."
msgstr ""
"これはまったく正常です。C# の構造体 (この例では ``Vector2``) は代入時にコピー"
"されます。つまりプロパティまたはインデクサーからそのようなオブジェクトを取得"
"すると、オブジェクト本体ではなく、そのコピーが取得されてしまいます。その後で"
"再代入せずにそのコピーを変更したとしても、何も達成されません。"

msgid ""
"The workaround is simple: retrieve the entire struct, modify the value you "
"want to modify, and reassign the property."
msgstr ""
"回避策は簡単です。構造体全体を取得し、変更したい値を変更して、プロパティへ再"
"代入します。"

msgid ""
"Since C# 10, it is also possible to use `with expressions <https://learn."
"microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-"
"expression>`_ on structs, allowing you to do the same thing in a single line."
msgstr ""
"C# 10 以降では、構造体に対して `with式 <https://learn.microsoft.com/en-us/"
"dotnet/csharp/language-reference/operators/with-expression>`_ を使用すること"
"も可能になり、同じことを1行で実行できるようになりました。"

msgid ""
"You can read more about this error on the `C# language reference <https://"
"learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/"
"cs1612>`_."
msgstr ""
"このエラーの詳細については、`C# 言語リファレンス <https://learn.microsoft."
"com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1612>`_ を参照"
"してください。"

msgid "Performance of C# in Godot"
msgstr "GodotにおけるC#のパフォーマンス"

msgid ""
"Most properties of Godot C# objects that are based on ``GodotObject`` (e.g. "
"any ``Node`` like ``Control`` or ``Node3D`` like ``Camera3D``) require "
"native (interop) calls as they talk to Godot's C++ core. Consider assigning "
"values of such properties into a local variable if you need to modify or "
"read them multiple times at a single code location:"
msgstr ""
"``GodotObject`` に基づく Godot C# オブジェクトのほとんどのプロパティ (例: "
"``Control`` のような ``Node`` や ``Camera3D`` のような ``Node3D``) は、Godot "
"の C++ コアと通信するため、ネイティブ (interop) 呼び出しが必要です。単一の"
"コード中にプロパティを複数回変更または読み取る必要がある場合は、そのようなプ"
"ロパティの値はローカル変数に一時的に代入することを検討してください。"

msgid ""
"Passing raw arrays (such as ``byte[]``) or ``string`` to Godot's C# API "
"requires marshalling which is comparatively pricey."
msgstr ""
"生の配列 (``byte[]`` など) または ``string`` を Godot の C# API に渡すには、"
"比較的コストのかかるマーシャリングが必要です。"

msgid ""
"The implicit conversion from ``string`` to ``NodePath`` or ``StringName`` "
"incur both the native interop and marshalling costs as the ``string`` has to "
"be marshalled and passed to the respective native constructor."
msgstr ""
"``string`` から ``NodePath`` または ``StringName`` への暗黙的な変換では、 "
"``string`` をマーシャリングしてそれぞれのネイティブコンストラクターに渡す必要"
"があるため、ネイティブinteropとマーシャリングの両方のコストが発生します。"

msgid "Using NuGet packages in Godot"
msgstr "GodotでのNuGetパッケージの使用"

msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`NuGet <https://www.nuget.org/>` パッケージは、他のC#プロジェクトと同様に、"
"Godotでインストールおよび使用できます。多くのIDEは、パッケージを直接追加でき"
"ます。プロジェクトのルートにある ``.csproj`` ファイルにパッケージ参照を追加す"
"ることにより、手動で追加することもできます:"

msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""
"Godot 3.2.3 以降では、Godot は次回プロジェクトをビルドするときに、新しく追加"
"された NuGet パッケージを自動的にダウンロードして設定します。"

msgid "Profiling your C# code"
msgstr "C#コードのプロファイリング"

msgid ""
"The following tools may be used for performance and memory profiling of your "
"managed code:"
msgstr ""
"マネージドコードのパフォーマンスとメモリのプロファイリングには、次のツールを"
"使用できます。"

msgid "JetBrains Rider with dotTrace/dotMemory plugin."
msgstr "dotTrace/dotMemory プラグインを備えた JetBrains Rider。"

msgid "Standalone JetBrains dotTrace/dotMemory."
msgstr "スタンドアロンの JetBrains dotTrace/dotMemory。"

msgid "Visual Studio."
msgstr "Visual Studio。"

msgid ""
"Profiling managed and unmanaged code at once is possible with both JetBrains "
"tools and Visual Studio, but limited to Windows."
msgstr ""
"マネージドコードとアンマネージドコードを一度にプロファイリングすることは、"
"JetBrains ツールと Visual Studio の両方で可能ですが、Windows に限定されます。"
