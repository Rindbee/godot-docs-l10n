#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Cross-language scripting"
msgstr "クロスランゲージでのスクリプト作成"

msgid ""
"Godot allows you to mix and match scripting languages to suit your needs. "
"This means a single project can define nodes in both C# and GDScript. This "
"page will go through the possible interactions between two nodes written in "
"different languages."
msgstr ""
"Godot を使用すると、必要に応じてスクリプト言語を組み合わせて使用する事が出来"
"ます。つまり、1つのプロジェクトでC#とGDScriptの両方でノードを定義できます。こ"
"のページでは異なる言語で書かれた2つのノード間で可能な相互作用について説明しま"
"す。"

msgid ""
"The following two scripts will be used as references throughout this page."
msgstr "次の2つのスクリプトは、このページ全体で参照として使用されます。"

msgid "Instantiating nodes"
msgstr "ノードのインスタンス化"

msgid ""
"If you're not using nodes from the scene tree, you'll probably want to "
"instantiate nodes directly from the code."
msgstr ""
"シーンツリーのノードを使用していない場合は、コードから直接ノードをインスタン"
"ス化することをお勧めします。"

msgid "Instantiating C# nodes from GDScript"
msgstr "GDScriptからのC#ノードのインスタンス化"

msgid ""
"Using C# from GDScript doesn't need much work. Once loaded (see :ref:"
"`doc_gdscript_classes_as_resources`), the script can be instantiated with :"
"ref:`new() <class_CSharpScript_method_new>`."
msgstr ""
"GDScriptからC#を使用する場合、多くの作業は必要ありません。ロードされると(:"
"ref:`doc_gdscript_classes_as_resources` を参照)、スクリプトは :ref:`new() "
"<class_CSharpScript_method_new> ` でインスタンス化できます。"

msgid ""
"When creating ``.cs`` scripts, you should always keep in mind that the class "
"Godot will use is the one named like the ``.cs`` file itself. If that class "
"does not exist in the file, you'll see the following error: ``Invalid call. "
"Nonexistent function `new` in base``."
msgstr ""
"``cs`` スクリプトを作成する場合、Godotが使用するクラスは ``.cs`` ファイル自体"
"と同じ名前のクラスであることを常に念頭に置く必要があります。そのクラスがファ"
"イルに存在しない場合は、次のエラーが表示されます: ``Invalid call. "
"Nonexistent function `new` in base`` 。"

msgid "For example, MyCoolNode.cs should contain a class named MyCoolNode."
msgstr ""
"たとえば、MyCoolNode.csにはMyCoolNodeという名前のクラスが含まれている必要があ"
"ります。"

msgid ""
"The C# class needs to derive a Godot class, for example ``GodotObject``. "
"Otherwise, the same error will occur."
msgstr ""
"C#クラスは、Godotクラス (たとえば ``GodotObject``) を派生する必要があります。"
"それ以外の場合は、同じエラーが発生します。"

msgid ""
"You also need to check your ``.cs`` file is referenced in the project's ``."
"csproj`` file. Otherwise, the same error will occur."
msgstr ""
"また ``.cs`` ファイルがプロジェクトの ``.csproj`` ファイルで参照されているこ"
"とを確認する必要があります。そうしないと、同じエラーが発生します。"

msgid "Instantiating GDScript nodes from C#"
msgstr "C#からのGDScriptノードのインスタンス化"

msgid ""
"From the C# side, everything work the same way. Once loaded, the GDScript "
"can be instantiated with :ref:`GDScript.New() <class_GDScript_method_new>`."
msgstr ""
"C#側から見ても、すべてが同じように機能します。ロードされると、GDScriptは :"
"ref:`GDScript.New()<class_GDScript_method_new>` でインスタンス化できます。"

msgid ""
"Here we are using an :ref:`class_Object`, but you can use type conversion "
"like explained in :ref:`doc_c_sharp_features_type_conversion_and_casting`."
msgstr ""
"ここでは :ref:`class_Object` を使用していますが、\\ :ref:"
"`doc_c_sharp_features_type_conversion_and_casting` で説明したような型変換を使"
"用できます。"

msgid "Accessing fields"
msgstr "フィールドへのアクセス"

msgid "Accessing C# fields from GDScript"
msgstr "GDScriptからC#フィールドにアクセスする"

msgid ""
"Accessing C# fields from GDScript is straightforward, you shouldn't have "
"anything to worry about."
msgstr ""
"GDScriptからC#フィールドにアクセスするのは簡単です。心配する必要はありませ"
"ん。"

msgid "Accessing GDScript fields from C#"
msgstr "C#からGDScriptフィールドにアクセスする"

msgid ""
"Keep in mind that when setting a field value you should only use types the "
"GDScript side knows about. Essentially, you want to work with built-in types "
"as described in :ref:`doc_gdscript` or classes extending :ref:`class_Object`."
msgstr ""
"フィールド値を設定するときは、GDScript側が知っている型のみを使用する必要があ"
"ることに注意してください。基本的に、\\ :ref:`doc_gdscript` または :ref:"
"`class_Object` を拡張するクラスで説明されている組み込み型を使用する必要があり"
"ます。"

msgid "Calling methods"
msgstr "メソッドの呼び出し"

msgid "Calling C# methods from GDScript"
msgstr "GDScriptからのC#メソッドの呼び出し"

msgid ""
"Again, calling C# methods from GDScript should be straightforward. The "
"marshalling process will do its best to cast the arguments to match function "
"signatures. If that's impossible, you'll see the following error: ``Invalid "
"call. Nonexistent function `FunctionName```."
msgstr ""
"繰り返しますが、GDScriptからC#メソッドを呼び出すことは簡単です。マーシャリン"
"グプロセスは、引数を関数シグネチャに一致するようにキャストするために最善を尽"
"くします。それが不可能な場合、次のエラーが表示されます: ``Invalid call. "
"Nonexistent function `FunctionName``` 。"

msgid "Calling GDScript methods from C#"
msgstr "C#からのGDScriptメソッドの呼び出し"

msgid ""
"To call GDScript methods from C# you'll need to use :ref:`GodotObject.Call() "
"<class_Object_method_call>`. The first argument is the name of the method "
"you want to call. The following arguments will be passed to said method."
msgstr ""
"C#からGDScriptメソッドを呼び出すには、\\ :ref:`GodotObject.Call() "
"<class_Object_method_call>` を使用する必要があります。最初の引数は呼び出すメ"
"ソッドの名前です。次の引数以降が上記のメソッドに渡されます。"

msgid "Connecting to signals"
msgstr "シグナルに接続する"

msgid "Connecting to C# signals from GDScript"
msgstr "GDScript から C# のシグナルに接続する"

msgid ""
"Connecting to a C# signal from GDScript is the same as connecting to a "
"signal defined in GDScript:"
msgstr ""
"GDScript から C# のシグナルに接続することは、GDScript で定義されたシグナルに"
"接続することと同じです:"

msgid "Connecting to GDScript signals from C#"
msgstr "C# から GDScript シグナルに接続する"

msgid ""
"Connecting to a GDScript signal from C# only works with the ``Connect`` "
"method because no C# static types exist for signals defined by GDScript:"
msgstr ""
"GDScript で定義されたシグナルには C# の静的型が存在しないため、C# から "
"GDScript のシグナルへの接続は ``Connect`` メソッドを使用します。"

msgid "Inheritance"
msgstr "継承"

msgid ""
"A GDScript file may not inherit from a C# script. Likewise, a C# script may "
"not inherit from a GDScript file. Due to how complex this would be to "
"implement, this limitation is unlikely to be lifted in the future. See `this "
"GitHub issue <https://github.com/godotengine/godot/issues/38352>`__ for more "
"information."
msgstr ""
"GDScript ファイルは C# スクリプトから継承できない場合があります。同様に C# ス"
"クリプトは GDScript ファイルから継承できない場合があります。これを実装するの"
"は非常に複雑であるため、この制限が将来的に解除される可能性は低いです。詳細に"
"ついては、`GitHub のIssue <https://github.com/godotengine/godot/"
"issues/38352>`__ を参照してください。"
