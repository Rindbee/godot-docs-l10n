#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using SceneTree"
msgstr "シーンツリーの使用"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"In previous tutorials, everything revolved around the concept of nodes. "
"Scenes are collections of nodes. They become active once they enter the "
"*scene tree*."
msgstr ""
"これまでのチュートリアルは、すべてがノードの概念を中心に展開していました。"
"シーンはノードのコレクションです。それら *シーンツリー* に入るとアクティブに"
"なります。"

msgid "MainLoop"
msgstr "メインループ"

msgid ""
"The way Godot works internally is as follows. There is the :ref:`OS "
"<class_OS>` class, which is the only instance that runs at the beginning. "
"Afterwards, all drivers, servers, scripting languages, scene system, etc are "
"loaded."
msgstr ""
"Godotの内部的な働きは次のとおりです。\\ :ref:`OS <class_OS>`\\ クラスがありま"
"す。これは最初に実行される唯一のインスタンスです。その後、すべてのドライバ、"
"サーバ、スクリプト言語、シーンシステムなどがロードされます。"

msgid ""
"When initialization is complete, :ref:`OS <class_OS>` needs to be supplied "
"a :ref:`MainLoop <class_MainLoop>` to run. Up to this point, all this is "
"internals working (you can check main/main.cpp file in the source code if "
"you are ever interested to see how this works internally)."
msgstr ""
"初期化が完了したら、実行するために\\ :ref:`OS <class_OS>`\\ にメインループを"
"提供する必要があります。これまでのところはすべて内部の作業です(これが内部でど"
"のように機能するかを知りたい場合は、ソースコードのmain/main.cppファイルを確認"
"できます)。"

msgid ""
"The user program, or game, starts in the MainLoop. This class has a few "
"methods, for initialization, idle (frame-synchronized callback), fixed "
"(physics-synchronized callback), and input. Again, this is low level and "
"when making games in Godot, writing your own MainLoop seldom makes sense."
msgstr ""
"ユーザー プログラムまたはゲームは、MainLoopで起動します。このクラスには、初期"
"化、アイドル (フレーム同期コールバック)、固定 (物理同期コールバック)、および"
"入力のためのいくつかのメソッドがあります。繰り返しますが、これは低レベルの処"
"理であり、Godotでゲームを作るときに、独自にMainLoopを書くことはめったに意味が"
"ありません。"

msgid "SceneTree"
msgstr "シーンツリー"

msgid ""
"The scene system provides its own main loop to OS, :ref:`SceneTree "
"<class_SceneTree>`. This is automatically instanced and set when running a "
"scene, no need to do any extra work."
msgstr ""
"シーンシステムは、OSに独自のメインループ\\ :ref:`SceneTree "
"<class_SceneTree>`\\ を提供します。これは自動的にインスタンス化され、シーンの"
"実行時に設定されるので、余分な作業を行う必要はありません。"

msgid ""
"It's important to know that this class exists because it has a few important "
"uses:"
msgstr ""
"このクラスにはいくつかの重要な用途があるため、このクラスが存在することを知っ"
"ておくことが重要です:"

msgid ""
"It contains the root :ref:`Viewport <class_Viewport>`, to which a scene is "
"added as a child when it's first opened to become part of the *Scene Tree* "
"(more on that next)."
msgstr ""
"ルート\\ :ref:`Viewport <class_Viewport>`\\ が含まれており、最初に開かれたと"
"きに、 *シーン ツリー* の一部になるためにシーンが子として追加されます(詳細は"
"次のページを参照)。"

msgid ""
"It contains information about the groups and has the means to call all nodes "
"in a group or get a list of them."
msgstr ""
"それにはグループに関する情報が含まれており、グループ内のすべてのノードを呼び"
"出すか、それらのリストを取得する手段があります。"

msgid ""
"It contains some global state functionality, such as setting pause mode or "
"quitting the process."
msgstr ""
"これには、一時停止モードの設定やプロセスの終了など、いくつかのグローバル状態"
"に関する機能が含まれています。"

msgid ""
"When a node is part of the Scene Tree, the :ref:`SceneTree "
"<class_SceneTree>` singleton can be obtained by calling :ref:`Node."
"get_tree() <class_Node_method_get_tree>`."
msgstr ""
"ノードがシーンツリーの一部である場合、 :ref:`Node.get_tree() "
"<class_Node_method_get_tree>` を呼び出すことで :ref:`SceneTree "
"<class_SceneTree>` シングルトンを取得できます。"

msgid "Root viewport"
msgstr "ルートビューポート"

msgid ""
"The root :ref:`Viewport <class_Viewport>` is always at the top of the scene. "
"From a node, it can be obtained in two different ways:"
msgstr ""
"ルート\\ :ref:`Viewport <class_Viewport>`\\ は常にシーンの一番上にあります。"
"ノードからは、次の2つの方法で取得できます:"

msgid ""
"This node contains the main viewport. Anything that is a child of a :ref:"
"`Viewport <class_Viewport>` is drawn inside of it by default, so it makes "
"sense that the top of all nodes is always a node of this type otherwise "
"nothing would be seen."
msgstr ""
"このノードにはメインビューポートが含まれます。 :ref:`Viewport "
"<class_Viewport>` の子であるものはすべてデフォルトでその内部に描画されるた"
"め、すべてのノードの最上位は常にこのタイプのノードであり、そうでない場合は何"
"も表示されません。"

msgid ""
"While other viewports can be created in the scene (for split-screen effects "
"and such), this one is the only one that is never created by the user. It's "
"created automatically inside SceneTree."
msgstr ""
"他のビューポートをシーンに作成することができますが(画面分割効果など)、これが"
"ユーザーによって作成されることのない唯一のビューポートです。 SceneTree内に自"
"動的に作成されます。"

msgid "Scene tree"
msgstr "シーンツリー"

msgid ""
"When a node is connected, directly or indirectly, to the root viewport, it "
"becomes part of the *scene tree*."
msgstr ""
"ノードがルートビューポートに直接または間接的に接続されると、 *シーンツリー* "
"の一部になります。"

msgid ""
"This means that as explained in previous tutorials, it will get the "
"``_enter_tree()`` and ``_ready()`` callbacks (as well as ``_exit_tree()``)."
msgstr ""
"つまり、前のチュートリアルで説明したように、 ``_enter_tree()`` と "
"``_ready()`` (または ``_exit_tree()`` ) の コールバック が取得されます。"

msgid ""
"When nodes enter the *Scene Tree*, they become active. They get access to "
"everything they need to process, get input, display 2D and 3D visuals, "
"receive and send notifications, play sounds, etc. When they are removed from "
"the *scene tree*, they lose these abilities."
msgstr ""
"ノードは *シーン ツリー* に入ると、アクティブになります。処理、入力、2Dおよび"
"3Dビジュアルの表示、通知の送受信、サウンドの再生などに必要なすべてのものにア"
"クセスできます。 *シーンツリー* から削除されると、これらの機能を失います。"

msgid "Tree order"
msgstr "ツリーの順序"

msgid ""
"Most node operations in Godot, such as drawing 2D, processing, or getting "
"notifications are done in *tree order*, or top to bottom as seen in the "
"editor (also known as pre-order traversal):"
msgstr ""
"Godotのほとんどのノード (2D の描画、処理、通知の取得など) は *ツリー順序*、つ"
"まりエディターで表示されるように上から下へ実行されます (プリオーダートラバー"
"サルとも呼ばれます)。"

msgid ""
"For example, the top node in a scene has its ``_process()`` function called "
"first, then the node below it has its ``_process()`` function called, then "
"the node below that and so on."
msgstr ""
"たとえばシーンの最上位ノードで最初に ``_process()`` 関数が呼び出され、次にそ"
"の下のノードで ``_process()`` 関数が呼び出され、続いてその下にあるノードで "
"``_process()`` が呼び出されます。"

msgid ""
"An important exception is the ``_ready()`` function: each parent node has "
"its ``_ready()`` function called only after all its child nodes have their "
"``_ready()`` functions called, so that the parent knows its children are "
"completely ready to be accessed. This is also known as post-order traversal. "
"In the above image, ``NameLabel`` would be notified first (but only after "
"its children, if it had any!), followed by ``Name``, etc., and ``Panel`` "
"would be notified last."
msgstr ""
"重要な例外は ``_ready()`` 関数です。各親ノードは、すべての子ノードが "
"``_ready()`` 関数を呼び出した後に、親ノードの ``_ready()`` 関数を呼び出しま"
"す。これは親が子に対して完全にアクセスできる状態にあるということです。これは"
"ポストオーダートラバーサルとも呼ばれます。上の画像では ``NameLabel`` が最初に"
"実行され (ただし子が存在する場合はその子の後に)、続いて ``Name`` などが続き、"
"最後に ``Panel`` が実行されます。"

msgid ""
"The order of operations can also be overridden using the "
"``process_priority`` node property. Nodes with a lower number are called "
"first. For example, nodes with the priorities \"0, 1, 2, 3\" would be called "
"in that order from left to right."
msgstr ""
"実行の順序は ``process_priority`` ノードプロパティを使用してオーバーライドす"
"ることもできます。番号が小さいノードが最初に呼び出されます。たとえば優先度 "
"\"0, 1, 2, 3\" を持つノードは、左から右の順序で呼び出されます。"

msgid "\"Becoming active\" by entering the *Scene Tree*"
msgstr "*シーンツリー*に入ることで「アクティブになる」"

msgid "A scene is loaded from disk or created by scripting."
msgstr "シーンはディスクから読み込まれるか、スクリプトによって作成されます。"

msgid ""
"The root node of that scene (only one root, remember?) is added as either a "
"child of the \"root\" Viewport (from SceneTree), or to any of its "
"descendants."
msgstr ""
"そのシーンのルートノードは(ルートは 1 つだけです、覚えていますか？)、(シーン"
"ツリーからの)「ルート」ビューポートの子として、またはその任意の子や孫に追加さ"
"れます。"

msgid ""
"Every node of the newly added scene will receive the \"enter_tree\" "
"notification ( ``_enter_tree()`` callback in GDScript) in top-to-bottom "
"order (pre-order traversal)."
msgstr ""
"新しくシーンツリーに追加されたすべてのノードは、GDScript で \"enter_tree\"の "
"通知 (``_enter_tree()`` コールバック)を上から下の順に受け取ります。"

msgid ""
"Every node will receive the \"ready\" notification ( ``_ready()`` callback "
"in GDScript) for convenience, once all its children have received the "
"\"ready\" notification (post-order traversal)."
msgstr ""
"ノードの全ての子が \"ready\" 通知を受信すると (ポストオーダートラバーサル)、"
"ノード自身が \"ready\" 通知 (GDScript の ``_ready()`` コールバック) を受信し"
"ます。"

msgid ""
"When a scene (or part of it) is removed, they receive the \"exit scene\" "
"notification ( ``_exit_tree()`` callback in GDScript) in bottom-to-top order "
"(the exact reverse of top-to-bottom order)."
msgstr ""
"シーン(またはその一部)が削除されると、GDScriptで \"exit scene\" 通知 "
"( ``_exit_tree()`` コールバック) が下から上の順序 (上から下の順序とは逆) で受"
"け取ります)。"

msgid "Changing current scene"
msgstr "現在のシーンの変更"

msgid ""
"After a scene is loaded, you may want to change this scene for another one. "
"One way to do this is to use the :ref:`SceneTree.change_scene_to_file() "
"<class_SceneTree_method_change_scene_to_file>` function:"
msgstr ""
"シーンがロードされた後、このシーンを別のシーンに変更することがしばしば望まれ"
"ます。これを行う1つの方法は、 :ref:`SceneTree.change_scene_to_file() "
"<class_SceneTree_method_change_scene_to_file>` 関数を使用することです:"

msgid ""
"Rather than using file paths, one can also use ready-made :ref:`PackedScene "
"<class_PackedScene>` resources using the equivalent function :ref:`SceneTree."
"change_scene_to_packed(PackedScene scene) "
"<class_SceneTree_method_change_scene_to_packed>`:"
msgstr ""
"ファイルパスを使用する代わりに、同等の関数 :ref:`SceneTree."
"change_scene_to_packed(PackedScene scene) "
"<class_SceneTree_method_change_scene_to_packed>` を使用して、既製の :ref:"
"`PackedScene <class_PackedScene>` リソースを使用することもできます。"

msgid ""
"These are quick and useful ways to switch scenes but have the drawback that "
"the game will stall until the new scene is loaded and running. At some point "
"in the development of your game, it may be preferable to create proper "
"loading screens with progress bar, animated indicators or threaded "
"(background) loading. This must be done manually using :ref:"
"`doc_singletons_autoload` and :ref:`doc_background_loading`."
msgstr ""
"これらは、シーンを切り替える迅速で便利な方法ですが、新しいシーンが読み込まれ"
"て実行されるまでゲームが停止するという欠点があります。ゲーム開発のある時点"
"で、プログレスバー、アニメーションインジケータ、またはスレッド (バックグラウ"
"ンド) での読み込みを備えた、適切な読み込み画面を作成することをお勧めします。"
"これについては、:ref:`doc_singletons_autoload` と :ref:"
"`doc_background_loading` を使用して手動で行う必要があります。"
