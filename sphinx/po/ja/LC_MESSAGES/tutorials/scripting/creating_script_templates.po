#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating script templates"
msgstr "スクリプトテンプレートの作成"

msgid ""
"Godot provides a way to use script templates as seen in the ``Script Create "
"Dialog`` while creating a new script:"
msgstr ""
"Godot は新しいスクリプトを作成するときの ``スクリプト作成`` ダイアログに表示"
"される、スクリプト テンプレートを追加することができます。"

msgid ""
"A set of built-in script templates are provided with the editor, but it is "
"also possible to create new ones and set them by default, both per project "
"and at editor scope."
msgstr ""
"エディタには一連のビルトインのスクリプトテンプレートが提供されていますが、プ"
"ロジェクトごとおよびエディタースコープの両方で、新しいテンプレートを作成して"
"デフォルトで設定することもできます。"

msgid ""
"Templates are linked to a specific node type, so when you create a script "
"you will only see the templates corresponding to that particular node, or "
"one of its parent types. For example, if you are creating a script for a "
"CharacterBody3D, you will only see templates defined for CharacterBody3Ds, "
"Node3Ds or Nodes."
msgstr ""
"テンプレートは特定のノード型にリンクされているため、スクリプトを作成するとそ"
"の特定のノード、またはそのベースクラスに対応するテンプレートのみが表示されま"
"す。たとえば CharacterBody3D のスクリプトを作成している場合は、"
"CharacterBody3D、Node3D、Nodeに対して定義されたテンプレートのみが表示されま"
"す。"

msgid "Locating the templates"
msgstr "テンプレートを見つける"

msgid "There are two places where templates can be managed."
msgstr "テンプレートを管理できる場所は2つあります。"

msgid "Editor-defined templates"
msgstr "エディタ定義のテンプレート"

msgid ""
"These are available globally throughout any project. The location of these "
"templates are determined per each OS:"
msgstr ""
"これは、あらゆるプロジェクトを通じてグローバルに利用できます。このテンプレー"
"トの保存場所は、OS ごとに決まります。"

msgid "Windows: ``%APPDATA%\\Godot\\script_templates\\``"
msgstr "Windows: ``%APPDATA%\\Godot\\script_templates\\``"

msgid "Linux: ``$HOME/.config/godot/script_templates/``"
msgstr "Linux: ``$HOME/.config/godot/script_templates/``"

msgid "macOS: ``$HOME/Library/Application Support/Godot/script_templates/``"
msgstr "macOS: ``$HOME/Library/Application Support/Godot/script_templates/``"

msgid ""
"If you're getting Godot from somewhere other than the official website, such "
"as Steam, the folder might be in a different location. You can find it using "
"the Godot editor. Go to ``Editor > Open Editor Data/Settings Folder`` and it "
"will open a folder in your file browser, inside that folder is the "
"``script_templates`` folder."
msgstr ""
"Steam など公式 Web サイト以外の場所から Godot を入手している場合、フォルダー"
"は別の場所にある可能性があります。 Godot エディタを使用して見つけることができ"
"ます。 ``エディター > エディターのデータ / 設定フォルダーを開く`` を選択する"
"と、ファイルブラウザでフォルダが開きます。そのフォルダー内に "
"``script_templates`` フォルダーがあります。"

msgid "Project-defined templates"
msgstr "プロジェクト定義のテンプレート"

msgid ""
"If no ``script_templates`` directory is found within a project, it is simply "
"ignored."
msgstr ""
"プロジェクト内に ``script_templates`` ディレクトリが見つからない場合は、単に"
"無視されます。"

msgid "Template organization and naming"
msgstr "テンプレートの構成と命名"

msgid ""
"Both editor and project defined templates are organized in the following way:"
msgstr ""
"エディタ定義のテンプレートとプロジェクト定義のテンプレートはどちらも次のよう"
"に構成されています。"

msgid "where:"
msgstr "それぞれ単語の役割は下記の通り:"

msgid "For example:"
msgstr "例:"

msgid "``template_scripts/Node/smooth_camera.gd``"
msgstr "``template_scripts/Node/smooth_camera.gd``"

msgid "``template_scripts/CharacterBody3D/platformer_movement.gd``"
msgstr "``template_scripts/CharacterBody3D/platformer_movement.gd``"

msgid "By default:"
msgstr "デフォルトの設定:"

msgid ""
"the template's name is the same as the file name (minus the extension, "
"prettyfied)"
msgstr "テンプレートの名前はファイル名と同じ（拡張子を除いてあります）"

msgid "the description is empty"
msgstr "空の説明"

msgid "the space indent is set to 4"
msgstr "インデントのスペースは4に設定"

msgid "the template will not be set as the default for the given node"
msgstr "テンプレートは、指定されたノードのデフォルトとして適用されない"

msgid ""
"In this case, the name will be set to \"Platformer movement\", with the "
"given custom description, and it will be set as the default template for the "
"node in which directory it has been saved."
msgstr ""
"この場合、名前は \"Platformer movement\" 、カスタム説明も設定され、ノードのデ"
"フォルトテンプレートとして保存されたディレクトリが設定されます。"

msgid ""
"This is an example of utilizing custom templates at editor and project level:"
msgstr ""
"これはエディタおよびプロジェクトレベルでカスタム テンプレートを利用する例で"
"す。"

msgid ""
"The script templates have the same extension as the regular script files. "
"This may lead to an issue of a script parser treating those templates as "
"actual scripts within a project. To avoid this, make sure to ignore the "
"directory containing them by creating an empty ``.gdignore`` file. The "
"directory won't be visible throughout the project's filesystem anymore, yet "
"the templates can be modified by an external text editor anytime."
msgstr ""
"スクリプト テンプレートの拡張子は、通常のスクリプト ファイルと同じです。この"
"ためスクリプトパーサーがこれらのテンプレートをプロジェクト内で実際のスクリプ"
"トとして扱うという問題が発生する可能性があります。これを避けるためには、 "
"``.gdignore`` ファイルを作成して、テンプレートが入っているディレクトリを無視"
"するようにしてください。このディレクトリはプロジェクトのファイルシステム全体"
"からは見えなくなりますが、テンプレートは外部のテキストエディタでいつでも変更"
"することができます。"

msgid ""
"By default, every C# file inside the project directory is included in the "
"compilation. Script templates must be manually excluded from the C# project "
"to avoid build errors. See `Exclude files from the build <https://"
"learn.microsoft.com/en-us/visualstudio/msbuild/how-to-exclude-files-from-the-"
"build>`_ in the Microsoft documentation."
msgstr ""
"デフォルトではプロジェクトディレクトリ内のすべての C# ファイルがコンパイルに"
"含まれます。ビルドエラーを回避するには、スクリプトテンプレートを C# プロジェ"
"クトから手動で除外する必要があります。 Microsoft ドキュメントの「ビルドから"
"ファイルを除外する <https://learn.microsoft.com/en-us/visualstudio/msbuild/"
"how-to-exclude-files-from-the-build>」_ を参照してください。"

msgid ""
"It is possible to create editor-level templates that have the same level as "
"a project-specific templates, and also that have the same name as a built-in "
"one, all will be shown on the new script dialog."
msgstr ""
"プロジェクト固有のテンプレートと同じレベルを持つ、エディタレベルのテンプレー"
"ト、およびビルトインのテンプレートと同じ名前を持つエディタレベルのテンプレー"
"トを作成することが可能で、すべて新しいスクリプト ダイアログに表示されます。"

msgid "Default template"
msgstr "デフォルトのテンプレート"

msgid ""
"To override the default template, create a custom template at editor or "
"project level inside a ``Node`` directory (or a more specific type, if only "
"a subtype wants to be overridden) and start the file with the ``meta-"
"default: true`` header."
msgstr ""
"デフォルトのテンプレートをオーバーライドするには、 ``Node`` ディレクトリ内の"
"エディタレベルまたはプロジェクトレベルでカスタムテンプレート (サブタイプのみ"
"をオーバーライドしたい場合はより具体的な型) を作成し ``meta-default: true`` "
"ヘッダーでファイルを開始します。"

msgid ""
"Only one template can be set as default at the same time for the same node "
"type."
msgstr ""
"同じノード型に対して同時にデフォルトとして設定できるテンプレートは1つだけで"
"す。"

msgid ""
"The ``Default`` templates for basic Nodes, for both GDScript and C#, are "
"shown here so you can use these as the base for creating other templates:"
msgstr ""
"GDScript と C# の両方の基本ノードの ``Default`` テンプレートが下記のコード"
"で、これを他のテンプレートを作成するためのベースとして使用できます。"

msgid ""
"The Godot editor provides a set of useful built-in node-specific templates, "
"such as ``basic_movement`` for both :ref:`CharacterBody2D "
"<class_CharacterBody2D>` and :ref:`CharacterBody3D <class_CharacterBody3D>` "
"and ``plugin`` for :ref:`EditorPlugin <class_EditorPlugin>`."
msgstr ""
"Godot エディタは :ref:`CharacterBody2D <class_CharacterBody2D>` "
"と :ref:`CharacterBody3D <class_CharacterBody3D>` には "
"``basic_movement`` 、 :ref:`EditorPlugin <class_EditorPlugin>` には "
"``plugin`` といったノード固有の便利な組み込みテンプレートのセットを提供しま"
"す。"

msgid "List of template placeholders"
msgstr "テンプレートのプレースホルダ"

msgid ""
"The following describes the complete list of built-in template placeholders "
"which are currently implemented."
msgstr ""
"現在実装されているビルトインテンプレートのプレースホルダについて説明します。"

msgid "Base placeholders"
msgstr "基本のプレースホルダー"

msgid "Placeholder"
msgstr "プレースホルダ"

msgid "Description"
msgstr "説明"

msgid "``_BINDINGS_NAMESPACE_``"
msgstr "``_BINDINGS_NAMESPACE_``"

msgid "The name of the Godot namespace (used in C# only)."
msgstr "Godot名前空間の名前 (C# のみで使用)。"

msgid "``_CLASS_``"
msgstr "``_CLASS_``"

msgid "The name of the new class."
msgstr "新しいクラスの名前。"

msgid "``_BASE_``"
msgstr "``_BASE_``"

msgid "The base type a new script inherits from."
msgstr "新しいスクリプトが継承する基本型。"

msgid "``_TS_``"
msgstr "``_TS_``"

msgid ""
"Indentation placeholder. The exact type and number of whitespace characters "
"used for indentation is determined by the ``text_editor/indent/type`` and "
"``text_editor/indent/size`` settings in the :ref:`EditorSettings "
"<class_EditorSettings>` respectively. Can be overridden by the ``meta-space-"
"indent`` header on the template."
msgstr ""
"インデントのプレースホルダ。インデントに使用される空白文字の正確な型と数は、"
"それぞれ :ref:`EditorSettings <class_EditorSettings>` の `text_editor/indent/"
"type` と `text_editor/indent/size` の設定によって決まります。テンプレートの "
"``meta-space-indent`` ヘッダーによってオーバーライドできます。"

msgid "Type placeholders"
msgstr "型のプレースホルダ"

msgid ""
"There used to be, in Godot 3.x, placeholders for GDScript type hints that "
"would get replaced whenever a template was used to create a new script, such "
"as: ``%INT_TYPE%``, ``%STRING_TYPE%``, ``%FLOAT_TYPE%`` or ``%VOID_RETURN%``."
msgstr ""
"Godot 3.x には、テンプレートを使用して新しいスクリプトを作成するたびに置き換"
"えられる GDScript の型ヒントのプレースホルダーがありました。たとえば "
"``%INT_TYPE%`` 、 ``%STRING_TYPE%`` 、 ``%FLOAT_TYPE%`` または "
"``%VOID_RETURN%`` など。"

msgid ""
"The placeholders no longer work for Godot 4.x, but if the setting "
"``text_editor/completion/add_type_hints`` from :ref:`EditorSettings "
"<class_EditorSettings>` is disabled, type hints for parameters and return "
"types will be automatically removed for a few base types:"
msgstr ""
"このプレースホルダは Godot 4.x では機能しなくなりました"
"が、:ref:`EditorSettings <class_EditorSettings>` の設定 `text_editor/"
"completion/add_type_hints` が無効になっている場合、パラメータと戻り値の型の型"
"ヒントは自動的に削除されます。いくつかの基本タイプ:"

msgid "``int``"
msgstr "``int``"

msgid "``Array[String]``"
msgstr "``Array[String]``"

msgid "``float``"
msgstr "``float``"

msgid "``void``"
msgstr "``void``"

msgid "``:=`` will be transformed into ``=``"
msgstr "``:=`` は ``=`` に変換されます"
