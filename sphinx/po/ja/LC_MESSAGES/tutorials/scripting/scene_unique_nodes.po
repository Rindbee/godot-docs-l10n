#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Scene Unique Nodes"
msgstr "シーン固有ノード"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Using ``get_node()`` to reference nodes from a script can sometimes be "
"fragile. If you move a button in a UI scene from one panel to another, the "
"button's node path changes, and if a script uses ``get_node()`` with a hard-"
"coded node path, the script will not be able to find the button anymore."
msgstr ""
"``get_node()`` を使用してスクリプトからノードを参照するコードは壊れやすい可能"
"性があります。 たとえばUIシーン内のボタンをあるパネルから別のパネルに移動する"
"と、ボタンのノードパスが変更されます。スクリプトではハードコーディングされた"
"ノードパスで ``get_node()`` しているため、スクリプトはそのボタンを見つけるこ"
"とができなくなります。"

msgid ""
"In situations like this, the node can be turned into a scene unique node to "
"avoid having to update the script every time the node's path is changed."
msgstr ""
"このような状況では、特定のノードをシーン固有ノードに変えることで、そのノード"
"のパスが変更されるたびにスクリプトを更新する必要を回避できます。"

msgid "Creation and usage"
msgstr "シーン固有ノードの作り方"

msgid ""
"In the Scene tree dock, right-click on a node and select **Access as Unique "
"Name** in the context menu."
msgstr ""
"シーンツリードックでノードを右クリックし、コンテキストメニューから **固有名で"
"アクセス** を選択します。"

msgid ""
"After selecting the option, the node will now have a percent symbol (**%**) "
"next to its name in the scene tree:"
msgstr ""
"固有名でアクセスを選択すると、シーンツリー内のノード名の横にパーセント記号 "
"(**%**) が表示されます。"

msgid ""
"You can now use the node in your script. For example, you can reference it "
"with a ``get_node()`` method call by typing the % symbol, followed by the "
"node's name:"
msgstr ""
"これでスクリプト内で固有ノードを使用できるようになります。たとえば "
"``get_node()`` メソッド呼び出しで % 記号を入力し、その後にノード名を入力する"
"ことで固有ノードを参照できます。"

msgid "Same-scene limitation"
msgstr "同一シーンの制限"

msgid ""
"A scene unique node can only be retrieved by a node inside the same scene. "
"To demonstrate this limitation, consider this example **Player** scene that "
"instances a **Sword** scene:"
msgstr ""
"シーン固有ノードは、同じシーン内のノードによってのみ取得できます。この制限を"
"示すために、**Sword** シーンをインスタンス化する次の **Player** シーンの例を"
"考えてみましょう。"

msgid ""
"Here are the results of ``get_node()`` calls inside the **Player** script:"
msgstr "**Player** スクリプト内の ``get_node()`` 呼び出しの結果は次のとおり。"

msgid "``get_node(\"%Eyes\")`` returns the **Eyes** node."
msgstr "``get_node(\"%Eyes\")`` は **Eyes** ノードを返します。"

msgid "``get_node(\"%Hilt\")`` returns ``null``."
msgstr "``get_node(\"%Hilt\")`` は ``null`` を返します。"

msgid ""
"These are the results of ``get_node()`` calls inside the **Sword** script:"
msgstr "**Sword** スクリプト内の ``get_node()`` 呼び出しの結果は次のとおり:"

msgid "``get_node(\"%Eyes\")`` returns ``null``."
msgstr "``get_node(\"%Eyes\")`` は ``null`` を返します。"

msgid "``get_node(\"%Hilt\")`` returns the **Hilt** node."
msgstr "``get_node(\"%Hilt\")`` は **Hilt** ノードを返します。"

msgid ""
"If a script has access to a node in another scene, it can call "
"``get_node()`` on that node to get scene unique nodes from that node's "
"scene. This also works in a node path, which avoids multiple ``get_node()`` "
"calls. Here are two ways to get the **Hilt** node from the **Player** script "
"using scene unique nodes:"
msgstr ""
"スクリプトが別のシーンのノードにアクセスしたいとき、そのノード上で "
"``get_node()`` を呼び出して、そのノードのシーンからシーン固有のノードを取得で"
"きます。これはノードパスでもよくて、そうすると複数の ``get_node()`` 呼び出し"
"を回避します。シーン固有のノードを使用して **Player** スクリプトから "
"**Hilt** ノードを取得する2つの方法を次に示します。"

msgid ""
"``get_node(\"Hand/Sword\").get_node(\"%Hilt\")`` returns the **Hilt** node."
msgstr ""
"``get_node(\"Hand/Sword\").get_node(\"%Hilt\")`` は **Hilt** ノードを返しま"
"す。"

msgid "``get_node(\"Hand/Sword/%Hilt\")`` also returns the **Hilt** node."
msgstr "``get_node(\"Hand/Sword/%Hilt\")`` は **Hilt** ノードを返します。"

msgid ""
"Scene unique names don't only work at the end of a node path. They can be "
"used in the middle to navigate from one node to another. For example, the "
"**Sword** node is marked as a scene unique node in the **Player** scene, so "
"this is possible:"
msgstr ""
"シーンの固有名は、ノードパスの末尾でのみ機能するわけではありません。これらは"
"あるノードから別のノードに移動するために中間でも使用できます。たとえば "
"**Sword** ノードは **Player** シーン内でシーン固有のノードとしてマークされて"
"いるため、次のことが可能です。"

msgid "``get_node(\"%Sword/%Hilt\")`` returns the **Hilt** node."
msgstr "``get_node(\"%Sword/%Hilt\")`` は **Hilt** ノードを返します。"

msgid "Alternatives"
msgstr "代替アプローチ"

msgid ""
"Scene unique nodes are a useful tool to navigate a scene. However, there are "
"some situations where other techniques may be better."
msgstr ""
"シーン固有ノードは、シーンをナビゲートするための便利なツールです。ただし状況"
"によっては、他のテクニックの方が優れている場合もあります。"

msgid ""
"A :ref:`Group <doc_groups>` allows locating a node (or a group of many "
"nodes) from any other node, no matter what scene the two nodes are located "
"in."
msgstr ""
":ref:`Group <doc_groups>` を使用すると、2つのノードがどのようなシーンに配置さ"
"れているかに関係なく、他のノードから特定のノード (または多数のノードのグルー"
"プ) を見つけることができます。"

msgid ""
"A :ref:`Singleton (Autoload) <doc_singletons_autoload>` is an always loaded "
"node that can be accessed directly by any node regardless of the scene. "
"These are useful when some data or functionality is shared globally."
msgstr ""
":ref:`Singleton (Autoload) <doc_singletons_autoload>` はシーンに関係なく任意"
"のノードから直接アクセスできる、常にロードされるノードです。これは一部のデー"
"タまたは関数がグローバルに共有される場合に便利です。"

msgid ""
":ref:`Node.find_child() <class_Node_method_find_child>` finds a node by name "
"without knowing its full path. This seems similar to a scene unique node, "
"but this method is able to find nodes in nested scenes, and doesn't require "
"marking the node in the scene editor in any way. However, this method is "
"slow. Scene unique nodes are cached by Godot and are fast to retrieve, but "
"each time the method is called, ``find_child()`` needs to check every "
"descendant (every child, grandchild, and so on)."
msgstr ""
":ref:`Node.find_child() <class_Node_method_find_child>` はフルパスを知らなく"
"ても名前でノードを検索します。これはシーン固有のノードに似ているように見えま"
"すが、この方法はネストされたシーン内の深い所のノードも見つけることができ、"
"シーンエディタでノードをマークする必要はまったくありません。ただしこの方法は"
"時間がかかります。シーン固有のノードはGodotによってキャッシュされ高速に取得で"
"きますが、 ``find_child()`` はメソッドが呼び出されるたびにすべての子孫 (すべ"
"ての子、孫など) をチェックする必要があります。"
