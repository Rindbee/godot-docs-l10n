#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript reference"
msgstr "GDScriptリファレンス"

msgid ""
":ref:`GDScript<doc_gdscript>` is a high-level, `object-oriented <https://"
"en.wikipedia.org/wiki/Object-oriented_programming>`_, `imperative <https://"
"en.wikipedia.org/wiki/Imperative_programming>`_, and `gradually typed "
"<https://en.wikipedia.org/wiki/Gradual_typing>`_ programming language built "
"for Godot. It uses an indentation-based syntax similar to languages like "
"`Python <https://en.wikipedia.org/wiki/Python_%28programming_language%29>`_. "
"Its goal is to be optimized for and tightly integrated with Godot Engine, "
"allowing great flexibility for content creation and integration."
msgstr ""
":ref:`GDScript<doc_gdscript>` は高レベルの `オブジェクト指向 <https://"
"en.wikipedia.org/wiki/Object-oriented_programming>`_ 、`命令型 <https://"
"en.wikipedia.org/wiki/Imperative_programming>`_ 、および `漸進的型付け "
"<https://en.wikipedia.org/wiki/Gradual_typing>`_ プログラミング言語であり、"
"Godot用に構築されました。これは `Python <https://en.wikipedia.org/wiki/"
"Python_%28programming_language%29>`_ のような言語に似たインデントベースの構文"
"を使用します。その目標は Godot Engine 向けに最適化され、Godot Engine と緊密に"
"統合され、コンテンツの作成と統合に大きな柔軟性をもたらすことです。"

msgid "GDScript is entirely independent from Python and is not based on it."
msgstr "GDScript は Python から完全に独立しており、Python に基づいていません。"

msgid "History"
msgstr "履歴"

msgid ""
"Documentation about GDScript's history has been moved to "
"the :ref:`Frequently Asked Questions <doc_faq_what_is_gdscript>`."
msgstr ""
"GDScriptの歴史についてのドキュメントは\\ :ref:`よくある質問 "
"<doc_faq_what_is_gdscript>`\\ に移動しました。"

msgid "Example of GDScript"
msgstr "GDScriptの例"

msgid ""
"Some people can learn better by taking a look at the syntax, so here's an "
"example of how GDScript looks."
msgstr ""
"構文を見たほうがよくわかる人もいるかもしれないので、ここではGDScriptがどのよ"
"うに見えるかの例を示します。"

msgid ""
"If you have previous experience with statically typed languages such as C, C+"
"+, or C# but never used a dynamically typed one before, it is advised you "
"read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""
"C、C++、C#などの静的型付き言語の経験があるが、これまでに動的型付き言語を使用"
"したことがない場合は、以下のチュートリアルを読むことをお勧めします。"
"\\ :ref:`doc_gdscript_more_efficiently`。"

msgid "Identifiers"
msgstr "識別子"

msgid ""
"Any string that restricts itself to alphabetic characters (``a`` to ``z`` "
"and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an "
"identifier. Additionally, identifiers must not begin with a digit. "
"Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""
"アルファベット文字( ``a`` から ``z`` および ``A`` から ``Z`` )、数字( ``0`` "
"から ``9`` )、 ``_`` が識別子として修飾される文字列です。また、識別子は数字で"
"始まってはいけません。識別子では大文字と小文字が区別されます( ``foo`` が "
"``FOO`` と異なる)。"

msgid ""
"Identifiers may also contain most Unicode characters part of `UAX#31 "
"<https://www.unicode.org/reports/tr31/>`__. This allows you to use "
"identifier names written in languages other than English. Unicode characters "
"that are considered \"confusable\" for ASCII characters and emoji are not "
"allowed in identifiers."
msgstr ""
"識別子には `UAX#31 <https://www.unicode.org/reports/tr31/>`__ のほとんどの "
"Unicode 文字部分が含まれる場合もあります。これにより、英語以外の言語で書かれ"
"た識別子名を使用できるようになります。 ASCII 文字や絵文字と\"混同しやすい\"と"
"考えられるUnicode文字は、識別子には使用できません。"

msgid "Keywords"
msgstr "キーワード"

msgid ""
"The following is the list of keywords supported by the language. Since "
"keywords are reserved words (tokens), they can't be used as identifiers. "
"Operators (like ``in``, ``not``, ``and`` or ``or``) and names of built-in "
"types as listed in the following sections are also reserved."
msgstr ""
"言語でサポートされているキーワードのリストを次に示します。キーワードは予約語"
"(トークン)であるため、識別子として使用することはできません。次のセクションに"
"示す演算子( ``in`` 、 ``not`` 、 ``and`` 、 ``or`` など)と組み込み型の名前も"
"予約されています。"

msgid ""
"Keywords are defined in the `GDScript tokenizer <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ in "
"case you want to take a look under the hood."
msgstr ""
"キーワードは `GDScriptのトークナイザー <https://github.com/godotengine/godot/"
"blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_\\ で定義されているの"
"で、内部を調べたい場合に便利です。"

msgid "Keyword"
msgstr "キーワード"

msgid "Description"
msgstr "説明"

msgid "if"
msgstr "\\ if"

msgid "See `if/else/elif`_."
msgstr "`if/else/elif`_ を参照して下さい。"

msgid "elif"
msgstr "\\ elif"

msgid "else"
msgstr "\\ else"

msgid "for"
msgstr "\\ for"

msgid "See for_."
msgstr "for_\\ を参照して下さい。"

msgid "while"
msgstr "\\ while"

msgid "See while_."
msgstr "while_\\ を参照して下さい。"

msgid "match"
msgstr "\\ match"

msgid "See match_."
msgstr "match_\\ を参照して下さい。"

msgid "when"
msgstr "\\ when"

msgid "Used by `pattern guards <Pattern guards_>`_ in ``match`` statements."
msgstr ""
"``match`` ステートメント内の `パターンガード <Pattern guards_>`_ によって使用"
"されます。"

msgid "break"
msgstr "\\ break"

msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr "現在の\\ ``for``\\ または\\ ``while``\\ ループの実行を終了します。"

msgid "continue"
msgstr "\\ continue"

msgid ""
"Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr "``for`` または ``while`` ループの次の反復に直ちにスキップします。"

msgid "pass"
msgstr "\\ pass"

msgid ""
"Used where a statement is required syntactically but execution of code is "
"undesired, e.g. in empty functions."
msgstr ""
"ステートメントが構文的には必要だが、コードの実行が望ましくない場合 (空の関数"
"など) に使用されます。"

msgid "return"
msgstr "\\ return"

msgid "Returns a value from a function."
msgstr "関数から値を返します。"

msgid "class"
msgstr "\\ class"

msgid "Defines an inner class. See `Inner classes`_."
msgstr "内部クラスを定義します。 `Inner classes`_ を参照してください。"

msgid "class_name"
msgstr "\\ class_name"

msgid ""
"Defines the script as a globally accessible class with the specified name. "
"See `Registering named classes`_."
msgstr ""
"スクリプトを名前を持つグローバルにアクセス可能なクラスとして定義します。 "
"`Registering named classes`_ を参照。"

msgid "extends"
msgstr "\\ extends"

msgid "Defines what class to extend with the current class."
msgstr "現在のクラスで拡張するクラスを定義します。"

msgid "is"
msgstr "\\ is"

msgid ""
"Tests whether a variable extends a given class, or is of a given built-in "
"type."
msgstr ""
"変数が特定のクラスを拡張するのか、それとも特定の組み込み型のものかをテストし"
"ます。"

msgid "in"
msgstr "\\ in"

msgid ""
"Tests whether a value is within a string, array, range, dictionary, or node. "
"When used with ``for``, it iterates through them instead of testing."
msgstr ""
"値が文字列、配列、範囲、辞書、またはノード内に存在するかどうかをテストしま"
"す。 ``for`` と一緒に使用すると、それらを反復処理をします。"

msgid "as"
msgstr "\\ as"

msgid "Cast the value to a given type if possible."
msgstr "可能であれば、指定した型に値をキャストします。"

msgid "self"
msgstr "\\ self"

msgid "Refers to current class instance. See `self`_."
msgstr "現在のクラスインスタンスを参照します。 `self`_ を参照してください。"

msgid "super"
msgstr "\\ super"

msgid "Resolves the scope of the parent method. See `Inheritance`_."
msgstr "親メソッドのスコープを解決します。 `Inheritance`_ を参照。"

msgid "signal"
msgstr "\\ signal"

msgid "Defines a signal. See `Signals`_."
msgstr "シグナルを定義します。 `Signals`_ を参照してください。"

msgid "func"
msgstr "\\ func"

msgid "Defines a function.  See `Functions`_."
msgstr "関数を定義します。 `Functions`_ を参照してください。"

msgid "static"
msgstr "\\ static"

msgid "Defines a static function or a static member variable."
msgstr "静的関数または静的メンバー変数を定義します。"

msgid "const"
msgstr "\\ const"

msgid "Defines a constant. See `Constants`_."
msgstr "定数を定義します。 `Constants`_ を参照してください。"

msgid "enum"
msgstr "\\ enum"

msgid "Defines an enum. See `Enums`_."
msgstr "列挙型を定義します。 `Enums`_ を参照してください。"

msgid "var"
msgstr "\\ var"

msgid "Defines a variable. See `Variables`_."
msgstr "変数を定義します。 `Variables`_ を参照してください。"

msgid "breakpoint"
msgstr "\\ breakpoint"

msgid ""
"Editor helper for debugger breakpoints. Unlike breakpoints created by "
"clicking in the gutter, ``breakpoint`` is stored in the script itself. This "
"makes it persistent across different machines when using version control."
msgstr ""
"デバッガーブレークポイントのエディタヘルパー。ガター内をクリックして作成され"
"たブレークポイントとは異なり、 ``breakpoint`` はスクリプト自体に保存されま"
"す。これによりバージョン管理を使用する際、異なるマシン間で永続的なブレークポ"
"イントになります。"

msgid "preload"
msgstr "\\ preload"

msgid "Preloads a class or variable. See `Classes as resources`_."
msgstr ""
"クラスまたは変数をプリロードします。`Classes as resources`_ を参照してくださ"
"い。"

msgid "await"
msgstr "\\ await"

msgid ""
"Waits for a signal or a coroutine to finish. See `Awaiting signals or "
"coroutines`_."
msgstr ""
"シグナルまたはコルーチンが終了するのを待ちます。 `Awaiting signals or "
"coroutines`_ を参照。"

msgid "yield"
msgstr "\\ yield"

msgid "Previously used for coroutines. Kept as keyword for transition."
msgstr ""
"以前はコルーチンに使用されていました。トランジションのキーワードとして保持し"
"ます。"

msgid "assert"
msgstr "\\ assert"

msgid ""
"Asserts a condition, logs error on failure. Ignored in non-debug builds. See "
"`Assert keyword`_."
msgstr ""
"条件を表明し、失敗時にエラーをログに記録します。 デバッグ以外のビルドでは無視"
"されます。`Assert keyword`_ を参照してください。"

msgid "Used to represent that a function does not return any value."
msgstr "関数が値を返さないことを表すために使用されます。"

msgid "PI"
msgstr "\\ PI"

msgid "PI constant."
msgstr "PI定数。"

msgid "TAU"
msgstr "\\ TAU"

msgid "TAU constant."
msgstr "TAU定数。"

msgid "INF"
msgstr "\\ INF"

msgid "Infinity constant. Used for comparisons and as result of calculations."
msgstr "Infinity定数。比較や計算の結果として使用されます。"

msgid "NAN"
msgstr "\\ NAN"

msgid ""
"NAN (not a number) constant. Used as impossible result from calculations."
msgstr "NAN (not a number)定数。計算上の不可能な結果として使用されます。"

msgid "Operators"
msgstr "オペレーター"

msgid ""
"The following is the list of supported operators and their precedence. All "
"binary operators are `left-associative <https://en.wikipedia.org/wiki/"
"Operator_associativity>`_, including the ``**`` operator. This means that "
"``2 ** 2 ** 3`` is equal to ``(2 ** 2) ** 3``. Use parentheses to explicitly "
"specify precedence you need, for example ``2 ** (2 ** 3)``. The ternary ``if/"
"else`` operator is right-associative."
msgstr ""
"以下はサポートされている演算子とその優先順位のリストです。 ``**`` 演算子を含"
"め、すべての二項演算子は `左結合 <https://en.wikipedia.org/wiki/"
"Operator_associativity>`_ です。これは ``2 ** 2 ** 3`` は ``(2 ** 2) ** 3`` "
"と等しいことを意味します。必要な優先順位を明示的に指定するには、括弧を使用し"
"ます (例: ``2 ** (2 ** 3)``)。三項演算子 (``if/else``) は右結合です。"

msgid "**Operator**"
msgstr "**演算子**"

msgid "**Description**"
msgstr "**説明**"

msgid "``(`` ``)``"
msgstr "``(`` ``)``"

msgid "Grouping (highest priority)"
msgstr "グループ化 (最優先)"

msgid ""
"Parentheses are not really an operator, but allow you to explicitly specify "
"the precedence of an operation."
msgstr ""
"括弧は実際には演算子ではありませんが、演算の優先順位を明示的に指定できます。"

msgid "``x[index]``"
msgstr "``x[index]``"

msgid "Subscription"
msgstr "添字指定"

msgid "``x.attribute``"
msgstr "``x.attribute``"

msgid "Attribute reference"
msgstr "要素参照"

msgid "``foo()``"
msgstr "\\ ``foo()``"

msgid "Function call"
msgstr "関数呼び出し"

msgid "``await x``"
msgstr "``await x``"

msgid "`Awaiting signals or coroutines`_"
msgstr "`シグナルまたはコルーチンを待つ`_"

msgid "``x is Node``"
msgstr "``x is Node``"

msgid "``x is not Node``"
msgstr "``x is not Node``"

msgid "Type checking"
msgstr "型チェック"

msgid ""
"See also :ref:`is_instance_of() <class_@GDScript_method_is_instance_of>` "
"function."
msgstr ""
":ref:`is_instance_of() <class_@GDScript_method_is_instance_of>` 関数も参照し"
"てください。"

msgid "``x ** y``"
msgstr "``x ** y``"

msgid "Power"
msgstr "累乗"

msgid ""
"Multiplies ``x`` by itself ``y`` times, similar to calling :ref:`pow() "
"<class_@GlobalScope_method_pow>` function."
msgstr ""
":ref:`pow() <class_@GlobalScope_method_pow>` 関数を呼び出すのと同様に、 "
"``x`` を ``y`` 乗します。"

msgid "``~x``"
msgstr "``~x``"

msgid "Bitwise NOT"
msgstr "ビット単位のNOT"

msgid "``+x``"
msgstr "``+x``"

msgid "``-x``"
msgstr "``-x``"

msgid "Identity / Negation"
msgstr "正数/負数"

msgid "``x * y``"
msgstr "``x * y``"

msgid "``x / y``"
msgstr "``x / y``"

msgid "``x % y``"
msgstr "``x % y``"

msgid "Multiplication / Division / Remainder"
msgstr "乗算/除算/剰余"

msgid ""
"The ``%`` operator is additionally used for :ref:`format strings "
"<doc_gdscript_printf>`."
msgstr ""
"``%`` 演算子は :ref:`フォーマット文字列 <doc_gdscript_printf>` でも使用されま"
"す。"

msgid ""
"**Note:** These operators have the same behavior as C++, which may be "
"unexpected for users coming from Python, JavaScript, etc. See a detailed "
"note after the table."
msgstr ""
"**注意:** これらの演算子は C++ と同じ動作をしますが、Python、JavaScript など"
"を使用しているユーザーにとっては予期しない動作である可能性があります。表の後"
"の詳細な注意を参照してください。"

msgid "``x + y``"
msgstr "``x + y``"

msgid "``x - y``"
msgstr "``x - y``"

msgid "Addition (or Concatenation) / Subtraction"
msgstr "加算 (もしくは配列の連結) / 減算"

msgid "``x << y``"
msgstr "``x << y``"

msgid "``x >> y``"
msgstr "``x >> y``"

msgid "Bit shifting"
msgstr "ビットシフト"

msgid "``x & y``"
msgstr "``x & y``"

msgid "Bitwise AND"
msgstr "ビットAND"

msgid "``x ^ y``"
msgstr "``x ^ y``"

msgid "Bitwise XOR"
msgstr "ビットXOR"

msgid "``x | y``"
msgstr "``x | y``"

msgid "Bitwise OR"
msgstr "ビットOR"

msgid "``x == y``"
msgstr "``x == y``"

msgid "``x != y``"
msgstr "``x != y``"

msgid "``x < y``"
msgstr "``x < y``"

msgid "``x > y``"
msgstr "``x > y``"

msgid "``x <= y``"
msgstr "``x <= y``"

msgid "``x >= y``"
msgstr "``x >= y``"

msgid "Comparison"
msgstr "比較"

msgid "See a detailed note after the table."
msgstr "表の後の詳細注記を参照してください。"

msgid "``x in y``"
msgstr "``x in y``"

msgid "``x not in y``"
msgstr "``x not in y``"

msgid "Inclusion checking"
msgstr "包含チェック"

msgid "``in`` is also used with the for_ keyword as part of the syntax."
msgstr "``in`` は、構文の一部として for_ キーワードとともに使用されます。"

msgid "``not x``"
msgstr "``not x``"

msgid "``!x``"
msgstr "``!x``"

msgid "Boolean NOT and its :ref:`unrecommended <boolean_operators>` alias"
msgstr "ブール演算NOT とその :ref:`非推奨のエイリアス <boolean_operators>`"

msgid "``x and y``"
msgstr "``x and y``"

msgid "``x && y``"
msgstr "``x && y``"

msgid "Boolean AND and its :ref:`unrecommended <boolean_operators>` alias"
msgstr "ブール演算ANDとその :ref:`非推奨のエイリアス <boolean_operators>`"

msgid "``x or y``"
msgstr "``x or y``"

msgid "``x || y``"
msgstr "``x || y``"

msgid "Boolean OR and its :ref:`unrecommended <boolean_operators>` alias"
msgstr "ブール演算ORとその :ref:`非推奨のエイリアス <boolean_operators>`"

msgid "``true_expr if cond else false_expr``"
msgstr "``true_expr if cond else false_expr``"

msgid "Ternary if/else"
msgstr "三項演算子の if/else"

msgid "``x as Node``"
msgstr "``x as Node``"

msgid "`Type casting <casting_>`_"
msgstr "`型のキャスト <casting_>`_"

msgid "``x = y``"
msgstr "``x = y``"

msgid "``x += y``"
msgstr "``x += y``"

msgid "``x -= y``"
msgstr "``x -= y``"

msgid "``x *= y``"
msgstr "``x *= y``"

msgid "``x /= y``"
msgstr "``x /= y``"

msgid "``x **= y``"
msgstr "``x **= y``"

msgid "``x %= y``"
msgstr "``x %= y``"

msgid "``x &= y``"
msgstr "``x &= y``"

msgid "``x |= y``"
msgstr "``x |= y``"

msgid "``x ^= y``"
msgstr "``x ^= y``"

msgid "``x <<= y``"
msgstr "``x <<= y``"

msgid "``x >>= y``"
msgstr "``x >>= y``"

msgid "Assignment (lowest priority)"
msgstr "代入 (優先度は最低)"

msgid "You cannot use an assignment operator inside an expression."
msgstr "式の中で代入演算子を使用することはできません。"

msgid "The behavior of some operators may differ from what you expect:"
msgstr "一部の演算子の動作は、期待とは異なる場合があります。"

msgid ""
"If both operands of the ``/`` operator are :ref:`int <class_int>`, then "
"integer division is performed instead of fractional. For example ``5 / 2 == "
"2``, not ``2.5``. If this is not desired, use at least one :ref:`float "
"<class_float>` literal (``x / 2.0``), cast (``float(x) / y``), or multiply "
"by ``1.0`` (``x * 1.0 / y``)."
msgstr ""
"``/`` 演算子の両オペランドが :ref:`int <class_int>` の場合、整数の除算が実行"
"されます。たとえば ``5 / 2 == 2`` となり、結果は ``2.5`` ではありません。これ"
"が望ましくない場合は、少なくとも1つのリテラルを :ref:`float <class_float>` に"
"する (例: ``x / 2.0``)か、片方をキャストする (``float(x) / y``)か、片方を "
"``1.0`` で乗算する (例: ``x * 1.0 / y``)を行うようにしてください。"

msgid ""
"The ``%`` operator is only available for ints, for floats use "
"the :ref:`fmod() <class_@GlobalScope_method_fmod>` function."
msgstr ""
"``%`` 演算子は int に対してのみ使用でき、float に対しては :ref:`fmod() "
"<class_@GlobalScope_method_fmod>` 関数を使用します。"

msgid ""
"For negative values, the ``%`` operator and ``fmod()`` use `truncation "
"<https://en.wikipedia.org/wiki/Truncation>`_ instead of rounding towards "
"negative infinity. This means that the remainder has a sign. If you need the "
"remainder in a mathematical sense, use the :ref:`posmod() "
"<class_@GlobalScope_method_posmod>` and :ref:`fposmod() "
"<class_@GlobalScope_method_fposmod>` functions instead."
msgstr ""
"負の値の場合 ``%`` 演算子と ``fmod()`` は、負の無限大に向かって丸める代わり"
"に `truncation <https://en.wikipedia.org/wiki/Truncation>`_ を使用します。こ"
"れは、余りに符号があることを意味します。数学的な意味で剰余が必要な場合は、代"
"わりに :ref:`posmod() <class_@GlobalScope_method_posmod>` 関数"
"と :ref:`fposmod() <class_@GlobalScope_method_fposmod>` 関数を使用してくださ"
"い。"

msgid ""
"The ``==`` and ``!=`` operators sometimes allow you to compare values of "
"different types (for example, ``1 == 1.0`` is true), but in other cases it "
"can cause a runtime error. If you're not sure about the types of the "
"operands, you can safely use the :ref:`is_same() "
"<class_@GlobalScope_method_is_same>` function (but note that it is more "
"strict about types and references). To compare floats, use "
"the :ref:`is_equal_approx() <class_@GlobalScope_method_is_equal_approx>` "
"and :ref:`is_zero_approx() <class_@GlobalScope_method_is_zero_approx>` "
"functions instead."
msgstr ""
"``==`` および ``!=`` 演算子を使用すると、異なる型の値を比較できる場合がありま"
"す (たとえば ``1 == 1.0`` は true)。ただし、それ以外の場合は実行時エラーが発"
"生する可能性があります。オペランドの型がわからない場合は、 :ref:`is_same() "
"<class_@GlobalScope_method_is_same>` 関数を安全に使用できます (ただし型と参照"
"に関しては、より厳密な判定が行われることに注意してください)。浮動小数点数を比"
"較するには、代わりに :ref:`is_equal_approx() "
"<class_@GlobalScope_method_is_equal_approx>` 関数と :ref:`is_zero_approx() "
"<class_@GlobalScope_method_is_zero_approx>` 関数を使用します。"

msgid "Literals"
msgstr "リテラル"

msgid "**Example(s)**"
msgstr "**例**"

msgid "Null value"
msgstr "null値"

msgid "``false``, ``true``"
msgstr "``false``, ``true``"

msgid "Boolean values"
msgstr "ブール値"

msgid "``45``"
msgstr "``45``"

msgid "Base 10 integer"
msgstr "10進整数"

msgid "``0x8f51``"
msgstr "``0x8f51``"

msgid "Base 16 (hexadecimal) integer"
msgstr "16進整数"

msgid "``0b101010``"
msgstr "``0b101010``"

msgid "Base 2 (binary) integer"
msgstr "2進整数"

msgid "``3.14``, ``58.1e-10``"
msgstr "``3.14``, ``58.1e-10``"

msgid "Floating-point number (real)"
msgstr "浮動小数点数(実数)"

msgid "``\"Hello\"``, ``'Hi'``"
msgstr "``\"Hello\"``, ``'Hi'``"

msgid "Regular strings"
msgstr "通常の文字列"

msgid "``\"\"\"Hello\"\"\"``, ``'''Hi'''``"
msgstr "``\"\"\"Hello\"\"\"``, ``'''Hi'''``"

msgid "Triple-quoted regular strings"
msgstr "三重引用符で囲まれた通常の文字列"

msgid "``r\"Hello\"``, ``r'Hi'``"
msgstr "``r\"Hello\"``, ``r'Hi'``"

msgid "Raw strings"
msgstr "raw文字列"

msgid "``r\"\"\"Hello\"\"\"``, ``r'''Hi'''``"
msgstr "``r\"\"\"Hello\"\"\"``, ``r'''Hi'''``"

msgid "Triple-quoted raw strings"
msgstr "三重引用符で囲まれたraw文字列"

msgid "``&\"name\"``"
msgstr "``&\"name\"``"

msgid ":ref:`StringName <class_StringName>`"
msgstr ":ref:`StringName <class_StringName>`"

msgid "``^\"Node/Label\"``"
msgstr "``^\"Node/Label\"``"

msgid ":ref:`NodePath <class_NodePath>`"
msgstr ":ref:`NodePath <class_NodePath>`"

msgid ""
"There are also two constructs that look like literals, but actually are not:"
msgstr ""
"リテラルのように見えるが、実際にはそうではない2つの短縮構文もあります。"

msgid "**Example**"
msgstr "**例**"

msgid "``$NodePath``"
msgstr "``$NodePath``"

msgid "Shorthand for ``get_node(\"NodePath\")``"
msgstr "``get_node( \"NodePath\")`` の短縮形"

msgid "``%UniqueNode``"
msgstr "``%UniqueNode``"

msgid "Shorthand for ``get_node(\"%UniqueNode\")``"
msgstr "``get_node(\"%UniqueNode\")`` の短縮形"

msgid "**Regular string literals** can contain the following escape sequences:"
msgstr ""
"**通常の文字列リテラル** には、次のエスケープシーケンスを含めることができま"
"す:"

msgid "**Escape sequence**"
msgstr "**エスケープシーケンス**"

msgid "**Expands to**"
msgstr "**に展開します**"

msgid "``\\n``"
msgstr "``\\n``"

msgid "Newline (line feed)"
msgstr "改行 (line feed)"

msgid "``\\t``"
msgstr "``\\t``"

msgid "Horizontal tab character"
msgstr "水平タブ文字"

msgid "``\\r``"
msgstr "``\\r``"

msgid "Carriage return"
msgstr "リターン"

msgid "``\\a``"
msgstr "``\\a``"

msgid "Alert (beep/bell)"
msgstr "アラート (ビープ／ベル)"

msgid "``\\b``"
msgstr "``\\b``"

msgid "Backspace"
msgstr "バックスペース"

msgid "``\\f``"
msgstr "``\\f``"

msgid "Formfeed page break"
msgstr "フォームフィードの改ページ"

msgid "``\\v``"
msgstr "``\\v``"

msgid "Vertical tab character"
msgstr "垂直タブ文字"

msgid "``\\\"``"
msgstr "``\\\"``"

msgid "Double quote"
msgstr "二重引用符"

msgid "``\\'``"
msgstr "``\\'``"

msgid "Single quote"
msgstr "一重引用符"

msgid "``\\\\``"
msgstr "``\\\\``"

msgid "Backslash"
msgstr "バックスラッシュ"

msgid "``\\uXXXX``"
msgstr "``\\uXXXX``"

msgid "UTF-16 Unicode codepoint ``XXXX`` (hexadecimal, case-insensitive)"
msgstr "UTF-16 Unicodeコードポイント ``XXXX`` (16進数、大文字小文字の区別なし)"

msgid "``\\UXXXXXX``"
msgstr "``\\UXXXXXX``"

msgid "UTF-32 Unicode codepoint ``XXXXXX`` (hexadecimal, case-insensitive)"
msgstr ""
"UTF-32 Unicodeコードポイント ``XXXXXX`` (16進数、大文字小文字の区別なし)"

msgid ""
"There are two ways to represent an escaped Unicode character above "
"``0xFFFF``:"
msgstr ""
"``0xFFFF`` より大きいエスケープされたUnicode文字を表す方法は 2 つあります。"

msgid ""
"as a `UTF-16 surrogate pair <https://en.wikipedia.org/wiki/"
"UTF-16#Code_points_from_U+010000_to_U+10FFFF>`_ ``\\uXXXX\\uXXXX``."
msgstr ""
"`UTF-16サロゲートペア <https://en.wikipedia.org/wiki/"
"UTF-16#Code_points_from_U+010000_to_U+10FFFF>`_ として ``\\uXXXX\\uXXXX`` 。"

msgid "as a single UTF-32 codepoint ``\\UXXXXXX``."
msgstr "単一のUTF-32コードポイントとして ``\\UXXXXXX`` 。"

msgid ""
"Also, using ``\\`` followed by a newline inside a string will allow you to "
"continue it in the next line, without inserting a newline character in the "
"string itself."
msgstr ""
"また文字列内で ``\\`` の後に改行を使用すると、文字列内に改行文字を挿入せずに"
"次の行に続けることができます。"

msgid ""
"A string enclosed in quotes of one type (for example ``\"``) can contain "
"quotes of another type (for example ``'``) without escaping. Triple-quoted "
"strings allow you to avoid escaping up to two consecutive quotes of the same "
"type (unless they are adjacent to the string edges)."
msgstr ""
"あるタイプの引用符で囲まれた文字列 (例: ``\"``) には、エスケープせずに別のタ"
"イプの引用符 (たとえば ``'``) を含めることができます。また三重引用符で囲まれ"
"た文字列では、同じタイプでも連続する2つの引用符までのエスケープを回避できま"
"す (文字列の端に隣接している場合を除く)。"

msgid ""
"**Raw string literals** always encode the string as it appears in the source "
"code. This is especially useful for regular expressions. A raw string "
"literal doesn't process escape sequences, however it does recognize ``\\\\`` "
"and ``\\\"`` (``\\'``) and replaces them with themselves. Thus, a string can "
"have a quote that matches the opening one, but only if it's preceded by a "
"backslash."
msgstr ""
"**raw文字列リテラル** は常にソース コードに表示されるとおりに文字列をエンコー"
"ドします。これは正規表現で特に役立ちます。raw文字列リテラルはエスケープシーケ"
"ンスを処理しませんが、 ``\\\\`` と ``\\\"`` (``\\'``) は認識して、それら自体"
"に置き換えます。したがって文字列には引用符を含めることができます。これは先頭"
"のものと一致しますが、前にバックスラッシュがある場合に限ります。"

msgid ""
"Some strings cannot be represented using raw string literals: you cannot "
"have an odd number of backslashes at the end of a string or have an "
"unescaped opening quote inside the string. However, in practice this doesn't "
"matter since you can use a different quote type or use concatenation with a "
"regular string literal."
msgstr ""
"一部の文字列はraw文字列リテラルを使用して表すことができません。文字列の末尾に"
"奇数のバックスラッシュを使用したり、文字列内にエスケープされていない開始引用"
"符を使用したりすることはできません。ただし実際には、別の引用符の種類を使用し"
"たり、通常の文字列リテラルとの連結を使用したりできるため、これは問題にはなり"
"ません。"

msgid "GDScript also supports :ref:`format strings <doc_gdscript_printf>`."
msgstr ""
"GDScriptは :ref:`フォーマット文字列 <doc_gdscript_printf>` もサポートしていま"
"す。"

msgid "Annotations"
msgstr "アノテーション"

msgid ""
"Annotations are special tokens in GDScript that act as modifiers to a script "
"or its code and may affect how the script is treated by the Godot engine or "
"editor."
msgstr ""
"アノテーションはスクリプトまたはそのコードに対する修飾子として機能する、"
"GDScriptの特別なトークンでありGodotエンジンまたはエディタによるスクリプトの処"
"理方法に影響を与える可能性があります。"

msgid ""
"Every annotation starts with the ``@`` character and is specified by a name. "
"A detailed description and example for each annotation can be found inside "
"the :ref:`GDScript class reference <class_@GDScript>`."
msgstr ""
"全てのアノテーションは ``@`` 文字で始まり、名前によって指定されます。各アノ"
"テーションの詳細な説明と例は、:ref:`GDScriptクラスリファレンス "
"<class_@GDScript>` 内にあります。"

msgid ""
"For more information about exporting properties, read the :ref:`GDScript "
"exports <doc_gdscript_exports>` article."
msgstr ""
"プロパティのエクスポートの詳細については、:ref:`GDScriptエクスポート "
"<doc_gdscript_exports>` の記事を参照してください。"

msgid ""
"Annotations can be specified one per line or all in the same line. They "
"affect the next statement that isn't an annotation. Annotations can have "
"arguments sent between parentheses and separated by commas."
msgstr ""
"アノテーションは1行に1つ指定することも、同じ行にすべて指定することもできま"
"す。これらはアノテーションではない次のステートメントに影響します。アノテー"
"ションには括弧で囲み、カンマで区切って指定する引数を含めることができます。"

msgid "``@onready`` annotation"
msgstr "``@onready`` アノテーション"

msgid ""
"When using nodes, it's common to desire to keep references to parts of the "
"scene in a variable. As scenes are only warranted to be configured when "
"entering the active scene tree, the sub-nodes can only be obtained when a "
"call to ``Node._ready()`` is made."
msgstr ""
"ノードを使用する場合、シーンの一部への参照を変数に保持することが一般的です。"
"シーンはアクティブなシーンツリーに入ったときにのみ設定されるので、サブノード"
"は ``Node._ready()`` への呼び出しが行われた時にのみ取得できます。"

msgid ""
"Therefore, the ``ONREADY_WITH_EXPORT`` warning is generated, which is "
"treated as an error by default. We do not recommend disabling or ignoring it."
msgstr ""
"したがってデフォルトではエラーとして扱われる ``ONREADY_WITH_EXPORT`` 警告が生"
"成されます。これを無効にしたり無視したりすることはお勧めしません。"

msgid "Comments"
msgstr "コメント"

msgid ""
"Anything from a ``#`` to the end of the line is ignored and is considered a "
"comment."
msgstr "``#`` から行末までは無視され、コメントと見なされます。"

msgid ""
"In the Godot script editor, special keywords are highlighted within comments "
"to bring the user's attention to specific comments:"
msgstr ""
"Godotスクリプト エディタではユーザーの注意を特定のコメントに向けるために、コ"
"メント内の特別なキーワードが強調表示されます。"

msgid ""
"**Critical** *(appears in red)*: ``ALERT``, ``ATTENTION``, ``CAUTION``, "
"``CRITICAL``, ``DANGER``, ``SECURITY``"
msgstr ""
"**致命的** *(赤色で表示)*: ``ALERT``, ``ATTENTION``, ``CAUTION``, "
"``CRITICAL``, ``DANGER``, ``SECURITY``"

msgid ""
"**Warning** *(appears in yellow)*: ``BUG``, ``DEPRECATED``, ``FIXME``, "
"``HACK``, ``TASK``, ``TBD``, ``TODO``, ``WARNING``"
msgstr ""
"**警告** *(黄色で表示)*: ``BUG``, ``DEPRECATED``, ``FIXME``, ``HACK``, "
"``TASK``, ``TBD``, ``TODO``, ``WARNING``"

msgid ""
"**Notice** *(appears in green)*: ``INFO``, ``NOTE``, ``NOTICE``, ``TEST``, "
"``TESTING``"
msgstr ""
"**情報** *(緑色で表示)*: ``INFO``, ``NOTE``, ``NOTICE``, ``TEST``, "
"``TESTING``"

msgid ""
"These keywords are case-sensitive, so they must be written in uppercase for "
"them to be recognized:"
msgstr ""
"これらのキーワードは大文字と小文字が区別されるため、認識されるには大文字で記"
"述する必要があります。"

msgid ""
"The list of highlighted keywords and their colors can be changed in the "
"**Text Editor > Theme > Comment Markers** section of the Editor Settings."
msgstr ""
"ハイライトされたキーワードのリストとその色は、エディター設定の **テキスト エ"
"ディター > テーマ > コメントマーカー** セクションで変更できます。"

msgid "Code regions"
msgstr "コード領域"

msgid ""
"Code regions are special types of comments that the script editor "
"understands as *foldable regions*. This means that after writing code region "
"comments, you can collapse and expand the region by clicking the arrow that "
"appears at the left of the comment. This arrow appears within a purple "
"square to be distinguishable from standard code folding."
msgstr ""
"コード領域はスクリプトエディタが *折りたたみ可能な領域* として認識する特別な"
"タイプのコメントです。これはコード領域のコメントを記述した後、コメントの左側"
"に表示される矢印をクリックすることで、領域を折りたたんだり展開したりできるこ"
"とを意味します。この矢印は標準のコード折りたたみと区別できるように、紫色の四"
"角形の中に表示されます。"

msgid "The syntax is as follows:"
msgstr "コード領域の構文は次のとおりです。"

msgid ""
"To create a code region quickly, select several lines in the script editor, "
"right-click the selection then choose **Create Code Region**. The region "
"description will be selected automatically for editing."
msgstr ""
"コード領域をすばやく作成するには、スクリプトエディタで複数の行を選択し、選択"
"部分を右クリックして **コード領域の作成** を選択します。領域の説明は自動的に"
"選択されます。"

msgid "It is possible to nest code regions within other code regions."
msgstr "コード領域を他のコード領域内にネストすることができます。"

msgid "Here's a concrete usage example of code regions:"
msgstr "コード領域の具体的な使用例を次に示します:"

msgid ""
"This can be useful to organize large chunks of code into easier to "
"understand sections. However, remember that external editors generally don't "
"support this feature, so make sure your code is easy to follow even when not "
"relying on folding code regions."
msgstr ""
"これはコードの大きな塊を理解しやすいセクションに整理するのに役立ちます。ただ"
"し外部エディタはこの機能をサポートしていないことがあることに注意してくださ"
"い。そのため折りたたみコード領域に依存しない場合でも、コードが理解しやすいも"
"のになるよう気を付けてください。"

msgid ""
"Individual functions and indented sections (such as ``if`` and ``for``) can "
"*always* be collapsed in the script editor. This means you should avoid "
"using a code region to contain a single function or indented section, as it "
"won't bring much of a benefit. Code regions work best when they're used to "
"group multiple elements together."
msgstr ""
"個々の関数とインデントされたセクション (``if`` や ``for`` など) は、スクリプ"
"トエディタで*常に*折りたたむことができます。つまりコード領域に単一の関数やイ"
"ンデントされたセクションを含めるのは、あまりメリットがないため使用しないでく"
"ださい。コード領域は複数の要素をグループ化するために使用される場合に最も効果"
"的に機能します。"

msgid "Line continuation"
msgstr "行の継続"

msgid ""
"A line of code in GDScript can be continued on the next line by using a "
"backslash (``\\``). Add one at the end of a line and the code on the next "
"line will act like it's where the backslash is. Here is an example:"
msgstr ""
"GDScriptのコード行はバックスラッシュ (``\\``) を使用して次の行に続けることが"
"できます。行の最後に1つ追加すると、次の行のコードはバックスラッシュがある場所"
"であるかのように動作します。以下に例を示します。"

msgid "A line can be continued multiple times like this:"
msgstr "次のように行を複数回続けることができます。"

msgid "Built-in types"
msgstr "組み込み型"

msgid ""
"Built-in types are stack-allocated. They are passed as values. This means a "
"copy is created on each assignment or when passing them as arguments to "
"functions. The exceptions are ``Object``, ``Array``, ``Dictionary``, and "
"packed arrays (such as ``PackedByteArray``), which are passed by reference "
"so they are shared. All arrays, ``Dictionary``, and some objects (``Node``, "
"``Resource``) have a ``duplicate()`` method that allows you to make a copy."
msgstr ""
"組み込み型はスタック割り当てられます。これらは値として渡されます。つまり割り"
"当てごとに、または関数に引数として渡すときにコピーが作成されます。例外は "
"``Object`` と ``Array`` と ``Dictionary`` およびパック配列 "
"(``PackedByteArray`` など) で、これらは参照によって渡され共有されます。すべて"
"の配列、 ``Dictionary`` 、および一部のオブジェクト (``Node`` 、 "
"``Resource``) には、コピーを作成できる ``duplicate()`` メソッドがあります。"

msgid "Basic built-in types"
msgstr "組み込み型ベース"

msgid "A variable in GDScript can be assigned to several built-in types."
msgstr "GDScriptの変数は、いくつかの組み込み型に割り当てることができます。"

msgid "null"
msgstr "null"

msgid ""
"``null`` is an empty data type that contains no information and can not be "
"assigned any other value."
msgstr ""
"``null`` は、情報を含まない空のデータ型であり、他の値を割り当てることはできま"
"せん。"

msgid ":ref:`bool <class_bool>`"
msgstr "\\ :ref:`bool <class_bool>`"

msgid "Short for \"boolean\", it can only contain ``true`` or ``false``."
msgstr ""
"Booleanデータ型には、 ``true`` または ``false`` のみを含めることができます。"

msgid ":ref:`int <class_int>`"
msgstr "\\ :ref:`int <class_int>`"

msgid ""
"Short for \"integer\", it stores whole numbers (positive and negative). It "
"is stored as a 64-bit value, equivalent to ``int64_t`` in C++."
msgstr ""
"\"integer\" の略で、整数(正と負)を格納します。64ビット値で格納し、C++の "
"``int64_t`` と同等です。"

msgid ":ref:`float <class_float>`"
msgstr "\\ :ref:`float <class_float>`"

msgid ""
"Stores real numbers, including decimals, using floating-point values. It is "
"stored as a 64-bit value, equivalent to ``double`` in C++. Note: Currently, "
"data structures such as ``Vector2``, ``Vector3``, and ``PackedFloat32Array`` "
"store 32-bit single-precision ``float`` values."
msgstr ""
"浮動小数点値を使用して、小数を含む実数を格納します。 64ビット値で格納し、C+"
"+の ``double`` と同等です。注: 現在 ``Vector2`` 、 ``Vector3`` 、 "
"``PackedFloat32Array`` などのデータ構造には32ビット単精度の ``float`` 値が格"
"納されています。"

msgid ":ref:`String <class_String>`"
msgstr "\\ :ref:`String <class_String>`"

msgid ""
"A sequence of characters in `Unicode format <https://en.wikipedia.org/wiki/"
"Unicode>`_."
msgstr ""
"`Unicode 形式 <https://en.wikipedia.org/wiki/Unicode>`_ の文字のシーケンス。"

msgid ""
"An immutable string that allows only one instance of each name. They are "
"slower to create and may result in waiting for locks when multithreading. In "
"exchange, they're very fast to compare, which makes them good candidates for "
"dictionary keys."
msgstr ""
"名前のインスタンスを1つだけ許可する不変の文字列。これは作成に時間がかかり、マ"
"ルチスレッド時にロックで待機する可能性があります。その代わりに比較が非常に高"
"速であるため、辞書キーとして適しています。"

msgid ""
"A pre-parsed path to a node or a node property.  It can be easily assigned "
"to, and from, a String. They are useful to interact with the tree to get a "
"node, or affecting properties like with :ref:`Tweens <class_Tween>`."
msgstr ""
"ノードまたはノードプロパティへ事前に解析されたパス。 文字列への割り当て、また"
"は文字列からの割り当てを簡単に行うことができます。これらはツリーと対話して"
"ノードを取得したり、 :ref:`Tweens <class_Tween>` などに指定するプロパティで使"
"用するのに便利です。"

msgid "Vector built-in types"
msgstr "組み込み型ベクトル"

msgid ":ref:`Vector2 <class_Vector2>`"
msgstr "\\ :ref:`Vector2 <class_Vector2>`"

msgid ""
"2D vector type containing ``x`` and ``y`` fields. Can also be accessed as an "
"array."
msgstr ""
"``x`` と ``y`` を含む2Dベクトルタイプ。配列としてアクセスすることもできます。"

msgid ":ref:`Vector2i <class_Vector2i>`"
msgstr "\\ :ref:`Vector2i <class_Vector2i>`"

msgid ""
"Same as a Vector2 but the components are integers. Useful for representing "
"items in a 2D grid."
msgstr ""
"Vector2と同じですが、コンポーネントは整数です。 2Dグリッドで項目を表現する場"
"合に便利です。"

msgid ":ref:`Rect2 <class_Rect2>`"
msgstr "\\ :ref:`Rect2 <class_Rect2>`"

msgid ""
"2D Rectangle type containing two vectors fields: ``position`` and ``size``. "
"Also contains an ``end`` field which is ``position + size``."
msgstr ""
"``position`` と ``size`` の2つのベクトルフィールドを含む2D矩形タイプ。また"
"は、 ``position+size`` である ``end`` フィールドを含みます。"

msgid ":ref:`Vector3 <class_Vector3>`"
msgstr "\\ :ref:`Vector3 <class_Vector3>`"

msgid ""
"3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be "
"accessed as an array."
msgstr ""
"``x``、 ``y`` 、 ``z`` フィールドを含む3Dベクトルタイプ。配列としてアクセスす"
"ることもできます。"

msgid ":ref:`Vector3i <class_Vector3i>`"
msgstr "\\ :ref:`Vector3i <class_Vector3i>`"

msgid ""
"Same as Vector3 but the components are integers. Can be use for indexing "
"items in a 3D grid."
msgstr ""
"Vector3と同じですが、コンポーネントは整数です。 3D グリッド内の項目のインデッ"
"クス付けに使用できます。"

msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr "\\ :ref:`Transform2D <class_Transform2D>`"

msgid "3×2 matrix used for 2D transforms."
msgstr "2次元の幾何学変換に使用される3x2行列です。"

msgid ":ref:`Plane <class_Plane>`"
msgstr "\\ :ref:`Plane <class_Plane>`"

msgid ""
"3D Plane type in normalized form that contains a ``normal`` vector field and "
"a ``d`` scalar distance."
msgstr ""
"``normal`` ベクトルフィールドと ``d`` スカラー距離を含む正規化形式の3D平面型"
"です。"

msgid ":ref:`Quaternion <class_Quaternion>`"
msgstr "\\ :ref:`Quaternion <class_Quaternion>`"

msgid ""
"Quaternion is a datatype used for representing a 3D rotation. It's useful "
"for interpolating rotations."
msgstr ""
"四元数は3D回転を表すために使用されるデータ型です。 回転を補間するのに便利で"
"す。"

msgid ":ref:`AABB <class_AABB>`"
msgstr "\\ :ref:`AABB <class_AABB>`"

msgid ""
"Axis-aligned bounding box (or 3D box) contains 2 vectors fields: "
"``position`` and ``size``. Also contains an ``end`` field which is "
"``position + size``."
msgstr ""
"座標軸に平行な直方体(または3Dボックス)には、 ``position`` と ``size`` の2つの"
"ベクトルフィールドがあります。または、 ``position+size`` である ``end`` "
"フィールドを含みます。"

msgid ":ref:`Basis <class_Basis>`"
msgstr "\\ :ref:`Basis <class_Basis>`"

msgid ""
"3x3 matrix used for 3D rotation and scale. It contains 3 vector fields "
"(``x``, ``y`` and ``z``) and can also be accessed as an array of 3D vectors."
msgstr ""
"3Dの回転と拡大縮小に使用される3x3の行列。これには3つのベクトルフィールド"
"(``x``\\ 、\\ ``y``\\ 、\\ ``z``)が含まれ、3Dベクトルの配列としてアクセスする"
"こともできます。"

msgid ":ref:`Transform3D <class_Transform3D>`"
msgstr "\\ :ref:`Transform3D <class_Transform3D>`"

msgid ""
"3D Transform contains a Basis field ``basis`` and a Vector3 field ``origin``."
msgstr ""
"3DTransformには、基底(基準軸)フィールド ``basis`` とVector3フィールド "
"``origin`` が含まれています。"

msgid "Engine built-in types"
msgstr "エンジン組み込み型"

msgid ":ref:`Color <class_Color>`"
msgstr "\\ :ref:`Color <class_Color>`"

msgid ""
"Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can also "
"be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""
"カラーデータ型は、 ``r`` 、 ``g`` 、 ``b``,および ``a`` フィールドを含みま"
"す。色相/彩度/明度の ``h`` 、 ``s`` 、 ``v`` としてアクセスすることもできま"
"す。"

msgid ":ref:`RID <class_RID>`"
msgstr "\\ :ref:`RID <class_RID>`"

msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""
"リソースID(RID)。サーバーは汎用RIDを使用して不透明なデータを参照します。"

msgid ":ref:`Object <class_Object>`"
msgstr "\\ :ref:`Object <class_Object>`"

msgid "Base class for anything that is not a built-in type."
msgstr "組み込み型でないものすべての基本クラス。"

msgid "Container built-in types"
msgstr "組み込み型コンテナ"

msgid ":ref:`Array <class_Array>`"
msgstr "\\ :ref:`配列<class_Array>`"

msgid ""
"Generic sequence of arbitrary object types, including other arrays or "
"dictionaries (see below). The array can resize dynamically. Arrays are "
"indexed starting from index ``0``. Negative indices count from the end."
msgstr ""
"他の配列や辞書(下記参照)を含む、任意のオブジェクトタイプの一般的なシーケン"
"ス、他の配列や辞書を含みます。(下を見てください)。配列のサイズは動的に変更で"
"きます。配列にはインデックス ``0`` から始まるインデックスが付けられます。マイ"
"ナスのインデックスは最後から数えます。"

msgid "Typed arrays"
msgstr "型付き配列 (Typed arrays)"

msgid ""
"Godot 4.0 added support for typed arrays. On write operations, Godot checks "
"that element values match the specified type, so the array cannot contain "
"invalid values. The GDScript static analyzer takes typed arrays into "
"account, however array methods like ``front()`` and ``back()`` still have "
"the ``Variant`` return type."
msgstr ""
"Godot 4.0では型付き配列のサポートが追加されました。書き込み操作の際、Godotは"
"要素の値が指定された型と一致するかどうかをチェックするため、配列に無効な値を"
"含めることはできません。 GDScript 静的アナライザーは型付き配列を考慮します"
"が、 ``front()`` や ``back()`` のような配列メソッドの戻り値は引き続き "
"``Variant`` 型になります。"

msgid ""
"Typed arrays have the syntax ``Array[Type]``, where ``Type`` can be any "
"``Variant`` type, native or user class, or enum. Nested array types (like "
"``Array[Array[int]]``) are not supported."
msgstr ""
"型付き配列には ``Array[Type]`` という構文があり、 ``Type`` は任意の "
"``Variant`` 型、ネイティブクラス、ユーザクラス、あるいは列挙型になります。入"
"れ子になった配列型 (``Array[Array[int]]`` など) はサポートされていません。"

msgid "``Array`` and ``Array[Variant]`` are the same thing."
msgstr "``Array`` と ``Array[Variant]`` は同じです。"

msgid ""
"Arrays are passed by reference, so the array element type is also an "
"attribute of the in-memory structure referenced by a variable in runtime. "
"The static type of a variable restricts the structures that it can reference "
"to. Therefore, you **cannot** assign an array with a different element type, "
"even if the type is a subtype of the required type."
msgstr ""
"配列は参照によって渡されるため、配列要素の型は実行時に参照されるメモリ内構造"
"の属性でもあります。変数の静的型は参照できる値やクラスを制限します。したがっ"
"て指定された型がその型のサブクラスであっても、異なる要素型の配列を代入するこ"
"とは**できません**。"

msgid ""
"The only exception was made for the ``Array`` (``Array[Variant]``) type, for "
"user convenience and compatibility with old code. However, operations on "
"untyped arrays are considered unsafe."
msgstr ""
"ユーザーの利便性と古いコードとの互換性のために、 ``Array`` "
"(``Array[Variant]``) 型については唯一の例外が設けられています。ただし型なし配"
"列に対する操作は安全ではないと考えられます。"

msgid "Packed arrays"
msgstr "パック配列 (Packed arrays)"

msgid ""
":ref:`PackedByteArray <class_PackedByteArray>`: An array of bytes (integers "
"from 0 to 255)."
msgstr ""
"\\ :ref:`PackedByteArray <class_PackedByteArray>`: バイト型の配列(0～255の整"
"数)。"

msgid ""
":ref:`PackedInt32Array <class_PackedInt32Array>`: An array of 32-bit "
"integers."
msgstr ""
"\\ :ref:`PackedInt32Array <class_PackedInt32Array>`: 32ビット整数型の配列。"

msgid ""
":ref:`PackedInt64Array <class_PackedInt64Array>`: An array of 64-bit "
"integers."
msgstr ""
"\\ :ref:`PackedInt64Array <class_PackedInt64Array>`: 64ビット整数型の配列。"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>`: An array of 32-bit "
"floats."
msgstr ""
"\\ :ref:`PackedFloat32Array <class_PackedFloat32Array>`: 32ビット浮動小数点型"
"の配列。"

msgid ""
":ref:`PackedFloat64Array <class_PackedFloat64Array>`: An array of 64-bit "
"floats."
msgstr ""
"\\ :ref:`PackedFloat64Array <class_PackedFloat64Array>`: 64ビット浮動小数点型"
"の配列。"

msgid ""
":ref:`PackedStringArray <class_PackedStringArray>`: An array of strings."
msgstr ""
"\\ :ref:`PackedStringArray <class_PackedStringArray>`: 文字列型の配列。"

msgid ""
":ref:`PackedVector2Array <class_PackedVector2Array>`: An array "
"of :ref:`Vector2 <class_Vector2>` values."
msgstr ""
"\\ :ref:`PackedVector2Array <class_PackedVector2Array>`: \\ :ref:`Vector2 "
"<class_Vector2>` の配列。"

msgid ""
":ref:`PackedVector3Array <class_PackedVector3Array>`: An array "
"of :ref:`Vector3 <class_Vector3>` values."
msgstr ""
"\\ :ref:`PackedVector3Array <class_PackedVector3Array>`: \\ :ref:`Vector3 "
"<class_Vector3>` の配列。"

msgid ""
":ref:`PackedColorArray <class_PackedColorArray>`: An array of :ref:`Color "
"<class_Color>` values."
msgstr ""
"\\ :ref:`PackedColorArray <class_PackedColorArray>`: \\ :ref:`Color "
"<class_Color>` の配列。"

msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr "\\ :ref:`Dictionary <class_Dictionary>`"

msgid "Associative container which contains values referenced by unique keys."
msgstr "一意のキーによって参照される値を含む連想コンテナです。"

msgid ""
"Lua-style table syntax is also supported. Lua-style uses ``=`` instead of "
"``:`` and doesn't use quotes to mark string keys (making for slightly less "
"to write). However, keys written in this form can't start with a digit (like "
"any GDScript identifier), and must be string literals."
msgstr ""
"Luaスタイルのテーブル構文もサポートされています。 Luaスタイルでは、 ``:`` の"
"代わりに ``=`` を使用し、文字列のキーをマークするために引用符を使用しません"
"(記述するのがやや少なくなります)。ただし、この形式で記述されたキーは "
"(GDScript 識別子と同様に) 数字で始めることはできず、文字列リテラルである必要"
"があります。"

msgid ""
"The bracket syntax can be used to access properties of "
"any :ref:`class_Object`, not just Dictionaries. Keep in mind it will cause a "
"script error when attempting to index a non-existing property. To avoid "
"this, use the :ref:`Object.get() <class_Object_method_get>` "
"and :ref:`Object.set() <class_Object_method_set>` methods instead."
msgstr ""
"ブラケット構文は、辞書だけでなく、任意の :ref:`class_Object` のプロパティにア"
"クセスするために使用することができます。存在しないプロパティを添え字にする"
"と、スクリプトエラーが発生するので注意してください。これを避けるには、代わり"
"に :ref:`Object.get() <class_Object_method_get>` や :ref:`Object.set() "
"<class_Object_method_set>` メソッドを使用します。"

msgid ":ref:`Signal <class_Signal>`"
msgstr "\\ :ref:`Signal <class_Signal>`"

msgid ""
"A signal is a message that can be emitted by an object to those who want to "
"listen to it. The Signal type can be used for passing the emitter around."
msgstr ""
"Signalはオブジェクトがリスナーへ発することができるメッセージです。 Signal型は"
"発信元を渡すために使用できます。"

msgid ""
"Signals are better used by getting them from actual objects, e.g. "
"``$Button.button_up``."
msgstr ""
"シグナルは実際のオブジェクトから取得することでより効果的に使用できます。例: "
"``$Button.button_up`` 。"

msgid ":ref:`Callable <class_Callable>`"
msgstr "\\ :ref:`Callable <class_Callable>`"

msgid ""
"Contains an object and a function, which is useful for passing functions as "
"values (e.g. when connecting to signals)."
msgstr ""
"Callableはオブジェクトと関数が含まれており、関数を値として渡す場合に便利です "
"(シグナルに接続する場合など)。"

msgid ""
"Getting a method as a member returns a callable. ``var x = "
"$Sprite2D.rotate`` will set the value of ``x`` to a callable with "
"``$Sprite2D`` as the object and ``rotate`` as the method."
msgstr ""
"メソッドをメンバーとして取得すると、Callableが返されます。 ``var x = "
"$Sprite2D.rotate`` は ``x`` の値をオブジェクトとして ``$Sprite2D`` 、メソッド"
"として ``rotate`` を使用してCallableに設定します。"

msgid "You can call it using the ``call`` method: ``x.call(PI)``."
msgstr ""
"``call`` メソッドを使用して呼び出すことができます。 例: ``x.call(PI)`` 。"

msgid "Variables"
msgstr "変数"

msgid ""
"Variables can exist as class members or local to functions. They are created "
"with the ``var`` keyword and may, optionally, be assigned a value upon "
"initialization."
msgstr ""
"変数はクラスメンバーとして存在することも、関数に対してローカルに存在すること"
"もできます。これらは ``var`` キーワードを使用して作成され、必要に応じて初期化"
"時に値が割り当てられます。"

msgid ""
"Variables can optionally have a type specification. When a type is "
"specified, the variable will be forced to have always that same type, and "
"trying to assign an incompatible value will raise an error."
msgstr ""
"変数にはオプションで型指定を指定できます。型を指定すると、変数は常に同じ型を"
"持つように強制され、互換性のない値を割り当てようとするとエラーが発生します。"

msgid ""
"Types are specified in the variable declaration using a ``:`` (colon) symbol "
"after the variable name, followed by the type."
msgstr ""
"型は、変数名の後に ``:`` (コロン)記号を使用して変数宣言内で指定され、その後に"
"型が続きます。"

msgid ""
"Type inference is only possible if the assigned value has a defined type, "
"otherwise it will raise an error."
msgstr ""
"型推論が可能なのは、割り当てられた値に型が定義されている場合だけです。定義さ"
"れていない場合は、エラーが発生します。"

msgid "Valid types are:"
msgstr "有効なタイプは以下のとおりです:"

msgid "Built-in types (Array, Vector2, int, String, etc.)."
msgstr "組み込み型(Array、Vector2、int、Stringなど)。"

msgid ""
"Constant names if they contain a script resource (``MyScript`` if you "
"declared ``const MyScript = preload(\"res://my_script.gd\")``)."
msgstr ""
"スクリプトリソースを含む場合は定数名( ``const MyScript = preload(\"res://"
"my_script.gd\")`` を宣言した場合は ``MyScript`` )。"

msgid ""
"Other classes in the same script, respecting scope "
"(``InnerClass.NestedClass`` if you declared ``class NestedClass`` inside the "
"``class InnerClass`` in the same scope)."
msgstr ""
"同じスクリプト内の他のクラス、スコープを尊重します"
"(``InnerClass.NestedClass`` もし ``class InnerClass`` 内で ``class "
"NestedClass`` を宣言した場合は は同じスコープです)。"

msgid "Script classes declared with the ``class_name`` keyword."
msgstr "``class_name`` キーワードで宣言されたスクリプトクラス。"

msgid "Autoloads registered as singletons."
msgstr "シングルトンとして登録されたオートロードオブジェクト。"

msgid ""
"While ``Variant`` is a valid type specification, it's not an actual type. It "
"only means there's no set type and is equivalent to not having a static type "
"at all. Therefore, inference is not allowed by default for ``Variant``, "
"since it's likely a mistake."
msgstr ""
"``Variant`` は有効な型指定ですが、実際の型ではありません。これは設定された型"
"がないことを意味するだけであり、静的型がまったくないことと同じです。したがっ"
"て ``Variant`` については間違いである可能性が高いため、デフォルトでは推論は許"
"可されません。"

msgid ""
"You can turn off this check, or make it only a warning, by changing it in "
"the project settings. See :ref:`doc_gdscript_warning_system` for details."
msgstr ""
"プロジェクト設定で変更することで、このチェックをオフにしたり警告のみにするこ"
"とができます。詳細については、:ref:`doc_gdscript_warning_system` を参照してく"
"ださい。"

msgid "Initialization order"
msgstr "初期化の順序"

msgid "Member variables are initialized in the following order:"
msgstr "メンバー変数は次の順序で初期化されます:"

msgid ""
"Depending on the variable's static type, the variable is either ``null`` "
"(untyped variables and objects) or has a default value of the type (``0`` "
"for ``int``, ``false`` for ``bool``, etc.)."
msgstr ""
"変数の静的型に応じて、変数は ``null`` (型指定されていない変数およびオブジェク"
"ト) であるか、その型のデフォルト値 (``int`` の場合は ``0`` 、 `bool` の場合"
"は ``false``) であるもの。"

msgid "If defined, the ``_init()`` method is called."
msgstr "``_init()`` メソッドが定義されている場合は呼び出されます。"

msgid ""
"When instantiating scenes and resources, the exported values are assigned."
msgstr ""
"シーンとリソースをインスタンス化するとき、エクスポートされた値が代入されま"
"す。"

msgid ""
"To fix this, move the ``_data`` variable definition above the ``a`` "
"definition or remove the empty dictionary assignment (``= {}``)."
msgstr ""
"これを修正するには ``_data`` 変数定義を ``a`` 定義の上に移動するか、空の辞書"
"割り当て (``= {}``) を削除します。"

msgid "Static variables"
msgstr "静的変数"

msgid ""
"Static variables belong to the class, not instances. This means that static "
"variables share values between multiple instances, unlike regular member "
"variables."
msgstr ""
"静的変数はインスタンスではなくクラスに属します。これは通常のメンバー変数とは"
"異なり、静的変数は複数のインスタンス間で値を共有することを意味します。"

msgid ""
"From inside a class, you can access static variables from any function, both "
"static and non-static. From outside the class, you can access static "
"variables using the class or an instance (the second is not recommended as "
"it is less readable)."
msgstr ""
"クラス内からは静的関数および非静的関数の両方から静的変数にアクセスできます。"
"クラスの外からはクラスまたはインスタンスを使用して静的変数にアクセスできます "
"(後者は可読性が低いためお勧めしません)。"

msgid ""
"The ``@export`` and ``@onready`` annotations cannot be applied to a static "
"variable. Local variables cannot be static."
msgstr ""
"``@export`` および ``@onready`` アノテーションは静的変数には適用できません。"
"ローカル変数をstaticにすることはできません。"

msgid ""
"The following example defines a ``Person`` class with a static variable "
"named ``max_id``. We increment the ``max_id`` in the ``_init()`` function. "
"This makes it easy to keep track of the number of ``Person`` instances in "
"our game."
msgstr ""
"次の例では ``max_id`` という名前の静的変数を使用して ``Person`` クラスを定義"
"します。 ``_init()`` 関数で ``max_id`` をインクリメントします。これによりゲー"
"ム内の ``person`` インスタンスの数を簡単に追跡できるようになります。"

msgid ""
"In this code, we create two instances of our ``Person`` class and check that "
"the class and every instance have the same ``max_id`` value, because the "
"variable is static and accessible to every instance."
msgstr ""
"このコードでは ``Person`` クラスから2つのインスタンスを作成します。クラスとす"
"べてのインスタンスから静的変数にアクセスできるため、同じ ``max_id`` 値を持つ"
"ことを確認します。"

msgid "``@static_unload`` annotation"
msgstr "``@static_unload`` アノテーション"

msgid "Casting"
msgstr "キャスト"

msgid ""
"Values assigned to typed variables must have a compatible type. If it's "
"needed to coerce a value to be of a certain type, in particular for object "
"types, you can use the casting operator ``as``."
msgstr ""
"型付き変数に割り当てられた値は、互換性のある型を持つ必要があります。特定の"
"型、特にオブジェクト型に対して値を強制する必要がある場合は、キャスト演算子を "
"``as`` として使用できます。"

msgid ""
"Casting between object types results in the same object if the value is of "
"the same type or a subtype of the cast type."
msgstr ""
"値が同じ型またはキャスト型のサブタイプの場合、オブジェクト型間でキャストする"
"と同じオブジェクトになります。"

msgid ""
"If the value is not a subtype, the casting operation will result in a "
"``null`` value."
msgstr "値がサブタイプではない場合、キャスト操作は ``null`` 値になります。"

msgid ""
"For built-in types, they will be forcibly converted if possible, otherwise "
"the engine will raise an error."
msgstr ""
"組み込み型の場合、可能であれば強制的に変換されますが、それ以外の場合はエラー"
"が発生します。"

msgid "Constants"
msgstr "定数"

msgid ""
"Constants are values you cannot change when the game is running. Their value "
"must be known at compile-time. Using the ``const`` keyword allows you to "
"give a constant value a name. Trying to assign a value to a constant after "
"it's declared will give you an error."
msgstr ""
"定数はゲームの実行中に変更することができない値のことです。これらの値はコンパ"
"イル時に確定している必要があります。 ``const`` キーワードを使うことで定数に名"
"前を付けることができます。定数を宣言したよりも後に値を代入しようとすると、エ"
"ラーが発生します。"

msgid "We recommend using constants whenever a value is not meant to change."
msgstr "値を変更するつもりがないのなら、定数を用いることを推奨します。"

msgid "Assigning a value of an incompatible type will raise an error."
msgstr "互換性のないタイプの値を割り当てると、エラーが発生します。"

msgid ""
"You can also create constants inside a function, which is useful to name "
"local magic values."
msgstr ""
"関数内で定数を作成することもできます。これはローカルのマジックナンバーに名前"
"を付けるのに役立ちます。"

msgid "Enums"
msgstr "列挙型"

msgid ""
"Enums are basically a shorthand for constants, and are pretty useful if you "
"want to assign consecutive integers to some constant."
msgstr ""
"列挙型は基本的に定数の省略形であり、連続した整数をある定数に割り当てたい場合"
"には非常に便利です。"

msgid ""
"If you pass a name to the enum, it will put all the keys inside a "
"constant :ref:`Dictionary <class_Dictionary>` of that name. This means all "
"constant methods of a dictionary can also be used with a named enum."
msgstr ""
"列挙型に名前を渡すと、その名前の定数 :ref:`Dictionary <class_Dictionary>` 内"
"にすべてのキーが配置されます。これは辞書のすべての定数メソッドが名前付き列挙"
"型でも使用できることを意味します。"

msgid ""
"Keys in a named enum are not registered as global constants. They should be "
"accessed prefixed by the enum's name (``Name.KEY``)."
msgstr ""
"名前の付いた列挙型のキーはグローバル定数としては登録されません。これらには列"
"挙型の名前 (``Name.KEY``) を接頭辞として付けてアクセスする必要があります。"

msgid "Functions"
msgstr "関数"

msgid ""
"A function can ``return`` at any point. The default return value is ``null``."
msgstr ""
"関数は任意の時点で ``return`` することができます。デフォルトの戻り値は"
"``null`` です。"

msgid ""
"Functions that have a return type **must** return a proper value. Setting "
"the type as ``void`` means the function doesn't return anything. Void "
"functions can return early with the ``return`` keyword, but they can't "
"return any value."
msgstr ""
"戻り型を持つ関数は、適切な値を返す\\ **必要があります**\\ 。型を ``void`` に"
"設定すると、関数は何も返しません。Void関数は ``return`` キーワードを使用して"
"早期に戻ることができますが、値を返すことはできません。"

msgid ""
"Non-void functions must **always** return a value, so if your code has "
"branching statements (such as an ``if``/``else`` construct), all the "
"possible paths must have a return. E.g., if you have a ``return`` inside an "
"``if`` block but not after it, the editor will raise an error because if the "
"block is not executed, the function won't have a valid value to return."
msgstr ""
"void関数でない場合は\\ **常に**\\ 値を返す必要があるため、コードに分岐文"
"( ``if``/``else`` 構造など)がある場合は、考えられるすべてのパスに戻り値が必要"
"です。たとえば、 ``if`` ブロックの内側に戻り値があってもその後に戻り値がない"
"場合、エディタはエラーを発生させます。 ``if`` 内のブロックが実行されない場"
"合、関数には有効な戻り値がないからです。"

msgid "Referencing functions"
msgstr "関数の参照"

msgid ""
"Functions are first-class values in terms of the :ref:`Callable "
"<class_Callable>` object. Referencing a function by name without calling it "
"will automatically generate the proper callable. This can be used to pass "
"functions as arguments."
msgstr ""
"関数は :ref:`Callable <class_Callable>` に関しては第一級オブジェクトです。関"
"数を呼び出さずに名前で参照すると、適切なCallableオブジェクトが自動的に生成さ"
"れます。これを使用して関数を引数として渡すことができます。"

msgid ""
"Callables **must** be called with the :ref:`call() "
"<class_Callable_method_call>` method. You cannot use the ``()`` operator "
"directly. This behavior is implemented to avoid performance issues on direct "
"function calls."
msgstr ""
"Callableは :ref:`call() <class_Callable_method_call>` メソッドを使用して呼び"
"出す**必要**があります。 ``()`` 演算子を直接使用することはできません。この動"
"作は直接の関数呼び出しでのパフォーマンスの問題を回避するために実装されていま"
"す。"

msgid "Lambda functions"
msgstr "ラムダ関数"

msgid ""
"Lambda functions allow you to declare functions that do not belong to a "
"class. Instead, a :ref:`Callable <class_Callable>` object is created and "
"assigned to a variable directly. This can be useful to create callables to "
"pass around without polluting the class scope."
msgstr ""
"ラムダ関数を使用するとクラスに属さない関数を宣言できます。その代わり"
"に :ref:`Callable <class_Callable>` オブジェクトが作成され、変数に直接割り当"
"てられます。これはクラス スコープを汚さずに渡すCallableオブジェクトを作成する"
"場合に便利です。"

msgid "Static functions"
msgstr "静的関数"

msgid "Lambda functions cannot be declared static."
msgstr "ラムダ関数は静的(static)に宣言できません。"

msgid "See also `Static variables`_ and `Static constructor`_."
msgstr "`静的変数`_ と `静的コンストラクタ`_ も参照してください。"

msgid "Statements and control flow"
msgstr "ステートメントと制御フロー"

msgid ""
"Statements are standard and can be assignments, function calls, control flow "
"structures, etc (see below). ``;`` as a statement separator is entirely "
"optional."
msgstr ""
"文は標準的なもので、代入、関数呼び出し、制御フロー構造などです(下記参照)。 "
"``;`` は文の区切り文字としては完全にオプションです。"

msgid "Expressions"
msgstr "式"

msgid ""
"Expressions are sequences of operators and their operands in orderly "
"fashion. An expression by itself can be a statement too, though only calls "
"are reasonable to use as statements since other expressions don't have side "
"effects."
msgstr ""
"式は演算子とそのオペランドを順序立てて並べたものです。式自体をステートメント"
"にすることもできますが、他の式には副作用がないため、呼び出しのみをステートメ"
"ントとして使用するのが合理的です。"

msgid ""
"Expressions return values that can be assigned to valid targets. Operands to "
"some operator can be another expression. An assignment is not an expression "
"and thus does not return any value."
msgstr ""
"式は有効なターゲットに代入することができる値を返します。一部の演算子のオペラ"
"ンドは別の式にすることができます。代入は式ではないため値を返しません。"

msgid ""
"Identifiers, attributes, and subscripts are valid assignment targets. Other "
"expressions cannot be on the left side of an assignment."
msgstr ""
"識別子、属性、添字は有効な代入ターゲットです。他の式を代入の左側に置くことは"
"できません。"

msgid "if/else/elif"
msgstr "\\ if/else/elif"

msgid ""
"Simple conditions are created by using the ``if``/``else``/``elif`` syntax. "
"Parenthesis around conditions are allowed, but not required. Given the "
"nature of the tab-based indentation, ``elif`` can be used instead of "
"``else``/``if`` to maintain a level of indentation."
msgstr ""
"単純な条件は、 ``if``/``else``/``elif`` 構文を使用して作成します。条件をかっ"
"こで囲むことはできますが、必須ではありません。タブベースのインデントの性質か"
"ら、インデントのレベルを維持するために ``elif`` を ``else``/``if`` の代わりに"
"使用できます。"

msgid ""
"Simple loops are created by using ``while`` syntax. Loops can be broken "
"using ``break`` or continued using ``continue`` (which skips to the next "
"iteration of the loop without executing any further code in the current "
"iteration):"
msgstr ""
"単純なループは ``while`` 構文を使用して作成されます。ループは ``break`` を"
"使って中断することも、 ``continue`` を使って続けることもできます (continueは"
"現在の反復で以降のコードを実行せずに、ループの次の反復にスキップします)。"

msgid ""
"To iterate through a range, such as an array or table, a *for* loop is used. "
"When iterating over an array, the current array element is stored in the "
"loop variable. When iterating over a dictionary, the *key* is stored in the "
"loop variable."
msgstr ""
"配列やテーブルなどの範囲を反復するには、 *for* ループが使用されます。配列を反"
"復処理する時には、現在の配列要素がループ変数に格納されます。 辞書を反復処理す"
"るとき、 *key* はループ変数に格納されます。"

msgid ""
"If you want to assign values on an array as it is being iterated through, it "
"is best to use ``for i in array.size()``."
msgstr ""
"反復処理中に配列に値を代入したい場合は、 ``for i in array.size()`` を使用する"
"のが最善です。"

msgid ""
"The loop variable is local to the for-loop and assigning to it will not "
"change the value on the array. Objects passed by reference (such as nodes) "
"can still be manipulated by calling methods on the loop variable."
msgstr ""
"ループ変数は for ループに対してローカルであり、それに代入しても配列の値は変更"
"されません。参照によって渡されたオブジェクト (ノードなど) は、ループ変数のメ"
"ソッドを呼び出すことで引き続き操作できます。"

msgid ""
"A ``match`` statement is used to branch execution of a program. It's the "
"equivalent of the ``switch`` statement found in many other languages, but "
"offers some additional features."
msgstr ""
"``match`` 文はプログラムの実行を分岐するために使用されます。他の多くの言語で"
"見られる ``switch`` 文と同等ですが、いくつかの追加機能を提供します。"

msgid ""
"``match`` is more type strict than the ``==`` operator. For example ``1`` "
"will **not** match ``1.0``. The only exception is ``String`` vs "
"``StringName`` matching: for example, the String ``\"hello\"`` is considered "
"equal to the StringName ``&\"hello\"``."
msgstr ""
"``match`` は ``==`` 演算子よりも厳密な型です。たとえば ``1`` は ``1.0`` と**"
"一致しません**。唯一の例外は、 ``String`` と ``StringName`` の一致です。たと"
"えば、Stringの ``\"hello\"`` は StringNameの ``&\"hello\"`` と等しいとみなさ"
"れます。"

msgid "Basic syntax"
msgstr "基本の構文"

msgid "Crash-course for people who are familiar with switch statements"
msgstr "switchステートメントに精通している人向けの短期集中コース"

msgid "Replace ``switch`` with ``match``."
msgstr "``match`` する ``switch`` を置換します。"

msgid "Remove ``case``."
msgstr "``case`` を削除します。"

msgid "Remove any ``break``\\ s."
msgstr "``break`` を削除します。"

msgid "Change ``default`` to a single underscore."
msgstr "``default`` をアンダースコア1つに変更します。"

msgid "Control flow"
msgstr "制御フロー"

msgid ""
"The patterns are matched from top to bottom. If a pattern matches, the first "
"corresponding block will be executed. After that, the execution continues "
"below the ``match`` statement."
msgstr ""
"パターンは上から下に一致します。パターンが一致すると、最初に対応するブロック"
"が実行されます。その後、実行は ``match`` ステートメントの下で続行されます。"

msgid ""
"The special ``continue`` behavior in ``match`` supported in 3.x was removed "
"in Godot 4.0."
msgstr ""
"3.x でサポートされていた ``match`` の特別な ``continue`` 動作は Godot 4.0 で"
"削除されました。"

msgid "The following pattern types are available:"
msgstr "以下のパターンが使用できます。"

msgid "Literal pattern"
msgstr "リテラルパターン"

msgid "Expression pattern"
msgstr "式パターン"

msgid "Wildcard pattern"
msgstr "ワイルドカードパターン"

msgid "This pattern matches everything. It's written as a single underscore."
msgstr ""
"このパターンはすべてにマッチします。 単一のアンダースコアとして書かれていま"
"す。"

msgid "Binding pattern"
msgstr "バインディングパターン"

msgid "Array pattern"
msgstr "配列パターン"

msgid ""
"Matches an array. Every single element of the array pattern is a pattern "
"itself, so you can nest them."
msgstr ""
"配列と一致します。 配列パターンの各要素はパターンそのものなので、それらをネス"
"トすることができます。"

msgid ""
"The length of the array is tested first, it has to be the same size as the "
"pattern, otherwise the pattern doesn't match."
msgstr ""
"配列の長さが最初にテストされ、それはパターンと同じサイズでなければなりませ"
"ん、そうでなければパターンは一致しません。"

msgid ""
"**Open-ended array**: An array can be bigger than the pattern by making the "
"last subpattern ``..``."
msgstr ""
"**オープンエンド配列**: 最後のサブパターンを `` ..`` にすることで配列をパター"
"ンよりも大きくすることができます。"

msgid "Every subpattern has to be comma-separated."
msgstr "各サブパターンはカンマで区切る必要があります。"

msgid "Dictionary pattern"
msgstr "辞書パターン"

msgid ""
"Works in the same way as the array pattern. Every key has to be a constant "
"pattern."
msgstr ""
"配列パターンと同じように機能します。 すべてのキーは定数パターンでなければなり"
"ません。"

msgid ""
"The size of the dictionary is tested first, it has to be the same size as "
"the pattern, otherwise the pattern doesn't match."
msgstr ""
"辞書のサイズが最初にテストされ、それはパターンと同じサイズでなければなりませ"
"ん、そうでなければパターンは一致しません。"

msgid ""
"**Open-ended dictionary**: A dictionary can be bigger than the pattern by "
"making the last subpattern ``..``."
msgstr ""
"**オープンエンド辞書**: 最後のサブパターンを `` ..`` にすることで辞書をパター"
"ンよりも大きくすることができます。"

msgid "Every subpattern has to be comma separated."
msgstr "各サブパターンはカンマで区切る必要があります。"

msgid ""
"If you don't specify a value, then only the existence of the key is checked."
msgstr "値を指定しないと、キーの存在のみがチェックされます。"

msgid "A value pattern is separated from the key pattern with a ``:``."
msgstr "値パターンは、キーパターンとは ``:`` で区別されます:。"

msgid "Multiple patterns"
msgstr "組み合わせパターン"

msgid ""
"You can also specify multiple patterns separated by a comma. These patterns "
"aren't allowed to have any bindings in them."
msgstr ""
"複数のパターンをカンマで区切って指定することもできます。 これらのパターンに"
"は、バインディングを含めることはできません。"

msgid "Pattern guards"
msgstr "パターンガード"

msgid ""
"If it's true, then the body of the branch is executed and ``match`` ends."
msgstr "trueの場合は分岐の本体が実行され、 ``match`` は終了します。"

msgid "If it's false, then the patterns of the next branch are checked."
msgstr "falseの場合は次の分岐のパターンがチェックされます。"

msgid "Classes"
msgstr "クラス"

msgid "Registering named classes"
msgstr "クラスに名前を付けて登録する"

msgid ""
"SVG images that are used as custom node icons should have the **Editor > "
"Scale With Editor Scale** and **Editor > Convert Icons With Editor "
"Theme** :ref:`import options <doc_importing_images_editor_import_options>` "
"enabled. This allows icons to follow the editor's scale and theming settings "
"if the icons are designed with the same color palette as Godot's own icons."
msgstr ""
"カスタムノード アイコンとして使用されるSVG画像は、**エディタ > エディタ ス"
"ケールで拡大縮小** および **エディタ > エディタ テーマでアイコンを変換"
"** :ref:`インポートオプション <doc_importing_images_editor_import_options>` "
"が有効になっている必要があります。これによりアイコンがGodot自身のアイコンと同"
"じカラー パレットでデザインされている場合、アイコンはエディタのスケールとテー"
"マ設定に従うことができます。"

msgid "Here's a class file example:"
msgstr "クラスファイルの例を次に示します:"

msgid ""
"Godot initializes non-static variables every time you create an instance, "
"and this includes arrays and dictionaries. This is in the spirit of thread "
"safety, since scripts can be initialized in separate threads without the "
"user knowing."
msgstr ""
"Godotはインスタンスを作成するたびに非静的変数を初期化します。これには配列や辞"
"書も含まれます。これはスレッドセーフの精神に基づいており、ユーザーが知らない"
"うちにスクリプトが別スレッドで初期化される可能性があるためです。"

msgid "Inheritance"
msgstr "継承"

msgid "A class (stored as a file) can inherit from:"
msgstr "クラス(ファイルとして格納されている)は以下から継承することができます:"

msgid "A global class."
msgstr "グローバルクラス。"

msgid "Another class file."
msgstr "他のクラスファイル。"

msgid "An inner class inside another class file."
msgstr "別のクラスファイル内の内部クラス。"

msgid "Multiple inheritance is not allowed."
msgstr "多重継承はできません。"

msgid ""
"If inheritance is not explicitly defined, the class will default to "
"inheriting :ref:`class_RefCounted`."
msgstr ""
"継承が明示的に定義されていない場合、クラスはデフォルト"
"で :ref:`class_RefCounted` を継承します。"

msgid ""
"One of the common misconceptions is trying to override *non-virtual* engine "
"methods such as ``get_class()``, ``queue_free()``, etc. This is not "
"supported for technical reasons."
msgstr ""
"よくある間違いに ``get_class()`` 、 ``queue_free()`` などの *非仮想* なエンジ"
"ンメソッドをオーバーライドしようとすることがあります。これは技術的な理由によ"
"りサポートされていません。"

msgid ""
"In Godot 3, you can *shadow* engine methods in GDScript, and it will work if "
"you call this method in GDScript. However, the engine will **not** execute "
"your code if the method is called inside the engine on some event."
msgstr ""
"Godot 3ではGDScriptでエンジンメソッドを *シャドウ* することができ、GDScriptで"
"このメソッドを呼び出すと機能します。ただし、何らかのイベントでエンジン内でメ"
"ソッドが呼び出された場合、エンジンはコードを**実行しなくなります**。"

msgid ""
"In Godot 4, even shadowing may not always work, as GDScript optimizes native "
"method calls. Therefore, we added the ``NATIVE_METHOD_OVERRIDE`` warning, "
"which is treated as an error by default. We strongly advise against "
"disabling or ignoring the warning."
msgstr ""
"Godot 4ではGDScriptがネイティブメソッド呼び出しを最適化するため、シャドウイン"
"グさえ常に機能するとは限りません。したがって、デフォルトでエラーとして扱われ"
"る ``NATIVE_METHOD_OVERRIDE`` 警告を追加しました。警告を無効にしたり無視した"
"りしないことを強くお勧めします。"

msgid ""
"Note that this does not apply to virtual methods such as ``_ready()``, "
"``_process()`` and others (marked with the ``virtual`` qualifier in the "
"documentation and the names start with an underscore). These methods are "
"specifically for customizing engine behavior and can be overridden in "
"GDScript. Signals and notifications can also be useful for these purposes."
msgstr ""
"これは ``_ready()`` 、 ``_process()`` などの仮想メソッド (ドキュメントでは "
"``virtual`` 修飾子でマークされており、名前はアンダースコアで始まります) には"
"適用されないことに注意してください。これらのメソッドはエンジンの動作をカスタ"
"マイズするためのもので、GDScriptでオーバーライドすることができます。シグナル"
"と通知もこれらの目的に役立ちます。"

msgid "Class constructor"
msgstr "クラスコンストラクター"

msgid "There are a few things to keep in mind here:"
msgstr "留意すべきことがいくつかあります:"

msgid ""
"``idle.gd`` can have a different number of arguments than the base class "
"``state.gd``."
msgstr ""
"``idle.gd`` は、親クラス ``state.gd`` と異なる数の引数を持つことができます。"

msgid ""
"In the example above, ``e`` passed to the ``state.gd`` constructor is the "
"same ``e`` passed in to ``idle.gd``."
msgstr ""
"上の例では、 ``state.gd`` コンストラクターに渡される ``e`` は、 ``idle.gd`` "
"に渡されるのと同じ ``e`` です。"

msgid "Static constructor"
msgstr "静的コンストラクター"

msgid ""
"A static constructor cannot take arguments and must not return any value."
msgstr ""
"静的コンストラクターは引数を取ることができず、値を返すこともできません。"

msgid "Inner classes"
msgstr "内部クラス"

msgid ""
"A class file can contain inner classes. Inner classes are defined using the "
"``class`` keyword. They are instanced using the ``ClassName.new()`` function."
msgstr ""
"クラスファイルには内部クラスを含めることができます。内部クラスは、 ``class`` "
"キーワードを使用して定義されます。 ``ClassName.new()`` 関数を使用してインスタ"
"ンス化されます。"

msgid "Classes as resources"
msgstr "リソースとしてのクラス"

msgid "Exports"
msgstr "エクスポート"

msgid ""
"Documentation about exports has been moved to :ref:`doc_gdscript_exports`."
msgstr ""
"エクスポートについてのドキュメントは :ref:`doc_gdscript_exports` に移動しまし"
"た。"

msgid "Properties (setters and getters)"
msgstr "プロパティ (セッターとゲッター)"

msgid ""
"Sometimes, you want a class' member variable to do more than just hold data "
"and actually perform some validation or computation whenever its value "
"changes. It may also be desired to encapsulate its access in some way."
msgstr ""
"クラスのメンバ変数にデータを保持するだけでなく、その値が変更されるたびに実際"
"に何らかの検証や計算を実行したい場合があります。また何らかの方法でそのアクセ"
"スをカプセル化することが望ましい場合もあります。"

msgid ""
"For this, GDScript provides a special syntax to define properties using the "
"``set`` and ``get`` keywords after a variable declaration. Then you can "
"define a code block that will be executed when the variable is accessed or "
"assigned."
msgstr ""
"そのためにGDScriptは、変数宣言の後に ``set`` および ``get`` キーワードを使用"
"してプロパティを定義するための特別な構文を提供します。そして変数が取得または"
"代入されたときに実行されるコードブロックを定義できます。"

msgid "Example:"
msgstr "例:"

msgid ""
"Unlike ``setget`` in previous Godot versions, ``set`` and ``get`` methods "
"are **always** called (except as noted below), even when accessed inside the "
"same class (with or without prefixing with ``self.``). This makes the "
"behavior consistent. If you need direct access to the value, use another "
"variable for direct access and make the property code use that name."
msgstr ""
"以前のGodotバージョンの ``setget`` とは異なり、 ``set`` メソッドと ``get`` メ"
"ソッドは同じクラス内でアクセスされた場合でも **常に** 呼び出されます (selfの"
"有無にかかわらず)。これにより動作に一貫性が生まれます。値に直接アクセスする必"
"要がある場合は、直接アクセス用に別の変数を使用し、プロパティ内のコードでその"
"変数を使用するようにします。"

msgid "Alternative syntax"
msgstr "代替の構文"

msgid ""
"The setter and getter must use the same notation, mixing styles for the same "
"variable is not allowed."
msgstr ""
"セッターとゲッターは同じ表記法を使用する必要があり、変数のスタイルを混合する"
"ことは許可されません。"

msgid ""
"You cannot specify type hints for *inline* setters and getters. This is done "
"on purpose to reduce the boilerplate. If the variable is typed, then the "
"setter's argument is automatically of the same type, and the getter's return "
"value must match it. Separated setter/getter functions can have type hints, "
"and the type must match the variable's type or be a wider type."
msgstr ""
"*inline* セッターおよびゲッターには型ヒントを指定できません。これは定型文を減"
"らすために意図的に行われます。変数が型指定されている場合、セッターの引数は自"
"動的に同じ型になり、ゲッターの戻り値はそれと一致する必要があります。分離され"
"た セッター/ゲッター関数には型ヒントを含めることができ、その型は変数の型と一"
"致するか、より幅広い型である必要があります。"

msgid "When setter/getter is not called"
msgstr "セッター/ゲッターが呼び出されない場合"

msgid ""
"When a variable is initialized, the value of the initializer will be written "
"directly to the variable. Including if the ``@onready`` annotation is "
"applied to the variable."
msgstr ""
"変数が初期化されると、イニシャライザの値が変数に直接書き込まれます。 "
"``@onready`` アノテーションが変数に適用されているかどうかを含みます。"

msgid "Tool mode"
msgstr "ツールモード"

msgid "See :ref:`doc_running_code_in_the_editor` for more information."
msgstr ""
"詳細については、\\ :ref:`doc_running_code_in_the_editor` を参照してください。"

msgid ""
"Be cautious when freeing nodes with ``queue_free()`` or ``free()`` in a tool "
"script (especially the script's owner itself). As tool scripts run their "
"code in the editor, misusing them may lead to crashing the editor."
msgstr ""
"ツールスクリプトでノードを\\ ``queue_free()``\\ あるいは\\ ``free()``\\ で開"
"放するときは注意してください(特にノードがそのスクリプトのオーナーである場"
"合)。ツールスクリプトはエディタ内で実行されるので、間違って使うとエディタがク"
"ラッシュするかもしれません。"

msgid "Memory management"
msgstr "メモリ管理"

msgid ""
"Godot implements reference counting to free certain instances that are no "
"longer used, instead of a garbage collector, or requiring purely manual "
"management. Any instance of the :ref:`class_RefCounted` class (or any class "
"that inherits it, such as :ref:`class_Resource`) will be freed automatically "
"when no longer in use. For an instance of any class that is not "
"a :ref:`class_RefCounted` (such as :ref:`class_Node` or the "
"base :ref:`class_Object` type), it will remain in memory until it is deleted "
"with ``free()`` (or ``queue_free()`` for Nodes)."
msgstr ""
"Godotは使用されなくなった特定のインスタンスを解放するためにガベージコレクタの"
"代わりに参照カウンタが使われるか、または純粋に手動による管理が必要で"
"す。 :ref:`class_RefCounted` クラスのインスタンス (また"
"は :ref:`class_Resource` などを継承するクラス) は、使用されなくなったときに自"
"動的に解放されます。 :ref:`class_RefCounted` ではないクラスのインスタンス "
"(:ref:`class_Node` や基本の :ref:`class_Object` 型など) は ``free`` (ノードの"
"場合は ``queue_free()``) で削除されるまでメモリ内に残ります。"

msgid ""
"If a :ref:`class_Node` is deleted via ``free()`` or ``queue_free()``, all of "
"its children will also recursively be deleted."
msgstr ""
":ref:`class_Node` が ``free()`` または ``queue_free()`` によって削除される場"
"合、その子もすべて再帰的に削除されます。"

msgid ""
"To avoid reference cycles that can't be freed, a :ref:`class_WeakRef` "
"function is provided for creating weak references, which allow access to the "
"object without preventing a :ref:`class_RefCounted` from freeing. Here is an "
"example:"
msgstr ""
"参照カウンタで解放できない循環参照を回避するため、弱い参照を作成するため"
"の :ref:`class_WeakRef` が提供されています。これによ"
"り、 :ref:`class_RefCounted` の解放を妨げることなくオブジェクトへのアクセスが"
"可能になります。以下に例を示します。"

msgid ""
"Alternatively, when not using references, the "
"``is_instance_valid(instance)`` can be used to check if an object has been "
"freed."
msgstr ""
"あるいは、参照を使用しない場合は、 ``is_instance_valid(instance)`` を使用して"
"オブジェクトが解放されたかどうかを確認できます。"

msgid "Signals"
msgstr "シグナル"

msgid ""
"Signals are a tool to emit messages from an object that other objects can "
"react to. To create custom signals for a class, use the ``signal`` keyword."
msgstr ""
"シグナルはオブジェクトから通知メッセージを送信する手段で、他のオブジェクトは"
"それを受信することが出来ます。 クラスのカスタムシグナルを作るには``signal`` "
"キーワードを使用します。"

msgid ""
"Signals are a `Callback <https://en.wikipedia.org/wiki/"
"Callback_(computer_programming)>`_ mechanism. They also fill the role of "
"Observers, a common programming pattern. For more information, read the "
"`Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ in "
"the Game Programming Patterns ebook."
msgstr ""
"シグナルは\\ `コールバック <https://ja.wikipedia.org/wiki/コールバック_(情報"
"工学)>`_\\ 機構です。これはオブザーバーとしても振る舞う、一般的なプログラミン"
"グパターンです。より多くの情報を得るにはGame Programming Patterns ebookの "
"`Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ をお"
"読みください(英語)。"

msgid ""
"You can connect these signals to methods the same way you connect built-in "
"signals of nodes like :ref:`class_Button` or :ref:`class_RigidBody3D`."
msgstr ""
":ref:`class_Button` や :ref:`class_RigidBody3D` の様なノードの組み込みシグナ"
"ルを接続するのと同じ方法で、これらのシグナルをメソッドに接続できます。"

msgid "You can emit as many arguments as you want along with a signal."
msgstr "あなたが望むシグナルと一緒に多くの引数を発信することができます。"

msgid ""
"Here is an example where this is useful. Let's say we want a life bar on "
"screen to react to health changes with an animation, but we want to keep the "
"user interface separate from the player in our scene tree."
msgstr ""
"ここに有用な例を示します。アニメーションを伴った、体力の変化を受信するライフ"
"バーをスクリーン上に配置しようとしますが、シーンツリー上にあるプレイヤーから"
"はそのユーザーインターフェースを分けたいとします。"

msgid ""
"In the ``Game`` node, we get both the ``Character`` and ``Lifebar`` nodes, "
"then connect the character, that emits the signal, to the receiver, the "
"``Lifebar`` node in this case."
msgstr ""
"``Game`` ノード内で ``Character`` ノードと ``Lifebar`` ノードを取得し、そし"
"て character と受信者を接続し 、 character にシグナルを受信者へ送信させます、"
"受信者はこのケースでは ``Lifebar`` ノードです。"

msgid ""
"This allows the ``Lifebar`` to react to health changes without coupling it "
"to the ``Character`` node."
msgstr ""
"これは ``Character`` ノードとのカップリングをせずに ``Lifebar`` に体力の変化"
"を受信することを可能にします。"

msgid ""
"These arguments show up in the editor's node dock, and Godot can use them to "
"generate callback functions for you. However, you can still emit any number "
"of arguments when you emit signals; it's up to you to emit the correct "
"values."
msgstr ""
"これらの引数はエディタのノードドックに表示され、Godot はこれらを使いコール"
"バック関数を生成します。しかし、シグナルを発信する際に、異なる個数の引数を送"
"信することもできます。正しい値を発信するかはあなた次第です。"

msgid "Awaiting signals or coroutines"
msgstr "シグナルまたはコルーチンを待つ"

msgid ""
"The ``await`` keyword can be used to create `coroutines <https://"
"en.wikipedia.org/wiki/Coroutine>`_ which wait until a signal is emitted "
"before continuing execution. Using the ``await`` keyword with a signal or a "
"call to a function that is also a coroutine will immediately return the "
"control to the caller. When the signal is emitted (or the called coroutine "
"finishes), it will resume execution from the point on where it stopped."
msgstr ""
"``await`` キーワードを使用すると、実行を続行する前にシグナルが発行されるまで"
"待機する `コルーチン <https://en.wikipedia.org/wiki/Coroutine>`_ を作成できま"
"す。シグナルまたはコルーチンでもある関数の呼び出しで ``await`` キーワードを使"
"用すると、制御が直ちに呼び出し元に返されます。シグナルが発行されると (または"
"呼び出されたコルーチンが終了すると)、停止した時点から実行が再開されます。"

msgid ""
"Unlike ``yield`` in previous Godot versions, you cannot obtain the function "
"state object. This is done to ensure type safety. With this type safety in "
"place, a function cannot say that it returns an ``int`` while it actually "
"returns a function state object during runtime."
msgstr ""
"以前の Godot バージョンの ``yield`` とは異なり、関数のステートオブジェクトを"
"取得することはできません。これは型の安全性を確保するために行われます。この型"
"安全性が確保されていると、関数は実行時に実際に関数のステートオブジェクトを返"
"す一方で、関数は ``int`` を返すとは言えなくなります。"

msgid "Assert keyword"
msgstr "Assertキーワード"

msgid ""
"The ``assert`` keyword can be used to check conditions in debug builds. "
"These assertions are ignored in non-debug builds. This means that the "
"expression passed as argument won't be evaluated in a project exported in "
"release mode. Due to this, assertions must **not** contain expressions that "
"have side effects. Otherwise, the behavior of the script would vary "
"depending on whether the project is run in a debug build."
msgstr ""
"``assert`` キーワードはデバックビルド内で状態をチェックする為に使う事が出来ま"
"す。これらの assert は非デバッグビルドでは無視されます。これはリリースモード"
"でのプロジェクトのエクスポートでは引数として渡された式が評価されない事を意味"
"します。"

msgid ""
"When running a project from the editor, the project will be paused if an "
"assertion error occurs."
msgstr ""
"エディタ上でプロジェクトが実行されている時に、assertion エラーが発生した場合"
"プロジェクトは停止します。"
