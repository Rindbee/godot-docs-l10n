#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript exported properties"
msgstr "GDScriptプロパティのエクスポート"

msgid ""
"In that example the value ``5`` will be saved and visible in the property "
"editor."
msgstr "この例では ``5`` の値が保存され、プロパティ エディタにも表示されます。"

msgid ""
"An exported variable must be initialized to a constant expression or have a "
"type specifier in the variable. Some of the export annotations have a "
"specific type and don't need the variable to be typed (see the *Examples* "
"section below)."
msgstr ""
"エクスポートされた変数は定数式に初期化されるか、型が指定されている必要があり"
"ます。ただしエクスポートアノテーションの一部には特定の型があり、変数を型指定"
"する必要はありません (以下の *例* セクションを参照)。"

msgid ""
"One of the fundamental benefits of exporting member variables is to have "
"them visible and editable in the editor. This way, artists and game "
"designers can modify values that later influence how the program runs. For "
"this, a special export syntax is provided."
msgstr ""
"メンバー変数をエクスポートする基本的な利点の1つは、エディタで表示および編集で"
"きることです。このようにして、アーティストやゲームデザイナーは後でプログラム"
"の実行方法に影響する値を変更できます。このために特別なエクスポート構文が用意"
"されています。"

msgid ""
"Exporting properties can also be done in other languages such as C#. The "
"syntax varies depending on the language. See :ref:`doc_c_sharp_exports` for "
"information on C# exports."
msgstr ""
"プロパティのエクスポートは C#のような別の言語でも実行できます。構文の違いは言"
"語に依存します。 C# エクスポートの詳細については、:ref:`doc_c_sharp_exports` "
"を参照してください。"

msgid "Basic use"
msgstr "基本的な使い方"

msgid ""
"If the exported value assigns a constant or constant expression, the type "
"will be inferred and used in the editor."
msgstr ""
"エクスポートされた値が定数または定数式を割り当てている場合、型が推論されてエ"
"ディタで使用されます。"

msgid "If there's no default value, you can add a type to the variable."
msgstr "デフォルト値がない場合は、変数に型を付ける必要があります。"

msgid "Resources and nodes can be exported."
msgstr "リソースとノードもエクスポートできます。"

msgid ""
"It is possible to group your exported properties inside the Inspector with "
"the :ref:`@export_group <class_@GDScript_annotation_@export_group>` "
"annotation. Every exported property after this annotation will be added to "
"the group. Start a new group or use ``@export_group(\"\")`` to break out."
msgstr ""
":ref:`@export_group <class_@GDScript_annotation_@export_group>` アノテーショ"
"ンを使用して、インスペクタ内でエクスポートされたプロパティをグループ化するこ"
"とができます。このアノテーションの後にエクスポートされたすべてのプロパティが"
"グループに追加されます。別の新しいグループを開始するか "
"``@export_group(\"\")`` を使用するとグループを終了します。"

msgid ""
"The second argument of the annotation can be used to only group properties "
"with the specified prefix."
msgstr ""
"アノテーションの2番目の引数は、指定されたプレフィックスを持つプロパティをグ"
"ループ化するためにのみ使用できます。"

msgid ""
"Groups cannot be nested, use :ref:`@export_subgroup "
"<class_@GDScript_annotation_@export_subgroup>` to create subgroups within a "
"group."
msgstr ""
"グループをネストすることはできません。グループ内にサブグループを作成するに"
"は、:ref:`@export_subgroup <class_@GDScript_annotation_@export_subgroup>` を"
"使用してください。"

msgid ""
"You can also change the name of your main category, or create additional "
"categories in the property list with the :ref:`@export_category "
"<class_@GDScript_annotation_@export_category>` annotation."
msgstr ""
"メインカテゴリの名前を変更したり、:ref:`@export_category "
"<class_@GDScript_annotation_@export_category>` 注釈を使用してプロパティ リス"
"トに追加のカテゴリを作成したりすることもできます。"

msgid ""
"The list of properties is organized based on the class inheritance and new "
"categories break that expectation. Use them carefully, especially when "
"creating projects for public use."
msgstr ""
"プロパティのリストはクラスの継承をもとに並んでいますが、新しいカテゴリはその"
"法則を壊します。特に公開用のプロジェクトを作成する場合は慎重に使用してくださ"
"い。"

msgid "Strings as paths"
msgstr "パス文字列"

msgid ""
"Using paths in the global filesystem is also possible, but only in scripts "
"in tool mode."
msgstr ""
"グローバルファイルシステム内のパスを使用することも可能ですが、ツールモードの"
"スクリプトでのみ使用できます。"

msgid "Limiting editor input ranges"
msgstr "入力範囲の制限"

msgid "Allow integer values from 0 to 20."
msgstr "0 ～ 20 の整数値を指定可能。"

msgid "Allow integer values from -10 to 20."
msgstr "-10 ～ 20 の整数値を指定可能。"

msgid "Allow floats from -10 to 20 and snap the value to multiples of 0.2."
msgstr ""
"-10 から 20 までの浮動小数点を指定でき、値は 0.2 の倍数にスナップします。"

msgid "Floats with easing hint"
msgstr "イージングヒント付き実数"

msgid "Colors"
msgstr "色"

msgid "Regular color given as red-green-blue-alpha value."
msgstr "RGBAの値として指定される通常の色。"

msgid "Nodes"
msgstr "ノード"

msgid ""
"Since Godot 4.0, nodes can be directly exported as properties in a script "
"without having to use NodePaths:"
msgstr ""
"Godot 4.0以降は、NodePathを使用せずにノードをスクリプト内のプロパティとして直"
"接エクスポートできるようになりました。"

msgid ""
"Exporting NodePaths like in Godot 3.x is still possible, in case you need it:"
msgstr ""
"必要に応じてGodot 3.x のようにNodePathをエクスポートすることも可能です。"

msgid ""
"If you want to limit the types of nodes for NodePaths, you can use "
"the :ref:`@export_node_path<class_@GDScript_annotation_@export_node_path>` "
"annotation:"
msgstr ""
"NodePathのノードのタイプを制限したい場合"
"は :ref:`@export_node_path<class_@GDScript_annotation_@export_node_path>` ア"
"ノテーションを使用できます。"

msgid "Resources"
msgstr "リソース"

msgid ""
"In the Inspector, you can then drag and drop a resource file from the "
"FileSystem dock into the variable slot."
msgstr ""
"リソースファイルはファイルシステムドックから、インスペクタのプロパティスロッ"
"トにドラッグ＆ドロップできます。"

msgid ""
"Opening the inspector dropdown may result in an extremely long list of "
"possible classes to create, however. Therefore, if you specify an extension "
"of Resource such as:"
msgstr ""
"インスペクタのドロップダウンを開くと、作成可能クラスの非常に長いリストが表示"
"される場合があります。作成できるリソースを限定するには、次のようにリソースの"
"型を指定します。"

msgid ""
"It must be noted that even if the script is not being run while in the "
"editor, the exported properties are still editable. This can be used in "
"conjunction with a :ref:`script in \"tool\" mode <doc_gdscript_tool_mode>`."
msgstr ""
"スクリプトがエディタで実行されていない場合でも、エクスポートされたプロパティ"
"はまだ編集可能です。これは :ref:`script in \"tool\" mode "
"<doc_gdscript_tool_mode>` と共に使うことが出来ます。"

msgid "Exporting bit flags"
msgstr "ビットフラグのエクスポート"

msgid ""
"Integers used as bit flags can store multiple ``true``/``false`` (boolean) "
"values in one property. By using the ``@export_flags`` annotation, they can "
"be set from the editor::"
msgstr ""
"ビットフラグとして使用される整数は、1つのプロパティに複数の ``true``/"
"``false`` (ブール)値を格納できます。 ``@export_flags`` アノテーションを使用す"
"ると、ビットフラグがエディタから設定できるようになります:"

msgid ""
"You must provide a string description for each flag. In this example, "
"``Fire`` has value 1, ``Water`` has value 2, ``Earth`` has value 4 and "
"``Wind`` corresponds to value 8. Usually, constants should be defined "
"accordingly (e.g. ``const ELEMENT_WIND = 8`` and so on)."
msgstr ""
"各フラグにはエディタで表示する文字列を指定する必要があります。この例では "
"``Fire`` の値は1、 ``Water`` の値は2、 ``Earth`` の値は4、 ``Wind`` の値は8に"
"対応します。通常、定数はそれに応じて定義する必要があります(例: ``const "
"ELEMENT_WIND = 8`` など)。"

msgid "You can add explicit values using a colon::"
msgstr "コロン:: を使用して明示的な値を指定できます。"

msgid ""
"Only power of 2 values are valid as bit flags options. The lowest allowed "
"value is 1, as 0 means that nothing is selected. You can also add options "
"that are a combination of other flags::"
msgstr ""
"ビットフラグオプションとして、2の累乗値のみが有効です。 0は何も選択されていな"
"いことを意味するため、許容される最小値は1です。他のフラグを組み合わせたオプ"
"ションを追加することもできます。"

msgid ""
"Export annotations are also provided for the physics, render, and navigation "
"layers defined in the project settings::"
msgstr ""
"エクスポートアノテーションは、プロジェクト設定で定義された物理レイヤー、レン"
"ダリング レイヤー、およびナビゲーション レイヤーにも提供されます:"

msgid ""
"Using bit flags requires some understanding of bitwise operations. If in "
"doubt, use boolean variables instead."
msgstr ""
"ビットフラグを使用するには、ビット単位の演算についてある程度理解する必要があ"
"ります。疑わしい場合は、代わりにブール変数を使用してください。"

msgid "Exporting enums"
msgstr "列挙型のエクスポート"

msgid ""
"Properties can be exported with a type hint referencing an enum to limit "
"their values to the values of the enumeration. The editor will create a "
"widget in the Inspector, enumerating the following as \"Thing 1\", \"Thing "
"2\", \"Another Thing\". The value will be stored as an integer."
msgstr ""
"プロパティを列挙型の値に制限するために、列挙型を参照する型ヒントを使用してエ"
"クスポートできます。エディタはインスペクタにウィジェットを作成し、以下を "
"\"Thing 1\"、 \"Thing 2\" 、 \"Another Thing\" として列挙します。値は整数とし"
"て保存されます。"

msgid ""
"Integer and string properties can also be limited to a specific list of "
"values using the :ref:`@export_enum "
"<class_@GDScript_annotation_@export_enum>` annotation. The editor will "
"create a widget in the Inspector, enumerating the following as Warrior, "
"Magician, Thief. The value will be stored as an integer, corresponding to "
"the index of the selected option (i.e. ``0``, ``1``,  or ``2``)."
msgstr ""
":ref:`@export_enum <class_@GDScript_annotation_@export_enum>` アノテーション"
"を使用して、整数および文字列のプロパティを特定の値のリストに制限することもで"
"きます。エディターはインスペクターにウィジェットを作成し、以下をWarrior、"
"Magician、Thiefとして列挙します。値は選択したオプションのインデックス (つま"
"り ``0`` 、 ``1`` 、 ``2``) に対応する整数として保存されます。"

msgid "If the type is String, the value will be stored as a string."
msgstr "型がStringの場合、値は文字列として保存されます。"

msgid "If you want to set an initial value, you must specify it explicitly::"
msgstr "初期値を設定したい場合は、それを明示的に指定する必要があります::"

msgid "Exporting arrays"
msgstr "配列のエクスポート"

msgid ""
"Exported arrays can have initializers, but they must be constant expressions."
msgstr ""
"エクスポートされた配列は初期化子を持つことができますが、それらは定数式でなけ"
"ればなりません。"

msgid ""
"If the exported array specifies a type which inherits from Resource, the "
"array values can be set in the inspector by dragging and dropping multiple "
"files from the FileSystem dock at once."
msgstr ""
"エクスポートされた配列が、Resourceを継承する型を指定している場合は、ファイル"
"システム ドックから複数のファイルを一度にドラッグ＆ドロップすることで、インス"
"ペクタ上で配列の値を設定することができます。"

msgid "The default value **must** be a constant expression."
msgstr "デフォルト値は定数式である必要があります**。"

msgid "Exported arrays can specify type (using the same hints as before)."
msgstr ""
"エクスポートされる配列は型を指定できます (以前と同じヒントを使用して) 。"

msgid ""
"You can omit the default value, but it would then be ``null`` if not "
"assigned."
msgstr "デフォルト値は省略できますが、指定しない場合は ``null`` になります。"

msgid ""
"Arrays with specified types which inherit from resource can be set by drag-"
"and-dropping multiple files from the FileSystem dock."
msgstr ""
"リソースを継承する型の配列は、ファイルシステムドックから複数のファイルをド"
"ラッグ＆ドロップすることで設定できます。"

msgid "Packed type arrays also work, but only initialized empty:"
msgstr "パック配列も機能しますが、空の配列で初期化されます:"

msgid "Other export variants can also be used when exporting arrays:"
msgstr ""
"配列をエクスポートする場合、他のエクスポートアノテーションも使用できます。"

msgid "``@export_storage``"
msgstr "``@export_storage``"

msgid "By default, exporting a property has two effects:"
msgstr ""
"デフォルトでは、プロパティをエクスポートすると次の2つの効果があります。"

msgid ""
"makes the property stored in the scene/resource file "
"(:ref:`PROPERTY_USAGE_STORAGE "
"<class_@GlobalScope_constant_PROPERTY_USAGE_STORAGE>`);"
msgstr ""
"プロパティの値はシーン/リソースファイルに保存されます "
"(:ref:`PROPERTY_USAGE_STORAGE "
"<class_@GlobalScope_constant_PROPERTY_USAGE_STORAGE>`);"

msgid ""
"adds a field to the Inspector (:ref:`PROPERTY_USAGE_EDITOR "
"<class_@GlobalScope_constant_PROPERTY_USAGE_EDITOR>`)."
msgstr ""
"インスペクタにフィールドが追加されます (:ref:`PROPERTY_USAGE_EDITOR "
"<class_@GlobalScope_constant_PROPERTY_USAGE_EDITOR>`)。"

msgid ""
"However, sometimes you may want to make a property serializable, but not "
"display it in the editor to prevent unintentional changes and cluttering the "
"interface."
msgstr ""
"ただし意図しない変更やインターフェイスの煩雑さを防ぐため、プロパティをシリア"
"ライズ可能にしてもエディタに表示したくない場合があります。"

msgid ""
"To do this you can use :ref:`@export_storage "
"<class_@GDScript_annotation_@export_storage>`. This can be useful "
"for :ref:`@tool <class_@GDScript_annotation_@tool>` scripts. Also the "
"property value is copied when :ref:`Resource.duplicate() "
"<class_Resource_method_duplicate>` or :ref:`Node.duplicate() "
"<class_Node_method_duplicate>` is called, unlike non-exported variables."
msgstr ""
"これを行うには :ref:`@export_storage "
"<class_@GDScript_annotation_@export_storage>` を使用できます。これ"
"は :ref:`@tool <class_@GDScript_annotation_@tool>` スクリプトで設定するときに"
"役立ちます。またエクスポートされない変数とは異な"
"り、 :ref:`Resource.duplicate() <class_Resource_method_duplicate>` また"
"は :ref:`Node.duplicate() <class_Node_method_duplicate>` が呼び出されたときに"
"プロパティ値がコピーされます。"

msgid "Setting exported variables from a tool script"
msgstr "エクスポートされた変数をツールスクリプトから設定する"

msgid ""
"When changing an exported variable's value from a script "
"in :ref:`doc_gdscript_tool_mode`, the value in the inspector won't be "
"updated automatically. To update it, "
"call :ref:`notify_property_list_changed() "
"<class_Object_method_notify_property_list_changed>` after setting the "
"exported variable's value."
msgstr ""
":ref:`doc_gdscript_tool_mode` のスクリプトからエクスポートされた変数の値を変"
"更する場合、インスペクタ内の値は自動的に更新されません。これを更新するにはエ"
"クスポートされた変数の値を設定した後、 :ref:`notify_property_list_changed() "
"<class_Object_method_notify_property_list_changed>` を呼び出します。"

msgid "Advanced exports"
msgstr "高度なエクスポート"

msgid ""
"Not every type of export can be provided on the level of the language itself "
"to avoid unnecessary design complexity. The following describes some more or "
"less common exporting features which can be implemented with a low-level API."
msgstr ""
"不必要な設計の複雑さを避けるために、言語自体のレベルですべてのタイプのエクス"
"ポートを提供できるわけではありません。以下では低レベルAPIで実装できる一般的な"
"エクスポート機能について説明します。"

msgid ""
"Before reading further, you should get familiar with the way properties are "
"handled and how they can be customized with :ref:`_set() "
"<class_Object_private_method__set>`, :ref:`_get() "
"<class_Object_private_method__get>`, and :ref:`_get_property_list() "
"<class_Object_private_method__get_property_list>` methods as described "
"in :ref:`doc_accessing_data_or_logic_from_object`."
msgstr ""
"さらに読み進める前に、プロパティの処理方法とカスタマイズ方法 "
"( :ref:`doc_accessing_data_or_logic_from_object`で説明されている方法"
"の :ref:`_set() <class_Object_private_method__set>` 、 :ref:`_get() "
"<class_Object_private_method__get>` 、 :ref:`_get_property_list() "
"<class_Object_private_method__get_property_list>`) についてよく理解しておく必"
"要があります。"

msgid ""
"For binding properties using the above methods in C++, "
"see :ref:`doc_binding_properties_using_set_get_property_list`."
msgstr ""
"C++で上記のメソッドを使用してプロパティをバインドする場合"
"は :ref:`doc_binding_properties_using_set_get_property_list` を参照してくださ"
"い。"

msgid ""
"The script must operate in the ``@tool`` mode so the above methods can work "
"from within the editor."
msgstr ""
"上記のメソッドがエディタ内から機能できるように、スクリプトは ``@tool`` モード"
"で動作する必要があります。"
