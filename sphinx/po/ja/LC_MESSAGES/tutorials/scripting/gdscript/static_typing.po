#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "静的型付けGDScript"

msgid "In this guide, you will learn:"
msgstr "このガイドでは、次の内容について学習します:"

msgid "how to use static typing in GDScript;"
msgstr "GDScriptでの静的型付けの使い方;"

msgid "that static types can help you avoid bugs;"
msgstr "静的型がバグの回避に役立つこと;"

msgid "that static typing improves your experience with the editor."
msgstr "静的型付けにより、エディタのエクスペリエンスが向上します。"

msgid ""
"Where and how you use this language feature is entirely up to you: you can "
"use it only in some sensitive GDScript files, use it everywhere, or don't "
"use it at all."
msgstr ""
"この言語機能をどこでどのように使用するかは完全にあなた次第です。一部の機密性"
"の高いGDScriptファイルでのみ使用することも、あらゆる場所で使用することも、"
"まったく使用しないこともできます。"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr "静的型は、変数、定数、関数、パラメーター、戻り値の型に使用できます。"

msgid "A brief look at static typing"
msgstr "静的型付けの概要"

msgid ""
"With static typing, GDScript can detect more errors without even running the "
"code. Also type hints give you and your teammates more information as you're "
"working, as the arguments' types show up when you call a method. Static "
"typing improves editor autocompletion and :ref:`documentation "
"<doc_gdscript_documentation_comments>` of your scripts."
msgstr ""
"静的型付けのGDScriptを使うことで、Godotはさらに多くのエラーを、あなたの書いた"
"コードから検出することができます。メソッドを呼び出すと引数の型が表示されるた"
"め、あなたとチームメイトは作業中により多くの情報が得られます。静的型付けによ"
"り、エディタのオートコンプリートとスクリプトの :ref:`documentation "
"<doc_gdscript_documentation_comments>` が改善されます。"

msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options."
msgstr ""
"静的型を使用するとコード補完機能も改善されます。以下に動的型のコードと静的型"
"付きのコードの違いを示します。"

msgid ""
"You've probably encountered a lack of autocomplete suggestions after a dot:"
msgstr ""
"あなたはドットを打った後に表示されるオートコンプリート候補が足りないことに遭"
"遇したことがあるでしょう。"

msgid "Completion options for dynamic typed code."
msgstr "動的型付きコードの補完オプション。"

msgid ""
"This is due to dynamic code. Godot cannot know what value type you're "
"passing to the function. If you write the type explicitly however, you will "
"get all methods, properties, constants, etc. from the value:"
msgstr ""
"これは動的型のコードではGodotエディタは関数にどのような型の値を渡されてくるの"
"かを知ることができません。ただし型を明示的に記述すると、型からすべてのメソッ"
"ド、プロパティ、定数などを取得することができます。"

msgid "Completion options for static typed code."
msgstr "静的型付きコードの補完オプション。"

msgid ""
"If you prefer static typing, we recommend enabling the **Text Editor > "
"Completion > Add Type Hints** editor setting. Also consider enabling `some "
"warnings <Warning system_>`_ that are disabled by default."
msgstr ""
"静的な型付けを希望する場合は、エディタ設定の **テキスト エディター > 自動補"
"完 > 型ヒントの追加** を有効にすることをお勧めします。またデフォルトでは無効"
"になっている `いくつかの警告 <Warning system_>`_ を有効にすることも検討してく"
"ださい。"

msgid ""
"Also, typed GDScript improves performance by using optimized opcodes when "
"operand/argument types are known at compile time. More GDScript "
"optimizations are planned in the future, such as JIT/AOT compilation."
msgstr ""
"また型が指定されたGDScriptは、コンパイル時にオペランドと引数の型がわかってい"
"る場合、最適化されたオペコードを使用することでパフォーマンスが向上します。将"
"来的にはJIT/AOTコンパイルなど、さらに多くのGDScriptの最適化が計画されていま"
"す。"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"全体として型付きプログラミングはより構造化された経験をあなたに与えます。それ"
"はエラーを防いだり、スクリプトをドキュメント化するときに助けになります。これ"
"はチームや長期的なプロジェクトで作業している場合に特に効果を発揮します。調査"
"によると他の人が書いたコードを読んだり、過去に自分が書いたスクリプトの内容を"
"思い出すことに、開発者が大半の時間を費やしています。コードが明確で構造化され"
"ているほど、素早く理解ができ、素早く前に進むことができます。"

msgid "How to use static typing"
msgstr "静的型付けの使用方法"

msgid "There is no difference between ``=`` and ``:=`` for constants."
msgstr "定数の場合、 ``=`` と ``:=`` に違いはありません。"

msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer. Also, this is useful for typed arrays (like "
"``const A: Array[int] = [1, 2, 3]``), since untyped arrays are used by "
"default."
msgstr ""
"Godotは代入された値から自動的に型を設定するため、定数の型ヒントを書く必要はあ"
"りません。ただしコードの意図をより明確にするために、これを明示的に行うことも"
"できます。また型なし配列がデフォルトで使用されるため、型付き配列 (``const A: "
"Array[int] = [1, 2, 3]`` など) を使う場合にも役立ちます。"

msgid "What can be a type hint"
msgstr "型ヒント(Type Hint)として使用できるもの"

msgid "Here is a complete list of what can be used as a type hint:"
msgstr "型ヒントとして使用できるものは次のとおりです。"

msgid ""
"``Variant``. Any type. In most cases this is not much different from an "
"untyped declaration, but increases readability. As a return type, forces the "
"function to explicitly return some value."
msgstr ""
"``Variant`` はAny型。これはほとんどのケースで、型なしの宣言とあまり変わりませ"
"んが、可読性は向上します。戻り値の型として使用すると、関数が何らかの値を明示"
"的に返すことを強制できます。"

msgid ""
"*(Only return type)* ``void``. Indicates that the function does not return "
"any value."
msgstr "*(戻り値の型のみ)* ``void`` は関数が値を返さないことを示します。"

msgid ":ref:`Built-in types <doc_gdscript_builtin_types>`."
msgstr ":ref:`組み込み型 <doc_gdscript_builtin_types>`。"

msgid "Native classes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)."
msgstr ""
"ネイティブクラス ( ``Object`` 、 ``Node`` 、 ``Area2D`` 、 ``Camera2D`` な"
"ど)。"

msgid ":ref:`Global classes <doc_gdscript_basics_class_name>`."
msgstr ":ref:`グローバルクラス <doc_gdscript_basics_class_name>`。"

msgid ":ref:`Inner classes <doc_gdscript_basics_inner_classes>`."
msgstr ":ref:`内部クラス<doc_gdscript_basics_inner_classes>`。"

msgid ""
"Global, native and custom named enums. Note that an enum type is just an "
"``int``, there is no guarantee that the value belongs to the set of enum "
"values."
msgstr ""
"グローバル、ネイティブ、およびカスタムの名前付き列挙型。 列挙型は単なる "
"``int`` であり、値が列挙型のセットに属するという保証はないことに注意してくだ"
"さい。"

msgid ""
"Constants (including local ones) if they contain a preloaded class or enum."
msgstr ""
"定数 (ローカルのものを含む)。プリロードされたクラスまたは列挙型が含まれている"
"場合。"

msgid "Specify the return type of a function with the arrow ``->``"
msgstr "アロー(``->``)による関数の戻り値の定義"

msgid "Covariance and contravariance"
msgstr "共分散と反分散"

msgid ""
"When inheriting base class methods, you should follow the `Liskov "
"substitution principle <https://en.wikipedia.org/wiki/"
"Liskov_substitution_principle>`__."
msgstr ""
"基本クラスのメソッドを継承するときは、`リスコフの置換原則 <https://"
"ja.wikipedia.org/wiki/"
"%E3%83%AA%E3%82%B9%E3%82%B3%E3%83%95%E3%81%AE%E7%BD%AE%E6%8F%9B%E5%8E%9F%E5%89%87>`__ "
"に従う必要があります。"

msgid ""
"**Covariance:** When you inherit a method, you can specify a return type "
"that is more specific (**subtype**) than the parent method."
msgstr ""
"**共分散:** メソッドを継承する場合、親メソッドよりも具体的な戻り値の型 (**サ"
"ブタイプ**) を指定できます。"

msgid ""
"**Contravariance:** When you inherit a method, you can specify a parameter "
"type that is less specific (**supertype**) than the parent method."
msgstr ""
"**反変性:** メソッドを継承する場合、親メソッドよりも限定性の低い引数の型 (**"
"スーパータイプ**) を指定できます。"

msgid "Example:"
msgstr "例:"

msgid "Specify the element type of an ``Array``"
msgstr "``Array`` 要素の型の指定"

msgid "To define the type of an ``Array``, enclose the type name in ``[]``."
msgstr "``Array`` の型を定義するには、型名を ``[]`` で囲みます。"

msgid ""
"The array will remain untyped, but the ``name`` variable within the ``for`` "
"loop will always be of ``String`` type."
msgstr ""
"配列は型なしですが、 ``for`` ループ内の ``name`` 変数は常に ``String`` 型にな"
"ります。"

msgid "Type casting"
msgstr "型キャスト"

msgid ""
"Type casting is an important concept in typed languages. Casting is the "
"conversion of a value from one type to another."
msgstr ""
"型キャストは型付き言語の重要な概念です。キャストは、ある型の値を別の型へ変換"
"することです。"

msgid ""
"Imagine an ``Enemy`` in your game, that ``extends Area2D``. You want it to "
"collide with the ``Player``, a ``CharacterBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``body_entered`` signal to "
"detect the collision. With typed code, the body you detect is going to be a "
"generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"ゲーム内に ``extends Area2D`` した敵がいると仮定してください。あなたはそれを "
"``PlayerController`` と呼ばれるスクリプトが付いている ``CharacterBody2D`` と"
"衝突させたいのです。衝突を検出するには ``body_entered`` シグナルを使用しま"
"す。型付きコードの ``_on_body_entered`` コールバックでは、検出したボディは一"
"般的な ``PhysicsBody2D`` になり、 ``PlayerController`` にはなりません。"

msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player`` variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"ここではカスタムされた型を扱っているため、 ``body`` が ``PlayerController`` "
"を継承しない場合、 ``player`` 変数は ``null`` に設定されます。これを使って"
"bodyがPlayerControllerかどうかをチェックできます。このキャストのおかげで、"
"player変数のオートコンプリートもできるようになります。"

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"組み込み型でキャストしようとして失敗すると、Godotはエラーをスローします。"

msgid "Safe lines"
msgstr "セーフ・ライン"

msgid ""
"You can also use casting to ensure safe lines. Safe lines are a tool to tell "
"you when ambiguous lines of code are type-safe. As you can mix and match "
"typed and dynamic code, at times, Godot doesn't have enough information to "
"know if an instruction will trigger an error or not at runtime."
msgstr ""
"セーフ・ラインを確保するためにキャストを使用することもできます。セーフ・ライ"
"ンはあいまいなコード行(ライン)が安全(セーフ)な型であることを教えてくれます。"
"型指定されたコードと動的なコードを混在させると、Godotは実行時に命令がエラーを"
"引き起こすかどうかを知るための十分な情報が得られない場合があります。"

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"これは子ノードを取得したときに起こります。たとえばタイマーを考えてみましょ"
"う。動的コードでは、\\ ``$Timer`` でノードを取得できます。GDScriptは `ダッ"
"ク・タイピング <https://stackoverflow.com/a/4205163/8125343>`_ をサポートして"
"いるので、あなたのタイマーが ``Timer`` 型であっても、それは ``Node`` であり "
"``Object`` でもあり、その2つのクラスを継承しています。動的GDScriptでは、ノー"
"ドが呼び出す必要のあるメソッドを持っている場合、その型については気にする必要"
"はありません。"

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as CharacterBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"ノードを取得したときに期待される型をGodotに伝えるためにキャストを使用できま"
"す: ``($Timer as Timer)`` 、 ``($Player as CharacterBody2D)`` など。Godotは、"
"そのタイプが機能することを確認し、機能する場合は、行番号がスクリプトエディタ"
"の左側で緑に変わります。"

msgid "Unsafe vs Safe Line"
msgstr "アンセーフ・ラインとセーフ・ライン"

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "セーフ・ラインではない行(line 7)とセーフ・ライン (line 6 とline 8)"

msgid ""
"Even though ``node_2`` declaration is marked as an unsafe line, it is more "
"reliable than ``node_1`` declaration. Because if you change the node type in "
"the scene and accidentally forget to change it in the script, the error will "
"be detected immediately when the scene is loaded. Unlike ``node_1``, which "
"will be silently cast to ``null`` and the error will be detected later."
msgstr ""
"``node_2`` 宣言はセーフでない行としてマークされていますが、 ``node_1`` 宣言よ"
"りも信頼性が高くなります。シーン内のノード型を変更し、誤ってスクリプト内で変"
"更するのを忘れた場合でも、シーンがロードされるとすぐにエラーが検出されるため"
"です。 ``node_1`` でそれが発生すると、変数は暗黙的に ``null`` にキャストさ"
"れ、後でエラーが検出されます。"

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"セーフ･ラインの色分けをオフにしたり、エディタ設定でカラーを変更することができ"
"ます。"

msgid "Typed or dynamic: stick to one style"
msgstr "静的と動的: どちらかのみを利用する"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"型付きGDScriptと動的GDScriptは、同じプロジェクト内に共存できます。しかし、"
"コードベースの一貫性のためにも、仲間のためにも、どちらかスタイルに統一するこ"
"とをお勧めします。同じガイドラインに従うことで全員が協力しやすくなり、他の人"
"が書いたコードを素早く読んで理解できるようになります。"

msgid "pass"
msgstr "\\ pass"

msgid "Warning system"
msgstr "警告システム"

msgid ""
"Detailed documentation about the GDScript warning system has been moved "
"to :ref:`doc_gdscript_warning_system`."
msgstr ""
"GDScriptの警告システムに関する詳細なドキュメント"
"は :ref:`doc_gdscript_warning_system` に移動しました。"

msgid ""
"We have a number of warnings aimed specifically at users of typed GDScript. "
"By default, these warnings are disabled, you can enable them in Project "
"Settings (**Debug > GDScript**, make sure **Advanced Settings** is enabled)."
msgstr ""
"特に型が指定されたGDScriptのユーザーを対象とした警告が多数あります。デフォル"
"トではこれらの警告は無効になっていますが、プロジェクト設定で有効にすることが"
"できます (**デバッグ > GDScript** と **高度な設定** が有効になっていることを"
"確認してください)。"

msgid ""
"You can enable the ``UNTYPED_DECLARATION`` warning if you want to always use "
"static types. Additionally, you can enable the ``INFERRED_DECLARATION`` "
"warning if you prefer a more readable and reliable, but more verbose syntax."
msgstr ""
"常に静的型を使用したい場合は ``UNTYPED_DECLARATION`` 警告を有効にできます。さ"
"らに、より読みやすく信頼性が高く、より冗長な構文を希望する場合は、 "
"``INFERRED_DECLARATION`` 警告を有効にすることができます。"

msgid ""
"``UNSAFE_*`` warnings make unsafe operations more noticeable, than unsafe "
"lines. Currently, ``UNSAFE_*`` warnings do not cover all cases that unsafe "
"lines cover."
msgstr ""
"``UNSAFE_*`` 警告は、アンセーフな行よりもアンセーフな操作をより顕著にします。"
"現在 ``UNSAFE_*`` 警告は、アンセーフ・ラインがカバーするすべてのケースをカ"
"バーしているわけではありません。"

msgid "Common unsafe operations and their safe counterparts"
msgstr "一般的なアンセーフな操作とセーフな操作"

msgid "``UNSAFE_PROPERTY_ACCESS`` and ``UNSAFE_METHOD_ACCESS`` warnings"
msgstr "``UNSAFE_PROPERTY_ACCESS`` と ``UNSAFE_METHOD_ACCESS`` 警告"

msgid "``UNSAFE_CAST`` warning"
msgstr "``UNSAFE_CAST`` 警告"

msgid "Cases where you can't specify types"
msgstr "型の指定ができないケース"

msgid ""
"To wrap up this introduction, let's mention cases where you can't use type "
"hints. This will trigger a **syntax error**."
msgstr ""
"この紹介の締めくくりに、型ヒントを使用できないケースを取り上げましょう。 以下"
"の例はすべて **構文エラー** が発生します。"

msgid "Summary"
msgstr "要約"

msgid ""
"Typed GDScript is a powerful tool. It helps you write more structured code, "
"avoid common errors, and create scalable and reliable systems. Static types "
"improve GDScript performance and more optimizations are planned for the "
"future."
msgstr ""
"型付きGDScriptは強力なツールです。より構造化されたコードの記述、一般的なエ"
"ラーの回避、スケーラブルシステムで信頼性の高いシステムの作成に役立ちます。静"
"的型によりGDScriptのパフォーマンスが向上し、将来的にはさらなる最適化が計画さ"
"れています。"
