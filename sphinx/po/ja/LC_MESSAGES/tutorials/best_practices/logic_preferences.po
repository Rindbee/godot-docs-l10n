#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Logic preferences"
msgstr "ロジックの設定"

msgid ""
"Ever wondered whether one should approach problem X with strategy Y or Z? "
"This article covers a variety of topics related to these dilemmas."
msgstr ""
"問題Xにアプローチするときに、戦略をYにするかZするかについて悩んだことはありま"
"せんか？この記事では、これらのジレンマに関連するさまざまなトピックについて説"
"明します。"

msgid "Loading vs. preloading"
msgstr "ロード(load) 対 プリロード(preload)"

msgid ""
"In GDScript, there exists the global :ref:`preload "
"<class_@GDScript_method_preload>` method. It loads resources as early as "
"possible to front-load the \"loading\" operations and avoid loading "
"resources while in the middle of performance-sensitive code."
msgstr ""
"GDScript には、グローバル :ref:`preload <class_@GDScript_method_preload>` メ"
"ソッドが存在します。\"読み込み\" 処理を前もって行い、パフォーマンスに敏感な"
"コードの途中で、リソースの読み込が発生することを回避するために、できるだけ早"
"くリソースを読み込みます。"

msgid ""
"So, when exactly does preloading occur versus loading, and when should one "
"use either? Let's see an example:"
msgstr ""
"それでは、load と比較して preload が発生するのは正確にはいつですか？例を見て"
"みましょう:"

msgid ""
"Preloading allows the script to handle all the loading the moment one loads "
"the script. Preloading is useful, but there are also times when one doesn't "
"wish for it. To distinguish these situations, there are a few things one can "
"consider:"
msgstr ""
"preload により、スクリプトは、スクリプトを読み込んだ瞬間にすべての読み込みを"
"処理できます。preload は便利ですが、それを望まない場合もあります。これらの状"
"況を区別するために、考慮できることがいくつかあります。"

msgid ""
"If one cannot determine when the script might load, then preloading a "
"resource, especially a scene or script, could result in further loads one "
"does not expect. This could lead to unintentional, variable-length load "
"times on top of the original script's load operations."
msgstr ""
"スクリプトがいつロードされるかを判断できない場合、リソース、特にシーンまたは"
"スクリプトをプリロードすると、予期しない追加のロードが発生する可能性がありま"
"す。これにより、元のスクリプトのロード操作に加えて、意図しない可変長のロード"
"時間が発生する可能性があります。"

msgid ""
"If something else could replace the value (like a scene's exported "
"initialization), then preloading the value has no meaning. This point isn't "
"a significant factor if one intends to always create the script on its own."
msgstr ""
"シーンのエクスポートされた初期化など、他の何かが値を置き換えることができる場"
"合、値をプリロードしても意味がありません。スクリプトを常に独自に作成する場"
"合、この点は重要な要素ではありません。"

msgid "Large levels: static vs. dynamic"
msgstr "大きなレベル(ステージ): 静的レベル 対 動的レベル"

msgid ""
"If one is creating a large level, which circumstances are most appropriate? "
"Should they create the level as one static space? Or should they load the "
"level in pieces and shift the world's content as needed?"
msgstr ""
"大きなレベルを作成している場合、どの状況が最も適切ですか？レベルを1つの静的な"
"空間として作成する必要がありますか？または、レベルを断片的にロードし、必要に"
"応じてワールドのコンテンツをシフトする必要がありますか？"

msgid ""
"The naive answer is to use a static level that loads everything at once. "
"But, depending on the project, this could consume a large amount of memory. "
"Wasting users' RAM leads to programs running slow or outright crashing from "
"everything else the computer tries to do at the same time."
msgstr ""
"素朴な答えは、すべてを一度にロードする静的レベルを使用することです。ただし、"
"プロジェクトによっては、大量のメモリを消費する可能性があります。ユーザーのRAM"
"を浪費すると、コンピュータが同時に実行しようとする他のすべてのプログラムが、"
"低速化または完全にクラッシュしてしまいます。"

msgid ""
"No matter what, one should break larger scenes into smaller ones (to aid in "
"reusability of assets). Developers can then design a node that manages the "
"creation/loading and deletion/unloading of resources and nodes in real-time. "
"Games with large and varied environments or procedurally generated elements "
"often implement these strategies to avoid wasting memory."
msgstr ""
"何があっても、大きなシーンを小さなシーンに分割する必要があります(資産の再利用"
"性を高めるため)。開発者は、リソースとノードの作成/ロード、削除/アンロードをリ"
"アルタイムで管理するノードを設計できます。大規模で多様な環境や手続き的に生成"
"された要素を持つゲームは、多くの場合、メモリの無駄を避けるためにこれらの戦略"
"を実装します。"

msgid ""
"On the flip side, coding a dynamic system is more complex, i.e. uses more "
"programmed logic, which results in opportunities for errors and bugs. If one "
"isn't careful, they can develop a system that bloats the technical debt of "
"the application."
msgstr ""
"裏を返せば、動的システムのコーディングはより複雑です。つまり、より多くのプロ"
"グラムされたロジックを使用するため、エラーやバグが発生する可能性があります。"
"注意しないと、アプリケーションの技術的負債を膨らませるシステムを開発してしま"
"います。"

msgid "As such, the best options would be..."
msgstr "そのため、最良のオプションは..."

msgid "To use a static level for smaller games."
msgstr "小さなゲームには静的レベルを使用する。"

msgid ""
"If one has the time/resources on a medium/large game, create a library or "
"plugin that can code the management of nodes and resources. If refined over "
"time, so as to improve usability and stability, then it could evolve into a "
"reliable tool across projects."
msgstr ""
"中規模または大規模のゲームでは、時間/リソースが確保できる場合は、ノードとリ"
"ソースの管理をコーディングできるライブラリまたはプラグインを作成します。使い"
"やすさと安定性を改善するために時間の経過とともに改良されれば、プロジェクト全"
"体で信頼性の高いツールに進化する可能性があります。"

msgid ""
"Code the dynamic logic for a medium/large game because one has the coding "
"skills, but not the time or resources to refine the code (game's gotta get "
"done). Could potentially refactor later to outsource the code into a plugin."
msgstr ""
"コーディングスキルはあるが、コードを絞り込むための時間やリソースは持っていな"
"いため、中規模/大規模ゲームの動的ロジックをコーディングします(ゲームを完成さ"
"せる必要があるので)。後でリファクタリングして、コードをプラグインにアウトソー"
"スできます。"

msgid ""
"For an example of the various ways one can swap scenes around at runtime, "
"please see the :ref:`\"Change scenes manually\" "
"<doc_change_scenes_manually>` documentation."
msgstr ""
"実行時にシーンを入れ替えるさまざまな方法の例については、\\ :ref:`「手動でシー"
"ンを変更する」 <doc_change_scenes_manually>` ドキュメントを参照してください。"

msgid "Translation status"
msgstr "翻訳ステータス"
