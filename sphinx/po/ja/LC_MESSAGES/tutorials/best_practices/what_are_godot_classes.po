#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Applying object-oriented principles in Godot"
msgstr "オブジェクト指向の原則をGodotに適用する"

msgid ""
"The engine offers two main ways to create reusable objects: scripts and "
"scenes. Neither of these technically define classes under the hood."
msgstr ""
"エンジンは、再利用可能なオブジェクトを作成するための2つの主な方法を提供しま"
"す: スクリプトとシーンです。これらのどちらも、内部でクラスを技術的に定義して"
"いません。"

msgid ""
"Still, many best practices using Godot involve applying object-oriented "
"programming principles to the scripts and scenes that compose your game. "
"That is why it's useful to understand how we can think of them as classes."
msgstr ""
"それでも、Godot を使用する多くのベスト プラクティスでは、ゲームを構成するスク"
"リプトやシーンにオブジェクト指向プログラミングの原則を適用します。そのため、"
"それらをクラスとしてどのように考えることができるかを理解することが有用です。"

msgid ""
"This guide briefly explains how scripts and scenes work in the engine's core "
"to help you understand how they work under the hood."
msgstr ""
"このガイドでは、スクリプトとシーンがエンジンのコアでどのように機能するかを説"
"明します。Godotが内部でどのように機能するかを理解するのに役立ちます。"

msgid "How scripts work in the engine"
msgstr "エンジン内のスクリプトの働き"

msgid ""
"The engine provides built-in classes like :ref:`Node <class_Node>`. You can "
"extend those to create derived types using a script."
msgstr ""
"エンジンは :ref:`Node <class_Node>` のような組み込みクラスを提供します。スク"
"リプトを使用して、それらを拡張して派生型を作成できます。"

msgid ""
"These scripts are not technically classes. Instead, they are resources that "
"tell the engine a sequence of initializations to perform on one of the "
"engine's built-in classes."
msgstr ""
"これらのスクリプトは技術的にはクラスではありません。しかし代わりに、エンジン"
"の組み込みクラスで実行される初期化シーケンスをエンジンに伝えるリソースです。"

msgid ""
"Godot's internal classes have methods that register a class's data with a :"
"ref:`ClassDB <class_ClassDB>`. This database provides runtime access to "
"class information. ``ClassDB`` contains information about classes like:"
msgstr ""
"Godotの内部クラスには、クラスのデータを :ref:`ClassDB <class_ClassDB>` に登録"
"するメソッドがあります。このデータベースは、クラス情報へのランタイムアクセス"
"を提供します。``ClassDB`` には、次のようなクラスに関する情報が含まれていま"
"す。"

msgid "Properties."
msgstr "プロパティ。"

msgid "Methods."
msgstr "メソッド。"

msgid "Constants."
msgstr "定数。"

msgid "Signals."
msgstr "シグナル。"

msgid ""
"This ``ClassDB`` is what objects check against when performing an operation "
"like accessing a property or calling a method. It checks the database's "
"records and the object's base types' records to see if the object supports "
"the operation."
msgstr ""
"この ``ClassDB`` は、プロパティへのアクセスやメソッドの呼び出しなどの操作を実"
"行するときにオブジェクトがチェックするものです。``ClassDB`` では、データベー"
"スのレコードとオブジェクトの基底型のレコードをチェックして、オブジェクトが操"
"作をサポートしているかどうかを確認します。"

msgid ""
"Attaching a :ref:`Script <class_Script>` to your object extends the methods, "
"properties, and signals available from the ``ClassDB``."
msgstr ""
"オブジェクトに :ref:`Script <class_Script>` をアタッチすると、``ClassDB`` か"
"ら利用できるメソッド、プロパティ、およびシグナルが拡張されます。"

msgid ""
"Even scripts that don't use the ``extends`` keyword implicitly inherit from "
"the engine's base :ref:`RefCounted <class_RefCounted>` class. As a result, "
"you can instantiate scripts without the ``extends`` keyword from code. Since "
"they extend ``RefCounted`` though, you cannot attach them to a :ref:`Node "
"<class_Node>`."
msgstr ""
"``extends`` キーワードを使用しないスクリプトでも、エンジンの基本クラス :ref:"
"`RefCounted <class_RefCounted>` から暗黙的に継承されます。その結果、コードか"
"ら ``extends`` キーワードを使用せずにスクリプトをインスタンス化できます。ただ"
"しこのスクリプトは ``RefCounted`` を拡張するため、:ref:`Node <class_Node>` に"
"アタッチすることはできません。"

msgid "Scenes"
msgstr "シーン"

msgid ""
"The behavior of scenes has many similarities to classes, so it can make "
"sense to think of a scene as a class. Scenes are reusable, instantiable, and "
"inheritable groups of nodes. Creating a scene is similar to having a script "
"that creates nodes and adds them as children using ``add_child()``."
msgstr ""
"シーンの動作はクラスと似ているため、シーンをクラスと考えるのも理にかなってい"
"ます。シーンは、再利用可能で、インスタンス化可能で、継承可能なノードのグルー"
"プです。シーンを作ることは、ノードを作り``add_child()``を使ってノードを子とし"
"て追加するようなスクリプトを持つことに似ています。"

msgid ""
"We often pair a scene with a scripted root node that makes use of the "
"scene's nodes. As such, the script extends the scene by adding behavior "
"through imperative code."
msgstr ""
"多くの場合、シーンは、シーン内のノードを使用するスクリプト化されたルートノー"
"ドとペアになっています。このように、スクリプトは命令型コードによって動作を追"
"加することで、シーンを拡張します。"

msgid "The content of a scene helps to define:"
msgstr "シーンのコンテンツは、以下を定義するのに役立ちます:"

msgid "What nodes are available to the script."
msgstr "スクリプトで使用可能なノード。"

msgid "How they are organized."
msgstr "どのように構成されているか。"

msgid "How they are initialized."
msgstr "どのように初期化されるか。"

msgid "What signal connections they have with each other."
msgstr "それらが互いにどのようなシグナルで接続されているか。"

msgid ""
"Why is any of this important to scene organization? Because instances of "
"scenes *are* objects. As a result, many object-oriented principles that "
"apply to written code also apply to scenes: single responsibility, "
"encapsulation, and others."
msgstr ""
"シーン編成にとって、このようなものが重要なのはなぜでしょうか？ なぜなら、シー"
"ンのインスタンス\\ *が*\\ オブジェクトだからです。結果、コードを書くのに適用"
"された多くのオブジェクト指向原理はシーンにも適用されます : 単一責任、カプセル"
"化、その他などです。"

msgid ""
"The scene is *always an extension of the script attached to its root node*, "
"so you can interpret it as part of a class."
msgstr ""
"シーンは *常にルートノードにアタッチされたスクリプトの拡張* です 。なのでこれ"
"はクラスの一部として解釈できます。"

msgid ""
"Most of the techniques explained in this best practices series build on this "
"point."
msgstr "このシリーズで説明するテクニックのほとんどは、これに基づいています。"
