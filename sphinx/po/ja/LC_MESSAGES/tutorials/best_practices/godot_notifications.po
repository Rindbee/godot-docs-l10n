#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Godotの通知"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_private_method__notification>` method. Its purpose is to allow "
"the Object to respond to a variety of engine-level callbacks that may relate "
"to it. For example, if the engine tells a :ref:`CanvasItem "
"<class_CanvasItem>` to \"draw\", it will call "
"``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Godotのすべてのオブジェクトは :ref:`_notification "
"<class_Object_private_method__notification>` メソッドを実装します。その目的"
"は、オブジェクトがそれに関連する可能性のあるさまざまなエンジンレベルのコール"
"バックに応答できるようにすることです。たとえば、エンジンが :ref:`CanvasItem "
"<class_CanvasItem>` に「描画(draw)」するように指示すると、\\ ``_ "
"notification(NOTIFICATION_DRAW)`` が呼び出されます。"

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"drawなどのこれらの通知の一部は、スクリプトでオーバーライドするのに役立ちま"
"す。Godotは、Godotがそれらの多くを専用関数で公開するほどです:"

msgid "``_ready()``: ``NOTIFICATION_READY``"
msgstr "\\ ``_ready()`` : ``NOTIFICATION_READY``"

msgid "``_enter_tree()``: ``NOTIFICATION_ENTER_TREE``"
msgstr "\\ ``_enter_tree()`` : ``NOTIFICATION_ENTER_TREE``"

msgid "``_exit_tree()``: ``NOTIFICATION_EXIT_TREE``"
msgstr "\\ ``_exit_tree()`` : ``NOTIFICATION_EXIT_TREE``"

msgid "``_process(delta)``: ``NOTIFICATION_PROCESS``"
msgstr "\\ ``_process(delta)`` : ``NOTIFICATION_PROCESS``"

msgid "``_physics_process(delta)``: ``NOTIFICATION_PHYSICS_PROCESS``"
msgstr "\\ ``_physics_process(delta)`` : ``NOTIFICATION_PHYSICS_PROCESS``"

msgid "``_draw()``: ``NOTIFICATION_DRAW``"
msgstr "\\ ``_draw()`` : ``NOTIFICATION_DRAW``"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone, for example:"
msgstr ""
"ユーザーが\\ *気付いていない*\\ かもしれないのは、Nodeではないタイプにも通知"
"が存在するということです。たとえば次の例です:"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: オブジェクトの初期化中"
"にトリガーされるコールバック。スクリプトからアクセスできません。"

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a \"destructor\"."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: エンジンがオブジェクトを削除"
"する前にトリガーされるコールバック。つまり「デストラクタ」です。"

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"また、ノードに存在するコールバックの多くには専用のメソッドはありませんが、そ"
"れでも非常に便利です。"

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: 子ノードを別のノードに追加する"
"たびにトリガーするコールバック。"

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: 別のノードから子ノードを削除"
"するたびにトリガーするコールバック。"

msgid ""
"One can access all these custom notifications from the universal "
"``_notification()`` method."
msgstr ""
"これらすべてのカスタム通知には、ユニバーサルな ``_notification()`` メソッドか"
"らアクセスできます。"

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"\"virtual\" というラベルの付いたドキュメント内のメソッドも、スクリプトによっ"
"てオーバーライドされることを目的としています。"

msgid ""
"A classic example is the :ref:`_init <class_Object_private_method__init>` "
"method in Object. While it has no ``NOTIFICATION_*`` equivalent, the engine "
"still calls the method. Most languages (except C#) rely on it as a "
"constructor."
msgstr ""
"典型的な例は、Objectの :ref:`_init <class_Object_private_method__init>` メ"
"ソッドです。\\ ``NOTIFICATION_*`` に相当するものはありませんが、エンジンはメ"
"ソッドを呼び出します。ほとんどの言語(C#を除く)は、コンストラクターとして使用"
"します。"

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"それでは、これらの通知や仮想機能のそれぞれをどの状況で使用すべきでしょうか？"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process 対 _physics_process 対 \\*_input"

msgid ""
"Use ``_process()`` when one needs a framerate-dependent delta time between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-timeout loop is another option."
msgstr ""
"フレームレートに依存するフレーム間のデルタタイムが必要な場合は ``_process`` "
"を使用します。オブジェクトデータを更新するコードをできるだけ頻繁に更新する必"
"要がある場合、これが適切な場所です。繰り返しのロジックチェックとデータキャッ"
"シングがここで実行されることがよくありますが、更新するために評価が必要になる"
"頻度になります。すべてのフレームを実行する必要がない場合は、Timer-timeoutルー"
"プを実装することも別のオプションです。"

msgid ""
"Use ``_physics_process()`` when one needs a framerate-independent delta time "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"フレームレートに依存しないフレーム間のデルタタイムが必要な場合は "
"``_physics_process`` を使用します。時間の進み具合に関係なく、コードが時間の経"
"過とともに一貫した更新を必要とする場合は、これが適切な場所です。繰り返しのキ"
"ネマティックおよびオブジェクトのトランスフォーム操作をここで実行する必要があ"
"ります。"

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process()`` and "
"``_physics_process()`` will trigger at every opportunity (they do not "
"\"rest\" by default). In contrast, ``*_input()`` callbacks will trigger only "
"on frames in which the engine has actually detected the input."
msgstr ""
"最高のパフォーマンスを得るには、可能な限りこれらのコールバック中に入力チェッ"
"クを行わないようにする必要があります。\\ ``_process`` と "
"``_physics_process`` はあらゆる機会にトリガーします(デフォルトでは「休息」し"
"ません)。対照的に、\\ ``*_input`` コールバックは、エンジンが実際に入力を検出"
"したフレームでのみトリガーされます。"

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related delta time "
"methods as needed."
msgstr ""
"同様に入力コールバック内でも入力アクションを確認できます。デルタ時間を使用す"
"る場合、必要に応じて関連するデルタ時間メソッドからそれを取得できます。"

msgid "_init vs. initialization vs. export"
msgstr "_init 対 初期値 対 エクスポート値"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute in ``_init()``. Other property or SceneTree-independent "
"initializations should also run here."
msgstr ""
"スクリプトがシーンなしで独自のノードサブツリーを初期化する場合、そのコードは "
"``_init()`` で実行する必要があります。その他のプロパティまたは SceneTree に依"
"存しない初期化もここで実行する必要があります。"

msgid "The C# equivalent to GDScript's ``_init()`` method is the constructor."
msgstr ""
"C#でGDScriptの ``_init()`` メソッドに相当するのは、コンストラクタです。"

msgid ""
"``_init()`` triggers before ``_enter_tree()`` or ``_ready()``, but after a "
"script creates and initializes its properties. When instantiating a scene, "
"property values will set up according to the following sequence:"
msgstr ""
"``_init()`` は ``_enter_tree()`` または ``_ready()`` の前にトリガーされます"
"が、スクリプトがプロパティを作成して初期化した後にトリガーされます。シーンを"
"インスタンス化するときに、プロパティ値は次の順序に従って設定されます。"

msgid ""
"**Initial value assignment:** the property is assigned its initialization "
"value, or its default value if one is not specified. If a setter exists, it "
"is not used."
msgstr ""
"**初期値のセット:** プロパティには初期値がセットされます。指定されていない場"
"合はデフォルト値がセットされます。セッターが存在する場合は使用されません。"

msgid ""
"**Exported value assignment:** an exported property's value is again "
"replaced by any value set in the Inspector, triggering the setter."
msgstr ""
"**エクスポートされた値のセット:** エクスポートされたプロパティの値は、インス"
"ペクターで設定された任意の値に置き換えられ、セッターがトリガーされます。"

msgid ""
"As a result, instantiating a script versus a scene may affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"その結果、スクリプトとシーンのインスタンス化は、初期化とエンジンがセッターを"
"呼び出す回数の両方に影響する可能性があります。"

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready 対 _enter_tree 対 NOTIFICATION_PARENTED"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init()`` calls) and build the "
"tree going downwards from the root. This causes ``_enter_tree()`` calls to "
"cascade down the tree. Once the tree is complete, leaf nodes call "
"``_ready``. A node will call this method once all child nodes have finished "
"calling theirs. This then causes a reverse cascade going up back to the "
"tree's root."
msgstr ""
"最初に実行されたシーンに接続されたシーンをインスタンス化する場合、Godot はツ"
"リーの下のノードをインスタンス化して (``_init`` 呼び出しを行います)、ルートか"
"ら下に向かってツリーを構築します。これにより ``_enter_tree`` 呼び出しがツリー"
"の下に向かってカスケードされます。ツリーが完成すると、リーフ ノードは "
"``_ready`` を呼び出します。すべての子ノードが呼び出しを終えると、ノードはこの"
"メソッドを呼び出します。これによりツリーのルートに戻る逆カスケードが発生しま"
"す。"

msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree()`` callbacks trigger. "
"Instead, only the ``_init()`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree()`` and ``_ready()`` calls occur."
msgstr ""
"スクリプトまたはスタンドアロン シーンをインスタンス化する場合、ノードは作成時"
"にSceneTreeに追加されないため、 ``_enter_tree()`` コールバックはトリガーされ"
"ません。代わりに ``_init()`` 呼び出しのみが発生します。シーンが SceneTree に"
"追加されると ``_enter_tree()`` および ``_ready()`` 呼び出しが発生します。"

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"メイン/アクティブシーンの一部として発生するかどうかに関係なく、ノードが別の"
"ノードの親として発生する動作をトリガーする必要があるばあい、"
"\\ :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` 通知を使用でき"
"ます。たとえば、ノードのメソッドを、失敗せずに親ノードのカスタムシグナルに接"
"続するスニペットを次に示します。実行時に作成されるデータ中心のノードで役立ち"
"ます。"
