#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When and how to avoid using nodes for everything"
msgstr "ノードの使用をさけるべき場合といろいろな方法"

msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"ノードは安価に作成できますが、制限があります。プロジェクトには、すべてで処理"
"を行う数万のノードが含まれている場合があります。ただし、動作が複雑になるほ"
"ど、それぞれの負荷がプロジェクトのパフォーマンスに大きく影響します。"

msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"Godot には、ノードが使用するAPIを作成するための、より軽量なオブジェクトが用意"
"されています。プロジェクトの機能を構築する方法を設計する際には、これらのオプ"
"ションを念頭に置いてください。"

msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
":ref:`Object <class_Object>`: 究極の軽量オブジェクトであり、オリジナルのオブ"
"ジェクトは手動メモリ管理を使用する必要があります。そうは言っても、"
"\\ :ref:`Node <class_Node>` クラスよりも軽い独自のカスタムデータ構造、さらに"
"はノード構造を作成することはそれほど難しくありません。"

msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"**例:** :ref:`Tree <class_Tree>` ノードを参照してください。任意の数の行と列を"
"持つコンテンツテーブルの高度なカスタマイズをサポートします。ただし、視覚化の"
"生成に使用するデータは、実際には :ref:`TreeItem <class_TreeItem>` オブジェク"
"トのツリーです。"

msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"\\ **利点:** APIをより小さなスコープのオブジェクトに単純化すると、アクセシビ"
"リティが向上し、改善のための反復時間が改善されます。 ノードライブラリ全体を扱"
"う代わりに、ノードが適切なサブノードを生成・管理するための簡潔なオブジェクト"
"セットを作成することができます。"

msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"それらを扱うときは注意が必要です。オブジェクトを変数に保存できますが、これら"
"の参照は警告なしに無効になる可能性があります。たとえば、オブジェクトの作成者"
"がどこからでもオブジェクトを削除することを決定した場合、その次にオブジェクト"
"にアクセスしたときにエラー状態が発生します。"

msgid ""
":ref:`RefCounted <class_RefCounted>`: Only a little more complex than "
"Object. They track references to themselves, only deleting loaded memory "
"when no further references to themselves exist. These are useful in the "
"majority of cases where one needs data in a custom class."
msgstr ""
"\\ :ref:`RefCounted <class_RefCounted>`: オブジェクトよりも少しだけ複雑です。"
"自身への参照を追跡し、それ自体への参照がそれ以上存在しない場合にのみ、ロード"
"されたメモリを削除します。これらは、カスタムクラスでデータが必要になるほとん"
"どの場合に役立ちます。"

msgid ""
"**Example:** See the :ref:`FileAccess <class_FileAccess>` object. It "
"functions just like a regular Object except that one need not delete it "
"themselves."
msgstr ""
"\\ **例:** :ref:`FileAccess <class_FileAccess>` オブジェクトを参照してくださ"
"い。通常のオブジェクトと同じように機能しますが、自分で削除する必要がありませ"
"ん。"

msgid "**Advantages:** same as the Object."
msgstr "**利点:** オブジェクトと同じです。"

msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than "
"RefCounted. They have the innate ability to serialize/deserialize (i.e. save "
"and load) their object properties to/from Godot resource files."
msgstr ""
":ref:`Resource <class_Resource>`: Referenceよりも少しだけ複雑です。それらは、"
"Godotリソースファイルとの間でオブジェクトプロパティをシリアル化/逆シリアル化"
"(つまりセーブおよびロード)する固有の機能を備えています。"

msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be saved and loaded, therefore they extend from Resource."
msgstr ""
"\\ **例:** Scripts、PackedScene(シーンファイル用)、および :ref:`AudioEffect "
"<class_AudioEffect>` クラスの各種型などが挙げられます。これらはいずれも保存お"
"よび読み込みが可能であるため、Resource を拡張しています。"

msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` "
"on :ref:`Resource <class_Resource>`'s advantages over traditional data "
"storage methods. In the context of using Resources over Nodes though, their "
"main advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/RefCounted, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
"\\ **利点:** :ref:`リソース <class_Resource>` が従来のデータストレージ方法よ"
"り優れている点については、すでに多くが :ref:`述べられています "
"<doc_resources>` 。特にノードと比べてリソースを選ぶ文脈では、その主な利点は "
"**インスペクタとの互換性** にあります。Object/RefCounted とほぼ同じ軽量性を持"
"ちながらも、インスペクタでプロパティの表示やエクスポートが可能です。これによ"
"り、使用性の面ではサブノードのような役割を果たしつつ、多数のリソースやノード"
"をシーンに配置する場合にはパフォーマンスを向上させることができます。"
