#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Scene organization"
msgstr "シーン構成"

msgid "How to build relationships effectively"
msgstr "個々の結びつきを効果的に構築する方法"

msgid ""
"When Godot users begin crafting their own scenes, they often run into the "
"following problem:"
msgstr ""
"Godotユーザーが独自のシーンを作成し始めると、次の問題に遭遇することがよくあり"
"ます。"

msgid ""
"They create their first scene and fill it with content only to eventually "
"end up saving branches of their scene into separate scenes as the nagging "
"feeling that they should split things up starts to accumulate. However, they "
"then notice that the hard references they were able to rely on before are no "
"longer possible. Re-using the scene in multiple places creates issues "
"because the node paths do not find their targets and signal connections "
"established in the editor break."
msgstr ""
"彼らは最初にシーンを作成しコンテンツで埋めてから、パーツを分割すべきだという"
"煩わしい思いが募っていき、結局シーンのブランチを別のシーンに保存することにし"
"ます。 しかしここで、それまで頼りにしていたハードリファレンスがもはや不可能で"
"あることに気づきます。シーンを複数の場所で再利用すると、ノードパスがターゲッ"
"トを見つけられないかったり、エディタで確立されたシグナル接続が壊れたりして問"
"題が発生します。"

msgid ""
"One of the biggest things to consider in OOP is maintaining focused, "
"singular-purpose classes with `loose coupling <https://en.wikipedia.org/wiki/"
"Loose_coupling>`_ to other parts of the codebase. This keeps the size of "
"objects small (for maintainability) and improves their reusability."
msgstr ""
"OOP(オブジェクト指向プログラミング)で考慮すべき最も重要なことの1つは、焦点を"
"絞り、単一目的を持つクラスを維持することであり、これらのクラスは他のコード"
"ベース部分と `loose coupling <https://en.wikipedia.org/wiki/"
"Loose_coupling>`_ であるべきです。これにより、オブジェクトのサイズが(保守性の"
"ために)小さく保たれ、再利用性が向上します。"

msgid ""
"These OOP best practices have *several* implications for best practices in "
"scene structure and script usage."
msgstr ""
"これらのOOPのベストプラクティスには、シーン構造とスクリプトの使用におけるベス"
"トプラクティスにも *いくつかの* 影響があります。"

msgid ""
"If a scene must interact with an external context, experienced developers "
"recommend the use of `Dependency Injection <https://en.wikipedia.org/wiki/"
"Dependency_injection>`_. This technique involves having a high-level API "
"provide the dependencies of the low-level API. Why do this? Because classes "
"which rely on their external environment can inadvertently trigger bugs and "
"unexpected behavior."
msgstr ""
"シーンが外部コンテキストとやり取りする必要がある場合、経験豊富な開発者は、 `"
"依存性の注入 <https://en.wikipedia.org/wiki/Dependency_injection>`_ の使用を"
"お勧めします。この手法では、高レベルAPIを使用して低レベルAPIの依存関係を提供"
"します。なぜこれを行うのですか？外部環境に依存するクラスは、誤ってバグや予期"
"しない動作を引き起こす可能性があるためです。"

msgid ""
"Connect to a signal. Extremely safe, but should be used only to \"respond\" "
"to behavior, not start it. By convention, signal names are usually past-"
"tense verbs like \"entered\", \"skill_activated\", or \"item_collected\"."
msgstr ""
"シグナルに接続します。非常に安全ですが、動作を始めるためではなく、動作に「応"
"答」するためだけに使用するべきです。シグナル名は通"
"常、\"entered\"、\"skill_activated\"、または \"item_collected\" のような過去"
"形の動詞であることに注意してください。"

msgid "Call a method. Used to start behavior."
msgstr "メソッドを呼び出します。動作を開始するために使用されます。"

msgid ""
"Initialize a :ref:`Callable <class_Callable>` property. Safer than a method "
"as ownership of the method is unnecessary. Used to start behavior."
msgstr ""
":ref:`Callable <class_Callable>` プロパティを初期化します。メソッドの所有権は"
"不要なので、メソッドよりも安全です。動作を開始するために使用されます。"

msgid "Initialize a Node or other Object reference."
msgstr "ノードまたはその他のオブジェクト参照を初期化します。"

msgid "Initialize a NodePath."
msgstr "NodePathを初期化します。"

msgid ""
"A GUI like this can better inform project users of critical information "
"about a Node. Does it have external dependencies? Have those dependencies "
"been satisfied? Other programmers, and especially designers and writers, "
"will need clear instructions in the messages telling them what to do to "
"configure it."
msgstr ""
"このようなGUIを使用すると、プロジェクトユーザーにノードに関する重要な情報をよ"
"り適切に通知できます。外部依存関係はありますか？これらの依存関係は満たされて"
"いますか？などです。他のプログラマー、特にデザイナーとライターに対し、それを"
"構成する作業のために必要な指示を、メッセージを通して明確に伝えます。"

msgid ""
"Scripts and scenes, as extensions of engine classes, should abide by *all* "
"OOP principles. Examples include..."
msgstr ""
"スクリプトとシーンはエンジンのクラスを拡張したものなので、\\ *すべての*\\ OOP"
"原則を順守するべきです。例として…"

msgid "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"
msgstr "`SOLID <https://ja.wikipedia.org/wiki/SOLID>`_"

msgid "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"
msgstr "`DRY <https://ja.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"

msgid "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"
msgstr ""
"`KISS <https://ja.wikipedia.org/wiki/KISS%E3%81%AE%E5%8E%9F%E5%89%87>`_"

msgid "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"
msgstr "`YAGNI <https://ja.wikipedia.org/wiki/YAGNI>`_"

msgid "Choosing a node tree structure"
msgstr "ノードツリー構造の選択"

msgid "Node \"Main\" (main.gd)"
msgstr "\\ Node \"Main\" (main.gd)"

msgid "Node2D/Node3D \"World\" (game_world.gd)"
msgstr "\\ Node2D/Node3D \"World\" (game_world.gd)"

msgid "Control \"GUI\" (gui.gd)"
msgstr "\\ Control \"GUI\" (gui.gd)"

msgid "tracks all of its data internally"
msgstr "すべてのデータを内部的に追跡する"

msgid "should be globally accessible"
msgstr "グローバルにアクセス可能でなければなりません"

msgid "should exist in isolation"
msgstr "独立して存在する必要があります"

msgid ""
"For smaller games, a simpler alternative with less control would be to have "
"a \"Game\" singleton that simply calls the :ref:`SceneTree."
"change_scene_to_file() <class_SceneTree_method_change_scene_to_file>` method "
"to swap out the main scene's content. This structure more or less keeps the "
"\"World\" as the main game node."
msgstr ""
"小規模なゲームの場合、制御が少ない簡単な代替手段は「Game」シングルトンを作る"
"ことです。これは単に :ref:`SceneTree.change_scene_to_file() "
"<class_SceneTree_method_change_scene_to_file>` メソッドを呼び出してメインシー"
"ンのコンテンツをスワップします。この構造は、「World」をメインゲームノードとし"
"てほぼ維持します。"

msgid ""
"A reliable third party, likely a parent node, to mediate the assignment."
msgstr "割り当てを仲介する信頼できるサードパーティ(おそらく親ノード)。"

msgid "Add a \"player\" node to a \"room\"."
msgstr "「プレイヤー」ノードを「ルーム」に追加する。"

msgid "Move the player somewhere else in the tree."
msgstr "プレイヤーをツリー内の別の場所に移動します。"

msgid "Delete the room."
msgstr "部屋を削除します。"

msgid "Instantiate and add the new room."
msgstr "新しい部屋をインスタンス化して追加します。"

msgid "More consistency."
msgstr "より一貫性が高くなります。"

msgid "No \"special cases\" that must be documented and maintained somewhere."
msgstr "どこかに文書化して保守する必要がある「特別なケース」はありません。"

msgid ""
"No opportunity for errors to occur because these details are not accounted "
"for."
msgstr ""
"これらの詳細を考慮する必要がないため、エラーが発生する可能性はありません。"

msgid ""
"The **imperative** solution: Use the ``top_level`` property for the :ref:"
"`CanvasItem <class_CanvasItem_property_top_level>` or :ref:`Node3D "
"<class_Node3D_property_top_level>` node. This will make the node ignore its "
"inherited transform."
msgstr ""
"\\ **imperative** ソリューション: :ref:`CanvasItem "
"<class_CanvasItem_property_top_level>` ノードまたは :ref:`Node3D "
"<class_Node3D_property_top_level>` ノードに ``top_level`` プロパティを使用し"
"ます。これにより、ノードは継承された幾何学変換を無視します。"

msgid ""
"The key to scene organization is to consider the SceneTree in relational "
"terms rather than spatial terms. Are the nodes dependent on their parent's "
"existence? If not, then they can thrive all by themselves somewhere else. If "
"they are dependent, then it stands to reason that they should be children of "
"that parent (and likely part of that parent's scene if they aren't already)."
msgstr ""
"シーン編成の鍵は、空間的な用語ではなく関係性の用語でシーンツリーを考えること"
"です。ノードは親の存在に依存する必要がありますか？その必要がないのなら、彼ら"
"はどこか他の場所で親に依存せずに一人で成長することができます。もし依存してい"
"るのなら、それは彼らがその親の子であるべきという理にかなっています(そして、ま"
"だそうでない場合も、その親のシーンの一部である可能性があります)。"
