#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Scene organization"
msgstr "シーン構成"

msgid ""
"This article covers topics related to the effective organization of scene "
"content. Which nodes should one use? Where should one place them? How should "
"they interact?"
msgstr ""
"この記事では、シーンコンテンツの効果的な編成に関連するトピックについて説明し"
"ます。どのノードを使用する必要がありますか？どこに配置すればよいですか？彼ら"
"はどのように相互作用する必要がありますか？"

msgid "How to build relationships effectively"
msgstr "個々の結びつきを効果的に構築する方法"

msgid ""
"When Godot users begin crafting their own scenes, they often run into the "
"following problem:"
msgstr ""
"Godotユーザーが独自のシーンを作成し始めると、次の問題に遭遇することがよくあり"
"ます。"

msgid ""
"To fix these problems, one must instantiate the sub-scenes without them "
"requiring details about their environment. One needs to be able to trust "
"that the sub-scene will create itself without being picky about how one uses "
"it."
msgstr ""
"これらの問題を修正するには、環境に関する詳細を要求せずにサブシーンをインスタ"
"ンス化する必要があります。サブシーンがどのように使われるかを選り好みせずに自"
"分が作成されることを信頼できる必要があります。"

msgid ""
"**If at all possible, one should design scenes to have no dependencies.** "
"That is, one should create scenes that keep everything they need within "
"themselves."
msgstr ""
"**可能な限り、依存関係を持たないようにシーンを設計する必要があります。** つま"
"り、必要なものすべてを内部に保持するシーンを作成する必要があります。"

msgid ""
"If a scene must interact with an external context, experienced developers "
"recommend the use of `Dependency Injection <https://en.wikipedia.org/wiki/"
"Dependency_injection>`_. This technique involves having a high-level API "
"provide the dependencies of the low-level API. Why do this? Because classes "
"which rely on their external environment can inadvertently trigger bugs and "
"unexpected behavior."
msgstr ""
"シーンが外部コンテキストとやり取りする必要がある場合、経験豊富な開発者は、 `"
"依存性の注入 <https://en.wikipedia.org/wiki/Dependency_injection>` の使用をお"
"勧めします。この手法では、高レベルAPIを使用して低レベルAPIの依存関係を提供し"
"ます。なぜこれを行うのですか？外部環境に依存するクラスは、誤ってバグや予期し"
"ない動作を引き起こす可能性があるためです。"

msgid ""
"To do this, one must expose data and then rely on a parent context to "
"initialize it:"
msgstr ""
"これを行うには、データを公開し、親コンテキストを使用して初期化する必要があり"
"ます:"

msgid "Call a method. Used to start behavior."
msgstr "メソッドを呼び出します。動作を開始するために使用されます。"

msgid "Initialize a Node or other Object reference."
msgstr "ノードまたはその他のオブジェクト参照を初期化します。"

msgid "Initialize a NodePath."
msgstr "NodePathを初期化します。"

msgid ""
"Although the examples above illustrate parent-child relationships, the same "
"principles apply towards all object relations. Nodes which are siblings "
"should only be aware of their hierarchies while an ancestor mediates their "
"communications and references."
msgstr ""
"上記の例は親子関係を示していますが、同じ原則がすべてのオブジェクト間の関係に"
"適用されます。兄弟であるノードは、(親やその親などの)祖先が通信と参照を仲介す"
"る間のみ、相手の階層を認識する必要があります。"

msgid ""
"The same principles also apply to non-Node objects that maintain "
"dependencies on other objects. Whichever object actually owns the objects "
"should manage the relationships between them."
msgstr ""
"同じ原則は、他のオブジェクトへの依存関係を維持する非Nodeオブジェクトにも適用"
"されます。オブジェクトを実際に所有するオブジェクトがオブジェクト間の関係を管"
"理する必要があります。"

msgid ""
"One should favor keeping data in-house (internal to a scene) though as "
"placing a dependency on an external context, even a loosely coupled one, "
"still means that the node will expect something in its environment to be "
"true. The project's design philosophies should prevent this from happening. "
"If not, the code's inherent liabilities will force developers to use "
"documentation to keep track of object relations on a microscopic scale; this "
"is otherwise known as development hell. Writing code that relies on external "
"documentation for one to use it safely is error-prone by default."
msgstr ""
"データを組織内(シーンの内部)に保持することをお勧めします。疎結合のコンテキス"
"トであっても、外部のコンテキストに依存関係を置くことは、ノードは環境内の何か"
"が実在することを期待することを意味します。プロジェクトの設計哲学は、これが起"
"こらないようにする必要があります。そうでない場合、コード固有の責任により、開"
"発者はドキュメントを使用して、オブジェクトの関係を微視的に追跡する必要があり"
"ます。これは、開発地獄とも呼ばれます。外部ドキュメントに依存するコードを記述"
"すると、安全のために規定でエラーが発生しやすくなります。"

msgid ""
"A GUI like this can better inform project users of critical information "
"about a Node. Does it have external dependencies? Have those dependencies "
"been satisfied? Other programmers, and especially designers and writers, "
"will need clear instructions in the messages telling them what to do to "
"configure it."
msgstr ""
"このようなGUIを使用すると、プロジェクトユーザーにノードに関する重要な情報をよ"
"り適切に通知できます。外部依存関係はありますか？これらの依存関係は満たされて"
"いますか？などです。他のプログラマー、特にデザイナーとライターに対し、それを"
"構成する作業のために必要な指示を、メッセージを通して明確に伝えます。"

msgid "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"
msgstr "`SOLID <https://ja.wikipedia.org/wiki/SOLID>`_"

msgid "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"
msgstr "`DRY <https://ja.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"

msgid "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"
msgstr ""
"`KISS <https://ja.wikipedia.org/wiki/KISS%E3%81%AE%E5%8E%9F%E5%89%87>`_"

msgid "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"
msgstr "`YAGNI <https://ja.wikipedia.org/wiki/YAGNI>`_"

msgid "Choosing a node tree structure"
msgstr "ノードツリー構造の選択"

msgid "Node \"Main\" (main.gd)"
msgstr "\\ Node \"Main\" (main.gd)"

msgid ""
"The ``main.gd`` script would then serve as the primary controller of one's "
"game."
msgstr ""
"``main.gd`` スクリプトは、ゲームのプライマリコントローラーとして機能します。"

msgid ""
"Then one has their actual in-game \"World\" (a 2D or 3D one). This can be a "
"child of Main. In addition, one will need a primary GUI for their game that "
"manages the various menus and widgets the project needs."
msgstr ""
"次に、実際のゲーム内「ワールド(World)」(2Dまたは3Dのもの)があります。これは、"
"Mainの子にすることができます。さらに、プロジェクトに必要なさまざまなメニュー"
"とウィジェットを管理するゲーム用のプライマリGUIが必要になります。"

msgid "Control \"GUI\" (gui.gd)"
msgstr "\\ Control \"GUI\" (gui.gd)"

msgid ""
"When changing levels, one can then swap out the children of the \"World\" "
"node. :ref:`Changing scenes manually <doc_change_scenes_manually>` gives "
"users full control over how their game world transitions."
msgstr ""
"レベルを変更する場合、\"World\"ノードの子を入れ替えることができます。\\ :ref:"
"`シーンを手動で変更<doc_change_scenes_manually>` を使用すると、ユーザーはゲー"
"ムのワールドがどのように遷移するかを完全に制御できます。"

msgid ""
"The next step is to consider what gameplay systems one's project requires. "
"If one has a system that..."
msgstr ""
"次のステップは、プロジェクトに必要なゲームプレイシステムを検討することです。"
"既存のシステムがある場合..."

msgid "tracks all of its data internally"
msgstr "すべてのデータを内部的に追跡する"

msgid "should be globally accessible"
msgstr "グローバルにアクセス可能でなければなりません"

msgid "should exist in isolation"
msgstr "独立して存在する必要があります"

msgid ""
"... then one should create an :ref:`autoload 'singleton' node "
"<doc_singletons_autoload>`."
msgstr ""
"...次に、\\ :ref:`自動ロード 'シングルトン' ノード "
"<doc_singletons_autoload>` を作成する必要があります。"

msgid ""
"Each subsystem within one's game should have its own section within the "
"SceneTree. One should use parent-child relationships only in cases where "
"nodes are effectively elements of their parents. Does removing the parent "
"reasonably mean that one should also remove the children? If not, then it "
"should have its own place in the hierarchy as a sibling or some other "
"relation."
msgstr ""
"ゲーム内の各サブシステムには、シーンツリー内に独自のセクションが必要です。"
"ノードが事実上親の一要素である場合にのみ、親子関係を使用する必要があります。"
"親を削除したときに、その子として一緒に削除されてもかまいませんか？そうでない"
"場合は、兄弟または他の関係として、階層内に独自の場所が必要です。"

msgid ""
"A reliable third party, likely a parent node, to mediate the assignment."
msgstr "割り当てを仲介する信頼できるサードパーティ(おそらく親ノード)。"

msgid ""
"A group, to easily pull a reference to the desired node (assuming there will "
"only ever be one of the targets)."
msgstr ""
"目的のノードへの参照を簡単にプルするためのグループ(ターゲットの1つだけが存在"
"すると想定)。"

msgid ""
"When should one do this? Well, this is subjective. The dilemma arises when "
"one must micro-manage when a node must move around the SceneTree to preserve "
"itself. For example..."
msgstr ""
"いつこれを行うべきでしょうか？まあ、これは主観的なものです。ノードが自身を保"
"持するために、シーンツリー内を移動するタイミングを細部まで管理する必要がある"
"ときにジレンマが発生します。例えば..."

msgid "Add a \"player\" node to a \"room\"."
msgstr "「プレイヤー」ノードを「ルーム」に追加する。"

msgid "Need to change rooms, so one must delete the current room."
msgstr "部屋を変更する必要があるため、現在の部屋を削除する必要があり。"

msgid ""
"Before the room can be deleted, one must preserve and/or move the player."
msgstr ""
"ルームを削除する前に、プレイヤーを保存および/または移動する必要があります。"

msgid "Is memory a concern?"
msgstr "記憶は懸念事項ですか?"

msgid ""
"If not, one can just create the two rooms, move the player and delete the "
"old one. No problem."
msgstr ""
"そうでない場合は、2つの部屋を作成し、プレイヤーを移動して古い部屋を削除するだ"
"けです。特に心配はいりません。"

msgid "If so, one will need to..."
msgstr "もしそうなら、1つは..."

msgid "Move the player somewhere else in the tree."
msgstr "プレイヤーをツリー内の別の場所に移動します。"

msgid "Delete the room."
msgstr "部屋を削除します。"

msgid "Instantiate and add the new room."
msgstr "新しい部屋をインスタンス化して追加します。"

msgid "Re-add the player."
msgstr "そこにプレイヤーを再度追加します。"

msgid ""
"The issue is that the player here is a \"special case\"; one where the "
"developers must *know* that they need to handle the player this way for the "
"project. As such, the only way to reliably share this information as a team "
"is to *document* it. Keeping implementation details in documentation however "
"is dangerous. It's a maintenance burden, strains code readability, and "
"bloats the intellectual content of a project unnecessarily."
msgstr ""
"問題は、ここでのプレイヤーは「特別なケース」であるということです。開発者は、"
"プロジェクトのためにこの方法でプレイヤーを処理する必要があることを *知ってい"
"る* 必要があります。そのため、この情報をチームとして確実に共有する唯一の方法"
"は、\\ *文書化* することです。ただし、実装の詳細をドキュメントに保存すること"
"は危険です。これはメンテナンスの負担になり、コードの可読性を悪化させ、プロ"
"ジェクトの知的コンテンツを不必要に肥大化します。"

msgid ""
"In a more complex game with larger assets, it can be a better idea to simply "
"keep the player somewhere else in the SceneTree entirely. This results in:"
msgstr ""
"より大きなアセットを使用したより複雑なゲームでは、シーンツリーの別のどこかで"
"プレイヤーを完全に保持する方が良いでしょう。これには..."

msgid "More consistency."
msgstr "より一貫性が高くなります。"

msgid "No \"special cases\" that must be documented and maintained somewhere."
msgstr "どこかに文書化して保守する必要がある「特別なケース」はありません。"

msgid ""
"No opportunity for errors to occur because these details are not accounted "
"for."
msgstr ""
"これらの詳細を考慮する必要がないため、エラーが発生する可能性はありません。"

msgid ""
"In contrast, if one ever needs to have a child node that does *not* inherit "
"the transform of their parent, one has the following options:"
msgstr ""
"これに対し、親の幾何学変換を継承しない子ノードが必要な場合、次のオプションが"
"あります:"

msgid ""
"The **declarative** solution: place a :ref:`Node <class_Node>` in between "
"them. As nodes with no transform, Nodes will not pass along such information "
"to their children."
msgstr ""
"**declarative** ソリューション: それらの間に :ref:`Node <class_Node>` を配置"
"します。幾何学変換を行わないノードとして、ノードはそのような情報を子に渡しま"
"せん。"

msgid ""
"If building a networked game, keep in mind which nodes and gameplay systems "
"are relevant to all players versus those just pertinent to the authoritative "
"server. For example, users do not all need to have a copy of every players' "
"\"PlayerController\" logic. Instead, they need only their own. As such, "
"keeping these in a separate branch from the \"world\" can help simplify the "
"management of game connections and the like."
msgstr ""
"ネットワーク化されたゲームを構築する場合、どのノードとゲームプレイシステムが"
"すべてのプレイヤーに関連するのか、権限のあるサーバーに関連するのかを念頭に置"
"いてください。たとえば、ユーザーがすべてのプレイヤーの「PlayerController」ロ"
"ジックのコピーを持っている必要はありません。代わりに、彼らは自分自身だけが必"
"要です。そのため、これらを「ワールド」とは別のブランチに保持することで、ゲー"
"ム接続などの管理を簡素化できます。"

msgid ""
"Does this mean nodes themselves are components? Not at all. Godot's node "
"trees form an aggregation relationship, not one of composition. But while "
"one still has the flexibility to move nodes around, it is still best when "
"such moves are unnecessary by default."
msgstr ""
"これは、ノード自体が構成要素であることを意味しますか？ 全く違います。Godotの"
"ノードツリーは、構図ではなく集合の関係性を形成します。ただし、ノードを自由に"
"移動できる柔軟性はありますが、デフォルトではそのような移動が不要な場合に最適"
"です。"

msgid "Translation status"
msgstr "翻訳ステータス"
