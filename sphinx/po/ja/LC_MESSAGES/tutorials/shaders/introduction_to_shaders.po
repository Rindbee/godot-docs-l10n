#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to shaders"
msgstr "シェーダーの紹介"

msgid ""
"This page explains what shaders are and will give you an overview of how "
"they work in Godot. For a detailed reference of the engine's shading "
"language, see :ref:`doc_shading_language`."
msgstr ""
"このページではシェーダーとは何かについて説明し、Godotでシェーダーがどのように"
"機能するかの概要を示します。エンジンのシェーディング言語の詳細なリファレンス"
"については、:ref:`doc_shading_lang` を参照してください。"

msgid ""
"Shaders are a special kind of program that runs on Graphics Processing Units "
"(GPUs). They were initially used to shade 3D scenes but can nowadays do much "
"more. You can use them to control how the engine draws geometry and pixels "
"on the screen, allowing you to achieve all sorts of effects."
msgstr ""
"シェーダーはグラフィックスプロセッシングユニット (GPU) 上で実行される特別な種"
"類のプログラムです。当初は3Dシーンのシェーディングに使用されていましたが、現"
"在ではさらに多くのことができるようになりました。これらを使用してエンジンが画"
"面上にジオメトリとピクセルを描画する方法を制御し、あらゆる種類の効果を実現で"
"きます。"

msgid ""
"Modern rendering engines like Godot draw everything with shaders: graphics "
"cards can run thousands of instructions in parallel, leading to incredible "
"rendering speed."
msgstr ""
"Godotのような最新のレンダリング エンジンは、すべてをシェーダーで描画します。"
"グラフィックスカードは何千もの命令を並行して実行できるため、驚異的なレンダリ"
"ング速度が実現します。"

msgid ""
"Because of their parallel nature, though, shaders don't process information "
"the way a typical program does. Shader code runs on each vertex or pixel in "
"isolation. You cannot store data between frames either. As a result, when "
"working with shaders, you need to code and think differently from other "
"programming languages."
msgstr ""
"ただしシェーダーは並列的な性質があるため、一般的なプログラムのように情報を処"
"理しません。シェーダーコードは各頂点または各ピクセル上で個別に実行されます。"
"フレーム間にデータを保存することもできません。そのためシェーダーを使用する場"
"合は、他のプログラミング言語とは異なるコーディングと考え方が必要になります。"

msgid ""
"Suppose you want to update all the pixels in a texture to a given color. In "
"GDScript, your code would use ``for`` loops::"
msgstr ""
"例えばテクスチャ内のすべてのピクセルを特定の色にセットするとします。 GDScript"
"のコードでは ``for`` ループを使用します::"

msgid ""
"Your code is already part of a loop in a shader, so the corresponding code "
"would look like this."
msgstr ""
"シェーダーではコードはすでにループの一部であるため、実際に書くコードは次のよ"
"うになります。"

msgid ""
"The graphics card calls the ``fragment()`` function once or more for each "
"pixel it has to draw. More on that below."
msgstr ""
"グラフィックスカードは描画するピクセルごとに ``fragment()`` 関数を1回以上呼び"
"出します。詳細については以下をご覧ください。"

msgid "Shaders in Godot"
msgstr "Godotのシェーダー"

msgid ""
"Godot provides a shading language based on the popular OpenGL Shading "
"Language (GLSL) but simplified. The engine handles some of the lower-level "
"initialization work for you, making it easier to write complex shaders."
msgstr ""
"Godotは一般的なOpenGL Shading Language (GLSL)に基づいて簡略化されたシェーディ"
"ング言語を提供します。このエンジンは低レイヤーの初期化作業の一部を代替してく"
"れるため、ユーザーは複雑なシェーダーの作成が容易になります。"

msgid ""
"In Godot, shaders are made up of main functions called \"processor "
"functions\". Processor functions are the entry point for your shader into "
"the program. There are seven different processor functions."
msgstr ""
"Godotではシェーダーは「プロセッサー関数」と呼ばれる主要な関数で構成されていま"
"す。プロセッサー関数はシェーダープログラムへのエントリーポイントです。Godot"
"シェーダーには7つの異なるプロセッサー関数があります。"

msgid ""
"The ``vertex()`` function runs over all the vertices in the mesh and sets "
"their positions and some other per-vertex variables. Used in :ref:"
"`canvas_item shaders <doc_canvas_item_shader>` and :ref:`spatial shaders "
"<doc_spatial_shader>`."
msgstr ""
"``vertex()`` 関数はメッシュ内のすべての頂点に対して実行され、頂点の位置と他の"
"変数を設定します。 :ref:`CanvasItemシェーダー<doc_canvas_item_shader>` およ"
"び :ref:`Spatial(空間)シェーダー <doc_spatial_shader>` で使用されます。"

msgid ""
"The ``fragment()`` function runs for every pixel covered by the mesh. It "
"uses values output by the ``vertex()`` function, interpolated between the "
"vertices. Used in :ref:`canvas_item shaders <doc_canvas_item_shader>` and :"
"ref:`spatial shaders <doc_spatial_shader>`."
msgstr ""
"``fragment()`` 関数はメッシュで覆われているすべてのピクセルに対して実行されま"
"す。これは ``vertex()`` 関数によって出力した値が頂点間で補間された値を使用し"
"ます。 :ref:`CanvasItemシェーダー<doc_canvas_item_shader>` および :ref:"
"`Spatial(空間)シェーダー <doc_spatial_shader>` で使用されます。"

msgid ""
"The ``light()`` function runs for every pixel and for every light. It takes "
"variables from the ``fragment()`` function and from its previous runs. Used "
"in :ref:`canvas_item shaders <doc_canvas_item_shader>` and :ref:`spatial "
"shaders <doc_spatial_shader>`."
msgstr ""
"``light()`` 関数はすべてのピクセルおよびすべてのライトに対して実行されます。"
"これは ``fragment()`` 関数とその以前の実行から変数を受け取ります。 :ref:"
"`CanvasItemシェーダー<doc_canvas_item_shader>` および :ref:`Spatial(空間)"
"シェーダー <doc_spatial_shader>` で使用されます。"

msgid ""
"The ``start()`` function runs for every particle in a particle system once "
"when the particle is first spawned. Used in :ref:`particles shaders "
"<doc_particle_shader>`."
msgstr ""
"``start()`` 関数はパーティクルが最初に生成されるときに、パーティクル システム"
"内のすべてのパーティクルに対して1回実行されます。 :ref:`パーティクルシェー"
"ダー <doc_particle_shader>` で使用されます。"

msgid ""
"The ``process()`` function runs for every particle in a particle system for "
"each frame. Used in :ref:`particles shaders <doc_particle_shader>`."
msgstr ""
"``process()`` 関数はフレームごとにパーティクルシステム内のすべてのパーティク"
"ルに対して実行されます。 :ref:`パーティクルシェーダー <doc_particle_shader>` "
"で使用されます。"

msgid ""
"The ``sky()`` function runs for every pixel in the radiance cubemap when the "
"radiance cubemap needs to be updated, and for every pixel on the current "
"screen. Used in :ref:`sky shaders <doc_sky_shader>`."
msgstr ""
"``sky()`` 関数は、放射キューブマップを更新する必要がある場合、放射キューブ"
"マップ内のすべてのピクセルに対して実行され、また現在の画面上のすべてのピクセ"
"ルに対して実行されます。 :ref:`スカイシェーダー <doc_sky_shader>` で使用され"
"ます。"

msgid ""
"The ``fog()`` function runs for every froxel in the volumetric fog froxel "
"buffer that intersects with the :ref:`FogVolume <class_FogVolume>`. Used by :"
"ref:`fog shaders <doc_fog_shader>`."
msgstr ""
"``fog()`` 関数は、:ref:`フォグボリューム <class_FogVolume>` と交差するボ"
"リューメトリックフォグのフロクセルバッファ内のすべてのフロクセルに対して実行"
"されます。 :ref:`フォグシェーダー <doc_fog_shader>` によって使用されます。"

msgid ""
"The ``light()`` function won't run if the ``vertex_lighting`` render mode is "
"enabled, or if **Rendering > Quality > Shading > Force Vertex Shading** is "
"enabled in the Project Settings. It's enabled by default on mobile platforms."
msgstr ""
"``vertex_lighting`` レンダー モードが有効になっている場合、またはプロジェクト"
"設定で [レンダリング] > [品質] > [シェーディング] > [頂点シェーディングの強"
"制] が有効になっている場合、 ``light()`` 関数は実行されません。モバイル プ"
"ラットフォームではデフォルトで有効になっています。"

msgid ""
"Godot also exposes an API for users to write totally custom GLSL shaders. "
"For more information see :ref:`doc_compute_shaders`."
msgstr ""
"Godot はユーザーが完全にカスタムの GLSL シェーダを作成できるAPIも公開していま"
"す。詳細については、:ref:`doc_compute_shaders` を参照してください。"

msgid "Shader types"
msgstr "シェーダーの種類"

msgid ""
"Instead of supplying a general-purpose configuration for all uses (2D, 3D, "
"particles, sky, fog), you must specify the type of shader you're writing. "
"Different types support different render modes, built-in variables, and "
"processing functions."
msgstr ""
"すべての用途 (2D、3D、パーティクル、スカイ、フォグ) に汎用的な設定を提供する"
"代わりに、Godotシェーダーは目的を指定する必要があります。タイプが異なれば、サ"
"ポートされるレンダリング モード、ビルトイン変数、プロセッサー関数も異なりま"
"す。"

msgid ""
"In Godot, all shaders need to specify their type in the first line, like so:"
msgstr ""
"Godotではすべてのシェーダーは、最初の行で次の形式でタイプを指定する必要があり"
"ます:"

msgid "Here are the available types:"
msgstr "利用可能なタイプは次のとおりです。"

msgid ":ref:`spatial <doc_spatial_shader>` for 3D rendering."
msgstr ":ref:`spatial <doc_spatial_shader>`: 3Dレンダリング用。"

msgid ":ref:`canvas_item <doc_canvas_item_shader>` for 2D rendering."
msgstr ":ref:`canvas_item <doc_canvas_item_shader>`: 2Dレンダリング用。"

msgid ":ref:`particles <doc_particle_shader>` for particle systems."
msgstr ":ref:`particles <doc_particle_shader>`: パーティクルシステム用。"

msgid ":ref:`sky <doc_sky_shader>` to render :ref:`Skies <class_Sky>`."
msgstr ":ref:`sky <doc_sky_shader>`: :ref:`Sky(3D背景) <class_Sky>` の描画用。"

msgid ""
":ref:`fog <doc_fog_shader>` to render :ref:`FogVolumes <class_FogVolume>`"
msgstr ""
":ref:`fog <doc_fog_shader>`: :ref:`FogVolumes(ボリューメトリック フォグ) "
"<class_FogVolume>` の描画用"

msgid "Render modes"
msgstr "レンダリングモード"

msgid ""
"Shaders have optional render modes you can specify on the second line, after "
"the shader type, like so:"
msgstr ""
"シェーダーにはレンダリングモードのオプションがあり、次のようにシェーダータイ"
"プの後の2行目以降で指定できます。"

msgid ""
"Render modes alter the way Godot applies the shader. For example, the "
"``unshaded`` mode makes the engine skip the built-in light processor "
"function."
msgstr ""
"レンダリングモードはGodotがシェーダーを適用する方法を変更します。たとえば "
"``unshaded`` モードでは、エンジンは内蔵のライトプロセッサー機能をスキップしま"
"す。"

msgid ""
"Each shader type has different render modes. See the reference for each "
"shader type for a complete list of render modes."
msgstr ""
"各シェーダータイプには異なるレンダリング モードがあります。レンダリングモード"
"の完全なリストについては、各シェーダータイプのリファレンスを参照してくださ"
"い。"

msgid "Vertex processor"
msgstr "頂点プロセッサー"

msgid ""
"Each vertex in your world's geometry has properties like a position and "
"color. The function modifies those values and passes them to the fragment "
"function. You can also use it to send extra data to the fragment function "
"using varyings."
msgstr ""
"ワールドのジオメトリの各頂点には、位置や色などのプロパティがあります。このプ"
"ロセッサー関数はこれらの値を変更し、フラグメントプロセッサーに渡します。また"
"これを使用して追加のデータをvaringsに渡すことでフラグメントプロセッサーに送信"
"することもできます。"

msgid ""
"By default, Godot transforms your vertex information for you, which is "
"necessary to project geometry onto the screen. You can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example."
msgstr ""
"デフォルトではGodotはジオメトリを画面に投影するために必要な頂点データを変換し"
"ます。またレンダリングモードを指定することで頂点データを自分で変換することも"
"可能です。具体例については、:ref:`Spatial(空間)シェーダー "
"<doc_spatial_shader>` を参照してください。"

msgid "Fragment processor"
msgstr "フラグメントプロセッサー"

msgid ""
"The ``fragment()`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in ``spatial``, ``canvas_item``, and "
"``sky`` shaders."
msgstr ""
"``fragment()`` 処理関数はピクセルごとにGodotマテリアルのパラメータを設定する"
"ために使用されます。このコードはオブジェクトまたはプリミティブが描画するすべ"
"ての可視ピクセル上で実行されます。これは ``spatial`` 、 ``canvas_item`` 、お"
"よび ``sky`` シェーダーでのみ使用できます。"

msgid ""
"The standard use of the fragment function is to set up material properties "
"used to calculate lighting. For example, you would set values for "
"``ROUGHNESS``, ``RIM``, or ``TRANSMISSION``, which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function, and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on the effects that you do not use."
msgstr ""
"フラグメント関数の標準的な使用法は、ライティングの計算に使用されるマテリアル"
"プロパティを設定することです。たとえば、\\ ``ROUGHNESS``\\ 、\\ ``RIM``\\ ま"
"たは ``TRANSMISSION`` の値を設定して、ライトがそのフラグメントにどのように応"
"答するかをライト機能に伝えます。これにより、ユーザーが多くのコードを記述する"
"ことなく、複雑なシェーディングパイプラインを制御できます。この組み込み機能が"
"必要ない場合は、それを無視して独自のライト処理関数を記述すれば、Godotはそれを"
"最適化します。たとえば、\\ ``RIM`` に値を書き込まない場合、Godotはリム照明を"
"計算しません。コンパイル中、Godotは ``RIM`` が使用されているかどうかを確認し"
"ます。そうでない場合は、対応するすべてのコードを切り取ります。したがって、使"
"用しない効果の計算を無駄にすることはありません。"

msgid "Light processor"
msgstr "ライトプロセッサー"

msgid ""
"The ``light()`` processor runs per pixel too, and it runs once for every "
"light that affects the object. It does not run if no lights affect the "
"object. It exists as a function called inside the ``fragment()`` processor "
"and typically operates on the material properties setup inside the "
"``fragment()`` function."
msgstr ""
"``light()`` プロセッサーもピクセルごとに実行され、オブジェクトに影響を与える"
"すべてのライトごとに1回実行されます。オブジェクトに影響を与えるライトがない場"
"合は実行されません。これは ``fragment()`` プロセッサー内で呼び出される関数と"
"して存在し、通常は ``fragment()`` 関数内で設定されたマテリアルプロパティで動"
"作します。"

msgid ""
"The ``light()`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` and :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectively."
msgstr ""
"``light()`` プロセッサは2Dと3Dでは動作が異なります。それぞれの機能の説明につ"
"いては、各ドキュメント :ref:`CanvasItem シェーダ <doc_canvas_item_shader>` お"
"よび :ref:`Spatial(空間)シェーダ <doc_spatial_shader>` を参照してください。"
