#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Shader preprocessor"
msgstr "シェーダープリプロセッサー"

msgid "Why use a shader preprocessor?"
msgstr "シェーダープリプロセッサーを使用する理由？"

msgid ""
"In programming languages, a *preprocessor* allows changing the code before "
"the compiler reads it. Unlike the compiler, the preprocessor does not care "
"about whether the syntax of the preprocessed code is valid. The preprocessor "
"always performs what the *directives* tell it to do. A directive is a "
"statement starting with a hash symbol (``#``). It is not a *keyword* of the "
"shader language (such as ``if`` or ``for``), but a special kind of token "
"within the language."
msgstr ""
"プログラミング言語では、 *プリプロセッサー* を使用すると、コンパイラーがコー"
"ドを読み取る前にコードを変更できます。コンパイラとは異なり、プリプロセッサー"
"は前処理されたコードの構文が有効かどうかを気にしません。プリプロセッサーは常"
"に *ディレクティブ* で指示されたことを実行します。ディレクティブはハッシュ記"
"号 (``#``) で始まるステートメントです。これはシェーダー言語の *キーワード* "
"(``if`` や ``for`` など) ではなく、言語内の特別な種類のトークンです。"

msgid ""
"From Godot 4.0 onwards, you can use a shader preprocessor within text-based "
"shaders. The syntax is similar to what most GLSL shader compilers support "
"(which in turn is similar to the C/C++ preprocessor)."
msgstr ""
"Godot 4.0 以降ではテキストベースのシェーダー内でシェーダープリプロセッサーを"
"使用できます。構文はほとんどのGLSLシェーダーコンパイラーがサポートするものと"
"似ています (つまりC/C++プリプロセッサーのものと似ています)。"

msgid ""
"The shader preprocessor is not available in :ref:`visual shaders "
"<doc_visual_shaders>`. If you need to introduce preprocessor statements to a "
"visual shader, you can convert it to a text-based shader using the **Convert "
"to Shader** option in the VisualShader inspector resource dropdown. This "
"conversion is a one-way operation; text shaders cannot be converted back to "
"visual shaders."
msgstr ""
"シェーダープリプロセッサーは、:ref:`ビジュアルシェーダー "
"<doc_visual_shaders>` では使用できません。ビジュアルシェーダーにプリプロセッ"
"サーステートメントを導入する必要がある場合は、VisualShaderのインスペクターの"
"リソースのドロップダウンにある **Convert to Shader** オプションを使用して、テ"
"キストベースのシェーダーに変換できます。この変換は一方向の操作です。テキスト"
"シェーダーをビジュアルシェーダーに戻すことはできません。"

msgid "Directives"
msgstr "ディレクティブ"

msgid "General syntax"
msgstr "一般的な構文"

msgid ""
"Preprocessor directives do not use brackets (``{}``), but can use "
"parentheses."
msgstr ""
"プリプロセッサー構文は大括弧 (``{}``) は使用できませんが、普通の括弧は使用す"
"ることはできます。"

msgid ""
"Preprocessor directives **never** end with semicolons (with the exception of "
"``#define``, where this is allowed but potentially dangerous)."
msgstr ""
"プリプロセッサー構文は **決して** セミコロンで終わりません (``#define`` では"
"使えますが潜在的に危険です)。"

msgid ""
"Preprocessor directives can span several lines by ending each line with a "
"backslash (``\\``). The first line break *not* featuring a backslash will "
"end the preprocessor statement."
msgstr ""
"プリプロセッサー構文は各行をバックスラッシュ (\\) で終了することにより、複数"
"の行にまたがることができます。バックスラッシュを含まない最初の改行により、プ"
"リプロセッサー構文は終了します。"
