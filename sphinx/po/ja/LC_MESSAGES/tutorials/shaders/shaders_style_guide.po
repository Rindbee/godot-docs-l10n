#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Shaders style guide"
msgstr "シェーダースタイルガイド"

msgid ""
"This style guide lists conventions to write elegant shaders. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""
"このスタイルガイドには、エレガントなシェーダーを作成するための規則が記載され"
"ています。目標はクリーンで読みやすいコードの作成を奨励し、プロジェクト、ディ"
"スカッション、チュートリアル全体の一貫性を促進することです。うまくいけば、こ"
"れも自動フォーマットツールの開発に役立つでしょう。"

msgid ""
"Since the Godot shader language is close to C-style languages and GLSL, this "
"guide is inspired by Godot's own GLSL formatting. You can view examples of "
"GLSL files in Godot's source code `here <https://github.com/godotengine/"
"godot/blob/master/drivers/gles3/shaders/>`__."
msgstr ""
"Godotシェーダー言語はCスタイル言語およびGLSLに近いため、このガイドはGodot独自"
"のGLSLフォーマットからインスピレーションを得ています。Godotのソース コードの"
"GLSLファイルの例は `こちら <https://github.com/godotengine/godot/blob/master/"
"drivers/gles3/shaders/>`__ でご覧いただけます。"

msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""
"スタイルガイドは、厳密なルールブックを意味するものではありません。時には以下"
"のガイドラインの一部を適用できない場合があります。その場合は、最善であるよう"
"に判断を下すと共に、仲間の開発者に洞察を求めてください。"

msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr ""
"一般に、プロジェクト内およびチーム内でコードの一貫性を保つことは、このガイド"
"に完璧に従うよりも重要です。"

msgid ""
"Godot's built-in shader editor uses a lot of these conventions by default. "
"Let it help you."
msgstr ""
"Godotに組み込まれているシェーダーエディタは、デフォルトでこれらの規則の多くを"
"使用します。それはあなたの助けになるでしょう。"

msgid "Here is a complete shader example based on these guidelines:"
msgstr "これらのガイドラインに基づいた完璧なシェーダーの例を次に示します:"

msgid "Formatting"
msgstr "書式設定"

msgid "Encoding and special characters"
msgstr "エンコードと特殊文字"

msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr ""
"CRLFやCRではなく、改行(**LF**)文字を使用して改行します。\\ *(エディタのデフォ"
"ルト)*"

msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr ""
"各ファイルの最後に1つの改行文字を使用します。\\ *(エディタのデフォルト)*"

msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""
"`バイトオーダーマーク <https://ja.wikipedia.org/wiki/バイトオーダーマーク"
">`_\\ なしで\\ **UTF-8**\\ エンコーディングを使用します。\\ *(エディタのデ"
"フォルト)*"

msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr ""
"インデントにはスペースの代わりに\\ **タブ**\\ を使用します。\\ *(エディタのデ"
"フォルト)*"

msgid "Indentation"
msgstr "インデント"

msgid ""
"Each indent level should be one tab greater than the block containing it."
msgstr ""
"各インデント レベルは、それを含むブロックより1タブ分大きくなければなりませ"
"ん。"

msgid "**Good**:"
msgstr "**良い例**:"

msgid "**Bad**:"
msgstr "**悪い例**:"

msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr ""
"継続行と通常のコードブロックを区別するには、2つのインデントレベルを使用しま"
"す。"

msgid "Line breaks and blank lines"
msgstr "改行と空白行"

msgid ""
"For a general indentation rule, follow `the \"1TBS Style\" <https://"
"en.wikipedia.org/wiki/Indentation_style#Variant:_1TBS_(OTBS)>`_ which "
"recommends placing the brace associated with a control statement on the same "
"line. Always use braces for statements, even if they only span one line. "
"This makes them easier to refactor and avoids mistakes when adding more "
"lines to an ``if`` statement or similar."
msgstr ""
"一般的なインデントルールについては、\"1TBSスタイル\" <https://"
"en.wikipedia.org/wiki/Indentation_style#Variant:_1TBS_(OTBS)>`_ に従ってくだ"
"さい。これは制御ステートメントに関連付けられた中括弧{ }を同じ行に配置すること"
"を推奨しています。ステートメントが1行しかない場合でも、ステートメントには必ず"
"中括弧{ }を使用してください。これによりリファクタリングが容易になり、 ``if`` "
"ステートメントなどにさらに行を追加するときの間違いを避けることができます。"

msgid "Blank lines"
msgstr "空白行"

msgid "Surround function definitions with one (and only one) blank line:"
msgstr "関数定義を1つ (だけ) の空白行で囲みます:"

msgid ""
"Use one (and only one) blank line inside functions to separate logical "
"sections."
msgstr "論理セクションを区切るには、関数内で1行の空白行を使用します。"

msgid "Line length"
msgstr "行の長さ"

msgid "Keep individual lines of code under 100 characters."
msgstr "コードの個々の行を100文字以内に保ちます。"

msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two shaders opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""
"可能であれば、1行を80文字未満に保つようにしてください。これは小さなディスプレ"
"イでコードを読む場合や、2つのシェーダーを外部テキスト エディタで並べて開くと"
"きに役立ちます。たとえばリビジョンの差分を見る場合などです。"

msgid "One statement per line"
msgstr "1行につき1つのステートメント"

msgid "Never combine multiple statements on a single line."
msgstr "複数のステートメントを1行に結合しないようにします。"

msgid "The only exception to that rule is the ternary operator:"
msgstr "その規則の唯一の例外は三項演算子です:"

msgid "Comment spacing"
msgstr "コメントスペース"

msgid ""
"Regular comments should start with a space, but not code that you comment "
"out. This helps differentiate text comments from disabled code."
msgstr ""
"通常のコメントはスペースで始まる必要がありますが、コメントアウトしたコードに"
"はスペースは付けません。これにより、テキストコメントと無効化したコードを区別"
"できます。"

msgid ""
"Don't use multiline comment syntax if your comment can fit on a single line:"
msgstr ""
"コメントが1行に収まる場合は、複数行コメント構文を使用しないようにします。"

msgid ""
"In the shader editor, to make the selected code a comment (or uncomment it), "
"press :kbd:`Ctrl + K`. This feature adds or removes ``//`` at the start of "
"the selected lines."
msgstr ""
"シェーダーエディタで、選択したコードをコメントにする (またはコメントを解除す"
"る) には、 :kbd:`Ctrl + K` を押します。この機能は、選択した行の先頭に ``//`` "
"を追加または削除します。"

msgid "Whitespace"
msgstr "空白"

msgid ""
"Always use one space around operators and after commas. Also, avoid "
"extraneous spaces in function calls."
msgstr ""
"演算子の前後およびコンマの後には常に1つのスペースを使用します。また関数呼び出"
"しでは無関係なスペースを避けるようにします。"

msgid "Don't use spaces to align expressions vertically:"
msgstr "式を垂直方向に揃えるためにスペースを使用しないでください:"

msgid "Floating-point numbers"
msgstr "浮動小数点数 (実数)"

msgid ""
"Always specify at least one digit for both the integer and fractional part. "
"This makes it easier to distinguish floating-point numbers from integers, as "
"well as distinguishing numbers greater than 1 from those lower than 1."
msgstr ""
"整数部と小数部の両方に必ず少なくとも1桁を指定してください。これにより浮動小数"
"点数と整数の区別が容易になるだけでなく、1より大きい数値と1未満の数値の区別も"
"容易になります。"

msgid "Accessing vector members"
msgstr "ベクトル要素へのアクセス"

msgid ""
"Use ``r``, ``g``, ``b``, and ``a`` when accessing a vector's members if it "
"contains a color. If the vector contains anything else than a color, use "
"``x``, ``y``, ``z``, and ``w``. This allows those reading your code to "
"better understand what the underlying data represents."
msgstr ""
"色が含まれているベクトル要素にアクセスするときには ``r`` , ``g`` , ``b`` , "
"``a`` を使用します。色以外のものが含まれるベクトルの場合は ``x`` , ``y`` , "
"``z`` , ``w`` を使用します。これによりコードを読む人は、根底にあるデータが何"
"を表しているのかをよりよく理解できるようになります。"

msgid "Naming conventions"
msgstr "命名規則"

msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""
"これらの命名規則は、Godot Engineスタイルに従います。これらを壊すと、コードが"
"組み込みの命名規則と衝突し、コードの一貫性が失われます。"

msgid "Functions and variables"
msgstr "関数と変数"

msgid "Use snake\\_case to name functions and variables:"
msgstr "関数と変数に名前を付けるには、snake\\ _caseを使用します:"

msgid "Constants"
msgstr "定数"

msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr ""
"CONSTANT\\ _CASEで定数を記述します。つまり、すべて大文字でアンダースコア(\\_)"
"を使用して単語を区切ります:"

msgid "Preprocessor directives"
msgstr "プリプロセッサ定義"

msgid ""
":ref:`doc_shader_preprocessor` directives should be written in "
"CONSTANT__CASE. Directives should be written without any indentation before "
"them, even if nested within a function."
msgstr ""
":ref:`doc_shader_preprocessor` 定義は CONSTANT_CASE で記述する必要がありま"
"す。これは関数内にネストされている場合でも、その前にインデントを付けずに記述"
"する必要があります。"

msgid ""
"To preserve the natural flow of indentation when shader errors are printed "
"to the console, extra indentation should **not** be added within ``#if``, "
"``#ifdef`` or ``#ifndef`` blocks:"
msgstr ""
"シェーダーエラーがコンソールに出力されるときにインデントの自然な流れを維持す"
"るには ``#if`` 、 ``#ifdef`` 、 ``#ifndef`` ブロック内に余分なインデントを **"
"追加しないでください** 。"

msgid "Code order"
msgstr "コードの順序"

msgid "We suggest to organize shader code this way:"
msgstr "次のようにシェーダーコードを整理することをお勧めします:"

msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""
"順序を最適化して、コードを上から下に読みやすくし、コードを初めて読む開発者が"
"どのように機能するかを理解しやすくし、変数宣言の順序に関連するエラーを回避し"
"ます。"

msgid "This code order follows two rules of thumb:"
msgstr "このコードの順序は、次の2つのルールに従います:"

msgid "Metadata and properties first, followed by methods."
msgstr "最初にメタデータとプロパティ、次にメソッドが続きます。"

msgid ""
"\"Public\" comes before \"private\". In a shader language's context, "
"\"public\" refers to what's easily adjustable by the user (uniforms)."
msgstr ""
"\"パブリック\"は\"プライベート\"の前に来ます。シェーダー言語のコンテキストで"
"は、\"パブリック\"とはユーザーが簡単に調整できるもの (Uniform) を指します。"

msgid "Local variables"
msgstr "ローカル変数"

msgid ""
"Declare local variables as close as possible to their first use. This makes "
"it easier to follow the code, without having to scroll too much to find "
"where the variable was declared."
msgstr ""
"ローカル変数はできるだけ最初に使用する直前に宣言してください。これにより変数"
"が宣言されている場所を見つけるためにスクロールしすぎずに、コードをたどるのが"
"簡単になります。"
