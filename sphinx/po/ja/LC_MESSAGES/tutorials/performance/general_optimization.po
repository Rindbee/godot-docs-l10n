#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "General optimization tips"
msgstr "一般的な最適化のTips"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"In an ideal world, computers would run at infinite speed. The only limit to "
"what we could achieve would be our imagination. However, in the real world, "
"it's all too easy to produce software that will bring even the fastest "
"computer to its knees."
msgstr ""
"理想的な世界では、コンピューターは無限の速度で動作します。実現可能なことの唯"
"一の限界は私たちの想像力です。しかし現実の世界では、最速のコンピューターでさ"
"えも機能不全に陥らせるソフトウェアをいとも簡単に作成できます。"

msgid ""
"Thus, designing games and other software is a compromise between what we "
"would like to be possible, and what we can realistically achieve while "
"maintaining good performance."
msgstr ""
"したがって、ゲームやその他のソフトウェアの設計する際は、実現したいことと、良"
"好なパフォーマンスのバランスを取り、現実的に達成できる妥協点を検討する必要が"
"あります。"

msgid "To achieve the best results, we have two approaches:"
msgstr "最良の結果を得るために、次の2つのアプローチがあります。"

msgid "Work faster."
msgstr "より速く動かす。"

msgid "Work smarter."
msgstr "よりスマートに動かす。"

msgid "And preferably, we will use a blend of the two."
msgstr "できればこの2つを両方とも達成できればベストです。"

msgid "Smoke and mirrors"
msgstr "ごまかし"

msgid ""
"Part of working smarter is recognizing that, in games, we can often get the "
"player to believe they're in a world that is far more complex, interactive, "
"and graphically exciting than it really is. A good programmer is a magician, "
"and should strive to learn the tricks of the trade while trying to invent "
"new ones."
msgstr ""
"ゲームではプレイヤーに実際よりも、はるかに複雑で、インタラクティブで、グラ"
"フィックが刺激的な世界にいると信じ込ませることができることを認識する必要があ"
"ります。よりスマートに仕事をするためには、優れたプログラマーはマジシャンであ"
"り、業界の最新技術を習得しながら、新しい技術を発明するように努めるべきです。"

msgid "The nature of slowness"
msgstr "遅さの本質"

msgid ""
"To the outside observer, performance problems are often lumped together. But "
"in reality, there are several different kinds of performance problems:"
msgstr ""
"外部から見ると、パフォーマンスの問題は多くの場合、ひとまとめにされています。"
"しかし、実際にはパフォーマンスの問題にはいくつかの種類があります。"

msgid ""
"A slow process that occurs every frame, leading to a continuously low frame "
"rate."
msgstr ""
"毎フレーム発生する重い処理で、フレーム レートが継続的に低くなっている。"

msgid ""
"An intermittent process that causes \"spikes\" of slowness, leading to "
"stalls."
msgstr ""
"断続的な重い処理により「スパイク」が発生し、アニメーションの停止につながって"
"いる。"

msgid ""
"A slow process that occurs outside of normal gameplay, for instance, when "
"loading a level."
msgstr "レベルをロードするときなど、通常のゲームプレイ以外で発生する重い処理。"

msgid "Each of these are annoying to the user, but in different ways."
msgstr ""
"これらはいずれもユーザーにとって煩わしいものですが、煩わしさの度合いはそれぞ"
"れ異なります。"

msgid "Measuring performance"
msgstr "パフォーマンスの測定"

msgid ""
"Probably the most important tool for optimization is the ability to measure "
"performance - to identify where bottlenecks are, and to measure the success "
"of our attempts to speed them up."
msgstr ""
"おそらく、最適化のための最も重要なツールは、パフォーマンスを測定する機能で"
"す。つまりボトルネックがどこにあるかを特定し、速度向上の試みが成功したかどう"
"かを測定します。"

msgid "There are several methods of measuring performance, including:"
msgstr "パフォーマンスを測定する方法はいくつかあります。"

msgid "Putting a start/stop timer around code of interest."
msgstr "関心のあるコードの周囲に開始/停止タイマーを配置する。"

msgid "Using the :ref:`Godot profiler <doc_the_profiler>`."
msgstr ":ref:`Godot プロファイラー <doc_the_profiler>` を使用する。"

msgid "Using :ref:`external CPU profilers <doc_using_cpp_profilers>`."
msgstr ":ref:`外部 CPU プロファイラー <doc_using_cpp_profilers>` を使用する。"

msgid ""
"Using an unofficial `debug menu add-on <https://github.com/godot-extended-"
"libraries/godot-debug-menu>`__."
msgstr ""
"非公式の `デバッグメニューアドオン <https://github.com/godot-extended-"
"libraries/godot-debug-menu>`__ を使用する。"

msgid ""
"Be very aware that the relative performance of different areas can vary on "
"different hardware. It's often a good idea to measure timings on more than "
"one device. This is especially the case if you're targeting mobile devices."
msgstr ""
"異なる領域の相対的なパフォーマンスは、ハードウェアによって異なる場合があるこ"
"とに注意してください。複数のデバイスで測定することは、多くの場合良いアイデア"
"です。これは特にモバイルデバイスをターゲットにしている場合に当てはまります。"

msgid "Limitations"
msgstr "制限事項"

msgid ""
"CPU profilers are often the go-to method for measuring performance. However, "
"they don't always tell the whole story."
msgstr ""
"CPU プロファイラーは、パフォーマンスを測定するためのよく使われる方法です。た"
"だし必ずしも全体像がわかるわけではありません。"

msgid ""
"Bottlenecks are often on the GPU, \"as a result\" of instructions given by "
"the CPU."
msgstr ""
"CPU によって与えられた命令の「結果的に」、ボトルネックが GPU に発生することが"
"よくあります。"

msgid ""
"Spikes can occur in the operating system processes (outside of Godot) \"as a "
"result\" of instructions used in Godot (for example, dynamic memory "
"allocation)."
msgstr ""
"Godot で使用される命令 (たとえば動的メモリ割り当て) の「結果的に」、OSのプロ"
"セス (Godot 外部) でスパイクが発生する可能性があります。"

msgid ""
"You may not always be able to profile specific devices like a mobile phone "
"due to the initial setup required."
msgstr ""
"初期設定が必要なため、携帯電話などの特定のデバイスのプロファイルを作成できな"
"い場合があります。"

msgid ""
"You may have to solve performance problems that occur on hardware you don't "
"have access to."
msgstr ""
"アクセスできないハードウェアで発生するパフォーマンスの問題を解決しなければな"
"らない場合があります。"

msgid ""
"As a result of these limitations, you often need to use detective work to "
"find out where bottlenecks are."
msgstr ""
"これらの制限の結果として、ボトルネックがどこにあるかを見つけるために探偵のよ"
"うな調査が必要になることがよくあります。"

msgid "Detective work"
msgstr "探偵のような調査"

msgid ""
"Detective work is a crucial skill for developers (both in terms of "
"performance, and also in terms of bug fixing). This can include hypothesis "
"testing, and binary search."
msgstr ""
"探偵のような調査は、開発者にとって非常に重要なスキルです (パフォーマンス改善"
"の際でも、バグ修正の際でも)。これには仮説検証や二分検索が含まれます。"

msgid "Hypothesis testing"
msgstr "仮説と検証"

msgid ""
"Say, for example, that you believe sprites are slowing down your game. You "
"can test this hypothesis by:"
msgstr ""
"たとえば、スプライトがゲームの速度を低下させていると考えているとします。この"
"仮説は次のようにして検証できます:"

msgid "Measuring the performance when you add more sprites, or take some away."
msgstr ""
"スプライトを追加したり、いくつか削除したりしたときのパフォーマンスの変化を測"
"定します。"

msgid ""
"This may lead to a further hypothesis: does the size of the sprite determine "
"the performance drop?"
msgstr ""
"これはさらなる仮説につながるかもしれません: スプライトのサイズによってパ"
"フォーマンスの低下が起きるかも？"

msgid ""
"You can test this by keeping everything the same, but changing the sprite "
"size, and measuring performance."
msgstr ""
"これを検証するには、スプライトのサイズを変更し、パフォーマンスを測定します。"

msgid "Binary search"
msgstr "二分探索"

msgid ""
"If you know that frames are taking much longer than they should, but you're "
"not sure where the bottleneck lies. You could begin by commenting out "
"approximately half the routines that occur on a normal frame. Has the "
"performance improved more or less than expected?"
msgstr ""
"フレームに必要以上に時間がかかっていることはわかっているものの、ボトルネック"
"がどこにあるか分からない場合は、まず通常のフレームで発生するルーチンの約半分"
"をコメントアウトしてみます。パフォーマンスは予想よりも向上しましたか、それと"
"も期待通りのパフォーマンスは出ませんでしたか？"

msgid ""
"Once you know which of the two halves contains the bottleneck, you can "
"repeat this process until you've pinned down the problematic area."
msgstr ""
"どちらの半分にボトルネックがあるかがわかったら、問題のあるルーチンを特定する"
"までこのプロセスを繰り返します。"

msgid "Profilers"
msgstr "プロファイラー"

msgid ""
"Profilers allow you to time your program while running it. Profilers then "
"provide results telling you what percentage of time was spent in different "
"functions and areas, and how often functions were called."
msgstr ""
"プロファイラーを使用すると、プログラムの実行時間を計測できます。プロファイ"
"ラーはさまざまな関数やルーチンに費やされた時間の割合や、関数が呼び出された頻"
"度を示す結果を提供します。"

msgid ""
"This can be very useful both to identify bottlenecks and to measure the "
"results of your improvements. Sometimes, attempts to improve performance can "
"backfire and lead to slower performance. **Always use profiling and timing "
"to guide your efforts.**"
msgstr ""
"これはボトルネックを特定し、改善の結果を測定するのに非常に役立ちます。パ"
"フォーマンスを改善しようとすると、裏目に出てパフォーマンスが低下することがあ"
"ります。 **常にプロファイリングとタイミングを使用してあなたの取り組みを導いて"
"ください。**"

msgid ""
"For more info about using Godot's built-in profiler, "
"see :ref:`doc_the_profiler`."
msgstr ""
"Godot の組み込みプロファイラーの使用に関する詳細について"
"は :ref:`doc_the_profiler` を参照してください。"

msgid "Principles"
msgstr "最適化の原則"

msgid "`Donald Knuth <https://en.wikipedia.org/wiki/Donald_Knuth>`__ said:"
msgstr "`Donald Knuth <https://en.wikipedia.org/wiki/Donald_Knuth>`__ 曰く:"

msgid ""
"*Programmers waste enormous amounts of time thinking about, or worrying "
"about, the speed of noncritical parts of their programs, and these attempts "
"at efficiency actually have a strong negative impact when debugging and "
"maintenance are considered. We should forget about small efficiencies, say "
"about 97% of the time: premature optimization is the root of all evil. Yet "
"we should not pass up our opportunities in that critical 3%.*"
msgstr ""
"*プログラマーはプログラムの重要でない部分の速度について考えたり心配したりする"
"ことに膨大な時間を費やしています。そして、こうした効率化の試みは、デバッグや"
"メンテナンスを考慮すると、実際には大きなマイナスの影響を及ぼします。私たちは"
"たとえば 97% の時間、小さな効率化については忘れるべきです。早まった最適化は諸"
"悪の根源です。しかし、その重要な 3% の機会を逃すべきではありません。*"

msgid "The messages are very important:"
msgstr "このメッセージは非常に重要です:"

msgid ""
"Developer time is limited. Instead of blindly trying to speed up all aspects "
"of a program, we should concentrate our efforts on the aspects that really "
"matter."
msgstr ""
"開発者の時間は限られています。盲目的にプログラムのすべての側面を高速化しよう"
"とするのではなく、本当に重要な側面に集中して取り組む必要があります。"

msgid ""
"Efforts at optimization often end up with code that is harder to read and "
"debug than non-optimized code. It is in our interests to limit this to areas "
"that will really benefit."
msgstr ""
"最適化の取り組みにより、最適化されていないコードよりも読みにくくデバッグしに"
"くいコードになってしまうことがよくあります。これを本当にメリットのある領域に"
"限定することが、チームの利益になります。"

msgid ""
"Just because we *can* optimize a particular bit of code, it doesn't "
"necessarily mean that we *should*. Knowing when and when not to optimize is "
"a great skill to develop."
msgstr ""
"特定のコード部分を最適化できるからといって、必ずしも最適化すべきというわけで"
"はありません。いつ最適化すべきでいつ最適化すべきでないかを知ることは、習得す"
"べき素晴らしいスキルです。"

msgid ""
"One misleading aspect of the quote is that people tend to focus on the "
"subquote *\"premature optimization is the root of all evil\"*. While "
"*premature* optimization is (by definition) undesirable, performant software "
"is the result of performant design."
msgstr ""
"この引用文で誤解を招く点の 1 つは、人々がサブ引用文の「時期尚早な最適化は諸悪"
"の根源である」に注目する傾向があることです。時期尚早な最適化は (定義上) 望ま"
"しくありませんが、パフォーマンスの高いソフトウェアはパフォーマンスの高い設計"
"から生まれます。"

msgid "Performant design"
msgstr "パフォーマンスの高い設計"

msgid ""
"The danger with encouraging people to ignore optimization until necessary, "
"is that it conveniently ignores that the most important time to consider "
"performance is at the design stage, before a key has even hit a keyboard. If "
"the design or algorithms of a program are inefficient, then no amount of "
"polishing the details later will make it run fast. It may run *faster*, but "
"it will never run as fast as a program designed for performance."
msgstr ""
"必要になるまで最適化を無視するように人々に勧めることの危険性は、パフォーマン"
"スを考慮する最も重要な時期は、キーがキーボードに入力される前の設計段階である"
"ことを都合よく無視することです。プログラムの設計やアルゴリズムが非効率的であ"
"れば、後で細部をいくら磨いても、プログラムの実行速度は上がりません。いくらか"
"実行速度は速くなるかもしれませんが、パフォーマンスを重視して設計されたプログ"
"ラムと同じ速度で実行されることは決してありません。"

msgid ""
"This tends to be far more important in game or graphics programming than in "
"general programming. A performant design, even without low-level "
"optimization, will often run many times faster than a mediocre design with "
"low-level optimization."
msgstr ""
"これは一般的なプログラミングよりも、ゲームやグラフィックスのプログラミングに"
"おいて、はるかに重要になる傾向があります。パフォーマンスの高い設計は、低レベ"
"ルの最適化がなくても、低レベルの最適化が行われた平凡な設計よりも何倍も高速に"
"実行されることがよくあります。"

msgid "Incremental design"
msgstr "インクリメンタル設計"

msgid ""
"Of course, in practice, unless you have prior knowledge, you are unlikely to "
"come up with the best design the first time. Instead, you'll often make a "
"series of versions of a particular area of code, each taking a different "
"approach to the problem, until you come to a satisfactory solution. It's "
"important not to spend too much time on the details at this stage until you "
"have finalized the overall design. Otherwise, much of your work will be "
"thrown out."
msgstr ""
"もちろん、実際には事前の知識がなければ、最初から最高の設計を思いつく可能性は"
"低いでしょう。その代わりに多くの場合、特定のコード領域のバージョンをいくつか"
"作成し、特定のコード領域について、それぞれ異なるアプローチで何バージョンも作"
"成することがよくあります。全体的な設計が完成するまで、この段階では詳細に時間"
"をかけすぎないことが重要です。そうしないと作業の大部分が無駄になってしまいま"
"す。"

msgid ""
"It's difficult to give general guidelines for performant design because this "
"is so dependent on the problem. One point worth mentioning though, on the "
"CPU side, is that modern CPUs are nearly always limited by memory bandwidth. "
"This has led to a resurgence in data-oriented design, which involves "
"designing data structures and algorithms for *cache locality* of data and "
"linear access, rather than jumping around in memory."
msgstr ""
"パフォーマンスの高い設計の一般的なガイドラインを示すことは困難です。これは問"
"題に大きく依存するからです。しかし CPU 側で言及する価値のある1つのポイント"
"は、最近の CPU は常にメモリ帯域幅によって性能が制限されているということです。"
"このためメモリ内をあちこち飛び回るのではなく、データの *キャッシュ局所性* と"
"線形アクセスのためのデータ構造とアルゴリズムを設計する、データ指向設計が重要"
"です。"

msgid "The optimization process"
msgstr "最適化のプロセス"

msgid ""
"Assuming we have a reasonable design, and taking our lessons from Knuth, our "
"first step in optimization should be to identify the biggest bottlenecks - "
"the slowest functions, the low-hanging fruit."
msgstr ""
"合理的な設計ができたと仮定し、Knuth から教訓を得たとして、最適化の最初のス"
"テップは、最大のボトルネック、つまり最も遅い関数、簡単に達成できる部分を特定"
"することです。"

msgid ""
"Once we've successfully improved the speed of the slowest area, it may no "
"longer be the bottleneck. So we should test/profile again and find the next "
"bottleneck on which to focus."
msgstr ""
"最も遅い部分の速度を改善することができたら、そこがボトルネックではなくなる可"
"能性があります。そのため、再度テスト/プロファイルを実行し、次に重点を置くべき"
"ボトルネックを見つける必要があります。"

msgid "The process is thus:"
msgstr "プロセスは次のようになります。"

msgid "Profile / Identify bottleneck."
msgstr "プロファイルしてボトルネックを特定する。"

msgid "Optimize bottleneck."
msgstr "ボトルネックを最適化する。"

msgid "Return to step 1."
msgstr "ステップ1に戻る。"

msgid "Optimizing bottlenecks"
msgstr "ボトルネックの最適化"

msgid ""
"Some profilers will even tell you which part of a function (which data "
"accesses, calculations) are slowing things down."
msgstr ""
"プロファイラーでは、関数のどの部分 (データアクセス、計算処理など) が速度を低"
"下させているかがわかります。"

msgid ""
"As with design, you should concentrate your efforts first on making sure the "
"algorithms and data structures are the best they can be. Data access should "
"be local (to make best use of CPU cache), and it can often be better to use "
"compact storage of data (again, always profile to test results). Often, you "
"precalculate heavy computations ahead of time. This can be done by "
"performing the computation when loading a level, by loading a file "
"containing precalculated data, or by storing the results of complex "
"calculations into a script constant and reading its value."
msgstr ""
"設計と同様に、まずアルゴリズムとデータ構造が最善のものとなるよう努力を集中す"
"る必要があります。データアクセスはローカルで行いましょう (CPU キャッシュを最"
"大限に活用するため)。またデータのコンパクトなストレージを使用する方がよい場合"
"が多くあります (ここでも常にプロファイルを作成して結果をテストしてください)。"
"多くの場合、負荷の高い計算は事前に計算しましょう。これはレベルをロードすると"
"きに計算を実行したり、事前に計算されたデータが記録されているファイルをロード"
"したり、複雑な計算の結果をスクリプト定数に格納してその値を使用することなどで"
"実行できます。"

msgid ""
"Once algorithms and data are good, you can often make small changes in "
"routines which improve performance. For instance, you can move some "
"calculations outside of loops or transform nested ``for`` loops into non-"
"nested loops. (This should be feasible if you know a 2D array's width or "
"height in advance.)"
msgstr ""
"アルゴリズムとデータが適切であれば、ルーチンに小さな変更を加えるだけでパ"
"フォーマンスが向上することがよくあります。たとえば、一部の計算をループ外に移"
"動したり、ネストされた ``for`` ループをネストされていないループに変換したりで"
"きます。(2D 配列の幅または高さが事前にわかっている場合は、これが実行可能なは"
"ずです。)"

msgid ""
"Always retest your timing/bottlenecks after making each change. Some changes "
"will increase speed, others may have a negative effect. Sometimes, a small "
"positive effect will be outweighed by the negatives of more complex code, "
"and you may choose to leave out that optimization."
msgstr ""
"変更を加えた後は必ずタイミング/ボトルネックを再テストしてください。変更によっ"
"ては速度が向上するものもありますが、マイナスの影響を与えるものもあります。場"
"合によっては、わずかなプラスの効果を、より複雑なコードによるマイナスの影響が"
"上回ることがあり、その最適化を省くことを選択することもあります。"

msgid "Appendix"
msgstr "付録"

msgid "Bottleneck math"
msgstr "ボトルネックの計算"

msgid ""
"The proverb *\"a chain is only as strong as its weakest link\"* applies "
"directly to performance optimization. If your project is spending 90% of the "
"time in function ``A``, then optimizing ``A`` can have a massive effect on "
"performance."
msgstr ""
"*「鎖の強さは最も弱い部分と同じ」* という諺は、パフォーマンスの最適化に直接当"
"てはまります。プログラムの時間の 90% が関数「A」に費やされている場合、「A」を"
"最適化するとパフォーマンスに大きな影響を与える可能性があります。"

msgid ""
"In this example, improving this bottleneck ``A`` by a factor of 9× decreases "
"overall frame time by 5× while increasing frames per second by 5×."
msgstr ""
"この例では、このボトルネック「A」を 9 倍改善すると、全体のフレーム時間が 5 倍"
"短縮され、1 秒あたりのフレーム数が 5 倍増加します。"

msgid ""
"However, if something else is running slowly and also bottlenecking your "
"project, then the same improvement can lead to less dramatic gains:"
msgstr ""
"ただし、他の何かの実行速度が遅く、プログラムのボトルネックになっている場合"
"は、同じ改善を行ってもそれほど劇的な効果は得られません。"

msgid ""
"In this example, even though we have hugely optimized function ``A``, the "
"actual gain in terms of frame rate is quite small."
msgstr ""
"この例では、関数「A」を大幅に最適化しているにもかかわらず、フレームレートの点"
"での実際の向上はわずかです。"

msgid ""
"In games, things become even more complicated because the CPU and GPU run "
"independently of one another. Your total frame time is determined by the "
"slower of the two."
msgstr ""
"ゲームでは CPU と GPU が互いに独立して実行されるため、状況はさらに複雑になり"
"ます。合計フレーム時間は、2つのうち遅い方によって決まります。"

msgid ""
"In this example, we optimized the CPU hugely again, but the frame time "
"didn't improve because we are GPU-bottlenecked."
msgstr ""
"この例では、CPU を再度大幅に最適化しましたが、GPU がボトルネックになっている"
"ため、フレーム時間は改善されませんでした。"
