#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Controlling thousands of fish with Particles"
msgstr "パーティクルで数千の魚を制御する"

msgid ""
"The problem with :ref:`MeshInstance3D <class_MeshInstance3D>` is that it is "
"expensive to update their transform array. It is great for placing many "
"static objects around the scene. But it is still difficult to move the "
"objects around the scene."
msgstr ""
":ref:`MeshInstance3D <class_MeshInstance3D>` の問題は、transform配列を更新す"
"るのにコストがかかることです。シーンの周囲に多くの静的オブジェクトを配置する"
"のには最適です。ただしオブジェクトをシーン内で移動することは依然として困難で"
"す。"

msgid ""
"To make each instance move in an interesting way, we will use "
"a :ref:`GPUParticles3D <class_GPUParticles3D>` node. Particles take "
"advantage of GPU acceleration by computing and setting the per-instance "
"information in a :ref:`Shader <class_Shader>`."
msgstr ""
"各インスタンスを興味深い方法で移動させるには、 :ref:`GPUParticles3D "
"<class_GPUParticles3D>` ノードを使用します。パーティクルは、\\ :ref:`Shader "
"<class_Shader>` でインスタンスごとの情報を計算および設定することにより、GPUア"
"クセラレーションを利用します。"

msgid ""
"First create a Particles node. Then, under \"Draw Passes\" set the "
"Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under "
"\"Process Material\" create a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"最初にParticlesノードを作成します。次に、\\ ``Draw Passes`` の下で、パーティ"
"クルの ``Draw Pass 1`` を :ref:`Mesh <class_Mesh>` に設定します。次に、"
"[Process Material]の下に新しい :ref:`ShaderMaterial <class_ShaderMaterial>` "
"を作成します。"

msgid "Set the ``shader_type`` to ``particles``."
msgstr "``shader_type`` を ``particles`` に設定します。"

msgid "Then add the following two functions:"
msgstr "続いて、次の2つの関数を追加します:"

msgid ""
"These functions come from the default :ref:`ParticleProcessMaterial "
"<class_ParticleProcessMaterial>`. They are used to generate a random number "
"from each particle's ``RANDOM_SEED``."
msgstr ""
"これらの関数は、デフォルトの :ref:`ParticleProcessMaterial "
"<class_ParticleProcessMaterial>` から取得されます。これらは、各パーティクル"
"の ``RANDOM_SEED`` から乱数を生成するために使用されます。"

msgid ""
"A unique thing about particle shaders is that some built-in variables are "
"saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be "
"accessed in the shader of the mesh, and also in the particle shader the next "
"time it is run."
msgstr ""
"パーティクル シェーダーのユニークな点は、一部の組み込み変数がフレームを超えて"
"保存されることです。 ``TRANSFORM`` 、 ``COLOR`` 、 ``CUSTOM`` はすべてメッ"
"シュのシェーダーでアクセスでき、次にパーティクルシェーダーを実行するときにも"
"アクセスできます。"

msgid ""
"Next, setup your ``start()`` function. Particles shaders contain a "
"``start()`` function and a ``process()`` function."
msgstr ""
"次に ``start()`` 関数を設定します。パーティクルシェーダーには、 ``start()`` "
"関数と ``process()`` 関数が含まれています。"

msgid ""
"The code in the ``start()`` function only runs when the particle system "
"starts. The code in the ``process()`` function will always run."
msgstr ""
"``start()`` 関数のコードは、パーティクルシステムが起動したときにのみ実行され"
"ます。 ``process()`` 関数のコードは常に実行されます。"

msgid ""
"We need to generate 4 random numbers: 3 to create a random position and one "
"for the random offset of the swim cycle."
msgstr ""
"次に4 つの乱数を生成する必要があります。3 つはランダムな位置を作成するための"
"もので、もう 1 つは水泳サイクルのランダムなオフセット用です。"

msgid ""
"First, generate 4 seeds inside the ``start()`` function using the ``hash()`` "
"function provided above:"
msgstr ""
"まず、上記の ``hash()`` 関数を使用して ``start()`` 関数内に 4 つのシードを生"
"成します。"

msgid ""
"Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr "次に、それらのシードを使用して ``rand_from_seed`` で乱数を生成します。"

msgid ""
"Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of "
"the transform that holds the position information."
msgstr ""
"最後に、位置情報を保持するtansformの一部である ``TRANSFORM[3].xyz`` に "
"``position`` を割り当てます。"

msgid "Remember, all this code so far goes inside the ``start()`` function."
msgstr ""
"これまでのコードはすべて ``start()`` 関数内に記述されていることに注意してくだ"
"さい。"

msgid ""
"The vertex shader for your mesh can stay the exact same as it was in the "
"previous tutorial."
msgstr ""
"メッシュの頂点シェーダーは、前のチュートリアルとまったく同じままにすることが"
"できます。"

msgid ""
"Now you can move each fish individually each frame, either by adding to the "
"``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""
"これで、\\ ``TRANSFORM`` に直接追加するか、\\ ``VELOCITY`` に書き込むことで、"
"各魚をフレームごとに個別に移動できます。"

msgid ""
"Let's transform the fish by setting their ``VELOCITY`` in the ``start()`` "
"function."
msgstr "``start()`` 関数で ``VELOCITY`` を設定して魚を変形させましょう。"

msgid ""
"This is the most basic way to set ``VELOCITY`` every particle (or fish) will "
"have the same velocity."
msgstr ""
"これは、すべてのパーティクル(または魚)が同じ速度を持つように ``VELOCITY`` を"
"設定する最も基本的な方法です。"

msgid ""
"Just by setting ``VELOCITY`` you can make the fish swim however you want. "
"For example, try the code below."
msgstr ""
"``VELOCITY`` を設定するだけで、好きなように魚を泳がせることができます。たとえ"
"ば、次のコードを試してください。"

msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr ""
"これにより、各魚に ``2`` と ``10`` の間のユニークな速度が与えられます。"

msgid ""
"You can also let each fish change its velocity over time if you set the "
"velocity in the ``process()`` function."
msgstr ""
"``process()`` 関数で速度を設定すると、時間の経過とともに各魚の速度を変更する"
"こともできます。"

msgid ""
"If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of "
"the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""
"前回のチュートリアルで ``CUSTOM.y`` を使用した場合、\\ ``VELOCITY`` に基づい"
"て遊泳アニメーションの速度を設定することもできます。\\ ``CUSTOM.y`` を使用し"
"てください。"

msgid "This code gives you the following behavior:"
msgstr "このコードは、次の動作を提供します:"

msgid ""
"Using a ParticleProcessMaterial you can make the fish behavior as simple or "
"complex as you like. In this tutorial we only set Velocity, but in your own "
"Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). "
"Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` "
"for more information on particle shaders."
msgstr ""
"ParticleProcessMaterial を使用すると、魚の挙動を好きなだけシンプルにしたり複"
"雑にしたりできます。このチュートリアルでは速度のみを設定しますが、独自の"
"シェーダーでは ``COLOR`` 、回転、スケール (``TRANSFORM`` 経由) も設定できま"
"す。パーティクルシェーダーの詳細については、 :ref:`パーティクルシェーダーリ"
"ファレンス <doc_particle_shader>` を参照してください。"
