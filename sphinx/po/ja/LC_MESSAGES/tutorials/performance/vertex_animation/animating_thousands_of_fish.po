#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid ""
"This tutorial explores a technique used in the game `ABZU <https://www."
"gdcvault.com/play/1024409/Creating-the-Art-of-ABZ>`_ for rendering and "
"animating thousands of fish using vertex animation and static mesh "
"instancing."
msgstr ""
"このチュートリアルでは、頂点アニメーションと静的メッシュのインスタンス化を使"
"用して、何千もの魚をレンダリングおよびアニメーション化するために、ゲームで使"
"用されるテクニック `ABZU <https://www.gdcvault.com/play/1024409/Creating-the-"
"Art-of-ABZ>`_を探ります。"

msgid ""
"We will start by animating one fish. Then, we will see how to extend that "
"animation to thousands of fish."
msgstr ""
"まず、1匹の魚をアニメーション化することから始めます。次に、そのアニメーション"
"を何千もの魚に拡張する方法を見ていきます。"

msgid "Animating one Fish"
msgstr "1匹の魚のアニメーション"

msgid ""
"Here is the fish we will be using for the example images, you can use any "
"fish model you like."
msgstr "これがサンプル画像に使用する魚です。好きな魚モデルを使用できます。"

msgid "The animation will be made of four key motions:"
msgstr "アニメーションは、4つのキーモーションで構成されます:"

msgid "A side to side motion"
msgstr "左右の動き"

msgid "A pivot motion around the center of the fish"
msgstr "魚の中心の周を旋回する動き"

msgid "A panning wave motion"
msgstr "揺ら揺らした波状の動き"

msgid "A panning twist motion"
msgstr "揺ら揺らした捻る動き"

msgid ""
"All the code for the animation will be in the vertex shader with uniforms "
"controlling the amount of motion. We use uniforms to control the strength of "
"the motion so that you can tweak the animation in editor and see the results "
"in real time, without the shader having to recompile."
msgstr ""
"アニメーションのすべてのコードは、モーションの量を制御するuniformを持つ頂点"
"シェーダーにあります。uniformを使用してモーションの強さを制御するため、エディ"
"タでアニメーションを微調整し、シェーダーを再コンパイルせずにリアルタイムで結"
"果を確認できます。"

msgid ""
"In order to control the speed of the animation, we will start by defining "
"our own time variable using ``TIME``."
msgstr ""
"アニメーションの速度を制御するために、\\ ``TIME`` を使用して独自の時間変数を"
"定義することから始めます。"

msgid ""
"The first motion we will implement is the side to side motion. It can be "
"made by offsetting ``VERTEX.x`` by ``cos`` of ``TIME``. Each time the mesh "
"is rendered, all the vertices will move to the side by the amount of "
"``cos(time)``."
msgstr ""
"実装する最初のモーションは、左右のモーションです。これは、\\ ``VERTEX.x`` を "
"``TIME`` の ``cos`` でオフセットすることで作成できます。メッシュがレンダリン"
"グされるたびに、すべての頂点が ``cos(time)`` の量だけ横に移動します。"

msgid "The resulting animation should look something like this:"
msgstr "結果のアニメーションは次のようになります:"

msgid ""
"Next, we add the pivot. Because the fish is centered at (0, 0), all we have "
"to do is multiply ``VERTEX`` by a rotation matrix for it to rotate around "
"the center of the fish."
msgstr ""
"次に、ピボットを追加します。魚の中心は (0, 0) なので、魚の中心の周りを回転さ"
"せるために、\\ ``VERTEX`` に回転行列を掛けるだけで済みます。"

msgid "We construct a rotation matrix like so:"
msgstr "次のような回転行列を作成します:"

msgid ""
"And then we apply it in the ``x`` and ``z`` axes by multiplying it by "
"``VERTEX.xz``."
msgstr ""
"そして、それを ``VERTEX.xz`` に乗算して ``x`` および ``z`` 軸に回転を適用しま"
"す。"

msgid "With only the pivot applied you should see something like this:"
msgstr "ピボットのみを適用すると、次のように表示されます:"

msgid ""
"The next two motions need to pan down the spine of the fish. For that, we "
"need a new variable, ``body``. ``body`` is a float that is ``0`` at the tail "
"of the fish and ``1`` at its head."
msgstr ""
"次の2つの動きは、魚の背骨をパンダウンする必要があります。そのためには、新しい"
"変数 ``body`` が必要です。 ``body`` は、魚の尾が ``0`` \\、頭に ``1`` のfloat"
"です。"

msgid ""
"The next motion is a cosine wave that moves down the length of the fish. To "
"make it move along the spine of the fish, we offset the input to ``cos`` by "
"the position along the spine, which is the variable we defined above, "
"``body``."
msgstr ""
"次の動きは、魚の長さを下るコサイン波です。それを魚の背骨に沿って移動させるた"
"めに、背骨に沿った位置で ``cos`` への入力をオフセットします。これは上で定義し"
"た変数 ``body`` です。"

msgid ""
"This looks very similar to the side to side motion we defined above, but in "
"this one, by using ``body`` to offset ``cos`` each vertex along the spine "
"has a different position in the wave making it look like a wave is moving "
"along the fish."
msgstr ""
"これは上で定義した左右の動きに非常に似ていますが、この例では、\\ ``body`` を"
"使用して ``cos`` をオフセットすることにより、脊椎に沿った各頂点が波の中で異な"
"る位置を持ち、波は魚に沿って動いているように見えます。"

msgid "Here is the fish with twist applied:"
msgstr "捻りが適用された魚は次のとおりです:"

msgid ""
"If we apply all these motions one after another, we get a fluid jelly-like "
"motion."
msgstr ""
"これらすべての動きを次々に適用すると、滑らかなゼリーのような動きが得られま"
"す。"

msgid ""
"Normal fish swim mostly with the back half of their body. Accordingly, we "
"need to limit the panning motions to the back half of the fish. To do this, "
"we create a new variable, ``mask``."
msgstr ""
"通常の魚は主に体の後ろ半分で泳ぎます。したがって、パンの動きを魚の後ろ半分に"
"制限する必要があります。これを行うために、新しい変数 ``mask`` を作成します。"

msgid "Below is an image of the fish with ``mask`` used as ``COLOR``:"
msgstr "以下は、\\ ``mask`` を ``COLOR`` として使用した魚の画像です:"

msgid ""
"For the wave, we multiply the motion by ``mask`` which will limit it to the "
"back half."
msgstr "波については、動きに ``mask`` を掛けて、後ろ半分に制限します。"

msgid "Putting the four motions together gives us the final animation."
msgstr ""
"4つのモーションを組み合わせると、最終的なアニメーションが作成されます。"

msgid ""
"Go ahead and play with the uniforms in order to alter the swim cycle of the "
"fish. You will find that you can create a wide variety of swim styles using "
"these four motions."
msgstr ""
"さあ、魚の泳ぎ方を変えるためにunifomで遊んでください。これらの4つのモーション"
"を使用して、さまざまな遊泳スタイルを作成できることがわかります。"

msgid "Making a school of fish"
msgstr "魚の群れを作る"

msgid ""
"MultiMeshes draw your Mesh with three additional per-instance properties: "
"Transform (rotation, translation, scale), Color, and Custom. Custom is used "
"to pass in 4 multi-use variables using a :ref:`Color <class_Color>`."
msgstr ""
"MultiMeshは、インスタンスごとの3つの追加プロパティでメッシュを描画します: 幾"
"何学変換(回転、移動、スケール)、色、およびカスタム。カスタムは、\\ :ref:"
"`Color <class_Color>` を使用して4つの多目的変数を渡すために使用されます。"

msgid ""
"``instance_count`` specifies how many instances of the mesh you want to "
"draw. For now, leave ``instance_count`` at ``0`` because you cannot change "
"any of the other parameters while ``instance_count`` is larger than ``0``. "
"We will set ``instance count`` in GDScript later."
msgstr ""
"``instance_count`` は、描画するメッシュのインスタンスの数を指定します。とりあ"
"えず、\\ ``instance_count`` が ``0`` より大きい間は他のパラメーターを変更でき"
"ないため、\\ ``instance_count`` を ``0`` のままにします。後でGDScriptで "
"``instance_count`` を設定します。"

msgid ""
"``transform_format`` specifies whether the transforms used are 3D or 2D. For "
"this tutorial, select 3D."
msgstr ""
"``Transform Format``は、使用される変換が3Dか2Dかを指定します。このチュートリ"
"アルでは、3Dを選択します。"

msgid "Now, set ``instance_count`` to the number of fish you want to have."
msgstr "さて、\\ ``Instance Count`` を持ちたい魚の数に設定してください。"

msgid "Next we need to set the per-instance transforms."
msgstr "次に、インスタンスごとのtransformを設定する必要があります。"

msgid ""
"The second is to loop over all the instances and set their transforms in "
"code. Below, we use GDScript to loop over all the instances and set their "
"transform to a random position."
msgstr ""
"2つ目は、すべてのインスタンスをループ処理し、コード内でそれらのtansformを設定"
"することです。以下では、GDScriptを使用してすべてのインスタンスをループし、そ"
"れらの変換をランダムな位置に設定します。"

msgid "Animating a school of fish"
msgstr "魚の群れをアニメーション化する"

msgid ""
"One of the benefits of animating the fish using ``cos`` functions is that "
"they are animated with one parameter, ``time``. In order to give each fish a "
"unique position in the swim cycle, we only need to offset ``time``."
msgstr ""
"``cos`` 関数を使用して魚をアニメーション化する利点の1つは、1つのパラメーター "
"``time`` でアニメーション化されることです。各魚に遊泳サイクルのユニークな位置"
"を与えるために、\\ ``time``をオフセットする必要があります。"

msgid ""
"We do that by adding the per-instance custom value ``INSTANCE_CUSTOM`` to "
"``time``."
msgstr ""
"インスタンスごとのカスタム値 ``INSTANCE_CUSTOM`` を ``time`` に加算することで"
"それを行います。"

msgid ""
"Next, we need to pass a value into ``INSTANCE_CUSTOM``. We do that by adding "
"one line into the ``for`` loop from above. In the ``for`` loop we assign "
"each instance a set of four random floats to use."
msgstr ""
"次に、値を ``INSTANCE_CUSTOM`` に渡す必要があります。そのためには、上から "
"``for`` ループに1行追加します。\\ ``for`` ループでは、各インスタンスに使用す"
"る4つのランダムフロートのセットを割り当てます。"

msgid ""
"Now the fish all have unique positions in the swim cycle. You can give them "
"a little more individuality by using ``INSTANCE_CUSTOM`` to make them swim "
"faster or slower by multiplying by ``TIME``."
msgstr ""
"今、魚はすべて遊泳サイクルでユニークな位置を持っています。\\ "
"``INSTANCE_CUSTOM`` を使用して、\\ ``TIME`` を掛けることでより速くまたは遅く"
"泳ぐことで、彼らにもう少し個性を与えることができます。"

msgid ""
"You can even experiment with changing the per-instance color the same way "
"you changed the per-instance custom value."
msgstr ""
"インスタンスごとのカスタム値を変更したのと同じ方法で、インスタンスごとの色の"
"変更を試すこともできます。"
