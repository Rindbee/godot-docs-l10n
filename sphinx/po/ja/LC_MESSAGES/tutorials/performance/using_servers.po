#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Optimization using Servers"
msgstr "サーバーを使用した最適化"

msgid ""
"Engines like Godot provide increased ease of use thanks to their high level "
"constructs and features. Most of them are accessed and used via the :ref:"
"`Scene System<doc_scene_tree>`. Using nodes and resources simplifies project "
"organization and asset management in complex games."
msgstr ""
"Godotのようなエンジンは、高レベルの構造と機能により、使いやすさが向上していま"
"す。それらのほとんどは、\\ :ref:`Scene System <doc_scene_tree>` を介してアク"
"セスおよび使用されます。ノードとリソースを使用すると、複雑なゲームのプロジェ"
"クト編成と資産管理が簡素化されます。"

msgid "There are, of course, always drawbacks:"
msgstr "もちろん、常に欠点もあります:"

msgid "There is an extra layer of complexity."
msgstr "複雑さがさらに増します。"

msgid "Performance is lower than when using simple APIs directly."
msgstr "単純な API を直接使用するよりもパフォーマンスが低下します。"

msgid "It is not possible to use multiple threads to control them."
msgstr "複数のスレッドを使用してそれらを制御することはできません。"

msgid "More memory is needed."
msgstr "より多くのメモリが必要になります。"

msgid ""
"In many cases, this is not really a problem (Godot is very optimized, and "
"most operations are handled with signals, so no polling is required). Still, "
"sometimes it can be. For example, dealing with tens of thousands of "
"instances for something that needs to be processed every frame can be a "
"bottleneck."
msgstr ""
"多くの場合、これは実際には問題ではありません(Godotは非常に最適化されており、"
"ほとんどの操作はシグナルで処理されるため、ポーリングは不要です)。それでも、時"
"にはそれが必要です。たとえば、フレームごとに処理する必要がある何かのインスタ"
"ンスを数万件処理することがボトルネックになる可能性があります。"

msgid ""
"This type of situation makes programmers regret they are using a game engine "
"and wish they could go back to a more handcrafted, low level implementation "
"of game code."
msgstr ""
"このような状況では、プログラマはゲームエンジンを使用していることを後悔し、よ"
"り手作りの低レベルのゲームコード実装に戻ることを望みます。"

msgid "Still, Godot is designed to work around this problem."
msgstr "それでも、Godotはこの問題を回避するように設計されています。"

msgid ""
"You can see how using low-level servers works in action using the `Bullet "
"Shower demo project <https://github.com/godotengine/godot-demo-projects/tree/"
"master/2d/bullet_shower>`__"
msgstr ""
"`Bullet Shower デモ プロジェクト <https://github.com/godotengine/godot-demo-"
"projects/tree/master/2d/bullet_shower>` を使用して、低レベル サーバーが実際に"
"どのように機能するかを確認できます"

msgid "Servers"
msgstr "サーバー"

msgid ""
"One of the most interesting design decisions for Godot is the fact that the "
"whole scene system is *optional*. While it is not currently possible to "
"compile it out, it can be completely bypassed."
msgstr ""
"Godotの最も興味深い設計上の決定の1つは、シーンシステム全体が *オプション* で"
"あるという事実です。現時点ではこれをコンパイルすることはできませんが、完全に"
"バイパスすることは可能です。"

msgid ""
"At the core, Godot uses the concept of Servers. They are very low-level APIs "
"to control rendering, physics, sound, etc. The scene system is built on top "
"of them and uses them directly. The most common servers are:"
msgstr ""
"コアでは、Godotはサーバーの概念を使用します。サーバーはレンダリング、物理演"
"算、サウンドなどを制御するための非常に低レベルのAPIです。シーンシステムはそれ"
"らの上に構築され、それらを直接使用します。最も一般的なサーバーは次のとおりで"
"す:"

msgid ""
":ref:`RenderingServer <class_RenderingServer>`: handles everything related "
"to graphics."
msgstr ""
":ref:`RenderingServer <class_RenderingServer>`: グラフィックに関連するすべて"
"を処理します。"

msgid ""
":ref:`PhysicsServer3D <class_PhysicsServer3D>`: handles everything related "
"to 3D physics."
msgstr ""
":ref:`PhysicsServer3D <class_PhysicsServer3D>`: 3D物理演算に関連するすべてを"
"処理します。"

msgid ""
":ref:`PhysicsServer2D <class_PhysicsServer2D>`: handles everything related "
"to 2D physics."
msgstr ""
":ref:`PhysicsServer2D <class_PhysicsServer2D>`: 2D物理演算に関連するすべてを"
"処理します。"

msgid ""
":ref:`AudioServer <class_AudioServer>`: handles everything related to audio."
msgstr ""
":ref:`AudioServer <class_AudioServer>`: オーディオに関連するすべてを処理しま"
"す。"

msgid ""
"Explore their APIs and you will realize that all the functions provided are "
"low-level implementations of everything Godot allows you to do."
msgstr ""
"それらの APIを調べるだけで、提供されるすべての機能がGodotで実行可能なすべての"
"低レベル実装であることに気付くでしょう。"

msgid "RIDs"
msgstr "\\ RIDs"

msgid ""
"The key to using servers is understanding Resource ID (:ref:`RID "
"<class_RID>`) objects. These are opaque handles to the server "
"implementation. They are allocated and freed manually. Almost every function "
"in the servers requires RIDs to access the actual resource."
msgstr ""
"サーバーを使用する鍵は、リソースID(:ref:`RID <class_RID>`)オブジェクトを理解"
"することです。これらは、サーバー実装への不透明なハンドルです。それらは手動で"
"割り当てられ、解放されます。サーバーのほぼすべての機能には、実際のリソースに"
"アクセスするためのRIDが必要です。"

msgid "For nodes, there are many functions available:"
msgstr "ノードには、次の多くの機能が用意されています:"

msgid ""
"For CanvasItem, the :ref:`CanvasItem.get_canvas_item() "
"<class_CanvasItem_method_get_canvas_item>` method will return the canvas "
"item RID in the server."
msgstr ""
"CanvasItemの場合、\\ :ref:`CanvasItem.get_canvas_item() "
"<class_CanvasItem_method_get_canvas_item>` メソッドは、サーバー内のキャンバス"
"アイテムRIDを返します。"

msgid ""
"For CanvasLayer, the :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` method will return the canvas RID in "
"the server."
msgstr ""
"CanvasLayerの場合、\\ :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` メソッドはサーバーのキャンバスRIDを返"
"します。"

msgid ""
"For Viewport, the :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` method will return the viewport "
"RID in the server."
msgstr ""
"ビューポートの場合、\\ :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` メソッドはサーバーのビューポートRID"
"を返します。"

msgid ""
"It is not advised to control RIDs from objects that already have a node "
"associated. Instead, server functions should always be used for creating and "
"controlling new ones and interacting with the existing ones."
msgstr ""
"すでにノードが関連付けられているオブジェクトからRIDを制御することはお勧めしま"
"せん。代わりに、サーバー関数を常に使用して、新しい関数を作成および制御し、既"
"存の関数と対話する必要があります。"

msgid "Creating a sprite"
msgstr "スプライトの作成"

msgid ""
"The Canvas Item API in the server allows you to add draw primitives to it. "
"Once added, they can't be modified. The Item needs to be cleared and the "
"primitives re-added (this is not the case for setting the transform, which "
"can be done as many times as desired)."
msgstr ""
"サーバーのCanvas Item APIを使用すると、描画プリミティブを追加できます。追加し"
"た後は変更できません。アイテムをクリアし、プリミティブを再度追加する必要があ"
"ります(これは、幾何学変換を設定する場合には当てはまりません。これは、必要な回"
"数だけ実行できます)。"

msgid "Primitives are cleared this way:"
msgstr "プリミティブは次の方法でクリアされます:"

msgid "Instantiating a Mesh into 3D space"
msgstr "メッシュを3D空間にインスタンス化する"

msgid "Creating a 2D RigidBody and moving a sprite with it"
msgstr "2D RigidBodyの作成とスプライトの移動"

msgid "Getting data from the servers"
msgstr "サーバーからデータを取得する"

msgid ""
"Because of this, most APIs in such servers are designed so it's not even "
"possible to request information back, until it's actual data that can be "
"saved."
msgstr ""
"このため、このようなサーバーのほとんどのAPIは、保存可能な実際のデータができる"
"まで、情報を要求することさえできないように設計されています。"
