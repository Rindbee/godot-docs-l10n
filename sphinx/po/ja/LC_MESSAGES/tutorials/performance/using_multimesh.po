#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Optimization using MultiMeshes"
msgstr "MultiMeshを使用した最適化"

msgid ""
"For large amount of instances (in the thousands), that need to be constantly "
"processed (and certain amount of control needs to be retained), :ref:`using "
"servers directly <doc_using_servers>` is the recommended optimization."
msgstr ""
"大量のインスタンス(数千)で、常に処理する必要がある(および一定量の制御を保持す"
"る必要がある)場合 :ref:`サーバーを直接使用 <doc_using_servers>` する最適化が"
"推奨されます。"

msgid ""
"When the amount of objects reach the hundreds of thousands or millions, none "
"of these approaches are efficient anymore. Still, depending on the "
"requirements, there is one more optimization possible."
msgstr ""
"オブジェクトの数が数十万または数百万に達すると、これらのアプローチはいずれも"
"もはや効率的ではありません。それでも、要件によっては、もう1つの最適化が可能で"
"す。"

msgid "MultiMeshes"
msgstr "\\ MultiMesh"

msgid ""
"A :ref:`MultiMesh<class_MultiMesh>` is a single draw primitive that can draw "
"up to millions of objects in one go. It's extremely efficient because it "
"uses the GPU hardware to do this."
msgstr ""
":ref:`MultiMesh<class_MultiMesh>` は、一度に最大数百万のオブジェクトを描画で"
"きる単一の描画プリミティブです。これは GPU ハードウェアを使用して実行されるた"
"め、非常に効率的です。"

msgid ""
"The only drawback is that there is no *screen* or *frustum* culling possible "
"for individual instances. This means, that millions of objects will be "
"*always* or *never* drawn, depending on the visibility of the whole "
"MultiMesh. It is possible to provide a custom visibility rect for them, but "
"it will always be *all-or-none* visibility."
msgstr ""
"唯一の欠点は、個々のインスタンスに対して *スクリーン* または *フラスタム* カ"
"リングができないことです。これは MultiMesh全体の可視性に応じて、何百万ものオ"
"ブジェクトが\\ *常に*\\ または\\ *決して*\\ 描画されないことを意味します。そ"
"れらにカスタムの可視領域矩形 (Visibility Rect)を提供することは可能ですが、常"
"に *オールオアナッシング* の可視性になります。"

msgid ""
"If the objects are simple enough (just a couple of vertices), this is "
"generally not much of a problem as most modern GPUs are optimized for this "
"use case. A workaround is to create several MultiMeshes for different areas "
"of the world."
msgstr ""
"オブジェクトが十分に単純な場合(ほんの2、3の頂点)、ほとんどの最新のGPUはこの"
"ユースケースに最適化されているため、これは一般にそれほど問題ではありません。"
"回避策は、ワールドのさまざまな地域に複数のマルチメッシュを作成することです。"

msgid ""
"It is also possible to execute some logic inside the vertex shader (using "
"the ``INSTANCE_ID`` or ``INSTANCE_CUSTOM`` built-in constants). For an "
"example of animating thousands of objects in a MultiMesh, see "
"the :ref:`Animating thousands of fish <doc_animating_thousands_of_fish>` "
"tutorial. Information to the shader can be provided via textures (there are "
"floating-point :ref:`Image<class_Image>` formats which are ideal for this)."
msgstr ""
"頂点シェーダー内でいくつかのロジックを実行することもできます (ビルトイン定数"
"の ``INSTANCE_ID`` または ``INSTANCE_CUSTOM`` を使用)。MultiMesh で何千ものオ"
"ブジェクトをアニメーション化する例については、チュートリアル :ref:`Animating "
"thousands of fish <doc_animating_thousands_of_fish>` を参照してください。"
"シェーダーへの情報はテクスチャ経由で提供できます (これに最適な浮動小数"
"点 :ref:`Image<class_Image>` 形式があります)。"

msgid ""
"Another alternative is to use a GDExtension and C++, which should be "
"extremely efficient (it's possible to set the entire state for all objects "
"using linear memory via the :ref:`RenderingServer.multimesh_set_buffer() "
"<class_RenderingServer_method_multimesh_set_buffer>` function). This way, "
"the array can be created with multiple threads, then set in one call, "
"providing high cache efficiency."
msgstr ""
"別の方法は GDExtension と C++ を使用することです。これは非常に効率的です "
"(:ref:`RenderingServer.multimesh_set_buffer() "
"<class_RenderingServer_method_multimesh_set_buffer>` 関数を介して線形メモリを"
"使用してすべてのオブジェクトの状態全体を設定できます)。この方法では、配列を複"
"数のスレッドで作成し、1 回の呼び出しで設定できるため、高いキャッシュ効率が得"
"られます。"

msgid ""
"Finally, it's not required to have all MultiMesh instances visible. The "
"amount of visible ones can be controlled with "
"the :ref:`MultiMesh.visible_instance_count "
"<class_MultiMesh_property_visible_instance_count>` property. The typical "
"workflow is to allocate the maximum amount of instances that will be used, "
"then change the amount visible depending on how many are currently needed."
msgstr ""
"最後に、すべてのMultiMeshインスタンスを表示する必要はありません。表示されるも"
"のの量は、\\ :ref:`MultiMesh.visible_instance_count "
"<class_MultiMesh_property_visible_instance_count>` プロパティで制御できます一"
"般的なワークフローでは、使用するインスタンスの最大量を割り当て、現在必要なイ"
"ンスタンス数に応じて表示される量を変更します。"

msgid "Multimesh example"
msgstr "MultiMeshの例"

msgid ""
"Here is an example of using a MultiMesh from code. Languages other than "
"GDScript may be more efficient for millions of objects, but for a few "
"thousands, GDScript should be fine."
msgstr ""
"以下は、コードからMultiMeshを使用する例です。 GDScript以外の言語は、数百万の"
"オブジェクトに対してより効率的かもしれませんが、数千に対してはGDScriptで十分"
"です。"
