#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Performance"
msgstr "パフォーマンス"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Godot follows a balanced performance philosophy. In the performance world, "
"there are always tradeoffs, which consist of trading speed for usability and "
"flexibility. Some practical examples of this are:"
msgstr ""
"Godot はバランスの取れたパフォーマンス哲学に従っています。パフォーマンスの世"
"界では、速度に対して使いやすさや柔軟性をトレードオフすることが常にあります。"
"その実際的な例をいくつか挙げます:"

msgid ""
"Rendering large amounts of objects efficiently is easy, but when a large "
"scene must be rendered, it can become inefficient. To solve this, visibility "
"computation must be added to the rendering. This makes rendering less "
"efficient, but at the same time, fewer objects are rendered. Therefore, the "
"overall rendering efficiency is improved."
msgstr ""
"大量のオブジェクトを効率的にレンダリングするのは簡単ですが、大規模なシーンを"
"レンダリングする必要がある場合、非効率になる可能性があります。これを解決する"
"には、レンダリングに可視性の計算を追加する必要があり、レンダリングの効率が低"
"下しますが、同時にレンダリングされるオブジェクトが少なくなるため、全体的に効"
"率は向上します。"

msgid ""
"Configuring the properties of every material for every object that needs to "
"be rendered is also slow. To solve this, objects are sorted by material to "
"reduce the costs. At the same time, sorting has a cost."
msgstr ""
"レンダリングが必要なすべてのオブジェクトに対して、すべてのマテリアルのプロパ"
"ティを設定するのも時間がかかります。これを解決するために、オブジェクトはコス"
"トを削減するためにマテリアル別にソートされますが、同時に並べ替えにもコストが"
"かかります。"

msgid ""
"In 3D physics, a similar situation happens. The best algorithms to handle "
"large amounts of physics objects (such as SAP) are slow at insertion/removal "
"of objects and raycasting. Algorithms that allow faster insertion and "
"removal, as well as raycasting, will not be able to handle as many active "
"objects."
msgstr ""
"3Dの物理でも同様の状況が発生します。大量の物理オブジェクト (SAPなど) を処理す"
"るための最適なアルゴリズムは、オブジェクトの挿入/削除とレイキャスティングが遅"
"いです。挿入と削除、レイキャスティングが高速なアルゴリズムでは、多くのアク"
"ティブなオブジェクトを処理できません。"

msgid ""
"And there are many more examples of this! Game engines strive to be general-"
"purpose in nature. Balanced algorithms are always favored over algorithms "
"that might be fast in some situations and slow in others, or algorithms that "
"are fast but are more difficult to use."
msgstr ""
"他にも、このような例は数多くあります。ゲームエンジンは本質的に汎用性を追求し"
"ているため、ある状況では高速でも、他の状況では低速になる可能性のあるアルゴリ"
"ズムや、高速だが使いにくいアルゴリズムよりも、バランスの取れたアルゴリズムが"
"常に好まれます。"

msgid ""
"Godot is not an exception to this. While it is designed to have backends "
"swappable for different algorithms, the default backends prioritize balance "
"and flexibility over performance."
msgstr ""
"Godotも例外ではありません。バックエンドは異なるアルゴリズムに交換可能なように"
"設計されていますが、デフォルトのアルゴリズムは、パフォーマンスよりもバランス"
"と柔軟性を優先します。"

msgid ""
"With this clear, the aim of this tutorial section is to explain how to get "
"the maximum performance out of Godot. While the tutorials can be read in any "
"order, it is a good idea to start from :ref:`doc_general_optimization`."
msgstr ""
"これを明確にした上で、このチュートリアルセクションの目的は、Godot から最大限"
"のパフォーマンスを引き出す方法を説明することです。チュートリアルはどの順序で"
"読んでもかまいませんが、 :ref:`doc_general_optimization` から始めることをお勧"
"めします。"

msgid "Common"
msgstr "一般"

msgid "CPU"
msgstr "CPU"

msgid "GPU"
msgstr "GPU"

msgid "3D"
msgstr "3D"

msgid "Threads"
msgstr "スレッド"
