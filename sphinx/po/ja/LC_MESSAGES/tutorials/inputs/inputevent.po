#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "What is it?"
msgstr "それは何ですか？"

msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""
"通常、入力の管理は、OSやプラットフォームに関係なく複雑です。これを少し簡単に"
"するために、特別な組み込み型、\\ :ref:`InputEvent <class_InputEvent>` が提供"
"されています。このデータ型は、いくつかのタイプの入力イベントを含むように構成"
"できます。入力イベントはエンジンを通過し、目的に応じて複数の場所で受信できま"
"す。"

msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""
"以下に簡単な例を示します。エスケープキーが押された場合にゲームを終了します:"

msgid "How does it work?"
msgstr "どのように機能しますか？"

msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""
"GUIイベントもシーンツリーを上に移動しますが、これらのイベントは特定のコント"
"ロールを対象とするため、ターゲットコントロールノードの直接の先祖のみがイベン"
"トを受け取ります。"

msgid "Anatomy of an InputEvent"
msgstr "InputEventの構造"

msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""
":ref:`InputEvent <class_InputEvent>` は単なる基本組み込み型であり、何も表さ"
"ず、イベントID(イベントごとに増加する)、デバイスインデックスなどの基本情報の"
"みを含みます。"

msgid "Event"
msgstr "イベント"

msgid "Description"
msgstr "説明"

msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr "\\ :ref:`InputEvent <class_InputEvent>`"

msgid "Empty Input Event."
msgstr "空の入力イベント。"

msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr "\\ :ref:`InputEventKey <class_InputEventKey>`"

msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr "\\ :ref:`InputEventMouseButton <class_InputEventMouseButton>`"

msgid "Contains click information, such as button, modifiers, etc."
msgstr "ボタン、モディファイヤなどのクリック情報が含まれます。"

msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr "\\ :ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"

msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr "\\ :ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"

msgid "Contains Joystick/Joypad analog axis information."
msgstr "ジョイスティック/ジョイパッドのアナログ軸情報が含まれています。"

msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr "\\ :ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"

msgid "Contains Joystick/Joypad button information."
msgstr "ジョイスティック/ジョイパッドのボタン情報が含まれます。"

msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr "\\ :ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"

msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""
"マルチタッチのプレス/リリース情報が含まれています。(モバイルデバイスでのみ使"
"用可能)"

msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr "\\ :ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"

msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""
"マルチタッチドラッグ情報が含まれています。(モバイルデバイスでのみ使用可能)"

msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr "\\ :ref:`InputEventAction <class_InputEventAction>`"

msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""
"汎用アクションが含まれています。これらのイベントは多くの場合、フィードバック"
"としてプログラマーによって生成されます。(詳細は以下)"

msgid "Actions"
msgstr "アクション"

msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""
"入力が異なるさまざまなデバイス(PCのキーボード、コンソールのJoypadなど)で動作"
"する同じコード。"

msgid "Input to be reconfigured at run-time."
msgstr "実行時に再構成される入力。"

msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""
"すべてのイベントには、メソッド :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`\\ 、\\ :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` および :ref:`InputEvent "
"<class_InputEvent>` があります。"

msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""
"あるいは、ゲームコードからのアクションをゲームに返すことが望ましい場合があり"
"ます(この良い例は、ジェスチャの検出です)。Inputシングルトンには、次のメソッド"
"があります: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`\\ 。通常は次のように使用します:"

msgid "InputMap"
msgstr "入力マップ"

msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""
"多くの場合、コードからの入力をカスタマイズして再マッピングすることが望まれま"
"す。ワークフロー全体がアクションに依存する場合、\\ :ref:`InputMap "
"<class_InputMap>` シングルトンは、実行時に異なるアクションを再割り当てまたは"
"作成するのに理想的です。このシングルトンは保存されず(手動で変更する必要があり"
"ます)、そのステートはプロジェクト設定(project.godot)から実行されます。した"
"がって、このタイプの動的システムは、プログラマーが最適と考える方法で設定を保"
"存する必要があります。"

msgid "Translation status"
msgstr "翻訳ステータス"
