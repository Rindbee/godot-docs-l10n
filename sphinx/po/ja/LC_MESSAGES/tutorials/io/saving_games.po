#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Saving games"
msgstr "ゲームの保存"

msgid "Introduction"
msgstr "はじめに"

msgid ""
"Save games can be complicated. For example, it may be desirable to store "
"information from multiple objects across multiple levels. Advanced save game "
"systems should allow for additional information about an arbitrary number of "
"objects. This will allow the save function to scale as the game grows more "
"complex."
msgstr ""
"ゲームを保存するのは複雑です。例えば、 複数のレベルにまたがった複数のオブジェ"
"クトによる情報が保存される事が望ましい場合があります。 より高度なゲームシステ"
"ムのセーブでは、任意の数のオブジェクトに関する追加情報の保存ができる必要があ"
"ります。 これにより、ゲームがより複雑に成長するにつれて、保存機能を拡張できま"
"す。"

msgid ""
"If you're looking to save user configuration, you can use the :ref:"
"`class_ConfigFile` class for this purpose."
msgstr ""
"ユーザー設定を保存する場合は、この目的で :ref:`ConfigFile "
"<class_ConfigFile>` クラスを使用できます。"

msgid ""
"You can see how saving and loading works in action using the `Saving and "
"Loading (Serialization) demo project <https://github.com/godotengine/godot-"
"demo-projects/blob/master/loading/serialization>`__."
msgstr ""
"`セーブとロードのデモプロジェクト <https://github.com/godotengine/godot-demo-"
"projects/blob/master/loading/serialization>`__ を使用して、セーブとロードが実"
"際にどのように機能するかを確認できます。"

msgid "Identify persistent objects"
msgstr "永続オブジェクトの識別"

msgid ""
"Firstly, we should identify what objects we want to keep between game "
"sessions and what information we want to keep from those objects. For this "
"tutorial, we will use groups to mark and handle objects to be saved, but "
"other methods are certainly possible."
msgstr ""
"まず、ゲームセッション間で保持するオブジェクトと、それらのオブジェクトから保"
"持する情報を特定する必要があります。このチュートリアルでは、グループを使用し"
"て保存するオブジェクトをマークおよび処理しますが、他の方法ももちろん可能で"
"す。"

msgid ""
"We will start by adding objects we wish to save to the \"Persist\" group. We "
"can do this through either the GUI or script. Let's add the relevant nodes "
"using the GUI:"
msgstr ""
"まず \"Persist\" グループに保存したいオブジェクトを追加します。これは GUI ま"
"たはスクリプトのいずれかを使用して実行できます。GUI を使用して関連するノード"
"を追加しましょう。"

msgid ""
"Once this is done, when we need to save the game, we can get all objects to "
"save them and then tell them all to save with this script:"
msgstr ""
"これが完了したら、ゲームを保存する必要があるときに、このスクリプトを使用し"
"て、保存するすべてのオブジェクトを取得し、それをすべて保存するように指示でき"
"ます:"

msgid "Serializing"
msgstr "シリアル化"

msgid ""
"This gives us a dictionary with the style ``{ \"variable_name\":"
"value_of_variable }``, which will be useful when loading."
msgstr ""
"これにより、スタイルが ``{ \"variable_name\":value_of_variable }`` の辞書が得"
"られます。これはロード時に役立ちます。"

msgid "Saving and reading data"
msgstr "データの保存と読み取り"

msgid ""
"Now we can save and load an arbitrary number of objects laid out almost "
"anywhere across the scene tree! Each object can store different data "
"depending on what it needs to save."
msgstr ""
"これで、シーン ツリーのほぼ任意の場所に配置された任意の数のオブジェクトを保存"
"して読み込むことができます！各オブジェクトは、保存する必要があるデータに応じ"
"て異なるデータを格納できます。"

msgid "Some notes"
msgstr "いくつかの注意事項"

msgid ""
"We have glossed over setting up the game state for loading. It's ultimately "
"up to the project creator where much of this logic goes. This is often "
"complicated and will need to be heavily customized based on the needs of the "
"individual project."
msgstr ""
"ゲームの状態を読み込むための設定に焦点をあてて説明をおこないました。最終的に"
"は、このロジックの多くがプロジェクトの作成者に委ねられます。これはしばしば複"
"雑であり、個々のプロジェクトのニーズに基づいて大幅にカスタマイズする必要があ"
"ります。"

msgid ""
"Additionally, our implementation assumes no Persist objects are children of "
"other Persist objects. Otherwise, invalid paths would be created. To "
"accommodate nested Persist objects, consider saving objects in stages. Load "
"parent objects first so they are available for the :ref:`add_child() "
"<class_node_method_add_child>` call when child objects are loaded. You will "
"also need a way to link children to parents as the :ref:`NodePath "
"<class_nodepath>` will likely be invalid."
msgstr ""
"さらに、この実装では、Persistオブジェクトは他のPersistオブジェクトの子ではな"
"いと想定しています。そうしないと、無効なパスが作成されます。ネストされた永続"
"オブジェクトに対応するには、オブジェクトを段階的に保存することを検討してくだ"
"さい。最初に親オブジェクトをロードして、子オブジェクトがロードされたときに :"
"ref:`add_child() <class_node_method_add_child>` 呼び出しで使用できるようにし"
"ます。\\ :ref:`NodePath <class_nodepath>` はおそらく無効になるため、子を親に"
"リンクする方法も必要です。"
