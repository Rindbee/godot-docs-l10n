#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Background loading"
msgstr "バックグラウンド読み込み"

msgid ""
"Commonly, games need to load resources asynchronously. When switching the "
"main scene of your game (e.g. going to a new level), you might want to show "
"a loading screen with some indication that progress is being made, or you "
"may want to load additional resources during gameplay."
msgstr ""
"一般的にゲームはリソースを非同期的に読み込む必要があります。ゲームのメイン"
"シーンを切り替えるとき (新しいレベルに移行するときなど)、進行状況を示すロード"
"画面を表示したり、ゲームプレイ中に追加のリソースをロードしたりすることがあり"
"ます。"

msgid ""
"The standard load method (:ref:`ResourceLoader.load "
"<class_ResourceLoader_method_load>` or GDScript's simpler :ref:`load "
"<class_@GDScript_method_load>`) blocks your thread, making your game appear "
"unresponsive while the resource is being loaded."
msgstr ""
"標準のロードメソッド (:ref:`ResourceLoader.load "
"<class_ResourceLoader_method_load>` または GDScript のより単純な :ref:`load "
"<class_@GDScript_method_load>`) はスレッドをブロックし、このロード中はゲーム"
"が応答しなくなったように見えます。"

msgid ""
"One way around this is using ``ResourceLoader`` to load resources "
"asynchronously in background threads."
msgstr ""
"これを回避する方法の1つは、 ``ResourceLoader`` を使用してバックグラウンドス"
"レッドでリソースを非同期にロードすることです。"

msgid "Using ResourceLoader"
msgstr "ResourceLoaderの使用"

msgid ""
"Generally, you queue requests to load resources for a path "
"using :ref:`ResourceLoader.load_threaded_request "
"<class_ResourceLoader_method_load_threaded_request>`, which will then be "
"loaded in threads in the background."
msgstr ""
"一般的には :ref:`ResourceLoader.load_threaded_request "
"<class_ResourceLoader_method_load_threaded_request>` を使用してロードするリ"
"ソースのパスをリクエストキューに入れます。これを行うとバックグラウンドのス"
"レッドでリソースがロードされます。"

msgid ""
"You can check the status with :ref:`ResourceLoader.load_threaded_get_status "
"<class_ResourceLoader_method_load_threaded_get_status>`. Progress can be "
"obtained by passing an array variable via progress which will return a one "
"element array containing the percentage."
msgstr ""
"ロード中のステータスは :ref:`ResourceLoader.load_threaded_get_status "
"<class_ResourceLoader_method_load_threaded_get_status>` で確認できます。進行"
"状況(パーセント表記)は1要素の配列変数を progress 経由で渡すことによって取得で"
"きます。"

msgid ""
"Finally, you retrieve loaded resources by "
"calling :ref:`ResourceLoader.load_threaded_get "
"<class_ResourceLoader_method_load_threaded_get>`."
msgstr ""
"最後に :ref:`ResourceLoader.load_threaded_get "
"<class_ResourceLoader_method_load_threaded_get>` を呼び出して、ロードされたリ"
"ソースを取得します。"

msgid ""
"Once you call ``load_threaded_get()``, either the resource finished loading "
"in the background and will be returned instantly or the load will block at "
"this point like ``load()`` would. If you want to guarantee this does not "
"block, you either need to ensure there is enough time between requesting the "
"load and retrieving the resource or you need to check the status manually."
msgstr ""
"``load_threaded_get()`` を呼び出すと、リソースがバックグラウンドでロードを完"
"了しているときは即座に返されます。そうでないときは ``load()`` のようにロード"
"完了するまでブロックされます。これがブロックされないことを保証したい場合は、"
"ロードのリクエストとリソースの取得の間に十分な時間を確保するか、ステータスを"
"手動で確認する必要があります。"

msgid "Example"
msgstr "サンプル"

msgid ""
"This example demonstrates how to load a scene in the background. We will "
"have a button spawn an enemy when pressed. The enemy will be ``Enemy.tscn`` "
"which we will load on ``_ready`` and instantiate when pressed. The path will "
"be ``\"Enemy.tscn\"`` which is located at ``res://Enemy.tscn``."
msgstr ""
"このサンプルではバックグラウンドでシーンをロードする方法を示します。ボタンを"
"押すと敵がスポーンするようにします。敵は ``Enemy.tscn`` です。これを "
"``_ready`` でロードし、ボタンが押されたときにインスタンス化します。パスは "
"``res://Enemy.tscn`` です。"

msgid ""
"First, we will start a request to load the resource and connect the button:"
msgstr ""
"まずリソースのロードをリクエストして、ボタンのシグナルにメソッドを接続しま"
"す。"

msgid ""
"Now ``_on_button_pressed`` will be called when the button is pressed. This "
"method will be used to spawn an enemy."
msgstr ""
"これでボタンが押されたときに ``_on_button_pressed`` が呼び出されます。このメ"
"ソッドは敵をスポーンするために使用します。"
