#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "FAQ"
msgstr "자주 묻는 질문(FAQ)"

msgid "Frequently asked questions"
msgstr "자주 묻는 질문들(FAQ)"

msgid ""
"What can I do with Godot? How much does it cost? What are the license terms?"
msgstr ""
"Godot로 무엇을 할 수 있나요? 가격은 얼마인가요? 라이선스 조항은 어떻게 되나"
"요?"

msgid "In short:"
msgstr "간단히 말해서:"

msgid ""
"You are free to download and use Godot for any purpose: personal, non-"
"profit, commercial, or otherwise."
msgstr ""
"개인적, 비영리, 사업 목적으로, 그 외 어떤 이유로든지 자유롭게 Godot를 다운로"
"드하고 사용할 수 있습니다."

msgid ""
"You are free to modify, distribute, redistribute, and remix Godot to your "
"heart's content, for any reason, both non-commercially and commercially."
msgstr ""
"비상업적이든 상업적이든 어떤 이유로든 Godot를 마음대로 자유롭게 수정하고, 배"
"포하고, 재배포하고 리믹스할 수 있습니다."

msgid ""
"Logos and icons are generally under the same Creative Commons license. Note "
"that some third-party libraries included with Godot's source code may have "
"different licenses."
msgstr ""
"로고와 아이콘은 일반적으로 동일한 크리에이티브 커먼스 라이선스 하에 속합니"
"다. Godot의 소스 코드에 포함된 일부 서드 파티 라이브러리에는 다른 라이선스가 "
"적용될 수 있으므로 유의하세요."

msgid ""
"Also, see `the license page on the Godot website <https://godotengine.org/"
"license>`_."
msgstr ""
"`Godot 웹 사이트의 라이선스 페이지 <https://godotengine.org/license>`_\\ 도 "
"참고하세요."

msgid "Which platforms are supported by Godot?"
msgstr "Godot는 어떤 플랫폼을 지원하나요?"

msgid "**For the editor:**"
msgstr "**에디터:**"

msgid "Windows"
msgstr "Windows"

msgid "macOS"
msgstr "macOS"

msgid "Android (experimental)"
msgstr "Android (시험용)"

msgid "**For exporting your games:**"
msgstr "**내보내는 게임:**"

msgid "Android"
msgstr "Android"

msgid "iOS"
msgstr "iOS"

msgid "Web"
msgstr "웹"

msgid ""
"Both 32- and 64-bit binaries are supported where it makes sense, with 64 "
"being the default. Official macOS builds support Apple Silicon natively as "
"well as x86_64."
msgstr ""
"32비트와 64비트 바이너리 모두 지원되며, 64비트가 기본값입니다. 공식 macOS 빌"
"드는 x86_64 뿐만 아니라 Apple Silicon 또한 기본적으로 지원합니다."

msgid ""
"Some users also report building and using Godot successfully on ARM-based "
"systems with Linux, like the Raspberry Pi."
msgstr ""
"일부 사용자들은 Linux로 Raspberry Pi와 같은 ARM 기반 시스템에 Godot를 성공적"
"으로 빌드하고 사용했다고 말합니다."

msgid ""
"The Godot team can't provide an open source console export due to the "
"licensing terms imposed by console manufacturers. Regardless of the engine "
"you use, though, releasing games on consoles is always a lot of work. You "
"can read more about :ref:`doc_consoles`."
msgstr ""
"Godot 팀은 콘솔 제조업체의 라이선스 조건으로 인해 오픈 소스 콘솔 내보내기를 "
"제공할 수 없습니다. 그러나 사용하는 엔진과 관계없이 콘솔에서 게임을 출시하는 "
"것은 항상 많은 작업을 필요로 합니다. 이에 대해 더 자세한 내용은 여기에서 확인"
"하실 수 있습니다: :ref:`doc_consoles`."

msgid ""
"For more on this, see the sections on :ref:`exporting <toc-learn-workflow-"
"export>` and :ref:`compiling Godot yourself <toc-devel-compiling>`."
msgstr ""
"자세한 정보는 :ref:`내보내기 <toc-learn-workflow-export>`\\ 와 :ref:`Godot를 "
"직접 컴파일하기 <toc-devel-compiling>`\\ 섹션을 참고하세요."

msgid ""
"Godot 3 also had support for Universal Windows Platform (UWP). This platform "
"port was removed in Godot 4 due to lack of maintenance, and it being "
"deprecated by Microsoft. It is still available in the current stable release "
"of Godot 3 for interested users."
msgstr ""
"Godot 3는 유니버설 윈도우 플랫폼(UWP)도 지원했습니다. 이 플랫폼 포트는 유지 "
"관리 부족으로 인해 Godot 4에서 제거되었으며 Microsoft에서 더 이상 지원하지 않"
"습니다. 관심 있는 사용자를 위해 현재 안정된 Godot 3 릴리스에서 계속 사용할 "
"수 있습니다."

msgid "Which programming languages are supported in Godot?"
msgstr "Godot는 어떤 프로그래밍 언어를 지원하나요?"

msgid ""
"The officially supported languages for Godot are GDScript, C#, and C++. See "
"the subcategories for each language in the :ref:`scripting <toc-learn-"
"scripting>` section."
msgstr ""
"Godot가 공식으로 지원하는 언어는 GDScript와 C#, C++입니다. :ref:`스크립팅 "
"<toc-learn-scripting>` 섹션에서 각 언어별 하위 카테고리를 참고하세요."

msgid ""
"If you are just starting out with either Godot or game development in "
"general, GDScript is the recommended language to learn and use since it is "
"native to Godot. While scripting languages tend to be less performant than "
"lower-level languages in the long run, for prototyping, developing Minimum "
"Viable Products (MVPs), and focusing on Time-To-Market (TTM), GDScript will "
"provide a fast, friendly, and capable way of developing your games."
msgstr ""
"Godot 또는 게임 개발을 막 시작한 경우 일반적으로 Godot에서 네이티브로 동작하"
"는 GDScript를 배우고 사용하는 것을 권장합니다. 스크립트 언어는 장기적으로 다"
"른 로우 레벨 언어보다 퍼포먼스가 떨어지는 경향이 있습니다. 하지만 프로토타이"
"핑, 최소 기능 제품(MVP) 개발, 판매할 때까지 걸리는 시간(TTM)에 중점을 둔다면 "
"GDScript는 게임을 개발하는데 빠르고, 친절하고, 유능한 방법을 제공합니다."

msgid ""
"As for new languages, support is possible via third parties with "
"GDExtensions. (See the question about plugins below). Work is currently "
"underway, for example, on unofficial bindings for Godot to `Python <https://"
"github.com/touilleMan/godot-python>`_ and `Nim <https://github.com/pragmagic/"
"godot-nim>`_."
msgstr ""
"새로운 언어의 경우 GDExtension 등을 통해 지원이 가능합니다. (아래 플러그인 관"
"련 문의 사항 참고). 예를 들어 Godot와 `Python <https://github.com/touilleMan/"
"godot-python>`_\\ 및 `Nim <https://github.com/pragmagic/godot-nim>`_\\ 간의 "
"바인딩 개발이 비공식적으로 진행 중입니다."

msgid "What is GDScript and why should I use it?"
msgstr "GDScript는 무엇이고 왜 이것을 써야 하나요?"

msgid ""
"GDScript is Godot's integrated scripting language. It was built from the "
"ground up to maximize Godot's potential in the least amount of code, "
"affording both novice and expert developers alike to capitalize on Godot's "
"strengths as fast as possible. If you've ever written anything in a language "
"like Python before, then you'll feel right at home. For examples and a "
"complete overview of the power GDScript offers you, check out the :ref:"
"`GDScript scripting guide <doc_gdscript>`."
msgstr ""
"GDScript는 Godot에 내장된 스크립트 언어입니다. GDScript는 처음부터 짧은 코드"
"로도 Godot의 잠재력을 극대화할 수 있도록 만들어져 있어 초심자와 전문 개발자"
"가 Godot의 강점을 가능한 한 빨리 활용할 수 있습니다. 이전에 Python 같은 언어"
"를 사용해 보신 적이 있다면 익숙할 겁니다. GDScript 예제, 기능에 대한 전체 개"
"요, 역사는 :ref:`GDScript 스크립팅 가이드 <doc_gdscript>`\\ 를 참고하세요."

msgid ""
"There are several reasons to use GDScript, especially when you are "
"prototyping, in alpha/beta stages of your project, or are not creating the "
"next AAA title. The most salient reason is the overall **reduction of "
"complexity**."
msgstr ""
"GDScript를 사용하는 데는 여러 이유가 있습니다. 특히 프로토타입을 만들거나 프"
"로젝트가 알파/베타 수준의 단계이거나 혹은 차세대 AAA급 게임을 만드는 것이 아"
"니라면 말이죠. 하지만 GDScript를 사용하는 가장 두드러진 이유는 전체적인 **복"
"잡도 감소** 입니다."

msgid ""
"More information about getting comfortable with GDScript or dynamically "
"typed languages can be found in the :ref:`doc_gdscript_more_efficiently` "
"tutorial."
msgstr ""
"GDScript 또는 동적 타입 언어에 익숙해지려면 :ref:"
"`doc_gdscript_more_efficiently` 튜토리얼을 참고하세요."

msgid "What were the motivations behind creating GDScript?"
msgstr "GDScript를 만들게 된 동기가 무엇인가요?"

msgid ""
"In the early days, the engine used the `Lua <https://www.lua.org>`__ "
"scripting language. Lua can be fast thanks to LuaJIT, but creating bindings "
"to an object-oriented system (by using fallbacks) was complex and slow and "
"took an enormous amount of code. After some experiments with `Python "
"<https://www.python.org>`__, that also proved difficult to embed."
msgstr ""
"처음에는 `Lua <https://www.lua.org>`__ 스크립팅 언어를 사용했습니다. Lua는 빠"
"르지만 (Fallback을 사용해서) 객체 지향 시스템에 바인딩을 생성하는 일은 복잡하"
"고 느리면서도 엄청난 양의 코드가 필요했습니다. `Python <https://www.python."
"org>`__\\ 으로도 몇 번 실험해봤지만 엔진에 내장하기 어려웠습니다."

msgid ""
"The main reasons for creating a custom scripting language for Godot were:"
msgstr "Godot 전용 스크립트 언어를 개발하게 된 주요 이유는 이러합니다:"

msgid ""
"Poor threading support in most script VMs, and Godot uses threads (Lua, "
"Python, Squirrel, JavaScript, ActionScript, etc.)."
msgstr ""
"대부분의 스크립트 가상 머신(Lua, Python, Squirrel, JS, AS 등)에서는 스레드 지"
"원이 좋지 않지만 Godot는 스레드를 사용합니다."

msgid ""
"Poor class-extending support in most script VMs, and adapting to the way "
"Godot works is highly inefficient (Lua, Python, JavaScript)."
msgstr ""
"대부분의 스크립트 가상 머신은 클래스 확장 지원이 부족하고 Godot의 작동 방식"
"에 맞춰 변형하자면 너무 비효율적입니다 (Lua, Python, JS)."

msgid ""
"Garbage collector results in stalls or unnecessarily large memory usage "
"(Lua, Python, JavaScript, ActionScript, etc.)."
msgstr ""
"(Lua, Python, JavaScript, ActionScript 등의) 가비지 컬렉터는 속도 저하를 일으"
"키고 불필요하게 많은 메모리를 사용합니다."

msgid ""
"Difficulty integrating with the code editor for providing code completion, "
"live editing, etc. (all of them)."
msgstr ""
"코드 완성, 실시간 편집 등 (이 전부를) 지원하기 위한 코드 에디터 통합은 까다롭"
"습니다."

msgid "GDScript was designed to curtail the issues above, and more."
msgstr "GDScript는 위의 문제 등을 줄이기 위해 설계되었습니다."

msgid "What 3D model formats does Godot support?"
msgstr "Godot는 어떤 타입의 3D 모델 형식을 지원하나요?"

msgid ""
"You can find detailed information on supported formats, how to export them "
"from your 3D modeling software, and how to import them for Godot in the :ref:"
"`doc_importing_3d_scenes` documentation."
msgstr ""
"지원되는 형식, 3D 모델링 소프트웨어에서 내보내는 방법, Godot용으로 가져오는 "
"방법에 대한 자세한 정보는 :ref:`doc_importing_3d_scenes` 설명서에서 확인할 "
"수 있습니다."

msgid ""
"Will [insert closed SDK such as FMOD, GameWorks, etc.] be supported in Godot?"
msgstr "Godot에서 [FMOD, GameWorks 등 클로즈 SDK]가 지원될까요?"

msgid ""
"The aim of Godot is to create a free and open source MIT-licensed engine "
"that is modular and extendable. There are no plans for the core engine "
"development community to support any third-party, closed-source/proprietary "
"SDKs, as integrating with these would go against Godot's ethos."
msgstr ""
"Godot의 목표는 모듈 방식에 확장 가능한, 무료 오픈 소스 MIT 라이선스 엔진을 만"
"드는 것입니다. 핵심 엔진 개발 커뮤니티는 클로즈 소스/독점 SDK와 통합하는 것"
"은 Godot의 정신에 반하기에 이를 지원할 계획이 없습니다."

msgid ""
"To see how support for your SDK of choice could still be provided, look at "
"the Plugins question below."
msgstr "여러분이 선택한 SDK에 대한 지원은 아래 플러그인 질문을 읽어보세요."

msgid ""
"If you know of a third-party SDK that is not supported by Godot but that "
"offers free and open source integration, consider starting the integration "
"work yourself. Godot is not owned by one person; it belongs to the "
"community, and it grows along with ambitious community contributors like you."
msgstr ""
"혹시 Godot가 지원하진 않지만 무료이고 오픈 소스로 제공하는 다른 SDK를 아신다"
"면 직접 통합 작업을 시작해보세요. Godot는 한 사람의 것이 아닙니다; Godot는 "
"한 사람의 소유가 아닌 커뮤니티에 속해 있으며, 당신과 같은 야심 찬 커뮤니티 기"
"여자들과 함께 성장합니다."

msgid "How can I extend Godot?"
msgstr "어떻게 Godot를 확장할 수 있나요?"

msgid ""
"For extending Godot, like creating Godot Editor plugins or adding support "
"for additional languages, take a look at :ref:`EditorPlugins "
"<doc_making_plugins>` and tool scripts."
msgstr ""
"Godot 에디터 플러그인을 제작하거나 추가적인 언어를 지원하고 싶다면 :ref:`에디"
"터 플러그인 <doc_making_plugins>`\\ 과 툴(tool) 스크립트를 참고하세요."

msgid ""
"How do I install the Godot editor on my system (for desktop integration)?"
msgstr "어떻게 고도 에디터를 내 컴퓨터에 설치할 수 있나요?"

msgid ""
"Since you don't need to actually install Godot on your system to run it, "
"this means desktop integration is not performed automatically. There are two "
"ways to overcome this. You can install Godot from `Steam <https://store."
"steampowered.com/app/404790/Godot_Engine/>`__ (all platforms), `Scoop "
"<https://scoop.sh/>`__ (Windows), `Homebrew <https://brew.sh/>`__ (macOS) or "
"`Flathub <https://flathub.org/apps/details/org.godotengine.Godot>`__ "
"(Linux). This will automatically perform the required steps for desktop "
"integration."
msgstr ""
"Godot를 실행하기 위해 시스템에 설치할 필요가 없기 때문에 데스크톱에서 통합이 "
"자동으로 수행되지 않습니다. 이를 극복하기 위해 두 가지 방법이 있습니다. 당신"
"은 Godot을 `Steam <https://store.steampowered.com/app/404790/Godot_Engine/"
">`__ (all platforms), `Scoop <https://scoop.sh/>`__ (Windows), `Homebrew "
"<https://brew.sh/>`__ (macOS) 또는 `Flathub <https://flathub.org/apps/"
"details/org.godotengine.Godot>`__ (Linux) 을 통해 설치할 수 있습니다. 이 방법"
"들은 데스크톱 통합을 위한 과정들을 자동으로 수행할 것 입니다."

msgid ""
"Alternatively, you can manually perform the steps that an installer would do "
"for you:"
msgstr "또는 설치 프로그램이 수행하는 단계를 수동으로 수행할 수 있습니다 :"

msgid ""
"Move the Godot executable to a stable location (i.e. outside of your "
"Downloads folder), so you don't accidentally move it and break the shortcut "
"in the future."
msgstr ""
"Godot를 안정적으로 실행할 수 있는 폴더로 (예를 들어 다운로드 폴더 밖으로) 이"
"동하여 나중에 의도와 상관없이 Godot이 이동하여 Shotcut을 사용할 수 없는 경우"
"를 피하시길 바랍니다."

msgid "Right-click the Godot executable and choose **Create Shortcut**."
msgstr "Godot 실행파일을 오른쪽클릭하고 \"바로 가기\" 를 선택합니다."

msgid ""
"Drag the extracted Godot application to ``/Applications/Godot.app``, then "
"drag it to the Dock if desired. Spotlight will be able to find Godot as long "
"as it's in ``/Applications`` or ``~/Applications``."
msgstr ""
"추출한 Godot 애플리케이션을 ``/Applications/Godot.app``으로 드래그하세요, 추"
"가로 원할 경우 Dock으로도 드래그하세요. 애플리케이션이 ``/Applications`` 또"
"는 ``~/Applications``에 있다면 Spotlight에서 Godot를 찾을 수 있습니다."

msgid "Linux"
msgstr "Linux"

msgid ""
"Move the Godot binary to a stable location (i.e. outside of your Downloads "
"folder), so you don't accidentally move it and break the shortcut in the "
"future."
msgstr ""
"실수로 Godot 실행파일을 다른 경로로 옮길경우 생성된 바로가기가 깨질 수 있으"
"니 GODOT 바이너리 파일을 안정적인 위치로 (예를 들면 다운로드 폴더의 바깥으"
"로) 옮기세요."

msgid ""
"Rename and move the Godot binary to a location present in your ``PATH`` "
"environment variable. This is typically ``/usr/local/bin/godot`` or ``/usr/"
"bin/godot``. Doing this requires administrator privileges, but this also "
"allows you to :ref:`run the Godot editor from a terminal "
"<doc_command_line_tutorial>` by entering ``godot``."
msgstr ""
"Godot 실행파일을 원하는 이름으로 변경하고 `PATH` 환경변수에 있는 디렉토리로 "
"옮기세요. 일반적으로 `/usr/local/bin/godot` 또는 `/usr/bin/godot` 등의 경로"
"가 자주 사용됩니다. 이 경로들로 파일을 옮기려면 보통 시스템 관리자 권한을 요"
"구하지만, 옮길시 터미널에 `godot` 명령을 입력하므로써 Godot 를 실행할 수 있습"
"니다."

msgid ""
"If you cannot move the Godot editor binary to a protected location, you can "
"keep the binary somewhere in your home directory, and modify the ``Path=`` "
"line in the ``.desktop`` file linked below to contain the full *absolute* "
"path to the Godot binary."
msgstr ""
"Godot 편집기 바이너리를 보호된 위치로 옮길 수 없다면, 바이너리를 홈 디렉토리 "
"어딘가에 보관하고, 아래 링크된 ``.desktop`` 파일의 ``Path=`` 줄을 수정하여 "
"Godot 바이너리에 대한 전체 *절대* 경로를 포함할 수 있습니다."

msgid ""
"Save `this .desktop file <https://raw.githubusercontent.com/godotengine/"
"godot/master/misc/dist/linux/org.godotengine.Godot.desktop>`__ to ``$HOME/."
"local/share/applications/``. If you have administrator privileges, you can "
"also save the ``.desktop`` file to ``/usr/local/share/applications`` to make "
"the shortcut available for all users."
msgstr ""
"`이 데스크탑 파일을 <https://raw.githubusercontent.com/godotengine/godot/3.x/"
"misc/dist/linux/org.godotengine.Godot.desktop>`__ ``$HOME/.local/share/"
"applications/`` 에 저장하세요. 만약 관리자 권한이 있다면, 이 ``.desktop`` 파"
"일을 ``/usr/local/share/applications`` 에 저장하여 모든 사용자들이 접근할 수 "
"있는 바로 가기를 만들 수 있습니다."

msgid "Is the Godot editor a portable application?"
msgstr "고도 에디터는 포터블 어플리케이션인가요?"

msgid ""
"In its default configuration, Godot is *semi-portable*. Its executable can "
"run from any location (including non-writable locations) and never requires "
"administrator privileges."
msgstr ""
"Godot는 기본 설정으로 *세미-포터블*입니다. Godot의 실행파일은(쓰기 불가능한 "
"위치를 포함한) 모든 위치에서 실행 가능하며 관리자 권한이 필요하지 않습니다."

msgid ""
"However, configuration files will be written to the user-wide configuration "
"or data directory. This is usually a good approach, but this means "
"configuration files will not carry across machines if you copy the folder "
"containing the Godot executable. See :ref:`doc_data_paths` for more "
"information."
msgstr ""
"하지만, 설정 파일은 사용자의 설정 또는 데이터 디렉토리에 기록됩니다. 이는 일"
"반적으로 좋은 방식이지만, Godot 실행 파일이 포함된 폴더를 복사하는 경우 설정 "
"파일이 시스템 간에 전달되지 않습니다. 자세한 정보는 :ref:`doc_data_paths`를 "
"참조하세요."

msgid ""
"Godot aims for cross-platform compatibility and open standards first and "
"foremost. OpenGL and Vulkan are the technologies that are both open and "
"available on (nearly) all platforms. Thanks to this design decision, a "
"project developed with Godot on Windows will run out of the box on Linux, "
"macOS, and more."
msgstr ""
"Godot는 무엇보다도 플랫폼 간 호환성과 개방형 표준을 목표로 합니다. OpenGL과 "
"Vulkan은 개방적이고 (거의) 모든 플랫폼에서 사용할 수 있는 기술입니다. 이 디자"
"인 결정 덕분에 Windows에서 Godot로 개발된 프로젝트는 Linux, macOS 등에서 즉"
"시 실행됩니다."

msgid ""
"While Vulkan and OpenGL remain our primary focus for their open standard and "
"cross-platform benefits, Godot 4.3 introduced experimental support for "
"Direct3D 12. This addition aims to enhance performance and compatibility on "
"platforms where Direct3D 12 is prevalent, such as Windows and Xbox. However, "
"Vulkan and OpenGL will continue as the default rendering backends on all "
"platforms, including Windows."
msgstr ""
"Vulkan과 OpenGL이 여전히 개방형 표준 및 크로스 플랫폼 이점으로 인해 주요 초점"
"이지만, Godot 4.3에서는 Direct3D 12에 대한 실험적 지원이 도입되었습니다. 이 "
"추가 기능은 Windows와 Xbox와 같이 Direct3D 12가 널리 사용되는 플랫폼에서 성능"
"과 호환성을 향상시키기 위해 설계되었습니다. 그러나 Vulkan과 OpenGL은 Windows"
"를 포함한 모든 플랫폼에서 기본 렌더링 백엔드로 계속 사용될 것입니다."

msgid "Why does Godot aim to keep its core feature set small?"
msgstr "왜 Godot는 주요 기능을 작게 유지하려고 하나요?"

msgid ""
"Godot intentionally does not include features that can be implemented by add-"
"ons unless they are used very often. One example of something not used often "
"is advanced artificial intelligence functionality."
msgstr ""
"Godot는 매우 자주 쓰이지 않는 이상 add-on으로 구현할 수 있는 기능들은 의도적"
"으로 포함하지 않습니다. 고급 인공 지능 같은 것이 그 예입니다."

msgid "There are several reasons for this:"
msgstr "이렇게 하려는 이유가 몇 가지 있습니다:"

msgid ""
"**Ease of contribution.** By keeping the codebase small and tidy, it can "
"remain fast and easy to compile from source. This makes it easier for new "
"contributors to get started with Godot, without requiring them to purchase "
"high-end hardware."
msgstr ""
"**기여의 편의성.** 코드 베이스를 작고 깨끗하게 유지해서 전체 소스를 빠르고 쉽"
"게 컴파일할 수 있습니다. 새로운 기여자들이 비싼 하드웨어 없이도 Godot를 쉽게 "
"시작할 수 있습니다."

msgid ""
"**Keeping the binary size small for the editor.** Not everyone has a fast "
"Internet connection. Ensuring that everyone can download the Godot editor, "
"extract it and run it in less than 5 minutes makes Godot more accessible to "
"developers in all countries."
msgstr ""
"**에디터의 바이너리 크기를 작게 유지하기.** 모두의 인터넷 회선이 빠르지는 않"
"습니다. 아무라도 Godot 에디터를 5분 안에 내려받고, 압축을 풀고, 실행할 수 있"
"게 한다면, 전 세계의 개발자들이 더 쉽게 Godot에 접근할 것입니다."

msgid ""
"For all the reasons above, we have to be selective of what we can accept as "
"core functionality in Godot. This is why we are aiming to move some core "
"functionality to officially supported add-ons in future versions of Godot. "
"In terms of binary size, this also has the advantage of making you pay only "
"for what you actually use in your project. (In the meantime, you can :ref:"
"`compile custom export templates with unused features disabled "
"<doc_optimizing_for_size>` to optimize the distribution size of your "
"project.)"
msgstr ""
"위와 같은 이유로 어떤 것을 Godot의 핵심 기능으로 넣을지 선택해야만 합니다. 이"
"것이 저희가 일부 핵심 기능을 미래의 Godot 버전에서 공식 지원 add-on으로 만들"
"려는 이유입니다. 바이너리 크기 측면에서 프로젝트에 실제 사용하는 것만을 포함"
"하는 장점이 있습니다. (그동안 프로젝트의 배포 크기를 최적화하기 위해 :ref:`사"
"용하지 않는 기능을 비활성화해서 커스텀 내보내기 템플릿을 컴파일 "
"<doc_optimizing_for_size>`\\ 할 수 있습니다.)"

msgid ""
"How should assets be created to handle multiple resolutions and aspect "
"ratios?"
msgstr "다양한 해상도와 화면 비율에 맞는 애셋을 어떻게 만드나요?"

msgid ""
"This question pops up often and it's probably thanks to the misunderstanding "
"created by Apple when they originally doubled the resolution of their "
"devices. It made people think that having the same assets in different "
"resolutions was a good idea, so many continued towards that path. That "
"originally worked to a point and only for Apple devices, but then several "
"Android and Apple devices with different resolutions and aspect ratios were "
"created, with a very wide range of sizes and DPIs."
msgstr ""
"이런 고민은 아마도 Apple 사가 언젠가 자사 제품의 해상도를 두 배로 늘렸을 때 "
"생긴 오해 때문일 겁니다. 이 때문에 사람들은 다양한 해상도에서 동일한 애셋을 "
"보여주는 것이 좋은 아이디어라 생각했습니다. 그런데 이런 통념은 짧은 기간 "
"Apple 제품에 한에서는 적용됐지만, 얼마 지나지 않아 다양한 해상도와 화면 비"
"율, DPI의 Android 기기들과 Apple 기기들이 시장에 출시되면서 이제는 불필요해졌"
"습니다."

msgid ""
"Determine a minimum resolution and then decide if you want your game to "
"stretch vertically or horizontally for different aspect ratios, or if there "
"is one aspect ratio and you want black bars to appear instead. This is also "
"explained in :ref:`doc_multiple_resolutions`."
msgstr ""
"최소 해상도를 정한 다음, 게임의 화면을 다른 화면 비율에 맞게 수직이나 수평으"
"로 늘일지 또는 한 화면 비율만 사용하고 남은 공간을 검은 여백으로 처리할지 결"
"정하세요. 이는 :ref:`doc_multiple_resolutions`\\ 에서 설명합니다."

msgid ""
"For user interfaces, use the :ref:`anchoring <doc_size_and_anchors>` to "
"determine where controls should stay and move. If UIs are more complex, "
"consider learning about Containers."
msgstr ""
"유저 인터페이스에 대해서는 :ref:`앵커 <doc_size_and_anchors>`\\ 를 사용해서 "
"Control이 이동하거나 정지해야 할 위치를 결정하세요. UI가 더 복잡하다면 "
"Container 사용을 고려해보세요."

msgid "And that's it! Your game should work in multiple resolutions."
msgstr "다 됐습니다! 여러분의 게임은 이제 다양한 해상도에서 작동합니다."

msgid "When is the next release of Godot out?"
msgstr "Godot의 다음 릴리스는 언제인가요?"

msgid ""
"When it's ready! See :ref:`doc_release_policy_when_is_next_release_out` for "
"more information."
msgstr ""
"준비가 된다면요! 자세한 설명은 :ref:"
"`doc_release_policy_when_is_next_release_out`\\ 를 참고하세요."

msgid ""
"We recommend using Godot 4.x for new projects, but depending on the feature "
"set you need, it may be better to use 3.x instead. See :ref:"
"`doc_release_policy_which_version_should_i_use` for more information."
msgstr ""
"새 프로젝트에는 Godot 4.x를 사용하는 것이 좋지만, 필요한 기능 세트에 따라 3.x"
"를 사용하는 것이 더 나을 수도 있습니다. 자세한 내용은 :ref:"
"`doc_release_policy_should_i_upgrade_my_project`를 참조하세요."

msgid "Should I upgrade my project to use new Godot versions?"
msgstr "새 Godot 버전을 사용하려면 프로젝트를 업그레이드해야 하나요?"

msgid ""
"Some new versions are safer to upgrade to than others. In general, whether "
"you should upgrade depends on your project's circumstances. See :ref:"
"`doc_release_policy_should_i_upgrade_my_project` for more information."
msgstr ""
"일부 새 버전은 다른 버전보다 업그레이드하는 것이 더 안전합니다. 일반적으로 업"
"그레이드 여부는 프로젝트의 상황에 따라 달라집니다. 자세한 내용은 :ref:"
"`doc_release_policy_should_i_upgrade_my_project`를 참조하세요."

msgid "I would like to contribute! How can I get started?"
msgstr "저도 기여하고 싶어요! 어떻게 시작해야 하나요?"

msgid ""
"The best way to start contributing to Godot is by using it and reporting any "
"`issues <https://github.com/godotengine/godot/issues>`_ that you might "
"experience. A good bug report with clear reproduction steps helps your "
"fellow contributors fix bugs quickly and efficiently. You can also report "
"issues you find in the `online documentation <https://github.com/godotengine/"
"godot-docs/issues>`_."
msgstr ""
"Godot에 기여를 시작하는 가장 좋은 방법은 Godot을 사용하면서 발생하는 `문제 "
"<https://github.com/godotengine/godot/issues>`_를 보고하는 것입니다. 명확한 "
"재현 단계가 포함된 좋은 버그 리포트는 기여자들이 버그를 빠르고 효율적으로 수"
"정하는 데 도움이 됩니다. 또한 `온라인 문서 <https://github.com/godotengine/"
"godot-docs/issues>`_에서 발견한 문제를 보고할 수도 있습니다."

msgid ""
"We explain how to work with the engine source, how to edit the "
"documentation, and what other ways to contribute are there in our :ref:"
"`documentation for contributors <doc_ways_to_contribute>`."
msgstr ""
"엔진 소스 작업 방법, 문서 편집 방법 및 기여 방법에 대한 설명은 :ref:`기여자"
"를 위한 문서 <doc_ways_to_contribute>`에 수록되어 있습니다."

msgid "I have a great idea for Godot. How can I share it?"
msgstr "Godot에 대한 좋은 아이디어가 있습니다. 어떻게 이것을 공유할 수 있나요?"

msgid "Is it possible to use Godot to create non-game applications?"
msgstr "Godot를 게임이 아닌 응용프로그램 제작에 이용할 수 있을까요?"

msgid ""
"Yes! Godot features an extensive built-in UI system, and its small "
"distribution size can make it a suitable alternative to frameworks like "
"Electron or Qt."
msgstr ""
"네! Godot는 광범위한 내장 UI 시스템을 갖추고 있고 Godot의 작은 배포 크기는 "
"Electron, Qt와 같은 프레임 워크의 적절한 대안이 될 수 있습니다."

msgid ""
"When creating a non-game application, make sure to enable :ref:`low-"
"processor mode <class_ProjectSettings_property_application/run/"
"low_processor_mode>` in the Project Settings to decrease CPU and GPU usage."
msgstr ""
"게임이 아닌 응용 프로그램을 제작할 때는 CPU와 GPU 사용률을 줄이기 위해 반드"
"시 프로젝트 설정에서 :ref:`low-processor mode "
"<class_ProjectSettings_property_application/run/low_processor_mode>`\\ 를 활"
"성화해주세요."

msgid ""
"Check out `Material Maker <https://github.com/RodZill4/material-maker>`__ "
"and `Pixelorama <https://github.com/Orama-Interactive/Pixelorama>`__ for "
"examples of open source applications made with Godot."
msgstr ""
"Godot로 만든 오픈소스 예제 애플리케이션 `Material Maker <https://github.com/"
"RodZill4/material-maker>`__\\ 와 `Pixelorama <https://github.com/Orama-"
"Interactive/Pixelorama>`__\\ 를 확인해보세요."

msgid "Is it possible to use Godot as a library?"
msgstr "Godot를 라이브러리로 이용할 수 있을까요?"

msgid ""
"Godot is meant to be used with its editor. We recommend you give it a try, "
"as it will most likely save you time in the long term. There are no plans to "
"make Godot usable as a library, as it would make the rest of the engine more "
"convoluted and difficult to use for casual users."
msgstr ""
"Godot는 에디터와 함께 사용하게 되어 있습니다. 길게 보면 시간을 절약할 수 있으"
"므로 에디터를 사용하는 게 좋습니다. Godot를 라이브러리로 이용할 수 있도록 만"
"들면 엔진의 다른 부분이 더 복잡해지고 숙달되지 않은 사용자들이 쓰기 어려워지"
"기 때문에 그럴 계획은 없습니다."

msgid ""
"If you want to use a rendering library, look into using an established "
"rendering engine instead. Keep in mind rendering engines usually have "
"smaller communities compared to Godot. This will make it more difficult to "
"find answers to your questions."
msgstr ""
"만약 렌더링 라이브러리를 원하신다면, 대신 기존 렌더링 엔진 사용을 고려해보세"
"요. 대부분의 렌더링 엔진 커뮤니티는 Godot보다 작다는 점을 명심하세요. 이 때문"
"에 질문에 대한 답을 찾기는 더 어려울 것입니다."

msgid "What user interface toolkit does Godot use?"
msgstr "Godot는 어떤 유저 인터페이스 툴킷을 사용하나요?"

msgid ""
"Godot does not use a standard :abbr:`GUI (Graphical User Interface)` toolkit "
"like GTK, Qt or wxWidgets. Instead, Godot uses its own user interface "
"toolkit, rendered using OpenGL ES or Vulkan. This toolkit is exposed in the "
"form of Control nodes, which are used to render the editor (which is written "
"in C++). These Control nodes can also be used in projects from any scripting "
"language supported by Godot."
msgstr ""
"Godot는 GTK나 Qt, wxWidgets와 같은 표준 :abbr:`GUI (Graphical User "
"Interface)` 툴킷을 사용하지 않는 대신 OpenGL ES나 Vulcan으로 렌더링하는 자체 "
"유저 인터페이스 툴킷을 사용합니다. 이 툴킷은 (C++로 작성된) 에디터를 렌더링"
"할 때 사용되는 컨트롤 노드의 형태로 노출되어 있습니다. 물론 이 컨트롤 노드들"
"은 Godot가 지원하는 어느 스크립트 언어로든지 사용할 수 있습니다."

msgid ""
"This custom toolkit makes it possible to benefit from hardware acceleration "
"and have a consistent appearance across all platforms. On top of that, it "
"doesn't have to deal with the LGPL licensing caveats that come with GTK or "
"Qt. Lastly, this means Godot is \"eating its own dog food\" since the editor "
"itself is one of the most complex users of Godot's UI system."
msgstr ""
"이 자체 툴킷 덕분에 하드웨어 가속의 이점을 누릴 수 있고 모든 플랫폼을 아울러 "
"일정한 외관을 유지할 수 있습니다. 그에 더해 GTK나 Qt에 붙어 있는 LGPL 라이센"
"스 조건을 신경 쓸 필요도 없습니다. 마지막으로 에디터 자체가 Godot UI 시스템"
"의 가장 복잡한 사용자 중 하나이기 때문에 Godot는 `개밥 먹기(eating its own "
"dog food) <https://en.wikipedia.org/wiki/Eating_your_own_dog_food>`__\\ 를 하"
"는 것이기도 합니다."

msgid ""
"This custom UI toolkit :ref:`can't be used as a library "
"<doc_faq_use_godot_as_library>`, but you can still :ref:`use Godot to create "
"non-game applications by using the editor <doc_faq_non_game_applications>`."
msgstr ""
"이 자체 UI 툴킷은 :ref:`라이브러리로 사용할 수 없지만 "
"<doc_faq_use_godot_as_library>`, :ref:`에디터를 이용하여 Godot로 비게임 애플"
"리케이션을 만들 수는 있습니다 <doc_faq_non_game_applications>`."

msgid "Why does Godot use the SCons build system?"
msgstr "왜 Godot는 SCons 빌드 시스템을 사용하지 않나요?"

msgid ""
"Godot uses the `SCons <https://www.scons.org/>`__ build system. There are no "
"plans to switch to a different build system in the near future. There are "
"many reasons why we have chosen SCons over other alternatives. For example:"
msgstr ""
"Godot은 `SCons <https://www.scons.org/>`__ 빌드 시스템을 사용합니다. 가까운 "
"시일 내에 다른 빌드 시스템으로 전환할 계획은 없습니다. 다른 대안 대신 SCons"
"를 선택한 데에는 여러 가지 이유가 있습니다. 예를 들어:"

msgid ""
"Godot can be compiled for a dozen different platforms: all PC platforms, all "
"mobile platforms, many consoles, and WebAssembly."
msgstr ""
"Godot는 모든 PC 플랫폼, 모든 모바일 플랫폼, 여러 콘솔, WebAssembly 등 12개의 "
"다양한 플랫폼에서 컴파일할 수 있습니다."

msgid ""
"Developers often need to compile for several of the platforms **at the same "
"time**, or even different targets of the same platform. They can't afford "
"reconfiguring and rebuilding the project each time. SCons can do this with "
"no sweat, without breaking the builds."
msgstr ""
"개발자는 여러 플랫폼을 동시에 컴파일해야 하거나, 심지어 같은 플랫폼의 다른 타"
"깃을 컴파일해야 하는 경우가 많습니다. 매번 프로젝트를 재구성하고 다시 빌드할 "
"여유가 없습니다. SCon을 사용하면 빌드를 중단하지 않고도 이 작업을 손쉽게 수행"
"할 수 있습니다."

msgid ""
"SCons will *never* break a build no matter how many changes, configurations, "
"additions, removals etc."
msgstr ""
"SCon은 아무리 많은 변경, 구성, 추가, 제거 등을 해도 빌드를 *절대* 깨뜨리지 않"
"습니다."

msgid ""
"Godot's build process is not simple. Several files are generated by code "
"(binders), others are parsed (shaders), and others need to offer "
"customization (:ref:`modules <doc_custom_modules_in_cpp>`). This requires "
"complex logic which is easier to write in an actual programming language "
"(like Python) rather than using a mostly macro-based language only meant for "
"building."
msgstr ""
"Godot의 빌드 프로세스는 간단하지 않습니다. 여러 파일이 코드(바인더)로 생성되"
"고, 다른 파일은 파싱(셰이더)되며, 다른 파일은 커스터마이징을 제공해야 합니다"
"(:ref:`modules <doc_custom_modules_in_cpp>`). 이를 위해서는 복잡한 로직이 필"
"요한데, 대부분 빌드 전용 매크로 기반 언어를 사용하는 것보다 실제 프로그래밍 "
"언어(예: Python)로 작성하는 것이 더 쉽습니다."

msgid ""
"Please try to keep an open mind and get at least a little familiar with "
"SCons if you are planning to build Godot yourself."
msgstr ""
"Godot을 직접 만들 계획이라면 열린 마음을 가지고 SCons에 대해 조금이라도 익숙"
"해지도록 노력하세요."

msgid "Why does Godot not use STL (Standard Template Library)?"
msgstr ""
"Godot는 왜 표준 템플릿 라이브러리(STL: Standard Template Library)를 사용하지 "
"않나요?"

msgid ""
"Like many other libraries (Qt as an example), Godot does not make use of STL "
"(with a few exceptions such as threading primitives). We believe STL is a "
"great general-purpose library, but we had special requirements for Godot."
msgstr ""
"스레딩 관리와 같은 몇 가지 예외를 제외하면 Qt와 같은 다른 많은 라이브러리처"
"럼 Godot는 STL을 사용하지 않습니다. 우리는 STL이 훌륭한 범용 라이브러리라고 "
"생각하지만, Godot에 특별한 요구 사항이 있었습니다."

msgid ""
"STL templates create very large symbols, which results in huge debug "
"binaries. We use few templates with very short names instead."
msgstr ""
"STL 템플릿은 매우 큰 심볼들을 만들어서, 결과적으로 거대한 디버그 바이너리를 "
"만듭니다. 대신 Godot는 매우 짧은 이름의 템플릿을 조금만 사용합니다."

msgid ""
"Most of our containers cater to special needs, like Vector, which uses copy "
"on write and we use to pass data around, or the RID system, which requires "
"O(1) access time for performance. Likewise, our hash map implementations are "
"designed to integrate seamlessly with internal engine types."
msgstr ""
"Copy-On-Write를 사용하고 데이터를 전달하기 위해 사용하는, 벡터와 같은 대부분"
"의 컨테이너는, 성능을 위해 O(1) 접근 시간이 필요한 RID 시스템과 같은 특수 목"
"적에 맞춰졌습니다. 이와 비슷하게 Godot 해시 맵은 내부 엔진 유형과 부드럽게 통"
"합하도록 설계 및 구현되었습니다."

msgid ""
"Our containers have memory tracking built-in, which helps better track "
"memory usage."
msgstr ""
"Godot 컨테이너에는 메모리 추적 기능이 내장돼 있어서, 메모리 사용량을 더 잘 추"
"적합니다."

msgid ""
"For large arrays, we use pooled memory, which can be mapped to either a "
"preallocated buffer or virtual memory."
msgstr ""
"Godot에서 큰 배열은 사전에 할당된 버퍼 메모리 혹은 가상 메모리에 매핑되는 메"
"모리 풀(Pool)을 사용합니다."

msgid ""
"We use our custom String type, as the one provided by STL is too basic and "
"lacks proper internationalization support."
msgstr ""
"STL에서 제공하는 문자열 타입은 너무 단순하고 현지화 지원 기능이 부족하기 때문"
"에 Godot는 커스텀 문자열 타입을 사용합니다."

msgid "Why does Godot not use exceptions?"
msgstr "왜 Godot는 예외(Exception)를 사용하지 않나요?"

msgid ""
"We believe games should not crash, no matter what. If an unexpected "
"situation happens, Godot will print an error (which can be traced even to "
"script), but then it will try to recover as gracefully as possible and keep "
"going."
msgstr ""
"우리는 게임이 어떤 경우에도 고장나지 않아야 한다고 생각합니다. 예기치 못한 사"
"태가 벌어지면, Godot는 (스크립트에서 추적할 수 있는) 오류를 작성한 다음, 가능"
"한 한 정상적으로 게임을 복구한 후 계속 진행합니다."

msgid ""
"Additionally, exceptions significantly increase the binary size for the "
"executable and result in increased compile times."
msgstr ""
"또한 예외는 실행 파일의 크기를 늘리고 결과적으로 컴파일 시간이 늘어납니다."

msgid "Does Godot use an ECS (Entity Component System)?"
msgstr "왜 고도는 ECS (Entity Component System)를 사용하나요?"

msgid ""
"Godot does **not** use an ECS and relies on inheritance instead. While there "
"is no universally better approach, we found that using an inheritance-based "
"approach resulted in better usability while still being fast enough for most "
"use cases."
msgstr ""
"고도는 ECS를 사용하지 않고 대신에 상속에 의존합니다. 일반적으로 더 좋은 접근 "
"방식이 없는 한 우리는 상속 기반 접근 방식을 사용하면 대부분의 사용 사례에서 "
"충분히 빠르면서도 사용성이 향상된다는 사실을 발견했습니다."

msgid ""
"That said, nothing prevents you from making use of composition in your "
"project by creating child Nodes with individual scripts. These nodes can "
"then be added and removed at run-time to dynamically add and remove "
"behaviors."
msgstr ""
"그렇다고 해도, 개별 스크립트를 가진 자식 노드를 생성하여 프로젝트에서 구성"
"(composition)을 사용하는 데 아무런 제약이 없습니다. 이러한 노드는 런타임에 추"
"가 및 제거하여 동적으로 동작을 추가하고 제거할 수 있습니다."

msgid ""
"More information about Godot's design choices can be found in `this article "
"<https://godotengine.org/article/why-isnt-godot-ecs-based-game-engine>`__."
msgstr ""
"Godot의 설계 선택에 대한 자세한 내용은 `이 글 <https://godotengine.org/"
"article/why-isnt-godot-ecs-based-game-engine>`__ 에서 확인할 수 있습니다."

msgid ""
"The vast majority of games do not need this and Godot provides handy helpers "
"to do the job for most cases when you do."
msgstr ""
"대다수의 게임은 DoD가 필요하지 않고 Godot는 DoD가 필요한 대부분의 경우에 작업"
"을 수행할 수 있는 편리한 도우미를 제공합니다."

msgid ""
"If a game needs to process such a large amount of objects, our "
"recommendation is to use C++ and GDExtensions for performance-heavy tasks "
"and GDScript (or C#) for the rest of the game."
msgstr ""
"게임이 정말로 많은 양의 객체를 처리해야 한다면 높은 성능이 필요한 부분은 C+"
"+과 GDExtension을 사용하고 그 외 나머지 부분은 GDScript (혹은 C#)을 사용하길 "
"권합니다."

msgid "How can I support Godot development or contribute?"
msgstr "어떻게 Godot 개발을 돕거나 후원할 수 있나요?"

msgid "See :ref:`doc_ways_to_contribute`."
msgstr ":ref:`doc_ways_to_contribute`\\ 를 참고하세요."

msgid "Who is working on Godot? How can I contact you?"
msgstr "Godot는 누가 만드나요? 어떻게 연락할 수 있나요?"

msgid ""
"See the corresponding page on the `Godot website <https://godotengine.org/"
"contact>`_."
msgstr ""
"`Godot 웹사이트 <https://godotengine.org/contact>`_\\ 에서 해당 페이지를 참고"
"하세요."

msgid "Translation status"
msgstr "번역 상태"
