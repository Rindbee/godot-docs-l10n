#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid ""
"In the next two lessons, we will design the player scene, register custom "
"input actions, and code player movement. By the end, you'll have a playable "
"character that moves in eight directions."
msgstr ""
"다음 두 레슨에서는 플레이어 씬을 디자인하고, 커스텀 입력 동작을 등록하고, 플"
"레이어 이동 코드를 작성할 것입니다. 이 과정이 끝나면 여덟 방향으로 움직이는 "
"플레이어 캐릭터가 완성될 것입니다."

msgid ""
"Create a new scene by going to the Scene menu in the top-left and clicking "
"*New Scene*."
msgstr ""
"상단 왼쪽의 Scene 메뉴로 이동하여 *New Scene*을 클릭하여 새 씬을 만듭니다."

msgid "|image0|"
msgstr "|image0|"

msgid "image0"
msgstr "image0"

msgid ""
"Create a :ref:`CharacterBody3D <class_CharacterBody3D>` node as the root"
msgstr ""
"루트 노드로 :ref:`CharacterBody3D <class_CharacterBody3D>` 노드를 생성합니다"

msgid ""
"Name the :ref:`CharacterBody3D <class_CharacterBody3D>` to ``Player``. "
"Character bodies are complementary to the area and rigid bodies used in the "
"2D game tutorial. Like rigid bodies, they can move and collide with the "
"environment, but instead of being controlled by the physics engine, **you** "
"dictate their movement. You will see how we use the node's unique features "
"when we code the jump and squash mechanics."
msgstr ""
":ref:`CharacterBody3D <class_CharacterBody3D>`의 이름을 ``Player``로 지정합니"
"다. 캐릭터 바디는 2D 게임 튜토리얼에서 사용된 영역 및 리지드 바디와 상호 보완"
"적입니다. 리지드 바디처럼 움직이고 환경과 충돌할 수 있지만, 물리 엔진이 아닌 "
"**사용자**가 그 움직임을 제어합니다. 점프와 스쿼시 메커니즘을 코딩할 때 이 노"
"드의 독특한 기능을 어떻게 사용하는지 보게 될 것입니다."

msgid ""
"For now, we're going to create a basic rig for our character's 3D model. "
"This will allow us to rotate the model later via code while it plays an "
"animation."
msgstr ""
"지금은 캐릭터의 3D 모델을 위한 기본 리그를 만들겠습니다. 이렇게 하면 애니메이"
"션을 재생하는 동안 코드를 통해 모델을 회전시킬 수 있습니다."

msgid ""
"Add a :ref:`Node3D <class_Node3D>` node as a child of ``Player`` and name it "
"``Pivot``"
msgstr ""
"``Player`` 의 자식 노드로 :ref:`Node3D <class_Node3D>` 노드를 추가하고 이름"
"을 ``Pivot`` 으로 지정합니다"

msgid ""
"Then, in the FileSystem dock, expand the ``art/`` folder by double-clicking "
"it and drag and drop ``player.glb`` onto ``Pivot``."
msgstr ""
"그런 다음, FileSystem 도크에서 ``art/`` 폴더를 더블 클릭하여 확장하고 "
"``player.glb`` 파일을 ``Pivot`` 위로 드래그 앤 드롭합니다."

msgid "|image1|"
msgstr "|image1|"

msgid "image1"
msgstr "image1"

msgid ""
"This should instantiate the model as a child of ``Pivot``. You can rename it "
"to ``Character``."
msgstr ""
"이렇게 하면 모델이 ``Pivot`` 의 자식으로 인스턴스화됩니다. 이름을 "
"``Character`` 로 변경할 수 있습니다."

msgid "|image2|"
msgstr "|image2|"

msgid "image2"
msgstr "image2"

msgid ""
"As with all kinds of physics nodes, we need a collision shape for our "
"character to collide with the environment. Select the ``Player`` node again "
"and add a child node :ref:`CollisionShape3D <class_CollisionShape3D>`. In "
"the *Inspector*, on the *Shape* property, add a new :ref:`SphereShape3D "
"<class_SphereShape3D>`."
msgstr ""
"모든 종류의 물리 노드와 마찬가지로, 캐릭터가 환경과 충돌할 수 있도록 충돌 모"
"양이 필요합니다. 다시 ``Player`` 노드를 선택하고 자식 노드로 :ref:"
"`CollisionShape3D <class_CollisionShape3D>`를 추가합니다. *Inspector*에서 "
"*Shape* 속성에 새로운 :ref:`SphereShape3D <class_SphereShape3D>`를 추가합니"
"다."

msgid "The sphere's wireframe appears below the character."
msgstr "구의 와이어프레임이 캐릭터 아래에 나타납니다."

msgid "|image3|"
msgstr "|image3|"

msgid "image3"
msgstr "image3"

msgid ""
"It will be the shape the physics engine uses to collide with the "
"environment, so we want it to better fit the 3D model. Make it a bit larger "
"by dragging the orange dot in the viewport. My sphere has a radius of about "
"``0.8`` meters."
msgstr ""
"이 구는 물리 엔진이 환경과 충돌하는 데 사용하는 모양이므로, 3D 모델에 더 잘 "
"맞도록 조정할 필요가 있습니다. 뷰포트에서 주황색 점을 드래그하여 조금 더 크"
"게 만듭니다. 제 구는 반경이 약 ``0.8`` 미터입니다."

msgid ""
"Then, move the collision shape up so its bottom roughly aligns with the "
"grid's plane."
msgstr ""
"그런 다음, 충돌 모양을 위로 이동하여 바닥이 격자 평면과 대략적으로 맞추도록 "
"합니다."

msgid "|image4|"
msgstr "|image4|"

msgid "image4"
msgstr "image4"

msgid ""
"To make moving the shape easier, you can toggle the model's visibility by "
"clicking the eye icon next to the ``Character`` or the ``Pivot`` nodes."
msgstr ""
"모양을 이동하기 쉽게 만들기 위해, ``Character`` 또는 ``Pivot`` 노드 옆의 눈 "
"아이콘을 클릭하여 모델의 가시성을 전환할 수 있습니다."

msgid "|image5|"
msgstr "|image5|"

msgid "image5"
msgstr "image5"

msgid ""
"With the nodes ready, we can almost get coding. But first, we need to define "
"some input actions."
msgstr ""
"노드가 준비되었으므로 거의 코딩을 시작할 수 있습니다. 하지만 먼저 몇 가지 입"
"력 동작을 정의해야 합니다."

msgid ""
"To move the character, we will listen to the player's input, like pressing "
"the arrow keys. In Godot, while we could write all the key bindings in code, "
"there's a powerful system that allows you to assign a label to a set of keys "
"and buttons. This simplifies our scripts and makes them more readable."
msgstr ""
"캐릭터를 움직이기 위해 플레이어의 입력, 예를 들어 화살표 키를 누르는 것을 감"
"지할 것입니다. Godot에서는 모든 키 바인딩을 코드로 작성할 수 있지만, 키와 버"
"튼 세트에 레이블을 할당할 수 있는 강력한 시스템이 있습니다. 이는 스크립트를 "
"단순화하고 더 읽기 쉽게 만듭니다."

msgid ""
"This system is the Input Map. To access its editor, head to the *Project* "
"menu and select *Project Settings*."
msgstr ""
"이 시스템은 입력 맵(Input Map)입니다. 해당 편집기에 접근하려면 *Project* 메뉴"
"로 이동하여 *Project Settings*를 선택합니다."

msgid ""
"At the top, there are multiple tabs. Click on *Input Map*. This window "
"allows you to add new actions at the top; they are your labels. In the "
"bottom part, you can bind keys to these actions."
msgstr ""
"상단에 여러 탭이 있습니다. *Input Map*을 클릭하세요. 이 창에서는 상단에 새로"
"운 동작을 추가할 수 있습니다. 이들은 레이블입니다. 하단 부분에서는 이 동작에 "
"키를 바인딩할 수 있습니다."

msgid "|image7|"
msgstr "|image7|"

msgid ""
"Godot projects come with some predefined actions designed for user interface "
"design (see above screenshot). These will become visible if you enable the "
"*Show Built-in Actions* toggle. We could use these here, but instead we're "
"defining our own to support gamepads. Leave *Show Built-in Actions* disabled."
msgstr ""
"Godot 프로젝트에는 사용자 인터페이스 디자인을 위해 설계된 몇 가지 사전 정의"
"된 동작이 포함되어 있습니다(위의 스크린샷 참조). *Show Built-in Actions* 토글"
"을 활성화하면 이러한 동작이 표시됩니다. 여기서 이것들을 사용할 수도 있지만, "
"대신 게임패드를 지원하기 위해 자체 동작을 정의하겠습니다. *Show Built-in "
"Actions* 는 비활성화된 상태로 두세요."

msgid ""
"We're going to name our actions ``move_left``, ``move_right``, "
"``move_forward``, ``move_back``, and ``jump``."
msgstr ""
"동작의 이름을 ``move_left``, ``move_right``, ``move_forward``, "
"``move_back``, 그리고 ``jump`` 로 지정하겠습니다."

msgid "To add an action, write its name in the bar at the top and press Enter."
msgstr "동작을 추가하려면 상단의 입력란에 이름을 작성하고 Enter 키를 누릅니다."

msgid "|image8|"
msgstr "|image8|"

msgid "|image9|"
msgstr "|image9|"

msgid ""
"To bind a key or button to an action, click the \"+\" button to its right. "
"Do this for ``move_left``. Press the left arrow key and click *OK*."
msgstr ""
"동작에 키나 버튼을 바인딩하려면 해당 동작 오른쪽의 \"+\" 버튼을 클릭합니다. "
"``move_left`` 에 대해 이 작업을 수행합니다. 왼쪽 화살표 키를 누르고 *OK* 를 "
"클릭합니다."

msgid "Bind also the :kbd:`A` key, onto the action ``move_left``."
msgstr ":kbd:`A` 키도 ``move_left`` 동작에 바인딩합니다."

msgid "|image12|"
msgstr "|image12|"

msgid ""
"Let's now add support for a gamepad's left joystick. Click the \"+\" button "
"again but this time, select *Manual Selection -> Joypad Axes*."
msgstr ""
"이제 게임패드의 왼쪽 조이스틱을 지원하도록 추가하겠습니다. 다시 \"+\" 버튼을 "
"클릭하고 이번에는 *Manual Selection -> Joypad Axes* 를 선택합니다."

msgid "Select the negative X axis of the left joystick."
msgstr "왼쪽 조이스틱의 음수 X 축을 선택합니다."

msgid "Leave the other values as default and press *OK*"
msgstr "다른 값은 기본값으로 두고 *OK* 를 누릅니다"

msgid ""
"If you want controllers to have different input actions, you should use the "
"Devices option in Additional Options. Device 0 corresponds to the first "
"plugged gamepad, Device 1 corresponds to the second plugged gamepad, and so "
"on."
msgstr ""
"컨트롤러에 서로 다른 입력 동작을 할당하려면 Additional Options에서 Devices 옵"
"션을 사용해야 합니다. Device 0은 첫 번째로 연결된 게임패드에 해당하고, "
"Device 1은 두 번째로 연결된 게임패드에 해당하며, 계속해서 순서대로 할당됩니"
"다."

msgid ""
"Do the same for the other input actions. For example, bind the right arrow, "
"D, and the left joystick's positive axis to ``move_right``. After binding "
"all keys, your interface should look like this."
msgstr ""
"다른 입력 동작에 대해서도 동일하게 수행합니다. 예를 들어, 오른쪽 화살표, D "
"키, 왼쪽 조이스틱의 양수 축을 ``move_right`` 에 바인딩합니다. 모든 키를 바인"
"딩한 후, 인터페이스는 다음과 같이 보여야 합니다."

msgid ""
"The final action to set up is the ``jump`` action. Bind the Space key and "
"the gamepad's A button."
msgstr ""
"마지막으로 설정할 동작은 ``jump`` 동작입니다. Space 키와 게임패드의 A 버튼을 "
"바인딩합니다."

msgid ""
"That's all the actions we need for this game. You can use this menu to label "
"any groups of keys and buttons in your projects."
msgstr ""
"이것이 이 게임에 필요한 모든 동작입니다. 이 메뉴를 사용하여 프로젝트에서 키"
"와 버튼 그룹에 레이블을 지정할 수 있습니다."

msgid "In the next part, we'll code and test the player's movement."
msgstr "다음 부분에서는 플레이어의 움직임을 코딩하고 테스트하겠습니다."
