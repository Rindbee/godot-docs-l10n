#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Signal"
msgstr "시그널"

msgid ""
"In this lesson, we will look at signals. They are messages that nodes emit "
"when something specific happens to them, like a button being pressed. Other "
"nodes can connect to that signal and call a function when the event occurs."
msgstr ""
"이번 단원에서는 시그널에 대해 살펴보겠습니다. 시그널은 버튼이 눌리는 것과 같"
"은 특정 상황이 발생했을 때 노드가 보내는 메시지입니다. 기타 노드는 이벤트가 "
"발생하면 해당 시그널에 연결하여 함수를 호출할 수 있습니다."

msgid ""
"Signals are a delegation mechanism built into Godot that allows one game "
"object to react to a change in another without them referencing one another. "
"Using signals limits `coupling <https://en.wikipedia.org/wiki/"
"Coupling_(computer_programming)>`_ and keeps your code flexible."
msgstr ""
"시그널은 Godot에 내장된 델리게이트 메커니즘으로, 어느 한 게임 오브젝트가 다"
"른 게임 오브젝트를 직접 참조하지 않고도 해당 오브젝트의 변경사항에 반응할 수 "
"있게 해줍니다. 시그널을 사용하면 `커플링 <https://en.wikipedia.org/wiki/"
"Coupling_(컴퓨터_프로그래밍)>`_ 을 제한하고 코드를 유연하게 유지할 수 있습니"
"다."

msgid ""
"For example, you might have a life bar on the screen that represents the "
"player's health. When the player takes damage or uses a healing potion, you "
"want the bar to reflect the change. To do so, in Godot, you would use "
"signals."
msgstr ""
"예를 들어 화면에 플레이어의 생명력을 나타내는 생명력 바가 있을 수 있습니다. "
"플레이어가 피해를 입거나 회복 물약을 사용하면 생명력 바에 변화가 반영되도록 "
"할 수 있습니다. 이를 위해 Godot에서는 시그널을 사용합니다."

msgid ""
"We will now use a signal to make our Godot icon from the previous lesson (:"
"ref:`doc_scripting_player_input`) move and stop by pressing a button."
msgstr ""
"이제 우리는 신호(signal)를 사용하여 이전 레슨 (:ref:"
"`doc_scripting_player_input`)에서 다룬 Godot 아이콘이 버튼을 눌러서 움직이고 "
"멈출 수 있도록 만들 것입니다."

msgid "For this project, we will be following the Godot naming conventions."
msgstr "이 프로젝트에서, 우리는 Godot의 명명 규칙을 따를 것입니다."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: 클래스(노드)는 파스칼 표기법(PascalCase)을 사용하고, 변수와 함"
"수는 스네이크_표기법(snake_case)을 사용하며, 상수는 전부 대문자(ALL_CAPS)를 "
"사용합니다(:ref:`doc_gdscript_styleguide` 참조)."

msgid "Scene setup"
msgstr "씬 설정"

msgid ""
"To add a button to our game, we will create a new scene which will include "
"both a :ref:`Button <class_button>` and the ``sprite_2d.tscn`` scene we "
"created in the :ref:`doc_scripting_first_script` lesson."
msgstr ""
"우리의 게임에 버튼을 추가하기 위해, 새로운 씬을 만들 것입니다. 이 씬에는 :"
"ref:`Button <class_button>`과 우리가 :ref:`doc_scripting_first_script` 레슨에"
"서 만든 ``sprite_2d.tscn`` 씬이 모두 포함될 것입니다."

msgid "Create a new scene by going to the menu Scene -> New Scene."
msgstr "새로운 씬을 만들기 위해 메뉴 씬 -> 새 씬으로 갑니다."

msgid ""
"In the Scene dock, click the 2D Scene button. This will add a :ref:`Node2D "
"<class_Node2D>` as our root."
msgstr ""
"Scene 도크에서 2D Scene 버튼을 클릭하세요. 이렇게 하면 :ref:`Node2D "
"<class_Node2D>`가 루트로 추가됩니다."

msgid ""
"In the FileSystem dock, click and drag the ``sprite_2d.tscn`` file you saved "
"previously onto the Node2D to instantiate it."
msgstr ""
"FileSystem 도크에서 이전에 저장한 ``sprite_2d.tscn`` 파일을 클릭하고 Node2D "
"위로 끌어서 인스턴스화하세요."

msgid ""
"We want to add another node as a sibling of the Sprite2D. To do so, right-"
"click on Node2D and select Add Child Node."
msgstr ""
"Sprite2D와 동등한 위치에 다른 노드를 추가하려면, Node2D를 마우스 오른쪽 버튼"
"으로 클릭하고 \"Add Child Node\"를 선택하세요."

msgid ""
"The node is small by default. Click and drag on the bottom-right handle of "
"the Button in the viewport to resize it."
msgstr ""
"노드는 기본적으로 작습니다. 버튼의 하단 오른쪽 핸들을 클릭하고 드래그하십시"
"오."

msgid ""
"If you don't see the handles, ensure the select tool is active in the "
"toolbar."
msgstr ""
"만약 핸들(handles)이 안보인다면, 툴바에서 선택 도구가 활성화되어 있는지 확인"
"하세요."

msgid "Click and drag on the button itself to move it closer to the sprite."
msgstr "버튼을 클릭하고 드래그하여 스프라이트에 더 가까이 이동하십시오."

msgid ""
"You can also write a label on the Button by editing its Text property in the "
"Inspector. Enter ``Toggle motion``."
msgstr ""
"인스펙터에서 Text 속성을 편집하면, 버튼에 라벨을 작성할 수 있습니다. "
"``Toggle motion``을 입력하세요."

msgid ""
"Save your newly created scene as ``node_2d.tscn``, if you haven't already. "
"You can then run it with :kbd:`F6` (:kbd:`Cmd + R` on macOS). At the moment, "
"the button will be visible, but nothing will happen if you press it."
msgstr ""
"새로 생성한 씬을 ``node_2d.tscn``으로 저장합니다(아직 저장하지 않았다면). 그"
"런 다음 :kbd:`F6`(macOS의 경우:kbd:`Cmd + R`)으로 실행할 수 있습니다. 지금은 "
"버튼이 표시되지만 버튼을 눌러도 아무 일도 일어나지 않습니다."

msgid ""
"Here, we want to connect the Button's \"pressed\" signal to our Sprite2D, "
"and we want to call a new function that will toggle its motion on and off. "
"We need to have a script attached to the Sprite2D node, which we do from the "
"previous lesson."
msgstr ""
"여기서는 버튼의 \"눌림\" 시그널을 Sprite2D에 연결하고, 모션을 켜고 끄는 새 함"
"수를 호출하고 싶습니다. 이를 위해서는 이전 단원에서 배운 대로 Sprite2D 노드"
"에 스크립트를 첨부해야 합니다."

msgid "The dock displays a list of signals available on the selected node."
msgstr "Dock은 선택한 노드에서 사용할 수 있는 시그널을 표시합니다."

msgid "Double-click the \"pressed\" signal to open the node connection window."
msgstr "\"pressed\" 신호를 더블클릭하여 노드 연결 창을 엽니다."

msgid ""
"There, you can connect the signal to the Sprite2D node. The node needs a "
"receiver method, a function that Godot will call when the Button emits the "
"signal. The editor generates one for you. By convention, we name these "
"callback methods \"_on_node_name_signal_name\". Here, it'll be "
"\"_on_button_pressed\"."
msgstr ""
"여기에서 신호를 Sprite2D 노드에 연결할 수 있습니다. 노드에는 버튼이 신호를 방"
"출할 때 고닷이 호출할 함수인 리시버 메서드가 필요합니다. 에디터에서 자동으로 "
"생성해 줍니다. 관례에 따라 이러한 콜백 메서드의 이름을 "
"\"_on_node_name_signal_name\"이라고 합니다. 여기서는 "
"\"_on_button_pressed\"이 될 것입니다."

msgid ""
"When connecting signals via the editor's Node dock, you can use two modes. "
"The simple one only allows you to connect to nodes that have a script "
"attached to them and creates a new callback function on them."
msgstr ""
"에디터의 Node 독을 통해 signal을 연결할 때는 두 가지 모드를 사용할 수 있습니"
"다. 단순 모드에서는 스크립트가 첨부된 노드에만 연결할 수 있으며 노드에 새 콜"
"백 함수를 생성합니다."

msgid ""
"The advanced view lets you connect to any node and any built-in function, "
"add arguments to the callback, and set options. You can toggle the mode in "
"the window's bottom-right by clicking the Advanced button."
msgstr ""
"고급 보기에서는 모든 노드와 내장 함수에 연결하고, 콜백에 인수를 추가하고, 옵"
"션을 설정할 수 있습니다. 창 오른쪽 하단에서 고급 버튼을 클릭하여 모드를 전환"
"할 수 있습니다."

msgid ""
"If you are using an external editor (such as VS Code) this automatic code "
"generation might not work. In this case you need to to connect the signal "
"via code as explained in the next section."
msgstr ""
"외부 에디터(예: VS Code)를 사용하는 경우 이 자동 코드 생성이 작동하지 않을 "
"수 있습니다. 이 경우 다음 섹션에 설명된 대로 코드를 통해 시그널을 연결해야 합"
"니다."

msgid ""
"Click the Connect button to complete the signal connection and jump to the "
"Script workspace. You should see the new method with a connection icon in "
"the left margin."
msgstr ""
"연결 버튼을 클릭하여 시그널 연결을 완료하고 스크립트 작업 영역으로 이동합니"
"다. 왼쪽 여백에 연결 아이콘이 있는 새 메서드가 표시됩니다."

msgid ""
"Let's replace the line with the ``pass`` keyword with code that'll toggle "
"the node's motion."
msgstr ""
"``pass`` 키워드가 있는 줄을 노드의 동작을 토글하는 코드로 바꿔보겠습니다."

msgid ""
"Our Sprite2D moves thanks to code in the ``_process()`` function. Godot "
"provides a method to toggle processing on and off: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Another method of the Node class, "
"``is_processing()``, returns ``true`` if idle processing is active. We can "
"use the ``not`` keyword to invert the value."
msgstr ""
"Sprite2D는 ``_process()`` 함수의 코드 덕분에 움직입니다. Godot은 처리를 켜고 "
"끄는 메서드를 제공합니다: :ref:`Node.set_process() "
"<class_Node_method_set_process>`. Node 클래스의 또 다른 메서드인 "
"``is_processing()``은 유휴 처리가 활성화되어 있으면 ``true``를 반환합니다. "
"``not`` 키워드를 사용하여 값을 반전시킬 수 있습니다."

msgid ""
"This function will toggle processing and, in turn, the icon's motion on and "
"off upon pressing the button."
msgstr "이 함수는 버튼을 누르면 처리를 토글하고, 아이콘의 동작을 켜고 끕니다."

msgid ""
"Before trying the game, we need to simplify our ``_process()`` function to "
"move the node automatically and not wait for user input. Replace it with the "
"following code, which we saw two lessons ago:"
msgstr ""
"게임을 시도해보기 전에, 사용자 입력을 기다리지 않고 노드를 자동으로 이동하도"
"록 ``_process()`` 함수를 단순화해야 합니다. 이 함수를 지난 두 수업 전에 보았"
"던 다음 코드로 대체합니다:"

msgid ""
"Let's use a different node here. Godot has a :ref:`Timer <class_Timer>` node "
"that's useful to implement skill cooldown times, weapon reloading, and more."
msgstr ""
"여기서는 다른 노드를 사용하겠습니다. Godot에는 스킬 재사용 대기 시간, 무기 재"
"장전 등을 구현하는 데 유용한 :ref:`Timer <class_Timer>` 노드가 있습니다."

msgid ""
"In the Scene dock, right-click on the Sprite2D node and add a new child "
"node. Search for Timer and add the corresponding node. Your scene should now "
"look like this."
msgstr ""
"씬 도크에서 Sprite2D 노드를 마우스 오른쪽 버튼으로 클릭하고 새 자식 노드를 추"
"가합니다. Timer를 검색하고 해당 노드를 추가합니다. 이제 씬이 다음과 같이 보"
"일 것입니다."

msgid ""
"With the Timer node selected, go to the Inspector and enable the "
"**Autostart** property."
msgstr ""
"Timer 노드를 선택한 상태에서 인스펙터로 이동하여 **자동 시작** 속성을 활성화"
"합니다."

msgid ""
"Click the script icon next to Sprite2D to jump back to the scripting "
"workspace."
msgstr ""
"스크립트 작업 공간으로 돌아가려면 Sprite2D 옆의 스크립트 아이콘을 클릭합니다."

msgid "We need to do two operations to connect the nodes via code:"
msgstr "우리는 노드를 코드로써 연결하는 두 작업을 수행해야 합니다:"

msgid "Call the ``connect()`` method on the Timer's \"timeout\" signal."
msgstr "타이머의 \"timeout\" 시그널에서 ``connect()`` 메서드를 호출합니다."

msgid ""
"To connect to a signal via code, you need to call the ``connect()`` method "
"of the signal you want to listen to. In this case, we want to listen to the "
"Timer's \"timeout\" signal."
msgstr ""
"코드를 통해 시그널에 연결하려면 수신하려는 시그널의 ``connect()`` 메서드를 호"
"출해야 합니다. 이 경우 타이머의 \"timeout\" 시그널을 수신하려고 합니다."

msgid ""
"We want to connect the signal when the scene is instantiated, and we can do "
"that using the :ref:`Node._ready() <class_Node_private_method__ready>` built-"
"in function, which is called automatically by the engine when a node is "
"fully instantiated."
msgstr ""
"씬이 인스턴스화될 때 시그널을 연결하고 싶다면, 노드가 완전히 인스턴스화될 때 "
"엔진에 의해 자동으로 호출되는 :ref:`Node._ready() "
"<class_Node_private_method__ready>` 내장 함수를 사용할 수 있습니다."

msgid ""
"To get a reference to a node relative to the current one, we use the method :"
"ref:`Node.get_node() <class_Node_method_get_node>`. We can store the "
"reference in a variable."
msgstr ""
"현재 노드에 대한 참조를 얻기 위해, 우리는 메서드를 사용합니다 :ref :`Node."
"get_node() <class_Node_method_get_node>`. 우리는 변수의 참조를 저장할 수 있습"
"니다."

msgid ""
"The function ``get_node()`` looks at the Sprite2D's children and gets nodes "
"by their name. For example, if you renamed the Timer node to "
"\"BlinkingTimer\" in the editor, you would have to change the call to "
"``get_node(\"BlinkingTimer\")``."
msgstr ""
"함수 ``get_node()``는 Sprite2D의 자식을 살펴보고 이름으로 노드를 가져옵니다. "
"예를 들어, 에디터에서 Timer 노드의 이름을 \"BlinkingTimer\"로 변경했다면, "
"``get_node(\"BlinkingTimer\")``로 호출을 변경해야 합니다."

msgid ""
"We can now connect the Timer to the Sprite2D in the ``_ready()`` function."
msgstr "이제 ``_ready()`` 함수에서 Timer를 Sprite2D에 연결할 수 있습니다."

msgid ""
"The line reads like so: we connect the Timer's \"timeout\" signal to the "
"node to which the script is attached. When the Timer emits ``timeout``, we "
"want to call the function ``_on_timer_timeout()``, that we need to define. "
"Let's add it at the bottom of our script and use it to toggle our sprite's "
"visibility."
msgstr ""
"Timer의 \"timeout\" 시그널을 스크립트가 연결된 노드에 연결합니다. 이때, 우리"
"는 Timer가 ``timeout``을 방출하면 정의해야 할 함수 ``_on_timer_timeout()``을 "
"호출하고 싶습니다. 스크립트 하단에 이 함수를 추가하고 스프라이트의 표시 여부"
"를 토글하는 데 사용해 보겠습니다."

msgid ""
"By convention, we name these callback methods in GDScript as "
"\"_on_node_name_signal_name\" and in C# as \"OnNodeNameSignalName\". Here, "
"it'll be \"_on_timer_timeout\" for GDScript and OnTimerTimeout() for C#."
msgstr ""
"관례에 따라 이러한 콜백 메서드의 이름은 GDScript에서는 "
"\"_on_node_name_signal_name\"으로, C#에서는 \"OnNodeNameSignalName\"으로 지정"
"합니다. 여기서는 GDScript의 경우 \"_on_timer_timeout\", C#의 경우 "
"OnTimerTimeout()이 됩니다."

msgid ""
"The ``visible`` property is a boolean that controls the visibility of our "
"node. The line ``visible = not visible`` toggles the value. If ``visible`` "
"is ``true``, it becomes ``false``, and vice-versa."
msgstr ""
"``visible`` 속성은 노드의 표시 여부를 제어하는 부울입니다. ``visible= not "
"visible``이라는 줄은 값을 토글합니다. ``visible``이 ``true``이면, ``false``"
"가 되고, 그 반대의 경우 ``true``가 됩니다."

msgid ""
"If you run the Node2D scene now, you will see that the sprite blinks on and "
"off, at one second intervals."
msgstr ""
"지금 Node2D 씬을 실행하면, 스프라이트가 1초 간격으로 켜졌다 꺼지는 것을 볼 "
"수 있습니다."

msgid "Custom signals"
msgstr "커스텀 시그널"

msgid ""
"This section is a reference on how to define and use your own signals, and "
"does not build upon the project created in previous lessons."
msgstr ""
"이 섹션은 자신만의 시그널을 정의하고 사용하는 방법에 대한 참조용이며, 이전 레"
"슨에서 만든 프로젝트를 기반으로 하지 않습니다."

msgid ""
"You can define custom signals in a script. Say, for example, that you want "
"to show a game over screen when the player's health reaches zero. To do so, "
"you could define a signal named \"died\" or \"health_depleted\" when their "
"health reaches 0."
msgstr ""
"스크립트에서 사용자 지정 시그널을 정의할 수 있습니다. 예를 들어 플레이어의 체"
"력이 0에 도달하면 게임 오버 화면을 표시하고 싶다고 가정해 보겠습니다. 이를 위"
"해 플레이어의 체력이 0에 도달하면 \"died\" 또는 \"health_depleted\"라는 시그"
"널을 정의할 수 있습니다."

msgid ""
"As signals represent events that just occurred, we generally use an action "
"verb in the past tense in their names."
msgstr ""
"시그널은 방금 발생한 이벤트를 나타내므로, 일반적으로 시그널의 이름에 과거 시"
"제의 동작 동사를 사용합니다."

msgid ""
"Your signals work the same way as built-in ones: they appear in the Node tab "
"and you can connect to them like any other."
msgstr ""
"시그널은 내장된 것과 동일한 방식으로 작동합니다. 노드 탭에 나타나며 다른 것"
"과 같이 연결할 수 있습니다."

msgid ""
"The signal arguments show up in the editor's node dock, and Godot can use "
"them to generate callback functions for you. However, you can still emit any "
"number of arguments when you emit signals. So it's up to you to emit the "
"correct values."
msgstr ""
"시그널 인수는 편집기의 노드(Node) 독에 표시되며 Godot는 이 인수로 콜백 함수"
"를 생성할 수 있습니다. 하지만 시그널을 방출할 때 여전히 많은 수의 인수를 방출"
"할 수 있습니다. 다시 말해 올바른 값을 방출하는 일은 여러분에게 달려 있습니다."

msgid "Summary"
msgstr "요약"

msgid ""
"Any node in Godot emits signals when something specific happens to them, "
"like a button being pressed. Other nodes can connect to individual signals "
"and react to selected events."
msgstr ""
"Godot의 모든 노드는 버튼이 눌리는 등 특정 상황이 발생하면 시그널을 발산합니"
"다. 다른 노드는 개별 시그널에 연결하여 선택한 이벤트에 반응할 수 있습니다."

msgid ""
"Signals have many uses. With them, you can react to a node entering or "
"exiting the game world, to a collision, to a character entering or leaving "
"an area, to an element of the interface changing size, and much more."
msgstr ""
"시그널은 다양한 용도로 사용됩니다. 시그널을 사용하면 노드가 게임 월드에 들어"
"오거나 나가는 것, 콜리전(collision), 캐릭터가 영역에 들어오거나 나가는 것, 인"
"터페이스 요소의 크기가 변경되는 것 등에 반응할 수 있습니다."

msgid "Translation status"
msgstr "번역 상태"
