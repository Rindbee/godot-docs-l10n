#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""
"프로젝트 설정이 완료되면 플레이어가 제어하는 캐릭터 작업을 시작할 수 있습니"
"다."

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"첫 번째 씬은 ``Player`` 오브젝트를 정의합니다. 별도의 플레이어 씬을 만드는 것"
"의 장점 중 하나는 게임의 다른 부분을 만들기 전에도 별도로 테스트할 수 있다는 "
"것입니다."

msgid "Node structure"
msgstr "노드 구조"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"시작하려면 플레이어 오브젝트의 루트 노드를 선택해야 합니다. 일반적으로 씬의 "
"루트 노드는 개체가 원하는 기능, 즉 개체가 *무엇*인지를 반영해야 합니다. \"다"
"른 노드(Other Node)\" 버튼을 클릭하고 씬에 :ref:`Area2D <class_Area2D>` 노드"
"를 추가하세요."

msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot는 씬 트리에서 노드 옆에 경고 아이콘을 보여줍니다. 지금은 무시해도 됩니"
"다. 나중에 다룰 것입니다."

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"``Area2D``\\ 를 사용하면 플레이어와 겹치거나 충돌하는 물체를 감지할 수 있습니"
"다. 노드를 두 번 클릭하여 노드 이름을 ``Player``\\ 로 변경하세요. 이제 씬의 "
"루트 노드를 설정했으므로 노드를 추가해 더 많은 기능을 줄 수 있습니다."

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"씬을 저장합니다. 씬(Scene) -> 씬 저장(Save Scene)을 클릭하거나 Windows/Linux"
"에서는 :kbd:`Ctrl + S`\\ 를, Mac에서는 :kbd:`Cmd + S`\\ 를 누르세요."

msgid "For this project, we will be following the Godot naming conventions."
msgstr "이 프로젝트에서, 우리는 Godot의 명명 규칙을 따를 것입니다."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: 클래스(노드)는 파스칼 표기법(PascalCase)을 사용하고, 변수와 함"
"수는 스네이크_표기법(snake_case)을 사용하며, 상수는 전부 대문자(ALL_CAPS)를 "
"사용합니다(:ref:`doc_gdscript_styleguide` 참조)."

msgid "Sprite animation"
msgstr "스프라이트 애니메이션"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "다 되셨다면, 당신의 ``Player`` 씬은 이렇게 되어야 합니다:"

msgid "Make sure to save the scene again after these changes."
msgstr "이러한 변경 후에 씬을 다시 저장하는 것을 잊지 마세요."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"다음 부분에서는 Player 노드에 스크립트를 추가하여 플레이어를 움직이고 애니메"
"이션을 적용하겠습니다. 그런 다음 콜리전(Collision) 감지를 설정하여 플레이어"
"가 무언가에 부딪혔을 때를 파악하겠습니다."

msgid "Translation status"
msgstr "번역 상태"
