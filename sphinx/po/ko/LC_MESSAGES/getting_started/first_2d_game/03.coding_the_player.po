#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid ""
"In this lesson, we'll add player movement, animation, and set it up to "
"detect collisions."
msgstr ""
"이 레슨에서는 플레이어 움직임과 애니메이션을 추가하고 충돌을 감지하도록 설정"
"해 보겠습니다."

msgid ""
"In the script settings window, you can leave the default settings alone. "
"Just click \"Create\":"
msgstr ""
"스크립트 설정 창은 기본 설정으로 냅두어도 됩니다. 그냥 \"만들기(Create)\"를 "
"누르세요:"

msgid ""
"If you're creating a C# script or other languages, select the language from "
"the `language` drop down menu before hitting create."
msgstr ""
"C#이나 다른 언어로 스크립트를 만들려면 만들기를 누르기 전에 `언어(language)` "
"드롭 다운 메뉴에서 언어를 선택하세요."

msgid ""
"If this is your first time encountering GDScript, please read :ref:"
"`doc_scripting` before continuing."
msgstr ""
"GDScript를 처음 접하는 경우 계속하기 전에 :ref:`doc_scripting`을 읽어주세요."

msgid "Start by declaring the member variables this object will need:"
msgstr "이 오브젝트가 필요로 하는 멤버 변수를 선언함으로써 시작합시다:"

msgid ""
"Your ``player.gd`` script should already contain a ``_ready()`` and a "
"``_process()`` function. If you didn't select the default template shown "
"above, create these functions while following the lesson."
msgstr ""
"``player.gd`` 스크립트에는 ``_ready()``와 ``_process()`` 함수가 이미 포함되"
"어 있어야 합니다. 위에 표시된 기본 템플릿을 선택하지 않았다면, 이 강의를 따르"
"면서 이 함수를 생성하세요."

msgid ""
"The ``_ready()`` function is called when a node enters the scene tree, which "
"is a good time to find the size of the game window:"
msgstr ""
"``_ready()`` 함수는 노드가 씬 트리에 들어올 때 호출되는데, 이 때가 게임 창의 "
"크기를 알아보기 좋은 순간입니다:"

msgid ""
"Now we can use the ``_process()`` function to define what the player will "
"do. ``_process()`` is called every frame, so we'll use it to update elements "
"of our game, which we expect will change often. For the player, we need to "
"do the following:"
msgstr ""
"이제 ``_process()`` 함수를 사용해서 플레이어가 무엇을 할 지 정의할 수 있습니"
"다. ``_process()``\\ 는 매 프레임마다 호출되므로, 게임에서 자주 변하는 요소들"
"을 업데이트하기 위해서 사용할 수 있습니다. 플레이어에게는, 다음과 같은 작업"
"이 필요합니다:"

msgid "Check for input."
msgstr "입력을 확인."

msgid "Move in the given direction."
msgstr "주어진 방향으로 이동."

msgid "Play the appropriate animation."
msgstr "적절한 애니메이션을 재생."

msgid ""
"Click on *Project -> Project Settings* to open the project settings window "
"and click on the *Input Map* tab at the top. Type \"move_right\" in the top "
"bar and click the \"Add\" button to add the ``move_right`` action."
msgstr ""
"*프로젝트 -> 프로젝트 설정*을 클릭하여 프로젝트 설정 창을 열고, 상단의 *입력 "
"맵(Input Map)* 탭을 클릭합니다. 상단 표시줄에 \"move_right\"를 입력하고 \"추"
"가(Add)\" 버튼을 클릭하여 'move_right' 동작을 추가합니다."

msgid ""
"We need to assign a key to this action. Click the \"+\" icon on the right, "
"to open the event manager window."
msgstr ""
"이 작업에 키를 할당해야 합니다. 오른쪽의 \"+\" 아이콘을 클릭하여 이벤트 관리"
"자 창을 엽니다."

msgid ""
"The \"Listening for Input...\" field should automatically be selected. Press "
"the \"right\" key on your keyboard, and the menu should look like this now."
msgstr ""
"\"입력 듣기...(Listening for Input...)\" 필드가 자동으로 선택됩니다. 키보드"
"의 \"오른쪽\" 키를 누르면 이제 메뉴가 다음과 같이 표시됩니다."

msgid ""
"Select the \"ok\" button. The \"right\" key is now associated with the "
"``move_right`` action."
msgstr ""
"\"확인\" 버튼을 선택합니다. 이제 '오른쪽' 키가 'move_right' 동작에 연결됩니"
"다."

msgid "Repeat these steps to add three more mappings:"
msgstr "이 단계를 반복하여 매핑을 3개 더 추가합니다:"

msgid "``move_left`` mapped to the left arrow key."
msgstr "왼쪽 화살표 키에 매핑된 ``move_left``입니다."

msgid "``move_up`` mapped to the up arrow key."
msgstr "위쪽 화살표 키에 매핑된 ``move_up``입니다."

msgid "And ``move_down`` mapped to the down arrow key."
msgstr "그리고 아래쪽 화살표 키에 매핑된 ``move_down``입니다."

msgid "Click the \"Close\" button to close the project settings."
msgstr "프로젝트 설정을 닫으려면 \"닫기\" 버튼을 클릭합니다."

msgid ""
"We only mapped one key to each input action, but you can map multiple keys, "
"joystick buttons, or mouse buttons to the same input action."
msgstr ""
"여기에선 각 입력 동작에 하나의 키만 매핑했지만 여러 개의 키, 조이스틱 버튼 또"
"는 마우스 버튼을 동일한 입력 동작에 매핑할 수 있습니다."

msgid ""
"You can detect whether a key is pressed using ``Input.is_action_pressed()``, "
"which returns ``true`` if it's pressed or ``false`` if it isn't."
msgstr ""
"``Input.is_action_pressed()``\\ 를 사용해서 키가 눌러졌는지를 감지할 수 있는"
"데, 눌러지면 ``true`` 값을 반환하고 그렇지 않으면 ``false`` 값을 반환합니다."

msgid ""
"We start by setting the ``velocity`` to ``(0, 0)`` - by default, the player "
"should not be moving. Then we check each input and add/subtract from the "
"``velocity`` to obtain a total direction. For example, if you hold ``right`` "
"and ``down`` at the same time, the resulting ``velocity`` vector will be "
"``(1, 1)``. In this case, since we're adding a horizontal and a vertical "
"movement, the player would move *faster* diagonally than if it just moved "
"horizontally."
msgstr ""
"먼저 ``velocity``\\ 를 ``(0, 0)``\\ 으로 설정합니다. 기본적으로 플레이어는 움"
"직이지 않아야 합니다. 그런 다음 각 입력을 확인하고 ``velocity``\\ 에서 더하거"
"나 빼서 최종 방향을 얻습니다. 예를 들어, ``오른쪽 방향키``\\ 와 ``아래쪽 방향"
"키``\\ 을 동시에 누르고 있으면 결과 ``velocity`` 벡터는 ``(1, 1)``\\ 이 됩니"
"다. 이 경우 동시에 수평과 수직 방향으로 이동하기 때문에 플레이어는 수평으로 "
"이동할 때보다 대각선으로 *더 빠르게* 이동합니다."

msgid ""
"We can prevent that if we *normalize* the velocity, which means we set its "
"*length* to ``1``, then multiply by the desired speed. This means no more "
"fast diagonal movement."
msgstr ""
"우리는 velocity를 *정규화(normalize)*\\하면, 즉 velocity의 *길이(length)*\\ "
"를 ``1``\\ 로 설정한 다음, 원하는 속도를 곱하면 이 문제를 방지할 수 있습니"
"다. 이렇게 하면 더 이상 대각선 방향 이동속도가 더 빠르지 않습니다."

msgid ""
"If you've never used vector math before, or need a refresher, you can see an "
"explanation of vector usage in Godot at :ref:`doc_vector_math`. It's good to "
"know but won't be necessary for the rest of this tutorial."
msgstr ""
"이제까지 벡터 수학을 안 써봤거나 복습이 필요하다면 :ref:`doc_vector_math`\\ "
"에서 Godot에서 벡터를 어떻게 사용하는지 볼 수 있습니다. 보면 좋지만 나머지 튜"
"토리얼을 위해 꼭 필수적인 것은 아닙니다."

msgid ""
"Now that we have a movement direction, we can update the player's position. "
"We can also use ``clamp()`` to prevent it from leaving the screen. "
"*Clamping* a value means restricting it to a given range. Add the following "
"to the bottom of the ``_process`` function (make sure it's not indented "
"under the `else`):"
msgstr ""
"이동 방향이 있으므로 이제 플레이어의 위치를 업데이트할 수 있습니다. 또한 "
"``clamp()``\\ 를 사용해 플레이어가 화면에서 나가는 것을 방지할 수 있습니다. *"
"클램핑(Clamping)*\\ 은 값을 주어진 범위로 제한하는 것을 의미합니다. "
"``_process`` 함수의 맨 아래에 다음을 추가합니다(`else` 아래에 들여쓰기가 되"
"어 있지 않은지 확인하세요):"

msgid ""
"The `delta` parameter in the `_process()` function refers to the *frame "
"length* - the amount of time that the previous frame took to complete. Using "
"this value ensures that your movement will remain consistent even if the "
"frame rate changes."
msgstr ""
"`_process()` 함수에 있는 매개변수 `delta` 는 (이전 프레임이 완료되는데 걸린 "
"시간인) \"프레임 길이(frame length)\" 를 참조합니다. 이 값을 사용하면 프레임 "
"레이트가 변경되어도 플레이어의 이동속도를 항상 일정하게 유지할 수 있습니다."

msgid "If you get an error in the \"Debugger\" panel that says"
msgstr "\"디버거(Debugger)\" 패널에 다음과 같은 오류가 표시되는 경우"

msgid ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"
msgstr ""
"``Attempt to call function 'play' in base 'null instance' on a null "
"instance``"

msgid "Choosing animations"
msgstr "애니메이션 고르기"

msgid ""
"The boolean assignments in the code above are a common shorthand for "
"programmers. Since we're doing a comparison test (boolean) and also "
"*assigning* a boolean value, we can do both at the same time. Consider this "
"code versus the one-line boolean assignment above:"
msgstr ""
"위 코드의 불리언(boolean) 값 할당은 프로그래머를 위한 일반적인 축약입니다. 우"
"리는 비교 테스트(boolean)를 수행하고 또한 boolean 값을 *할당*하기 때문에 두 "
"가지를 동시에 수행할 수 있습니다. 아래 코드와 위의 한 줄 부울 할당 명령문을 "
"비교해보세요:"

msgid ""
"Play the scene again and check that the animations are correct in each of "
"the directions."
msgstr "씬을 다시 재생하고 애니메이션이 각 방향에서 올바른지 확인합니다."

msgid ""
"A common mistake here is to type the names of the animations wrong. The "
"animation names in the SpriteFrames panel must match what you type in the "
"code. If you named the animation ``\"Walk\"``, you must also use a capital "
"\"W\" in the code."
msgstr ""
"흔한 실수로 애니메이션 이름을 잘못 입력합니다. SpriteFrames 패널의 애니메이"
"션 이름은 코드에 입력한 것과 일치해야 합니다. 애니메이션 이름을 "
"``\"Walk\"``\\ 으로 지은 경우 코드에 대문자 \"W\"를 사용해야 합니다."

msgid ""
"When you're sure the movement is working correctly, add this line to "
"``_ready()``, so the player will be hidden when the game starts:"
msgstr ""
"플레이어가 제대로 움직이고 있다고 생각하면 다음 줄을 ``_ready()``\\ 에 추가해"
"보세요. 게임이 시작될 때 플레이어가 숨겨집니다:"

msgid "Preparing for collisions"
msgstr "콜리전 준비하기"

msgid ""
"We want ``Player`` to detect when it's hit by an enemy, but we haven't made "
"any enemies yet! That's OK, because we're going to use Godot's *signal* "
"functionality to make it work."
msgstr ""
"우리는 ``Player``\\ 가 적과 닿았다는 것을 감지하길 원하지만 아직 적을 만들지 "
"않았습니다! 충돌이 작동하도록 우리는 Godot의 *시그널(signal)* 기능을 사용할 "
"것이기 때문에 괜찮습니다."

msgid ""
"Add the following at the top of the script. If you're using GDScript, add it "
"after ``extends Area2D``. If you're using C#, add it after ``public partial "
"class Player : Area2D``:"
msgstr ""
"스크립트 상단에 다음을 추가합니다. GDScript를 사용하는 경우 ``extends "
"Area2D`` 뒤에 추가합니다. C#을 사용하는 경우 ``public partial class Player : "
"Area2D`` 뒤에 추가합니다:"

msgid ""
"This defines a custom signal called \"hit\" that we will have our player "
"emit (send out) when it collides with an enemy. We will use ``Area2D`` to "
"detect the collision. Select the ``Player`` node and click the \"Node\" tab "
"next to the Inspector tab to see the list of signals the player can emit:"
msgstr ""
"이것은 적과 충돌할 때 플레이어가 방출하는 \"hit\"라는 사용자 지정 시그널을 정"
"의합니다. 충돌을 감지하기 위해 ``Area2D``\\ 를 사용합니다. ``Player`` 노드를 "
"선택하고 인스펙터(Inspector) 독 옆에 있는 \"노드(Node)\" 독을 클릭해 플레이어"
"가 방출할 수 있는 시그널 목록을 확인해보세요:"

msgid ""
"Godot will create a function with that exact name directly in script for "
"you. You don't need to change the default settings right now."
msgstr ""
"Godot이 스크립트에서 바로 그 이름을 가진 함수를 생성합니다. 지금 당장 기본 설"
"정을 변경할 필요는 없습니다."

msgid ""
"If you're using an external text editor (for example, Visual Studio Code), a "
"bug currently prevents Godot from doing so. You'll be sent to your external "
"editor, but the new function won't be there."
msgstr ""
"외부 텍스트 편집기(예: Visual Studio Code)를 사용하는 경우, 현재 버그가 발생"
"하여 Godot이 이를 지원하지 않습니다. 외부 편집기로 전송되기는 하지만 새로운 "
"기능은 제공되지 않습니다."

msgid ""
"In this case, you'll need to write the function yourself into the Player's "
"script file."
msgstr "이 경우 플레이어의 스크립트 파일에 함수를 직접 작성해야 합니다."

msgid ""
"Note the green icon indicating that a signal is connected to this function; "
"this does not mean the function exists, only that the signal will attempt to "
"connect to a function with that name, so double-check that the spelling of "
"the function matches exactly!"
msgstr ""
"함수에 신호가 연결되었음을 나타내는 녹색 아이콘에 주목하세요. 이는 함수가 존"
"재한다는 의미가 아니라, 신호가 해당 이름의 함수에 연결을 시도할 것이라는 의미"
"입니다. 따라서 함수의 철자가 정확히 일치하는지 두 번 확인하세요!"

msgid ""
"Each time an enemy hits the player, the signal is going to be emitted. We "
"need to disable the player's collision so that we don't trigger the ``hit`` "
"signal more than once."
msgstr ""
"적이 플레이어에 충돌할 때마다 시그널이 방출됩니다. 우리는 두 번 이상 ``hit`` "
"시그널이 발동되지 않도록 플레이어의 콜리전을 비활성화 해야 합니다."

msgid ""
"Disabling the area's collision shape can cause an error if it happens in the "
"middle of the engine's collision processing. Using ``set_deferred()`` tells "
"Godot to wait to disable the shape until it's safe to do so."
msgstr ""
"엔진의 충돌 처리 도중에 영역의 콜리전 모양을 비활성화하면 오류가 발생할 수 있"
"습니다. ``set_deferred()``\\ 를 사용하면 Godot가 모양을 비활성화 하기에 안전"
"해질 때까지 기다려줍니다."

msgid ""
"The last piece is to add a function we can call to reset the player when "
"starting a new game."
msgstr ""
"마지막으로 새로운 게임을 시작할 때 플레이어를 초기화하기 위해 호출할 수 있는 "
"함수를 추가합니다."

msgid "With the player working, we'll work on the enemy in the next lesson."
msgstr ""
"플레이어가 작동하는 것을 확인했으므로, 다음 레슨에서는 적을 작업할 것입니다."
