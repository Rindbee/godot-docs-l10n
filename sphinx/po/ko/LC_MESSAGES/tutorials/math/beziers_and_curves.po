#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Beziers, curves and paths"
msgstr "베지어 곡선과 경로"

msgid ""
"Bezier curves are a mathematical approximation of natural geometric shapes. "
"We use them to represent a curve with as little information as possible and "
"with a high level of flexibility."
msgstr ""
"베지어 곡선은 자연적인 기하학적 형상들의 수학적 근사입니다. 이들을 사용하면 "
"가능한 한 적은 정보를 이용하여 최대한 높은 유연성으로 곡선을 나타낼 수 있습니"
"다."

msgid ""
"Unlike more abstract mathematical concepts, Bezier curves were created for "
"industrial design. They are a popular tool in the graphics software industry."
msgstr ""
"다른 추상적인 수학적 개념들과는 다르게, 베지어 곡선은 산업 디자인을 위해 만들"
"어졌습니다. 이는 그래픽 소프트웨어 업계에서 매우 인기 있는 도구입니다."

msgid ""
"They rely on :ref:`interpolation<doc_interpolation>`, which we saw in the "
"previous article, combining multiple steps to create smooth curves. To "
"better understand how Bezier curves work, let's start from its simplest "
"form: Quadratic Bezier."
msgstr ""
"이들은 우리가 이전 글에서 보았던 :ref:`선형 보간법<doc_interpolation>` 에 의"
"존하며, 여러 단계를 조합하여 부드러운 곡선을 만듭니다. 베지어 곡선이 어떻게 "
"작동하는지 더 잘 이해할 수 있도록, 우선 가장 간단한 형태인 2차 베지어 곡선부"
"터 살펴봅시다."

msgid "Quadratic Bezier"
msgstr "2차 베지어 (Quadratic Bezier)"

msgid "Take three points, the minimum required for Quadratic Bezier to work:"
msgstr "2차 베지어 곡선을 만들기 위해, 최소한의 요구치인 점 3개를 잡아 봅시다:"

msgid ""
"To draw a curve between them, we first interpolate gradually over the two "
"vertices of each of the two segments formed by the three points, using "
"values ranging from 0 to 1. This gives us two points that move along the "
"segments as we change the value of ``t`` from 0 to 1."
msgstr ""
"먼저 세 점을 통해서 만들어지는 두 개의 선분 각각이 가지는 두 꼭짓점을, 0과 1 "
"사이의 ``t`` 값을 이용하여 서서히 보간합니다. 그러면 ``t`` 값을 0에서 1으로 "
"바꿀 때 선분을 따라 이동하는 점 2개를 얻을 수 있습니다."

msgid ""
"We then interpolate ``q0`` and ``q1`` to obtain a single point ``r`` that "
"moves along a curve."
msgstr ""
"얻은 두 점인 ``q0`` 과 ``q1`` 을 보간하면, 곡선을 그리며 이동하는 한 점 "
"``r`` 을 얻을 수 있습니다."

msgid "This type of curve is called a *Quadratic Bezier* curve."
msgstr "이와 같은 곡선을 *2차 베지어 곡선* 이라고 부릅니다."

msgid "*(Image credit: Wikipedia)*"
msgstr "*(사진 출처: 위키백과)*"

msgid "Cubic Bezier"
msgstr "3차 베지어 (Cubic Bezier)"

msgid ""
"Building upon the previous example, we can get more control by interpolating "
"between four points."
msgstr ""
"바로 전 예제를 바탕으로, 세 점 대신 네 점을 사용하면 곡선을 더 잘 제어할 수 "
"있습니다."

msgid ""
"We first use a function with four parameters to take four points as an "
"input, ``p0``, ``p1``, ``p2`` and ``p3``:"
msgstr ""
"우선, ``p0``, ``p1``, ``p2``, ``p3`` 이 4개의 점을 인자로 받는 함수를 정의합"
"니다:"

msgid ""
"We apply a linear interpolation to each couple of points to reduce them to "
"three:"
msgstr "그 뒤 각각의 꼭짓점을 따라 선형 보간을 적용하여 점 3개를 얻습니다:"

msgid "We then take our three points and reduce them to two:"
msgstr "같은 방법으로 점 3개를 이용해 2개의 점을 얻고:"

msgid "And to one:"
msgstr "마지막으로 하나의 점을 얻으면:"

msgid "Here is the full function:"
msgstr "아래는 완성된 함수입니다:"

msgid ""
"The result will be a smooth curve interpolating between all four points:"
msgstr "결과적으로 네 점을 따라서 보간되는 매끄러운 곡선이 그려지게 됩니다:"

msgid ""
"Cubic Bezier interpolation works the same in 3D, just use ``Vector3`` "
"instead of ``Vector2``."
msgstr ""
"3차 베지어 보간은 ``Vector2`` 를 ``Vector3`` 으로만 바꾸면 3D에서도 동일하게 "
"작동합니다."

msgid "Adding control points"
msgstr "제어점 만들기"

msgid "Drawing"
msgstr "그리기"
