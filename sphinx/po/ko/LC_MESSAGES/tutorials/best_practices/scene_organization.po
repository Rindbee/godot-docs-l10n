# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-20 16:36+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Scene organization"
msgstr "씬 구성"

msgid ""
"This article covers topics related to the effective organization of scene "
"content. Which nodes should one use? Where should one place them? How should "
"they interact?"
msgstr ""
"이 문서는 효과적인 씬 컨텐츠 구성 방법을 다룹니다. 어떤 노드를 사용해야 할까"
"요? 어디에 그들을 배치해야 할까요? 어떻게 상호작용하도록 해야 할까요?"

msgid "How to build relationships effectively"
msgstr "효과적인 관계(relationship) 구축 방법"

msgid ""
"When Godot users begin crafting their own scenes, they often run into the "
"following problem:"
msgstr ""
"Godot 사용자들은 씬을 만들 때, 종종 다음과 같은 문제점을 마주치게 됩니다:"

msgid ""
"They create their first scene and fill it with content only to eventually "
"end up saving branches of their scene into separate scenes as the nagging "
"feeling that they should split things up starts to accumulate. However, they "
"then notice that the hard references they were able to rely on before are no "
"longer possible. Re-using the scene in multiple places creates issues "
"because the node paths do not find their targets and signal connections "
"established in the editor break."
msgstr ""
"사용자들은 먼저 첫 씬을 만들고 거기에 내용물을 넣다가 왠지 씬을 좀 나눠야 할 "
"것 같은 불길한 기분을 느낄 쯤 씬의 가지를 개별의 씬으로 저장합니다. 그리고는 "
"더 이상 이전처럼 직접적인 참조를 할 수가 없다는 것을 깨닫는거죠. 노드 경로가 "
"목표를 찾을 수 없고 에디터의 시그널 연결이 무너지기 때문에 씬을 여러 곳에서 "
"재사용하는 것이 문제를 일으킵니다."

msgid ""
"To fix these problems, one must instantiate the sub-scenes without them "
"requiring details about their environment. One needs to be able to trust "
"that the sub-scene will create itself without being picky about how one uses "
"it."
msgstr ""
"이 문제를 해결하기 위해, 환경에 대한 세부 정보가 필요없는 하위 씬을 인스턴스"
"화해야 합니다. 하위 씬이 사용되는 방식에 관계없이 잘 동작한다는 것을 믿을 수 "
"있어야 합니다."

msgid ""
"One of the biggest things to consider in OOP is maintaining focused, "
"singular-purpose classes with `loose coupling <https://en.wikipedia.org/wiki/"
"Loose_coupling>`_ to other parts of the codebase. This keeps the size of "
"objects small (for maintainability) and improves their reusability."
msgstr ""
"객체 지향 프로그래밍에서 고려해야할 가장 큰 점은 집중된 단일 목적의 클래스를 "
"코드베이스의 다른 부분과의 `느슨한 연결(loose coupling) <https://en."
"wikipedia.org/wiki/Loose_coupling>`_ 을 유지하는 것입니다. 이것으로 오브젝트"
"의 크기를 (유지 보수성을 위해) 작게 유지하며 재사용성을 높여줍니다."

#, fuzzy
msgid ""
"These OOP best practices have *several* implications for best practices in "
"scene structure and script usage."
msgstr ""
"이런 객체 지향 프로그래밍 모범 사례는 씬 구조와 스크립트 사용의 모범 사례에 "
"있어 *여러 가지* 파급 효과가 있습니다."

msgid ""
"**If at all possible, one should design scenes to have no dependencies.** "
"That is, one should create scenes that keep everything they need within "
"themselves."
msgstr ""
"**가능하다면 의존성이 없는 씬을 설계해야합니다.** 즉, 필요한 모든 것들을 스스"
"로 가지고 있는 씬을 만들어야 합니다."

msgid ""
"If a scene must interact with an external context, experienced developers "
"recommend the use of `Dependency Injection <https://en.wikipedia.org/wiki/"
"Dependency_injection>`_. This technique involves having a high-level API "
"provide the dependencies of the low-level API. Why do this? Because classes "
"which rely on their external environment can inadvertently trigger bugs and "
"unexpected behavior."
msgstr ""
"씬이 외부 컨텍스트와 상호작용해야 한다면, 경험있는 개발자들은 `의존성 주입 "
"<https://ko.wikipedia.org/wiki/의존성 주입>`_\\ 사용을 권장합니다. 이 기술은 "
"하이 레벨 API를 사용해 로우 레벨 API의 의존성을 제공하는 것과 관련이 있습니"
"다. 왜 이럴까요? 외부 환경에 의존하는 클래스에서는 버그나 예측하지 못한 동작"
"이 발생하기 쉽기 때문입니다."

msgid ""
"To do this, one must expose data and then rely on a parent context to "
"initialize it:"
msgstr ""
"따라서 데이터를 노출하고, 초기화는 부모 컨텍스트 담당하도록 해야 합니다:"

msgid ""
"Connect to a signal. Extremely safe, but should be used only to \"respond\" "
"to behavior, not start it. By convention, signal names are usually past-"
"tense verbs like \"entered\", \"skill_activated\", or \"item_collected\"."
msgstr ""
"시그널에 연결합니다. 매우 안전하지만 동작에 \"응답\"하기 위해 사용해야하고, "
"동작을 시작하기 위해 사용하면 안됩니다. 시그널 이름은 보통 과거 시제 동사를 "
"사용합니다, \"entered\", \"skill_activated\", 혹은 \"item_collected\"처럼 말"
"이죠."

msgid "Call a method. Used to start behavior."
msgstr "메서드를 호출합니다. 동작을 시작하기 위해 사용됩니다."

msgid ""
"Initialize a :ref:`Callable <class_Callable>` property. Safer than a method "
"as ownership of the method is unnecessary. Used to start behavior."
msgstr ""
":ref:`Callable <class_Callable>` 속성을 초기화합니다. 메서드의 소유권이 불필"
"요하므로 메서드 호출보다 안전합니다. 동작을 시작하는 데 사용됩니다."

msgid "Initialize a Node or other Object reference."
msgstr "노드나 다른 오브젝트 참조를 초기화합니다."

msgid "Initialize a NodePath."
msgstr "노드 경로를 초기화합니다."

msgid ""
"These options hide the points of access from the child node. This in turn "
"keeps the child **loosely coupled** to its environment. One can reuse it in "
"another context without any extra changes to its API."
msgstr ""
"이런 방법들을 통해 자손 노드로부터의 접근 소스를 숨깁니다. 결과적으로 자손을 "
"환경에 **느슨하게 결합합니다**. API에 다른 추가 변경사항 없이 다른 컨텍스트에"
"서 재사용할 수 있습니다."

msgid ""
"Although the examples above illustrate parent-child relationships, the same "
"principles apply towards all object relations. Nodes which are siblings "
"should only be aware of their hierarchies while an ancestor mediates their "
"communications and references."
msgstr ""
"위의 예제는 부모 자손 관계를 설명하고 있지만, 모든 오브젝트 관계에 이 원리를 "
"적용할 수 있습니다. 동기 노드는 그들의 계층 구조만 알아야 하며 부모 노드가 그"
"들의 상호작용과 참조를 조정해야 합니다."

msgid ""
"The same principles also apply to non-Node objects that maintain "
"dependencies on other objects. Whichever object actually owns the objects "
"should manage the relationships between them."
msgstr ""
"노드가 아닌 오브젝트라도 다른 오브젝트와 종속성이 있는 경우 같은 원리가 적용"
"됩니다. 어떤 오브젝트든지 실제로 그들을 소유한 오브젝트가 그들간의 관계를 관"
"리해야 합니다."

msgid ""
"One should favor keeping data in-house (internal to a scene) though as "
"placing a dependency on an external context, even a loosely coupled one, "
"still means that the node will expect something in its environment to be "
"true. The project's design philosophies should prevent this from happening. "
"If not, the code's inherent liabilities will force developers to use "
"documentation to keep track of object relations on a microscopic scale; this "
"is otherwise known as development hell. Writing code that relies on external "
"documentation for one to use it safely is error-prone by default."
msgstr ""
"데이터를 스스로(씬 내부에) 가지고 있는 것을 우선시해야 합니다. 느슨한 연결로 "
"구현했다 할지라도 외부 컨텍스트에 종속성을 두는 것은 여전히 노드가 외부 환경"
"에 의존적이 되는 것이기 때문입니다. 프로젝트의 디자인 철학에서 이러한 점을 미"
"리 예방해야 합니다. 그렇지 않으면, 원래 코드 자체가 책임져야할 것들이 개발자"
"가 오브젝트간 세세한 관계까지 문서를 통해 확인해야만 하는 상황이 됩니다. 이"
"를 개발 지옥이라고 합니다. 안전한 사용을 위해 외부 문서를 확인해야만 하는 코"
"드를 작성한다면, 기본적으로 오류가 발생하기 쉽습니다."

msgid ""
"To avoid creating and maintaining such documentation, one converts the "
"dependent node (\"child\" above) into a tool script that implements "
"``_get_configuration_warnings()``. Returning a non-empty PackedStringArray "
"from it will make the Scene dock generate a warning icon with the string(s) "
"as a tooltip by the node. This is the same icon that appears for nodes such "
"as the :ref:`Area2D <class_Area2D>` node when it has no child :ref:"
"`CollisionShape2D <class_CollisionShape2D>` nodes defined. The editor then "
"self-documents the scene through the script code. No content duplication via "
"documentation is necessary."
msgstr ""
"그러한 문서를 작성하고 유지하는 것을 피하려면, 종속 노드 (위의 \"child\")를 "
"``_get_configuration_warnings()`` 를 구현하는 tool 스크립트로 변환해야 합니"
"다. 여기서 비어있지 않은 PackedStringArray을 반환하면 씬 독은 노드의 툴팁으"
"로 문자열과 함께 경고 아이콘을 생성합니다. :ref:`Area2D <class_Area2D>` 에서 "
"자손 :ref:`CollisionShape2D <class_CollisionShape2D>` 노드가 없을 때 나타나"
"는 그런 아이콘입니다. 이렇게 하는 것은 편집기가 스크립트 코드를 통해 씬을 자"
"체적으로 문서화한 것과 같습니다. 문서를 통해 중복된 내용을 다시 기재할 필요"
"가 없습니다."

msgid ""
"A GUI like this can better inform project users of critical information "
"about a Node. Does it have external dependencies? Have those dependencies "
"been satisfied? Other programmers, and especially designers and writers, "
"will need clear instructions in the messages telling them what to do to "
"configure it."
msgstr ""
"이런 GUI는 프로젝트 사용자에게 노드에 대한 중요한 정보를 더 잘 전달할 수 있습"
"니다. 외부 종속성을 갖고 있나요? 그러한 종속성을 만족시켰나요? 다른 프로그래"
"머들, 특히 디자이너와 작가들에게 노드를 구성하기 위해 어떻게 해야하는지를 메"
"시지로 명확하게 설명해야 합니다."

#, fuzzy
msgid ""
"So, why does all this complex switcheroo work? Well, because scenes operate "
"best when they operate alone. If unable to work alone, then working with "
"others anonymously (with minimal hard dependencies, i.e. loose coupling) is "
"the next best thing. Inevitably, changes may need to be made to a class and "
"if these changes cause it to interact with other scenes in unforeseen ways, "
"then things will start to break down. The whole point of all this "
"indirection is to avoid ending up in a situation where changing one class "
"results in adversely effecting other classes dependent on it."
msgstr ""
"그럼 이런 복잡한 변환은 왜 하는걸까요? 씬은 홀로 작동할 때 가장 잘 작동하기 "
"때문입니다. 홀로 작동할 수 없는 경우엔 익명으로 다른 것들과 (느슨한 결합, 즉 "
"최소한의 종속성만으로) 작동하는 것이 차선입니다. 만약 클래스를 피치 못하게 변"
"경해야 하는 상황이 생기고 이 변경으로 인해 다른 씬과 예상하지 못한 방법으로 "
"상호작용이 일어난다면 문제가 생기기 시작합니다. 한 클래스의 결과의 변화가 다"
"른 클래스에 영향을 끼치는 일을 피할 수 있도록 하는게 이런 간접적인 접근을 지"
"향하는 이유입니다."

#, fuzzy
msgid ""
"Scripts and scenes, as extensions of engine classes, should abide by *all* "
"OOP principles. Examples include..."
msgstr ""
"스크립트와 씬은, 엔진 클래스의 확장 프로그램으로 *모든* 객체 지향 프로그래밍 "
"원칙을 준수해야 합니다. 예시는 다음을 포함합니다..."

msgid "`SOLID <https://en.wikipedia.org/wiki/SOLID>`_"
msgstr ""
"`SOLID (객체 지향 설계) <https://ko.wikipedia.org/wiki/"
"SOLID_(%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%EC%84%A4%EA%B3%84)>`_"

msgid "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"
msgstr "`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_"

msgid "`KISS <https://en.wikipedia.org/wiki/KISS_principle>`_"
msgstr "`KISS 원칙 <https://ko.wikipedia.org/wiki/KISS_%EC%9B%90%EC%B9%99>`_"

msgid "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"
msgstr "`YAGNI <https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it>`_"

msgid "Choosing a node tree structure"
msgstr "노드 트리 구조 선택"

msgid ""
"So, a developer starts work on a game only to stop at the vast possibilities "
"before them. They might know what they want to do, what systems they want to "
"have, but *where* to put them all? Well, how one goes about making their "
"game is always up to them. One can construct node trees in countless ways. "
"But, for those who are unsure, this helpful guide can give them a sample of "
"a decent structure to start with."
msgstr ""
"개발자가 게임을 만들기다 보면 막대한 가능성 때문에 멈춰서게 됩니다. 작업하고 "
"싶은 것이 무엇이고, 필요한 시스템이 뭔지는 알지만, *어디에* 그것들을 넣어야 "
"할까요? 음, 게임을 만드는 것은 항상 스스로에게 달려있습니다. 노드 트리는 무수"
"히 많은 방법으로 만들 수 있습니다. 하지만 잘 모르겠는 분들을 위해 이 가이드에"
"서 시작하기에 알맞은 구조 예시들을 보여드리겠습니다."

msgid ""
"A game should always have a sort of \"entry point\"; somewhere the developer "
"can definitively track where things begin so that they can follow the logic "
"as it continues elsewhere. This place also serves as a bird's eye view of "
"all of the other data and logic in the program. For traditional "
"applications, this would be the \"main\" function. In this case, it would be "
"a Main node."
msgstr ""
"게임은 항상 일종은 \"진입점\"을 갖고, 이 진입점은 개발자들이 어디서부터 게임"
"이 시작되는지 확실히 파악할 수 있어서 이후 로직을 명확하게 추적할 수 있게 해"
"줍니다. 이 지점은 프로그램의 모든 데이터와 로직을 확인하기 위한 큰 그림으로 "
"활용되기도 합니다. 전통적인 애플리케이션의 경우, 이것은 \"main\" 함수가 될 것"
"입니다. 우리의 경우 이는 Main 노드입니다."

msgid "Node \"Main\" (main.gd)"
msgstr "노드 \"Main\" (main.gd)"

msgid ""
"The ``main.gd`` script would then serve as the primary controller of one's "
"game."
msgstr "``main.gd`` 스크립트는 게임의 주된 컨트롤러 역할을 할 것입니다."

msgid ""
"Then one has their actual in-game \"World\" (a 2D or 3D one). This can be a "
"child of Main. In addition, one will need a primary GUI for their game that "
"manages the various menus and widgets the project needs."
msgstr ""
"그런 다음 실제 게임 내 \"World\" (2D나 3D)를 갖습니다. Main의 자손이 될 수 있"
"습니다. 그리고 프로젝트에 필요한 다양한 메뉴와 위젯을 관리하는 게임용 기본 "
"GUI가 필요합니다."

msgid "Node2D/Node3D \"World\" (game_world.gd)"
msgstr "Node2D/Node3D \"World\" (game_world.gd)"

msgid "Control \"GUI\" (gui.gd)"
msgstr "Control \"GUI\" (gui.gd)"

msgid ""
"When changing levels, one can then swap out the children of the \"World\" "
"node. :ref:`Changing scenes manually <doc_change_scenes_manually>` gives "
"users full control over how their game world transitions."
msgstr ""
"레벨을 변경할 때, \"World\" 노드의 자손을 바꾸면 됩니다. :ref:`씬을 수동으로 "
"바꾸는 것 <doc_change_scenes_manually>`\\ 으로 사용자는 게임 월드 전환 방식"
"을 완전히 제어할 수 있습니다."

msgid ""
"The next step is to consider what gameplay systems one's project requires. "
"If one has a system that..."
msgstr ""
"다음 단계는 이 프로젝트에는 무슨 게임 플레이 시스템이 필요한 지 고려해야 합니"
"다. 시스템은 다음을 갖고 있습니다..."

msgid "tracks all of its data internally"
msgstr "모든 데이터를 내부적으로 추적하고"

msgid "should be globally accessible"
msgstr "전역으로 접근해야 하고"

msgid "should exist in isolation"
msgstr "독립적으로 존재해야 하는 것"

msgid ""
"... then one should create an :ref:`autoload 'singleton' node "
"<doc_singletons_autoload>`."
msgstr ""
"... 그러려면 :ref:`오토로드 '싱글톤' 노드 <doc_singletons_autoload>`\\ 를 만"
"들어야 합니다."

#, fuzzy
msgid ""
"For smaller games, a simpler alternative with less control would be to have "
"a \"Game\" singleton that simply calls the :ref:`SceneTree."
"change_scene_to_file() <class_SceneTree_method_change_scene_to_file>` method "
"to swap out the main scene's content. This structure more or less keeps the "
"\"World\" as the main game node."
msgstr ""
"더 작은 게임일수록, 더 적은 제어로 \"Game\" 싱글톤을 갖는 간단한 대안이 필요"
"한데, :ref:`SceneTree.change_scene() <class_SceneTree_method_change_scene>` "
"\\ 이라고 하는 이 메서드는 메인 씬의 내용물을 바꿔 넣습니다. 이 구조는 "
"\"World\"를 메인 게임 노드로 어느정도는 유지해줍니다."

#, fuzzy
msgid ""
"Any GUI would need to also be a singleton; be a transitory part of the "
"\"World\"; or be manually added as a direct child of the root. Otherwise, "
"the GUI nodes would also delete themselves during scene transitions."
msgstr ""
"모든 GUI는 \"World\"의 일시적인 일부로, 싱글톤이 되어야 합니다, 아니면 수동으"
"로 루트의 자손으로 추가해야 합니다. 그렇지 않으면, GUI 노드는 씬을 전환하는 "
"동안 자신 또한 삭제됩니다."

msgid ""
"If one has systems that modify other systems' data, one should define those "
"as their own scripts or scenes rather than autoloads. For more information "
"on the reasons, please see the :ref:`Autoloads versus regular nodes "
"<doc_autoloads_versus_internal_nodes>` documentation."
msgstr ""
"다른 시스템의 데이터를 수정하는 시스템을 갖고 있다면, 오토로드보다는 자체 스"
"크립트나 씬으로 데이터를 정의해야 합니다. 그 이유에 대한 더 자세한 정보는 "
"ref:`'오토로드 vs. 내장 노드' <doc_autoloads_versus_internal_nodes>` 문서를 "
"참고하세요."

msgid ""
"Each subsystem within one's game should have its own section within the "
"SceneTree. One should use parent-child relationships only in cases where "
"nodes are effectively elements of their parents. Does removing the parent "
"reasonably mean that one should also remove the children? If not, then it "
"should have its own place in the hierarchy as a sibling or some other "
"relation."
msgstr ""
"게임 내 각 하위 시스템은 SceneTree 안에 자체 섹션을 가져야 합니다. 노드가 부"
"모의 실질적인 요소가 되는 경우에만 노드 자손 관계를 사용해야 합니다. 부모를 "
"제거하는 경우 자손이 반드시 같이 제거되어야 하나요? 그렇지 않다면 노드는 동기"
"나 다른 관계로서 계층 구조 내에 자리를 잡아야 합니다."

msgid ""
"In some cases, one needs these separated nodes to *also* position themselves "
"relative to each other. One can use the :ref:`RemoteTransform "
"<class_RemoteTransform3D>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>` nodes for this purpose. They will allow a target "
"node to conditionally inherit selected transform elements from the Remote\\* "
"node. To assign the ``target`` :ref:`NodePath <class_NodePath>`, use one of "
"the following:"
msgstr ""
"몇몇 경우에는, 분리된 노드 간의 상대적인 위치가 필요합니다. 이를 위해 :ref:"
"`RemoteTransform <class_RemoteTransform3D>` / :ref:`RemoteTransform2D "
"<class_RemoteTransform2D>`노드를 사용할 수 있습니다. 이를 사용하면 대상 노드"
"가 Remote\\* 노드의 선택된 트랜스폼 요소를 조건부로 상속할 수 있습니다. ``대"
"상`` :ref:`NodePath <class_NodePath>` 를 할당하려면 다음 방식 중 하나를 사용"
"합니다:"

msgid ""
"A reliable third party, likely a parent node, to mediate the assignment."
msgstr "지정하는 것을 조정하기 위한, 부모 노드와 같은, 신뢰할 수 있는 제 3자."

msgid ""
"A group, to easily pull a reference to the desired node (assuming there will "
"only ever be one of the targets)."
msgstr ""
"원하는 노드에 쉽게 참조를 끌어올 수 있는 그룹 (대상 하나만 속한다고 가정)."

msgid ""
"When should one do this? Well, this is subjective. The dilemma arises when "
"one must micro-manage when a node must move around the SceneTree to preserve "
"itself. For example..."
msgstr ""
"언제 이러한 방법을 사용해야 할까요? 여러분에게 달렸습니다. SceneTree 내에서 "
"노드가 여기저기 바뀌어야 할 때 마이크로매니지를 해야하는 딜레마가 발생합니"
"다. 예를 들어..."

msgid "Add a \"player\" node to a \"room\"."
msgstr "\"플레이어\" 노드를 \"방\"에 추가합니다."

msgid "Need to change rooms, so one must delete the current room."
msgstr "방을 바꿔야 해서, 현재 방을 삭제해야 합니다."

msgid ""
"Before the room can be deleted, one must preserve and/or move the player."
msgstr "방을 삭제할 수 있기 전, 플레이어를 보존하거나/혹은 움직여야 합니다."

msgid "Is memory a concern?"
msgstr "메모리가 걱정인가?"

msgid ""
"If not, one can just create the two rooms, move the player and delete the "
"old one. No problem."
msgstr ""
"걱정되지 않는다면, 그냥 두 개의 방을 만들고, 플레이어를 이동시키고, 이전 것"
"을 삭제합니다. 문제없습니다."

msgid "If so, one will need to..."
msgstr "걱정된다면, 아래와 같이 해야 합니다..."

msgid "Move the player somewhere else in the tree."
msgstr "플레이어를 트리 어딘가로 이동시킵니다."

msgid "Delete the room."
msgstr "방을 삭제합니다."

msgid "Instantiate and add the new room."
msgstr "새로운 방을 인스턴스화하고 추가합니다."

msgid "Re-add the player."
msgstr "플레이어를 다시 추가합니다."

#, fuzzy
msgid ""
"The issue is that the player here is a \"special case\"; one where the "
"developers must *know* that they need to handle the player this way for the "
"project. As such, the only way to reliably share this information as a team "
"is to *document* it. Keeping implementation details in documentation however "
"is dangerous. It's a maintenance burden, strains code readability, and "
"bloats the intellectual content of a project unnecessarily."
msgstr ""
"이 문제에서 플레이어는 \"특수한 상황\"에 있습니다, 개발자는 프로젝트를 위해 "
"플레이어를 이런 방식으로 다룰 줄 *알아야 하죠*. 즉, 팀원으로서 이 정보를 확실"
"히 공유하는 유일한 방법은 *문서화*\\ 하는 것입니다. 하지만 문서에 구현 방법"
"의 세부 사항을 유지하는 것은 위험합니다. 유지 관리의 부담과, 코드의 가독성을 "
"해치고, 불필요하게 프로젝트의 지적 내용을 부풀리기 때문입니다."

#, fuzzy
msgid ""
"In a more complex game with larger assets, it can be a better idea to simply "
"keep the player somewhere else in the SceneTree entirely. This results in:"
msgstr ""
"더 많은 자원을 사용하는 더 복잡한 게임이라면, 차라리 플레이어를 SceneTree 어"
"딘가에 통째로 유지하는 것이 더 좋은 생각일 수 있습니다. 이것이 의미하는 것"
"은..."

msgid "More consistency."
msgstr "더 일관성 있음."

msgid "No \"special cases\" that must be documented and maintained somewhere."
msgstr "문서화하거나 어딘가에 남겨둬야 하는 \"특수한 상황\"이 없음."

msgid ""
"No opportunity for errors to occur because these details are not accounted "
"for."
msgstr "이러한 세부 사항이 고려되지 않았기 때문에 오류가 발생하지 않음."

msgid ""
"In contrast, if one ever needs to have a child node that does *not* inherit "
"the transform of their parent, one has the following options:"
msgstr ""
"반대로 부모의 변형을 상속받지 *않는* 자손 노드가 필요하다면, 다음 옵션이 있습"
"니다:"

msgid ""
"The **declarative** solution: place a :ref:`Node <class_Node>` in between "
"them. As nodes with no transform, Nodes will not pass along such information "
"to their children."
msgstr ""
"**선언형** 해결: :ref:`Node <class_Node>`\\ 를 둘의 계층 구조 사이에 놓습니"
"다. 트랜스폼이 없는 노드이므로 노드는 자손들에게 부모의 정보를 전달하지 않을 "
"것입니다."

msgid ""
"The **imperative** solution: Use the ``top_level`` property for the :ref:"
"`CanvasItem <class_CanvasItem_property_top_level>` or :ref:`Node3D "
"<class_Node3D_property_top_level>` node. This will make the node ignore its "
"inherited transform."
msgstr ""
"**명령형** 해결: :ref:`CanvasItem <class_CanvasItem_method_set_as_toplevel>`"
"또는 :ref:`Node3D <class_Node3D_property_top_level>` 노드의 ``top_level`` 속"
"성을 사용합니다. 이렇게 하면 노드는 상속된 트랜스폼을 무시합니다."

msgid ""
"If building a networked game, keep in mind which nodes and gameplay systems "
"are relevant to all players versus those just pertinent to the authoritative "
"server. For example, users do not all need to have a copy of every players' "
"\"PlayerController\" logic. Instead, they need only their own. As such, "
"keeping these in a separate branch from the \"world\" can help simplify the "
"management of game connections and the like."
msgstr ""
"네트워크 게임을 만든다면, 어떤 노드와 게임 플레이 시스템이 모든 플레이어와 관"
"련 있는지, 단지 권위 있는 서버와 관련 있는지 알아야 합니다. 예를 들어, 사용자"
"는 모든 플레이어의 \"PlayerController\" 로직의 사본을 가질 필요가 없습니다. "
"대신 자신의 것만 있으면 됩니다. 따라서 \"World\"에서 그들을 분리하여 게임 연"
"결의 관리를 단순화할 수 있습니다."

msgid ""
"The key to scene organization is to consider the SceneTree in relational "
"terms rather than spatial terms. Are the nodes dependent on their parent's "
"existence? If not, then they can thrive all by themselves somewhere else. If "
"they are dependent, then it stands to reason that they should be children of "
"that parent (and likely part of that parent's scene if they aren't already)."
msgstr ""
"씬 조직의 핵심은 SceneTree를 공간적 용어보다는 관계적 용어로 생각하는 것입니"
"다. 노드가 부모의 존재에 의존적인가요? 그렇지 않다면, 그들은 다른 어딘가에서 "
"스스로 잘 있을 수 있을 겁니다. 의존적이라면, 그들은 부모의 자손으로 (그리고 "
"부모의 씬의 일부로) 존재해야 할 것입니다."

msgid ""
"Does this mean nodes themselves are components? Not at all. Godot's node "
"trees form an aggregation relationship, not one of composition. But while "
"one still has the flexibility to move nodes around, it is still best when "
"such moves are unnecessary by default."
msgstr ""
"이것이 노드가 구성 요소(component)라는 뜻일까요? 전혀 아닙니다. Godot의 노드 "
"트리는 집합(aggregation) 관계를 구성하는 것이지, 합성(composition)이 아닙니"
"다. 노드를 유연하게 이동할 수 있긴 하지만, 기본적으로 그러한 이동이 필요하지 "
"않은 것이 가장 좋습니다."

msgid "Translation status"
msgstr "번역 상태"
