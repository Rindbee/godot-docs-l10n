#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "GDScript의 정적 타이핑(Static typing)"

msgid "In this guide, you will learn:"
msgstr "이 가이드에서 다음 내용을 배울 것입니다:"

msgid "how to use static typing in GDScript;"
msgstr "GDScript에서 정적 타이핑 사용법"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"정적 타입은 변수, 상수, 함수, 매개변수, 반환 타입에 사용될 수 있습니다."

msgid "A brief look at static typing"
msgstr "정적 타이핑에 대한 간단한 설명"

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"전반적으로 타입형 프로그래밍은 보다 구조화된 경험을 제공합니다. 오류를 방지하"
"고 스크립트의 자체 문서화 부분을 개선하는 데 도움이 됩니다. 이는 팀과 작업하"
"거나 장기 프로젝트를 작업할 때 특히 유용합니다. 연구에 따르면 개발자는 대부분"
"의 시간을 다른 사람의 코드나 과거에 작성하고 잊어버린 스크립트를 읽는 데 보낸"
"다고 합니다. 코드가 더 명확하고 구조화될수록 더 빨리 이해할 수 있고 더 빨리 "
"앞으로 나아갈 수 있습니다."

msgid "How to use static typing"
msgstr "정적 타입 사용법"

msgid "What can be a type hint"
msgstr "유형 힌트가 될 수 있는 것"

msgid "Example:"
msgstr "예시:"

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"내장 타입으로 캐스트를 시도하다가 실패한다면 Godot는 오류를 내보낼 것입니다."

msgid "Safe lines"
msgstr "안전한 라인(safe line)"

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"이는 자식 노드를 가져올 때 발생합니다. 타이머를 예로 들어 보겠습니다. 동적 코"
"드를 사용하면 ``$Timer``\\ 로 노드를 가져올 수 있습니다. GDScript는 `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__\\ 을 지원하므로 타이"
"머가 ``Timer`` 유형인 경우에도 ``Node``\\ 와 ``Object``\\ 의 두 개의 클래스"
"를 확장합니다. 동적 GDScript를 사용하면 호출에 필요한 메서드가 있는 한 여러분"
"은 노드 타입을 신경 쓰지 않아도 됩니다."

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "안전하지 않은 라인(line 7) vs 안전한 라인(line 6 and 8)"

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr "편집기 설정에서 안전한 라인을 끄거나 색상을 바꿀 수 있습니다."

msgid "Typed or dynamic: stick to one style"
msgstr "타입형 혹은 동적: 하나의 스타일을 고수하기"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"타입형 GDScript와 동적 GDScript는 같은 프로젝트에 공존할 수 있습니다. 하지만 "
"코드베이스의 일관성과 동료들을 위해, 둘 중 하나의 스타일을 고수하는 것을 권장"
"합니다. 같은 가이드라인을 따른다면 모두가 함께 일하기 더 쉬워지고, 다른 사람"
"의 코드를 더 빠르게 읽고 이해하게 될 것입니다."

msgid "pass"
msgstr "pass"

msgid "Warning system"
msgstr "경고 시스템(Warning system)"

msgid "Summary"
msgstr "요약"
