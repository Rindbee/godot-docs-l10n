#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the ArrayMesh"
msgstr "Utilisation du ArrayMesh"

msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`."
msgstr ""
"Ce tutoriel présente les bases de l'utilisation d'un :ref:`ArrayMesh "
"<class_arraymesh>`."

msgid ""
"The first parameter is the ``PrimitiveType``, an OpenGL concept that "
"instructs the GPU how to arrange the primitive based on the vertices given, "
"i.e. whether they represent triangles, lines, points, etc. See :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` for the options available."
msgstr ""
"Le premier est le ``PrimitiveType``, c'est un concept OpenGL qui indique au "
"GPU comment arranger la primitive en fonction des sommets donnés, qu'il "
"s'agisse de triangles, de lignes, de points, etc. Voir :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` pour les options disponibles."

msgid ""
"The second parameter, ``arrays``, is the actual Array that stores the mesh "
"information. The array is a normal Godot array that is constructed with "
"empty brackets ``[]``. It stores a ``Packed**Array`` (e.g. "
"PackedVector3Array, PackedInt32Array, etc.) for each type of information "
"that will be used to build the surface."
msgstr ""
"Le deuxième paramètre, ``arrays``, est le véritable Array qui stocke les "
"informations de maillage. Le tableau est un tableau Godot normal qui est "
"construit avec des crochets vides ``[]``. Il stocke un ``Packed**Array`` "
"(par exemple, PackedVector3Array, PackedInt32Array, etc.) pour chaque type "
"d'informations qui seront utilisées pour construire la surface."

msgid "Index"
msgstr "Index"

msgid "Mesh.ArrayType Enum"
msgstr "Mesh.ArrayType Enum"

msgid "Array type"
msgstr "Type de tableau (array)"

msgid "0"
msgstr "0"

msgid "``ARRAY_VERTEX``"
msgstr "``ARRAY_VERTEX``"

msgid ""
":ref:`PackedVector3Array <class_PackedVector3Array>` or :ref:"
"`PackedVector2Array <class_PackedVector2Array>`"
msgstr ""
":ref:`PackedVector3Array <class_PackedVector3Array>` ou :ref:"
"`PackedVector2Array <class_PackedVector2Array>`"

msgid "1"
msgstr "1"

msgid "``ARRAY_NORMAL``"
msgstr "``ARRAY_NORMAL``"

msgid ":ref:`PackedVector3Array <class_PackedVector3Array>`"
msgstr ":ref:`PackedVector3Array <class_PackedVector3Array>`"

msgid "2"
msgstr "2"

msgid "``ARRAY_TANGENT``"
msgstr "``ARRAY_TANGENT``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` or :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 floats. The "
"first 3 floats determine the tangent, and the last float the binormal "
"direction as -1 or 1."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` ou :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` en groupe de 4 flottants. "
"Les trois premiers flottants déterminent la tangente, et le dernier flottant "
"la direction binormale en -1 ou 1."

msgid "3"
msgstr "3"

msgid "``ARRAY_COLOR``"
msgstr "``ARRAY_COLOR``"

msgid ":ref:`PackedColorArray <class_PackedColorArray>`"
msgstr ":ref:`PackedColorArray <class_PackedColorArray>`"

msgid "4"
msgstr "4"

msgid "``ARRAY_TEX_UV``"
msgstr "``ARRAY_TEX_UV``"

msgid ""
":ref:`PackedVector2Array <class_PackedVector2Array>` or :ref:"
"`PackedVector3Array <class_PackedVector3Array>`"
msgstr ""
":ref:`PackedVector2Array <class_PackedVector2Array>` ou :ref:"
"`PackedVector3Array <class_PackedVector3Array>`"

msgid "5"
msgstr "5"

msgid "``ARRAY_TEX_UV2``"
msgstr "``ARRAY_TEX_UV2``"

msgid "10"
msgstr "10"

msgid "``ARRAY_BONES``"
msgstr "``ARRAY_BONES``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` of groups of 4 floats "
"or :ref:`PackedInt32Array <class_PackedInt32Array>` of groups of 4 ints. "
"Each group lists indexes of 4 bones that affects a given vertex."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` en groupes de 4 "
"flottants ou :ref:`PackedInt32Array <class_PackedInt32Array>` en groupes de "
"4 entiers. Chaque groupe énumère les index des 4 os qui affectent un sommet "
"donné."

msgid "11"
msgstr "11"

msgid "``ARRAY_WEIGHTS``"
msgstr "``ARRAY_WEIGHTS``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` or :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 floats. Each "
"float lists the amount of weight the corresponding bone in ``ARRAY_BONES`` "
"has on a given vertex."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` ou :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` en groupes de 4 flottants. "
"Chaque flottant liste la quantité de poids que l'os correspondant dans "
"``ARRAY_BONES`` a sur un sommet donné."

msgid "12"
msgstr "12"

msgid "``ARRAY_INDEX``"
msgstr "``ARRAY_INDEX``"

msgid ":ref:`PackedInt32Array <class_PackedInt32Array>`"
msgstr ":ref:`PackedInt32Array <class_PackedInt32Array>`"

msgid "Next, add a script to the MeshInstance3D."
msgstr "Ensuite, ajoutez un script au MeshInstance3D."

msgid "Under ``_ready()``, create a new Array."
msgstr "Sous ``_ready()``, créez un nouvel Array."

msgid ""
"This will be the array that we keep our surface information in - it will "
"hold all the arrays of data that the surface needs. Godot will expect it to "
"be of size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""
"Ce sera le tableau dans lequel nous conserverons nos informations de "
"surface, il contiendra tous les tableaux de données dont la surface a "
"besoin. Godot s'attendra à ce qu'il soit de taille ``Mesh.ARRAY_MAX``, alors "
"redimensionnez-le en conséquence."

msgid "Next create the arrays for each data type you will use."
msgstr ""
"Créez ensuite les arrays pour chaque type de données que vous utiliserez."

msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""
"Une fois que vous avez rempli vos arrays de données avec votre géométrie, "
"vous pouvez créer un maillage en ajoutant chaque array à ``surface_array``, "
"puis en validant le maillage."

msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""
"Dans cet exemple, nous avons utilisé ``Mesh.PRIMITIVE_TRIANGLES``, mais vous "
"pouvez utiliser n'importe quel type primitif disponible à partir de mesh."

msgid "Put together, the full code looks like:"
msgstr "Mis ensemble, le code complet ressemble à ceci :"

msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code for generating a sphere."
msgstr ""
"Le code qui va au milieu peut être ce que vous voulez. Ci-dessous, nous "
"présenterons un exemple de code pour générer une sphère."

msgid "Generating geometry"
msgstr "Génération de la géométrie"

msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""
"Voici un exemple de code pour générer une sphère. Bien que le code soit "
"présenté en GDScript, il n'y a rien de spécifique à Godot dans l'approche de "
"sa génération. Cette implémentation n'a rien de particulier à voir avec "
"ArrayMeshes et n'est qu'une approche générique pour générer une sphère. Si "
"vous avez du mal à comprendre ou si vous souhaitez en savoir plus sur la "
"géométrie procédurale en général, vous pouvez utiliser n'importe quel "
"tutoriel que vous trouverez en ligne."

msgid "Saving"
msgstr "Enregistrer"

msgid ""
"Finally, we can use the :ref:`ResourceSaver <class_resourcesaver>` class to "
"save the ArrayMesh. This is useful when you want to generate a mesh and then "
"use it later without having to re-generate it."
msgstr ""
"Enfin, nous pouvons sauvegarder l'ArrayMesh en utilisant la classe :ref:"
"`ResourceSaver <class_resourcesaver>`. Ceci est utile lorsque vous souhaitez "
"générer un maillage, puis l'utiliser plus tard sans avoir à le générer de "
"nouveau."
