#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "What is bisecting?"
msgstr "Что такое рассечение?"

msgid ""
"To start bisecting, you must first determine the commit hashes (identifiers) "
"of the \"bad\" and \"good\" build. \"bad\" refers to the build that exhibits "
"the bug, whereas \"good\" refers to the version that doesn't exhibit the "
"bug. If you're using a pre-release build as the \"good\" or \"bad\" build, "
"browse the `download mirror <https://downloads.tuxfamily.org/godotengine/"
">`__, go to the folder that contains the pre-release you downloaded and look "
"for the ``README.txt`` file. The commit hash is written inside that file."
msgstr ""
"Чтобы начать биссектрису, необходимо сначала определить хэши "
"(идентификаторы) коммитов \"плохой\" и \"хорошей\" сборки. \"Плохой\" "
"называется сборка, в которой обнаружена ошибка, а \"хорошей\" - версия, в "
"которой ошибка не обнаружена. Если вы используете предварительную сборку в "
"качестве \"хорошей\" или \"плохой\" сборки, просмотрите зеркало загрузки ` "
"<https://downloads.tuxfamily.org/godotengine/>` __, перейдите в папку, "
"содержащую предварительную сборку, которую вы загрузили, и найдите файл "
"``README.txt``. Хэш коммита записан внутри этого файла."

msgid ""
"After entering one of the commands above, Git will switch to a different "
"commit. You should now build Godot again, try to reproduce the bug, then "
"enter ``git bisect good`` or ``git bisect bad`` depending on the result. "
"You'll have to repeat this several times. The longer the commit range, the "
"more steps will be required. 5 to 10 steps are usually sufficient to find "
"most regressions; Git will remind you of the number of steps remaining (in "
"the worst case scenario)."
msgstr ""
"После ввода одной из команд, указанных выше, Git переключится на другой "
"коммит. Теперь вы должны снова собрать Godot, попытаться воспроизвести "
"ошибку, затем ввести ``git bisect good`` или ``git bisect bad`` в "
"зависимости от результата. Вам придется повторить это несколько раз. Чем "
"больше диапазон фиксации, тем больше шагов потребуется. Обычно 5-10 шагов "
"достаточно, чтобы найти большинство регрессий; Git напомнит вам о количестве "
"оставшихся шагов (в худшем случае)."
