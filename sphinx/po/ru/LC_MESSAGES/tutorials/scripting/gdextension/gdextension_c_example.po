#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDExtension C example"
msgstr "Пример GDExtension на C"

msgid "Introduction"
msgstr "Введение"

msgid ""
"This is a simple example on how to work with GDExtension directly with C "
"code. Note that the API is not meant to be used directly, so this will "
"definitely be quite verbose and require a lot of steps even for a small "
"example. However, it serves as a reference for creating bindings for a "
"different language. It is still possible to use the API directly if you "
"prefer, which might be convenient when only binding a third-party library."
msgstr ""
"Это простой пример работы с GDExtension напрямую на языке C. Обратите "
"внимание, что API не предназначен для прямого использования, поэтому даже "
"для небольшого примера потребуется много шагов. Однако он служит "
"справочником для создания привязок для другого языка. По-прежнему возможно "
"использовать API напрямую, что может быть удобно при привязке сторонней "
"библиотеки."

msgid ""
"In this example we will create a custom node that moves a sprite on the "
"screen based on the user's parameters. While very simple, it serves to show "
"how to do some of the things with GDExtension, like registering custom "
"classes with methods, properties, and signals. It gives an insight on the "
"GDExtension API."
msgstr ""
"В этом примере мы создадим пользовательский узел, который перемещает спрайт "
"по экрану на основе параметров пользователя. Хотя он очень прост, он служит "
"для демонстрации некоторых возможностей GDExtension, таких как регистрация "
"пользовательских классов с методами, свойствами и сигналами. Это даёт "
"представление об API GDExtension."

msgid "Setting up the project"
msgstr "Настройка проекта"

msgid "There are a few prerequisites you'll need:"
msgstr "Вам необходимо выполнить несколько условий:"

msgid "a Godot 4.2 (or later) executable,"
msgstr "исполняемый файл Godot 4.2 (или новее),"

msgid "a C compiler,"
msgstr "компилятор C,"

msgid "SCons as a build tool."
msgstr "SCons в качестве инструмента сборки."

msgid ""
"Since this is using the API directly, there's no need to use the `godot-cpp "
"repository <https://github.com/godotengine/godot-cpp>`__."
msgstr ""
"Поскольку здесь используется API напрямую, нет необходимости использовать "
"репозиторий `godot-cpp <https://github.com/godotengine/godot-cpp>`__."

msgid "File structure"
msgstr "Структура файла"

msgid "To organize our files, we're gonna split into mainly two folders:"
msgstr "Для организации файлов мы разделим их на две основные папки:"

msgid ""
"We also need a copy of the ``gdextension_interface.h`` header from the Godot "
"source code, which can be obtained directly from the Godot executable by "
"running the following command:"
msgstr ""
"Нам также понадобится копия заголовочного файла ``gdextension_interface.h`` "
"из исходного кода Godot, который можно получить напрямую из исполняемого "
"файла Godot, выполнив команду:"

msgid ""
"This creates the header in the current folder, so you can just copy it to "
"the ``src`` folder in the example project."
msgstr ""
"Это создаст заголовочный файл в текущей папке, поэтому вы можете просто "
"скопировать его в папку ``src`` в проекте примера."

msgid ""
"Lastly, there's another source of information we need to refer to, which is "
"the JSON file with the Godot API reference. This file won't be used by the "
"code directly, we will only use it to extract some information manually."
msgstr ""
"Наконец, есть ещё один источник информации, к которому нам нужно обращаться "
"- JSON-файл со справочником API Godot. Этот файл не будет использоваться "
"кодом напрямую, мы будем использовать его только для ручного извлечения "
"некоторой информации."

msgid "To get this JSON file, just call the Godot executable:"
msgstr "Чтобы получить этот JSON-файл, просто вызовите исполняемый файл Godot:"

msgid ""
"The resulting ``extension_api.json`` file will be created in the current "
"folder. You can copy this file to the example folder to have it handy."
msgstr ""
"Результирующий файл ``extension_api.json`` будет создан в текущей папке. Вы "
"можете скопировать этот файл в папку примера для удобства."

msgid ""
"This extension is targeting Godot 4.2, but it should work on later versions "
"as well. If you want to target a different minimal version, make sure to get "
"the header and the JSON from the version Godot version you are targeting."
msgstr ""
"Это расширение предназначено для Godot 4.2, но должно работать и в более "
"поздних версиях. Если вы хотите поддерживать другую минимальную версию, "
"убедитесь, что получили заголовочный файл и JSON из версии Godot, которую вы "
"используете."

msgid "Buildsystem"
msgstr "Система сборки"

msgid ""
"Using a buildsystem makes our life a lot easier when dealing with C code. "
"For the sake of convenience, we'll use SCons since it's the same as what "
"Godot itself uses."
msgstr ""
"Использование системы сборки значительно упрощает работу с кодом на C. Для "
"удобства мы будем использовать SCons, так как он используется самим Godot."

msgid ""
"The following ``SConstruct`` file is a simple one that will build your "
"extension to the current platform that you are using, be it Linux, macOS, or "
"Windows. This will be a non-optimized build for debugging purposes. It also "
"assumes a 64-bit build, which is relevant for some parts of the example "
"code. Making other build types and cross-compilation is out of the scope of "
"this tutorial. Save this file to the root folder."
msgstr ""
"Следующий файл ``SConstruct`` - это простой файл, который соберёт ваше "
"расширение для текущей платформы, будь то Linux, macOS или Windows. Это "
"будет неоптимизированная сборка для целей отладки. Он также предполагает 64-"
"битную сборку, что важно для некоторых частей примера кода. Создание других "
"типов сборок и кросс-компиляция выходят за рамки данного руководства. "
"Сохраните этот файл в корневую папку."

msgid ""
"This will include all C files in the ``src`` folder, so we don't need to "
"change this file when adding new source files."
msgstr ""
"Это включит все C-файлы в папке ``src``, поэтому нам не нужно изменять этот "
"файл при добавлении новых исходных файлов."

msgid "Initializing the extension"
msgstr "Инициализация расширения"

msgid ""
"The first bit of code will be responsible for initializing the extension. "
"This is what makes Godot aware of what our GDExtension provides, such as "
"classes and plugins."
msgstr ""
"Первый фрагмент кода будет отвечать за инициализацию расширения. Это то, что "
"позволяет Godot узнать, что предоставляет наше GDExtension, например классы "
"и плагины."

msgid ""
"Create the file ``init.h`` in the ``src`` folder, with the following "
"contents:"
msgstr "Создайте файл ``init.h`` в папке ``src`` со следующим содержимым:"

msgid ""
"The functions declared here have the signatures expected by the GDExtension "
"API."
msgstr "Объявленные здесь функции имеют сигнатуры, ожидаемые API GDExtension."

msgid ""
"Note the inclusion of the ``defs.h`` file. This is one of our helpers to "
"simplify writing the extension code. For now it will only contain the "
"definition of ``GDE_EXPORT``, a macro that makes the function public in the "
"shared library so Godot can properly call it. This macro helps abstracting "
"what each compiler expects."
msgstr ""
"Обратите внимание на включение файла ``defs.h``. Это один из наших "
"вспомогательных файлов для упрощения написания кода расширения. Пока он "
"будет содержать только определение ``GDE_EXPORT`` - макроса, который делает "
"функцию публичной в общей библиотеке, чтобы Godot мог её правильно вызывать. "
"Этот макрос помогает абстрагировать требования разных компиляторов."

msgid ""
"Create the ``defs.h`` file in the ``src`` folder with the following contents:"
msgstr "Создайте файл ``defs.h`` в папке ``src`` со следующим содержимым:"

msgid ""
"We also include some standard headers to make things easier. Now we only "
"have to include ``defs.h`` and those will come as a bonus."
msgstr ""
"Мы также включаем некоторые стандартные заголовки для упрощения работы. "
"Теперь нам достаточно включить ``defs.h``, и они придут как бонус."

msgid ""
"Now, let's implement the functions we just declared. Create a file called "
"``init.c`` in the ``src`` folder and add this code:"
msgstr ""
"Теперь реализуем объявленные функции. Создайте файл ``init.c`` в папке "
"``src`` и добавьте следующий код:"

msgid ""
"What this does is set up the initialization data that Godot expects. The "
"functions to initialize and deinitialize are set so Godot will call then "
"when needed. It also sets the initialization level which varies per "
"extension. Since we plan to add a custom node, the ``SCENE`` level is enough."
msgstr ""
"Это настраивает данные инициализации, которые ожидает Godot. Функции "
"инициализации и деинициализации установлены, чтобы Godot вызывал их при "
"необходимости. Также устанавливается уровень инициализации, который "
"варьируется в зависимости от расширения. Поскольку мы планируем добавить "
"пользовательский узел, уровня ``SCENE`` достаточно."

msgid ""
"We will fill the ``initialize_gdexample_module()`` function later to "
"register our custom class."
msgstr ""
"Позже мы заполним функцию ``initialize_gdexample_module()`` для регистрации "
"нашего пользовательского класса."

msgid "A basic class"
msgstr "Базовый класс"

msgid ""
"In order to make an actual node, first we'll create a C struct to hold data "
"and functions that will act as methods. The plan is to make this a custom "
"node that inherits from :ref:`Sprite2D <class_Sprite2D>`."
msgstr ""
"Чтобы создать реальный узел, сначала мы создадим структуру на C для хранения "
"данных и функций, которые будут действовать как методы. Планируется сделать "
"это пользовательским узлом, наследующим от :ref:`Sprite2D <class_Sprite2D>`."

msgid ""
"Create a file called ``gdexample.h`` in the ``src`` folder with the "
"following contents:"
msgstr "Создайте файл ``gdexample.h`` в папке ``src`` со следующим содержимым:"

msgid ""
"Noteworthy here is the ``object`` field, which holds a pointer to the Godot "
"object, and the ``gdexample_class_bind_methods()`` function, which will "
"register the metadata of our custom class (properties, methods, and "
"signals). The latter is not entirely necessary, as we can do it when "
"registering the class, but it makes clearer to separate the concerns and let "
"our class register its own metadata."
msgstr ""
"Примечательны здесь поле ``object``, которое содержит указатель на объект "
"Godot, и функция ``gdexample_class_bind_methods()``, которая зарегистрирует "
"метаданные нашего пользовательского класса (свойства, методы и сигналы). "
"Последнее не совсем необходимо, так как мы можем сделать это при регистрации "
"класса, но это делает разделение ответственности более чётким и позволяет "
"нашему классу регистрировать свои собственные метаданные."

msgid ""
"The ``object`` field is necessary because our class will inherit a Godot "
"class. Since we can't inherit it directly, as we are not interacting with "
"the source code (and C doesn't even have classes), we instead tell Godot to "
"create an object of a type it knows and attach our extension to it. We will "
"need the reference to such objects when calling methods on the parent class, "
"for instance."
msgstr ""
"Поле ``object`` необходимо, потому что наш класс будет наследовать класс "
"Godot. Поскольку мы не можем наследовать его напрямую (мы не взаимодействуем "
"с исходным кодом, и в C даже нет классов), мы вместо этого говорим Godot "
"создать объект известного ему типа и прикрепить наше расширение к нему. Нам "
"понадобится ссылка на такие объекты, например, при вызове методов "
"родительского класса."

msgid ""
"Let's create the source counterpart of this header. Create the file "
"``gdexample.c`` in the ``src`` folder and add the following code to it:"
msgstr ""
"Создадим исходный файл для этого заголовка. Создайте файл ``gdexample.c`` в "
"папке ``src`` и добавьте в него следующий код:"

msgid ""
"As we don't have anything to do with those functions yet, they'll stay empty "
"for a while."
msgstr ""
"Поскольку нам пока нечего делать с этими функциями, они останутся пустыми на "
"некоторое время."

msgid ""
"The next step is registering our class. However, in order to do so we need "
"to create a :ref:`StringName <class_StringName>` and for that we have to get "
"a function from the GDExtension API. Since we'll need this a few times and "
"we'll also need other things, let's create a wrapper API to facilitate this "
"kind of chore."
msgstr ""
"Следующий шаг - регистрация нашего класса. Однако для этого нам нужно "
"создать :ref:`StringName <class_StringName>`, а для этого нужно получить "
"функцию из API GDExtension. Поскольку нам это понадобится несколько раз, и "
"нам также понадобятся другие вещи, давайте создадим обёртку API для "
"облегчения этой рутины."

msgid "A wrapper API"
msgstr "Обёртка API"

msgid "We'll start by creating an ``api.h`` file in the ``src`` folder:"
msgstr "Начнём с создания файла ``api.h`` в папке ``src``:"

msgid ""
"This file will include many other helpers as we fill our extension with "
"something useful. For now it only has a pointer to a function that creates a "
"StringName from a C string (in Latin-1 encoding) and another to destruct a "
"StringName, which we'll need to use to avoid leaking memory, as well as the "
"function to register a class, which is our initial goal."
msgstr ""
"Этот файл будет включать множество других вспомогательных функций по мере "
"наполнения нашего расширения полезным содержимым. Пока в нём есть только "
"указатель на функцию, создающую StringName из C-строки (в кодировке "
"Latin-1), и другая для уничтожения StringName, которые нам понадобятся, "
"чтобы избежать утечек памяти, а также функция регистрации класса, что "
"является нашей первоначальной целью."

msgid ""
"We also keep a reference to the ``class_library`` here. This is something "
"that Godot provides to us when initializing the extension and we'll need to "
"use it when registering the things we create so Godot can tell which "
"extension is making the call."
msgstr ""
"Мы также сохраняем здесь ссылку на ``class_library``. Это то, что Godot "
"предоставляет нам при инициализации расширения, и нам нужно будет "
"использовать это при регистрации создаваемых объектов, чтобы Godot мог "
"определить, какое расширение делает вызов."

msgid ""
"There's also a function to load those function pointers from the GDExtension "
"API."
msgstr ""
"Также есть функция для загрузки этих указателей функций из API GDExtension."

msgid ""
"Let's work on the source counterpart of this header. Create the ``api.c`` "
"file in the ``src`` folder, adding the following code:"
msgstr ""
"Давайте поработаем над исходным файлом для этого заголовка. Создайте файл "
"``api.c`` в папке ``src``, добавив следующий код:"

msgid ""
"The first important thing here is ``p_get_proc_address``. This a function "
"from the GDExtension API that is passed during initialization. You can use "
"this function to request specific functions from the API by their name. Here "
"we are caching the results so we don't have to keep a reference for "
"``p_get_proc_address`` everywhere and use our wrapper instead."
msgstr ""
"Первая важная вещь здесь - ``p_get_proc_address``. Это функция из API "
"GDExtension, которая передаётся во время инициализации. Вы можете "
"использовать эту функцию для запроса конкретных функций API по их имени. "
"Здесь мы кэшируем результаты, чтобы не хранить ссылку на "
"``p_get_proc_address`` повсюду и вместо этого использовать нашу обёртку."

msgid ""
"At the start we request the ``variant_get_ptr_destructor()`` function. This "
"is not going to be used outside of this function, so we don't add to our "
"wrapper and only cache it locally. The cast is necessary to silence compiler "
"warnings."
msgstr ""
"В начале мы запрашиваем функцию ``variant_get_ptr_destructor()``. Она не "
"будет использоваться вне этой функции, поэтому мы не добавляем её в нашу "
"обёртку, а только кэшируем локально. Приведение типа необходимо для "
"подавления предупреждений компилятора."

msgid ""
"Then we get the function that creates a StringName from a C string, exactly "
"what we mentioned before as a needed function. We store that in our "
"``constructors`` struct."
msgstr ""
"Затем мы получаем функцию, создающую StringName из C-строки, именно то, что "
"мы упоминали ранее как необходимую функцию. Мы сохраняем её в нашей "
"структуре ``constructors``."

msgid ""
"Next, we use the ``variant_get_ptr_destructor()`` function we just got to "
"query for the destructor for StringName, using the enum value from "
"``gdextension_interface.h`` API as a parameter. We could get destructors for "
"other types in a similar manner, but we'll limit ourselves to what is needed "
"for the example."
msgstr ""
"Далее мы используем только что полученную функцию "
"``variant_get_ptr_destructor()`` для запроса деструктора StringName, "
"используя значение перечисления из API ``gdextension_interface.h`` в "
"качестве параметра. Мы могли бы получить деструкторы для других типов "
"аналогичным образом, но ограничимся тем, что необходимо для примера."

msgid ""
"Lastly, we get the ``classdb_register_extension_class2()`` function, which "
"we'll need in order to register our custom class."
msgstr ""
"Наконец, мы получаем функцию ``classdb_register_extension_class2()``, "
"которая понадобится нам для регистрации нашего пользовательского класса."

msgid ""
"You may wonder why the ``2`` is there in the function name. This means it's "
"the second version of this function. The old version is kept to ensure "
"backwards compatibility with older extensions, but since we have the second "
"version available, it's best to use the new one, because we don't intend to "
"support older Godot versions in this example."
msgstr ""
"Вам может быть интересно, почему в имени функции есть ``2``. Это означает, "
"что это вторая версия этой функции. Старая версия сохраняется для "
"обеспечения обратной совместимости со старыми расширениями, но поскольку у "
"нас доступна вторая версия, лучше использовать новую, так как в этом примере "
"мы не планируем поддерживать старые версии Godot."

msgid ""
"The ``gdextension_interface.h`` header documents in which Godot version each "
"function was introduced."
msgstr ""
"Заголовочный файл ``gdextension_interface.h`` документирует, в какой версии "
"Godot была введена каждая функция."

msgid ""
"We also define the ``class_library`` variable here, which will be set during "
"initialization."
msgstr ""
"Мы также определяем здесь переменную ``class_library``, которая будет "
"установлена во время инициализации."

msgid ""
"Speaking of initialization, now we have to change the ``init.c`` file in "
"order to fill the things we just added:"
msgstr ""
"Говоря об инициализации, теперь нам нужно изменить файл ``init.c``, чтобы "
"заполнить то, что мы только что добавили:"

msgid ""
"Here we set the ``class_library`` as needed and call our new ``load_api()`` "
"function. Don't forget to also include the new headers at the top of this "
"file:"
msgstr ""
"Здесь мы устанавливаем ``class_library`` по мере необходимости и вызываем "
"нашу новую функцию ``load_api()``. Не забудьте также включить новые "
"заголовки в верхней части этого файла:"

msgid ""
"Since we are here, we can register our new custom class. Let's fill the "
"``initialize_gdexample_module()`` function:"
msgstr ""
"Раз уж мы здесь, мы можем зарегистрировать наш новый пользовательский класс. "
"Давайте заполним функцию ``initialize_gdexample_module()``:"

msgid "Conclusion"
msgstr "Заключение"
