#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDExtension C++ example"
msgstr "Пример C++ с GDExtension"

msgid "Introduction"
msgstr "Введение"

msgid ""
"The C++ bindings for GDExtension are built on top of the C GDExtension API "
"and provide a nicer way to \"extend\" nodes and other built-in classes in "
"Godot using C++. This new system allows the extension of Godot to nearly the "
"same level as statically linked C++ modules."
msgstr ""
"Привязки C++ для GDExtension построены поверх C API GDExtension и "
"предоставляют более удобный способ \"расширять\" узлы и другие встроенные "
"классы Godot, используя C++. Эта новая система позволяет расширять Godot "
"почти на том же уровне, что и статически скомпонованные модули C++."

msgid ""
"You can download the included example in the test folder of the godot-cpp "
"repository `on GitHub <https://github.com/godotengine/godot-cpp>`__."
msgstr ""
"Примеры можно загрузить из папки test в репозитории godot-cpp `на GitHub "
"<https://github.com/godotengine/godot-cpp>`__."

msgid "Setting up the project"
msgstr "Настройка проекта"

msgid "There are a few prerequisites you'll need:"
msgstr "Вам необходимо выполнить несколько условий:"

msgid "a Godot 4 executable,"
msgstr "Исполняемый файл (.exe) Godot 4,"

msgid "a C++ compiler,"
msgstr "C++ компилятор,"

msgid "SCons as a build tool,"
msgstr "SCons как инструмент сборки,"

msgid ""
"a copy of the `godot-cpp repository <https://github.com/godotengine/godot-"
"cpp>`__."
msgstr ""
"копия `godot-cpp репозитория <https://github.com/godotengine/godot-cpp>`__."

msgid ""
"See also :ref:`Configuring an IDE <toc-devel-configuring_an_ide>` "
"and :ref:`Compiling <toc-devel-compiling>` as the build tools are identical "
"to the ones you need to compile Godot from source."
msgstr ""
"См. также разделы :ref:`Настройка IDE <toc-devel-configuring_an_ide>` "
"и :ref:`Компиляция <toc-devel-compiling>`, поскольку инструменты сборки "
"идентичны тем, которые используются для компиляции Godot из исходного кода."

msgid ""
"You can download the `godot-cpp repository <https://github.com/godotengine/"
"godot-cpp>`__ from GitHub or let Git do the work for you. Note that this "
"repository has different branches for different versions of Godot. "
"GDExtensions will not work in older versions of Godot (only Godot 4 and up) "
"and vice versa, so make sure you download the correct branch."
msgstr ""
"Вы можете загрузить `godot-cpp репозиторий <https://github.com/godotengine/"
"godot-cpp>`__ из GitHub, или позволить Git сделать это за вас. Обратите "
"внимание, что в этом репозитории есть разные ветки для разных версий Godot. "
"GDExtensions не будет работать в старых версиях Godot (Только версии 4 и "
"выше) и наоборот, поэтому обязательно скачивайте правильную ветку."

msgid ""
"To use `GDExtension <https://godotengine.org/article/introducing-gd-"
"extensions>`__ you need to use the godot-cpp branch that matches the version "
"of Godot that you are targeting. For example, if you're targeting Godot 4.1, "
"use the ``4.1`` branch. Throughout this tutorial we use ``4.x``, which will "
"need to be replaced with the version of Godot you are targeting."
msgstr ""
"Чтобы использовать `GDExtension <https://godotengine.org/article/introducing-"
"gd-extensions>`__, вам потребуется ветка godot-cpp, соответствующая версии "
"Godot, с которой вы работаете. Например, если вы используете Godot 4.1, "
"применяйте ветку ``4.1``. В этом руководстве мы используем обозначение "
"``4.x`` — замените его на актуальную для вас версию Godot."

msgid ""
"The ``master`` branch is the development branch which is updated regularly "
"to work with Godot's ``master`` branch."
msgstr ""
"``Master`` - ветка разработки, которая обновляется регулярно, для работы с "
"веткой ``master`` Godot."

msgid ""
"Our long-term goal is that GDExtensions targeting an earlier version of "
"Godot will work in later minor versions, but not vice-versa. For example, a "
"GDExtension targeting Godot 4.1 should work just fine in Godot 4.2, but one "
"targeting Godot 4.2 won't work in Godot 4.1."
msgstr ""
"Наша долгосрочная цель — обеспечить совместимость GDExtension, созданных для "
"более ранних версий Godot, с более новыми минорными версиями, но не "
"наоборот. Например, расширение, созданное для Godot 4.1, должно корректно "
"работать в Godot 4.2, но расширение для Godot 4.2 не будет работать в Godot "
"4.1."

msgid ""
"If you are versioning your project using Git, it is recommended to add it as "
"a Git submodule:"
msgstr ""
"Если вы используете Git для управления версиями проекта, рекомендуется "
"добавить его как подмодуль Git:"

msgid "Alternatively, you can also clone it to the project folder:"
msgstr "Или вы можете клонировать его в папку проекта:"

msgid ""
"If you decide to download the repository or clone it into your folder, make "
"sure to keep the folder layout the same as we've setup here. Much of the "
"code we'll be showcasing here assumes the project has this layout."
msgstr ""
"Если вы решили загрузить репозиторий, или клонировать его в свою папку, "
"убедитесь, что структура вашей папки аналогична той, что показана здесь. "
"Большая часть кода, что мы покажем здесь, подразумевает такую структуру."

msgid ""
"If you cloned the example from the link specified in the introduction, the "
"submodules are not automatically initialized. You will need to execute the "
"following commands:"
msgstr ""
"Если вы клонировали пример по ссылке, указанной во введении, подмодули не "
"инициализируются автоматически. Вам будет нужно выполнить эти команды:"

msgid "This will initialize the repository in your project folder."
msgstr "Так вы инициализируете репозиторий в вашей папке проекта."

msgid "Building the C++ bindings"
msgstr "Сборка привязок C++"

msgid ""
"Now that we've downloaded our prerequisites, it is time to build the C++ "
"bindings."
msgstr ""
"Теперь, когда вы загрузили все, что нужно, настало время собрать привязки C+"
"+."

msgid ""
"The repository contains a copy of the metadata for the current Godot "
"release, but if you need to build these bindings for a newer version of "
"Godot, call the Godot executable:"
msgstr ""
"Репозиторий содержит копию метаданных для текущего релиза Godot, но если вам "
"нужно собрать эти привязки для более новой версии Godot, вызовите "
"исполняемый файл Godot:"

msgid ""
"The resulting ``extension_api.json`` file will be created in the "
"executable's directory. Copy it to the project folder and add "
"``custom_api_file=<PATH_TO_FILE>`` to the scons command below."
msgstr ""
"Результирующий файл ``extension_api.json`` будет создан в директории "
"исполняемого файла. Скопируйте его в папку проекта и добавьте "
"``custom_api_file=<ПУТЬ_К_ФАЙЛУ>`` в команду scons ниже."

msgid ""
"To generate and compile the bindings, use this command (replacing "
"``<platform>`` with ``windows``, ``linux`` or ``macos`` depending on your "
"OS):"
msgstr ""
"Чтобы сгенерировать и скомпилировать привязки, используйте эту команду "
"(замените ``<платформа>`` на ``windows``, ``linux`` или ``macos`` в "
"зависимости от вашей ОС):"

msgid ""
"The build process automatically detects the number of CPU threads to use for "
"parallel builds. To specify a number of CPU threads to use, add ``-jN`` at "
"the end of the SCons command line where ``N`` is the number of CPU threads "
"to use."
msgstr ""
"Процесс сборки автоматически определяет количество потоков CPU для "
"параллельной сборки. Чтобы указать количество потоков CPU, добавьте ``-jN`` "
"в конце командной строки SCons, где ``N`` — количество используемых потоков "
"CPU."

msgid ""
"This step will take a while. When it is completed, you should have static "
"libraries that can be compiled into your project stored in ``godot-cpp/bin/"
"``."
msgstr ""
"Этот шаг займёт некоторое время. По завершении у вас должны быть статические "
"библиотеки, которые можно скомпилировать в ваш проект, хранящиеся в ``godot-"
"cpp/bin/``."

msgid "You may need to add ``bits=64`` to the command on Windows or Linux."
msgstr ""
"Вам может потребоваться добавить ``bits=64`` к команде на Windows или Linux."

msgid "Creating a simple plugin"
msgstr "Создание простого плагина"

msgid ""
"Now it's time to build an actual plugin. We'll start by creating an empty "
"Godot project in which we'll place a few files."
msgstr ""
"Теперь пришло время собрать настоящий плагин. Мы начнём с создания пустого "
"проекта Godot, в который поместим несколько файлов."

msgid ""
"Open Godot and create a new project. For this example, we will place it in a "
"folder called ``demo`` inside our GDExtension's folder structure."
msgstr ""
"Откройте Godot и создайте новый проект. В этом примере мы разместим его в "
"папке ``demo`` внутри структуры папок нашего GDExtension."

msgid ""
"In our demo project, we'll create a scene containing a Node called \"Main\" "
"and we'll save it as ``main.tscn``. We'll come back to that later."
msgstr ""
"В нашем демо-проекте мы создадим сцену, содержащую узел с именем \"Main\", и "
"сохраним её как ``main.tscn``. Мы вернёмся к этому позже."

msgid ""
"Back in the top-level GDExtension module folder, we're also going to create "
"a subfolder called ``src`` in which we'll place our source files."
msgstr ""
"Вернувшись в корневую папку модуля GDExtension, мы также создадим в нем "
"папку ``src``, в которую поместим наши исходные файлы."

msgid ""
"You should now have ``demo``, ``godot-cpp``, and ``src`` directories in your "
"GDExtension module."
msgstr ""
"Теперь у вас должны быть папки ``demo``, ``godot-cpp`` и ``src`` в вашем "
"модуле GDExtension."

msgid "Your folder structure should now look like this:"
msgstr "Ваша структура папок теперь должна выглядеть так:"

msgid ""
"In the ``src`` folder, we'll start with creating our header file for the "
"GDExtension node we'll be creating. We will name it ``gdexample.h``:"
msgstr ""
"В папке ``src`` мы начнём с создания заголовочного файла для узла "
"GDExtension, который мы будем создавать. Мы назовём его ``gdexample.h``:"

msgid "gdextension_cpp_example/src/gdexample.h"
msgstr "gdextension_cpp_example/src/gdexample.h"

msgid ""
"There are a few things of note to the above. We include ``sprite2d.hpp`` "
"which contains bindings to the Sprite2D class. We'll be extending this class "
"in our module."
msgstr ""
"Есть несколько примечательных моментов в вышеприведённом коде. Мы включаем "
"``sprite2d.hpp``, который содержит привязки к классу Sprite2D. Мы будем "
"расширять этот класс в нашем модуле."

msgid ""
"We're using the namespace ``godot``, since everything in GDExtension is "
"defined within this namespace."
msgstr ""
"Мы используем пространство имён ``godot``, так как всё в GDExtension "
"определено в этом пространстве имён."

msgid ""
"Then we have our class definition, which inherits from our Sprite2D through "
"a container class. We'll see a few side effects of this later on. The "
"``GDCLASS`` macro sets up a few internal things for us."
msgstr ""
"Затем у нас есть определение нашего класса, который наследуется от Sprite2D "
"через класс-контейнер. Позже мы увидим несколько побочных эффектов этого. "
"Макрос ``GDCLASS`` настраивает для нас несколько внутренних вещей."

msgid "After that, we declare a single member variable called ``time_passed``."
msgstr ""
"После этого мы объявляем единственную переменную с именем ``time_passed``."

msgid ""
"In the next block we're defining our methods, we have our constructor and "
"destructor defined, but there are two other functions that will likely look "
"familiar to some, and one new method."
msgstr ""
"В следующем блоке мы определяем наши методы: у нас определены конструктор и "
"деструктор, но есть две другие функции, которые могут показаться знакомыми, "
"и один новый метод."

msgid ""
"The first is ``_bind_methods``, which is a static function that Godot will "
"call to find out which methods can be called and which properties it "
"exposes. The second is our ``_process`` function, which will work exactly "
"the same as the ``_process`` function you're used to in GDScript."
msgstr ""
"Первая - ``_bind_methods``, статическая функция, которую Godot вызывает, "
"чтобы определить, какие методы можно вызывать и какие свойства доступны. "
"Вторая - наша функция ``_process``, которая будет работать точно так же, как "
"и знакомая вам функция ``_process`` в GDScript."

msgid "Let's implement our functions by creating our ``gdexample.cpp`` file:"
msgstr "Давайте реализуем наши функции, создав файл ``gdexample.cpp``:"

msgid "gdextension_cpp_example/src/gdexample.cpp"
msgstr "gdextension_cpp_example/src/gdexample.cpp"

msgid ""
"This one should be straightforward. We're implementing each method of our "
"class that we defined in our header file."
msgstr ""
"Всё должно быть понятно. Мы реализуем каждый метод нашего класса, который "
"определили в заголовочном файле."

msgid ""
"Note our ``_process`` function, which keeps track of how much time has "
"passed and calculates a new position for our sprite using a sine and cosine "
"function."
msgstr ""
"Обратите внимание на нашу функцию ``_process``, которая отслеживает "
"прошедшее время и вычисляет новую позицию для спрайта с использованием "
"функций синуса и косинуса."

msgid ""
"There is one more C++ file we need; we'll name it ``register_types.cpp``. "
"Our GDExtension plugin can contain multiple classes, each with their own "
"header and source file like we've implemented ``GDExample`` up above. What "
"we need now is a small bit of code that tells Godot about all the classes in "
"our GDExtension plugin."
msgstr ""
"Нам нужен ещё один файл C++; мы назовём его ``register_types.cpp``. Наш "
"плагин GDExtension может содержать несколько классов, каждый со своим "
"заголовочным и исходным файлом, как мы реализовали ``GDExample`` выше. "
"Сейчас нам нужен небольшой фрагмент кода, который сообщит Godot обо всех "
"классах в нашем плагине GDExtension."

msgid ""
"The ``initialize_example_module`` and ``uninitialize_example_module`` "
"functions get called respectively when Godot loads our plugin and when it "
"unloads it. All we're doing here is parse through the functions in our "
"bindings module to initialize them, but you might have to set up more things "
"depending on your needs. We call the ``GDREGISTER_RUNTIME_CLASS`` macro for "
"each of our classes in our library. This will make them run only in game, "
"like the default for GDScript."
msgstr ""
"Функции ``initialize_example_module`` и ``uninitialize_example_module`` "
"вызываются соответственно при загрузке и выгрузке нашего плагина в Godot. "
"Здесь мы просто проходим по функциям в нашем модуле привязок, чтобы "
"инициализировать их, но в зависимости от ваших потребностей может "
"потребоваться настроить больше вещей. Мы вызываем макрос "
"``GDREGISTER_RUNTIME_CLASS`` для каждого класса в нашей библиотеке. Это "
"позволит им работать только в игре, как и по умолчанию в GDScript."

msgid ""
"The important function is the third function called "
"``example_library_init``. We first call a function in our bindings library "
"that creates an initialization object. This object registers the "
"initialization and termination functions of the GDExtension. Furthermore, it "
"sets the level of initialization (core, servers, scene, editor, level)."
msgstr ""
"Важная функция - третья, называемая ``example_library_init``. Сначала мы "
"вызываем функцию в нашей библиотеке привязок, которая создаёт объект "
"инициализации. Этот объект регистрирует функции инициализации и завершения "
"работы GDExtension. Кроме того, он устанавливает уровень инициализации "
"(ядро, серверы, сцена, редактор, уровень)."

msgid ""
"At last, we need the header file for the ``register_types.cpp`` named "
"``register_types.h``."
msgstr ""
"Наконец, нам нужен заголовочный файл для ``register_types.cpp`` под "
"названием ``register_types.h``."

msgid "gdextension_cpp_example/src/register_types.h"
msgstr "gdextension_cpp_example/src/register_types.h"

msgid "Compiling the plugin"
msgstr "Компиляция плагина"

msgid ""
"To compile the project we need to define how SCons using should compile it "
"using a ``SConstruct`` file which references the one in ``godot-cpp``. "
"Writing it from scratch is outside the scope of this tutorial, but you "
"can :download:`the SConstruct file we prepared <files/cpp_example/"
"SConstruct>`. We'll cover a more customizable, detailed example on how to "
"use these build files in a subsequent tutorial."
msgstr ""
"Для компиляции проекта нам нужно определить, как SCons должен его "
"компилировать, используя файл ``SConstruct``, который ссылается на файл в "
"``godot-cpp``. Написание этого файла с нуля выходит за рамки данного "
"руководства, но вы можете :download:`скачать подготовленный нами файл "
"SConstruct <files/cpp_example/SConstruct>`. В последующих руководствах мы "
"рассмотрим более настраиваемый и подробный пример использования этих файлов "
"сборки."

msgid ""
"This ``SConstruct`` file was written to be used with the latest ``godot-"
"cpp`` master, you may need to make small changes using it with older "
"versions or refer to the ``SConstruct`` file in the Godot 4.x documentation."
msgstr ""
"Этот файл ``SConstruct`` был написан для использования с последней версией "
"``godot-cpp`` master. Возможно, вам потребуется внести небольшие изменения "
"при использовании со старыми версиями или обратиться к файлу ``SConstruct`` "
"в документации Godot 4.x."

msgid ""
"Once you've downloaded the ``SConstruct`` file, place it in your GDExtension "
"folder structure alongside ``godot-cpp``, ``src`` and ``demo``, then run:"
msgstr ""
"После загрузки файла ``SConstruct`` поместите его в структуру папок "
"GDExtension рядом с ``godot-cpp``, ``src`` и ``demo``, затем выполните:"

msgid "You should now be able to find the module in ``demo/bin/<platform>``."
msgstr "Теперь вы должны найти модуль в ``demo/bin/<platform>``."

msgid ""
"When building for iOS, package the module as a static `.xcframework`, you "
"can use following commands to do so:"
msgstr ""
"При сборке для iOS упакуйте модуль как статический `.xcframework`. Для этого "
"можно использовать следующие команды:"

msgid ""
"Here, we've compiled both godot-cpp and our gdexample library as debug "
"builds. For optimized builds, you should compile them using the "
"``target=template_release`` switch."
msgstr ""
"Здесь мы скомпилировали как godot-cpp, так и нашу библиотеку gdexample в "
"режиме отладки. Для оптимизированных сборок следует использовать "
"переключатель ``target=template_release``."

msgid "Using the GDExtension module"
msgstr "Использование модуля GDExtension"

msgid ""
"Before we jump back into Godot, we need to create one more file in ``demo/"
"bin/``."
msgstr ""
"Прежде чем вернуться в Godot, нам нужно создать ещё один файл в ``demo/bin/"
"``."

msgid ""
"This file lets Godot know what dynamic libraries should be loaded for each "
"platform and the entry function for the module. It is called "
"``gdexample.gdextension``."
msgstr ""
"Этот файл сообщает Godot, какие динамические библиотеки следует загружать "
"для каждой платформы и какова входная функция модуля. Он называется "
"``gdexample.gdextension``."

msgid ""
"The ``libraries`` section is the important bit: it tells Godot the location "
"of the dynamic library in the project's filesystem for each supported "
"platform. It will also result in *just* that file being exported when you "
"export the project, which means the data pack won't contain libraries that "
"are incompatible with the target platform."
msgstr ""
"Раздел ``libraries`` является ключевым: он сообщает Godot расположение "
"динамической библиотеки в файловой системе проекта для каждой поддерживаемой "
"платформы. Это также приведёт к тому, что *только* этот файл будет "
"экспортироваться при экспорте проекта, что означает, что пакет данных не "
"будет содержать библиотеки, несовместимые с целевой платформой."

msgid ""
"Finally, the ``dependencies`` section allows you to name additional dynamic "
"libraries that should be included as well. This is important when your "
"GDExtension plugin implements someone else's library and requires you to "
"supply a third-party dynamic library with your project."
msgstr ""
"Наконец, раздел ``dependencies`` позволяет указать дополнительные "
"динамические библиотеки, которые так же будут включены. Это важно, когда ваш "
"плагин GDExtension реализует чью-то библиотеку и требует предоставления "
"сторонней динамической библиотеки вместе с проектом."

msgid "Here is another overview to check the correct file structure:"
msgstr "Вот ещё один обзор для проверки правильной структуры файлов:"

msgid ""
"Time to jump back into Godot. We load up the main scene we created way back "
"in the beginning and now add a newly available GDExample node to the scene:"
msgstr ""
"Пора вернуться в Godot. Мы загружаем главную сцену, созданную в самом "
"начале, и теперь добавляем в сцену новый узел GDExample:"

msgid ""
"We're going to assign the Godot logo to this node as our texture, disable "
"the ``centered`` property:"
msgstr ""
"Мы назначим логотип Godot этому узлу в качестве текстуры и отключим свойство "
"``centered``:"

msgid "We're finally ready to run the project:"
msgstr "Наконец-то мы готовы к запуску проекта:"

msgid "Adding properties"
msgstr "Добавление свойств"

msgid ""
"GDScript allows you to add properties to your script using the ``export`` "
"keyword. In GDExtension you have to register the properties with a getter "
"and setter function or directly implement the ``_get_property_list``, "
"``_get`` and ``_set`` methods of an object (but that goes far beyond the "
"scope of this tutorial)."
msgstr ""
"GDScript позволяет добавлять свойства в скрипт с помощью ключевого слова "
"``export``. В GDExtension вы должны регистрировать свойства с помощью "
"функций геттера и сеттера или напрямую реализовывать методы "
"``_get_property_list``, ``_get`` и ``_set`` объекта (но это выходит далеко "
"за рамки данного руководства)."

msgid ""
"Lets add a property that allows us to control the amplitude of our wave."
msgstr "Добавим свойство, позволяющее управлять амплитудой нашей волны."

msgid ""
"In our ``gdexample.h`` file we need to add a member variable and getter and "
"setter functions:"
msgstr ""
"В файле ``gdexample.h`` нам нужно добавить переменную-член и функции геттера/"
"сеттера:"

msgid ""
"In our ``gdexample.cpp`` file we need to make a number of changes, we will "
"only show the methods we end up changing, don't remove the lines we're "
"omitting:"
msgstr ""
"В файле ``gdexample.cpp`` нам нужно внести несколько изменений. Мы покажем "
"только изменяемые методы, не удаляйте строки, которые мы опускаем:"

msgid ""
"Once you compile the module with these changes in place, you will see that a "
"property has been added to our interface. You can now change this property "
"and when you run your project, you will see that our Godot icon travels "
"along a larger figure."
msgstr ""
"После компиляции модуля с этими изменениями вы увидите, что в интерфейс "
"добавлено свойство. Теперь вы можете изменять это свойство, и при запуске "
"проекта увидите, что иконка Godot движется по большей траектории."

msgid ""
"Let's do the same but for the speed of our animation and use a setter and "
"getter function. Our ``gdexample.h`` header file again only needs a few more "
"lines of code:"
msgstr ""
"Сделаем то же самое для скорости анимации, используя функции сеттера и "
"геттера. В заголовочный файл ``gdexample.h`` снова нужно добавить всего "
"несколько строк кода:"

msgid ""
"This requires a few more changes to our ``gdexample.cpp`` file, again we're "
"only showing the methods that have changed so don't remove anything we're "
"omitting:"
msgstr ""
"Это требует ещё нескольких изменений в файле ``gdexample.cpp``; снова "
"показываем только изменённые методы, не удаляйте ничего из опущенного:"

msgid ""
"Now when the project is compiled, we'll see another property called speed. "
"Changing its value will make the animation go faster or slower. Furthermore, "
"we added a property range which describes in which range the value can be. "
"The first two arguments are the minimum and maximum value and the third is "
"the step size."
msgstr ""
"Теперь при компиляции проекта мы увидим ещё одно свойство speed. Изменение "
"его значения ускорит или замедлит анимацию. Кроме того, мы добавили диапазон "
"свойств, описывающий, в каких пределах может быть значение. Первые два "
"аргумента - минимальное и максимальное значение, третий - шаг изменения."

msgid ""
"For simplicity, we've only used the hint_range of the property method. There "
"are a lot more options to choose from. These can be used to further "
"configure how properties are displayed and set on the Godot side."
msgstr ""
"Для простоты мы использовали только hint_range метода свойства. Есть гораздо "
"больше вариантов на выбор. Их можно использовать для дальнейшей настройки "
"отображения и установки свойств на стороне Godot."

msgid "Signals"
msgstr "Сигналы"

msgid ""
"Last but not least, signals fully work in GDExtension as well. Having your "
"extension react to a signal given out by another object requires you to call "
"``connect`` on that object. We can't think of a good example for our "
"wobbling Godot icon, we would need to showcase a far more complete example."
msgstr ""
"Последнее, но не менее важное: сигналы также полностью работают в "
"GDExtension. Чтобы ваше расширение реагировало на сигнал, испускаемый другим "
"объектом, вам нужно вызвать ``connect`` для этого объекта. Мы не можем "
"придумать хороший пример для нашей колеблющейся иконки Godot, нам "
"потребовался бы гораздо более полный пример."

msgid "This is the required syntax:"
msgstr "Вот требуемый синтаксис:"

msgid ""
"To connect our signal ``the_signal`` from some other node with our method "
"``my_method``, we need to provide the ``connect`` method with the name of "
"the signal and a ``Callable``. The ``Callable`` holds information about an "
"object on which a method can be called. In our case, it associates our "
"current object instance ``this`` with the method ``my_method`` of the "
"object. Then the ``connect`` method will add this to the observers of "
"``the_signal``. Whenever ``the_signal`` is now emitted, Godot knows which "
"method of which object it needs to call."
msgstr ""
"Чтобы подключить наш сигнал ``the_signal`` из другого узла к нашему методу "
"``my_method``, нам нужно передать методу ``connect`` имя сигнала и "
"``Callable``. ``Callable`` содержит информацию об объекте, для которого "
"можно вызвать метод. В нашем случае он связывает наш текущий экземпляр "
"объекта ``this`` с методом ``my_method`` этого объекта. Затем метод "
"``connect`` добавит это к наблюдателям ``the_signal``. Теперь, когда "
"``the_signal`` испускается, Godot знает, какой метод какого объекта нужно "
"вызвать."

msgid ""
"Note that you can only call ``my_method`` if you've previously registered it "
"in your ``_bind_methods`` method. Otherwise Godot will not know about the "
"existence of ``my_method``."
msgstr ""
"Обратите внимание, что вы можете вызывать ``my_method`` только если "
"предварительно зарегистрировали его в методе ``_bind_methods``. В противном "
"случае Godot не будет знать о существовании ``my_method``."

msgid ""
"To learn more about ``Callable``, check out the class reference "
"here: :ref:`Callable <class_Callable>`."
msgstr ""
"Чтобы узнать больше о ``Callable``, ознакомьтесь со справочником "
"класса: :ref:`Callable <class_Callable>`."

msgid ""
"Having your object sending out signals is more common. For our wobbling "
"Godot icon, we'll do something silly just to show how it works. We're going "
"to emit a signal every time a second has passed and pass the new location "
"along."
msgstr ""
"Более распространённой является ситуация, когда ваш объект испускает "
"сигналы. Для нашей колеблющейся иконки Godot мы сделаем что-то простое, "
"чтобы показать, как это работает. Мы будем испускать сигнал каждую секунду и "
"передавать новое местоположение."

msgid ""
"In our ``gdexample.h`` header file, we need to define a new member "
"``time_emit``:"
msgstr ""
"В заголовочном файле ``gdexample.h`` нам нужно определить новый член "
"``time_emit``:"

msgid ""
"This time, the changes in ``gdexample.cpp`` are more elaborate. First, "
"you'll need to set ``time_emit = 0.0;`` in either our ``_init`` method or in "
"our constructor. We'll look at the other 2 needed changes one by one."
msgstr ""
"На этот раз изменения в ``gdexample.cpp`` более сложные. Сначала нужно "
"установить ``time_emit = 0.0;`` либо в методе ``_init``, либо в "
"конструкторе. Мы рассмотрим остальные два необходимых изменения по очереди."

msgid ""
"In our ``_bind_methods`` method, we need to declare our signal. This is done "
"as follows:"
msgstr ""
"В методе ``_bind_methods`` нам нужно объявить наш сигнал. Это делается "
"следующим образом:"

msgid ""
"Here, our ``ADD_SIGNAL`` macro can be a single call with a ``MethodInfo`` "
"argument. ``MethodInfo``'s first parameter will be the signal's name, and "
"its remaining parameters are ``PropertyInfo`` types which describe the "
"essentials of each of the method's parameters. ``PropertyInfo`` parameters "
"are defined with the data type of the parameter, and then the name that the "
"parameter will have by default."
msgstr ""
"Здесь наш макрос ``ADD_SIGNAL`` может быть одиночным вызовом с аргументом "
"``MethodInfo``. Первый параметр ``MethodInfo`` - это имя сигнала, а "
"остальные параметры - типы ``PropertyInfo``, описывающие сущность каждого "
"параметра метода. Параметры ``PropertyInfo`` определяются типом данных "
"параметра и именем, которое параметр будет иметь по умолчанию."

msgid ""
"So here, we add a signal, with a ``MethodInfo`` which names the signal "
"\"position_changed\". The ``PropertyInfo`` parameters describe two essential "
"arguments, one of type ``Object``, the other of type ``Vector2``, "
"respectively named \"node\" and \"new_pos\"."
msgstr ""
"Таким образом, мы добавляем сигнал с ``MethodInfo``, который называет сигнал "
"\"position_changed\". Параметры ``PropertyInfo`` описывают два основных "
"аргумента: один типа ``Object``, другой типа ``Vector2``, названные "
"соответственно \"node\" и \"new_pos\"."

msgid "Next, we'll need to change our ``_process`` method:"
msgstr "Далее нам нужно изменить наш метод ``_process``:"

msgid ""
"After a second has passed, we emit our signal and reset our counter. We can "
"add our parameter values directly to ``emit_signal``."
msgstr ""
"После прохождения секунды мы испускаем наш сигнал и сбрасываем счётчик. Мы "
"можем напрямую добавить значения параметров в ``emit_signal``."

msgid ""
"Once the GDExtension library is compiled, we can go into Godot and select "
"our sprite node. In the **Node** dock, we can find our new signal and link "
"it up by pressing the **Connect** button or double-clicking the signal. "
"We've added a script on our main node and implemented our signal like this:"
msgstr ""
"После компиляции библиотеки GDExtension мы можем зайти в Godot и выбрать наш "
"узел спрайта. В доке **Node** мы можем найти наш новый сигнал и подключить "
"его, нажав кнопку **Connect** или дважды щёлкнув по сигналу. Мы добавили "
"скрипт на наш главный узел и реализовали наш сигнал следующим образом:"

msgid "Every second, we output our position to the console."
msgstr "Каждую секунду мы выводим нашу позицию в консоль."

msgid "Next steps"
msgstr "Следующие шаги"

msgid ""
"We hope the above example showed you the basics. You can build upon this "
"example to create full-fledged scripts to control nodes in Godot using C++."
msgstr ""
"Мы надеемся, что приведённый пример показал вам основы. Вы можете расширить "
"этот пример для создания полноценных скриптов управления узлами в Godot с "
"использованием C++."
