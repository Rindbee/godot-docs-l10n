#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.3\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction"
msgstr "Введение"

msgid "Setting up the scene"
msgstr "Настраиваем сцену"

msgid ""
"Notice the ugly seam that forms where the texture wraps around? This is "
"because we are picking a color based on UV coordinates and UV coordinates do "
"not wrap around the texture. This is a classic problem in 2D map projection. "
"Game developers often have a 2-dimensional map they want to project onto a "
"sphere, but when it wraps around, it has large seams. There is an elegant "
"workaround for this problem that we will illustrate in the next section."
msgstr ""
"Заметили некрасивый шов, который образуется там, где текстура оборачивается "
"вокруг? Это потому, что мы выбираем цвет на основе UV-координат, а UV-"
"координаты не оборачиваются вокруг текстуры. Это классическая проблема при "
"проекции двумерных карт. Разработчики игр часто имеют двумерную карту, "
"которую они хотят спроецировать на сферу, но когда она оборачивается вокруг, "
"получаются большие швы. Существует элегантный обходной путь решения этой "
"проблемы, который мы проиллюстрируем в следующем разделе."

msgid ""
"For each pixel, we will calculate its 3D position on the sphere. From that, "
"we will use 3D noise to determine a color value. By calculating the noise in "
"3D, we solve the problem of the pinching at the poles. To understand why, "
"picture the noise being calculated across the surface of the sphere instead "
"of across the 2D plane. When you calculate across the surface of the sphere, "
"you never hit an edge, and hence you never create a seam or a pinch point on "
"the pole. The following code converts the ``UVs`` into Cartesian coordinates."
msgstr ""
"Для каждого пикселя мы вычислим его трехмерное положение на сфере. Исходя из "
"этого, мы будем использовать 3D-шум для определения значения цвета. "
"Рассчитывая шум в 3D, мы решаем проблему защемления на полюсах. Чтобы "
"понять, почему, представьте, что шум рассчитывается по поверхности сферы, а "
"не по двухмерной плоскости. Когда вы рассчитываете по поверхности сферы, вы "
"никогда не заденете край, а значит, не создадите шов или точку защемления на "
"полюсе. Следующий код преобразует ``UV`` в декартовы координаты."

msgid ""
"One more thing to make this a little more planet-y. The land shouldn't be so "
"blobby; let's make the edges a little rougher. A trick that is often used in "
"shaders to make rough looking terrain with noise is to layer levels of noise "
"over one another at various frequencies. We use one layer to make the "
"overall blobby structure of the continents. Then another layer breaks up the "
"edges a bit, and then another, and so on. What we will do is calculate ``n`` "
"with four lines of shader code instead of just one. ``n`` becomes:"
msgstr ""
"Еще одна вещь, чтобы сделать это немного более планетарным. Земля не должна "
"быть такой шарообразной; давайте сделаем края немного более грубыми. Трюк, "
"который часто используется в шейдерах для создания грубого рельефа с помощью "
"шума, заключается в наложении друг на друга уровней шума с различными "
"частотами. Мы используем один слой для создания общей шарообразной структуры "
"континентов. Затем другой слой немного разбивает края, затем еще один, и так "
"далее. Мы вычислим ``n`` с помощью четырех строк кода шейдера вместо одной. "
"``n`` становится:"
