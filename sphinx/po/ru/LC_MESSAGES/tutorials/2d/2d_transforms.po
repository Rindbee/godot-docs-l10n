#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Viewport and canvas transforms"
msgstr "Преобразование области просмотра и холста"

msgid "Introduction"
msgstr "Введение"

msgid ""
"This is an overview of the 2D transforms going on for nodes from the moment "
"they draw their content locally to the time they are drawn onto the screen. "
"This overview discusses very low-level details of the engine."
msgstr ""
"Это обзор 2D-преобразований, происходящих для узлов с момента, когда они "
"рисуют свое содержимое локально, до момента, когда они рисуются на экране. В "
"этом обзоре обсуждаются очень низкоуровневые детали движка."

msgid ""
"The goal of this tutorial is to teach a way for feeding input events to the "
"Input with a position in the correct coordinate system."
msgstr ""
"Цель этого руководства - научить Вас способу передачи событий ввода в Input "
"с позицией в правильной системе координат."

msgid ""
"A more extensive description of all coordinate systems and 2d transforms is "
"available in :ref:`doc_2d_coordinate_systems`."
msgstr ""
"Более подробное описание всех систем координат и 2D-преобразований доступно "
"в :ref:`doc_2d_coordinate_systems`."

msgid "Canvas transform"
msgstr "Преобразования холста"

msgid ""
"As mentioned in the previous tutorial, :ref:`doc_canvas_layers`, every "
"CanvasItem node (remember that Node2D and Control based nodes use CanvasItem "
"as their common root) will reside in a *Canvas Layer*. Every canvas layer "
"has a transform (translation, rotation, scale, etc.) that can be accessed as "
"a :ref:`Transform2D <class_Transform2D>`."
msgstr ""
"Как упоминалось в предыдущем руководстве :ref:`doc_canvas_layers`, каждый "
"узел CanvasItem (помните, что узлы на основе Node2D и Control используют "
"CanvasItem в качестве общего корня) будет находиться в *Canvas Layer*. "
"Каждый слой холста имеет преобразование (перемещение, поворот, масштаб и "
"т.д.), к которому можно получить доступ как :ref:`Transform2D "
"<class_Transform2D>`."

msgid ""
"Also covered in the previous tutorial, nodes are drawn by default in Layer "
"0, in the built-in canvas. To put nodes in a different layer, "
"a :ref:`CanvasLayer <class_CanvasLayer>` node can be used."
msgstr ""
"Как было сказано в предыдущем уроке, узлы по умолчанию рисуются на 0-ом слое "
"на встроенном холсте. Для того, чтобы поместить узлы на другой слой, можно "
"воспользоваться узлом :ref:`CanvasLayer <class_CanvasLayer>`."

msgid "Global canvas transform"
msgstr "Глобальное преобразование холста"

msgid ""
"Viewports also have a Global Canvas transform (also a :ref:`Transform2D "
"<class_Transform2D>`). This is the master transform and affects all "
"individual *Canvas Layer* transforms. Generally, this is primarily used in "
"Godot's CanvasItem Editor."
msgstr ""
"У вьюпортов также есть Global Canvas transform (Глобальное преобразование "
"Холста) (также :ref:`Transform2D <class_Transform2D>`). Это главное "
"преобразование, которое влияет на все отдельные преобразования *Canvas "
"Layer*. Как правило, оно в основном используется в редакторе CanvasItem "
"редактора Godot."

msgid "Stretch transform"
msgstr "Преобразования растяжения"

msgid ""
"Finally, viewports have a *Stretch Transform*, which is used when resizing "
"or stretching the screen. This transform is used internally (as described "
"in :ref:`doc_multiple_resolutions`), but can also be manually set on each "
"viewport."
msgstr ""
"Наконец, в видовых экранах есть функция *Stretch Transform*, которая "
"используется при изменении размера или растягивании экрана. Это "
"преобразование используется внутренне (как описано "
"в :ref:`doc_multiple_resolutions`), но также может быть вручную установлено "
"для каждого видового экрана."

msgid ""
"Input events are multiplied by this transform, but lack the ones above. To "
"convert InputEvent coordinates to local CanvasItem coordinates, "
"the :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` function was added for "
"convenience."
msgstr ""
"События ввода умножаются на это преобразование, но не имеют тех, что выше. "
"Для преобразования координат InputEvent в локальные координаты CanvasItem "
"для удобства была добавлена функция :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>`."

msgid "Window transform"
msgstr "Трансформация окна"

msgid ""
"The root viewport is a :ref:`Window <class_Window>`. In order to scale and "
"position the *Window's* content as described "
"in :ref:`doc_multiple_resolutions`, each :ref:`Window <class_Window>` "
"contains a *window transform*. It is for example responsible for the black "
"bars at the *Window's* sides so that the *Viewport* is displayed with a "
"fixed aspect ratio."
msgstr ""
"Корневое окно просмотра представляет собой :ref:`Окно <class_Window>`. Чтобы "
"масштабировать и позиционировать содержимое *окна* в соответствии с "
"описанным в :ref:`doc_multiple_resolutions`, каждое :ref:`окно "
"<class_Window>` содержит *оконное преобразование*. Оно, например, отвечает "
"за черные полосы по краям *окна*, чтобы *Окно просмотра* отображалось с "
"фиксированным соотношением сторон."

msgid "Transform order"
msgstr "Порядок преобразований"

msgid ""
"To convert a CanvasItem local coordinate to an actual screen coordinate, the "
"following chain of transforms must be applied:"
msgstr ""
"Чтобы преобразовать локальную координату CanvasItem в фактическую экранную "
"координату, необходимо применить следующую цепочку преобразований:"

msgid "Transform functions"
msgstr "Функции преобразования"

msgid ""
"The above graphic shows some available transform functions. All transforms "
"are directed from right to left, this means multiplying a transform with a "
"coordinate results in a coordinate system further to the left, multiplying "
"the :ref:`affine inverse <class_Transform2D_method_affine_inverse>` of a "
"transform results in a coordinate system further to the right:"
msgstr ""
"График выше показывает некоторые доступные функции преобразования. Все "
"преобразования выполняются справа налево, что означает: умножение "
"преобразования на координату смещает систему координат влево, а "
"умножение :ref:`аффинного обратного преобразования "
"<class_Transform2D_method_affine_inverse>` смещает систему координат вправо:"

msgid ""
"Finally, then, to convert a CanvasItem local coordinates to screen "
"coordinates, just multiply in the following order:"
msgstr ""
"Наконец, чтобы преобразовать локальные координаты CanvasItem в экранные "
"координаты, просто умножьте в следующем порядке:"

msgid ""
"Keep in mind, however, that it is generally not desired to work with screen "
"coordinates. The recommended approach is to simply work in Canvas "
"coordinates (``CanvasItem.get_global_transform()``), to allow automatic "
"screen resolution resizing to work properly."
msgstr ""
"Однако имейте в виду, что обычно нежелательно работать с экранными "
"координатами. Рекомендуемый подход - просто работать в координатах холста "
"(``CanvasItem.get_global_transform ()``), чтобы автоматическое изменение "
"размера разрешения экрана работало правильно."

msgid "Feeding custom input events"
msgstr "Передача пользовательских событий ввода"

msgid ""
"It is often desired to feed custom input events to the game. With the above "
"knowledge, to correctly do this in the focused window, it must be done the "
"following way:"
msgstr ""
"Часто требуется передавать пользовательские события ввода в игру. С учетом "
"вышеизложенных знаний, чтобы правильно сделать это в сфокусированном окне, "
"это должно быть сделано следующим образом:"
