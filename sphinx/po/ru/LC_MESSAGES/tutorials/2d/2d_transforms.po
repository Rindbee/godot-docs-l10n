#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Viewport and canvas transforms"
msgstr "Преобразование области просмотра и холста"

msgid "Introduction"
msgstr "Введение"

msgid ""
"This is an overview of the 2D transforms going on for nodes from the moment "
"they draw their content locally to the time they are drawn onto the screen. "
"This overview discusses very low level details of the engine."
msgstr ""
"Это обзор 2D преобразований, происходящих для узлов с момента их локального "
"рисования содержимого до момента их рисования на экране. В этом обзоре "
"обсуждаются детали движка очень низкого уровня."

msgid "Canvas transform"
msgstr "Преобразования холста"

msgid ""
"As mentioned in the previous tutorial, :ref:`doc_canvas_layers`, every "
"CanvasItem node (remember that Node2D and Control based nodes use CanvasItem "
"as their common root) will reside in a *Canvas Layer*. Every canvas layer "
"has a transform (translation, rotation, scale, etc.) that can be accessed as "
"a :ref:`Transform2D <class_Transform2D>`."
msgstr ""
"Как упоминалось в предыдущем руководстве :ref:`doc_canvas_layers`, каждый "
"узел CanvasItem (помните, что узлы на основе Node2D и Control используют "
"CanvasItem в качестве общего корня) будет находиться в *Canvas Layer*. "
"Каждый слой холста имеет преобразование (перемещение, поворот, масштаб и т."
"д.), к которому можно получить доступ как :ref:`Transform2D "
"<class_Transform2D>`."

msgid ""
"Also covered in the previous tutorial, nodes are drawn by default in Layer "
"0, in the built-in canvas. To put nodes in a different layer, a :ref:"
"`CanvasLayer <class_CanvasLayer>` node can be used."
msgstr ""
"Как было сказано в предыдущем уроке, узлы по умолчанию рисуются на 0-ом слое "
"на встроенном холсте. Для того, чтобы поместить узлы на другой слой, можно "
"воспользоваться узлом :ref:`CanvasLayer <class_CanvasLayer>`."

msgid "Global canvas transform"
msgstr "Глобальное преобразование холста"

msgid "Stretch transform"
msgstr "Преобразования растяжения"

msgid ""
"Finally, viewports have a *Stretch Transform*, which is used when resizing "
"or stretching the screen. This transform is used internally (as described "
"in :ref:`doc_multiple_resolutions`), but can also be manually set on each "
"viewport."
msgstr ""
"Наконец, в видовых экранах есть функция *Stretch Transform*, которая "
"используется при изменении размера или растягивании экрана. Это "
"преобразование используется внутренне (как описано в :ref:"
"`doc_multiple_resolutions`), но также может быть вручную установлено для "
"каждого видового экрана."

msgid "Transform order"
msgstr "Порядок преобразований"

msgid "Transform functions"
msgstr "Функции преобразования"

msgid ""
"Finally, then, to convert a CanvasItem local coordinates to screen "
"coordinates, just multiply in the following order:"
msgstr ""
"Наконец, чтобы преобразовать локальные координаты CanvasItem в экранные "
"координаты, просто умножьте в следующем порядке:"

msgid ""
"Keep in mind, however, that it is generally not desired to work with screen "
"coordinates. The recommended approach is to simply work in Canvas "
"coordinates (``CanvasItem.get_global_transform()``), to allow automatic "
"screen resolution resizing to work properly."
msgstr ""
"Однако имейте в виду, что обычно нежелательно работать с экранными "
"координатами. Рекомендуемый подход - просто работать в координатах холста "
"(``CanvasItem.get_global_transform ()``), чтобы автоматическое изменение "
"размера разрешения экрана работало правильно."

msgid "Feeding custom input events"
msgstr "Передача пользовательских событий ввода"

msgid "Translation status"
msgstr "Статус перевода"
