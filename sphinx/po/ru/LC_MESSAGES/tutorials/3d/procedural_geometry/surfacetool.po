#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the SurfaceTool"
msgstr "Использование SurfaceTool"

msgid ""
"The :ref:`SurfaceTool <class_surfacetool>` provides a useful interface for "
"constructing geometry. The interface is similar to the :ref:`ImmediateMesh "
"<class_ImmediateMesh>` class. You set each per-vertex attribute (e.g. "
"normal, uv, color) and then when you add a vertex it captures the attributes."
msgstr ""
":ref:`SurfaceTool <class_surfacetool>` предоставляет удобный интерфейс для "
"создания геометрии. Этот интерфейс похож на класс :ref:`ImmediateMesh "
"<class_ImmediateMesh>`. Вы задаёте атрибуты для каждой вершины (например, "
"нормаль, UV-координаты, цвет), а при добавлении вершины она захватывает эти "
"атрибуты."

msgid ""
"The SurfaceTool also provides some useful helper functions like ``index()`` "
"and ``generate_normals()``."
msgstr ""
"SurfaceTool также предоставляет некоторые полезные вспомогательные функции, "
"такие как ``index()`` и ``generate_normals()``."

msgid "Attributes are added before each vertex is added:"
msgstr "Атрибуты добавляются перед добавлением каждой вершины:"

msgid ""
"When finished generating your geometry with the :ref:`SurfaceTool "
"<class_surfacetool>` call ``commit()`` to finish generating the mesh. If "
"an :ref:`ArrayMesh <class_ArrayMesh>` is passed to ``commit()`` then it "
"appends a new surface to the end of the ArrayMesh. While if nothing is "
"passed in, ``commit()`` returns an ArrayMesh."
msgstr ""
"Когда вы закончите генерировать свою геометрию с помощью :ref:`SurfaceTool "
"<class_surfacetool>`, вызовите ``commit()``, чтобы завершить генерацию "
"сетки. Если :ref:`ArrayMesh <class_ArrayMesh>` передается в ``commit()``, то "
"он добавляет новую поверхность в конец ArrayMesh. В то время как, если "
"ничего не передано, ``commit()`` возвращает ArrayMesh."

msgid "Code creates a triangle with indices"
msgstr "Код создает треугольник с индексами"

msgid ""
"You can optionally add an index array, either by calling ``add_index()`` and "
"adding vertices to the index array or by calling ``index()`` which shrinks "
"the vertex array to remove duplicate vertices."
msgstr ""
"Вы можете дополнительно добавить массив индексов, либо вызвав "
"``add_index()`` и добавив вершины в массив индексов, либо вызвав "
"``index()``, который сжимает массив вершин для удаления повторяющихся вершин."

msgid ""
"Similarly, if you have an index array, but you want each vertex to be unique "
"(e.g. because you want to use unique normals or colors per face instead of "
"per-vertex), you can call ``deindex()``."
msgstr ""
"Аналогично, если у вас есть массив индексов, но вы хотите, чтобы каждая "
"вершина была уникальной (например, потому что вы хотите использовать "
"уникальные нормали или цвета для каждой грани, а не для каждой вершины), вы "
"можете вызвать ``deindex()``."

msgid ""
"If you don't add custom normals yourself, you can add them using "
"``generate_normals()``, which should be called after generating geometry and "
"before committing the mesh using ``commit()`` or ``commit_to_arrays()``. "
"Calling ``generate_normals(true)`` will flip the resulting normals. As a "
"side note, ``generate_normals()`` only works if the primitive type is set to "
"``Mesh.PRIMITIVE_TRIANGLES``."
msgstr ""
"Если вы не добавляете пользовательские нормали самостоятельно, вы можете "
"добавить их с помощью ``generate_normals(0)``, который следует вызывать "
"после генерации геометрии и перед фиксацией сетки с помощью ``commit()`` или "
"``commit_to_arrays()``. Вызов ``generate_normals(true)`` перевернет "
"результирующие нормали. В качестве дополнительного примечания, "
"``generate_normals()`` работает только в том случае, если для примитивного "
"типа задано значение \"Mesh.PRIMITIVE_TRIANGLES`."

msgid ""
"You may notice that normal mapping or other material properties look broken "
"on the generated mesh. This is because normal mapping **requires** the mesh "
"to feature *tangents*, which are separate from *normals*. You can either add "
"custom tangents manually, or generate them automatically with "
"``generate_tangents()``. This method requires that each vertex have UVs and "
"normals set already."
msgstr ""
"Вы можете заметить, что нормалмаппинг или другие свойства материала выглядят "
"некорректно на сгенерированной сетке. Это происходит потому, что "
"нормалмаппинг **требует** наличия *касательных* в сетке, которые отличаются "
"от *нормалей*. Вы можете либо добавить пользовательские касательные вручную, "
"либо автоматически сгенерировать их с помощью ``generate_tangents()``. Этот "
"метод требует, чтобы для каждой вершины уже были заданы UV-координаты и "
"нормали."

msgid ""
"By default, when generating normals, they will be calculated on a per-face "
"basis. If you want smooth vertex normals, when adding vertices, call "
"``add_smooth_group()``. ``add_smooth_group()`` needs to be called while "
"building the geometry, e.g. before the call to ``add_vertex()`` (if non-"
"indexed) or ``add_index()`` (if indexed)."
msgstr ""
"По умолчанию, при генерации нормалей, они будут вычисляться для каждого "
"лица. Если вы хотите получить гладкие вершинные нормали, при добавлении "
"вершин вызовите ``add_smooth_group()``. ``add_smooth_group()`` нужно "
"вызывать во время построения геометрии, например, перед вызовом "
"``add_vertex()`` (если он не индексирован) или ``add_index()`` (если "
"индексирован)."
