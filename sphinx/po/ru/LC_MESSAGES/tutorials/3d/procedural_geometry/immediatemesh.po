#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using ImmediateMesh"
msgstr "Использование ImmediateMesh"

msgid ""
"The :ref:`ImmediateMesh <class_ImmediateMesh>` is a convenient tool to "
"create dynamic geometry using an OpenGL 1.x-style API. Which makes it both "
"approachable to use and efficient for meshes which need to be updated every "
"frame."
msgstr ""
":ref:`ImmediateMesh <class_ImmediateMesh>` — удобный инструмент для создания "
"динамической геометрии с использованием API в стиле OpenGL 1.x. Что делает "
"его доступным в использовании и эффективным для сеток, которые необходимо "
"обновлять в каждом кадре."

msgid ""
"Generating complex geometry (several thousand vertices) with this tool is "
"inefficient, even if it's done only once. Instead, it is designed to "
"generate simple geometry that changes every frame."
msgstr ""
"Генерация сложной геометрии (несколько тысяч вершин) с помощью этого "
"инструмента неэффективна, даже если выполняется только один раз. Вместо "
"этого он предназначен для создания простой геометрии, которая меняется "
"каждый кадр."

msgid ""
"First, you need to create a :ref:`MeshInstance3D <class_meshinstance3d>` and "
"add an :ref:`ImmediateMesh <class_ImmediateMesh>` to it in the Inspector."
msgstr ""
"Сначала вам нужно создать :ref:`MeshInstance3D <class_meshinstance3d>` и "
"добавить к нему :ref:`ImmediateMesh <class_ImmediateMesh>` в Инспекторе."

msgid ""
"Next, add a script to the MeshInstance3D. The code for the ImmediateMesh "
"should go in the ``_process()`` function if you want it to update each "
"frame, or in the ``_ready()`` function if you want to create the mesh once "
"and not update it. If you only generate a surface once, the ImmediateMesh is "
"just as efficient as any other kind of mesh as the generated mesh is cached "
"and reused."
msgstr ""
"Затем добавьте скрипт в MeshInstance3D. Код для ImmediateMesh должен быть в "
"функции ``_process()``, если вы хотите, чтобы он обновлял каждый кадр, или в "
"функции ``_ready()``, если вы хотите создать сетку один раз и не обновлять "
"ее. Если вы генерируете поверхность только один раз, ImmediateMesh так же "
"эффективен, как и любой другой тип сетки, поскольку сгенерированная сетка "
"кэшируется и используется повторно."

msgid ""
"To begin generating geometry you must call ``surface_begin()``. "
"``surface_begin()`` takes a ``PrimitiveType`` as an argument. "
"``PrimitiveType`` instructs the GPU how to arrange the primitive based on "
"the vertices given whether it is triangles, lines, points, etc. A complete "
"list can be found under the :ref:`Mesh <class_mesh>` class reference page."
msgstr ""
"Чтобы начать создание геометрии, необходимо вызвать ``surface_begin()``. "
"``surface_begin()`` принимает аргумент ``PrimitiveType``. ``PrimitiveType`` "
"указывает GPU, как расположить примитив на основе переданных вершин (будь то "
"треугольники, линии, точки и т.д.). Полный список можно найти в документации "
"класса :ref:`Mesh <class_mesh>`."

msgid ""
"Once you have called ``surface_begin()`` you are ready to start adding "
"vertices. You add vertices one at a time. First you add vertex specific "
"attributes such as normals or UVs using ``surface_set_****()`` (e.g. "
"``surface_set_normal()``). Then you call ``surface_add_vertex()`` to add a "
"vertex with those attributes. For example:"
msgstr ""
"После вызова ``surface_begin()`` можно начинать добавлять вершины. Вершины "
"добавляются по одной. Сначала задаются атрибуты конкретной вершины, такие "
"как нормали или UV-координаты, с помощью ``surface_set_****()`` (например, "
"``surface_set_normal()``). Затем вызывается ``surface_add_vertex()`` для "
"добавления вершины с этими атрибутами. Например:"

msgid ""
"Only attributes added before the call to ``surface_add_vertex()`` will be "
"included in that vertex. If you add an attribute twice before calling "
"``surface_add_vertex()``, only the second call will be used."
msgstr ""
"В вершину включаются только атрибуты, добавленные до вызова "
"``surface_add_vertex()``. Если вы добавите атрибут дважды перед вызовом "
"``surface_add_vertex()``, будет использован только второй вызов."

msgid ""
"Finally, once you have added all your vertices call ``surface_end()`` to "
"signal that you have finished generating the surface. You can call "
"``surface_begin()`` and ``surface_end()`` multiple times to generate "
"multiple surfaces for the mesh."
msgstr ""
"Наконец, после добавления всех вершин вызовите ``surface_end()``, чтобы "
"сигнализировать о завершении создания поверхности. Вы можете вызывать "
"``surface_begin()`` и ``surface_end()`` несколько раз для создания "
"нескольких поверхностей для одной сетки."

msgid ""
"The example code below draws a single triangle in the ``_ready()`` function."
msgstr "Пример кода ниже рисует один треугольник в функции ``_ready()``."

msgid ""
"The ImmediateMesh can also be used across frames. Each time you call "
"``surface_begin()`` and ``surface_end()``, you are adding a new surface to "
"the ImmediateMesh. If you want to recreate the mesh from scratch each frame, "
"call ``clear_surfaces()`` before calling ``surface_begin()``."
msgstr ""
"ImmediateMesh также можно использовать между кадрами. Каждый раз, когда вы "
"вызываете ``surface_begin()`` и ``surface_end()``, вы добавляете новую "
"поверхность в ImmediateMesh. Если вы хотите воссоздавать сетку с нуля в "
"каждом кадре, вызовите ``clear_surfaces()`` перед вызовом "
"``surface_begin()``."

msgid ""
"The above code will dynamically create and draw a single surface each frame."
msgstr ""
"Приведенный выше код будет динамически создавать и рисовать одну поверхность "
"в каждом кадре."
