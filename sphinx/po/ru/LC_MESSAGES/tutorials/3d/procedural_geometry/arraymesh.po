#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the ArrayMesh"
msgstr "Использование ArrayMesh"

msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`."
msgstr ""
"В этом уроке будут представлены основы использования :ref:`ArrayMesh "
"<class_arraymesh>`."

msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to five "
"parameters. The first two are required, while the last three are optional."
msgstr ""
"Для этого мы будем использовать функцию :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, которая принимает до пяти "
"параметров. Первые два обязательны, а последние три опциональны."

msgid ""
"The first parameter is the ``PrimitiveType``, an OpenGL concept that "
"instructs the GPU how to arrange the primitive based on the vertices given, "
"i.e. whether they represent triangles, lines, points, etc. "
"See :ref:`Mesh.PrimitiveType <enum_Mesh_PrimitiveType>` for the options "
"available."
msgstr ""
"Первым параметром является ``PrimitiveType``, концепция OpenGL, которая "
"указывает GPU, как расположить примитив на основе заданных вершин, т.е. "
"представляют ли они треугольники, линии, точки и т.д. Доступные варианты см. "
"в :ref:`Mesh.PrimitiveType <enum_Mesh_PrimitiveType>`."

msgid ""
"The second parameter, ``arrays``, is the actual Array that stores the mesh "
"information. The array is a normal Godot array that is constructed with "
"empty brackets ``[]``. It stores a ``Packed**Array`` (e.g. "
"PackedVector3Array, PackedInt32Array, etc.) for each type of information "
"that will be used to build the surface."
msgstr ""
"Второй параметр, ``arrays``, представляет собой массив, хранящий информацию "
"о сетке. Это обычный массив Godot, созданный с помощью пустых скобок ``[]``. "
"Он хранит ``Packed**Array`` (например, PackedVector3Array, PackedInt32Array "
"и т.д.) для каждого типа информации, используемой при построении поверхности."

msgid ""
"Common elements of ``arrays`` are listed below, together with the position "
"they must have within ``arrays``. See :ref:`Mesh.ArrayType "
"<enum_Mesh_ArrayType>` for a full list."
msgstr ""
"Распространённые элементы ``arrays`` перечислены ниже вместе с позициями, "
"которые они должны занимать в ``arrays``. Полный список см. "
"в :ref:`Mesh.ArrayType <enum_Mesh_ArrayType>`."

msgid "Index"
msgstr "Индекс"

msgid "Mesh.ArrayType Enum"
msgstr "Mesh.ArrayType - перечисление"

msgid "Array type"
msgstr "Тип массива"

msgid "0"
msgstr "0"

msgid "``ARRAY_VERTEX``"
msgstr "``ARRAY_VERTEX``"

msgid ""
":ref:`PackedVector3Array <class_PackedVector3Array>` "
"or :ref:`PackedVector2Array <class_PackedVector2Array>`"
msgstr ""
":ref:`PackedVector3Array <class_PackedVector3Array>` "
"или :ref:`PackedVector2Array <class_PackedVector2Array>`"

msgid "1"
msgstr "1"

msgid "``ARRAY_NORMAL``"
msgstr "``ARRAY_NORMAL``"

msgid ":ref:`PackedVector3Array <class_PackedVector3Array>`"
msgstr ":ref:`PackedVector3Array <class_PackedVector3Array>`"

msgid "2"
msgstr "2"

msgid "``ARRAY_TANGENT``"
msgstr "``ARRAY_TANGENT``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` "
"or :ref:`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 "
"floats. The first 3 floats determine the tangent, and the last float the "
"binormal direction as -1 or 1."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` "
"или :ref:`PackedFloat64Array <class_PackedFloat64Array>` групп по 4 числа с "
"плавающей запятой. Первые 3 числа определяют касательную, а последнее число "
"- направление бинормали как -1 или 1."

msgid "3"
msgstr "3"

msgid "``ARRAY_COLOR``"
msgstr "``ARRAY_COLOR``"

msgid ":ref:`PackedColorArray <class_PackedColorArray>`"
msgstr ":ref:`PackedColorArray <class_PackedColorArray>`"

msgid "4"
msgstr "4"

msgid "``ARRAY_TEX_UV``"
msgstr "``ARRAY_TEX_UV``"

msgid ""
":ref:`PackedVector2Array <class_PackedVector2Array>` "
"or :ref:`PackedVector3Array <class_PackedVector3Array>`"
msgstr ""
":ref:`PackedVector2Array <class_PackedVector2Array>` "
"или :ref:`PackedVector3Array <class_PackedVector3Array>`"

msgid "5"
msgstr "5"

msgid "``ARRAY_TEX_UV2``"
msgstr "``ARRAY_TEX_UV2``"

msgid "10"
msgstr "10"

msgid "``ARRAY_BONES``"
msgstr "``ARRAY_BONES``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` of groups of 4 floats "
"or :ref:`PackedInt32Array <class_PackedInt32Array>` of groups of 4 ints. "
"Each group lists indexes of 4 bones that affects a given vertex."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` групп по 4 числа с "
"плавающей запятой или :ref:`PackedInt32Array <class_PackedInt32Array>` групп "
"по 4 целых числа. Каждая группа перечисляет индексы 4 костей, влияющих на "
"данную вершину."

msgid "11"
msgstr "11"

msgid "``ARRAY_WEIGHTS``"
msgstr "``ARRAY_WEIGHTS``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` "
"or :ref:`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 "
"floats. Each float lists the amount of weight the corresponding bone in "
"``ARRAY_BONES`` has on a given vertex."
msgstr ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` "
"или :ref:`PackedFloat64Array <class_PackedFloat64Array>` групп по 4 числа с "
"плавающей запятой. Каждое число указывает вес соответствующей кости из "
"``ARRAY_BONES`` для данной вершины."

msgid "12"
msgstr "12"

msgid "``ARRAY_INDEX``"
msgstr "``ARRAY_INDEX``"

msgid ":ref:`PackedInt32Array <class_PackedInt32Array>`"
msgstr ":ref:`PackedInt32Array <class_PackedInt32Array>`"

msgid ""
"In most cases when creating a mesh, we define it by its vertex positions. So "
"usually, the array of vertices (at index 0) is required, while the index "
"array (at index 12) is optional and will only be used if included. It is "
"also possible to create a mesh with only the index array and no vertex "
"array, but that's beyond the scope of this tutorial."
msgstr ""
"В большинстве случаев при создании сетки мы определяем ее по позициям "
"вершин. Поэтому обычно массив вершин (с индексом 0) является обязательным, "
"тогда как массив индексов (с индексом 12) является необязательным и будет "
"использоваться только в том случае, если он включен. Также возможно создать "
"сетку только с массивом индексов и без массива вершин, но это выходит за "
"рамки данного руководства."

msgid ""
"All the other arrays carry information about the vertices. They are optional "
"and will only be used if included. Some of these arrays (e.g. "
"``ARRAY_COLOR``) use one entry per vertex to provide extra information about "
"vertices. They must have the same size as the vertex array. Other arrays "
"(e.g. ``ARRAY_TANGENT``) use four entries to describe a single vertex. These "
"must be exactly four times larger than the vertex array."
msgstr ""
"Все остальные массивы содержат информацию о вершинах. Они опциональны и "
"будут использоваться только если включены. Некоторые из этих массивов "
"(например, ``ARRAY_COLOR``) используют по одной записи на вершину для "
"предоставления дополнительной информации о вершинах. Они должны иметь тот же "
"размер, что и массив вершин. Другие массивы (например, ``ARRAY_TANGENT``) "
"используют четыре записи для описания одной вершины. Они должны быть ровно в "
"четыре раза больше массива вершин."

msgid ""
"For normal usage, the last three parameters "
"in :ref:`add_surface_from_arrays() "
"<class_arraymesh_method_add_surface_from_arrays>` are typically left empty."
msgstr ""
"При обычном использовании последние три параметра "
"в :ref:`add_surface_from_arrays() "
"<class_arraymesh_method_add_surface_from_arrays>` обычно оставляют пустыми."

msgid "Setting up the ArrayMesh"
msgstr "Настройка ArrayMesh"

msgid ""
"In the editor, create a :ref:`MeshInstance3D <class_meshinstance3d>` and add "
"an :ref:`ArrayMesh <class_arraymesh>` to it in the Inspector. Normally, "
"adding an ArrayMesh in the editor is not useful, but in this case it allows "
"us to access the ArrayMesh from code without creating one."
msgstr ""
"В редакторе создайте :ref:`MeshInstance3D <class_meshinstance3d>` и добавьте "
"к нему :ref:`ArrayMesh <class_arraymesh>` в инспекторе. Обычно добавление "
"ArrayMesh в редакторе не имеет особого смысла, но в данном случае это "
"позволяет получить доступ к ArrayMesh из кода без его создания."

msgid "Next, add a script to the MeshInstance3D."
msgstr "Затем добавьте скрипт к MeshInstance3D."

msgid "Under ``_ready()``, create a new Array."
msgstr "Ниже ``_ready()`` создайте новый массив."

msgid ""
"This will be the array that we keep our surface information in - it will "
"hold all the arrays of data that the surface needs. Godot will expect it to "
"be of size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""
"Это будет массив, в котором мы храним нашу информацию о поверхности, он "
"будет содержать все массивы данных, которые нужны поверхности. Godot "
"ожидает, что он будет иметь размер ``Mesh.ARRAY_MAX``, поэтому измените его "
"размер соответствующим образом."

msgid "Next create the arrays for each data type you will use."
msgstr ""
"Затем создайте массивы для каждого типа данных, который вы будете "
"использовать."

msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""
"После того, как вы заполнили свои массивы данных своей геометрией, вы можете "
"создать сетку, добавив каждый массив в `surface_array`, а затем зафиксировав "
"его в сетке."

msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""
"В этом примере мы использовали `Mesh.PRIMITIVE_TRIANGLES`, но вы можете "
"использовать любой примитивный тип, доступный из сетки."

msgid "Put together, the full code looks like:"
msgstr "В совокупности полный код выглядит следующим образом:"

msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code for generating a sphere."
msgstr ""
"Код, который находится в середине, может быть любым, каким вы захотите. Ниже "
"мы приведем пример кода для генерации сферы."

msgid "Generating geometry"
msgstr "Создаём геометрию"

msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""
"Здесь приведен пример кода для генерации сферы. Хотя код представлен на "
"GDScript, в подходе к генерации сферы нет ничего специфичного для Godot. Эта "
"реализация не имеет ничего общего с ArrayMeshes и является просто общим "
"подходом к генерации сферы. Если у вас возникли трудности с пониманием или "
"вы хотите узнать больше о процедурной геометрии в целом, вы можете "
"воспользоваться любым учебником, который найдете в Интернете."

msgid "Saving"
msgstr "Сохранение"

msgid ""
"Finally, we can use the :ref:`ResourceSaver <class_resourcesaver>` class to "
"save the ArrayMesh. This is useful when you want to generate a mesh and then "
"use it later without having to re-generate it."
msgstr ""
"Наконец, мы можем использовать класс :ref:`ResourceSaver "
"<class_resourcesaver>` для сохранения ArrayMesh. Это полезно, когда вы "
"хотите сгенерировать сетку, а затем использовать ее позже без необходимости "
"повторной генерации."
