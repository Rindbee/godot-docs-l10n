#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Measuring performance"
msgstr "Замер производительности"

msgid "Screenshot of the Godot profiler"
msgstr "Скриншот профайлера Godot"

msgid "Caches"
msgstr "Кэши"

msgid ""
"CPU caches are something else to be particularly aware of, especially when "
"comparing timing results of two different versions of a function. The "
"results can be highly dependent on whether the data is in the CPU cache or "
"not. CPUs don't load data directly from the system RAM, even though it's "
"huge in comparison to the CPU cache (several gigabytes instead of a few "
"megabytes). This is because system RAM is very slow to access. Instead, CPUs "
"load data from a smaller, faster bank of memory called cache. Loading data "
"from cache is very fast, but every time you try and load a memory address "
"that is not stored in cache, the cache must make a trip to main memory and "
"slowly load in some data. This delay can result in the CPU sitting around "
"idle for a long time, and is referred to as a \"cache miss\"."
msgstr ""
"Кэш-память процессора - это то, о чем следует помнить, особенно при "
"сравнении временных результатов двух разных версий функции. Результаты могут "
"сильно зависеть от того, находятся ли данные в кэше процессора или нет. "
"Процессоры не загружают данные непосредственно из системной оперативной "
"памяти, даже если она огромна по сравнению с кэшем процессора (несколько "
"гигабайт вместо нескольких мегабайт). Это происходит потому, что доступ к "
"системной оперативной памяти очень медленный. Вместо этого процессоры "
"загружают данные из меньшего, более быстрого банка памяти, называемого кэш-"
"памятью. Загрузка данных из кэша происходит очень быстро, но каждый раз, "
"когда вы пытаетесь загрузить адрес памяти, который не хранится в кэше, кэш "
"должен совершить путешествие в основную память и медленно загрузить данные. "
"Эта задержка может привести к тому, что процессор будет долгое время "
"простаивать, и называется \"пропуском кэша\"."

msgid ""
"Understanding caching is also crucial to CPU optimization. If you have an "
"algorithm (routine) that loads small bits of data from randomly spread out "
"areas of main memory, this can result in a lot of cache misses, a lot of the "
"time, the CPU will be waiting around for data instead of doing any work. "
"Instead, if you can make your data accesses localised, or even better, "
"access memory in a linear fashion (like a continuous list), then the cache "
"will work optimally and the CPU will be able to work as fast as possible."
msgstr ""
"Понимание кэширования также имеет решающее значение для оптимизации "
"процессора. Если у вас есть алгоритм (рутина), который загружает небольшие "
"биты данных из произвольно распределенных областей основной памяти, это "
"может привести к большому количеству пропусков кэша, и большую часть времени "
"процессор будет ждать данных, вместо того чтобы выполнять какую-либо работу. "
"Вместо этого, если вы можете сделать доступ к данным локализованным или, еще "
"лучше, обращаться к памяти линейно (как к непрерывному списку), тогда кэш "
"будет работать оптимально, а процессор сможет работать максимально быстро."

msgid "Languages"
msgstr "Языки"

msgid "GDScript"
msgstr "GDScript_"

msgid "C#"
msgstr "C#"

msgid "C++"
msgstr "C++"

msgid "Threads"
msgstr "Потоки"

msgid "SceneTree"
msgstr "Дерево сцены"

msgid "Physics"
msgstr "Физика"

msgid ""
"The solution to jitter is to use *fixed timestep interpolation*, which "
"involves smoothing the rendered positions and rotations over multiple frames "
"to match the physics. You can either implement this yourself or use a `third-"
"party addon <https://github.com/lawnjelly/smoothing-addon>`__. Performance-"
"wise, interpolation is a very cheap operation compared to running a physics "
"tick. It's orders of magnitude faster, so this can be a significant "
"performance win while also reducing jitter."
msgstr ""
"Решением проблемы джиттера является использование *интерполяции с "
"фиксированным временным интервалом*, которая включает в себя сглаживание "
"отрисованных позиций и поворотов в течение нескольких кадров для "
"соответствия физике. Вы можете реализовать это самостоятельно или "
"использовать `аддон <https://github.com/lawnjelly/smoothing-addon>`__. С "
"точки зрения производительности, интерполяция - очень дешёвая операция по "
"сравнению с выполнением физического тика. Она на порядки быстрее, так что "
"это может быть значительным выигрышем в производительности, а также "
"уменьшением джиттера."
