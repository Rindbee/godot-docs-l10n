#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Runtime file loading and saving"
msgstr "Загрузка и сохранение файла времени выполнения"

msgid ""
"See :ref:`doc_saving_games` for information on saving and loading game "
"progression."
msgstr ""
"Информацию о сохранении и загрузке игрового процесса см. "
"в :ref:`doc_saving_games`."

msgid ""
"Sometimes, :ref:`exporting packs, patches, and mods <doc_exporting_pcks>` is "
"not ideal when you want players to be able to load user-generated content in "
"your project. It requires users to generate a PCK or ZIP file through the "
"Godot editor, which contains resources imported by Godot."
msgstr ""
"Иногда :ref:`экспорт пакетов, патчей и модов <doc_exporting_pcks>` не "
"идеален, если вы хотите, чтобы игроки могли загружать пользовательский "
"контент в свой проект. Для этого пользователям необходимо создать PCK- или "
"ZIP-файл в редакторе Godot, содержащий ресурсы, импортированные Godot."

msgid "Example use cases for runtime file loading and saving include:"
msgstr ""
"Примеры вариантов использования загрузки и сохранения файлов во время "
"выполнения включают в себя:"

msgid "Loading texture packs designed for the game."
msgstr "Загрузка пакетов текстур, разработанных для игры."

msgid ""
"Loading user-provided audio tracks and playing them back in an in-game radio "
"station."
msgstr ""
"Загрузка пользовательских аудиодорожек и их воспроизведение на игровой "
"радиостанции."

msgid ""
"Loading custom levels or 3D models that can be designed with any 3D DCC that "
"can export to glTF (including glTF scenes saved by Godot at runtime)."
msgstr ""
"Загрузка пользовательских уровней или 3D-моделей, которые можно разработать "
"с помощью любого 3D DCC, который может экспортировать в glTF (включая сцены "
"glTF, сохраненные Godot во время выполнения)."

msgid "Using user-provided fonts for menus and HUD."
msgstr "Использование пользовательских шрифтов для меню и HUD."

msgid ""
"Saving/loading a file format that can contain multiple files but can still "
"easily be read by other applications (ZIP)."
msgstr ""
"Сохранение/загрузка формата файла, который может содержать несколько файлов, "
"но при этом может быть легко прочитан другими приложениями (ZIP)."

msgid ""
"Loading files created by another game or program, or even game data files "
"from another game not made with Godot."
msgstr ""
"Загрузка файлов, созданных другой игрой или программой, или даже файлов "
"игровых данных из другой игры, не созданной с помощью Godot."

msgid ""
"Runtime file loading can be combined with :ref:`HTTP requests "
"<doc_http_request_class>` to load resources from the Internet directly."
msgstr ""
"Загрузку файла во время выполнения можно совмещать с :ref:`HTTP-запросами "
"<doc_http_request_class>` для непосредственной загрузки ресурсов из "
"Интернета."

msgid ""
"Do **not** use this runtime loading approach to load resources that are part "
"of the project, as it's less efficient and doesn't allow benefiting from "
"Godot's resource handling functionality (such as translation remaps). "
"See :ref:`doc_import_process` for details."
msgstr ""
"**Не** используйте этот подход к загрузке ресурсов, входящих в проект, так "
"как он менее эффективен и не позволяет использовать возможности Godot по "
"управлению ресурсами (например, переназначение трансляций). Подробности см. "
"в :ref:`doc_import_process`."

msgid ""
"You can see how saving and loading works in action using the `Run-time File "
"Saving and Loading (Serialization) demo project <https://github.com/"
"godotengine/godot-demo-projects/blob/master/loading/runtime_save_load>`__."
msgstr ""
"Вы можете увидеть, как сохранение и загрузка работают в действии, используя "
"демонстрационный проект `Сохранение и Загрузка файлов во время выполнения "
"(сериализация)» <https://github.com/godotengine/godot-demo-projects/blob/"
"master/loading/runtime_save_load>`__."

msgid "Plain text and binary files"
msgstr "Простые текстовые и двоичные файлы"

msgid ""
"Godot's :ref:`class_FileAccess` class provides methods to access files on "
"the filesystem for reading and writing:"
msgstr ""
"Класс Godot :ref:`class_FileAccess` предоставляет методы для доступа к "
"файлам в файловой системе для чтения и записи:"

msgid ""
"To handle custom binary formats (such as loading file formats not supported "
"by Godot), :ref:`class_FileAccess` provides several methods to read/write "
"integers, floats, strings and more. These FileAccess methods have names that "
"start with ``get_`` and ``store_``."
msgstr ""
"Для работы с пользовательскими двоичными форматами (например, для загрузки "
"файлов, не поддерживаемых Godot), :ref:`class_FileAccess` предоставляет "
"несколько методов для чтения/записи целых чисел, чисел с плавающей точкой, "
"строк и т. д. Имена этих методов FileAccess начинаются с ``get_`` и "
"``store_``."

msgid ""
"If you need more control over reading binary files or need to read binary "
"streams that are not part of a file, :ref:`class_PackedByteArray` provides "
"several helper methods to decode/encode series of bytes to integers, floats, "
"strings and more. These PackedByteArray methods have names that start with "
"``decode_`` and ``encode_``. See also :ref:`doc_binary_serialization_api`."
msgstr ""
"Если вам нужен больший контроль над чтением двоичных файлов или нужно читать "
"двоичные потоки, не являющиеся частью файла, :ref:`class_PackedByteArray` "
"предоставляет несколько вспомогательных методов для декодирования/"
"кодирования последовательностей байтов в целые числа, числа с плавающей "
"точкой, строки и другие типы. Имена этих методов PackedByteArray начинаются "
"с ``decode_`` и ``encode_``. См. также :ref:`doc_binary_serialization_api`."

msgid "Images"
msgstr "Images (Изображения)"

msgid ""
"Image's :ref:`Image.load_from_file <class_Image_method_load_from_file>` "
"static method handles everything, from format detection based on file "
"extension to reading the file from disk."
msgstr ""
"Статический метод изображения :ref:`Image.load_from_file "
"<class_Image_method_load_from_file>` обрабатывает все: от определения "
"формата на основе расширения файла до чтения файла с диска."

msgid ""
"If you need error handling or more control (such as changing the scale an "
"SVG is loaded at), use one of the following methods depending on the file "
"format:"
msgstr ""
"Если вам нужна обработка ошибок или больший контроль (например, изменение "
"масштаба загрузки SVG), используйте один из следующих методов в зависимости "
"от формата файла:"

msgid ""
":ref:`Image.load_jpg_from_buffer <class_Image_method_load_jpg_from_buffer>`"
msgstr ""
":ref:`Image.load_jpg_from_buffer <class_Image_method_load_jpg_from_buffer>`"

msgid ""
":ref:`Image.load_ktx_from_buffer <class_Image_method_load_ktx_from_buffer>`"
msgstr ""
":ref:`Image.load_ktx_from_buffer <class_Image_method_load_ktx_from_buffer>`"

msgid ""
":ref:`Image.load_png_from_buffer <class_Image_method_load_png_from_buffer>`"
msgstr ""
":ref:`Image.load_png_from_buffer <class_Image_method_load_png_from_buffer>`"

msgid ""
":ref:`Image.load_svg_from_buffer <class_Image_method_load_svg_from_buffer>` "
"or :ref:`Image.load_svg_from_string "
"<class_Image_method_load_svg_from_string>`"
msgstr ""
":ref:`Image.load_svg_from_buffer <class_Image_method_load_svg_from_buffer>` "
"или :ref:`Image.load_svg_from_string "
"<class_Image_method_load_svg_from_string>`"

msgid ""
":ref:`Image.load_tga_from_buffer <class_Image_method_load_tga_from_buffer>`"
msgstr ""
":ref:`Image.load_tga_from_buffer <class_Image_method_load_tga_from_buffer>`"

msgid ""
":ref:`Image.load_webp_from_buffer <class_Image_method_load_webp_from_buffer>`"
msgstr ""
":ref:`Image.load_webp_from_buffer <class_Image_method_load_webp_from_buffer>`"

msgid ""
"Several image formats can also be saved by Godot at runtime using the "
"following methods:"
msgstr ""
"Godot также может сохранять несколько форматов изображений во время "
"выполнения, используя следующие методы:"

msgid ""
":ref:`Image.save_png <class_Image_method_save_png>` "
"or :ref:`Image.save_png_to_buffer <class_Image_method_save_png_to_buffer>`"
msgstr ""
":ref:`Image.save_png <class_Image_method_save_png>` "
"или :ref:`Image.save_png_to_buffer <class_Image_method_save_png_to_buffer>`"

msgid ""
":ref:`Image.save_webp <class_Image_method_save_webp>` "
"or :ref:`Image.save_webp_to_buffer <class_Image_method_save_webp_to_buffer>`"
msgstr ""
":ref:`Image.save_webp <class_Image_method_save_webp>` "
"или :ref:`Image.save_webp_to_buffer <class_Image_method_save_webp_to_buffer>`"

msgid ""
":ref:`Image.save_jpg <class_Image_method_save_jpg>` "
"or :ref:`Image.save_jpg_to_buffer <class_Image_method_save_jpg_to_buffer>`"
msgstr ""
":ref:`Image.save_jpg <class_Image_method_save_jpg>` "
"или :ref:`Image.save_jpg_to_buffer <class_Image_method_save_jpg_to_buffer>`"

msgid ""
":ref:`Image.save_exr <class_Image_method_save_exr>` "
"or :ref:`Image.save_exr_to_buffer <class_Image_method_save_exr_to_buffer>` "
"*(only available in editor builds, cannot be used in exported projects)*"
msgstr ""
":ref:`Image.save_exr <class_Image_method_save_exr>` "
"или :ref:`Image.save_exr_to_buffer <class_Image_method_save_exr_to_buffer>` "
"*(доступно только в сборках редактора, не может использоваться в "
"экспортированных проектах)*"

msgid ""
"The methods with the ``to_buffer`` suffix save the image to a "
"PackedByteArray instead of the filesystem. This is useful to send the image "
"over the network or into a ZIP archive without having to write it on the "
"filesystem. This can increase performance by reducing I/O utilization."
msgstr ""
"Методы с суффиксом ``to_buffer`` сохраняют изображение в массиве "
"PackedByteArray, а не в файловой системе. Это полезно для передачи "
"изображения по сети или в ZIP-архиве без необходимости записи его в файловую "
"систему. Это может повысить производительность за счёт снижения нагрузки на "
"ввод-вывод."

msgid ""
"If displaying the loaded image on a 3D surface, make sure to "
"call :ref:`Image.generate_mipmaps <class_Image_method_generate_mipmaps>` so "
"that the texture doesn't look grainy when viewed at a distance. This is also "
"useful in 2D when following instructions on :ref:`reducing aliasing when "
"downsampling <doc_multiple_resolutions_reducing_aliasing_on_downsampling>`."
msgstr ""
"При отображении загруженного изображения на 3D-поверхности обязательно "
"вызовите метод :ref:`Image.generate_mipmaps "
"<class_Image_method_generate_mipmaps>`, чтобы текстура не выглядела "
"зернистой при просмотре на расстоянии. Это также полезно в 2D при выполнении "
"инструкций по :ref:`уменьшению алиасинга при понижении частоты дискретизации "
"<doc_multiple_resolutions_reducing_aliasing_on_downsampling>`."

msgid ""
"Example of loading an image and displaying it in a :ref:`class_TextureRect` "
"node (which requires conversion to :ref:`class_ImageTexture`):"
msgstr ""
"Пример загрузки изображения и отображения его в "
"узле :ref:`class_TextureRect` (требующем преобразования "
"в :ref:`class_ImageTexture`):"

msgid "Audio/video files"
msgstr "Аудио/видео файлы"

msgid ""
"Example of loading an Ogg Vorbis audio file in "
"an :ref:`class_AudioStreamPlayer` node:"
msgstr ""
"Пример загрузки аудиофайла Ogg Vorbis в узел :ref:`class_AudioStreamPlayer`:"

msgid ""
"Example of loading an Ogg Theora video file in "
"a :ref:`class_VideoStreamPlayer` node:"
msgstr ""
"Пример загрузки видеофайла Ogg Theora в узел :ref:`class_VideoStreamPlayer`:"

msgid "3D scenes"
msgstr "3D сцены"

msgid ""
"Godot has first-class support for glTF 2.0, both in the editor and exported "
"projects. Using :ref:`class_gltfdocument` and :ref:`class_gltfstate` "
"together, Godot can load and save glTF files in exported projects, in both "
"text (``.gltf``) and binary (``.glb``) formats. The binary format should be "
"preferred as it's faster to write and smaller, but the text format is easier "
"to debug."
msgstr ""
"Godot обеспечивает первоклассную поддержку glTF 2.0 как в редакторе, так и в "
"экспортированных проектах. Используя :ref:`class_gltfdocument` "
"и :ref:`class_gltfstate` вместе, Godot может загружать и сохранять файлы "
"glTF в экспортированных проектах как в текстовом (``.gltf``), так и в "
"двоичном (``.glb``) формате. Предпочтительнее двоичный формат, поскольку он "
"быстрее пишется и компактнее, но текстовый формат проще отлаживать."

msgid ""
"Example of loading a glTF scene and appending its root node to the scene:"
msgstr "Пример загрузки сцены glTF и добавления ее корневого узла к сцене:"

msgid ""
"When loading a glTF scene, a *base path* must be set so that external "
"resources like textures can be loaded correctly. When loading from a file, "
"the base path is automatically set to the folder containing the file. When "
"loading from a buffer, this base path must be manually set as there is no "
"way for Godot to infer this path."
msgstr ""
"При загрузке сцены glTF необходимо задать *базовый путь* для корректной "
"загрузки внешних ресурсов, таких как текстуры. При загрузке из файла базовый "
"путь автоматически указывает на папку, содержащую файл. При загрузке из "
"буфера этот базовый путь необходимо задать вручную, так как Godot не может "
"его определить."

msgid ""
"To set the base path, set :ref:`GLTFState.base_path "
"<class_GLTFState_property_base_path>` on your GLTFState instance *before* "
"calling :ref:`GLTFDocument.append_from_buffer "
"<class_GLTFDocument_method_append_from_buffer>` "
"or :ref:`GLTFDocument.append_from_file "
"<class_GLTFDocument_method_append_from_file>`."
msgstr ""
"Чтобы задать базовый путь, установите :ref:`GLTFState.base_path "
"<class_GLTFState_property_base_path>` на вашем экземпляре GLTFState *перед* "
"вызовом :ref:`GLTFDocument.append_from_buffer "
"<class_GLTFDocument_method_append_from_buffer>` "
"или :ref:`GLTFDocument.append_from_file "
"<class_GLTFDocument_method_append_from_file>`."

msgid "Fonts"
msgstr "Fonts (Шрифты)"

msgid ""
":ref:`FontFile.load_dynamic_font <class_FontFile_method_load_bitmap_font>` "
"supports the following font file formats: TTF, OTF, WOFF, WOFF2, PFB, PFM"
msgstr ""
":ref:`FontFile.load_dynamic_font <class_FontFile_method_load_bitmap_font>` "
"поддерживает следующие форматы файлов шрифтов: TTF, OTF, WOFF, WOFF2, PFB, "
"PFM"

msgid ""
"On the other hand, :ref:`FontFile.load_bitmap_font "
"<class_FontFile_method_load_bitmap_font>` supports the `BMFont <https://"
"www.angelcode.com/products/bmfont/>`__ format (``.fnt`` or ``.font``)."
msgstr ""
"С другой стороны, :ref:`FontFile.load_bitmap_font "
"<class_FontFile_method_load_bitmap_font>` поддерживает формат `BMFont "
"<https://www.angelcode.com/products/bmfont/>`__ (``.fnt`` или ``.font``)."

msgid ""
"Additionally, it is possible to load any font that is installed on the "
"system using Godot's support for :ref:`doc_using_fonts_system_fonts`."
msgstr ""
"Кроме того, можно загрузить любой шрифт, установленный в системе, используя "
"поддержку Godot для :ref:`doc_using_fonts_system_fonts`."

msgid ""
"Example of loading a font file automatically according to its file "
"extension, then adding it as a theme override to a :ref:`class_Label` node:"
msgstr ""
"Пример автоматической загрузки файла шрифта в соответствии с его расширением "
"и последующего добавления его в качестве переопределения темы к "
"узлу :ref:`class_Label`:"

msgid "ZIP archives"
msgstr "ZIP-архивы"

msgid ""
"Godot supports reading and writing ZIP archives using "
"the :ref:`class_zipreader` and :ref:`class_zippacker` classes. This supports "
"any ZIP file, including files generated by Godot's \"Export PCK/ZIP\" "
"functionality (although these will contain imported Godot resources rather "
"than the original project files)."
msgstr ""
"Godot поддерживает чтение и запись ZIP-архивов с помощью "
"классов :ref:`class_zipreader` и :ref:`class_zippacker`. Это позволяет "
"использовать любые ZIP-файлы, включая файлы, созданные функцией Godot "
"\"Export PCK/ZIP\" (хотя они будут содержать импортированные ресурсы Godot, "
"а не исходные файлы проекта)."

msgid ""
"Use :ref:`ProjectSettings.load_resource_pack "
"<class_ProjectSettings_method_load_resource_pack>` to load PCK or ZIP files "
"exported by Godot as :ref:`additional data packs <doc_exporting_pcks>`. That "
"approach is preferred for DLCs, as it makes interacting with additional data "
"packs seamless (virtual filesystem)."
msgstr ""
"Используйте :ref:`ProjectSettings.load_resource_pack "
"<class_ProjectSettings_method_load_resource_pack>` для загрузки PCK- или ZIP-"
"файлов, экспортированных Godot как :ref:`additional data packs "
"<doc_exporting_pcks>`. Этот подход предпочтителен для DLC, поскольку он "
"обеспечивает бесперебойное взаимодействие с дополнительными пакетами данных "
"(виртуальная файловая система)."

msgid ""
"This ZIP archive support can be combined with runtime image, 3D scene and "
"audio loading to provide a seamless modding experience without requiring "
"users to go through the Godot editor to generate PCK/ZIP files."
msgstr ""
"Поддержку ZIP-архивов можно объединить с загрузкой изображений во время "
"выполнения, 3D-сцен и аудио, чтобы обеспечить бесперебойный процесс моддинга "
"без необходимости использования редактора Godot для создания файлов PCK/ZIP."

msgid ""
"Example that lists files in a ZIP archive in an :ref:`class_ItemList` node, "
"then writes contents read from it to a new ZIP archive (essentially "
"duplicating the archive):"
msgstr ""
"Пример, который перечисляет файлы в ZIP-архиве в узле :ref:`class_ItemList`, "
"а затем записывает считанное из него содержимое в новый ZIP-архив (по сути "
"дублируя архив):"
