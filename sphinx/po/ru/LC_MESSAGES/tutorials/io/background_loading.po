#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Background loading"
msgstr "Фоновая загрузка"

msgid ""
"Commonly, games need to load resources asynchronously. When switching the "
"main scene of your game (e.g. going to a new level), you might want to show "
"a loading screen with some indication that progress is being made, or you "
"may want to load additional resources during gameplay."
msgstr ""
"Обычно играм необходимо загружать ресурсы асинхронно. При переключении "
"основной сцены вашей игры (например, при переходе на новый уровень) вы "
"можете захотеть отобразить экран загрузки с некоторой индикацией прогресса "
"или загрузить дополнительные ресурсы во время игры."

msgid ""
"The standard load method (:ref:`ResourceLoader.load "
"<class_ResourceLoader_method_load>` or GDScript's simpler :ref:`load "
"<class_@GDScript_method_load>`) blocks your thread, making your game appear "
"unresponsive while the resource is being loaded."
msgstr ""
"Стандартный метод загрузки (:ref:`ResourceLoader.load "
"<class_ResourceLoader_method_load>` или более простой метод "
"GDScript :ref:`load <class_@GDScript_method_load>`) блокирует ваш поток, из-"
"за чего ваша игра выглядит неотзывчивой во время загрузки ресурса."

msgid ""
"One way around this is using ``ResourceLoader`` to load resources "
"asynchronously in background threads."
msgstr ""
"Одним из способов решения этой проблемы является использование "
"``ResourceLoader`` для асинхронной загрузки ресурсов в фоновых потоках."

msgid "Using ResourceLoader"
msgstr "Использование ResourceLoader"

msgid ""
"Generally, you queue requests to load resources for a path "
"using :ref:`ResourceLoader.load_threaded_request "
"<class_ResourceLoader_method_load_threaded_request>`, which will then be "
"loaded in threads in the background."
msgstr ""
"Обычно запросы на загрузку ресурсов для пути ставятся в очередь с "
"помощью :ref:`ResourceLoader.load_threaded_request "
"<class_ResourceLoader_method_load_threaded_request>`, которые затем будут "
"загружены в потоках в фоновом режиме."

msgid ""
"You can check the status with :ref:`ResourceLoader.load_threaded_get_status "
"<class_ResourceLoader_method_load_threaded_get_status>`. Progress can be "
"obtained by passing an array variable via progress which will return a one "
"element array containing the percentage."
msgstr ""
"Вы можете проверить статус с "
"помощью :ref:`ResourceLoader.load_threaded_get_status "
"<class_ResourceLoader_method_load_threaded_get_status>`. Прогресс можно "
"получить, передав переменную-массив через progress, которая вернет массив из "
"одного элемента, содержащий процентное значение."

msgid ""
"Finally, you retrieve loaded resources by "
"calling :ref:`ResourceLoader.load_threaded_get "
"<class_ResourceLoader_method_load_threaded_get>`."
msgstr ""
"Наконец, вы извлекаете загруженные ресурсы, "
"вызывая :ref:`ResourceLoader.load_threaded_get "
"<class_ResourceLoader_method_load_threaded_get>`."

msgid ""
"Once you call ``load_threaded_get()``, either the resource finished loading "
"in the background and will be returned instantly or the load will block at "
"this point like ``load()`` would. If you want to guarantee this does not "
"block, you either need to ensure there is enough time between requesting the "
"load and retrieving the resource or you need to check the status manually."
msgstr ""
"После вызова ``load_threaded_get()`` ресурс либо загрузится в фоновом режиме "
"и будет мгновенно возвращён, либо загрузка заблокируется на этом этапе, как "
"это произошло бы с ``load()``. Чтобы гарантировать отсутствие блокировки, "
"необходимо либо обеспечить достаточный интервал между запросом загрузки и "
"получением ресурса, либо вручную проверить статус загрузки."

msgid "Example"
msgstr "Пример"

msgid ""
"This example demonstrates how to load a scene in the background. We will "
"have a button spawn an enemy when pressed. The enemy will be ``Enemy.tscn`` "
"which we will load on ``_ready`` and instantiate when pressed. The path will "
"be ``\"Enemy.tscn\"`` which is located at ``res://Enemy.tscn``."
msgstr ""
"В этом примере показано, как загрузить сцену на заднем плане. Кнопка будет "
"создавать врага при нажатии. Враг будет ``Enemy.tscn``, который будет "
"загружен при ``_ready`` и создан при нажатии. Путь будет ``\"Enemy.tscn\"``, "
"он расположен по адресу ``res://Enemy.tscn``."

msgid ""
"First, we will start a request to load the resource and connect the button:"
msgstr "Для начала запустим запрос на загрузку ресурса и подключим кнопку:"

msgid ""
"Now ``_on_button_pressed`` will be called when the button is pressed. This "
"method will be used to spawn an enemy."
msgstr ""
"Теперь при нажатии кнопки будет вызываться метод ``_on_button_pressed``. "
"Этот метод будет использоваться для создания врага."
