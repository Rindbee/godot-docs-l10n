#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.4\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating instances"
msgstr "Создание экземпляров"

msgid ""
"This tutorial refers to instancing scenes in the editor. To learn how to "
"instance scenes from code, see :ref:`doc_nodes_and_scene_instances`."
msgstr ""
"Этот урок относится к созданию экземпляров сцен в редакторе. Чтобы узнать, "
"как создавать экземпляры сцен из кода, "
"см. :ref:`doc_nodes_and_scene_instances`."

msgid ""
"Godot's approach to *instancing* described below should not be confused with "
"hardware instancing that can be used to render large amounts of similar "
"objects quickly. See :ref:`doc_using_multimesh` instead."
msgstr ""
"Подход Godot к *экземпляризации (instancing)*, описанный ниже, не следует "
"путать с аппаратной экземпляризацией, которая может использоваться для "
"быстрого рендеринга большого количества похожих объектов. Вместо этого "
"см. :ref:`doc_using_multimesh`."

msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""
"В предыдущей части мы увидели, что сцена - это набор узлов, организованных в "
"древовидную структуру, корнем которой является один узел. Вы можете "
"разделить свой проект на любое количество сцен. Эта функция поможет вам "
"разбить и организовать различные компоненты вашей игры."

msgid ""
"You can create as many scenes as you'd like and save them as files with the "
"``.tscn`` extension, which stands for \"text scene\". The ``label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""
"Вы можете создавать сколько угодно сцен и сохранять их как файлы с "
"расширением ``.tscn``, что означает \"текстовая сцена\" (\"text scene\"). В "
"качестве примера можно привести файл ``label.tscn`` из предыдущего урока. Мы "
"называем эти файлы \"упакованными сценами\", поскольку они содержат "
"информацию о содержимом сцены."

msgid ""
"Here's an example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite2D <class_Sprite2D>` node, and "
"a :ref:`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""
"Вот пример мяча. Он состоит из :ref:`RigidBody2D <class_RigidBody2D>` "
"являющегося корневым узлом с именем Ball, который позволяет мячу падать и "
"отскакивать от стен, узла :ref:`Sprite2D <class_Sprite2D>` и "
"узла :ref:`CollisionShape2D<class_CollisionShape2D>`."

msgid ""
"Once you have saved a scene, it works as a blueprint: you can reproduce it "
"in other scenes as many times as you'd like. Replicating an object from a "
"template like this is called **instancing**."
msgstr ""
"Если вы сохранили сцену, она работает как шаблон: вы можете воспроизводить "
"её в других сценах столько раз, сколько захотите. Воспроизведение объекта по "
"шаблону называется **инстанцирование** (от слова instance - \"экземпляр\")."

msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""
"Как мы упоминали в предыдущей части, инстанцированные сцены ведут себя как "
"узлы: редактор скрывает их содержимое по умолчанию. При экземпляре Ball "
"отображается только узел Ball. Обратите внимание, что каждый дубликат имеет "
"уникальное имя."

msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""
"Каждый экземпляр сцены Ball начинает с той же структуры и свойств, что и "
"``ball.tscn``. Однако вы можете изменять каждый из них независимо, например, "
"изменять то, как они отскакивают, сколько они весят, или любое свойство, "
"открытое исходной сценой."

msgid "In practice"
msgstr "На практике"

msgid ""
"Let's use instancing in practice to see how it works in Godot. We invite you "
"to download the ball's sample project we prepared for you: "
"`instancing_starter.zip <https://github.com/godotengine/godot-docs-project-"
"starters/releases/download/latest-4.x/instancing_starter.zip>`_."
msgstr ""
"Давайте воспользуемся созданием экземпляров (инстанцированием) на практике, "
"чтобы увидеть, как именно оно работает в Godot. Загрузим проект с мячом, "
"который мы подготовили для вас: `instancing_starter.zip <https://github.com/"
"godotengine/godot-docs-project-starters/releases/download/latest-4.x/"
"instancing_starter.zip>`_."

msgid ""
"Extract the archive on your computer. To import it, you need the Project "
"Manager. The Project Manager is accessed by opening Godot, or if you already "
"have Godot opened, click on *Project -> Quit to Project List* (:kbd:`Ctrl + "
"Shift + Q`, :kbd:`Ctrl + Option + Cmd + Q` on macOS)"
msgstr ""
"Распакуйте архив на своём компьютере. Для его импорта вам потребуется "
"Менеджер Проектов. Менеджер Проектов доступен при открытии Godot, либо, если "
"вы уже открыли Godot, кликните на *Проект -> Выйти в список проектов* "
"(Project -> Quit to Project List) (:kbd:`Ctrl + Shift + Q`, :kbd:`Ctrl + "
"Option + Cmd + Q` на macOS)"

msgid ""
"In the Project Manager, click the *Import* button to import the project."
msgstr ""
"В Менеджере Проектов нажмите кнопку *Import*, чтобы импортировать проект."

msgid ""
"In the pop-up that appears navigate to the folder you extracted. Double-"
"click the ``project.godot`` file to open it."
msgstr ""
"В появившемся окне перейдите в папку, которую вы извлекли. Дважды щёлкните "
"по файлу ``project.godot``, чтобы открыть его."

msgid "Finally, click the Import & Edit button."
msgstr ""
"Наконец, нажмите кнопку **Import & Edit button** (Импорт и редактирование)."

msgid ""
"A window notifying you that the project was last opened in an older Godot "
"version may appear, that's not an issue. Click *Ok* to open the project."
msgstr ""
"Может появиться окно с уведомлением о том, что проект в последний раз "
"открывался в более старой версии Godot, это не проблема. Нажмите *Ok*, чтобы "
"открыть проект."

msgid ""
"The project contains two packed scenes: ``main.tscn``, containing walls "
"against which the ball collides, and ``ball.tscn``. The Main scene should "
"open automatically. If you're seeing an empty 3D scene instead of the main "
"scene, click the 2D button at the top of the screen."
msgstr ""
"Проект содержит две упакованные сцены: ``main.tscn``, содержащую стены, о "
"которые ударяется мяч, и ``ball.tscn``. Главная сцена должна открыться "
"автоматически. Если вместо основной сцены вы видите пустую 3D сцену, "
"кликните на кнопку 2D в верхней части экрана."

msgid ""
"Let's add a ball as a child of the Main node. In the Scene dock, select the "
"Main node. Then, click the link icon at the top of the scene dock. This "
"button allows you to add an instance of a scene as a child of the currently "
"selected node."
msgstr ""
"Добавим шар в качестве дочернего элемента узла Main. В панели Scene выберите "
"узел Main. Затем щёлкните значок ссылки в верхней части панели Scene. Эта "
"кнопка позволяет добавить экземпляр сцены и сделать его дочерним узлом "
"выбранного в данный момент узла."

msgid "Double-click the ball scene to instance it."
msgstr "Дважды щелкните на сцену с шаром, чтобы создать ее экземпляр."

msgid "The ball appears in the top-left corner of the viewport."
msgstr "Шар появляется в левом верхнем углу области просмотра."

msgid "Click on it and drag it towards the center of the view."
msgstr "Нажмите на него и перетащите его к центру вида."

msgid ""
"Play the game by pressing :kbd:`F5` (:kbd:`Cmd + B` on macOS). You should "
"see it fall."
msgstr ""
"Запустите игру, нажав :kbd:`F5` (:kbd:`Cmd + B` на macOS). Вы должны "
"увидеть, как он падает."

msgid ""
"Now, we want to create more instances of the Ball node. With the ball still "
"selected, press :kbd:`Ctrl + D` (:kbd:`Cmd + D` on macOS) to call the "
"duplicate command. Click and drag to move the new ball to a different "
"location."
msgstr ""
"Теперь мы хотим создать больше экземпляров узла Ball. Когда шар все ещё "
"выделен, нажмите :kbd:`Ctrl-D` (:kbd:`Cmd-D` на macOS), чтобы вызвать "
"команду дублирования. Щелкните и перетащите, чтобы переместить новый шар в "
"другое место."

msgid "You can repeat this process until you have several in the scene."
msgstr ""
"Вы можете повторять этот процесс до тех пор, пока в сцене не появятся "
"несколько."

msgid ""
"Play the game again. You should now see every ball fall independently from "
"one another. This is what instances do. Each is an independent reproduction "
"of a template scene."
msgstr ""
"Запустите в игру ещё раз. Теперь вы должны увидеть, что каждый шарик падает "
"независимо друг от друга. Это то, что делают экземпляры. Каждый из них "
"является независимым экземпляром сцены-шаблона."

msgid "Editing scenes and instances"
msgstr "Редактирование сцен и экземпляров"

msgid "There is more to instances. With this feature, you can:"
msgstr "И это ещё не всё. С помощью этой особенности вы можете:"

msgid ""
"Change the properties of one ball without affecting the others using the "
"Inspector."
msgstr ""
"Измените свойства одного шара, не затрагивая другие, с помощью Инспектора."

msgid ""
"Change the default properties of every Ball by opening the ``ball.tscn`` "
"scene and making a change to the Ball node there. Upon saving, all instances "
"of the Ball in the project will see their values update."
msgstr ""
"Измените свойства по умолчанию для каждого шара, открыв сцену ``ball.tscn`` "
"и внеся изменения в узел Ball там. После сохранения, все экземпляры Ball в "
"проекте получат новые значения параметров."

msgid ""
"Changing a property on an instance always overrides values from the "
"corresponding packed scene."
msgstr ""
"Изменение свойства экземпляра всегда переопределяет значения из "
"соответствующей упакованной сцены."

msgid ""
"Let's try this. Double-click ``ball.tscn`` in the FileSystem to open it."
msgstr ""
"Давайте попробуем это. Дважды щелкните ``ball.tscn`` в файловой системе, "
"чтобы открыть его."

msgid ""
"In the Scene dock on the left, select the Ball node. Then, in the Inspector "
"on the right, click on the PhysicsMaterial property to expand it."
msgstr ""
"В доке Scene слева выберите узел Ball. Затем в Inspector справа щелкните "
"свойство PhysicsMaterial, чтобы развернуть его."

msgid ""
"Set its Bounce property to ``0.5`` by clicking on the number field, typing "
"``0.5``, and pressing :kbd:`Enter`."
msgstr ""
"Установите свойство Отскакивание (Bounce) в ``0.5``, щелкнув по полю с "
"цифрами, введя ``0.5`` и нажав :kbd:`Enter`."

msgid ""
"Play the game by pressing :kbd:`F5` (:kbd:`Cmd + B` on macOS) and notice how "
"all balls now bounce a lot more. As the Ball scene is a template for all "
"instances, modifying it and saving causes all instances to update "
"accordingly."
msgstr ""
"Запустите игру, нажав :kbd:`F5` (:kbd:`Cmd + B` на macOS), и обратите "
"внимание, что все мячи теперь отскакивают гораздо сильнее. Поскольку сцена "
"\"Ball\" является шаблоном для всех экземпляров, её изменение и сохранение "
"приводит к соответствующему обновлению всех экземпляров."

msgid ""
"Let's now adjust an individual instance. Head back to the Main scene by "
"clicking on the corresponding tab above the viewport."
msgstr ""
"Теперь давайте настроим отдельный экземпляр. Вернитесь к главной сцене, "
"нажав на соответствующую вкладку над окном просмотра."

msgid ""
"Select one of the instanced Ball nodes and, in the Inspector, set its "
"Gravity Scale value to ``10``."
msgstr ""
"Выберите один из экземпляров узла Ball и в инспекторе установите значение "
"Gravity Scale равным ``10``."

msgid "A grey \"revert\" button appears next to the adjusted property."
msgstr "Рядом с измененным свойством появится серая кнопка «вернуть»."

msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""
"Этот значок указывает на то, что вы переопределяете значение из исходной "
"упакованной сцены. Даже если вы измените свойство в исходной сцене, "
"переопределение значения будет сохранено в экземпляре. Нажатие на значок "
"возврата приведет к восстановлению значения свойства в сохраненной сцене."

msgid ""
"Rerun the game and notice how this ball now falls much faster than the "
"others."
msgstr ""
"Запустите игру заново и обратите внимание, что теперь этот шарик падает "
"гораздо быстрее остальных."

msgid ""
"You may notice you are unable to change the values of the PhysicsMaterial of "
"the ball. This is because PhysicsMaterial is a *resource*, and needs to be "
"made unique before you can edit it in a scene that is linking to its "
"original scene. To make a resource unique for one instance, right-click on "
"the **Physics Material** property in the Inspector and click **Make Unique** "
"in the context menu."
msgstr ""
"Вы можете заметить, что вы не можете изменить значения PhysicsMaterial мяча. "
"Это потому, что PhysicsMaterial — это *ресурс*, и его нужно сделать "
"уникальным, прежде чем вы сможете редактировать его в сцене, которая "
"ссылается на его исходную сцену. Чтобы сделать ресурс уникальным для одного "
"экземпляра, щелкните правой кнопкой мыши свойство **Physics Material** в "
"Инспекторе и выберите **Make Unique** в контекстном меню."

msgid ""
"Resources are another essential building block of Godot games we will cover "
"in a later lesson."
msgstr ""
"Ресурсы - это ещё один важный компонент игры Godot, о котором мы расскажем в "
"одном из последующих уроков."

msgid "Scene instances as a design language"
msgstr "Экземпляры сцены как дизайн языка"

msgid ""
"Instances and scenes in Godot offer an excellent design language, setting "
"the engine apart from others out there. We designed Godot around this "
"concept from the ground up."
msgstr ""
"Экземпляры и сцены в Godot предлагают отличный язык проектирования, выделяя "
"движок среди других. Мы с самого начала разрабатывали Godot с учетом этой "
"концепции."

msgid ""
"We recommend dismissing architectural code patterns when making games with "
"Godot, such as Model-View-Controller (MVC) or Entity-Relationship diagrams. "
"Instead, you can start by imagining the elements players will see in your "
"game and structure your code around them."
msgstr ""
"При создании игр с Godot мы рекомендуем отказаться от архитектурных шаблонов "
"кода, таких как Model-View-Controller (MVC) или диаграммы Entity-"
"Relationship. Вместо этого вы можете начать с того, чтобы представить себе "
"элементы, которые игроки увидят в вашей игре, и структурировать код вокруг "
"них."

msgid "For example, you could break down a shooter game like so:"
msgstr "Например, вот как можно представить себе простой шутер:"

msgid ""
"Once you have a diagram, we recommend creating a scene for each element "
"listed in it to develop your game. You'll use instancing, either by code or "
"directly in the editor, to build your tree of scenes."
msgstr ""
"Когда у вас будет диаграмма, то для разработки вашей игры мы рекомендуем "
"создать сцену для каждого элемента, перечисленного в ней. Для построения "
"дерева сцен вы будете использовать инстацирование (создание экземпляров), "
"либо с помощью кода, либо непосредственно в редакторе."

msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""
"Программисты обычно тратят много времени на проектирование абстрактных "
"архитектур и попытки вписать в них компоненты. Проектирование на основе сцен "
"ускоряет и упрощает разработку, позволяя сосредоточиться на логике игры. "
"Поскольку большинство компонентов игры напрямую связаны со сценами, "
"использование дизайна, основанного на экземплярах сцен, означает, что вам "
"нужен немного другой архитектурный код."

msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""
"Вот пример диаграммы сцены для игры с открытым миром с множеством ресурсов и "
"вложенных элементов:"

msgid ""
"Imagine we started by creating the room. We could make a couple of different "
"room scenes, with unique arrangements of furniture in them. Later, we could "
"make a house scene that uses multiple room instances for the interior. We "
"would create a citadel out of many instanced houses and a large terrain on "
"which we would place the citadel. Each of these would be a scene instancing "
"one or more sub-scenes."
msgstr ""
"Представьте, что мы начали с создания комнаты. Мы могли бы сделать пару "
"разных комнатных сцен с уникальной расстановкой мебели в них. Позже мы могли "
"бы создать сцену дома, в которой для интерьера использовалось бы несколько "
"экземпляров комнаты. Мы создадим цитадель из множества экземпляров домов и "
"большого ландшафта, на котором мы разместим цитадель. Каждая из них будет "
"сценой, создающей одну или несколько вложенных сцен."

msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""
"Позже мы можем создать сцены, которые представляют собой стражников, и "
"добавить их в нашу крепость. Потом, они будут добавлены в общий игровой мир."

msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""
"С помощью Godot можно легко итерационно дорабатывать игру, ведь всё, что вам "
"нужно - это создавать и инстанцировать новые сцены. Мы разработали редактор "
"так, чтобы он был доступен и программистам, и дизайнерам, и художникам. В "
"типичном процессе командной разработки могут участвовать 2D или 3D "
"художники, дизайнеры уровней, гейм-дизайнеры и аниматоры, и все они работают "
"с редактором Godot."

msgid "Summary"
msgstr "Подведение итогов"

msgid ""
"Instancing, the process of producing an object from a blueprint, has many "
"handy uses. With scenes, it gives you:"
msgstr ""
"Инстанцирование, процесс создания объекта из шаблона имеет множество "
"полезных применений. Со сценами это даёт вам:"

msgid "The ability to divide your game into reusable components."
msgstr ""
"Возможность разделить свою игру на многократно используемые компоненты."

msgid "A tool to structure and encapsulate complex systems."
msgstr "Инструмент для структурирования и инкапсуляции сложных систем."

msgid ""
"A language to think about your game project's structure in a natural way."
msgstr ""
"Язык, позволяющий думать о структуре вашего игрового проекта естественным "
"образом."
