#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine latest\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making plugins"
msgstr "Fazendo plugins"

msgid "About plugins"
msgstr "Sobre plugins"

msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be "
"made entirely with GDScript and standard scenes, without even reloading the "
"editor. Unlike modules, you don't need to create C++ code nor recompile the "
"engine. While this makes plugins less powerful, there are still many things "
"you can do with them. Note that a plugin is similar to any scene you can "
"already make, except it is created using a script to add editor "
"functionality."
msgstr ""
"Um plug-in é uma ótima maneira de ampliar o editor com ferramentas úteis. "
"Pode ser feito inteiramente com GDScript e cenas padrão, sem precisar "
"recarregar o editor. Ao contrário dos módulos, você não precisa criar código "
"C++ nem recompilar o editor. Embora isso torne os plug-ins menos poderosos, "
"ainda há muitas coisas que você pode fazer com eles. Observe que um plug-in "
"é semelhante a qualquer cena que você já pode criar, exceto que é criado "
"usando um script para adicionar a funcionalidade do editor."

msgid "Creating a plugin"
msgstr "Criando um plugin"

msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as a base to develop and test the plugins."
msgstr ""
"Antes de começar, crie um novo projeto vazio onde quiser. Isso servirá como "
"base para desenvolver e testar os plugins."

msgid ""
"The first thing you need for the editor to identify a new plugin is to "
"create two files: a ``plugin.cfg`` for configuration and a tool script with "
"the functionality. Plugins have a standard path like ``addons/plugin_name`` "
"inside the project folder. Godot provides a dialog for generating those "
"files and placing them where they need to be."
msgstr ""
"A primeira coisa que você precisa para o editor identificar um novo plugin é "
"criar dois arquivos: um ``plugin.cfg`` para configuração e um script de "
"ferramenta com a funcionalidade. Plugins tem um caminho padrão como ``addons/"
"plugin_name`` dentro da pasta do projeto. Godot fornece uma caixa de diálogo "
"para gerar esses arquivos e colocá-los onde precisam estar."

msgid "You will see the dialog appear, like so:"
msgstr "Você verá a caixa de diálogo aparecer, assim:"

msgid "To continue with the example, use the following values:"
msgstr "Para continuar com o exemplo, utilize os seguintes valores:"

msgid "You should end up with a directory structure like this:"
msgstr "Você deve acabar com uma estrutura de diretório como esta:"

msgid "The script file"
msgstr "O arquivo de script"

msgid "This is a good template to use when creating new plugins."
msgstr "Este é um bom modelo para usar ao criar novos plugins."

msgid "A custom node"
msgstr "Um nó personalizado"

msgid ""
"Sometimes you want a certain behavior in many nodes, such as a custom scene "
"or control that can be reused. Instancing is helpful in a lot of cases, but "
"sometimes it can be cumbersome, especially if you're using it in many "
"projects. A good solution to this is to make a plugin that adds a node with "
"a custom behavior."
msgstr ""
"Às vezes, você deseja um determinado comportamento em muitos nós, como uma "
"cena ou controle personalizado que pode ser reutilizado. A instanciação é "
"útil em muitos casos, mas às vezes pode ser complicada, especialmente se "
"você a estiver usando em muitos projetos. Uma boa solução para isso é criar "
"um plugin que adicione um nó com um comportamento personalizado."

msgid ""
"Nodes added via an EditorPlugin are \"CustomType\" nodes. While they work "
"with any scripting language, they have fewer features than :ref:`the Script "
"Class system <doc_gdscript_basics_class_name>`. If you are writing GDScript "
"or NativeScript, we recommend using Script Classes instead."
msgstr ""
"Os nós adicionados por meio de um EditorPlugin são nós \"CustomType\". "
"Embora trabalhem com qualquer linguagem de script, eles têm menos recursos "
"do que :ref:`o sistema Script Class <doc_gdscript_basics_class_name>`. Se "
"você estiver escrevendo GDScript ou NativeScript, recomendamos o uso de "
"classes de script."

msgid ""
"Now, we need to add it as a custom type so it shows on the **Create New "
"Node** dialog. For that, change the ``custom_node.gd`` script to the "
"following:"
msgstr ""
"Agora, precisamos adicioná-lo como um tipo personalizado para que seja "
"exibido na caixa de diálogo **Criar Novo Nó**. Para isso, altere o script "
"``custom_node.gd`` para o seguinte:"

msgid ""
"With that done, the plugin should already be available in the plugin list in "
"the **Project Settings**, so activate it as explained in `Checking the "
"results`_."
msgstr ""
"Feito isso, o plugin já deve estar disponível na lista de plugins em "
"**Configurações do Projeto**, então ative-o conforme explicado em "
"`Verificando os resultados`_."

msgid "Then try it out by adding your new node:"
msgstr "Em seguida, experimente-o adicionando seu novo nó:"

msgid ""
"When you add the node, you can see that it already has the script you "
"created attached to it. Set a text to the button, save and run the scene. "
"When you click the button, you can see some text in the console:"
msgstr ""
"Ao adicionar o nó, você pode ver que ele já tem o script que você criou "
"anexado a ele. Defina um texto para o botão, salve e execute a cena. Ao "
"clicar no botão, você pode ver algum texto no console:"

msgid "A custom dock"
msgstr "Um painel personalizado"

msgid ""
"Sometimes, you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks "
"are just scenes based on Control, so they are created in a way similar to "
"usual GUI scenes."
msgstr ""
"Às vezes, você precisa estender o editor e adicionar ferramentas que estão "
"sempre disponíveis. Uma maneira fácil de fazer isso é adicionar um novo dock "
"com um plug-in. Docks são apenas cenas baseadas em Control, então elas são "
"criadas de forma semelhante às cenas GUI usuais."

msgid ""
"Creating a custom dock is done just like a custom node. Create a new "
"``plugin.cfg`` file in the ``addons/my_custom_dock`` folder, then add the "
"following content to it:"
msgstr ""
"A criação de um painel personalizado é feita exatamente como um nó "
"personalizado. Crie um novo arquivo ``plugin.cfg`` na pasta ``addons/"
"my_custom_dock`` e adicione o seguinte conteúdo a ele:"

msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill it with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` to "
"get a good start."
msgstr ""
"Em seguida, crie o script ``custom_dock.gd`` na mesma pasta. Preencha-o com "
"o :ref:`template que vimos antes <doc_making_plugins_template_code>` para "
"começar bem."

msgid ""
"Since we're trying to add a new custom dock, we need to create the contents "
"of the dock. This is nothing more than a standard Godot scene: just create a "
"new scene in the editor then edit it."
msgstr ""
"Como estamos tentando adicionar um novo painel personalizado, precisamos "
"criar o conteúdo do painel. Isso nada mais é do que uma cena padrão do "
"Godot: basta criar uma nova cena no editor e editá-la."

msgid ""
"For an editor dock, the root node **must** be a :ref:`Control "
"<class_Control>` or one of its child classes. For this tutorial, you can "
"create a single button. The name of the root node will also be the name that "
"appears on the dock tab, so be sure to give it a short and descriptive name. "
"Also, don't forget to add some text to your button."
msgstr ""
"Para um painel do editor, o nó raiz **deve** ser um :ref:`Control "
"<class_Control>` ou uma de suas classes filhas. Para este tutorial, você "
"pode criar um único botão. O nome do nó raiz também será o nome que aparece "
"na guia painel, portanto, certifique-se de fornecer um nome curto e "
"descritivo. Além disso, não se esqueça de adicionar algum texto ao seu botão."

msgid ""
"Save this scene as ``my_dock.tscn``. Now, we need to grab the scene we "
"created then add it as a dock in the editor. For this, you can rely on the "
"function :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` from the :ref:`EditorPlugin "
"<class_EditorPlugin>` class."
msgstr ""
"Salve esta cena como ``my_dock.tscn``. Agora, precisamos pegar a cena que "
"criamos e adicioná-la como um encaixe no editor. Para isso, você pode contar "
"com a função :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` da classe :ref:"
"`EditorPlugin <class_EditorPlugin>`."

msgid "Checking the results"
msgstr "Verificando os resultados"

msgid "Registering autoloads/singletons in plugins"
msgstr "Registrando autoloads/singletons em plugins"

msgid "Use the following code to register a singleton from an editor plugin:"
msgstr ""
"Use o seguinte código para registrar um singleton de um plugin de editor:"

msgid "Going beyond"
msgstr "Indo além"
